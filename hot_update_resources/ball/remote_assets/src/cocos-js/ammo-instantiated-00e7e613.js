System.register([], function (exports, module) {
    'use strict';
    return {
        execute: function () {

            exports({
                A: void 0,
                B: void 0,
                C: void 0,
                E: void 0,
                F: void 0,
                H: void 0,
                I: void 0,
                J: void 0,
                K: void 0,
                L: void 0,
                M: void 0,
                N: void 0,
                Q: void 0,
                R: void 0,
                S: void 0,
                a: void 0,
                aD: void 0,
                aH: IsPowerOf2,
                aI: FormatSize,
                aJ: FormatSurfaceSize,
                aK: GetTypeSize,
                aL: getTypedArrayConstructor,
                aY: void 0,
                b0: void 0,
                b2: mapBuffer,
                b3: freeHandleArray,
                b7: isPropertyPath,
                b8: isCustomPath,
                bE: _applyDecoratedDescriptor,
                bH: _initializerDefineProperty,
                bK: writeBuffer,
                bL: find,
                bN: Enum,
                bO: formerlySerializedAs,
                bQ: type,
                b_: void 0,
                bb: evaluatePath,
                bh: errorID,
                bi: error,
                bl: void 0,
                bn: void 0,
                bp: warnID,
                bq: warn,
                br: readBuffer,
                bt: assertIsNonNullable,
                bx: assertIsTrue,
                by: nextPow2,
                bz: log2,
                c: void 0,
                c1: void 0,
                c2: void 0,
                c5: void 0,
                cA: void 0,
                cB: void 0,
                cG: createMap,
                cH: _getClassId,
                cJ: extname,
                cK: mixin,
                cP: void 0,
                cR: ccenum,
                cY: clamp,
                cf: toRadian,
                ch: genSamplerHash,
                cj: getWorldTransformUntilRoot,
                cm: void 0,
                cn: deleteTransform,
                co: getTransform,
                cp: getWorldMatrix,
                cr: void 0,
                d: void 0,
                d4: void 0,
                d6: void 0,
                dE: toDegree,
                dH: void 0,
                dI: repeat,
                dJ: pseudoRandom,
                dL: randomRange,
                dM: randomRangeInt,
                dN: sign,
                dP: pingPong,
                dR: instantiate,
                dT: equals,
                dV: Eventify,
                dY: absMax,
                dZ: fastRemoveAt,
                d_: createCommonjsModule,
                da: void 0,
                dd: clampf,
                de: addon,
                df: logID,
                dh: void 0,
                dj: void 0,
                dr: lerp,
                ds: contains$1,
                dx: clamp01,
                e0: unwrapExports,
                e1: remove,
                e3: property,
                e5: degreesToRadians,
                e6: radiansToDegrees,
                e7: getError,
                e9: changeBasename,
                eA: rect,
                eB: color,
                eD: approx,
                eE: pseudoRandomRange,
                eF: pseudoRandomRangeInt,
                eG: nextPow2$1,
                eH: inverseLerp,
                eI: absMaxComponent,
                eJ: BitMask,
                eP: setDefaultLogTimes,
                eQ: WorldNode3DToLocalNodeUI,
                eR: WorldNode3DToWorldNodeUI,
                eT: deserialize,
                eb: void 0,
                ec: log,
                ed: mat4,
                ei: isValid,
                em: CCClass,
                eo: setClassAlias,
                et: v2,
                eu: v3,
                ev: v4,
                ew: quat,
                ez: size,
                f: void 0,
                f3: assert,
                f4: assertID,
                f5: isDisplayStats,
                f6: setDisplayStats,
                f7: void 0,
                fM: isPropertyModifier,
                fN: isElementModifier,
                fO: isCustomTargetModifier,
                fP: bezier,
                fQ: bezierByTime,
                fU: sampleAnimationCurve,
                fV: computeRatioByType,
                fY: getPathFromRoot,
                f_: waitForAmmoInstantiation,
                fl: createDefaultPipeline,
                g: void 0,
                h: void 0,
                i: void 0,
                j: void 0,
                k: void 0,
                l: void 0,
                m: murmurhash2_32_gc,
                n: void 0,
                o: void 0,
                p: void 0,
                q: void 0,
                r: void 0,
                s: void 0,
                t: void 0,
                u: void 0,
                v: void 0,
                w: void 0,
                x: void 0,
                y: void 0,
                z: void 0
            });

            const WECHAT = exports('bo', false);
            const ALIPAY = false;
            const BAIDU = false;
            const XIAOMI = false;
            const BYTEDANCE = false;
            const OPPO = false;
            const VIVO = false;
            const HUAWEI = false;
            const COCOSPLAY = false;
            const EDITOR = exports('dG', false);
            const PREVIEW = false;
            const BUILD = true;
            const TEST = false;
            const DEBUG = true;
            const DEV = false;
            const RUNTIME_BASED = exports('dw', false);
            const MINIGAME = exports('du', false);
            const JSB = exports('dv', true);
            const SUPPORT_JIT = true;

            const _global = typeof window === 'undefined' ? global : window;

            const legacyCC = exports('b1', {
              _global
            });
            legacyCC.internal = {};

            {
              _global.CC_BUILD = BUILD;
              _global.CC_TEST = TEST;
              _global.CC_EDITOR = EDITOR;
              _global.CC_PREVIEW = PREVIEW;
              _global.CC_DEV = DEV;
              _global.CC_DEBUG = DEBUG;
              _global.CC_JSB = JSB;
              _global.CC_BYTEDANCE = BYTEDANCE;
              _global.CC_WECHAT = WECHAT;
              _global.CC_ALIPAY = ALIPAY;
              _global.CC_XIAOMI = XIAOMI;
              _global.CC_BAIDU = BAIDU;
              _global.CC_COCOSPLAY = COCOSPLAY;
              _global.CC_HUAWEI = HUAWEI;
              _global.CC_OPPO = OPPO;
              _global.CC_VIVO = VIVO;
              _global.CC_MINIGAME = MINIGAME;
              _global.CC_RUNTIME_BASED = RUNTIME_BASED;
              _global.CC_SUPPORT_JIT = SUPPORT_JIT;
            }

            const engineVersion = exports('ef', '3.2.0');
            _global.CocosEngine = legacyCC.ENGINE_VERSION = engineVersion;
            _global.cc = legacyCC;

            var debugInfos = {
            	"1100": "Expected 'data' dict, but not found. Config file: %s",
            	"1101": "Please load the resource first : %s",
            	"1200": "cocos2d: Director: Error in gettimeofday",
            	"1204": "Running scene should not be null",
            	"1205": "The scene should not be null",
            	"1206": "loadScene: The scene index to load (%s) is out of range.",
            	"1207": "loadScene: Unknown name type to load: '%s'",
            	"1208": "loadScene: Failed to load scene '%s' because '%s' is already being loaded.",
            	"1209": "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
            	"1210": "Failed to preload '%s', %s",
            	"1211": "loadScene: The scene index to load (%s) is out of range.",
            	"1212": "loadScene: Unknown name type to load: '%s'",
            	"1213": "loadScene: Failed to load scene '%s' because '%s' is already loading",
            	"1214": "loadScene: Can not load the scene '%s' because it was not in the build settings before playing.",
            	"1215": "Failed to preload '%s', %s",
            	"1216": "Director.runSceneImmediate: scene is not valid",
            	"1217": "Director._initOnEngineInitialized: renderer root initialization failed",
            	"1300": "%s is not in the model pool and cannot be destroyed by destroyModel.",
            	"1400": "'%s' is deprecated, please use '%s' instead.",
            	"1404": "cc.spriteFrameCache is removed, please use cc.loader to load and cache sprite frames of atlas format.",
            	"1406": "'%s.%s' is removed",
            	"1408": "'%s' is removed",
            	"1409": "element type is wrong!",
            	"1502": "cc.scheduler.scheduleCallbackForTarget(): target should be non-null.",
            	"1503": "cc.Scheduler.pauseTarget():target should be non-null",
            	"1504": "cc.Scheduler.resumeTarget():target should be non-null",
            	"1505": "cc.Scheduler.isTargetPaused():target should be non-null",
            	"1506": "warning: you CANNOT change update priority in scheduled function",
            	"1507": "scheduler#scheduleSelector. Selector already scheduled. Updating interval from: %.4f to %.4f",
            	"1508": "Argument callback must not be empty",
            	"1509": "Argument target must be non-nullptr",
            	"1510": "cc.Scheduler: Illegal target which doesn't have id, you should do Scheduler.enableForTarget(target) before all scheduler API usage on target",
            	"1511": "cc.Scheduler: pause state of the scheduled task doesn't match the element pause state in Scheduler, the given paused state will be ignored.",
            	"1513": "cc.Scheduler: scheduler stopped using `__instanceId` as id since v2.0, you should do Scheduler.enableForTarget(target) before all scheduler API usage on target",
            	"1607": "removeFromParentAndCleanup is deprecated. Use removeFromParent instead",
            	"1619": "callback function must be non-null",
            	"1620": "interval must be positive",
            	"1623": "Set '%s' to normal node (not persist root node).",
            	"1624": "Replacing with the same sgNode",
            	"1625": "The replacement sgNode should not contain any child.",
            	"1626": "Should not set alpha via 'color', set 'opacity' please.",
            	"1627": "Not support for asynchronous creating node in SG",
            	"1632": "Node name can not include '/'.",
            	"1633": "Internal error, should not remove unknown node from parent.",
            	"1635": "reorderChild: this child is not in children list.",
            	"1636": "Node's zIndex value can't be greater than cc.macro.MAX_ZINDEX, setting to the maximum value",
            	"1637": "Node's zIndex value can't be smaller than cc.macro.MIN_ZINDEX, setting to the minimum value",
            	"1638": "Private node's zIndex can't be set, it will keep cc.macro.MIN_ZINDEX as its value",
            	"1800": "cc._EventListenerKeyboard.checkAvailable(): Invalid EventListenerKeyboard!",
            	"1801": "cc._EventListenerTouchOneByOne.checkAvailable(): Invalid EventListenerTouchOneByOne!",
            	"1802": "cc._EventListenerTouchAllAtOnce.checkAvailable(): Invalid EventListenerTouchAllAtOnce!",
            	"1803": "cc._EventListenerAcceleration.checkAvailable():_onAccelerationEvent must be non-nil",
            	"1900": "Invalid parameter.",
            	"2200": "Design resolution not valid",
            	"2201": "should set resolutionPolicy",
            	"2300": "The touches is more than MAX_TOUCHES, nUnusedIndex = %s",
            	"2402": "Forward pipeline startup failed!",
            	"3103": "cc.Texture.addImage(): path should be non-null",
            	"3119": "Lazy init texture with image element failed due to image loading failure: %s",
            	"3120": "Loading texture with unsupported type: '%s'. Add '%s' into 'cc.macro.SUPPORT_TEXTURE_FORMATS' please.",
            	"3121": "Can't find a texture format supported by the current platform! Please add a fallback format in the editor.",
            	"3300": "Rect width exceeds maximum margin: %s",
            	"3301": "Rect height exceeds maximum margin: %s",
            	"3500": "0 priority is forbidden for fixed priority since it's used for scene graph based priority.",
            	"3501": "Invalid listener type!",
            	"3502": "Can't set fixed priority with scene graph based listener.",
            	"3503": "Invalid parameters.",
            	"3504": "listener must be a cc.EventListener object when adding a fixed priority listener",
            	"3505": "The listener has been registered, please don't register it again.",
            	"3506": "Unsupported listener target.",
            	"3507": "Invalid scene graph priority!",
            	"3508": "If program goes here, there should be event in dispatch.",
            	"3509": "_inDispatch should be 1 here.",
            	"3510": "%s's scene graph node not contains in the parent's children",
            	"3511": "event is undefined",
            	"3512": "Event manager only support scene graph priority for ui nodes which contain UIComponent",
            	"3520": "Device Motion Event request permission: %s",
            	"3521": "Device Motion Event request permission failed: %s",
            	"3601": "The editor property 'playOnFocus' should be used with 'executeInEditMode' in class '%s'",
            	"3602": "Unknown editor property '%s' in class '%s'.",
            	"3603": "Use 'cc.Float' or 'cc.Integer' instead of 'cc.Number' please.",
            	"3604": "Can only indicate one type attribute for %s.",
            	"3605": "The default value of %s is not instance of %s.",
            	"3606": "No needs to indicate the '%s' attribute for %s, which its default value is type of %s.",
            	"3607": "The default value of %s must be an empty string.",
            	"3608": "The type of %s must be CCString, not String.",
            	"3609": "The type of %s must be CCBoolean, not Boolean.",
            	"3610": "The type of %s must be CCFloat or CCInteger, not Number.",
            	"3611": "Can not indicate the '%s' attribute for %s, which its default value is type of %s.",
            	"3612": "%s Just set the default value to 'new %s()' and it will be handled properly.",
            	"3613": "'No need to use 'serializable: false' or 'editorOnly: true' for the getter of '%s.%s', every getter is actually non-serialized.",
            	"3614": "Should not define constructor for cc.Component %s.",
            	"3615": "Each script can have at most one Component.",
            	"3616": "Should not specify class name %s for Component which defines in project.",
            	"3618": "ctor of '%s' can not be another CCClass",
            	"3623": "Can not use 'editor' attribute, '%s' not inherits from Components.",
            	"3625": "[isChildClassOf] superclass should be function type, not",
            	"3626": "Can't remove '%s' because '%s' depends on it.",
            	"3627": "Should not add renderer component (%s) to a Canvas node.",
            	"3628": "Should not add %s to a node which size is already used by its other component.",
            	"3633": "Properties function of '%s' should return an object!",
            	"3634": "Disallow to use '.' in property name",
            	"3637": "Can not declare %s.%s, it is already defined in the prototype of %s",
            	"3639": "Can not apply the specified attribute to the getter of '%s.%s', attribute index: %s",
            	"3640": "'%s': the setter of '%s' is already defined!",
            	"3641": "Can not construct %s because it contains object property.",
            	"3644": "Please define 'type' parameter of %s.%s as the actual constructor.",
            	"3645": "Please define 'type' parameter of %s.%s as the constructor of %s.",
            	"3646": "Unknown 'type' parameter of %s.%s：%s",
            	"3647": "The length of range array must be equal or greater than 2",
            	"3648": "Can not declare %s.%s method, it is already defined in the properties of %s.",
            	"3652": "Failed to `new %s()` under the hood, %s\nIt is used for getting default values declared in TypeScript in the first place.\nPlease ensure the constructor can be called during the script's initialization.",
            	"3653": "Please do not specifiy \"default\" attribute in decorator of \"%s\" property in \"%s\" class.\nDefault value must be initialized at their declaration:\n\n \n// Before:\n@property({\n  type: cc.SpriteFrame\n  default: null  // <--\n})\nmyProp;\n// After:\n@property({\n  type: cc.SpriteFrame\n})\nmyProp = null;   // <--",
            	"3654": "Please specifiy a default value for \"%s.%s\" property at its declaration:\n\n \n// Before:\n@property(...)\nmyProp;\n// After:\n@property(...)\nmyProp = 0;",
            	"3655": "Can not specifiy \"get\" or \"set\"  attribute in decorator for \"%s\" property in \"%s\" class.\nPlease use:\n\n \n@property(...)\nget %s () {\n    ...\n}\n@property\nset %s (value) {\n    ...\n}",
            	"3659": "Violation error: extending enumerations shall have non-overlaped member names or member values",
            	"3660": "You are explicitly specifying `undefined` type to cc property \"%s\" of cc class \"%s\".\nIs this intended? If not, this may indicate a circular reference.\nFor example:\n\n \n// foo.ts\nimport { _decorator } from 'cc';\nimport { Bar } from './bar';  // Given that './bar' also reference 'foo.ts'.\n                              // When importing './bar', execution of './bar' is hung on to wait execution of 'foo.ts',\n                              // the `Bar` imported here is `undefined` until './bar' finish its execution.\n                              // It leads to that\n@_decorator.ccclass           //  ↓\nexport class Foo {            //  ↓\n    @_decorator.type(Bar)     //  → is equivalent to `@_decorator.type(undefined)`\n    public bar: Bar;          // To eliminate this error, either:\n                              // - Refactor your module structure(recommended), or\n                              // - specify the type as cc class name: `@_decorator.type('Bar'/* or any name you specified for `Bar` */)`\n}",
            	"3700": "internal error: _prefab is undefined",
            	"3701": "Failed to load prefab asset for node '%s'",
            	"3800": "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
            	"3801": "The node can not be made persist because it's not under root node.",
            	"3802": "The node can not be made persist because it's not in current scene.",
            	"3803": "The target can not be made persist because it's not a cc.Node or it doesn't have _id property.",
            	"3804": "getComponent: Type must be non-nil",
            	"3805": "Can't add component '%s' because %s already contains the same component.",
            	"3806": "Can't add component '%s' to %s because it conflicts with the existing '%s' derived component.",
            	"3807": "addComponent: Failed to get class '%s'",
            	"3808": "addComponent: Should not add component ('%s') when the scripts are still loading.",
            	"3809": "addComponent: The component to add must be a constructor",
            	"3810": "addComponent: The component to add must be child class of cc.Component",
            	"3811": "_addComponentAt: The component to add must be a constructor",
            	"3812": "_addComponentAt: Index out of range",
            	"3813": "removeComponent: Component must be non-nil",
            	"3814": "Argument must be non-nil",
            	"3815": "Component not owned by this entity",
            	"3816": "Node '%s' is already activating",
            	"3817": "Sorry, the component of '%s' which with an index of %s is corrupted! It has been removed.",
            	"3818": "Failed to read or parse project.json",
            	"3819": "Warning: target element is not a DIV or CANVAS",
            	"3820": "The renderer doesn't support the renderMode %s",
            	"3821": "Cannot change hierarchy while activating or deactivating the parent.",
            	"3822": "addComponent: Cannot add any component to the scene.",
            	"3900": "Invalid clip to add",
            	"3901": "Invalid clip to remove",
            	"3902": "clip is defaultClip, set force to true to force remove clip and animation state",
            	"3903": "animation state is playing, set force to true to force stop and remove clip and animation state",
            	"3904": "motion path of target [%s] in prop [%s] frame [%s] is not valid",
            	"3905": "sprite frames must be an Array.",
            	"3906": "Can't find easing type [%s]",
            	"3907": "animator not added or already removed",
            	"3912": "already-playing",
            	"4003": "Label font size can't be shirnked less than 0!",
            	"4004": "force notify all fonts loaded!",
            	"4011": "Property spriteFrame of Font '%s' is invalid. Using system font instead.",
            	"4012": "The texture of Font '%s' must be already loaded on JSB. Using system font instead.",
            	"4013": "Sorry, lineHeight of system font not supported on JSB.",
            	"4200": "MaskType: IMAGE_STENCIL only support WebGL mode.",
            	"4201": "The alphaThreshold invalid in Canvas Mode.",
            	"4202": "The inverted invalid in Canvas Mode.",
            	"4300": "Can not found the %s page.",
            	"4301": "Can not add a page without UITransform.",
            	"4302": "Can not set the scroll view content when it hasn't UITransform or its parent hasn't UITransform.",
            	"4400": "Invalid RichText img tag! The sprite frame name can't be found in the ImageAtlas!",
            	"4500": "Graphics: There is no model in %s.",
            	"4600": "Script attached to '%s' is missing or invalid.",
            	"4700": "The dom control is not created!",
            	"4800": "unknown asset type",
            	"4901": "loadRes: should not specify the extname in %s %s",
            	"4902": "No need to release non-cached asset.",
            	"4914": "Resources url '%s' does not exist.",
            	"4915": "Pack indices and data do not match in size",
            	"4916": "Failed to download package for %s",
            	"4921": "Invalid pipe or invalid index provided!",
            	"4922": "The pipe to be inserted is already in the pipeline!",
            	"4923": "Uuid Loader: Parse asset [ %s ] failed : %s",
            	"4924": "JSON Loader: Input item doesn't contain string content",
            	"4925": "Uuid Loader: Deserialize asset [ %s ] failed : %s",
            	"4926": "Audio Downloader: no web audio context.",
            	"4927": "Audio Downloader: audio not supported on this browser!",
            	"4928": "Load %s failed!",
            	"4929": "Load Webp ( %s ) failed",
            	"4930": "Load image ( %s ) failed",
            	"4932": "Since v1.10, for any atlas (\"%s\") in the \"resources\" directory, it is not possible to find the contained SpriteFrames via `loadRes`, `getRes` or `releaseRes`. Load the SpriteAtlas first and then use `spriteAtlas.getSpriteFrame(name)` instead please.",
            	"4933": "Download Font [ %s ] failed, using Arial or system default font instead",
            	"4934": "Please assure that the full path of sub asset is correct!",
            	"4935": "Failed to skip prefab asset while deserializing PrefabInfo",
            	"5000": "You are trying to destroy a object twice or more.",
            	"5001": "object not yet destroyed",
            	"5100": "Not a plist file!",
            	"5200": "Warning: localStorage isn't enabled. Please confirm browser cookie or privacy option",
            	"5201": "browser don't support web audio",
            	"5202": "This feature supports WebGL render mode only.",
            	"5300": "Type of target to deserialize not matched with data: target is %s, data is %s",
            	"5301": "Can not find script '%s'",
            	"5302": "Can not find class '%s'",
            	"5303": "Failed to deserialize %s, missing _deserialize function.",
            	"5304": "Unable to deserialize version %s data.",
            	"5402": "cc.js.addon called on non-object:",
            	"5403": "cc.js.mixin: arguments must be type object:",
            	"5404": "The base class to extend from must be non-nil",
            	"5405": "The class to extend must be non-nil",
            	"5406": "Class should be extended before assigning any prototype members.",
            	"5500": "'notify' can not be used in 'get/set' !",
            	"5501": "'notify' must be used with 'default' !",
            	"5507": "The 'default' attribute of '%s.%s' must be an array",
            	"5508": "Invalid type of %s.%s",
            	"5510": "The 'type' attribute of '%s.%s' can not be 'Number', use cc.Float or cc.Integer instead please.",
            	"5511": "The 'type' attribute of '%s.%s' is undefined when loading script",
            	"5512": "Can not serialize '%s.%s' because the specified type is anonymous, please provide a class name or set the 'serializable' attribute of '%s.%s' to 'false'.",
            	"5513": "The 'default' value of '%s.%s' should not be used with a 'get' function.",
            	"5514": "The 'default' value of '%s.%s' should not be used with a 'set' function.",
            	"5515": "The 'default' value of '%s.%s' can not be an constructor. Set default to null please.",
            	"5517": "'%s.%s' hides inherited property '%s.%s'. To make the current property override that implementation, add the `override: true` attribute please.",
            	"5601": "Can not get current scene.",
            	"5602": "Scene is destroyed",
            	"5603": "reference node is destroyed",
            	"5700": "no %s or %s on %s",
            	"5800": "%s.lerp not yet implemented.",
            	"5801": "%s.clone not yet implemented.",
            	"5802": "%s.equals not yet implemented.",
            	"5900": "MotionStreak only support WebGL mode.",
            	"5901": "cc.MotionStreak.getOpacity has not been supported.",
            	"5902": "cc.MotionStreak.setOpacity has not been supported.",
            	"6000": "Custom should not be false if file is not specified.",
            	"6001": "The new %s must not be NaN",
            	"6017": "Incomplete or corrupt PNG file",
            	"6018": "Invalid filter algorithm: %s",
            	"6019": "Invalid byte order value.",
            	"6020": "You forgot your towel!",
            	"6021": "Unknown Field Tag: %s",
            	"6022": "Too many bits requested",
            	"6023": "No bits requested",
            	"6024": "Cannot recover from missing StripByteCounts",
            	"6025": "Cannot handle sub-byte bits per sample",
            	"6026": "Cannot handle sub-byte bits per pixel",
            	"6027": "Palette image missing color map",
            	"6028": "Unknown Photometric Interpretation: %s",
            	"6029": "Unkown error",
            	"6030": "cc.ParticleSystem: error decoding or ungzipping textureImageData",
            	"6031": "cc.ParticleSystem: unknown image format with Data",
            	"6032": "cc.ParticleSystem.initWithDictionary() : error loading the texture",
            	"6400": "asset.url is not usable in core process",
            	"6402": "AssetLibrary has already been initialized!",
            	"6500": "Widget target must be one of the parent nodes of it",
            	"6600": "collider not added or already removed",
            	"6601": "Can't find testFunc for (%s, $s).",
            	"6700": "Can't init canvas '%s' because it conflicts with the existing '%s', the scene should only have one active canvas at the same time.",
            	"6705": "Argument must be non-nil",
            	"6706": "Priority can't be set in RenderRoot2D node",
            	"6800": "Callback of event must be non-nil",
            	"6801": "The message must be provided",
            	"6900": "The thing you want to instantiate must be an object",
            	"6901": "The thing you want to instantiate is nil",
            	"6902": "The thing you want to instantiate is destroyed",
            	"6903": "The instantiate method for given asset do not implemented",
            	"6904": "Can not instantiate array",
            	"6905": "Can not instantiate DOM element",
            	"7100": "%s already defined in Enum.",
            	"7101": "Sorry, 'cc.Enum' not available on this platform, please report this error here: <https://github.com/cocos-creator/engine/issues/new>",
            	"7200": "Method 'initWithTMXFile' is no effect now, please set property 'tmxAsset' instead.",
            	"7201": "Method 'initWithXML' is no effect now, please set property 'tmxAsset' instead.",
            	"7202": "Add component TiledLayer into node failed.",
            	"7203": "Property 'mapLoaded' is unused now. Please write the logic to the callback 'start'.",
            	"7210": "TMX Hexa zOrder not supported",
            	"7211": "TMX invalid value",
            	"7215": "cocos2d: Warning: TMX Layer %s has no tiles",
            	"7216": "cocos2d: TMXFormat: Unsupported TMX version: %s",
            	"7217": "cocos2d: TMXFomat: Unsupported orientation: %s",
            	"7218": "cc.TMXMapInfo.parseXMLFile(): unsupported compression method",
            	"7219": "cc.TMXMapInfo.parseXMLFile(): Only base64 and/or gzip/zlib maps are supported",
            	"7221": "cc.TMXMapInfo.parseXMLFile(): Texture '%s' not found.",
            	"7222": "Parse %s failed.",
            	"7236": "cc.TMXLayer.getTileAt(): TMXLayer: the tiles map has been released",
            	"7237": "cc.TMXLayer.getTileGIDAt(): TMXLayer: the tiles map has been released",
            	"7238": "cc.TMXLayer.setTileGID(): TMXLayer: the tiles map has been released",
            	"7239": "cc.TMXLayer.setTileGID(): invalid gid: %s",
            	"7240": "cc.TMXLayer.getTileFlagsAt(): TMXLayer: the tiles map has been released",
            	"7241": "cc.TiledMap.initWithXML(): Map not found. Please check the filename.",
            	"7401": "Failed to set _defaultArmatureIndex for '%s' because the index is out of range.",
            	"7402": "Failed to set _animationIndex for '%s' because the index is out of range.",
            	"7501": "Failed to set _defaultSkinIndex for '%s' because the index is out of range.",
            	"7502": "Failed to set _animationIndex for '%s' because its skeletonData is invalid.",
            	"7503": "Failed to set _animationIndex for '%s' because the index is out of range.",
            	"7504": "Can not render dynamic created SkeletonData",
            	"7506": "Failed to load spine atlas '$s'",
            	"7507": "Please re-import '%s' because its textures is not initialized! (This workflow will be improved in the future.)",
            	"7508": "The atlas asset of '%s' is not exists!",
            	"7509": "Spine: Animation not found: %s",
            	"7510": "Spine: Animation not found: %s",
            	"7600": "The context of RenderTexture is invalid.",
            	"7601": "cc.RenderTexture._initWithWidthAndHeightForWebGL() : only RGB and RGBA formats are valid for a render texture;",
            	"7602": "Could not attach texture to the framebuffer",
            	"7603": "clearDepth isn't supported on Cocos2d-Html5",
            	"7604": "saveToFile isn't supported on Cocos2d-Html5",
            	"7605": "newCCImage isn't supported on Cocos2d-Html5",
            	"7700": "On the web is always keep the aspect ratio",
            	"7701": "Can't know status",
            	"7702": "Video player's duration is not ready to get now!",
            	"7703": "Video Downloader: video not supported on this browser!",
            	"7800": "Web does not support loading",
            	"7801": "Web does not support query history",
            	"7802": "Web does not support query history",
            	"7803": "The current browser does not support the GoBack",
            	"7804": "The current browser does not support the GoForward",
            	"7805": "Web does not support zoom",
            	"7900": "cc.math.Matrix3.assign(): current matrix equals matIn",
            	"7901": "cc.math.mat4Assign(): pOut equals pIn",
            	"7902": "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
            	"7903": "cc.math.Matrix4 equal: pMat1 and pMat2 are same object.",
            	"7904": "cc.math.Matrix4.extractPlane: Invalid plane index",
            	"7905": "cc.math.mat4Assign(): pOut equals pIn",
            	"7906": "cc.mat.Matrix4.assignFrom(): mat4 equals current matrix",
            	"7907": "cc.math.Matrix4 equals: pMat1 and pMat2 are same object.",
            	"7908": "Invalid matrix mode specified",
            	"7909": "current quaternion is an invalid value",
            	"8000": "Can't handle this field type or size",
            	"8001": "No bytes requested",
            	"8002": "Too many bytes requested",
            	"8003": "Missing StripByteCounts!",
            	"8100": "cocos2d: ERROR: Failed to compile shader:\n %s",
            	"8101": "cocos2d: ERROR: Failed to compile vertex shader",
            	"8102": "cocos2d: ERROR: Failed to compile fragment shader",
            	"8103": "cc.GLProgram.link(): Cannot link invalid program",
            	"8104": "cocos2d: ERROR: Failed to link program: %s",
            	"8105": "cocos2d: cc.shaderCache._loadDefaultShader, error shader type",
            	"8106": "Please load the resource firset : %s",
            	"8107": "cc.GLProgram.getUniformLocationForName(): uniform name should be non-null",
            	"8108": "cc.GLProgram.getUniformLocationForName(): Invalid operation. Cannot get uniform location when program is not initialized",
            	"8109": "modelView matrix is undefined.",
            	"8200": "Please set node's active instead of rigidbody's enabled.",
            	"8300": "Should only one camera exists, please check your project.",
            	"8301": "Camera does not support Canvas Mode.",
            	"8400": "Wrong type arguments, 'filePath' must be a String.",
            	"9000": "Stencil manager does not support level bigger than %d in this device.",
            	"9001": "Stencil manager is already empty, cannot pop any mask",
            	"9100": "texture size exceeds current device limits %d/%d",
            	"9300": "The current buffer beyond the limit in ui static component, please reduce the amount",
            	"9301": "The UI has not been initialized",
            	"9302": "Can't getGFXSampler with out device",
            	"9600": "[Physics]: please check to see if physics modules are included",
            	"9610": "[Physics]: cannon.js physics system doesn't support capsule collider",
            	"9611": "[Physics]: builtin physics system doesn't support mesh collider",
            	"9612": "[Physics]: builtin physics system doesn't support cylinder collider",
            	"9620": "[Physics][Ammo]: changing the mesh is not supported after the initialization is completed",
            	"10001": "The sub-mesh contains %d vertices, which beyonds the capability (%d vertices most) of renderer of your platform.",
            	"10002": "Sub-mesh may include at most %d morph targets, but you specified %d.",
            	"11000": "WebGL context lost.",
            	"12001": "BlendFactors are disabled when using custom material, please modify the blend state in the material instead.",
            	"12002": "Can't add renderable component to this node because it already have one.",
            	"12004": "SubModel can only support %d passes.",
            	"12100": "The font size is too big to be fitted into texture atlas. Please switch to other label cache modes or choose a smaller font size.",
            	"0100": "%s not yet implemented.",
            	"0200": "You should specify a valid DOM canvas element."
            };

            let logList = null;
            let ccLog = console.log.bind(console);
            let ccWarn = ccLog;
            let ccError = ccLog;

            let ccAssert = (condition, message, ...optionalParams) => {
              if (!condition) {
                console.log(`ASSERT: ${formatString(message, ...optionalParams)}`);
              }
            };

            let ccDebug = ccLog;

            function formatString(message, ...optionalParams) {
              return legacyCC.js.formatStr.apply(null, [message].concat(optionalParams));
            }

            function log(message, ...optionalParams) {
              return ccLog(message, ...optionalParams);
            }
            function warn(message, ...optionalParams) {
              return ccWarn(message, ...optionalParams);
            }
            function error(message, ...optionalParams) {
              return ccError(message, ...optionalParams);
            }
            function assert(value, message, ...optionalParams) {
              return ccAssert(value, message, ...optionalParams);
            }
            function debug(...data) {
              return ccDebug(...data);
            }
            function _resetDebugSetting(mode) {
              ccLog = ccWarn = ccError = ccAssert = ccDebug = () => {};

              if (mode === DebugMode.NONE) {
                return;
              }

              if (mode > DebugMode.ERROR) {
                const logToWebPage = msg => {
                  if (!legacyCC.game.canvas) {
                    return;
                  }

                  if (!logList) {
                    const logDiv = document.createElement('Div');
                    logDiv.setAttribute('id', 'logInfoDiv');
                    logDiv.setAttribute('width', '200');
                    logDiv.setAttribute('height', legacyCC.game.canvas.height);
                    const logDivStyle = logDiv.style;
                    logDivStyle.zIndex = '99999';
                    logDivStyle.position = 'absolute';
                    logDivStyle.top = logDivStyle.left = '0';
                    logList = document.createElement('textarea');
                    logList.setAttribute('rows', '20');
                    logList.setAttribute('cols', '30');
                    logList.setAttribute('disabled', 'true');
                    const logListStyle = logList.style;
                    logListStyle.backgroundColor = 'transparent';
                    logListStyle.borderBottom = '1px solid #cccccc';
                    logListStyle.borderTopWidth = logListStyle.borderLeftWidth = logListStyle.borderRightWidth = '0px';
                    logListStyle.borderTopStyle = logListStyle.borderLeftStyle = logListStyle.borderRightStyle = 'none';
                    logListStyle.padding = '0px';
                    logListStyle.margin = '0px';
                    logDiv.appendChild(logList);
                    legacyCC.game.canvas.parentNode.appendChild(logDiv);
                  }

                  logList.value = `${logList.value + msg}\r\n`;
                  logList.scrollTop = logList.scrollHeight;
                };

                ccError = (message, ...optionalParams) => {
                  logToWebPage(`ERROR :  ${formatString(message, ...optionalParams)}`);
                };

                ccAssert = (condition, message, ...optionalParams) => {
                  if (!condition) {
                    logToWebPage(`ASSERT: ${formatString(message, ...optionalParams)}`);
                  }
                };

                if (mode !== DebugMode.ERROR_FOR_WEB_PAGE) {
                  ccWarn = (message, ...optionalParams) => {
                    logToWebPage(`WARN :  ${formatString(message, ...optionalParams)}`);
                  };
                }

                if (mode === DebugMode.INFO_FOR_WEB_PAGE) {
                  ccLog = (message, ...optionalParams) => {
                    logToWebPage(formatString(message, ...optionalParams));
                  };
                }
              } else if (console) {
                if (!console.error) {
                  console.error = console.log;
                }

                if (!console.warn) {
                  console.warn = console.log;
                }

                if ( console.error.bind) {
                  ccError = console.error.bind(console);
                } else {
                  ccError =  console.error ;
                }

                ccAssert = (condition, message, ...optionalParams) => {
                  if (!condition) {
                    const errorText = formatString(message, ...optionalParams);

                    {
                      throw new Error(errorText);
                    }
                  }
                };
              }

              if (mode !== DebugMode.ERROR) {
                if (console.warn.bind) {
                  ccWarn = console.warn.bind(console);
                } else {
                  ccWarn =  console.warn ;
                }
              }

              if (mode === DebugMode.INFO) {
                {
                  if (scriptEngineType === 'JavaScriptCore') {
                    ccLog = (message, ...optionalParams) => console.log.apply(console, [message, ...optionalParams]);
                  } else {
                    ccLog = console.log;
                  }
                }
              }

              if (mode <= DebugMode.VERBOSE) {
                if (typeof console.debug === 'function') {
                  const vendorDebug = console.debug;

                  ccDebug = (...data) => vendorDebug(...data);
                }
              }
            }
            function _throw(error_) {
              {
                const stack = error_.stack;

                if (stack) {
                  error( `${error_}\n${stack}` );
                } else {
                  error(error_);
                }

                return undefined;
              }
            }

            function getTypedFormatter(type) {
              return (id, ...args) => {
                const msg =  debugInfos[id] || 'unknown id' ;

                if (args.length === 0) {
                  return msg;
                }

                return  formatString(msg, ...args) ;
              };
            }

            const logFormatter = getTypedFormatter();
            function logID(id, ...optionalParams) {
              log(logFormatter(id, ...optionalParams));
            }
            const warnFormatter = getTypedFormatter();
            function warnID(id, ...optionalParams) {
              warn(warnFormatter(id, ...optionalParams));
            }
            const errorFormatter = getTypedFormatter();
            function errorID(id, ...optionalParams) {
              error(errorFormatter(id, ...optionalParams));
            }
            const assertFormatter = getTypedFormatter();
            function assertID(condition, id, ...optionalParams) {
              if (condition) {
                return;
              }

              assert(false, assertFormatter(id, ...optionalParams));
            }
            let DebugMode;

            (function (DebugMode) {
              DebugMode[DebugMode["NONE"] = 0] = "NONE";
              DebugMode[DebugMode["VERBOSE"] = 1] = "VERBOSE";
              DebugMode[DebugMode["INFO"] = 2] = "INFO";
              DebugMode[DebugMode["WARN"] = 3] = "WARN";
              DebugMode[DebugMode["ERROR"] = 4] = "ERROR";
              DebugMode[DebugMode["INFO_FOR_WEB_PAGE"] = 5] = "INFO_FOR_WEB_PAGE";
              DebugMode[DebugMode["WARN_FOR_WEB_PAGE"] = 6] = "WARN_FOR_WEB_PAGE";
              DebugMode[DebugMode["ERROR_FOR_WEB_PAGE"] = 7] = "ERROR_FOR_WEB_PAGE";
            })(DebugMode || (DebugMode = exports('f7', {})));

            function getError(errorId, ...param) {
              return errorFormatter(errorId, ...param);
            }
            function isDisplayStats() {
              return legacyCC.profiler ? legacyCC.profiler.isShowingStats() : false;
            }
            function setDisplayStats(displayStats) {
              if (legacyCC.profiler) {
                displayStats ? legacyCC.profiler.showStats() : legacyCC.profiler.hideStats();
                legacyCC.game.config.showFPS = !!displayStats;
              }
            }

            var debug$1 = /*#__PURE__*/Object.freeze({
                __proto__: null,
                log: log,
                warn: warn,
                error: error,
                assert: assert,
                debug: debug,
                _resetDebugSetting: _resetDebugSetting,
                _throw: _throw,
                logID: logID,
                warnID: warnID,
                errorID: errorID,
                assertID: assertID,
                get DebugMode () { return DebugMode; },
                getError: getError,
                isDisplayStats: isDisplayStats,
                setDisplayStats: setDisplayStats
            });

            const INT_BITS = 32;
            const INT_MAX = exports('dQ', 0x7fffffff);
            const INT_MIN = -1 << INT_BITS - 1;
            function sign(v) {
              return (v > 0) - (v < 0);
            }
            function abs(v) {
              const mask = v >> INT_BITS - 1;
              return (v ^ mask) - mask;
            }
            function min(x, y) {
              return y ^ (x ^ y) & -(x < y);
            }
            function max(x, y) {
              return x ^ (x ^ y) & -(x < y);
            }
            function isPow2(v) {
              return !(v & v - 1) && !!v;
            }
            function log2(v) {
              let r;
              let shift;
              r = (v > 0xFFFF) << 4;
              v >>>= r;
              shift = (v > 0xFF) << 3;
              v >>>= shift;
              r |= shift;
              shift = (v > 0xF) << 2;
              v >>>= shift;
              r |= shift;
              shift = (v > 0x3) << 1;
              v >>>= shift;
              r |= shift;
              return r | v >> 1;
            }
            function log10(v) {
              return v >= 1000000000 ? 9 : v >= 100000000 ? 8 : v >= 10000000 ? 7 : v >= 1000000 ? 6 : v >= 100000 ? 5 : v >= 10000 ? 4 : v >= 1000 ? 3 : v >= 100 ? 2 : v >= 10 ? 1 : 0;
            }
            function popCount(v) {
              v -= v >>> 1 & 0x55555555;
              v = (v & 0x33333333) + (v >>> 2 & 0x33333333);
              return (v + (v >>> 4) & 0xF0F0F0F) * 0x1010101 >>> 24;
            }
            function countTrailingZeros(v) {
              let c = 32;
              v &= -v;

              if (v) {
                c--;
              }

              if (v & 0x0000FFFF) {
                c -= 16;
              }

              if (v & 0x00FF00FF) {
                c -= 8;
              }

              if (v & 0x0F0F0F0F) {
                c -= 4;
              }

              if (v & 0x33333333) {
                c -= 2;
              }

              if (v & 0x55555555) {
                c -= 1;
              }

              return c;
            }
            function nextPow2(v) {
              v += v === 0;
              --v;
              v |= v >>> 1;
              v |= v >>> 2;
              v |= v >>> 4;
              v |= v >>> 8;
              v |= v >>> 16;
              return v + 1;
            }
            function prevPow2(v) {
              v |= v >>> 1;
              v |= v >>> 2;
              v |= v >>> 4;
              v |= v >>> 8;
              v |= v >>> 16;
              return v - (v >>> 1);
            }
            function parity(v) {
              v ^= v >>> 16;
              v ^= v >>> 8;
              v ^= v >>> 4;
              v &= 0xf;
              return 0x6996 >>> v & 1;
            }
            const REVERSE_TABLE = new Array(256);

            (tab => {
              for (let i = 0; i < 256; ++i) {
                let v = i;
                let r = i;
                let s = 7;

                for (v >>>= 1; v; v >>>= 1) {
                  r <<= 1;
                  r |= v & 1;
                  --s;
                }

                tab[i] = r << s & 0xff;
              }
            })(REVERSE_TABLE);

            function reverse(v) {
              return REVERSE_TABLE[v & 0xff] << 24 | REVERSE_TABLE[v >>> 8 & 0xff] << 16 | REVERSE_TABLE[v >>> 16 & 0xff] << 8 | REVERSE_TABLE[v >>> 24 & 0xff];
            }
            function interleave2(x, y) {
              x &= 0xFFFF;
              x = (x | x << 8) & 0x00FF00FF;
              x = (x | x << 4) & 0x0F0F0F0F;
              x = (x | x << 2) & 0x33333333;
              x = (x | x << 1) & 0x55555555;
              y &= 0xFFFF;
              y = (y | y << 8) & 0x00FF00FF;
              y = (y | y << 4) & 0x0F0F0F0F;
              y = (y | y << 2) & 0x33333333;
              y = (y | y << 1) & 0x55555555;
              return x | y << 1;
            }
            function deinterleave2(v, n) {
              v = v >>> n & 0x55555555;
              v = (v | v >>> 1) & 0x33333333;
              v = (v | v >>> 2) & 0x0F0F0F0F;
              v = (v | v >>> 4) & 0x00FF00FF;
              v = (v | v >>> 16) & 0x000FFFF;
              return v << 16 >> 16;
            }
            function interleave3(x, y, z) {
              x &= 0x3FF;
              x = (x | x << 16) & 4278190335;
              x = (x | x << 8) & 251719695;
              x = (x | x << 4) & 3272356035;
              x = (x | x << 2) & 1227133513;
              y &= 0x3FF;
              y = (y | y << 16) & 4278190335;
              y = (y | y << 8) & 251719695;
              y = (y | y << 4) & 3272356035;
              y = (y | y << 2) & 1227133513;
              x |= y << 1;
              z &= 0x3FF;
              z = (z | z << 16) & 4278190335;
              z = (z | z << 8) & 251719695;
              z = (z | z << 4) & 3272356035;
              z = (z | z << 2) & 1227133513;
              return x | z << 2;
            }
            function deinterleave3(v, n) {
              v = v >>> n & 1227133513;
              v = (v | v >>> 2) & 3272356035;
              v = (v | v >>> 4) & 251719695;
              v = (v | v >>> 8) & 4278190335;
              v = (v | v >>> 16) & 0x3FF;
              return v << 22 >> 22;
            }
            function nextCombination(v) {
              const t = v | v - 1;
              return t + 1 | (~t & -~t) - 1 >>> countTrailingZeros(v) + 1;
            }

            var bits = /*#__PURE__*/Object.freeze({
                __proto__: null,
                INT_BITS: INT_BITS,
                INT_MAX: INT_MAX,
                INT_MIN: INT_MIN,
                sign: sign,
                abs: abs,
                min: min,
                max: max,
                isPow2: isPow2,
                log2: log2,
                log10: log10,
                popCount: popCount,
                countTrailingZeros: countTrailingZeros,
                nextPow2: nextPow2,
                prevPow2: prevPow2,
                parity: parity,
                reverse: reverse,
                interleave2: interleave2,
                deinterleave2: deinterleave2,
                interleave3: interleave3,
                deinterleave3: deinterleave3,
                nextCombination: nextCombination
            });
            exports('es', bits);

            let defaultLogTimes = 10;
            function setDefaultLogTimes(times) {
              if (times > 0) {
                defaultLogTimes = times;
              }
            }
            let replaceProperty;
            let removeProperty;
            let markAsWarning;
            let replacePropertyLog;
            let markAsWarningLog;
            let removePropertyLog;
            let messageID = 0;
            const messageMap = new Map();

            replacePropertyLog = (n, dp, n2, newp, f, id, s) => {
              const item = messageMap.get(id);

              if (item && item.logTimes > item.count) {
                f(`'%s' is deprecated, please use '%s' instead. ${s}`, `${n}.${dp}`, `${n2}.${newp}`);
                item.count++;
              }
            };

            replaceProperty = exports('c1', (owner, ownerName, properties) => {
              if (owner == null) return;
              properties.forEach(item => {
                const id = messageID++;
                messageMap.set(id, {
                  id,
                  count: 0,
                  logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
                });
                const target = item.target != null ? item.target : owner;
                const newName = item.newName != null ? item.newName : item.name;
                const targetName = item.targetName != null ? item.targetName : ownerName;
                const sameTarget = target === owner;
                const suggest = item.suggest ? `(${item.suggest})` : '';

                if (item.customFunction != null) {
                  owner[item.name] = function () {
                    replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                    return item.customFunction.call(this, ...arguments);
                  };
                } else if (item.customSetter != null || item.customGetter != null) {
                  const hasSetter = item.customSetter != null;
                  const hasGetter = item.customGetter != null;

                  if (hasSetter && hasGetter) {
                    Object.defineProperty(owner, item.name, {
                      get() {
                        replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                        return item.customGetter.call(this);
                      },

                      set(v) {
                        replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                        item.customSetter.call(this, v);
                      },

                      enumerable: false
                    });
                  } else if (hasSetter) {
                    Object.defineProperty(owner, item.name, {
                      set(v) {
                        replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                        item.customSetter.call(this, v);
                      },

                      enumerable: false
                    });
                  } else if (hasGetter) {
                    Object.defineProperty(owner, item.name, {
                      get() {
                        replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                        return item.customGetter.call(this);
                      },

                      enumerable: false
                    });
                  }
                } else {
                  Object.defineProperty(owner, item.name, {
                    get() {
                      replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);
                      return sameTarget ? this[newName] : target[newName];
                    },

                    set(v) {
                      replacePropertyLog(ownerName, item.name, targetName, newName, warn, id, suggest);

                      if (sameTarget) {
                        this[newName] = v;
                      } else {
                        target[newName] = v;
                      }
                    },

                    enumerable: false
                  });
                }
              });
            });

            removePropertyLog = (n, dp, f, id, s) => {
              const item = messageMap.get(id);

              if (item && item.logTimes > item.count) {
                f(`'%s' has been removed. ${s}`, `${n}.${dp}`);
                item.count++;
              }
            };

            removeProperty = exports('c2', (owner, ownerName, properties) => {
              if (owner == null) return;
              properties.forEach(item => {
                const id = messageID++;
                messageMap.set(id, {
                  id,
                  count: 0,
                  logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
                });
                const suggest = item.suggest ? `(${item.suggest})` : '';
                Object.defineProperty(owner, item.name, {
                  get() {
                    return removePropertyLog(ownerName, item.name, error, id, suggest);
                  },

                  set() {
                    removePropertyLog(ownerName, item.name, error, id, suggest);
                  },

                  enumerable: false
                });
              });
            });

            markAsWarningLog = (n, dp, f, id, s) => {
              const item = messageMap.get(id);

              if (item && item.logTimes > item.count) {
                f(`'%s' is deprecated. ${s}`, `${n}.${dp}`);
                item.count++;
              }
            };

            markAsWarning = exports('d4', (owner, ownerName, properties) => {
              if (owner == null) return;

              const _defaultGetSet = (d, n, dp, f, id, s) => {
                if (d.get) {
                  const oldGet = d.get;

                  d.get = function () {
                    markAsWarningLog(n, dp, f, id, s);
                    return oldGet.call(this);
                  };
                }

                if (d.set) {
                  const oldSet = d.set;

                  d.set = function (v) {
                    markAsWarningLog(n, dp, f, id, s);
                    oldSet.call(this, v);
                  };
                }

                Object.defineProperty(owner, dp, d);
              };

              properties.forEach(item => {
                const deprecatedProp = item.name;
                const descriptor = Object.getOwnPropertyDescriptor(owner, deprecatedProp);

                if (!descriptor || !descriptor.configurable) {
                  return;
                }

                const id = messageID++;
                messageMap.set(id, {
                  id,
                  count: 0,
                  logTimes: item.logTimes !== undefined ? item.logTimes : defaultLogTimes
                });
                const suggest = item.suggest ? `(${item.suggest})` : '';

                if (descriptor.value != null) {
                  if (typeof descriptor.value === 'function') {
                    const oldValue = descriptor.value;

                    owner[deprecatedProp] = function () {
                      markAsWarningLog(ownerName, deprecatedProp, warn, id, suggest);
                      return oldValue.call(this, ...arguments);
                    };
                  } else {
                    _defaultGetSet(descriptor, ownerName, deprecatedProp, warn, id, suggest);
                  }
                } else {
                  _defaultGetSet(descriptor, ownerName, deprecatedProp, warn, id, suggest);
                }

                Object.defineProperty(owner, deprecatedProp, {
                  enumerable: false
                });
              });
            });

            class MutableForwardIterator {
              constructor(array) {
                this.i = 0;
                this.array = array;
              }

              get length() {
                return this.array.length;
              }

              set length(value) {
                this.array.length = value;

                if (this.i >= value) {
                  this.i = value - 1;
                }
              }

              remove(value) {
                const index = this.array.indexOf(value);

                if (index >= 0) {
                  this.removeAt(index);
                }
              }

              removeAt(i) {
                this.array.splice(i, 1);

                if (i <= this.i) {
                  --this.i;
                }
              }

              fastRemove(value) {
                const index = this.array.indexOf(value);

                if (index >= 0) {
                  this.fastRemoveAt(index);
                }
              }

              fastRemoveAt(i) {
                const array = this.array;
                array[i] = array[array.length - 1];
                --array.length;

                if (i <= this.i) {
                  --this.i;
                }
              }

              push(item) {
                this.array.push(item);
              }

            }

            function removeAt(array, index) {
              array.splice(index, 1);
            }
            function fastRemoveAt(array, index) {
              const length = array.length;

              if (index < 0 || index >= length) {
                return;
              }

              array[index] = array[length - 1];
              array.length = length - 1;
            }
            function remove(array, value) {
              const index = array.indexOf(value);

              if (index >= 0) {
                removeAt(array, index);
                return true;
              } else {
                return false;
              }
            }
            function fastRemove(array, value) {
              const index = array.indexOf(value);

              if (index >= 0) {
                array[index] = array[array.length - 1];
                --array.length;
              }
            }
            function removeIf(array, predicate) {
              const index = array.findIndex(predicate);

              if (index >= 0) {
                const value = array[index];
                removeAt(array, index);
                return value;
              }
            }
            function verifyType(array, type) {
              if (array && array.length > 0) {
                for (const item of array) {
                  if (!(item instanceof type)) {
                    logID(1300);
                    return false;
                  }
                }
              }

              return true;
            }
            function removeArray(array, removals) {
              for (let i = 0, l = removals.length; i < l; i++) {
                remove(array, removals[i]);
              }
            }
            function appendObjectsAt(array, objects, index) {
              array.splice.apply(array, [index, 0, ...objects]);
              return array;
            }
            function contains(array, value) {
              return array.indexOf(value) >= 0;
            }
            function copy(array) {
              const len = array.length;
              const cloned = new Array(len);

              for (let i = 0; i < len; i += 1) {
                cloned[i] = array[i];
              }

              return cloned;
            }

            var jsarray = /*#__PURE__*/Object.freeze({
                __proto__: null,
                removeAt: removeAt,
                fastRemoveAt: fastRemoveAt,
                remove: remove,
                fastRemove: fastRemove,
                removeIf: removeIf,
                verifyType: verifyType,
                removeArray: removeArray,
                appendObjectsAt: appendObjectsAt,
                contains: contains,
                copy: copy,
                MutableForwardIterator: MutableForwardIterator
            });

            const NonUuidMark = '.';
            class IDGenerator {
              constructor(category) {
                this.id = void 0;
                this.prefix = void 0;
                this.id = 0 | Math.random() * 998;
                this.prefix = category ? category + NonUuidMark : '';
              }

              getNewId() {

                return this.prefix + ++this.id;
              }

            }
            IDGenerator.global = new IDGenerator('global');

            const tempCIDGenerator = new IDGenerator('TmpCId.');
            const aliasesTag = typeof Symbol === 'undefined' ? '__aliases__' : Symbol('[[Aliases]]');
            const classNameTag = '__classname__';
            const classIdTag = '__cid__';
            function isNumber(object) {
              return typeof object === 'number' || object instanceof Number;
            }
            function isString(object) {
              return typeof object === 'string' || object instanceof String;
            }
            function isEmptyObject(obj) {
              for (const key in obj) {
                return false;
              }

              return true;
            }
            const value = (() => {
              const descriptor = {
                value: undefined,
                enumerable: false,
                writable: false,
                configurable: true
              };
              return (object, propertyName, value_, writable, enumerable) => {
                descriptor.value = value_;
                descriptor.writable = writable;
                descriptor.enumerable = enumerable;
                Object.defineProperty(object, propertyName, descriptor);
                descriptor.value = undefined;
              };
            })();
            const getset = (() => {
              const descriptor = {
                get: undefined,
                set: undefined,
                enumerable: false
              };
              return (object, propertyName, getter, setter, enumerable = false, configurable = false) => {
                if (typeof setter === 'boolean') {
                  enumerable = setter;
                  setter = undefined;
                }

                descriptor.get = getter;
                descriptor.set = setter;
                descriptor.enumerable = enumerable;
                descriptor.configurable = configurable;
                Object.defineProperty(object, propertyName, descriptor);
                descriptor.get = undefined;
                descriptor.set = undefined;
              };
            })();
            const get = (() => {
              const descriptor = {
                get: undefined,
                enumerable: false,
                configurable: false
              };
              return (object, propertyName, getter, enumerable, configurable) => {
                descriptor.get = getter;
                descriptor.enumerable = enumerable;
                descriptor.configurable = configurable;
                Object.defineProperty(object, propertyName, descriptor);
                descriptor.get = undefined;
              };
            })();
            const set = (() => {
              const descriptor = {
                set: undefined,
                enumerable: false,
                configurable: false
              };
              return (object, propertyName, setter, enumerable, configurable) => {
                descriptor.set = setter;
                descriptor.enumerable = enumerable;
                descriptor.configurable = configurable;
                Object.defineProperty(object, propertyName, descriptor);
                descriptor.set = undefined;
              };
            })();
            function createMap(forceDictMode) {
              const map = Object.create(null);

              if (forceDictMode) {
                const INVALID_IDENTIFIER_1 = '.';
                const INVALID_IDENTIFIER_2 = '/';
                map[INVALID_IDENTIFIER_1] = 1;
                map[INVALID_IDENTIFIER_2] = 1;
                delete map[INVALID_IDENTIFIER_1];
                delete map[INVALID_IDENTIFIER_2];
              }

              return map;
            }
            function getClassName(objOrCtor) {
              if (typeof objOrCtor === 'function') {
                const prototype = objOrCtor.prototype;

                if (prototype && prototype.hasOwnProperty(classNameTag) && prototype[classNameTag]) {
                  return prototype[classNameTag];
                }

                let retval = '';

                if (objOrCtor.name) {
                  retval = objOrCtor.name;
                }

                if (objOrCtor.toString) {
                  let arr;
                  const str = objOrCtor.toString();

                  if (str.charAt(0) === '[') {
                    arr = str.match(/\[\w+\s*(\w+)\]/);
                  } else {
                    arr = str.match(/function\s*(\w+)/);
                  }

                  if (arr && arr.length === 2) {
                    retval = arr[1];
                  }
                }

                return retval !== 'Object' ? retval : '';
              } else if (objOrCtor && objOrCtor.constructor) {
                return getClassName(objOrCtor.constructor);
              }

              return '';
            }
            function obsolete(object, obsoleted, newExpr, writable) {
              const extractPropName = /([^.]+)$/;
              const oldProp = extractPropName.exec(obsoleted)[0];
              const newProp = extractPropName.exec(newExpr)[0];

              function getter() {

                return this[newProp];
              }

              function setter(value_) {

                this[newProp] = value_;
              }

              if (writable) {
                getset(object, oldProp, getter, setter);
              } else {
                get(object, oldProp, getter);
              }
            }
            function obsoletes(obj, objName, props, writable) {
              for (const obsoleted in props) {
                const newName = props[obsoleted];
                obsolete(obj, `${objName}.${obsoleted}`, newName, writable);
              }
            }
            const REGEXP_NUM_OR_STR = /(%d)|(%s)/;
            const REGEXP_STR = /%s/;
            function formatStr(msg, ...subst) {
              if (arguments.length === 0) {
                return '';
              }

              if (subst.length === 0) {
                return `${msg}`;
              }

              const hasSubstitution = typeof msg === 'string' && REGEXP_NUM_OR_STR.test(msg);

              if (hasSubstitution) {
                for (const arg of subst) {
                  const regExpToTest = typeof arg === 'number' ? REGEXP_NUM_OR_STR : REGEXP_STR;

                  if (regExpToTest.test(msg)) {
                    const notReplaceFunction = `${arg}`;
                    msg = msg.replace(regExpToTest, notReplaceFunction);
                  } else {
                    msg += ` ${arg}`;
                  }
                }
              } else {
                for (const arg of subst) {
                  msg += ` ${arg}`;
                }
              }

              return msg;
            }
            function shiftArguments() {
              const len = arguments.length - 1;
              const args = new Array(len);

              for (let i = 0; i < len; ++i) {
                args[i] = arguments[i + 1];
              }

              return args;
            }
            function getPropertyDescriptor(object, propertyName) {
              while (object) {
                const pd = Object.getOwnPropertyDescriptor(object, propertyName);

                if (pd) {
                  return pd;
                }

                object = Object.getPrototypeOf(object);
              }

              return null;
            }

            function _copyprop(name, source, target) {
              const pd = getPropertyDescriptor(source, name);

              if (pd) {
                Object.defineProperty(target, name, pd);
              }
            }

            function addon(object, ...sources) {
              object = object || {};

              for (const source of sources) {
                if (source) {
                  if (typeof source !== 'object') {
                    errorID(5402, source);
                    continue;
                  }

                  for (const name in source) {
                    if (!(name in object)) {
                      _copyprop(name, source, object);
                    }
                  }
                }
              }

              return object;
            }
            function mixin(object, ...sources) {
              object = object || {};

              for (const source of sources) {
                if (source) {
                  if (typeof source !== 'object') {
                    errorID(5403, source);
                    continue;
                  }

                  for (const name in source) {
                    _copyprop(name, source, object);
                  }
                }
              }

              return object;
            }
            function extend(cls, base) {

              for (const p in base) {
                if (base.hasOwnProperty(p)) {
                  cls[p] = base[p];
                }
              }

              cls.prototype = Object.create(base.prototype, {
                constructor: {
                  value: cls,
                  writable: true,
                  configurable: true
                }
              });
              return cls;
            }
            function getSuper(constructor) {
              const proto = constructor.prototype;
              const dunderProto = proto && Object.getPrototypeOf(proto);
              return dunderProto && dunderProto.constructor;
            }
            function isChildClassOf(subclass, superclass) {
              if (subclass && superclass) {
                if (typeof subclass !== 'function') {
                  return false;
                }

                if (typeof superclass !== 'function') {

                  return false;
                }

                if (subclass === superclass) {
                  return true;
                }

                for (;;) {
                  subclass = getSuper(subclass);

                  if (!subclass) {
                    return false;
                  }

                  if (subclass === superclass) {
                    return true;
                  }
                }
              }

              return false;
            }
            function clear(object) {
              for (const key of Object.keys(object)) {
                delete object[key];
              }
            }

            function isTempClassId(id) {
              return typeof id !== 'string' || id.startsWith(tempCIDGenerator.prefix);
            }

            const _idToClass = createMap(true);
            const _nameToClass = createMap(true);

            function setup(tag, table) {
              return function (id, constructor) {
                if (constructor.prototype.hasOwnProperty(tag)) {
                  delete table[constructor.prototype[tag]];
                }

                value(constructor.prototype, tag, id);

                if (id) {
                  const registered = table[id];

                  if (registered && registered !== constructor) {
                    let err = `A Class already exists with the same ${tag} : "${id}".`;

                    error(err);
                  } else {
                    table[id] = constructor;
                  }
                }
              };
            }

            const _setClassId = setup('__cid__', _idToClass);
            const doSetClassName = setup('__classname__', _nameToClass);
            function setClassName(className, constructor) {
              doSetClassName(className, constructor);

              if (!constructor.prototype.hasOwnProperty(classIdTag)) {
                const id = className || tempCIDGenerator.getNewId();

                if (id) {
                  _setClassId(id, constructor);
                }
              }
            }
            function setClassAlias(target, alias) {
              const nameRegistry = _nameToClass[alias];
              const idRegistry = _idToClass[alias];
              let ok = true;

              if (nameRegistry && nameRegistry !== target) {
                error(`"${alias}" has already been set as name or alias of another class.`);
                ok = false;
              }

              if (idRegistry && idRegistry !== target) {
                error(`"${alias}" has already been set as id or alias of another class.`);
                ok = false;
              }

              if (ok) {
                let classAliases = target[aliasesTag];

                if (!classAliases) {
                  classAliases = [];
                  target[aliasesTag] = classAliases;
                }

                classAliases.push(alias);
                _nameToClass[alias] = target;
                _idToClass[alias] = target;
              }
            }
            function unregisterClass(...constructors) {
              for (const constructor of constructors) {
                const p = constructor.prototype;
                const classId = p[classIdTag];

                if (classId) {
                  delete _idToClass[classId];
                }

                const classname = p[classNameTag];

                if (classname) {
                  delete _nameToClass[classname];
                }

                const aliases = p[aliasesTag];

                if (aliases) {
                  for (let iAlias = 0; iAlias < aliases.length; ++iAlias) {
                    const alias = aliases[iAlias];
                    delete _nameToClass[alias];
                    delete _idToClass[alias];
                  }
                }
              }
            }
            function _getClassById(classId) {
              return _idToClass[classId];
            }
            function getClassByName(classname) {
              return _nameToClass[classname];
            }
            function _getClassId(obj, allowTempId) {
              allowTempId = typeof allowTempId !== 'undefined' ? allowTempId : true;
              let res;

              if (typeof obj === 'function' && obj.prototype.hasOwnProperty(classIdTag)) {
                res = obj.prototype[classIdTag];

                if (!allowTempId && ( EDITOR) && isTempClassId(res)) {
                  return '';
                }

                return res;
              }

              if (obj && obj.constructor) {
                const prototype = obj.constructor.prototype;

                if (prototype && prototype.hasOwnProperty(classIdTag)) {
                  res = obj[classIdTag];

                  if (!allowTempId && ( EDITOR) && isTempClassId(res)) {
                    return '';
                  }

                  return res;
                }
              }

              return '';
            }

            class Pool {
              get() {
                return this._get();
              }

              constructor(_0, _1) {
                this.count = void 0;
                this._pool = void 0;
                this._cleanup = void 0;
                const size = _1 === undefined ? _0 : _1;
                const cleanupFunc = _1 === undefined ? null : _0;
                this.count = 0;
                this._pool = new Array(size);
                this._cleanup = cleanupFunc;
              }

              _get() {
                if (this.count > 0) {
                  --this.count;
                  const cache = this._pool[this.count];
                  this._pool[this.count] = null;
                  return cache;
                }

                return null;
              }

              put(obj) {
                const pool = this._pool;

                if (this.count < pool.length) {
                  if (this._cleanup && this._cleanup(obj) === false) {
                    return;
                  }

                  pool[this.count] = obj;
                  ++this.count;
                }
              }

              resize(length) {
                if (length >= 0) {
                  this._pool.length = length;

                  if (this.count > length) {
                    this.count = length;
                  }
                }
              }

            } exports('cL', Pool);

            const array = exports('dC', jsarray);
            const js = exports('c4', {
              IDGenerator,
              Pool,
              array: jsarray,
              isNumber,
              isString,
              isEmptyObject,
              getPropertyDescriptor,
              addon,
              mixin,
              extend,
              getSuper,
              isChildClassOf,
              clear,
              value,
              getset,
              get,
              set,
              unregisterClass,
              getClassName,
              setClassName,
              setClassAlias,
              getClassByName,

              get _registeredClassNames() {
                return { ..._nameToClass
                };
              },

              set _registeredClassNames(value) {
                clear(_nameToClass);
                Object.assign(_nameToClass, value);
              },

              get _registeredClassIds() {
                return { ..._idToClass
                };
              },

              set _registeredClassIds(value) {
                clear(_idToClass);
                Object.assign(_idToClass, value);
              },

              _getClassId,
              _setClassId,
              _getClassById,
              obsolete,
              obsoletes,
              formatStr,
              shiftArguments,
              createMap
            });
            legacyCC.js = js;

            var js$1 = /*#__PURE__*/Object.freeze({
                __proto__: null,
                array: array,
                js: js,
                IDGenerator: IDGenerator,
                Pool: Pool,
                isNumber: isNumber,
                isString: isString,
                isEmptyObject: isEmptyObject,
                value: value,
                getset: getset,
                get: get,
                set: set,
                createMap: createMap,
                getClassName: getClassName,
                obsolete: obsolete,
                obsoletes: obsoletes,
                formatStr: formatStr,
                shiftArguments: shiftArguments,
                getPropertyDescriptor: getPropertyDescriptor,
                addon: addon,
                mixin: mixin,
                extend: extend,
                getSuper: getSuper,
                isChildClassOf: isChildClassOf,
                clear: clear,
                _idToClass: _idToClass,
                _nameToClass: _nameToClass,
                _setClassId: _setClassId,
                setClassName: setClassName,
                setClassAlias: setClassAlias,
                unregisterClass: unregisterClass,
                _getClassById: _getClassById,
                getClassByName: getClassByName,
                _getClassId: _getClassId
            });
            exports('eL', js$1);

            function BitMask(obj) {
              if ('__bitmask__' in obj) {
                return obj;
              }

              value(obj, '__bitmask__', null, true);
              let lastIndex = -1;
              const keys = Object.keys(obj);

              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                let val = obj[key];

                if (val === -1) {
                  val = ++lastIndex;
                  obj[key] = val;
                } else if (typeof val === 'number') {
                  lastIndex = val;
                } else if (typeof val === 'string' && Number.isInteger(parseFloat(key))) {
                  continue;
                }

                const reverseKey = `${val}`;

                if (key !== reverseKey) {

                  value(obj, reverseKey, key);
                }
              }

              return obj;
            }

            BitMask.isBitMask = BitMaskType => BitMaskType && BitMaskType.hasOwnProperty('__bitmask__');

            BitMask.getList = BitMaskDef => {
              if (BitMaskDef.__bitmask__) {
                return BitMaskDef.__bitmask__;
              }

              const bitlist = BitMaskDef.__bitmask__ = [];

              for (const name in BitMaskDef) {
                const v = BitMaskDef[name];

                if (Number.isInteger(v)) {
                  bitlist.push({
                    name,
                    value: v
                  });
                }
              }

              bitlist.sort((a, b) => a.value - b.value);
              return bitlist;
            };
            legacyCC.BitMask = BitMask;

            function assertIsNonNullable(expr, message) {
              assertIsTrue(!(expr === null || expr === undefined), message);
            }
            function assertIsTrue(expr, message) {
              if ( !expr) {
                throw new Error(`Assertion failed: ${message !== null && message !== void 0 ? message : '<no-message>'}`);
              }
            }

            function Enum(obj) {
              if ('__enums__' in obj) {
                return obj;
              }

              value(obj, '__enums__', null, true);
              return Enum.update(obj);
            }

            Enum.update = obj => {
              let lastIndex = -1;
              const keys = Object.keys(obj);

              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];
                let val = obj[key];

                if (val === -1) {
                  val = ++lastIndex;
                  obj[key] = val;
                } else if (typeof val === 'number') {
                  lastIndex = val;
                } else if (typeof val === 'string' && Number.isInteger(parseFloat(key))) {
                  continue;
                }

                const reverseKey = `${val}`;

                if (key !== reverseKey) {

                  value(obj, reverseKey, key);
                }
              }

              if (Array.isArray(obj.__enums__)) {
                updateList(obj);
              }

              return obj;
            };

            (function (_Enum) {})(Enum || (Enum = exports('bN', {})));

            Enum.isEnum = enumType => enumType && enumType.hasOwnProperty('__enums__');

            function assertIsEnum(enumType) {
              assertIsTrue(enumType.hasOwnProperty('__enums__'));
            }

            Enum.getList = enumType => {
              assertIsEnum(enumType);

              if (enumType.__enums__) {
                return enumType.__enums__;
              }

              return updateList(enumType);
            };

            function updateList(enumType) {
              assertIsEnum(enumType);
              const enums = enumType.__enums__ || [];
              enums.length = 0;

              for (const name in enumType) {
                const v = enumType[name];

                if (Number.isInteger(v)) {
                  enums.push({
                    name,
                    value: v
                  });
                }
              }

              enums.sort((a, b) => a.value - b.value);
              enumType.__enums__ = enums;
              return enums;
            }

            function ccenum(enumType) {
              if (!('__enums__' in enumType)) {
                value(enumType, '__enums__', null, true);
              }
            }
            legacyCC.Enum = Enum;

            class ValueType {
              clone() {
                errorID(100, `${getClassName(this)}.clone`);
                return this;
              }

              equals(other) {
                return false;
              }

              set(other) {
                errorID(100, `${getClassName(this)}.set`);
              }

              toString() {
                return `${{}}`;
              }

            } exports('eK', ValueType);
            setClassName('cc.ValueType', ValueType);
            legacyCC.ValueType = ValueType;

            const SUPPORT_TEXTURE_FORMATS = ['.astc', '.pkm', '.pvr', '.webp', '.jpg', '.jpeg', '.bmp', '.png'];
            const KEY = {
              none: 0,
              back: 6,
              menu: 18,
              backspace: 8,
              tab: 9,
              enter: 13,
              shift: 16,
              ctrl: 17,
              alt: 18,
              pause: 19,
              capslock: 20,
              escape: 27,
              space: 32,
              pageup: 33,
              pagedown: 34,
              end: 35,
              home: 36,
              left: 37,
              up: 38,
              right: 39,
              down: 40,
              select: 41,
              insert: 45,
              Delete: 46,
              0: 48,
              1: 49,
              2: 50,
              3: 51,
              4: 52,
              5: 53,
              6: 54,
              7: 55,
              8: 56,
              9: 57,
              a: 65,
              b: 66,
              c: 67,
              d: 68,
              e: 69,
              f: 70,
              g: 71,
              h: 72,
              i: 73,
              j: 74,
              k: 75,
              l: 76,
              m: 77,
              n: 78,
              o: 79,
              p: 80,
              q: 81,
              r: 82,
              s: 83,
              t: 84,
              u: 85,
              v: 86,
              w: 87,
              x: 88,
              y: 89,
              z: 90,
              num0: 96,
              num1: 97,
              num2: 98,
              num3: 99,
              num4: 100,
              num5: 101,
              num6: 102,
              num7: 103,
              num8: 104,
              num9: 105,
              '*': 106,
              '+': 107,
              '-': 109,
              numdel: 110,
              '/': 111,
              f1: 112,
              f2: 113,
              f3: 114,
              f4: 115,
              f5: 116,
              f6: 117,
              f7: 118,
              f8: 119,
              f9: 120,
              f10: 121,
              f11: 122,
              f12: 123,
              numlock: 144,
              scrolllock: 145,
              ';': 186,
              semicolon: 186,
              equal: 187,
              '=': 187,
              ',': 188,
              comma: 188,
              dash: 189,
              '.': 190,
              period: 190,
              forwardslash: 191,
              grave: 192,
              '[': 219,
              openbracket: 219,
              backslash: 220,
              ']': 221,
              closebracket: 221,
              quote: 222,
              dpadLeft: 1000,
              dpadRight: 1001,
              dpadUp: 1003,
              dpadDown: 1004,
              dpadCenter: 1005
            };
            const macro = exports('bj', {
              SUPPORT_TEXTURE_FORMATS,
              KEY,
              RAD: Math.PI / 180,
              DEG: 180 / Math.PI,
              REPEAT_FOREVER: Number.MAX_VALUE - 1,
              FLT_EPSILON: 0.0000001192092896,
              ORIENTATION_PORTRAIT: 1,
              ORIENTATION_LANDSCAPE: 2,
              ORIENTATION_AUTO: 3,
              ENABLE_TILEDMAP_CULLING: true,
              TOUCH_TIMEOUT: 5000,
              ENABLE_TRANSPARENT_CANVAS: false,
              ENABLE_WEBGL_ANTIALIAS: true,
              CLEANUP_IMAGE_CACHE: false,
              ENABLE_MULTI_TOUCH: true,
              MAX_LABEL_CANVAS_POOL_SIZE: 20
            });
            legacyCC.macro = macro;

            const BUILTIN_CLASSID_RE = /^(?:cc|dragonBones|sp|ccsg)\..+/;
            const BASE64_KEYS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';
            const values = new Array(123);

            for (let i = 0; i < 123; ++i) {
              values[i] = 64;
            }

            for (let i = 0; i < 64; ++i) {
              values[BASE64_KEYS.charCodeAt(i)] = i;
            }

            const BASE64_VALUES = values;
            function propertyDefine(ctor, sameNameGetSets, diffNameGetSets) {
              function define(np, propName, getter, setter) {
                const pd = Object.getOwnPropertyDescriptor(np, propName);

                if (pd) {
                  if (pd.get) {
                    np[getter] = pd.get;
                  }

                  if (pd.set && setter) {
                    np[setter] = pd.set;
                  }
                } else {
                  const getterFunc = np[getter];

                  {
                    getset(np, propName, getterFunc, np[setter]);
                  }
                }
              }

              let propName;
              const np = ctor.prototype;

              for (let i = 0; i < sameNameGetSets.length; i++) {
                propName = sameNameGetSets[i];
                const suffix = propName[0].toUpperCase() + propName.slice(1);
                define(np, propName, `get${suffix}`, `set${suffix}`);
              }

              for (propName in diffNameGetSets) {
                const gs = diffNameGetSets[propName];
                define(np, propName, gs[0], gs[1]);
              }
            }
            function pushToMap(map, key, value, pushFront) {
              const exists = map[key];

              if (exists) {
                if (Array.isArray(exists)) {
                  if (pushFront) {
                    exists.push(exists[0]);
                    exists[0] = value;
                  } else {
                    exists.push(value);
                  }
                } else {
                  map[key] = pushFront ? [value, exists] : [exists, value];
                }
              } else {
                map[key] = value;
              }
            }
            function contains$1(refNode, otherNode) {
              if (typeof refNode.contains === 'function') {
                return refNode.contains(otherNode);
              } else if (typeof refNode.compareDocumentPosition === 'function') {
                return !!(refNode.compareDocumentPosition(otherNode) & 16);
              } else {
                let node = otherNode.parentNode;

                if (node) {
                  do {
                    if (node === refNode) {
                      return true;
                    } else {
                      node = node.parentNode;
                    }
                  } while (node !== null);
                }

                return false;
              }
            }
            function isDomNode(obj) {
              if (typeof window === 'object' && typeof Node === 'function') {
                return obj instanceof Node;
              } else {
                return obj && typeof obj === 'object' && typeof obj.nodeType === 'number' && typeof obj.nodeName === 'string';
              }
            }
            function callInNextTick(callback, p1, p2) {
              if (callback) {
                setTimeout(() => {
                  callback(p1, p2);
                }, 0);
              }
            }
            function tryCatchFunctor_EDITOR(funcName) {
              return Function('target', `${'try {\n' + '  target.'}${funcName}();\n` + `}\n` + `catch (e) {\n` + `  cc._throw(e);\n` + `}`);
            }
            function isPlainEmptyObj_DEV(obj) {
              if (!obj || obj.constructor !== Object) {
                return false;
              }

              return isEmptyObject(obj);
            }
            function clampf(value, min_inclusive, max_inclusive) {
              if (min_inclusive > max_inclusive) {
                const temp = min_inclusive;
                min_inclusive = max_inclusive;
                max_inclusive = temp;
              }

              return value < min_inclusive ? min_inclusive : value < max_inclusive ? value : max_inclusive;
            }
            function degreesToRadians(angle) {
              return angle * macro.RAD;
            }
            function radiansToDegrees(angle) {
              return angle * macro.DEG;
            }
            legacyCC.misc = {
              BUILTIN_CLASSID_RE,
              BASE64_VALUES,
              propertyDefine,
              pushToMap,
              contains: contains$1,
              isDomNode,
              callInNextTick,
              isPlainEmptyObj_DEV,
              clampf,
              degreesToRadians,
              radiansToDegrees
            };

            var misc = /*#__PURE__*/Object.freeze({
                __proto__: null,
                BUILTIN_CLASSID_RE: BUILTIN_CLASSID_RE,
                BASE64_VALUES: BASE64_VALUES,
                propertyDefine: propertyDefine,
                pushToMap: pushToMap,
                contains: contains$1,
                isDomNode: isDomNode,
                callInNextTick: callInNextTick,
                tryCatchFunctor_EDITOR: tryCatchFunctor_EDITOR,
                isPlainEmptyObj_DEV: isPlainEmptyObj_DEV,
                clampf: clampf,
                degreesToRadians: degreesToRadians,
                radiansToDegrees: radiansToDegrees
            });
            exports('eM', misc);

            const DELIMETER = '$_$';
            function createAttrsSingle(owner, superAttrs) {
              const attrs = superAttrs ? Object.create(superAttrs) : {};
              value(owner, '__attrs__', attrs);
              return attrs;
            }
            function createAttrs(subclass) {
              if (typeof subclass !== 'function') {
                const instance = subclass;
                return createAttrsSingle(instance, getClassAttrs(instance.constructor));
              }

              let superClass;
              const chains = legacyCC.Class.getInheritanceChain(subclass);

              for (let i = chains.length - 1; i >= 0; i--) {
                const cls = chains[i];

                const attrs = cls.hasOwnProperty('__attrs__') && cls.__attrs__;

                if (!attrs) {
                  superClass = chains[i + 1];
                  createAttrsSingle(cls, superClass && superClass.__attrs__);
                }
              }

              superClass = chains[0];
              createAttrsSingle(subclass, superClass && superClass.__attrs__);
              return subclass.__attrs__;
            }
            function attr(constructor, propertyName) {
              const attrs = getClassAttrs(constructor);
              const prefix = propertyName + DELIMETER;
              const ret = {};

              for (const key in attrs) {
                if (key.startsWith(prefix)) {
                  ret[key.slice(prefix.length)] = attrs[key];
                }
              }

              return ret;
            }
            function getClassAttrs(constructor) {
              return constructor.hasOwnProperty('__attrs__') && constructor.__attrs__ || createAttrs(constructor);
            }
            function setClassAttr(ctor, propName, key, value) {
              getClassAttrs(ctor)[propName + DELIMETER + key] = value;
            }
            class PrimitiveType {
              constructor(name, defaultValue) {
                this.name = void 0;
                this.default = void 0;
                this.name = name;
                this.default = defaultValue;
              }

              toString() {
                return this.name;
              }

            }
            const CCInteger = exports('ek', new PrimitiveType('Integer', 0));
            legacyCC.Integer = CCInteger;
            legacyCC.CCInteger = CCInteger;
            const CCFloat = exports('eV', new PrimitiveType('Float', 0.0));
            legacyCC.Float = CCFloat;
            legacyCC.CCFloat = CCFloat;

            const CCBoolean = exports('eh', new PrimitiveType('Boolean', false));
            legacyCC.Boolean = CCBoolean;
            legacyCC.CCBoolean = CCBoolean;
            const CCString = exports('c3', new PrimitiveType('String', ''));
            legacyCC.String = CCString;
            legacyCC.CCString = CCString;
            function getTypeChecker_ET(type, attributeName) {
              return function (constructor, mainPropertyName) {
                const propInfo = `"${getClassName(constructor)}.${mainPropertyName}"`;
                const mainPropAttrs = attr(constructor, mainPropertyName);
                let mainPropAttrsType = mainPropAttrs.type;

                if (mainPropAttrsType === CCInteger || mainPropAttrsType === CCFloat) {
                  mainPropAttrsType = 'Number';
                } else if (mainPropAttrsType === CCString || mainPropAttrsType === CCBoolean) {
                  mainPropAttrsType = `${mainPropAttrsType}`;
                }

                if (mainPropAttrsType !== type) {
                  warnID(3604, propInfo);
                  return;
                }

                if (!mainPropAttrs.hasOwnProperty('default')) {
                  return;
                }

                const defaultVal = mainPropAttrs.default;

                if (typeof defaultVal === 'undefined') {
                  return;
                }

                const isContainer = Array.isArray(defaultVal) || isPlainEmptyObj_DEV(defaultVal);

                if (isContainer) {
                  return;
                }

                const defaultType = typeof defaultVal;
                const type_lowerCase = type.toLowerCase();

                if (defaultType === type_lowerCase) {
                  if (type_lowerCase === 'object') {
                    if (defaultVal && !(defaultVal instanceof mainPropAttrs.ctor)) {
                      warnID(3605, propInfo, getClassName(mainPropAttrs.ctor));
                    } else {
                      return;
                    }
                  } else if (type !== 'Number') {
                    warnID(3606, attributeName, propInfo, type);
                  }
                } else if (defaultType !== 'function') {
                  if (type === CCString.default && defaultVal == null) {
                    warnID(3607, propInfo);
                  } else {
                    warnID(3611, attributeName, propInfo, defaultType);
                  }
                } else {
                  return;
                }

                delete mainPropAttrs.type;
              };
            }
            function getObjTypeChecker_ET(typeCtor) {
              return function (classCtor, mainPropName) {
                getTypeChecker_ET('Object', 'type')(classCtor, mainPropName);
                const defaultDef = getClassAttrs(classCtor)[`${mainPropName + DELIMETER}default`];
                const defaultVal = legacyCC.Class.getDefault(defaultDef);

                if (!Array.isArray(defaultVal) && isChildClassOf(typeCtor, legacyCC.ValueType)) {
                  const typename = getClassName(typeCtor);
                  const info = formatStr('No need to specify the "type" of "%s.%s" because %s is a child class of ValueType.', getClassName(classCtor), mainPropName, typename);

                  if (defaultDef) {
                    log(info);
                  } else {
                    warnID(3612, info, typename, getClassName(classCtor), mainPropName, typename);
                  }
                }
              };
            }

            var attributeUtils = /*#__PURE__*/Object.freeze({
                __proto__: null,
                DELIMETER: DELIMETER,
                createAttrsSingle: createAttrsSingle,
                createAttrs: createAttrs,
                attr: attr,
                getClassAttrs: getClassAttrs,
                setClassAttr: setClassAttr,
                PrimitiveType: PrimitiveType,
                CCInteger: CCInteger,
                CCFloat: CCFloat,
                CCBoolean: CCBoolean,
                CCString: CCString,
                getTypeChecker_ET: getTypeChecker_ET,
                getObjTypeChecker_ET: getObjTypeChecker_ET
            });

            const SerializableAttrs = {
              default: {},
              serializable: {},
              editorOnly: {},
              formerlySerializedAs: {}
            };

            function parseNotify(val, propName, notify, properties) {
              if (val.get || val.set) {

                return;
              }

              if (val.hasOwnProperty('default')) {
                const newKey = `_N$${propName}`;

                val.get = function () {
                  return this[newKey];
                };

                val.set = function (value) {
                  const oldValue = this[newKey];
                  this[newKey] = value;
                  notify.call(this, oldValue);
                };

                const newValue = {};
                properties[newKey] = newValue;

                for (const attr in SerializableAttrs) {
                  const v = SerializableAttrs[attr];

                  if (val.hasOwnProperty(attr)) {
                    newValue[attr] = val[attr];

                    if (!v.canUsedInGet) {
                      delete val[attr];
                    }
                  }
                }
              }
            }

            function parseType(val, type, className, propName) {

              if (Array.isArray(type)) {

                if (type.length > 0) {
                  val.type = type = type[0];
                } else {
                  return errorID(5508, className, propName);
                }
              }

              if (typeof type === 'function') {
                if (type === String) {
                  val.type = legacyCC.String;
                } else if (type === Boolean) {
                  val.type = legacyCC.Boolean;
                } else if (type === Number) {
                  val.type = legacyCC.Float;
                }
              }
            }

            function _wrapOptions(isGetset, _default, type) {
              const res = isGetset ? {
                _short: true
              } : {
                _short: true,
                default: _default
              };

              if (type) {
                res.type = type;
              }

              return res;
            }

            function getFullFormOfProperty(options, isGetset) {
              const isLiteral = options && options.constructor === Object;

              if (!isLiteral) {
                if (Array.isArray(options) && options.length > 0) {
                  return _wrapOptions(isGetset, [], options);
                } else if (typeof options === 'function') {
                  const type = options;
                  return _wrapOptions(isGetset, isChildClassOf(type, legacyCC.ValueType) ? new type() : null, type);
                } else if (options instanceof PrimitiveType) {
                  return _wrapOptions(isGetset, options.default);
                } else {
                  return _wrapOptions(isGetset, options);
                }
              }

              return null;
            }
            function preprocessAttrs(properties, className, cls) {
              for (const propName in properties) {
                let val = properties[propName];
                const fullForm = getFullFormOfProperty(val, false);

                if (fullForm) {
                  val = properties[propName] = fullForm;
                }

                if (val) {

                  const notify = val.notify;

                  if (notify) {
                    {
                      parseNotify(val, propName, notify, properties);
                    }
                  }

                  if ('type' in val) {
                    parseType(val, val.type, className, propName);
                  }
                }
              }
            }

            let requiringFrames = [];
            function push(module, uuid, script, importMeta) {
              if (script === undefined) {
                script = uuid;
                uuid = '';
              }

              requiringFrames.push({
                uuid,
                script,
                module,
                exports: module.exports,
                beh: null,
                importMeta
              });
            }
            function pop() {
              const frameInfo = requiringFrames.pop();
              const module = frameInfo.module;
              let exports = module.exports;

              if (exports === frameInfo.exports) {
                for (const anykey in exports) {
                  return;
                }

                module.exports = exports = frameInfo.cls;
              }
            }
            function peek() {
              return requiringFrames[requiringFrames.length - 1];
            }
            legacyCC._RF = {
              push,
              pop,
              peek
            };

            const DELIMETER$1 = DELIMETER;

            function pushUnique(array, item) {
              if (array.indexOf(item) < 0) {
                array.push(item);
              }
            }

            const deferredInitializer = {
              datas: null,

              push(data) {
                if (this.datas) {
                  this.datas.push(data);
                } else {
                  this.datas = [data];
                  const self = this;
                  setTimeout(() => {
                    self.init();
                  }, 0);
                }
              },

              init() {
                const datas = this.datas;

                if (datas) {
                  for (let i = 0; i < datas.length; ++i) {
                    const data = datas[i];
                    const cls = data.cls;
                    let properties = data.props;

                    if (typeof properties === 'function') {
                      properties = properties();
                    }

                    const name = getClassName(cls);

                    if (properties) {
                      declareProperties(cls, name, properties, cls.$super, data.mixins);
                    } else {
                      errorID(3633, name);
                    }
                  }

                  this.datas = null;
                }
              }

            };

            function appendProp(cls, name) {

              pushUnique(cls.__props__, name);
            }

            function defineProp(cls, className, propName, val) {

              appendProp(cls, propName);
              parseAttributes(cls, val, className, propName);
            }

            function defineGetSet(cls, name, propName, val) {
              const getter = val.get;
              const setter = val.set;

              if (getter) {
                parseAttributes(cls, val, name, propName);

                setClassAttr(cls, propName, 'serializable', false);
              }
            }

            function getDefault(defaultVal) {
              if (typeof defaultVal === 'function') {
                {
                  return defaultVal();
                }
              }

              return defaultVal;
            }

            function mixinWithInherited(dest, src, filter) {
              for (const prop in src) {
                if (!dest.hasOwnProperty(prop) && (!filter || filter(prop))) {
                  Object.defineProperty(dest, prop, getPropertyDescriptor(src, prop));
                }
              }
            }

            function doDefine(className, baseClass, mixins, options) {
              const ctor = options.ctor;

              const ctors = [ctor];
              const fireClass = ctor;
              value(fireClass, '__ctors__', ctors.length > 0 ? ctors : null, true);
              const prototype = fireClass.prototype;

              if (baseClass) {
                fireClass.$super = baseClass;
              }

              if (mixins) {
                for (let m = mixins.length - 1; m >= 0; m--) {
                  const mixin = mixins[m];
                  mixinWithInherited(prototype, mixin.prototype);

                  if (CCClass._isCCClass(mixin)) {
                    mixinWithInherited(getClassAttrs(fireClass), getClassAttrs(mixin));
                  }
                }

                prototype.constructor = fireClass;
              }

              setClassName(className, fireClass);
              return fireClass;
            }

            function define(className, baseClass, mixins, options) {
              const Component = legacyCC.Component;
              const frame = peek();

              if (frame && isChildClassOf(baseClass, Component)) {
                if (isChildClassOf(frame.cls, Component)) {
                  errorID(3615);
                  return null;
                }

                className = className || frame.script;
              }

              const cls = doDefine(className, baseClass, mixins, options);

              if (frame) {
                if (isChildClassOf(baseClass, Component)) {
                  const uuid = frame.uuid;

                  if (uuid) {
                    _setClassId(uuid, cls);
                  }

                  frame.cls = cls;
                } else if (!isChildClassOf(frame.cls, Component)) {
                  frame.cls = cls;
                }
              }

              return cls;
            }

            function getNewValueTypeCodeJit(value) {
              const clsName = getClassName(value);
              const type = value.constructor;
              let res = `new ${clsName}(`;

              for (let i = 0; i < type.__props__.length; i++) {
                const prop = type.__props__[i];
                const propVal = value[prop];

                res += propVal;

                if (i < type.__props__.length - 1) {
                  res += ',';
                }
              }

              return `${res})`;
            }

            function escapeForJS(s) {
              return JSON.stringify(s).replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
            }

            const IDENTIFIER_RE = /^[A-Za-z_$][0-9A-Za-z_$]*$/;

            function declareProperties(cls, className, properties, baseClass, mixins) {
              cls.__props__ = [];

              if (baseClass && baseClass.__props__) {
                cls.__props__ = baseClass.__props__.slice();
              }

              if (mixins) {
                for (let m = 0; m < mixins.length; ++m) {
                  const mixin = mixins[m];

                  if (mixin.__props__) {
                    cls.__props__ = cls.__props__.concat(mixin.__props__.filter(x => cls.__props__.indexOf(x) < 0));
                  }
                }
              }

              if (properties) {
                preprocessAttrs(properties, className);

                for (const propName in properties) {
                  const val = properties[propName];

                  if (!val.get && !val.set) {
                    defineProp(cls, className, propName, val);
                  } else {
                    defineGetSet(cls, className, propName, val);
                  }
                }
              }

              const attrs = getClassAttrs(cls);
              cls.__values__ = cls.__props__.filter(prop => attrs[`${prop + DELIMETER$1}serializable`] !== false);
            }

            function CCClass(options) {
              let name = options.name;
              const base = options.extends;
              const mixins = options.mixins;
              const cls = define(name, base, mixins, options);

              if (!name) {
                name = legacyCC.js.getClassName(cls);
              }

              cls._sealed = true;

              if (base) {
                base._sealed = false;
              }

              const properties = options.properties;

              if (typeof properties === 'function' || base && base.__props__ === null || mixins && mixins.some(x => x.__props__ === null)) {
                {
                  deferredInitializer.push({
                    cls,
                    props: properties,
                    mixins
                  });
                  cls.__props__ = cls.__values__ = null;
                }
              } else {
                declareProperties(cls, name, properties, base, options.mixins);
              }

              const editor = options.editor;

              if (editor) {
                if (isChildClassOf(base, legacyCC.Component)) {
                  legacyCC.Component._registerEditorProps(cls, editor);
                }
              }

              return cls;
            }

            CCClass._isCCClass = function isCCClass(constructor) {
              var _constructor$hasOwnPr;

              return constructor === null || constructor === void 0 ? void 0 : (_constructor$hasOwnPr = constructor.hasOwnProperty) === null || _constructor$hasOwnPr === void 0 ? void 0 : _constructor$hasOwnPr.call(constructor, '__ctors__');
            };

            CCClass.fastDefine = function (className, constructor, serializableFields) {
              setClassName(className, constructor);
              const props = constructor.__props__ = constructor.__values__ = Object.keys(serializableFields);
              const attrs = getClassAttrs(constructor);

              for (let i = 0; i < props.length; i++) {
                const key = props[i];
                attrs[`${key + DELIMETER$1}visible`] = false;
                attrs[`${key + DELIMETER$1}default`] = serializableFields[key];
              }
            };

            CCClass.Attr = attributeUtils;
            CCClass.attr = attr;

            function getInheritanceChain(constructor) {
              const chain = [];

              for (;;) {
                constructor = getSuper(constructor);

                if (!constructor) {
                  break;
                }

                if (constructor !== Object) {
                  chain.push(constructor);
                }
              }

              return chain;
            }

            CCClass.getInheritanceChain = getInheritanceChain;
            const PrimitiveTypes = {
              Integer: 'Number',
              Float: 'Number',
              Boolean: 'Boolean',
              String: 'String'
            };

            function parseAttributes(constructor, attributes, className, propertyName, usedInGetter) {
              let attrs = null;
              let propertyNamePrefix = '';

              function initAttrs() {
                propertyNamePrefix = propertyName + DELIMETER$1;
                return attrs = getClassAttrs(constructor);
              }

              if ('type' in attributes && typeof attributes.type === 'undefined') {
                warnID(3660, propertyName, className);
              }
              const type = attributes.type;

              if (type) {
                const primitiveType = PrimitiveTypes[type];

                if (primitiveType) {
                  (attrs || initAttrs())[`${propertyNamePrefix}type`] = type;
                } else if (type === 'Object') ; else if (typeof type === 'object') {
                    if (Enum.isEnum(type)) {
                      (attrs || initAttrs())[`${propertyNamePrefix}type`] = 'Enum';
                      attrs[`${propertyNamePrefix}enumList`] = Enum.getList(type);
                    } else if (BitMask.isBitMask(type)) {
                      (attrs || initAttrs())[`${propertyNamePrefix}type`] = 'BitMask';
                      attrs[`${propertyNamePrefix}bitmaskList`] = BitMask.getList(type);
                    } else ;
                  } else if (typeof type === 'function') {
                    (attrs || initAttrs())[`${propertyNamePrefix}type`] = 'Object';
                    attrs[`${propertyNamePrefix}ctor`] = type;
                  } else ;
              }

              if ('default' in attributes) {
                (attrs || initAttrs())[`${propertyNamePrefix}default`] = attributes.default;
              }

              const parseSimpleAttribute = (attributeName, expectType) => {
                if (attributeName in attributes) {
                  const val = attributes[attributeName];

                  if (typeof val === expectType) {
                    (attrs || initAttrs())[propertyNamePrefix + attributeName] = val;
                  }
                }
              };

              if (attributes.editorOnly) {
                {
                  (attrs || initAttrs())[`${propertyNamePrefix}editorOnly`] = true;
                }
              }

              if (attributes.__noImplicit) {
                var _attributes$serializa;

                (attrs || initAttrs())[`${propertyNamePrefix}serializable`] = (_attributes$serializa = attributes.serializable) !== null && _attributes$serializa !== void 0 ? _attributes$serializa : false;
              } else if (attributes.serializable === false) {
                {
                  (attrs || initAttrs())[`${propertyNamePrefix}serializable`] = false;
                }
              }

              parseSimpleAttribute('formerlySerializedAs', 'string');

              const range = attributes.range;

              if (range) {
                if (Array.isArray(range)) {
                  if (range.length >= 2) {
                    (attrs || initAttrs())[`${propertyNamePrefix}min`] = range[0];
                    attrs[`${propertyNamePrefix}max`] = range[1];

                    if (range.length > 2) {
                      attrs[`${propertyNamePrefix}step`] = range[2];
                    }
                  }
                }
              }

              parseSimpleAttribute('min', 'number');
              parseSimpleAttribute('max', 'number');
              parseSimpleAttribute('step', 'number');
            }

            CCClass.isArray = function (defaultVal) {
              defaultVal = getDefault(defaultVal);
              return Array.isArray(defaultVal);
            };

            CCClass.getDefault = getDefault;
            CCClass.escapeForJS = escapeForJS;
            CCClass.IDENTIFIER_RE = IDENTIFIER_RE;
            CCClass.getNewValueTypeCode =  getNewValueTypeCodeJit;
            legacyCC.Class = CCClass;

            const _d2r = Math.PI / 180.0;

            const _r2d = 180.0 / Math.PI;

            const EPSILON = exports('eC', 0.000001);
            function equals(a, b) {
              return Math.abs(a - b) <= EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
            }
            function approx(a, b, maxDiff) {
              maxDiff = maxDiff || EPSILON;
              return Math.abs(a - b) <= maxDiff;
            }
            function clamp(val, min, max) {
              if (min > max) {
                const temp = min;
                min = max;
                max = temp;
              }

              return val < min ? min : val > max ? max : val;
            }
            function clamp01(val) {
              return val < 0 ? 0 : val > 1 ? 1 : val;
            }
            function lerp(from, to, ratio) {
              return from + (to - from) * ratio;
            }
            function toRadian(a) {
              return a * _d2r;
            }
            function toDegree(a) {
              return a * _r2d;
            }
            const random = exports('dK', Math.random);
            function randomRange(min, max) {
              return Math.random() * (max - min) + min;
            }
            function randomRangeInt(min, max) {
              return Math.floor(randomRange(min, max));
            }
            function pseudoRandom(seed) {
              seed = (seed * 9301 + 49297) % 233280;
              return seed / 233280.0;
            }
            function pseudoRandomRange(seed, min, max) {
              return pseudoRandom(seed) * (max - min) + min;
            }
            function pseudoRandomRangeInt(seed, min, max) {
              return Math.floor(pseudoRandomRange(seed, min, max));
            }
            function nextPow2$1(val) {
              --val;
              val = val >> 1 | val;
              val = val >> 2 | val;
              val = val >> 4 | val;
              val = val >> 8 | val;
              val = val >> 16 | val;
              ++val;
              return val;
            }
            function repeat(t, length) {
              return t - Math.floor(t / length) * length;
            }
            function pingPong(t, length) {
              t = repeat(t, length * 2);
              t = length - Math.abs(t - length);
              return t;
            }
            function inverseLerp(from, to, value) {
              return (value - from) / (to - from);
            }
            function absMaxComponent(v) {
              if (Math.abs(v.x) > Math.abs(v.y)) {
                if (Math.abs(v.x) > Math.abs(v.z)) {
                  return v.x;
                } else {
                  return v.z;
                }
              } else if (Math.abs(v.y) > Math.abs(v.z)) {
                return v.y;
              } else {
                return v.z;
              }
            }
            function absMax(a, b) {
              if (Math.abs(a) > Math.abs(b)) {
                return a;
              } else {
                return b;
              }
            }

            const toFloat = 1 / 255;
            class Color extends ValueType {
              static clone(a) {
                const out = new Color();

                if (a._val) {
                  out._val = a._val;
                } else {
                  out._val = (a.a << 24 >>> 0) + (a.b << 16) + (a.g << 8) + a.r;
                }

                return out;
              }

              static copy(out, a) {
                out.r = a.r;
                out.g = a.g;
                out.b = a.b;
                out.a = a.a;
                return out;
              }

              static set(out, r, g, b, a) {
                out.r = r;
                out.g = g;
                out.b = b;
                out.a = a;
                return out;
              }

              static fromHEX(out, hexString) {
                hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
                out.r = parseInt(hexString.substr(0, 2), 16) || 0;
                out.g = parseInt(hexString.substr(2, 2), 16) || 0;
                out.b = parseInt(hexString.substr(4, 2), 16) || 0;
                out.a = parseInt(hexString.substr(6, 2), 16) || 255;
                out._val = (out.a << 24 >>> 0) + (out.b << 16) + (out.g << 8) + out.r;
                return out;
              }

              static add(out, a, b) {
                out.r = a.r + b.r;
                out.g = a.g + b.g;
                out.b = a.b + b.b;
                out.a = a.a + b.a;
                return out;
              }

              static subtract(out, a, b) {
                out.r = a.r - b.r;
                out.g = a.g - b.g;
                out.b = a.b - b.b;
                out.a = a.a - b.a;
                return out;
              }

              static multiply(out, a, b) {
                out.r = a.r * b.r;
                out.g = a.g * b.g;
                out.b = a.b * b.b;
                out.a = a.a * b.a;
                return out;
              }

              static divide(out, a, b) {
                out.r = a.r / b.r;
                out.g = a.g / b.g;
                out.b = a.b / b.b;
                out.a = a.a / b.a;
                return out;
              }

              static scale(out, a, b) {
                out.r = a.r * b;
                out.g = a.g * b;
                out.b = a.b * b;
                out.a = a.a * b;
                return out;
              }

              static lerp(out, from, to, ratio) {
                let r = from.r;
                let g = from.g;
                let b = from.b;
                let a = from.a;
                r += (to.r - r) * ratio;
                g += (to.g - g) * ratio;
                b += (to.b - b) * ratio;
                a += (to.a - a) * ratio;
                out._val = Math.floor((a << 24 >>> 0) + (b << 16) + (g << 8) + r);
                return out;
              }

              static toArray(out, a, ofs = 0) {
                const scale = a instanceof Color || a.a > 1 ? 1 / 255 : 1;
                out[ofs + 0] = a.r * scale;
                out[ofs + 1] = a.g * scale;
                out[ofs + 2] = a.b * scale;
                out[ofs + 3] = a.a * scale;
                return out;
              }

              static fromArray(arr, out, ofs = 0) {
                out.r = arr[ofs + 0] * 255;
                out.g = arr[ofs + 1] * 255;
                out.b = arr[ofs + 2] * 255;
                out.a = arr[ofs + 3] * 255;
                return out;
              }

              static strictEquals(a, b) {
                return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.r - b.r) <= epsilon * Math.max(1.0, Math.abs(a.r), Math.abs(b.r)) && Math.abs(a.g - b.g) <= epsilon * Math.max(1.0, Math.abs(a.g), Math.abs(b.g)) && Math.abs(a.b - b.b) <= epsilon * Math.max(1.0, Math.abs(a.b), Math.abs(b.b)) && Math.abs(a.a - b.a) <= epsilon * Math.max(1.0, Math.abs(a.a), Math.abs(b.a));
              }

              static hex(a) {
                return (a.r * 255 << 24 | a.g * 255 << 16 | a.b * 255 << 8 | a.a * 255) >>> 0;
              }

              get r() {
                return this._val & 0x000000ff;
              }

              set r(red) {
                red = ~~clamp(red, 0, 255);
                this._val = (this._val & 0xffffff00 | red) >>> 0;
              }

              get g() {
                return (this._val & 0x0000ff00) >> 8;
              }

              set g(green) {
                green = ~~clamp(green, 0, 255);
                this._val = (this._val & 0xffff00ff | green << 8) >>> 0;
              }

              get b() {
                return (this._val & 0x00ff0000) >> 16;
              }

              set b(blue) {
                blue = ~~clamp(blue, 0, 255);
                this._val = (this._val & 0xff00ffff | blue << 16) >>> 0;
              }

              get a() {
                return (this._val & 0xff000000) >>> 24;
              }

              set a(alpha) {
                alpha = ~~clamp(alpha, 0, 255);
                this._val = (this._val & 0x00ffffff | alpha << 24) >>> 0;
              }

              get x() {
                return this.r * toFloat;
              }

              set x(value) {
                this.r = value * 255;
              }

              get y() {
                return this.g * toFloat;
              }

              set y(value) {
                this.g = value * 255;
              }

              get z() {
                return this.b * toFloat;
              }

              set z(value) {
                this.b = value * 255;
              }

              get w() {
                return this.a * toFloat;
              }

              set w(value) {
                this.a = value * 255;
              }

              constructor(r, g, b, a) {
                super();
                this._val = 0;

                if (typeof r === 'string') {
                  this.fromHEX(r);
                } else if (g !== undefined) {
                  this.set(r, g, b, a);
                } else {
                  this.set(r);
                }
              }

              clone() {
                const ret = new Color();
                ret._val = this._val;
                return ret;
              }

              equals(other) {
                return other && this._val === other._val;
              }

              lerp(to, ratio) {
                let r = this.r;
                let g = this.g;
                let b = this.b;
                let a = this.a;
                r += (to.r - r) * ratio;
                g += (to.g - g) * ratio;
                b += (to.b - b) * ratio;
                a += (to.a - a) * ratio;
                this._val = Math.floor((a << 24 >>> 0) + (b << 16) + (g << 8) + r);
                return this;
              }

              toString() {
                return `rgba(${this.r.toFixed()}, ${this.g.toFixed()}, ${this.b.toFixed()}, ${this.a.toFixed()})`;
              }

              toCSS(opt = 'rgba') {
                if (opt === 'rgba') {
                  return `rgba(${this.r},${this.g},${this.b},${(this.a * toFloat).toFixed(2)})`;
                } else if (opt === 'rgb') {
                  return `rgb(${this.r},${this.g},${this.b})`;
                } else {
                  return `#${this.toHEX(opt)}`;
                }
              }

              fromHEX(hexString) {
                hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
                const r = parseInt(hexString.substr(0, 2), 16) || 0;
                const g = parseInt(hexString.substr(2, 2), 16) || 0;
                const b = parseInt(hexString.substr(4, 2), 16) || 0;
                const a = parseInt(hexString.substr(6, 2), 16) || 255;
                this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
                return this;
              }

              toHEX(fmt = '#rrggbb') {
                const prefix = '0';
                const hex = [(this.r < 16 ? prefix : '') + this.r.toString(16), (this.g < 16 ? prefix : '') + this.g.toString(16), (this.b < 16 ? prefix : '') + this.b.toString(16)];

                if (fmt === '#rgb') {
                  hex[0] = hex[0][0];
                  hex[1] = hex[1][0];
                  hex[2] = hex[2][0];
                } else if (fmt === '#rrggbbaa') {
                  hex.push((this.a < 16 ? prefix : '') + this.a.toString(16));
                }

                return hex.join('');
              }

              toRGBValue() {
                return this._val & 0x00ffffff;
              }

              fromHSV(h, s, v) {
                let r = 0;
                let g = 0;
                let b = 0;

                if (s === 0) {
                  r = g = b = v;
                } else if (v === 0) {
                  r = g = b = 0;
                } else {
                  if (h === 1) {
                    h = 0;
                  }

                  h *= 6;
                  const i = Math.floor(h);
                  const f = h - i;
                  const p = v * (1 - s);
                  const q = v * (1 - s * f);
                  const t = v * (1 - s * (1 - f));

                  switch (i) {
                    case 0:
                      r = v;
                      g = t;
                      b = p;
                      break;

                    case 1:
                      r = q;
                      g = v;
                      b = p;
                      break;

                    case 2:
                      r = p;
                      g = v;
                      b = t;
                      break;

                    case 3:
                      r = p;
                      g = q;
                      b = v;
                      break;

                    case 4:
                      r = t;
                      g = p;
                      b = v;
                      break;

                    case 5:
                      r = v;
                      g = p;
                      b = q;
                      break;
                  }
                }

                r *= 255;
                g *= 255;
                b *= 255;
                this._val = (this.a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
                return this;
              }

              toHSV() {
                const r = this.r * toFloat;
                const g = this.g * toFloat;
                const b = this.b * toFloat;
                const hsv = {
                  h: 0,
                  s: 0,
                  v: 0
                };
                const max = Math.max(r, g, b);
                const min = Math.min(r, g, b);
                let delta = 0;
                hsv.v = max;
                hsv.s = max ? (max - min) / max : 0;

                if (!hsv.s) {
                  hsv.h = 0;
                } else {
                  delta = max - min;

                  if (r === max) {
                    hsv.h = (g - b) / delta;
                  } else if (g === max) {
                    hsv.h = 2 + (b - r) / delta;
                  } else {
                    hsv.h = 4 + (r - g) / delta;
                  }

                  hsv.h /= 6;

                  if (hsv.h < 0) {
                    hsv.h += 1.0;
                  }
                }

                return hsv;
              }

              set(r, g, b, a) {
                if (typeof r === 'object') {
                  if (r._val != null) {
                    this._val = r._val;
                  } else {
                    g = r.g || 0;
                    b = r.b || 0;
                    a = typeof r.a === 'number' ? r.a : 255;
                    r = r.r || 0;
                    this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
                  }
                } else {
                  r = r || 0;
                  g = g || 0;
                  b = b || 0;
                  a = typeof a === 'number' ? a : 255;
                  this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + (r | 0);
                }

                return this;
              }

              multiply(other) {
                const r = (this._val & 0x000000ff) * other.r >> 8;
                const g = (this._val & 0x0000ff00) * other.g >> 8;
                const b = (this._val & 0x00ff0000) * other.b >> 8;
                const a = ((this._val & 0xff000000) >>> 8) * other.a;
                this._val = a & 0xff000000 | b & 0x00ff0000 | g & 0x0000ff00 | r & 0x000000ff;
                return this;
              }

              _set_r_unsafe(red) {
                this._val = (this._val & 0xffffff00 | red) >>> 0;
                return this;
              }

              _set_g_unsafe(green) {
                this._val = (this._val & 0xffff00ff | green << 8) >>> 0;
                return this;
              }

              _set_b_unsafe(blue) {
                this._val = (this._val & 0xff00ffff | blue << 16) >>> 0;
                return this;
              }

              _set_a_unsafe(alpha) {
                this._val = (this._val & 0x00ffffff | alpha << 24) >>> 0;
                return this;
              }

            } exports('ca', Color);
            Color.WHITE = Object.freeze(new Color(255, 255, 255, 255));
            Color.GRAY = Object.freeze(new Color(127, 127, 127, 255));
            Color.BLACK = Object.freeze(new Color(0, 0, 0, 255));
            Color.TRANSPARENT = Object.freeze(new Color(0, 0, 0, 0));
            Color.RED = Object.freeze(new Color(255, 0, 0, 255));
            Color.GREEN = Object.freeze(new Color(0, 255, 0, 255));
            Color.BLUE = Object.freeze(new Color(0, 0, 255, 255));
            Color.CYAN = Object.freeze(new Color(0, 255, 255, 255));
            Color.MAGENTA = Object.freeze(new Color(255, 0, 255, 255));
            Color.YELLOW = Object.freeze(new Color(255, 255, 0, 255));
            CCClass.fastDefine('cc.Color', Color, {
              r: 0,
              g: 0,
              b: 0,
              a: 255
            });
            legacyCC.Color = Color;
            function color(r, g, b, a) {
              return new Color(r, g, b, a);
            }
            legacyCC.color = color;

            class Vec3 extends ValueType {
              static zero(out) {
                out.x = 0;
                out.y = 0;
                out.z = 0;
                return out;
              }

              static clone(a) {
                return new Vec3(a.x, a.y, a.z);
              }

              static copy(out, a) {
                out.x = a.x;
                out.y = a.y;
                out.z = a.z;
                return out;
              }

              static set(out, x, y, z) {
                out.x = x;
                out.y = y;
                out.z = z;
                return out;
              }

              static add(out, a, b) {
                out.x = a.x + b.x;
                out.y = a.y + b.y;
                out.z = a.z + b.z;
                return out;
              }

              static subtract(out, a, b) {
                out.x = a.x - b.x;
                out.y = a.y - b.y;
                out.z = a.z - b.z;
                return out;
              }

              static multiply(out, a, b) {
                out.x = a.x * b.x;
                out.y = a.y * b.y;
                out.z = a.z * b.z;
                return out;
              }

              static divide(out, a, b) {
                out.x = a.x / b.x;
                out.y = a.y / b.y;
                out.z = a.z / b.z;
                return out;
              }

              static ceil(out, a) {
                out.x = Math.ceil(a.x);
                out.y = Math.ceil(a.y);
                out.z = Math.ceil(a.z);
                return out;
              }

              static floor(out, a) {
                out.x = Math.floor(a.x);
                out.y = Math.floor(a.y);
                out.z = Math.floor(a.z);
                return out;
              }

              static min(out, a, b) {
                out.x = Math.min(a.x, b.x);
                out.y = Math.min(a.y, b.y);
                out.z = Math.min(a.z, b.z);
                return out;
              }

              static max(out, a, b) {
                out.x = Math.max(a.x, b.x);
                out.y = Math.max(a.y, b.y);
                out.z = Math.max(a.z, b.z);
                return out;
              }

              static round(out, a) {
                out.x = Math.round(a.x);
                out.y = Math.round(a.y);
                out.z = Math.round(a.z);
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.x = a.x * b;
                out.y = a.y * b;
                out.z = a.z * b;
                return out;
              }

              static scaleAndAdd(out, a, b, scale) {
                out.x = a.x + b.x * scale;
                out.y = a.y + b.y * scale;
                out.z = a.z + b.z * scale;
                return out;
              }

              static distance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                const z = b.z - a.z;
                return Math.sqrt(x * x + y * y + z * z);
              }

              static squaredDistance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                const z = b.z - a.z;
                return x * x + y * y + z * z;
              }

              static len(a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                return Math.sqrt(x * x + y * y + z * z);
              }

              static lengthSqr(a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                return x * x + y * y + z * z;
              }

              static negate(out, a) {
                out.x = -a.x;
                out.y = -a.y;
                out.z = -a.z;
                return out;
              }

              static invert(out, a) {
                out.x = 1.0 / a.x;
                out.y = 1.0 / a.y;
                out.z = 1.0 / a.z;
                return out;
              }

              static invertSafe(out, a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;

                if (Math.abs(x) < EPSILON) {
                  out.x = 0;
                } else {
                  out.x = 1.0 / x;
                }

                if (Math.abs(y) < EPSILON) {
                  out.y = 0;
                } else {
                  out.y = 1.0 / y;
                }

                if (Math.abs(z) < EPSILON) {
                  out.z = 0;
                } else {
                  out.z = 1.0 / z;
                }

                return out;
              }

              static normalize(out, a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                let len = x * x + y * y + z * z;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  out.x = x * len;
                  out.y = y * len;
                  out.z = z * len;
                }

                return out;
              }

              static dot(a, b) {
                return a.x * b.x + a.y * b.y + a.z * b.z;
              }

              static cross(out, a, b) {
                const {
                  x: ax,
                  y: ay,
                  z: az
                } = a;
                const {
                  x: bx,
                  y: by,
                  z: bz
                } = b;
                out.x = ay * bz - az * by;
                out.y = az * bx - ax * bz;
                out.z = ax * by - ay * bx;
                return out;
              }

              static lerp(out, a, b, t) {
                out.x = a.x + t * (b.x - a.x);
                out.y = a.y + t * (b.y - a.y);
                out.z = a.z + t * (b.z - a.z);
                return out;
              }

              static random(out, scale) {
                scale = scale || 1.0;
                const phi = random() * 2.0 * Math.PI;
                const cosTheta = random() * 2 - 1;
                const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
                out.x = sinTheta * Math.cos(phi) * scale;
                out.y = sinTheta * Math.sin(phi) * scale;
                out.z = cosTheta * scale;
                return out;
              }

              static transformMat4(out, a, m) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                let rhw = m.m03 * x + m.m07 * y + m.m11 * z + m.m15;
                rhw = rhw ? Math.abs(1 / rhw) : 1;
                out.x = (m.m00 * x + m.m04 * y + m.m08 * z + m.m12) * rhw;
                out.y = (m.m01 * x + m.m05 * y + m.m09 * z + m.m13) * rhw;
                out.z = (m.m02 * x + m.m06 * y + m.m10 * z + m.m14) * rhw;
                return out;
              }

              static transformMat4Normal(out, a, m) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                let rhw = m.m03 * x + m.m07 * y + m.m11 * z;
                rhw = rhw ? Math.abs(1 / rhw) : 1;
                out.x = (m.m00 * x + m.m04 * y + m.m08 * z) * rhw;
                out.y = (m.m01 * x + m.m05 * y + m.m09 * z) * rhw;
                out.z = (m.m02 * x + m.m06 * y + m.m10 * z) * rhw;
                return out;
              }

              static transformMat3(out, a, m) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                out.x = x * m.m00 + y * m.m03 + z * m.m06;
                out.y = x * m.m01 + y * m.m04 + z * m.m07;
                out.z = x * m.m02 + y * m.m05 + z * m.m08;
                return out;
              }

              static transformAffine(out, v, m) {
                const x = v.x;
                const y = v.y;
                const z = v.z;
                out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12;
                out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13;
                out.x = m.m02 * x + m.m06 * y + m.m10 * z + m.m14;
                return out;
              }

              static transformQuat(out, a, q) {
                const ix = q.w * a.x + q.y * a.z - q.z * a.y;
                const iy = q.w * a.y + q.z * a.x - q.x * a.z;
                const iz = q.w * a.z + q.x * a.y - q.y * a.x;
                const iw = -q.x * a.x - q.y * a.y - q.z * a.z;
                out.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;
                out.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;
                out.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;
                return out;
              }

              static transformRTS(out, a, r, t, s) {
                const x = a.x * s.x;
                const y = a.y * s.y;
                const z = a.z * s.z;
                const ix = r.w * x + r.y * z - r.z * y;
                const iy = r.w * y + r.z * x - r.x * z;
                const iz = r.w * z + r.x * y - r.y * x;
                const iw = -r.x * x - r.y * y - r.z * z;
                out.x = ix * r.w + iw * -r.x + iy * -r.z - iz * -r.y + t.x;
                out.y = iy * r.w + iw * -r.y + iz * -r.x - ix * -r.z + t.y;
                out.z = iz * r.w + iw * -r.z + ix * -r.y - iy * -r.x + t.z;
                return out;
              }

              static transformInverseRTS(out, a, r, t, s) {
                const x = a.x - t.x;
                const y = a.y - t.y;
                const z = a.z - t.z;
                const ix = r.w * x - r.y * z + r.z * y;
                const iy = r.w * y - r.z * x + r.x * z;
                const iz = r.w * z - r.x * y + r.y * x;
                const iw = r.x * x + r.y * y + r.z * z;
                out.x = (ix * r.w + iw * r.x + iy * r.z - iz * r.y) / s.x;
                out.y = (iy * r.w + iw * r.y + iz * r.x - ix * r.z) / s.y;
                out.z = (iz * r.w + iw * r.z + ix * r.y - iy * r.x) / s.z;
                return out;
              }

              static rotateX(out, v, o, a) {
                const x = v.x - o.x;
                const y = v.y - o.y;
                const z = v.z - o.z;
                const cos = Math.cos(a);
                const sin = Math.sin(a);
                const rx = x;
                const ry = y * cos - z * sin;
                const rz = y * sin + z * cos;
                out.x = rx + o.x;
                out.y = ry + o.y;
                out.z = rz + o.z;
                return out;
              }

              static rotateY(out, v, o, a) {
                const x = v.x - o.x;
                const y = v.y - o.y;
                const z = v.z - o.z;
                const cos = Math.cos(a);
                const sin = Math.sin(a);
                const rx = z * sin + x * cos;
                const ry = y;
                const rz = z * cos - x * sin;
                out.x = rx + o.x;
                out.y = ry + o.y;
                out.z = rz + o.z;
                return out;
              }

              static rotateZ(out, v, o, a) {
                const x = v.x - o.x;
                const y = v.y - o.y;
                const z = v.z - o.z;
                const cos = Math.cos(a);
                const sin = Math.sin(a);
                const rx = x * cos - y * sin;
                const ry = x * sin + y * cos;
                const rz = z;
                out.x = rx + o.x;
                out.y = ry + o.y;
                out.z = rz + o.z;
                return out;
              }

              static toArray(out, v, ofs = 0) {
                out[ofs + 0] = v.x;
                out[ofs + 1] = v.y;
                out[ofs + 2] = v.z;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.x = arr[ofs + 0];
                out.y = arr[ofs + 1];
                out.z = arr[ofs + 2];
                return out;
              }

              static strictEquals(a, b) {
                return a.x === b.x && a.y === b.y && a.z === b.z;
              }

              static equals(a, b, epsilon = EPSILON) {
                const {
                  x: a0,
                  y: a1,
                  z: a2
                } = a;
                const {
                  x: b0,
                  y: b1,
                  z: b2
                } = b;
                return Math.abs(a0 - b0) <= epsilon * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= epsilon * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= epsilon * Math.max(1.0, Math.abs(a2), Math.abs(b2));
              }

              static angle(a, b) {
                Vec3.normalize(v3_1, a);
                Vec3.normalize(v3_2, b);
                const cosine = Vec3.dot(v3_1, v3_2);

                if (cosine > 1.0) {
                  return 0;
                }

                if (cosine < -1.0) {
                  return Math.PI;
                }

                return Math.acos(cosine);
              }

              static projectOnPlane(out, a, n) {
                return Vec3.subtract(out, a, Vec3.project(out, a, n));
              }

              static project(out, a, b) {
                const sqrLen = Vec3.lengthSqr(b);

                if (sqrLen < 0.000001) {
                  return Vec3.set(out, 0, 0, 0);
                } else {
                  return Vec3.multiplyScalar(out, b, Vec3.dot(a, b) / sqrLen);
                }
              }

              constructor(x, y, z) {
                super();

                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                }
              }

              clone() {
                return new Vec3(this.x, this.y, this.z);
              }

              set(x, y, z) {
                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(other.z));
              }

              equals3f(x, y, z, epsilon = EPSILON) {
                return Math.abs(this.x - x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(y)) && Math.abs(this.z - z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(z));
              }

              strictEquals(other) {
                return this.x === other.x && this.y === other.y && this.z === other.z;
              }

              strictEquals3f(x, y, z) {
                return this.x === x && this.y === y && this.z === z;
              }

              toString() {
                return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)})`;
              }

              lerp(to, ratio) {
                this.x += ratio * (to.x - this.x);
                this.y += ratio * (to.y - this.y);
                this.z += ratio * (to.z - this.z);
                return this;
              }

              add(other) {
                this.x += other.x;
                this.y += other.y;
                this.z += other.z;
                return this;
              }

              add3f(x, y, z) {
                this.x += x;
                this.y += y;
                this.z += z;
                return this;
              }

              subtract(other) {
                this.x -= other.x;
                this.y -= other.y;
                this.z -= other.z;
                return this;
              }

              subtract3f(x, y, z) {
                this.x -= x;
                this.y -= y;
                this.z -= z;
                return this;
              }

              multiplyScalar(scalar) {
                if (typeof scalar === 'object') {
                  console.warn('should use Vec3.multiply for vector * vector operation');
                }

                this.x *= scalar;
                this.y *= scalar;
                this.z *= scalar;
                return this;
              }

              multiply(other) {
                if (typeof other !== 'object') {
                  console.warn('should use Vec3.scale for vector * scalar operation');
                }

                this.x *= other.x;
                this.y *= other.y;
                this.z *= other.z;
                return this;
              }

              multiply3f(x, y, z) {
                this.x *= x;
                this.y *= y;
                this.z *= z;
                return this;
              }

              divide(other) {
                this.x /= other.x;
                this.y /= other.y;
                this.z /= other.z;
                return this;
              }

              divide3f(x, y, z) {
                this.x /= x;
                this.y /= y;
                this.z /= z;
                return this;
              }

              negative() {
                this.x = -this.x;
                this.y = -this.y;
                this.z = -this.z;
                return this;
              }

              clampf(minInclusive, maxInclusive) {
                this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
                this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
                this.z = clamp(this.z, minInclusive.z, maxInclusive.z);
                return this;
              }

              dot(other) {
                return this.x * other.x + this.y * other.y + this.z * other.z;
              }

              cross(other) {
                const {
                  x: ax,
                  y: ay,
                  z: az
                } = this;
                const {
                  x: bx,
                  y: by,
                  z: bz
                } = other;
                this.x = ay * bz - az * by;
                this.y = az * bx - ax * bz;
                this.z = ax * by - ay * bx;
                return this;
              }

              length() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
              }

              lengthSqr() {
                return this.x * this.x + this.y * this.y + this.z * this.z;
              }

              normalize() {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                let len = x * x + y * y + z * z;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  this.x = x * len;
                  this.y = y * len;
                  this.z = z * len;
                }

                return this;
              }

              transformMat4(matrix) {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                let rhw = matrix.m03 * x + matrix.m07 * y + matrix.m11 * z + matrix.m15;
                rhw = rhw ? 1 / rhw : 1;
                this.x = (matrix.m00 * x + matrix.m04 * y + matrix.m08 * z + matrix.m12) * rhw;
                this.y = (matrix.m01 * x + matrix.m05 * y + matrix.m09 * z + matrix.m13) * rhw;
                this.z = (matrix.m02 * x + matrix.m06 * y + matrix.m10 * z + matrix.m14) * rhw;
                return this;
              }

            } exports('aZ', Vec3);
            Vec3.UNIT_X = Object.freeze(new Vec3(1, 0, 0));
            Vec3.UNIT_Y = Object.freeze(new Vec3(0, 1, 0));
            Vec3.UNIT_Z = Object.freeze(new Vec3(0, 0, 1));
            Vec3.RIGHT = Object.freeze(new Vec3(1, 0, 0));
            Vec3.UP = Object.freeze(new Vec3(0, 1, 0));
            Vec3.FORWARD = Object.freeze(new Vec3(0, 0, -1));
            Vec3.ZERO = Object.freeze(new Vec3(0, 0, 0));
            Vec3.ONE = Object.freeze(new Vec3(1, 1, 1));
            Vec3.NEG_ONE = Object.freeze(new Vec3(-1, -1, -1));
            const v3_1 = new Vec3();
            const v3_2 = new Vec3();
            CCClass.fastDefine('cc.Vec3', Vec3, {
              x: 0,
              y: 0,
              z: 0
            });
            legacyCC.Vec3 = Vec3;
            function v3(x, y, z) {
              return new Vec3(x, y, z);
            }
            legacyCC.v3 = v3;

            class Mat3 extends ValueType {
              static clone(a) {
                return new Mat3(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08);
              }

              static copy(out, a) {
                out.m00 = a.m00;
                out.m01 = a.m01;
                out.m02 = a.m02;
                out.m03 = a.m03;
                out.m04 = a.m04;
                out.m05 = a.m05;
                out.m06 = a.m06;
                out.m07 = a.m07;
                out.m08 = a.m08;
                return out;
              }

              static set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
                out.m00 = m00;
                out.m01 = m01;
                out.m02 = m02;
                out.m03 = m10;
                out.m04 = m11;
                out.m05 = m12;
                out.m06 = m20;
                out.m07 = m21;
                out.m08 = m22;
                return out;
              }

              static identity(out) {
                out.m00 = 1;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 1;
                out.m05 = 0;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 1;
                return out;
              }

              static transpose(out, a) {
                if (out === a) {
                  const a01 = a.m01;
                  const a02 = a.m02;
                  const a12 = a.m05;
                  out.m01 = a.m03;
                  out.m02 = a.m06;
                  out.m03 = a01;
                  out.m05 = a.m07;
                  out.m06 = a02;
                  out.m07 = a12;
                } else {
                  out.m00 = a.m00;
                  out.m01 = a.m03;
                  out.m02 = a.m06;
                  out.m03 = a.m01;
                  out.m04 = a.m04;
                  out.m05 = a.m07;
                  out.m06 = a.m02;
                  out.m07 = a.m05;
                  out.m08 = a.m08;
                }

                return out;
              }

              static invert(out, a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                const b01 = a22 * a11 - a12 * a21;
                const b11 = -a22 * a10 + a12 * a20;
                const b21 = a21 * a10 - a11 * a20;
                let det = a00 * b01 + a01 * b11 + a02 * b21;

                if (det === 0) {
                  out.m00 = 0;
                  out.m01 = 0;
                  out.m02 = 0;
                  out.m03 = 0;
                  out.m04 = 0;
                  out.m05 = 0;
                  out.m06 = 0;
                  out.m07 = 0;
                  out.m08 = 0;
                  return out;
                }

                det = 1.0 / det;
                out.m00 = b01 * det;
                out.m01 = (-a22 * a01 + a02 * a21) * det;
                out.m02 = (a12 * a01 - a02 * a11) * det;
                out.m03 = b11 * det;
                out.m04 = (a22 * a00 - a02 * a20) * det;
                out.m05 = (-a12 * a00 + a02 * a10) * det;
                out.m06 = b21 * det;
                out.m07 = (-a21 * a00 + a01 * a20) * det;
                out.m08 = (a11 * a00 - a01 * a10) * det;
                return out;
              }

              static determinant(a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
              }

              static multiply(out, a, b) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                const b00 = b.m00;
                const b01 = b.m01;
                const b02 = b.m02;
                const b10 = b.m03;
                const b11 = b.m04;
                const b12 = b.m05;
                const b20 = b.m06;
                const b21 = b.m07;
                const b22 = b.m08;
                out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
                out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
                out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
                out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
                out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
                out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
                out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
                out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
                out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
                return out;
              }

              static multiplyMat4(out, a, b) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                const b00 = b.m00;
                const b01 = b.m01;
                const b02 = b.m02;
                const b10 = b.m04;
                const b11 = b.m05;
                const b12 = b.m06;
                const b20 = b.m08;
                const b21 = b.m09;
                const b22 = b.m10;
                out.m00 = b00 * a00 + b01 * a10 + b02 * a20;
                out.m01 = b00 * a01 + b01 * a11 + b02 * a21;
                out.m02 = b00 * a02 + b01 * a12 + b02 * a22;
                out.m03 = b10 * a00 + b11 * a10 + b12 * a20;
                out.m04 = b10 * a01 + b11 * a11 + b12 * a21;
                out.m05 = b10 * a02 + b11 * a12 + b12 * a22;
                out.m06 = b20 * a00 + b21 * a10 + b22 * a20;
                out.m07 = b20 * a01 + b21 * a11 + b22 * a21;
                out.m08 = b20 * a02 + b21 * a12 + b22 * a22;
                return out;
              }

              static transform(out, a, v) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                const x = v.x;
                const y = v.y;
                out.m00 = a00;
                out.m01 = a01;
                out.m02 = a02;
                out.m03 = a10;
                out.m04 = a11;
                out.m05 = a12;
                out.m06 = x * a00 + y * a10 + a20;
                out.m07 = x * a01 + y * a11 + a21;
                out.m08 = x * a02 + y * a12 + a22;
                return out;
              }

              static scale(out, a, v) {
                const x = v.x;
                const y = v.y;
                out.m00 = x * a.m00;
                out.m01 = x * a.m01;
                out.m02 = x * a.m02;
                out.m03 = y * a.m03;
                out.m04 = y * a.m04;
                out.m05 = y * a.m05;
                out.m06 = a.m06;
                out.m07 = a.m07;
                out.m08 = a.m08;
                return out;
              }

              static rotate(out, a, rad) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a10 = a.m03;
                const a11 = a.m04;
                const a12 = a.m05;
                const a20 = a.m06;
                const a21 = a.m07;
                const a22 = a.m08;
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                out.m00 = c * a00 + s * a10;
                out.m01 = c * a01 + s * a11;
                out.m02 = c * a02 + s * a12;
                out.m03 = c * a10 - s * a00;
                out.m04 = c * a11 - s * a01;
                out.m05 = c * a12 - s * a02;
                out.m06 = a20;
                out.m07 = a21;
                out.m08 = a22;
                return out;
              }

              static fromMat4(out, a) {
                out.m00 = a.m00;
                out.m01 = a.m01;
                out.m02 = a.m02;
                out.m03 = a.m04;
                out.m04 = a.m05;
                out.m05 = a.m06;
                out.m06 = a.m08;
                out.m07 = a.m09;
                out.m08 = a.m10;
                return out;
              }

              static fromViewUp(out, view, up) {
                if (Vec3.lengthSqr(view) < EPSILON * EPSILON) {
                  Mat3.identity(out);
                  return out;
                }

                up = up || Vec3.UNIT_Y;
                Vec3.normalize(v3_1$1, Vec3.cross(v3_1$1, up, view));

                if (Vec3.lengthSqr(v3_1$1) < EPSILON * EPSILON) {
                  Mat3.identity(out);
                  return out;
                }

                Vec3.cross(v3_2$1, view, v3_1$1);
                Mat3.set(out, v3_1$1.x, v3_1$1.y, v3_1$1.z, v3_2$1.x, v3_2$1.y, v3_2$1.z, view.x, view.y, view.z);
                return out;
              }

              static fromTranslation(out, v) {
                out.m00 = 1;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 1;
                out.m05 = 0;
                out.m06 = v.x;
                out.m07 = v.y;
                out.m08 = 1;
                return out;
              }

              static fromScaling(out, v) {
                out.m00 = v.x;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = v.y;
                out.m05 = 0;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 1;
                return out;
              }

              static fromRotation(out, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                out.m00 = c;
                out.m01 = s;
                out.m02 = 0;
                out.m03 = -s;
                out.m04 = c;
                out.m05 = 0;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 1;
                return out;
              }

              static fromQuat(out, q) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const yx = y * x2;
                const yy = y * y2;
                const zx = z * x2;
                const zy = z * y2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                out.m00 = 1 - yy - zz;
                out.m03 = yx - wz;
                out.m06 = zx + wy;
                out.m01 = yx + wz;
                out.m04 = 1 - xx - zz;
                out.m07 = zy - wx;
                out.m02 = zx - wy;
                out.m05 = zy + wx;
                out.m08 = 1 - xx - yy;
                return out;
              }

              static inverseTransposeMat4(out, a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const a30 = a.m12;
                const a31 = a.m13;
                const a32 = a.m14;
                const a33 = a.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

                if (!det) {
                  return null;
                }

                det = 1.0 / det;
                out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                out.m03 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                out.m04 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                out.m05 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                out.m06 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                out.m07 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                out.m08 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                return out;
              }

              static toArray(out, m, ofs = 0) {
                out[ofs + 0] = m.m00;
                out[ofs + 1] = m.m01;
                out[ofs + 2] = m.m02;
                out[ofs + 3] = m.m03;
                out[ofs + 4] = m.m04;
                out[ofs + 5] = m.m05;
                out[ofs + 6] = m.m06;
                out[ofs + 7] = m.m07;
                out[ofs + 8] = m.m08;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.m00 = arr[ofs + 0];
                out.m01 = arr[ofs + 1];
                out.m02 = arr[ofs + 2];
                out.m03 = arr[ofs + 3];
                out.m04 = arr[ofs + 4];
                out.m05 = arr[ofs + 5];
                out.m06 = arr[ofs + 6];
                out.m07 = arr[ofs + 7];
                out.m08 = arr[ofs + 8];
                return out;
              }

              static add(out, a, b) {
                out.m00 = a.m00 + b.m00;
                out.m01 = a.m01 + b.m01;
                out.m02 = a.m02 + b.m02;
                out.m03 = a.m03 + b.m03;
                out.m04 = a.m04 + b.m04;
                out.m05 = a.m05 + b.m05;
                out.m06 = a.m06 + b.m06;
                out.m07 = a.m07 + b.m07;
                out.m08 = a.m08 + b.m08;
                return out;
              }

              static subtract(out, a, b) {
                out.m00 = a.m00 - b.m00;
                out.m01 = a.m01 - b.m01;
                out.m02 = a.m02 - b.m02;
                out.m03 = a.m03 - b.m03;
                out.m04 = a.m04 - b.m04;
                out.m05 = a.m05 - b.m05;
                out.m06 = a.m06 - b.m06;
                out.m07 = a.m07 - b.m07;
                out.m08 = a.m08 - b.m08;
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.m00 = a.m00 * b;
                out.m01 = a.m01 * b;
                out.m02 = a.m02 * b;
                out.m03 = a.m03 * b;
                out.m04 = a.m04 * b;
                out.m05 = a.m05 * b;
                out.m06 = a.m06 * b;
                out.m07 = a.m07 * b;
                out.m08 = a.m08 * b;
                return out;
              }

              static multiplyScalarAndAdd(out, a, b, scale) {
                out.m00 = b.m00 * scale + a.m00;
                out.m01 = b.m01 * scale + a.m01;
                out.m02 = b.m02 * scale + a.m02;
                out.m03 = b.m03 * scale + a.m03;
                out.m04 = b.m04 * scale + a.m04;
                out.m05 = b.m05 * scale + a.m05;
                out.m06 = b.m06 * scale + a.m06;
                out.m07 = b.m07 * scale + a.m07;
                out.m08 = b.m08 * scale + a.m08;
                return out;
              }

              static strictEquals(a, b) {
                return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.m00 - b.m00) <= epsilon * Math.max(1.0, Math.abs(a.m00), Math.abs(b.m00)) && Math.abs(a.m01 - b.m01) <= epsilon * Math.max(1.0, Math.abs(a.m01), Math.abs(b.m01)) && Math.abs(a.m02 - b.m02) <= epsilon * Math.max(1.0, Math.abs(a.m02), Math.abs(b.m02)) && Math.abs(a.m03 - b.m03) <= epsilon * Math.max(1.0, Math.abs(a.m03), Math.abs(b.m03)) && Math.abs(a.m04 - b.m04) <= epsilon * Math.max(1.0, Math.abs(a.m04), Math.abs(b.m04)) && Math.abs(a.m05 - b.m05) <= epsilon * Math.max(1.0, Math.abs(a.m05), Math.abs(b.m05)) && Math.abs(a.m06 - b.m06) <= epsilon * Math.max(1.0, Math.abs(a.m06), Math.abs(b.m06)) && Math.abs(a.m07 - b.m07) <= epsilon * Math.max(1.0, Math.abs(a.m07), Math.abs(b.m07)) && Math.abs(a.m08 - b.m08) <= epsilon * Math.max(1.0, Math.abs(a.m08), Math.abs(b.m08));
              }

              constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 1, m05 = 0, m06 = 0, m07 = 0, m08 = 1) {
                super();

                if (typeof m00 === 'object') {
                  this.m00 = m00.m00;
                  this.m01 = m00.m01;
                  this.m02 = m00.m02;
                  this.m03 = m00.m03;
                  this.m04 = m00.m04;
                  this.m05 = m00.m05;
                  this.m06 = m00.m06;
                  this.m07 = m00.m07;
                  this.m08 = m00.m08;
                } else {
                  this.m00 = m00;
                  this.m01 = m01;
                  this.m02 = m02;
                  this.m03 = m03;
                  this.m04 = m04;
                  this.m05 = m05;
                  this.m06 = m06;
                  this.m07 = m07;
                  this.m08 = m08;
                }
              }

              clone() {
                const t = this;
                return new Mat3(t.m00, t.m01, t.m02, t.m03, t.m04, t.m05, t.m06, t.m07, t.m08);
              }

              set(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 1, m05 = 0, m06 = 0, m07 = 0, m08 = 1) {
                if (typeof m00 === 'object') {
                  this.m00 = m00.m00;
                  this.m01 = m00.m01;
                  this.m02 = m00.m02;
                  this.m03 = m00.m03;
                  this.m04 = m00.m04;
                  this.m05 = m00.m05;
                  this.m06 = m00.m06;
                  this.m07 = m00.m07;
                  this.m08 = m00.m08;
                } else {
                  this.m00 = m00;
                  this.m01 = m01;
                  this.m02 = m02;
                  this.m03 = m03;
                  this.m04 = m04;
                  this.m05 = m05;
                  this.m06 = m06;
                  this.m07 = m07;
                  this.m08 = m08;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.m00 - other.m00) <= epsilon * Math.max(1.0, Math.abs(this.m00), Math.abs(other.m00)) && Math.abs(this.m01 - other.m01) <= epsilon * Math.max(1.0, Math.abs(this.m01), Math.abs(other.m01)) && Math.abs(this.m02 - other.m02) <= epsilon * Math.max(1.0, Math.abs(this.m02), Math.abs(other.m02)) && Math.abs(this.m03 - other.m03) <= epsilon * Math.max(1.0, Math.abs(this.m03), Math.abs(other.m03)) && Math.abs(this.m04 - other.m04) <= epsilon * Math.max(1.0, Math.abs(this.m04), Math.abs(other.m04)) && Math.abs(this.m05 - other.m05) <= epsilon * Math.max(1.0, Math.abs(this.m05), Math.abs(other.m05)) && Math.abs(this.m06 - other.m06) <= epsilon * Math.max(1.0, Math.abs(this.m06), Math.abs(other.m06)) && Math.abs(this.m07 - other.m07) <= epsilon * Math.max(1.0, Math.abs(this.m07), Math.abs(other.m07)) && Math.abs(this.m08 - other.m08) <= epsilon * Math.max(1.0, Math.abs(this.m08), Math.abs(other.m08));
              }

              strictEquals(other) {
                return this.m00 === other.m00 && this.m01 === other.m01 && this.m02 === other.m02 && this.m03 === other.m03 && this.m04 === other.m04 && this.m05 === other.m05 && this.m06 === other.m06 && this.m07 === other.m07 && this.m08 === other.m08;
              }

              toString() {
                const t = this;
                return `[\n${t.m00}, ${t.m01}, ${t.m02},\n${t.m03},\n${t.m04}, ${t.m05},\n${t.m06}, ${t.m07},\n${t.m08}\n` + `]`;
              }

              identity() {
                this.m00 = 1;
                this.m01 = 0;
                this.m02 = 0;
                this.m03 = 0;
                this.m04 = 1;
                this.m05 = 0;
                this.m06 = 0;
                this.m07 = 0;
                this.m08 = 1;
                return this;
              }

              transpose() {
                const a01 = this.m01;
                const a02 = this.m02;
                const a12 = this.m05;
                this.m01 = this.m03;
                this.m02 = this.m06;
                this.m03 = a01;
                this.m05 = this.m07;
                this.m06 = a02;
                this.m07 = a12;
                return this;
              }

              invert() {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a10 = this.m03;
                const a11 = this.m04;
                const a12 = this.m05;
                const a20 = this.m06;
                const a21 = this.m07;
                const a22 = this.m08;
                const b01 = a22 * a11 - a12 * a21;
                const b11 = -a22 * a10 + a12 * a20;
                const b21 = a21 * a10 - a11 * a20;
                let det = a00 * b01 + a01 * b11 + a02 * b21;

                if (det === 0) {
                  this.set(0, 0, 0, 0, 0, 0, 0, 0, 0);
                  return this;
                }

                det = 1.0 / det;
                this.m00 = b01 * det;
                this.m01 = (-a22 * a01 + a02 * a21) * det;
                this.m02 = (a12 * a01 - a02 * a11) * det;
                this.m03 = b11 * det;
                this.m04 = (a22 * a00 - a02 * a20) * det;
                this.m05 = (-a12 * a00 + a02 * a10) * det;
                this.m06 = b21 * det;
                this.m07 = (-a21 * a00 + a01 * a20) * det;
                this.m08 = (a11 * a00 - a01 * a10) * det;
                return this;
              }

              determinant() {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a10 = this.m03;
                const a11 = this.m04;
                const a12 = this.m05;
                const a20 = this.m06;
                const a21 = this.m07;
                const a22 = this.m08;
                return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
              }

              add(mat) {
                this.m00 += mat.m00;
                this.m01 += mat.m01;
                this.m02 += mat.m02;
                this.m03 += mat.m03;
                this.m04 += mat.m04;
                this.m05 += mat.m05;
                this.m06 += mat.m06;
                this.m07 += mat.m07;
                this.m08 += mat.m08;
                return this;
              }

              subtract(mat) {
                this.m00 -= mat.m00;
                this.m01 -= mat.m01;
                this.m02 -= mat.m02;
                this.m03 -= mat.m03;
                this.m04 -= mat.m04;
                this.m05 -= mat.m05;
                this.m06 -= mat.m06;
                this.m07 -= mat.m07;
                this.m08 -= mat.m08;
                return this;
              }

              multiply(mat) {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a10 = this.m03;
                const a11 = this.m04;
                const a12 = this.m05;
                const a20 = this.m06;
                const a21 = this.m07;
                const a22 = this.m08;
                const b00 = mat.m00;
                const b01 = mat.m01;
                const b02 = mat.m02;
                const b10 = mat.m03;
                const b11 = mat.m04;
                const b12 = mat.m05;
                const b20 = mat.m06;
                const b21 = mat.m07;
                const b22 = mat.m08;
                this.m00 = b00 * a00 + b01 * a10 + b02 * a20;
                this.m01 = b00 * a01 + b01 * a11 + b02 * a21;
                this.m02 = b00 * a02 + b01 * a12 + b02 * a22;
                this.m03 = b10 * a00 + b11 * a10 + b12 * a20;
                this.m04 = b10 * a01 + b11 * a11 + b12 * a21;
                this.m05 = b10 * a02 + b11 * a12 + b12 * a22;
                this.m06 = b20 * a00 + b21 * a10 + b22 * a20;
                this.m07 = b20 * a01 + b21 * a11 + b22 * a21;
                this.m08 = b20 * a02 + b21 * a12 + b22 * a22;
                return this;
              }

              multiplyScalar(scalar) {
                this.m00 *= scalar;
                this.m01 *= scalar;
                this.m02 *= scalar;
                this.m03 *= scalar;
                this.m04 *= scalar;
                this.m05 *= scalar;
                this.m06 *= scalar;
                this.m07 *= scalar;
                this.m08 *= scalar;
                return this;
              }

              scale(vec) {
                const x = vec.x;
                const y = vec.y;
                this.m00 = x * this.m00;
                this.m01 = x * this.m01;
                this.m02 = x * this.m02;
                this.m03 = y * this.m03;
                this.m04 = y * this.m04;
                this.m05 = y * this.m05;
                this.m06 = this.m06;
                this.m07 = this.m07;
                this.m08 = this.m08;
                return this;
              }

              rotate(rad) {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a10 = this.m03;
                const a11 = this.m04;
                const a12 = this.m05;
                const a20 = this.m06;
                const a21 = this.m07;
                const a22 = this.m08;
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                this.m00 = c * a00 + s * a10;
                this.m01 = c * a01 + s * a11;
                this.m02 = c * a02 + s * a12;
                this.m03 = c * a10 - s * a00;
                this.m04 = c * a11 - s * a01;
                this.m05 = c * a12 - s * a02;
                this.m06 = a20;
                this.m07 = a21;
                this.m08 = a22;
                return this;
              }

              fromQuat(q) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const yx = y * x2;
                const yy = y * y2;
                const zx = z * x2;
                const zy = z * y2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                this.m00 = 1 - yy - zz;
                this.m03 = yx - wz;
                this.m06 = zx + wy;
                this.m01 = yx + wz;
                this.m04 = 1 - xx - zz;
                this.m07 = zy - wx;
                this.m02 = zx - wy;
                this.m05 = zy + wx;
                this.m08 = 1 - xx - yy;
                return this;
              }

            } exports('ex', Mat3);
            Mat3.IDENTITY = Object.freeze(new Mat3());
            const v3_1$1 = new Vec3();
            const v3_2$1 = new Vec3();
            CCClass.fastDefine('cc.Mat3', Mat3, {
              m00: 1,
              m01: 0,
              m02: 0,
              m03: 0,
              m04: 1,
              m05: 0,
              m06: 0,
              m07: 0,
              m08: 1
            });
            legacyCC.Mat3 = Mat3;

            class Quat extends ValueType {
              static clone(a) {
                return new Quat(a.x, a.y, a.z, a.w);
              }

              static copy(out, a) {
                out.x = a.x;
                out.y = a.y;
                out.z = a.z;
                out.w = a.w;
                return out;
              }

              static set(out, x, y, z, w) {
                out.x = x;
                out.y = y;
                out.z = z;
                out.w = w;
                return out;
              }

              static identity(out) {
                out.x = 0;
                out.y = 0;
                out.z = 0;
                out.w = 1;
                return out;
              }

              static rotationTo(out, a, b) {
                const dot = Vec3.dot(a, b);

                if (dot < -0.999999) {
                  Vec3.cross(v3_1$2, Vec3.UNIT_X, a);

                  if (v3_1$2.length() < 0.000001) {
                    Vec3.cross(v3_1$2, Vec3.UNIT_Y, a);
                  }

                  Vec3.normalize(v3_1$2, v3_1$2);
                  Quat.fromAxisAngle(out, v3_1$2, Math.PI);
                  return out;
                } else if (dot > 0.999999) {
                  out.x = 0;
                  out.y = 0;
                  out.z = 0;
                  out.w = 1;
                  return out;
                } else {
                  Vec3.cross(v3_1$2, a, b);
                  out.x = v3_1$2.x;
                  out.y = v3_1$2.y;
                  out.z = v3_1$2.z;
                  out.w = 1 + dot;
                  return Quat.normalize(out, out);
                }
              }

              static getAxisAngle(outAxis, q) {
                const rad = Math.acos(q.w) * 2.0;
                const s = Math.sin(rad / 2.0);

                if (s !== 0.0) {
                  outAxis.x = q.x / s;
                  outAxis.y = q.y / s;
                  outAxis.z = q.z / s;
                } else {
                  outAxis.x = 1;
                  outAxis.y = 0;
                  outAxis.z = 0;
                }

                return rad;
              }

              static multiply(out, a, b) {
                const x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;
                const y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;
                const z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;
                const w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;
                out.x = x;
                out.y = y;
                out.z = z;
                out.w = w;
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.x = a.x * b;
                out.y = a.y * b;
                out.z = a.z * b;
                out.w = a.w * b;
                return out;
              }

              static scaleAndAdd(out, a, b, scale) {
                out.x = a.x + b.x * scale;
                out.y = a.y + b.y * scale;
                out.z = a.z + b.z * scale;
                out.w = a.w + b.w * scale;
                return out;
              }

              static rotateX(out, a, rad) {
                rad *= 0.5;
                const bx = Math.sin(rad);
                const bw = Math.cos(rad);
                const {
                  x,
                  y,
                  z,
                  w
                } = a;
                out.x = x * bw + w * bx;
                out.y = y * bw + z * bx;
                out.z = z * bw - y * bx;
                out.w = w * bw - x * bx;
                return out;
              }

              static rotateY(out, a, rad) {
                rad *= 0.5;
                const by = Math.sin(rad);
                const bw = Math.cos(rad);
                const {
                  x,
                  y,
                  z,
                  w
                } = a;
                out.x = x * bw - z * by;
                out.y = y * bw + w * by;
                out.z = z * bw + x * by;
                out.w = w * bw - y * by;
                return out;
              }

              static rotateZ(out, a, rad) {
                rad *= 0.5;
                const bz = Math.sin(rad);
                const bw = Math.cos(rad);
                const {
                  x,
                  y,
                  z,
                  w
                } = a;
                out.x = x * bw + y * bz;
                out.y = y * bw - x * bz;
                out.z = z * bw + w * bz;
                out.w = w * bw - z * bz;
                return out;
              }

              static rotateAround(out, rot, axis, rad) {
                Quat.invert(qt_1, rot);
                Vec3.transformQuat(v3_1$2, axis, qt_1);
                Quat.fromAxisAngle(qt_1, v3_1$2, rad);
                Quat.multiply(out, rot, qt_1);
                return out;
              }

              static rotateAroundLocal(out, rot, axis, rad) {
                Quat.fromAxisAngle(qt_1, axis, rad);
                Quat.multiply(out, rot, qt_1);
                return out;
              }

              static calculateW(out, a) {
                out.x = a.x;
                out.y = a.y;
                out.z = a.z;
                out.w = Math.sqrt(Math.abs(1.0 - a.x * a.x - a.y * a.y - a.z * a.z));
                return out;
              }

              static dot(a, b) {
                return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
              }

              static lerp(out, a, b, t) {
                out.x = a.x + t * (b.x - a.x);
                out.y = a.y + t * (b.y - a.y);
                out.z = a.z + t * (b.z - a.z);
                out.w = a.w + t * (b.w - a.w);
                return out;
              }

              static slerp(out, a, b, t) {
                let scale0 = 0;
                let scale1 = 0;
                let bx = b.x;
                let by = b.y;
                let bz = b.z;
                let bw = b.w;
                let cosom = a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;

                if (cosom < 0.0) {
                  cosom = -cosom;
                  bx = -bx;
                  by = -by;
                  bz = -bz;
                  bw = -bw;
                }

                if (1.0 - cosom > 0.000001) {
                  const omega = Math.acos(cosom);
                  const sinom = Math.sin(omega);
                  scale0 = Math.sin((1.0 - t) * omega) / sinom;
                  scale1 = Math.sin(t * omega) / sinom;
                } else {
                  scale0 = 1.0 - t;
                  scale1 = t;
                }

                out.x = scale0 * a.x + scale1 * bx;
                out.y = scale0 * a.y + scale1 * by;
                out.z = scale0 * a.z + scale1 * bz;
                out.w = scale0 * a.w + scale1 * bw;
                return out;
              }

              static sqlerp(out, a, b, c, d, t) {
                Quat.slerp(qt_1, a, d, t);
                Quat.slerp(qt_2, b, c, t);
                Quat.slerp(out, qt_1, qt_2, 2 * t * (1 - t));
                return out;
              }

              static invert(out, a) {
                const dot = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
                const invDot = dot ? 1.0 / dot : 0;
                out.x = -a.x * invDot;
                out.y = -a.y * invDot;
                out.z = -a.z * invDot;
                out.w = a.w * invDot;
                return out;
              }

              static conjugate(out, a) {
                out.x = -a.x;
                out.y = -a.y;
                out.z = -a.z;
                out.w = a.w;
                return out;
              }

              static len(a) {
                return Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
              }

              static lengthSqr(a) {
                return a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
              }

              static normalize(out, a) {
                let len = a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  out.x = a.x * len;
                  out.y = a.y * len;
                  out.z = a.z * len;
                  out.w = a.w * len;
                }

                return out;
              }

              static fromAxes(out, xAxis, yAxis, zAxis) {
                Mat3.set(m3_1, xAxis.x, xAxis.y, xAxis.z, yAxis.x, yAxis.y, yAxis.z, zAxis.x, zAxis.y, zAxis.z);
                return Quat.normalize(out, Quat.fromMat3(out, m3_1));
              }

              static fromViewUp(out, view, up) {
                Mat3.fromViewUp(m3_1, view, up);
                return Quat.normalize(out, Quat.fromMat3(out, m3_1));
              }

              static fromAxisAngle(out, axis, rad) {
                rad *= 0.5;
                const s = Math.sin(rad);
                out.x = s * axis.x;
                out.y = s * axis.y;
                out.z = s * axis.z;
                out.w = Math.cos(rad);
                return out;
              }

              static fromMat3(out, m) {
                const {
                  m00,
                  m03: m01,
                  m06: m02,
                  m01: m10,
                  m04: m11,
                  m07: m12,
                  m02: m20,
                  m05: m21,
                  m08: m22
                } = m;
                const trace = m00 + m11 + m22;

                if (trace > 0) {
                  const s = 0.5 / Math.sqrt(trace + 1.0);
                  out.w = 0.25 / s;
                  out.x = (m21 - m12) * s;
                  out.y = (m02 - m20) * s;
                  out.z = (m10 - m01) * s;
                } else if (m00 > m11 && m00 > m22) {
                  const s = 2.0 * Math.sqrt(1.0 + m00 - m11 - m22);
                  out.w = (m21 - m12) / s;
                  out.x = 0.25 * s;
                  out.y = (m01 + m10) / s;
                  out.z = (m02 + m20) / s;
                } else if (m11 > m22) {
                  const s = 2.0 * Math.sqrt(1.0 + m11 - m00 - m22);
                  out.w = (m02 - m20) / s;
                  out.x = (m01 + m10) / s;
                  out.y = 0.25 * s;
                  out.z = (m12 + m21) / s;
                } else {
                  const s = 2.0 * Math.sqrt(1.0 + m22 - m00 - m11);
                  out.w = (m10 - m01) / s;
                  out.x = (m02 + m20) / s;
                  out.y = (m12 + m21) / s;
                  out.z = 0.25 * s;
                }

                return out;
              }

              static fromEuler(out, x, y, z) {
                x *= halfToRad;
                y *= halfToRad;
                z *= halfToRad;
                const sx = Math.sin(x);
                const cx = Math.cos(x);
                const sy = Math.sin(y);
                const cy = Math.cos(y);
                const sz = Math.sin(z);
                const cz = Math.cos(z);
                out.x = sx * cy * cz + cx * sy * sz;
                out.y = cx * sy * cz + sx * cy * sz;
                out.z = cx * cy * sz - sx * sy * cz;
                out.w = cx * cy * cz - sx * sy * sz;
                return out;
              }

              static fromAngleZ(out, z) {
                z *= halfToRad;
                out.x = out.y = 0;
                out.z = Math.sin(z);
                out.w = Math.cos(z);
                return out;
              }

              static toAxisX(out, q) {
                const fy = 2.0 * q.y;
                const fz = 2.0 * q.z;
                out.x = 1.0 - fy * q.y - fz * q.z;
                out.y = fy * q.x + fz * q.w;
                out.z = fz * q.x + fy * q.w;
                return out;
              }

              static toAxisY(out, q) {
                const fx = 2.0 * q.x;
                const fy = 2.0 * q.y;
                const fz = 2.0 * q.z;
                out.x = fy * q.x - fz * q.w;
                out.y = 1.0 - fx * q.x - fz * q.z;
                out.z = fz * q.y + fx * q.w;
                return out;
              }

              static toAxisZ(out, q) {
                const fx = 2.0 * q.x;
                const fy = 2.0 * q.y;
                const fz = 2.0 * q.z;
                out.x = fz * q.x - fy * q.w;
                out.y = fz * q.y - fx * q.w;
                out.z = 1.0 - fx * q.x - fy * q.y;
                return out;
              }

              static toEuler(out, q, outerZ) {
                const {
                  x,
                  y,
                  z,
                  w
                } = q;
                let bank = 0;
                let heading = 0;
                let attitude = 0;
                const test = x * y + z * w;

                if (test > 0.499999) {
                  bank = 0;
                  heading = toDegree(2 * Math.atan2(x, w));
                  attitude = 90;
                } else if (test < -0.499999) {
                  bank = 0;
                  heading = -toDegree(2 * Math.atan2(x, w));
                  attitude = -90;
                } else {
                  const sqx = x * x;
                  const sqy = y * y;
                  const sqz = z * z;
                  bank = toDegree(Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz));
                  heading = toDegree(Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz));
                  attitude = toDegree(Math.asin(2 * test));

                  if (outerZ) {
                    bank = -180 * Math.sign(bank + 1e-6) + bank;
                    heading = -180 * Math.sign(heading + 1e-6) + heading;
                    attitude = 180 * Math.sign(attitude + 1e-6) - attitude;
                  }
                }

                out.x = bank;
                out.y = heading;
                out.z = attitude;
                return out;
              }

              static toArray(out, q, ofs = 0) {
                out[ofs + 0] = q.x;
                out[ofs + 1] = q.y;
                out[ofs + 2] = q.z;
                out[ofs + 3] = q.w;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.x = arr[ofs + 0];
                out.y = arr[ofs + 1];
                out.z = arr[ofs + 2];
                out.w = arr[ofs + 3];
                return out;
              }

              static strictEquals(a, b) {
                return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= epsilon * Math.max(1.0, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= epsilon * Math.max(1.0, Math.abs(a.w), Math.abs(b.w));
              }

              constructor(x, y, z, w) {
                super();

                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                  this.w = x.w;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                  this.w = w !== null && w !== void 0 ? w : 1;
                }
              }

              clone() {
                return new Quat(this.x, this.y, this.z, this.w);
              }

              set(x, y, z, w) {
                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                  this.w = x.w;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                  this.w = w !== null && w !== void 0 ? w : 1;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(other.z)) && Math.abs(this.w - other.w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(other.w));
              }

              strictEquals(other) {
                return other && this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
              }

              getEulerAngles(out) {
                return Quat.toEuler(out, this);
              }

              lerp(to, ratio) {
                this.x += ratio * (to.x - this.x);
                this.y += ratio * (to.y - this.y);
                this.z += ratio * (to.z - this.z);
                this.w += ratio * (to.w - this.w);
                return this;
              }

              slerp(to, ratio) {
                return Quat.slerp(this, this, to, ratio);
              }

              length() {
                return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);
              }

              lengthSqr() {
                return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;
              }

            } exports('bJ', Quat);
            Quat.IDENTITY = Object.freeze(new Quat());
            const qt_1 = new Quat();
            const qt_2 = new Quat();
            const v3_1$2 = new Vec3();
            const m3_1 = new Mat3();
            const halfToRad = 0.5 * Math.PI / 180.0;
            CCClass.fastDefine('cc.Quat', Quat, {
              x: 0,
              y: 0,
              z: 0,
              w: 1
            });
            legacyCC.Quat = Quat;
            function quat(x = 0, y = 0, z = 0, w = 1) {
              return new Quat(x, y, z, w);
            }
            legacyCC.quat = quat;

            const preTransforms = exports('e4', Object.freeze([Object.freeze([1, 0, 0, 1]), Object.freeze([0, 1, -1, 0]), Object.freeze([-1, 0, 0, -1]), Object.freeze([0, -1, 1, 0])]));
            class Mat4 extends ValueType {
              static clone(a) {
                return new Mat4(a.m00, a.m01, a.m02, a.m03, a.m04, a.m05, a.m06, a.m07, a.m08, a.m09, a.m10, a.m11, a.m12, a.m13, a.m14, a.m15);
              }

              static copy(out, a) {
                out.m00 = a.m00;
                out.m01 = a.m01;
                out.m02 = a.m02;
                out.m03 = a.m03;
                out.m04 = a.m04;
                out.m05 = a.m05;
                out.m06 = a.m06;
                out.m07 = a.m07;
                out.m08 = a.m08;
                out.m09 = a.m09;
                out.m10 = a.m10;
                out.m11 = a.m11;
                out.m12 = a.m12;
                out.m13 = a.m13;
                out.m14 = a.m14;
                out.m15 = a.m15;
                return out;
              }

              static set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
                out.m00 = m00;
                out.m01 = m01;
                out.m02 = m02;
                out.m03 = m03;
                out.m04 = m10;
                out.m05 = m11;
                out.m06 = m12;
                out.m07 = m13;
                out.m08 = m20;
                out.m09 = m21;
                out.m10 = m22;
                out.m11 = m23;
                out.m12 = m30;
                out.m13 = m31;
                out.m14 = m32;
                out.m15 = m33;
                return out;
              }

              static identity(out) {
                out.m00 = 1;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = 1;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = 1;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static transpose(out, a) {
                if (out === a) {
                  const a01 = a.m01;
                  const a02 = a.m02;
                  const a03 = a.m03;
                  const a12 = a.m06;
                  const a13 = a.m07;
                  const a23 = a.m11;
                  out.m01 = a.m04;
                  out.m02 = a.m08;
                  out.m03 = a.m12;
                  out.m04 = a01;
                  out.m06 = a.m09;
                  out.m07 = a.m13;
                  out.m08 = a02;
                  out.m09 = a12;
                  out.m11 = a.m14;
                  out.m12 = a03;
                  out.m13 = a13;
                  out.m14 = a23;
                } else {
                  out.m00 = a.m00;
                  out.m01 = a.m04;
                  out.m02 = a.m08;
                  out.m03 = a.m12;
                  out.m04 = a.m01;
                  out.m05 = a.m05;
                  out.m06 = a.m09;
                  out.m07 = a.m13;
                  out.m08 = a.m02;
                  out.m09 = a.m06;
                  out.m10 = a.m10;
                  out.m11 = a.m14;
                  out.m12 = a.m03;
                  out.m13 = a.m07;
                  out.m14 = a.m11;
                  out.m15 = a.m15;
                }

                return out;
              }

              static invert(out, a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const a30 = a.m12;
                const a31 = a.m13;
                const a32 = a.m14;
                const a33 = a.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

                if (det === 0) {
                  out.m00 = 0;
                  out.m01 = 0;
                  out.m02 = 0;
                  out.m03 = 0;
                  out.m04 = 0;
                  out.m05 = 0;
                  out.m06 = 0;
                  out.m07 = 0;
                  out.m08 = 0;
                  out.m09 = 0;
                  out.m10 = 0;
                  out.m11 = 0;
                  out.m12 = 0;
                  out.m13 = 0;
                  out.m14 = 0;
                  out.m15 = 0;
                  return out;
                }

                det = 1.0 / det;
                out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                out.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                out.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                out.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                out.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                out.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                out.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                out.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                out.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                out.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                out.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                out.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                out.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                out.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                return out;
              }

              static determinant(a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const a30 = a.m12;
                const a31 = a.m13;
                const a32 = a.m14;
                const a33 = a.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
              }

              static multiply(out, a, b) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const a30 = a.m12;
                const a31 = a.m13;
                const a32 = a.m14;
                const a33 = a.m15;
                let b0 = b.m00;
                let b1 = b.m01;
                let b2 = b.m02;
                let b3 = b.m03;
                out.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = b.m04;
                b1 = b.m05;
                b2 = b.m06;
                b3 = b.m07;
                out.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = b.m08;
                b1 = b.m09;
                b2 = b.m10;
                b3 = b.m11;
                out.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = b.m12;
                b1 = b.m13;
                b2 = b.m14;
                b3 = b.m15;
                out.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                out.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                out.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                out.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                return out;
              }

              static transform(out, a, v) {
                const x = v.x;
                const y = v.y;
                const z = v.z;

                if (a === out) {
                  out.m12 = a.m00 * x + a.m04 * y + a.m08 * z + a.m12;
                  out.m13 = a.m01 * x + a.m05 * y + a.m09 * z + a.m13;
                  out.m14 = a.m02 * x + a.m06 * y + a.m10 * z + a.m14;
                  out.m15 = a.m03 * x + a.m07 * y + a.m11 * z + a.m15;
                } else {
                  const a00 = a.m00;
                  const a01 = a.m01;
                  const a02 = a.m02;
                  const a03 = a.m03;
                  const a10 = a.m04;
                  const a11 = a.m05;
                  const a12 = a.m06;
                  const a13 = a.m07;
                  const a20 = a.m08;
                  const a21 = a.m09;
                  const a22 = a.m10;
                  const a23 = a.m11;
                  const a30 = a.m12;
                  const a31 = a.m13;
                  const a32 = a.m14;
                  const a33 = a.m15;
                  out.m00 = a00;
                  out.m01 = a01;
                  out.m02 = a02;
                  out.m03 = a03;
                  out.m04 = a10;
                  out.m05 = a11;
                  out.m06 = a12;
                  out.m07 = a13;
                  out.m08 = a20;
                  out.m09 = a21;
                  out.m10 = a22;
                  out.m11 = a23;
                  out.m12 = a00 * x + a10 * y + a20 * z + a.m12;
                  out.m13 = a01 * x + a11 * y + a21 * z + a.m13;
                  out.m14 = a02 * x + a12 * y + a22 * z + a.m14;
                  out.m15 = a03 * x + a13 * y + a23 * z + a.m15;
                }

                return out;
              }

              static translate(out, a, v) {
                console.warn('function changed');

                if (a === out) {
                  out.m12 += v.x;
                  out.m13 += v.y;
                  out.m14 += v.z;
                } else {
                  out.m00 = a.m00;
                  out.m01 = a.m01;
                  out.m02 = a.m02;
                  out.m03 = a.m03;
                  out.m04 = a.m04;
                  out.m05 = a.m05;
                  out.m06 = a.m06;
                  out.m07 = a.m07;
                  out.m08 = a.m08;
                  out.m09 = a.m09;
                  out.m10 = a.m10;
                  out.m11 = a.m11;
                  out.m12 += v.x;
                  out.m13 += v.y;
                  out.m14 += v.z;
                  out.m15 = a.m15;
                }

                return out;
              }

              static scale(out, a, v) {
                const x = v.x;
                const y = v.y;
                const z = v.z;
                out.m00 = a.m00 * x;
                out.m01 = a.m01 * x;
                out.m02 = a.m02 * x;
                out.m03 = a.m03 * x;
                out.m04 = a.m04 * y;
                out.m05 = a.m05 * y;
                out.m06 = a.m06 * y;
                out.m07 = a.m07 * y;
                out.m08 = a.m08 * z;
                out.m09 = a.m09 * z;
                out.m10 = a.m10 * z;
                out.m11 = a.m11 * z;
                out.m12 = a.m12;
                out.m13 = a.m13;
                out.m14 = a.m14;
                out.m15 = a.m15;
                return out;
              }

              static rotate(out, a, rad, axis) {
                let x = axis.x;
                let y = axis.y;
                let z = axis.z;
                let len = Math.sqrt(x * x + y * y + z * z);

                if (Math.abs(len) < EPSILON) {
                  return null;
                }

                len = 1 / len;
                x *= len;
                y *= len;
                z *= len;
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const t = 1 - c;
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const b00 = x * x * t + c;
                const b01 = y * x * t + z * s;
                const b02 = z * x * t - y * s;
                const b10 = x * y * t - z * s;
                const b11 = y * y * t + c;
                const b12 = z * y * t + x * s;
                const b20 = x * z * t + y * s;
                const b21 = y * z * t - x * s;
                const b22 = z * z * t + c;
                out.m00 = a00 * b00 + a10 * b01 + a20 * b02;
                out.m01 = a01 * b00 + a11 * b01 + a21 * b02;
                out.m02 = a02 * b00 + a12 * b01 + a22 * b02;
                out.m03 = a03 * b00 + a13 * b01 + a23 * b02;
                out.m04 = a00 * b10 + a10 * b11 + a20 * b12;
                out.m05 = a01 * b10 + a11 * b11 + a21 * b12;
                out.m06 = a02 * b10 + a12 * b11 + a22 * b12;
                out.m07 = a03 * b10 + a13 * b11 + a23 * b12;
                out.m08 = a00 * b20 + a10 * b21 + a20 * b22;
                out.m09 = a01 * b20 + a11 * b21 + a21 * b22;
                out.m10 = a02 * b20 + a12 * b21 + a22 * b22;
                out.m11 = a03 * b20 + a13 * b21 + a23 * b22;

                if (a !== out) {
                  out.m12 = a.m12;
                  out.m13 = a.m13;
                  out.m14 = a.m14;
                  out.m15 = a.m15;
                }

                return out;
              }

              static rotateX(out, a, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;

                if (a !== out) {
                  out.m00 = a.m00;
                  out.m01 = a.m01;
                  out.m02 = a.m02;
                  out.m03 = a.m03;
                  out.m12 = a.m12;
                  out.m13 = a.m13;
                  out.m14 = a.m14;
                  out.m15 = a.m15;
                }

                out.m04 = a10 * c + a20 * s;
                out.m05 = a11 * c + a21 * s;
                out.m06 = a12 * c + a22 * s;
                out.m07 = a13 * c + a23 * s;
                out.m08 = a20 * c - a10 * s;
                out.m09 = a21 * c - a11 * s;
                out.m10 = a22 * c - a12 * s;
                out.m11 = a23 * c - a13 * s;
                return out;
              }

              static rotateY(out, a, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;

                if (a !== out) {
                  out.m04 = a.m04;
                  out.m05 = a.m05;
                  out.m06 = a.m06;
                  out.m07 = a.m07;
                  out.m12 = a.m12;
                  out.m13 = a.m13;
                  out.m14 = a.m14;
                  out.m15 = a.m15;
                }

                out.m00 = a00 * c - a20 * s;
                out.m01 = a01 * c - a21 * s;
                out.m02 = a02 * c - a22 * s;
                out.m03 = a03 * c - a23 * s;
                out.m08 = a00 * s + a20 * c;
                out.m09 = a01 * s + a21 * c;
                out.m10 = a02 * s + a22 * c;
                out.m11 = a03 * s + a23 * c;
                return out;
              }

              static rotateZ(out, a, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;

                if (a !== out) {
                  out.m08 = a.m08;
                  out.m09 = a.m09;
                  out.m10 = a.m10;
                  out.m11 = a.m11;
                  out.m12 = a.m12;
                  out.m13 = a.m13;
                  out.m14 = a.m14;
                  out.m15 = a.m15;
                }

                out.m00 = a00 * c + a10 * s;
                out.m01 = a01 * c + a11 * s;
                out.m02 = a02 * c + a12 * s;
                out.m03 = a03 * c + a13 * s;
                out.m04 = a10 * c - a00 * s;
                out.m05 = a11 * c - a01 * s;
                out.m06 = a12 * c - a02 * s;
                out.m07 = a13 * c - a03 * s;
                return out;
              }

              static fromTranslation(out, v) {
                out.m00 = 1;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = 1;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = 1;
                out.m11 = 0;
                out.m12 = v.x;
                out.m13 = v.y;
                out.m14 = v.z;
                out.m15 = 1;
                return out;
              }

              static fromScaling(out, v) {
                out.m00 = v.x;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = v.y;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = v.z;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static fromRotation(out, rad, axis) {
                let x = axis.x;
                let y = axis.y;
                let z = axis.z;
                let len = Math.sqrt(x * x + y * y + z * z);

                if (Math.abs(len) < EPSILON) {
                  return null;
                }

                len = 1 / len;
                x *= len;
                y *= len;
                z *= len;
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const t = 1 - c;
                out.m00 = x * x * t + c;
                out.m01 = y * x * t + z * s;
                out.m02 = z * x * t - y * s;
                out.m03 = 0;
                out.m04 = x * y * t - z * s;
                out.m05 = y * y * t + c;
                out.m06 = z * y * t + x * s;
                out.m07 = 0;
                out.m08 = x * z * t + y * s;
                out.m09 = y * z * t - x * s;
                out.m10 = z * z * t + c;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static fromXRotation(out, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                out.m00 = 1;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = c;
                out.m06 = s;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = -s;
                out.m10 = c;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static fromYRotation(out, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                out.m00 = c;
                out.m01 = 0;
                out.m02 = -s;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = 1;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = s;
                out.m09 = 0;
                out.m10 = c;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static fromZRotation(out, rad) {
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                out.m00 = c;
                out.m01 = s;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = -s;
                out.m05 = c;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = 1;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static fromRT(out, q, v) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const xy = x * y2;
                const xz = x * z2;
                const yy = y * y2;
                const yz = y * z2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                out.m00 = 1 - (yy + zz);
                out.m01 = xy + wz;
                out.m02 = xz - wy;
                out.m03 = 0;
                out.m04 = xy - wz;
                out.m05 = 1 - (xx + zz);
                out.m06 = yz + wx;
                out.m07 = 0;
                out.m08 = xz + wy;
                out.m09 = yz - wx;
                out.m10 = 1 - (xx + yy);
                out.m11 = 0;
                out.m12 = v.x;
                out.m13 = v.y;
                out.m14 = v.z;
                out.m15 = 1;
                return out;
              }

              static getTranslation(out, mat) {
                out.x = mat.m12;
                out.y = mat.m13;
                out.z = mat.m14;
                return out;
              }

              static getScaling(out, mat) {
                const m00 = m3_1$1.m00 = mat.m00;
                const m01 = m3_1$1.m01 = mat.m01;
                const m02 = m3_1$1.m02 = mat.m02;
                const m04 = m3_1$1.m03 = mat.m04;
                const m05 = m3_1$1.m04 = mat.m05;
                const m06 = m3_1$1.m05 = mat.m06;
                const m08 = m3_1$1.m06 = mat.m08;
                const m09 = m3_1$1.m07 = mat.m09;
                const m10 = m3_1$1.m08 = mat.m10;
                out.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
                out.y = Math.sqrt(m04 * m04 + m05 * m05 + m06 * m06);
                out.z = Math.sqrt(m08 * m08 + m09 * m09 + m10 * m10);

                if (Mat3.determinant(m3_1$1) < 0) {
                  out.x *= -1;
                }

                return out;
              }

              static getRotation(out, mat) {
                const trace = mat.m00 + mat.m05 + mat.m10;
                let S = 0;

                if (trace > 0) {
                  S = Math.sqrt(trace + 1.0) * 2;
                  out.w = 0.25 * S;
                  out.x = (mat.m06 - mat.m09) / S;
                  out.y = (mat.m08 - mat.m02) / S;
                  out.z = (mat.m01 - mat.m04) / S;
                } else if (mat.m00 > mat.m05 && mat.m00 > mat.m10) {
                  S = Math.sqrt(1.0 + mat.m00 - mat.m05 - mat.m10) * 2;
                  out.w = (mat.m06 - mat.m09) / S;
                  out.x = 0.25 * S;
                  out.y = (mat.m01 + mat.m04) / S;
                  out.z = (mat.m08 + mat.m02) / S;
                } else if (mat.m05 > mat.m10) {
                  S = Math.sqrt(1.0 + mat.m05 - mat.m00 - mat.m10) * 2;
                  out.w = (mat.m08 - mat.m02) / S;
                  out.x = (mat.m01 + mat.m04) / S;
                  out.y = 0.25 * S;
                  out.z = (mat.m06 + mat.m09) / S;
                } else {
                  S = Math.sqrt(1.0 + mat.m10 - mat.m00 - mat.m05) * 2;
                  out.w = (mat.m01 - mat.m04) / S;
                  out.x = (mat.m08 + mat.m02) / S;
                  out.y = (mat.m06 + mat.m09) / S;
                  out.z = 0.25 * S;
                }

                return out;
              }

              static toRTS(m, q, v, s) {
                s.x = Vec3.set(v3_1$3, m.m00, m.m01, m.m02).length();
                m3_1$1.m00 = m.m00 / s.x;
                m3_1$1.m01 = m.m01 / s.x;
                m3_1$1.m02 = m.m02 / s.x;
                s.y = Vec3.set(v3_1$3, m.m04, m.m05, m.m06).length();
                m3_1$1.m03 = m.m04 / s.y;
                m3_1$1.m04 = m.m05 / s.y;
                m3_1$1.m05 = m.m06 / s.y;
                s.z = Vec3.set(v3_1$3, m.m08, m.m09, m.m10).length();
                m3_1$1.m06 = m.m08 / s.z;
                m3_1$1.m07 = m.m09 / s.z;
                m3_1$1.m08 = m.m10 / s.z;
                const det = Mat3.determinant(m3_1$1);

                if (det < 0) {
                  s.x *= -1;
                  m3_1$1.m00 *= -1;
                  m3_1$1.m01 *= -1;
                  m3_1$1.m02 *= -1;
                }

                Quat.fromMat3(q, m3_1$1);
                Vec3.set(v, m.m12, m.m13, m.m14);
              }

              static fromRTS(out, q, v, s) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const xy = x * y2;
                const xz = x * z2;
                const yy = y * y2;
                const yz = y * z2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                const sx = s.x;
                const sy = s.y;
                const sz = s.z;
                out.m00 = (1 - (yy + zz)) * sx;
                out.m01 = (xy + wz) * sx;
                out.m02 = (xz - wy) * sx;
                out.m03 = 0;
                out.m04 = (xy - wz) * sy;
                out.m05 = (1 - (xx + zz)) * sy;
                out.m06 = (yz + wx) * sy;
                out.m07 = 0;
                out.m08 = (xz + wy) * sz;
                out.m09 = (yz - wx) * sz;
                out.m10 = (1 - (xx + yy)) * sz;
                out.m11 = 0;
                out.m12 = v.x;
                out.m13 = v.y;
                out.m14 = v.z;
                out.m15 = 1;
                return out;
              }

              static fromRTSOrigin(out, q, v, s, o) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const xy = x * y2;
                const xz = x * z2;
                const yy = y * y2;
                const yz = y * z2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                const sx = s.x;
                const sy = s.y;
                const sz = s.z;
                const ox = o.x;
                const oy = o.y;
                const oz = o.z;
                out.m00 = (1 - (yy + zz)) * sx;
                out.m01 = (xy + wz) * sx;
                out.m02 = (xz - wy) * sx;
                out.m03 = 0;
                out.m04 = (xy - wz) * sy;
                out.m05 = (1 - (xx + zz)) * sy;
                out.m06 = (yz + wx) * sy;
                out.m07 = 0;
                out.m08 = (xz + wy) * sz;
                out.m09 = (yz - wx) * sz;
                out.m10 = (1 - (xx + yy)) * sz;
                out.m11 = 0;
                out.m12 = v.x + ox - (out.m00 * ox + out.m04 * oy + out.m08 * oz);
                out.m13 = v.y + oy - (out.m01 * ox + out.m05 * oy + out.m09 * oz);
                out.m14 = v.z + oz - (out.m02 * ox + out.m06 * oy + out.m10 * oz);
                out.m15 = 1;
                return out;
              }

              static fromQuat(out, q) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const yx = y * x2;
                const yy = y * y2;
                const zx = z * x2;
                const zy = z * y2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                out.m00 = 1 - yy - zz;
                out.m01 = yx + wz;
                out.m02 = zx - wy;
                out.m03 = 0;
                out.m04 = yx - wz;
                out.m05 = 1 - xx - zz;
                out.m06 = zy + wx;
                out.m07 = 0;
                out.m08 = zx + wy;
                out.m09 = zy - wx;
                out.m10 = 1 - xx - yy;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static frustum(out, left, right, bottom, top, near, far) {
                const rl = 1 / (right - left);
                const tb = 1 / (top - bottom);
                const nf = 1 / (near - far);
                out.m00 = near * 2 * rl;
                out.m01 = 0;
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = 0;
                out.m05 = near * 2 * tb;
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = (right + left) * rl;
                out.m09 = (top + bottom) * tb;
                out.m10 = (far + near) * nf;
                out.m11 = -1;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = far * near * 2 * nf;
                out.m15 = 0;
                return out;
              }

              static perspective(out, fov, aspect, near, far, isFOVY = true, minClipZ = -1, projectionSignY = 1, orientation = 0) {
                const f = 1.0 / Math.tan(fov / 2);
                const nf = 1 / (near - far);
                const x = isFOVY ? f / aspect : f;
                const y = (isFOVY ? f : f * aspect) * projectionSignY;
                const preTransform = preTransforms[orientation];
                out.m00 = x * preTransform[0];
                out.m01 = x * preTransform[1];
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = y * preTransform[2];
                out.m05 = y * preTransform[3];
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = (far - minClipZ * near) * nf;
                out.m11 = -1;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = far * near * nf * (1 - minClipZ);
                out.m15 = 0;
                return out;
              }

              static ortho(out, left, right, bottom, top, near, far, minClipZ = -1, projectionSignY = 1, orientation = 0) {
                const lr = 1 / (left - right);
                const bt = 1 / (bottom - top) * projectionSignY;
                const nf = 1 / (near - far);
                const x = -2 * lr;
                const y = -2 * bt;
                const dx = (left + right) * lr;
                const dy = (top + bottom) * bt;
                const preTransform = preTransforms[orientation];
                out.m00 = x * preTransform[0];
                out.m01 = x * preTransform[1];
                out.m02 = 0;
                out.m03 = 0;
                out.m04 = y * preTransform[2];
                out.m05 = y * preTransform[3];
                out.m06 = 0;
                out.m07 = 0;
                out.m08 = 0;
                out.m09 = 0;
                out.m10 = nf * (1 - minClipZ);
                out.m11 = 0;
                out.m12 = dx * preTransform[0] + dy * preTransform[2];
                out.m13 = dx * preTransform[1] + dy * preTransform[3];
                out.m14 = (near - minClipZ * far) * nf;
                out.m15 = 1;
                return out;
              }

              static lookAt(out, eye, center, up) {
                const eyex = eye.x;
                const eyey = eye.y;
                const eyez = eye.z;
                const upx = up.x;
                const upy = up.y;
                const upz = up.z;
                const centerx = center.x;
                const centery = center.y;
                const centerz = center.z;
                let z0 = eyex - centerx;
                let z1 = eyey - centery;
                let z2 = eyez - centerz;
                let len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
                z0 *= len;
                z1 *= len;
                z2 *= len;
                let x0 = upy * z2 - upz * z1;
                let x1 = upz * z0 - upx * z2;
                let x2 = upx * z1 - upy * z0;
                len = 1 / Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
                x0 *= len;
                x1 *= len;
                x2 *= len;
                const y0 = z1 * x2 - z2 * x1;
                const y1 = z2 * x0 - z0 * x2;
                const y2 = z0 * x1 - z1 * x0;
                out.m00 = x0;
                out.m01 = y0;
                out.m02 = z0;
                out.m03 = 0;
                out.m04 = x1;
                out.m05 = y1;
                out.m06 = z1;
                out.m07 = 0;
                out.m08 = x2;
                out.m09 = y2;
                out.m10 = z2;
                out.m11 = 0;
                out.m12 = -(x0 * eyex + x1 * eyey + x2 * eyez);
                out.m13 = -(y0 * eyex + y1 * eyey + y2 * eyez);
                out.m14 = -(z0 * eyex + z1 * eyey + z2 * eyez);
                out.m15 = 1;
                return out;
              }

              static inverseTranspose(out, a) {
                const a00 = a.m00;
                const a01 = a.m01;
                const a02 = a.m02;
                const a03 = a.m03;
                const a10 = a.m04;
                const a11 = a.m05;
                const a12 = a.m06;
                const a13 = a.m07;
                const a20 = a.m08;
                const a21 = a.m09;
                const a22 = a.m10;
                const a23 = a.m11;
                const a30 = a.m12;
                const a31 = a.m13;
                const a32 = a.m14;
                const a33 = a.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

                if (!det) {
                  return null;
                }

                det = 1.0 / det;
                out.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                out.m01 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                out.m02 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                out.m03 = 0;
                out.m04 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                out.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                out.m06 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                out.m07 = 0;
                out.m08 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                out.m09 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                out.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                out.m11 = 0;
                out.m12 = 0;
                out.m13 = 0;
                out.m14 = 0;
                out.m15 = 1;
                return out;
              }

              static toArray(out, m, ofs = 0) {
                out[ofs + 0] = m.m00;
                out[ofs + 1] = m.m01;
                out[ofs + 2] = m.m02;
                out[ofs + 3] = m.m03;
                out[ofs + 4] = m.m04;
                out[ofs + 5] = m.m05;
                out[ofs + 6] = m.m06;
                out[ofs + 7] = m.m07;
                out[ofs + 8] = m.m08;
                out[ofs + 9] = m.m09;
                out[ofs + 10] = m.m10;
                out[ofs + 11] = m.m11;
                out[ofs + 12] = m.m12;
                out[ofs + 13] = m.m13;
                out[ofs + 14] = m.m14;
                out[ofs + 15] = m.m15;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.m00 = arr[ofs + 0];
                out.m01 = arr[ofs + 1];
                out.m02 = arr[ofs + 2];
                out.m03 = arr[ofs + 3];
                out.m04 = arr[ofs + 4];
                out.m05 = arr[ofs + 5];
                out.m06 = arr[ofs + 6];
                out.m07 = arr[ofs + 7];
                out.m08 = arr[ofs + 8];
                out.m09 = arr[ofs + 9];
                out.m10 = arr[ofs + 10];
                out.m11 = arr[ofs + 11];
                out.m12 = arr[ofs + 12];
                out.m13 = arr[ofs + 13];
                out.m14 = arr[ofs + 14];
                out.m15 = arr[ofs + 15];
                return out;
              }

              static add(out, a, b) {
                out.m00 = a.m00 + b.m00;
                out.m01 = a.m01 + b.m01;
                out.m02 = a.m02 + b.m02;
                out.m03 = a.m03 + b.m03;
                out.m04 = a.m04 + b.m04;
                out.m05 = a.m05 + b.m05;
                out.m06 = a.m06 + b.m06;
                out.m07 = a.m07 + b.m07;
                out.m08 = a.m08 + b.m08;
                out.m09 = a.m09 + b.m09;
                out.m10 = a.m10 + b.m10;
                out.m11 = a.m11 + b.m11;
                out.m12 = a.m12 + b.m12;
                out.m13 = a.m13 + b.m13;
                out.m14 = a.m14 + b.m14;
                out.m15 = a.m15 + b.m15;
                return out;
              }

              static subtract(out, a, b) {
                out.m00 = a.m00 - b.m00;
                out.m01 = a.m01 - b.m01;
                out.m02 = a.m02 - b.m02;
                out.m03 = a.m03 - b.m03;
                out.m04 = a.m04 - b.m04;
                out.m05 = a.m05 - b.m05;
                out.m06 = a.m06 - b.m06;
                out.m07 = a.m07 - b.m07;
                out.m08 = a.m08 - b.m08;
                out.m09 = a.m09 - b.m09;
                out.m10 = a.m10 - b.m10;
                out.m11 = a.m11 - b.m11;
                out.m12 = a.m12 - b.m12;
                out.m13 = a.m13 - b.m13;
                out.m14 = a.m14 - b.m14;
                out.m15 = a.m15 - b.m15;
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.m00 = a.m00 * b;
                out.m01 = a.m01 * b;
                out.m02 = a.m02 * b;
                out.m03 = a.m03 * b;
                out.m04 = a.m04 * b;
                out.m05 = a.m05 * b;
                out.m06 = a.m06 * b;
                out.m07 = a.m07 * b;
                out.m08 = a.m08 * b;
                out.m09 = a.m09 * b;
                out.m10 = a.m10 * b;
                out.m11 = a.m11 * b;
                out.m12 = a.m12 * b;
                out.m13 = a.m13 * b;
                out.m14 = a.m14 * b;
                out.m15 = a.m15 * b;
                return out;
              }

              static multiplyScalarAndAdd(out, a, b, scale) {
                out.m00 = a.m00 + b.m00 * scale;
                out.m01 = a.m01 + b.m01 * scale;
                out.m02 = a.m02 + b.m02 * scale;
                out.m03 = a.m03 + b.m03 * scale;
                out.m04 = a.m04 + b.m04 * scale;
                out.m05 = a.m05 + b.m05 * scale;
                out.m06 = a.m06 + b.m06 * scale;
                out.m07 = a.m07 + b.m07 * scale;
                out.m08 = a.m08 + b.m08 * scale;
                out.m09 = a.m09 + b.m09 * scale;
                out.m10 = a.m10 + b.m10 * scale;
                out.m11 = a.m11 + b.m11 * scale;
                out.m12 = a.m12 + b.m12 * scale;
                out.m13 = a.m13 + b.m13 * scale;
                out.m14 = a.m14 + b.m14 * scale;
                out.m15 = a.m15 + b.m15 * scale;
                return out;
              }

              static strictEquals(a, b) {
                return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03 && a.m04 === b.m04 && a.m05 === b.m05 && a.m06 === b.m06 && a.m07 === b.m07 && a.m08 === b.m08 && a.m09 === b.m09 && a.m10 === b.m10 && a.m11 === b.m11 && a.m12 === b.m12 && a.m13 === b.m13 && a.m14 === b.m14 && a.m15 === b.m15;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.m00 - b.m00) <= epsilon * Math.max(1.0, Math.abs(a.m00), Math.abs(b.m00)) && Math.abs(a.m01 - b.m01) <= epsilon * Math.max(1.0, Math.abs(a.m01), Math.abs(b.m01)) && Math.abs(a.m02 - b.m02) <= epsilon * Math.max(1.0, Math.abs(a.m02), Math.abs(b.m02)) && Math.abs(a.m03 - b.m03) <= epsilon * Math.max(1.0, Math.abs(a.m03), Math.abs(b.m03)) && Math.abs(a.m04 - b.m04) <= epsilon * Math.max(1.0, Math.abs(a.m04), Math.abs(b.m04)) && Math.abs(a.m05 - b.m05) <= epsilon * Math.max(1.0, Math.abs(a.m05), Math.abs(b.m05)) && Math.abs(a.m06 - b.m06) <= epsilon * Math.max(1.0, Math.abs(a.m06), Math.abs(b.m06)) && Math.abs(a.m07 - b.m07) <= epsilon * Math.max(1.0, Math.abs(a.m07), Math.abs(b.m07)) && Math.abs(a.m08 - b.m08) <= epsilon * Math.max(1.0, Math.abs(a.m08), Math.abs(b.m08)) && Math.abs(a.m09 - b.m09) <= epsilon * Math.max(1.0, Math.abs(a.m09), Math.abs(b.m09)) && Math.abs(a.m10 - b.m10) <= epsilon * Math.max(1.0, Math.abs(a.m10), Math.abs(b.m10)) && Math.abs(a.m11 - b.m11) <= epsilon * Math.max(1.0, Math.abs(a.m11), Math.abs(b.m11)) && Math.abs(a.m12 - b.m12) <= epsilon * Math.max(1.0, Math.abs(a.m12), Math.abs(b.m12)) && Math.abs(a.m13 - b.m13) <= epsilon * Math.max(1.0, Math.abs(a.m13), Math.abs(b.m13)) && Math.abs(a.m14 - b.m14) <= epsilon * Math.max(1.0, Math.abs(a.m14), Math.abs(b.m14)) && Math.abs(a.m15 - b.m15) <= epsilon * Math.max(1.0, Math.abs(a.m15), Math.abs(b.m15));
              }

              constructor(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 0, m05 = 1, m06 = 0, m07 = 0, m08 = 0, m09 = 0, m10 = 1, m11 = 0, m12 = 0, m13 = 0, m14 = 0, m15 = 1) {
                super();
                this.m00 = void 0;
                this.m01 = void 0;
                this.m02 = void 0;
                this.m03 = void 0;
                this.m04 = void 0;
                this.m05 = void 0;
                this.m06 = void 0;
                this.m07 = void 0;
                this.m08 = void 0;
                this.m09 = void 0;
                this.m10 = void 0;
                this.m11 = void 0;
                this.m12 = void 0;
                this.m13 = void 0;
                this.m14 = void 0;
                this.m15 = void 0;

                if (typeof m00 === 'object') {
                  this.m00 = m00.m00;
                  this.m01 = m00.m01;
                  this.m02 = m00.m02;
                  this.m03 = m00.m03;
                  this.m04 = m00.m04;
                  this.m05 = m00.m05;
                  this.m06 = m00.m06;
                  this.m07 = m00.m07;
                  this.m08 = m00.m08;
                  this.m09 = m00.m09;
                  this.m10 = m00.m10;
                  this.m11 = m00.m11;
                  this.m12 = m00.m12;
                  this.m13 = m00.m13;
                  this.m14 = m00.m14;
                  this.m15 = m00.m15;
                } else {
                  this.m00 = m00;
                  this.m01 = m01;
                  this.m02 = m02;
                  this.m03 = m03;
                  this.m04 = m04;
                  this.m05 = m05;
                  this.m06 = m06;
                  this.m07 = m07;
                  this.m08 = m08;
                  this.m09 = m09;
                  this.m10 = m10;
                  this.m11 = m11;
                  this.m12 = m12;
                  this.m13 = m13;
                  this.m14 = m14;
                  this.m15 = m15;
                }
              }

              clone() {
                return new Mat4(this.m00, this.m01, this.m02, this.m03, this.m04, this.m05, this.m06, this.m07, this.m08, this.m09, this.m10, this.m11, this.m12, this.m13, this.m14, this.m15);
              }

              set(m00 = 1, m01 = 0, m02 = 0, m03 = 0, m04 = 0, m05 = 1, m06 = 0, m07 = 0, m08 = 0, m09 = 0, m10 = 1, m11 = 0, m12 = 0, m13 = 0, m14 = 0, m15 = 1) {
                if (typeof m00 === 'object') {
                  this.m01 = m00.m01;
                  this.m02 = m00.m02;
                  this.m03 = m00.m03;
                  this.m04 = m00.m04;
                  this.m05 = m00.m05;
                  this.m06 = m00.m06;
                  this.m07 = m00.m07;
                  this.m08 = m00.m08;
                  this.m09 = m00.m09;
                  this.m10 = m00.m10;
                  this.m11 = m00.m11;
                  this.m12 = m00.m12;
                  this.m13 = m00.m13;
                  this.m14 = m00.m14;
                  this.m15 = m00.m15;
                  this.m00 = m00.m00;
                } else {
                  this.m01 = m01;
                  this.m02 = m02;
                  this.m03 = m03;
                  this.m04 = m04;
                  this.m05 = m05;
                  this.m06 = m06;
                  this.m07 = m07;
                  this.m08 = m08;
                  this.m09 = m09;
                  this.m10 = m10;
                  this.m11 = m11;
                  this.m12 = m12;
                  this.m13 = m13;
                  this.m14 = m14;
                  this.m15 = m15;
                  this.m00 = m00;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.m00 - other.m00) <= epsilon * Math.max(1.0, Math.abs(this.m00), Math.abs(other.m00)) && Math.abs(this.m01 - other.m01) <= epsilon * Math.max(1.0, Math.abs(this.m01), Math.abs(other.m01)) && Math.abs(this.m02 - other.m02) <= epsilon * Math.max(1.0, Math.abs(this.m02), Math.abs(other.m02)) && Math.abs(this.m03 - other.m03) <= epsilon * Math.max(1.0, Math.abs(this.m03), Math.abs(other.m03)) && Math.abs(this.m04 - other.m04) <= epsilon * Math.max(1.0, Math.abs(this.m04), Math.abs(other.m04)) && Math.abs(this.m05 - other.m05) <= epsilon * Math.max(1.0, Math.abs(this.m05), Math.abs(other.m05)) && Math.abs(this.m06 - other.m06) <= epsilon * Math.max(1.0, Math.abs(this.m06), Math.abs(other.m06)) && Math.abs(this.m07 - other.m07) <= epsilon * Math.max(1.0, Math.abs(this.m07), Math.abs(other.m07)) && Math.abs(this.m08 - other.m08) <= epsilon * Math.max(1.0, Math.abs(this.m08), Math.abs(other.m08)) && Math.abs(this.m09 - other.m09) <= epsilon * Math.max(1.0, Math.abs(this.m09), Math.abs(other.m09)) && Math.abs(this.m10 - other.m10) <= epsilon * Math.max(1.0, Math.abs(this.m10), Math.abs(other.m10)) && Math.abs(this.m11 - other.m11) <= epsilon * Math.max(1.0, Math.abs(this.m11), Math.abs(other.m11)) && Math.abs(this.m12 - other.m12) <= epsilon * Math.max(1.0, Math.abs(this.m12), Math.abs(other.m12)) && Math.abs(this.m13 - other.m13) <= epsilon * Math.max(1.0, Math.abs(this.m13), Math.abs(other.m13)) && Math.abs(this.m14 - other.m14) <= epsilon * Math.max(1.0, Math.abs(this.m14), Math.abs(other.m14)) && Math.abs(this.m15 - other.m15) <= epsilon * Math.max(1.0, Math.abs(this.m15), Math.abs(other.m15));
              }

              strictEquals(other) {
                return this.m00 === other.m00 && this.m01 === other.m01 && this.m02 === other.m02 && this.m03 === other.m03 && this.m04 === other.m04 && this.m05 === other.m05 && this.m06 === other.m06 && this.m07 === other.m07 && this.m08 === other.m08 && this.m09 === other.m09 && this.m10 === other.m10 && this.m11 === other.m11 && this.m12 === other.m12 && this.m13 === other.m13 && this.m14 === other.m14 && this.m15 === other.m15;
              }

              toString() {
                return `[\n${this.m00}, ${this.m01}, ${this.m02}, ${this.m03},\n${this.m04}, ${this.m05}, ${this.m06}, ${this.m07},\n${this.m08}, ${this.m09}, ${this.m10}, ${this.m11},\n${this.m12}, ${this.m13}, ${this.m14}, ${this.m15}\n` + ']';
              }

              identity() {
                this.m00 = 1;
                this.m01 = 0;
                this.m02 = 0;
                this.m03 = 0;
                this.m04 = 0;
                this.m05 = 1;
                this.m06 = 0;
                this.m07 = 0;
                this.m08 = 0;
                this.m09 = 0;
                this.m10 = 1;
                this.m11 = 0;
                this.m12 = 0;
                this.m13 = 0;
                this.m14 = 0;
                this.m15 = 1;
                return this;
              }

              zero() {
                this.m00 = 0;
                this.m01 = 0;
                this.m02 = 0;
                this.m03 = 0;
                this.m04 = 0;
                this.m05 = 0;
                this.m06 = 0;
                this.m07 = 0;
                this.m08 = 0;
                this.m09 = 0;
                this.m10 = 0;
                this.m11 = 0;
                this.m12 = 0;
                this.m13 = 0;
                this.m14 = 0;
                this.m15 = 0;
                return this;
              }

              transpose() {
                const a01 = this.m01;
                const a02 = this.m02;
                const a03 = this.m03;
                const a12 = this.m06;
                const a13 = this.m07;
                const a23 = this.m11;
                this.m01 = this.m04;
                this.m02 = this.m08;
                this.m03 = this.m12;
                this.m04 = a01;
                this.m06 = this.m09;
                this.m07 = this.m13;
                this.m08 = a02;
                this.m09 = a12;
                this.m11 = this.m14;
                this.m12 = a03;
                this.m13 = a13;
                this.m14 = a23;
                return this;
              }

              invert() {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a03 = this.m03;
                const a10 = this.m04;
                const a11 = this.m05;
                const a12 = this.m06;
                const a13 = this.m07;
                const a20 = this.m08;
                const a21 = this.m09;
                const a22 = this.m10;
                const a23 = this.m11;
                const a30 = this.m12;
                const a31 = this.m13;
                const a32 = this.m14;
                const a33 = this.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

                if (det === 0) {
                  this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
                  return this;
                }

                det = 1.0 / det;
                this.m00 = (a11 * b11 - a12 * b10 + a13 * b09) * det;
                this.m01 = (a02 * b10 - a01 * b11 - a03 * b09) * det;
                this.m02 = (a31 * b05 - a32 * b04 + a33 * b03) * det;
                this.m03 = (a22 * b04 - a21 * b05 - a23 * b03) * det;
                this.m04 = (a12 * b08 - a10 * b11 - a13 * b07) * det;
                this.m05 = (a00 * b11 - a02 * b08 + a03 * b07) * det;
                this.m06 = (a32 * b02 - a30 * b05 - a33 * b01) * det;
                this.m07 = (a20 * b05 - a22 * b02 + a23 * b01) * det;
                this.m08 = (a10 * b10 - a11 * b08 + a13 * b06) * det;
                this.m09 = (a01 * b08 - a00 * b10 - a03 * b06) * det;
                this.m10 = (a30 * b04 - a31 * b02 + a33 * b00) * det;
                this.m11 = (a21 * b02 - a20 * b04 - a23 * b00) * det;
                this.m12 = (a11 * b07 - a10 * b09 - a12 * b06) * det;
                this.m13 = (a00 * b09 - a01 * b07 + a02 * b06) * det;
                this.m14 = (a31 * b01 - a30 * b03 - a32 * b00) * det;
                this.m15 = (a20 * b03 - a21 * b01 + a22 * b00) * det;
                return this;
              }

              determinant() {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a03 = this.m03;
                const a10 = this.m04;
                const a11 = this.m05;
                const a12 = this.m06;
                const a13 = this.m07;
                const a20 = this.m08;
                const a21 = this.m09;
                const a22 = this.m10;
                const a23 = this.m11;
                const a30 = this.m12;
                const a31 = this.m13;
                const a32 = this.m14;
                const a33 = this.m15;
                const b00 = a00 * a11 - a01 * a10;
                const b01 = a00 * a12 - a02 * a10;
                const b02 = a00 * a13 - a03 * a10;
                const b03 = a01 * a12 - a02 * a11;
                const b04 = a01 * a13 - a03 * a11;
                const b05 = a02 * a13 - a03 * a12;
                const b06 = a20 * a31 - a21 * a30;
                const b07 = a20 * a32 - a22 * a30;
                const b08 = a20 * a33 - a23 * a30;
                const b09 = a21 * a32 - a22 * a31;
                const b10 = a21 * a33 - a23 * a31;
                const b11 = a22 * a33 - a23 * a32;
                return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
              }

              add(mat) {
                this.m00 += mat.m00;
                this.m01 += mat.m01;
                this.m02 += mat.m02;
                this.m03 += mat.m03;
                this.m04 += mat.m04;
                this.m05 += mat.m05;
                this.m06 += mat.m06;
                this.m07 += mat.m07;
                this.m08 += mat.m08;
                this.m09 += mat.m09;
                this.m10 += mat.m10;
                this.m11 += mat.m11;
                this.m12 += mat.m12;
                this.m13 += mat.m13;
                this.m14 += mat.m14;
                this.m15 += mat.m15;
                return this;
              }

              subtract(mat) {
                this.m00 -= mat.m00;
                this.m01 -= mat.m01;
                this.m02 -= mat.m02;
                this.m03 -= mat.m03;
                this.m04 -= mat.m04;
                this.m05 -= mat.m05;
                this.m06 -= mat.m06;
                this.m07 -= mat.m07;
                this.m08 -= mat.m08;
                this.m09 -= mat.m09;
                this.m10 -= mat.m10;
                this.m11 -= mat.m11;
                this.m12 -= mat.m12;
                this.m13 -= mat.m13;
                this.m14 -= mat.m14;
                this.m15 -= mat.m15;
                return this;
              }

              multiply(mat) {
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a03 = this.m03;
                const a10 = this.m04;
                const a11 = this.m05;
                const a12 = this.m06;
                const a13 = this.m07;
                const a20 = this.m08;
                const a21 = this.m09;
                const a22 = this.m10;
                const a23 = this.m11;
                const a30 = this.m12;
                const a31 = this.m13;
                const a32 = this.m14;
                const a33 = this.m15;
                let b0 = mat.m00;
                let b1 = mat.m01;
                let b2 = mat.m02;
                let b3 = mat.m03;
                this.m00 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                this.m01 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                this.m02 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                this.m03 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = mat.m04;
                b1 = mat.m05;
                b2 = mat.m06;
                b3 = mat.m07;
                this.m04 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                this.m05 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                this.m06 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                this.m07 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = mat.m08;
                b1 = mat.m09;
                b2 = mat.m10;
                b3 = mat.m11;
                this.m08 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                this.m09 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                this.m10 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                this.m11 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                b0 = mat.m12;
                b1 = mat.m13;
                b2 = mat.m14;
                b3 = mat.m15;
                this.m12 = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
                this.m13 = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
                this.m14 = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
                this.m15 = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
                return this;
              }

              multiplyScalar(scalar) {
                this.m00 *= scalar;
                this.m01 *= scalar;
                this.m02 *= scalar;
                this.m03 *= scalar;
                this.m04 *= scalar;
                this.m05 *= scalar;
                this.m06 *= scalar;
                this.m07 *= scalar;
                this.m08 *= scalar;
                this.m09 *= scalar;
                this.m10 *= scalar;
                this.m11 *= scalar;
                this.m12 *= scalar;
                this.m13 *= scalar;
                this.m14 *= scalar;
                this.m15 *= scalar;
                return this;
              }

              translate(vec) {
                console.warn('function changed');
                this.m12 += vec.x;
                this.m13 += vec.y;
                this.m14 += vec.z;
                return this;
              }

              scale(vec) {
                const x = vec.x;
                const y = vec.y;
                const z = vec.z;
                this.m00 *= x;
                this.m01 *= x;
                this.m02 *= x;
                this.m03 *= x;
                this.m04 *= y;
                this.m05 *= y;
                this.m06 *= y;
                this.m07 *= y;
                this.m08 *= z;
                this.m09 *= z;
                this.m10 *= z;
                this.m11 *= z;
                return this;
              }

              rotate(rad, axis) {
                let x = axis.x;
                let y = axis.y;
                let z = axis.z;
                let len = Math.sqrt(x * x + y * y + z * z);

                if (Math.abs(len) < EPSILON) {
                  return null;
                }

                len = 1 / len;
                x *= len;
                y *= len;
                z *= len;
                const s = Math.sin(rad);
                const c = Math.cos(rad);
                const t = 1 - c;
                const a00 = this.m00;
                const a01 = this.m01;
                const a02 = this.m02;
                const a03 = this.m03;
                const a10 = this.m04;
                const a11 = this.m05;
                const a12 = this.m06;
                const a13 = this.m07;
                const a20 = this.m08;
                const a21 = this.m09;
                const a22 = this.m10;
                const a23 = this.m11;
                const b00 = x * x * t + c;
                const b01 = y * x * t + z * s;
                const b02 = z * x * t - y * s;
                const b10 = x * y * t - z * s;
                const b11 = y * y * t + c;
                const b12 = z * y * t + x * s;
                const b20 = x * z * t + y * s;
                const b21 = y * z * t - x * s;
                const b22 = z * z * t + c;
                this.m00 = a00 * b00 + a10 * b01 + a20 * b02;
                this.m01 = a01 * b00 + a11 * b01 + a21 * b02;
                this.m02 = a02 * b00 + a12 * b01 + a22 * b02;
                this.m03 = a03 * b00 + a13 * b01 + a23 * b02;
                this.m04 = a00 * b10 + a10 * b11 + a20 * b12;
                this.m05 = a01 * b10 + a11 * b11 + a21 * b12;
                this.m06 = a02 * b10 + a12 * b11 + a22 * b12;
                this.m07 = a03 * b10 + a13 * b11 + a23 * b12;
                this.m08 = a00 * b20 + a10 * b21 + a20 * b22;
                this.m09 = a01 * b20 + a11 * b21 + a21 * b22;
                this.m10 = a02 * b20 + a12 * b21 + a22 * b22;
                this.m11 = a03 * b20 + a13 * b21 + a23 * b22;
                return this;
              }

              getTranslation(out) {
                out.x = this.m12;
                out.y = this.m13;
                out.z = this.m14;
                return out;
              }

              getScale(out) {
                const m00 = m3_1$1.m00 = this.m00;
                const m01 = m3_1$1.m01 = this.m01;
                const m02 = m3_1$1.m02 = this.m02;
                const m04 = m3_1$1.m03 = this.m04;
                const m05 = m3_1$1.m04 = this.m05;
                const m06 = m3_1$1.m05 = this.m06;
                const m08 = m3_1$1.m06 = this.m08;
                const m09 = m3_1$1.m07 = this.m09;
                const m10 = m3_1$1.m08 = this.m10;
                out.x = Math.sqrt(m00 * m00 + m01 * m01 + m02 * m02);
                out.y = Math.sqrt(m04 * m04 + m05 * m05 + m06 * m06);
                out.z = Math.sqrt(m08 * m08 + m09 * m09 + m10 * m10);

                if (Mat3.determinant(m3_1$1) < 0) {
                  out.x *= -1;
                }

                return out;
              }

              getRotation(out) {
                const trace = this.m00 + this.m05 + this.m10;
                let S = 0;

                if (trace > 0) {
                  S = Math.sqrt(trace + 1.0) * 2;
                  out.w = 0.25 * S;
                  out.x = (this.m06 - this.m09) / S;
                  out.y = (this.m08 - this.m02) / S;
                  out.z = (this.m01 - this.m04) / S;
                } else if (this.m00 > this.m05 && this.m00 > this.m10) {
                  S = Math.sqrt(1.0 + this.m00 - this.m05 - this.m10) * 2;
                  out.w = (this.m06 - this.m09) / S;
                  out.x = 0.25 * S;
                  out.y = (this.m01 + this.m04) / S;
                  out.z = (this.m08 + this.m02) / S;
                } else if (this.m05 > this.m10) {
                  S = Math.sqrt(1.0 + this.m05 - this.m00 - this.m10) * 2;
                  out.w = (this.m08 - this.m02) / S;
                  out.x = (this.m01 + this.m04) / S;
                  out.y = 0.25 * S;
                  out.z = (this.m06 + this.m09) / S;
                } else {
                  S = Math.sqrt(1.0 + this.m10 - this.m00 - this.m05) * 2;
                  out.w = (this.m01 - this.m04) / S;
                  out.x = (this.m08 + this.m02) / S;
                  out.y = (this.m06 + this.m09) / S;
                  out.z = 0.25 * S;
                }

                return out;
              }

              fromRTS(q, v, s) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const xy = x * y2;
                const xz = x * z2;
                const yy = y * y2;
                const yz = y * z2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                const sx = s.x;
                const sy = s.y;
                const sz = s.z;
                this.m00 = (1 - (yy + zz)) * sx;
                this.m01 = (xy + wz) * sx;
                this.m02 = (xz - wy) * sx;
                this.m03 = 0;
                this.m04 = (xy - wz) * sy;
                this.m05 = (1 - (xx + zz)) * sy;
                this.m06 = (yz + wx) * sy;
                this.m07 = 0;
                this.m08 = (xz + wy) * sz;
                this.m09 = (yz - wx) * sz;
                this.m10 = (1 - (xx + yy)) * sz;
                this.m11 = 0;
                this.m12 = v.x;
                this.m13 = v.y;
                this.m14 = v.z;
                this.m15 = 1;
                return this;
              }

              fromQuat(q) {
                const x = q.x;
                const y = q.y;
                const z = q.z;
                const w = q.w;
                const x2 = x + x;
                const y2 = y + y;
                const z2 = z + z;
                const xx = x * x2;
                const yx = y * x2;
                const yy = y * y2;
                const zx = z * x2;
                const zy = z * y2;
                const zz = z * z2;
                const wx = w * x2;
                const wy = w * y2;
                const wz = w * z2;
                this.m00 = 1 - yy - zz;
                this.m01 = yx + wz;
                this.m02 = zx - wy;
                this.m03 = 0;
                this.m04 = yx - wz;
                this.m05 = 1 - xx - zz;
                this.m06 = zy + wx;
                this.m07 = 0;
                this.m08 = zx + wy;
                this.m09 = zy - wx;
                this.m10 = 1 - xx - yy;
                this.m11 = 0;
                this.m12 = 0;
                this.m13 = 0;
                this.m14 = 0;
                this.m15 = 1;
                return this;
              }

            } exports('c0', Mat4);
            Mat4.IDENTITY = Object.freeze(new Mat4());
            const v3_1$3 = new Vec3();
            const m3_1$1 = new Mat3();
            CCClass.fastDefine('cc.Mat4', Mat4, {
              m00: 1,
              m01: 0,
              m02: 0,
              m03: 0,
              m04: 0,
              m05: 1,
              m06: 0,
              m07: 0,
              m08: 0,
              m09: 0,
              m10: 1,
              m11: 0,
              m12: 0,
              m13: 0,
              m14: 0,
              m15: 1
            });
            legacyCC.Mat4 = Mat4;
            function mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
              return new Mat4(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);
            }
            legacyCC.mat4 = mat4;

            class Vec2 extends ValueType {
              static clone(a) {
                return new Vec2(a.x, a.y);
              }

              static copy(out, a) {
                out.x = a.x;
                out.y = a.y;
                return out;
              }

              static set(out, x, y) {
                out.x = x;
                out.y = y;
                return out;
              }

              static add(out, a, b) {
                out.x = a.x + b.x;
                out.y = a.y + b.y;
                return out;
              }

              static subtract(out, a, b) {
                out.x = a.x - b.x;
                out.y = a.y - b.y;
                return out;
              }

              static multiply(out, a, b) {
                out.x = a.x * b.x;
                out.y = a.y * b.y;
                return out;
              }

              static divide(out, a, b) {
                out.x = a.x / b.x;
                out.y = a.y / b.y;
                return out;
              }

              static ceil(out, a) {
                out.x = Math.ceil(a.x);
                out.y = Math.ceil(a.y);
                return out;
              }

              static floor(out, a) {
                out.x = Math.floor(a.x);
                out.y = Math.floor(a.y);
                return out;
              }

              static min(out, a, b) {
                out.x = Math.min(a.x, b.x);
                out.y = Math.min(a.y, b.y);
                return out;
              }

              static max(out, a, b) {
                out.x = Math.max(a.x, b.x);
                out.y = Math.max(a.y, b.y);
                return out;
              }

              static round(out, a) {
                out.x = Math.round(a.x);
                out.y = Math.round(a.y);
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.x = a.x * b;
                out.y = a.y * b;
                return out;
              }

              static scaleAndAdd(out, a, b, scale) {
                out.x = a.x + b.x * scale;
                out.y = a.y + b.y * scale;
                return out;
              }

              static distance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                return Math.sqrt(x * x + y * y);
              }

              static squaredDistance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                return x * x + y * y;
              }

              static len(a) {
                const x = a.x;
                const y = a.y;
                return Math.sqrt(x * x + y * y);
              }

              static lengthSqr(a) {
                const x = a.x;
                const y = a.y;
                return x * x + y * y;
              }

              static negate(out, a) {
                out.x = -a.x;
                out.y = -a.y;
                return out;
              }

              static inverse(out, a) {
                out.x = 1.0 / a.x;
                out.y = 1.0 / a.y;
                return out;
              }

              static inverseSafe(out, a) {
                const x = a.x;
                const y = a.y;

                if (Math.abs(x) < EPSILON) {
                  out.x = 0;
                } else {
                  out.x = 1.0 / x;
                }

                if (Math.abs(y) < EPSILON) {
                  out.y = 0;
                } else {
                  out.y = 1.0 / y;
                }

                return out;
              }

              static normalize(out, a) {
                const x = a.x;
                const y = a.y;
                let len = x * x + y * y;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  out.x = x * len;
                  out.y = y * len;
                }

                return out;
              }

              static dot(a, b) {
                return a.x * b.x + a.y * b.y;
              }

              static cross(out, a, b) {
                out.x = out.y = 0;
                out.z = a.x * b.y - a.y * b.x;
                return out;
              }

              static lerp(out, a, b, t) {
                const x = a.x;
                const y = a.y;
                out.x = x + t * (b.x - x);
                out.y = y + t * (b.y - y);
                return out;
              }

              static random(out, scale) {
                scale = scale || 1.0;
                const r = random() * 2.0 * Math.PI;
                out.x = Math.cos(r) * scale;
                out.y = Math.sin(r) * scale;
                return out;
              }

              static transformMat3(out, a, m) {
                const x = a.x;
                const y = a.y;
                out.x = m.m00 * x + m.m03 * y + m.m06;
                out.y = m.m01 * x + m.m04 * y + m.m07;
                return out;
              }

              static transformMat4(out, a, m) {
                const x = a.x;
                const y = a.y;
                out.x = m.m00 * x + m.m04 * y + m.m12;
                out.y = m.m01 * x + m.m05 * y + m.m13;
                return out;
              }

              static str(a) {
                return `Vec2(${a.x}, ${a.y})`;
              }

              static toArray(out, v, ofs = 0) {
                out[ofs + 0] = v.x;
                out[ofs + 1] = v.y;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.x = arr[ofs + 0];
                out.y = arr[ofs + 1];
                return out;
              }

              static strictEquals(a, b) {
                return a.x === b.x && a.y === b.y;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y));
              }

              static angle(a, b) {
                Vec2.normalize(v2_1, a);
                Vec2.normalize(v2_2, b);
                const cosine = Vec2.dot(v2_1, v2_2);

                if (cosine > 1.0) {
                  return 0;
                }

                if (cosine < -1.0) {
                  return Math.PI;
                }

                return Math.acos(cosine);
              }

              constructor(x, y) {
                super();

                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                }
              }

              clone() {
                return new Vec2(this.x, this.y);
              }

              set(x, y) {
                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y));
              }

              equals2f(x, y, epsilon = EPSILON) {
                return Math.abs(this.x - x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(y));
              }

              strictEquals(other) {
                return other && this.x === other.x && this.y === other.y;
              }

              strictEquals2f(x, y) {
                return this.x === x && this.y === y;
              }

              toString() {
                return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)})`;
              }

              lerp(to, ratio) {
                const x = this.x;
                const y = this.y;
                this.x = x + ratio * (to.x - x);
                this.y = y + ratio * (to.y - y);
                return this;
              }

              clampf(minInclusive, maxInclusive) {
                this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
                this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
                return this;
              }

              add(other) {
                this.x += other.x;
                this.y += other.y;
                return this;
              }

              add2f(x, y) {
                this.x += x;
                this.y += y;
                return this;
              }

              subtract(other) {
                this.x -= other.x;
                this.y -= other.y;
                return this;
              }

              subtract2f(x, y) {
                this.x -= x;
                this.y -= y;
                return this;
              }

              multiplyScalar(scalar) {
                if (typeof scalar === 'object') {
                  console.warn('should use Vec2.multiply for vector * vector operation');
                }

                this.x *= scalar;
                this.y *= scalar;
                return this;
              }

              multiply(other) {
                if (typeof other !== 'object') {
                  console.warn('should use Vec2.scale for vector * scalar operation');
                }

                this.x *= other.x;
                this.y *= other.y;
                return this;
              }

              multiply2f(x, y) {
                this.x *= x;
                this.y *= y;
                return this;
              }

              divide(other) {
                this.x /= other.x;
                this.y /= other.y;
                return this;
              }

              divide2f(x, y) {
                this.x /= x;
                this.y /= y;
                return this;
              }

              negative() {
                this.x = -this.x;
                this.y = -this.y;
                return this;
              }

              dot(other) {
                return this.x * other.x + this.y * other.y;
              }

              cross(other) {
                return this.x * other.y - this.y * other.x;
              }

              length() {
                return Math.sqrt(this.x * this.x + this.y * this.y);
              }

              lengthSqr() {
                return this.x * this.x + this.y * this.y;
              }

              normalize() {
                const x = this.x;
                const y = this.y;
                let len = x * x + y * y;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  this.x *= len;
                  this.y *= len;
                }

                return this;
              }

              angle(other) {
                const magSqr1 = this.lengthSqr();
                const magSqr2 = other.lengthSqr();

                if (magSqr1 === 0 || magSqr2 === 0) {
                  console.warn('Can\'t get angle between zero vector');
                  return 0.0;
                }

                const dot = this.dot(other);
                let theta = dot / Math.sqrt(magSqr1 * magSqr2);
                theta = clamp(theta, -1.0, 1.0);
                return Math.acos(theta);
              }

              signAngle(other) {
                const angle = this.angle(other);
                return this.cross(other) < 0 ? -angle : angle;
              }

              rotate(radians) {
                const x = this.x;
                const y = this.y;
                const sin = Math.sin(radians);
                const cos = Math.cos(radians);
                this.x = cos * x - sin * y;
                this.y = sin * x + cos * y;
                return this;
              }

              project(other) {
                const scalar = this.dot(other) / other.dot(other);
                this.x = other.x * scalar;
                this.y = other.y * scalar;
                return this;
              }

              transformMat4(matrix) {
                const x = this.x;
                const y = this.y;
                this.x = matrix.m00 * x + matrix.m04 * y + matrix.m12;
                this.y = matrix.m01 * x + matrix.m05 * y + matrix.m13;
                return this;
              }

            } exports('cz', Vec2);
            Vec2.ZERO = Object.freeze(new Vec2(0, 0));
            Vec2.ONE = Object.freeze(new Vec2(1, 1));
            Vec2.NEG_ONE = Object.freeze(new Vec2(-1, -1));
            Vec2.UNIT_X = Object.freeze(new Vec2(1, 0));
            Vec2.UNIT_Y = Object.freeze(new Vec2(0, 1));
            const v2_1 = new Vec2();
            const v2_2 = new Vec2();
            CCClass.fastDefine('cc.Vec2', Vec2, {
              x: 0,
              y: 0
            });
            legacyCC.Vec2 = Vec2;
            function v2(x, y) {
              return new Vec2(x, y);
            }
            legacyCC.v2 = v2;

            class Vec4 extends ValueType {
              static clone(a) {
                return new Vec4(a.x, a.y, a.z, a.w);
              }

              static copy(out, a) {
                out.x = a.x;
                out.y = a.y;
                out.z = a.z;
                out.w = a.w;
                return out;
              }

              static set(out, x, y, z, w) {
                out.x = x;
                out.y = y;
                out.z = z;
                out.w = w;
                return out;
              }

              static add(out, a, b) {
                out.x = a.x + b.x;
                out.y = a.y + b.y;
                out.z = a.z + b.z;
                out.w = a.w + b.w;
                return out;
              }

              static subtract(out, a, b) {
                out.x = a.x - b.x;
                out.y = a.y - b.y;
                out.z = a.z - b.z;
                out.w = a.w - b.w;
                return out;
              }

              static multiply(out, a, b) {
                out.x = a.x * b.x;
                out.y = a.y * b.y;
                out.z = a.z * b.z;
                out.w = a.w * b.w;
                return out;
              }

              static divide(out, a, b) {
                out.x = a.x / b.x;
                out.y = a.y / b.y;
                out.z = a.z / b.z;
                out.w = a.w / b.w;
                return out;
              }

              static ceil(out, a) {
                out.x = Math.ceil(a.x);
                out.y = Math.ceil(a.y);
                out.z = Math.ceil(a.z);
                out.w = Math.ceil(a.w);
                return out;
              }

              static floor(out, a) {
                out.x = Math.floor(a.x);
                out.y = Math.floor(a.y);
                out.z = Math.floor(a.z);
                out.w = Math.floor(a.w);
                return out;
              }

              static min(out, a, b) {
                out.x = Math.min(a.x, b.x);
                out.y = Math.min(a.y, b.y);
                out.z = Math.min(a.z, b.z);
                out.w = Math.min(a.w, b.w);
                return out;
              }

              static max(out, a, b) {
                out.x = Math.max(a.x, b.x);
                out.y = Math.max(a.y, b.y);
                out.z = Math.max(a.z, b.z);
                out.w = Math.max(a.w, b.w);
                return out;
              }

              static round(out, a) {
                out.x = Math.round(a.x);
                out.y = Math.round(a.y);
                out.z = Math.round(a.z);
                out.w = Math.round(a.w);
                return out;
              }

              static multiplyScalar(out, a, b) {
                out.x = a.x * b;
                out.y = a.y * b;
                out.z = a.z * b;
                out.w = a.w * b;
                return out;
              }

              static scaleAndAdd(out, a, b, scale) {
                out.x = a.x + b.x * scale;
                out.y = a.y + b.y * scale;
                out.z = a.z + b.z * scale;
                out.w = a.w + b.w * scale;
                return out;
              }

              static distance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                const z = b.z - a.z;
                const w = b.w - a.w;
                return Math.sqrt(x * x + y * y + z * z + w * w);
              }

              static squaredDistance(a, b) {
                const x = b.x - a.x;
                const y = b.y - a.y;
                const z = b.z - a.z;
                const w = b.w - a.w;
                return x * x + y * y + z * z + w * w;
              }

              static len(a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                const w = a.w;
                return Math.sqrt(x * x + y * y + z * z + w * w);
              }

              static lengthSqr(a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                const w = a.w;
                return x * x + y * y + z * z + w * w;
              }

              static negate(out, a) {
                out.x = -a.x;
                out.y = -a.y;
                out.z = -a.z;
                out.w = -a.w;
                return out;
              }

              static inverse(out, a) {
                out.x = 1.0 / a.x;
                out.y = 1.0 / a.y;
                out.z = 1.0 / a.z;
                out.w = 1.0 / a.w;
                return out;
              }

              static inverseSafe(out, a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                const w = a.w;

                if (Math.abs(x) < EPSILON) {
                  out.x = 0;
                } else {
                  out.x = 1.0 / x;
                }

                if (Math.abs(y) < EPSILON) {
                  out.y = 0;
                } else {
                  out.y = 1.0 / y;
                }

                if (Math.abs(z) < EPSILON) {
                  out.z = 0;
                } else {
                  out.z = 1.0 / z;
                }

                if (Math.abs(w) < EPSILON) {
                  out.w = 0;
                } else {
                  out.w = 1.0 / w;
                }

                return out;
              }

              static normalize(out, a) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                const w = a.w;
                let len = x * x + y * y + z * z + w * w;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  out.x = x * len;
                  out.y = y * len;
                  out.z = z * len;
                  out.w = w * len;
                }

                return out;
              }

              static dot(a, b) {
                return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
              }

              static lerp(out, a, b, t) {
                out.x = a.x + t * (b.x - a.x);
                out.y = a.y + t * (b.y - a.y);
                out.z = a.z + t * (b.z - a.z);
                out.w = a.w + t * (b.w - a.w);
                return out;
              }

              static random(out, scale) {
                scale = scale || 1.0;
                const phi = random() * 2.0 * Math.PI;
                const cosTheta = random() * 2 - 1;
                const sinTheta = Math.sqrt(1 - cosTheta * cosTheta);
                out.x = sinTheta * Math.cos(phi) * scale;
                out.y = sinTheta * Math.sin(phi) * scale;
                out.z = cosTheta * scale;
                out.w = 0;
                return out;
              }

              static transformMat4(out, a, m) {
                const x = a.x;
                const y = a.y;
                const z = a.z;
                const w = a.w;
                out.x = m.m00 * x + m.m04 * y + m.m08 * z + m.m12 * w;
                out.y = m.m01 * x + m.m05 * y + m.m09 * z + m.m13 * w;
                out.z = m.m02 * x + m.m06 * y + m.m10 * z + m.m14 * w;
                out.w = m.m03 * x + m.m07 * y + m.m11 * z + m.m15 * w;
                return out;
              }

              static transformAffine(out, v, m) {
                const x = v.x;
                const y = v.y;
                const z = v.z;
                const w = v.w;
                out.x = m.m00 * x + m.m01 * y + m.m02 * z + m.m03 * w;
                out.y = m.m04 * x + m.m05 * y + m.m06 * z + m.m07 * w;
                out.x = m.m08 * x + m.m09 * y + m.m10 * z + m.m11 * w;
                out.w = v.w;
                return out;
              }

              static transformQuat(out, a, q) {
                const {
                  x,
                  y,
                  z
                } = a;
                const _x = q.x;
                const _y = q.y;
                const _z = q.z;
                const _w = q.w;
                const ix = _w * x + _y * z - _z * y;
                const iy = _w * y + _z * x - _x * z;
                const iz = _w * z + _x * y - _y * x;
                const iw = -_x * x - _y * y - _z * z;
                out.x = ix * _w + iw * -_x + iy * -_z - iz * -_y;
                out.y = iy * _w + iw * -_y + iz * -_x - ix * -_z;
                out.z = iz * _w + iw * -_z + ix * -_y - iy * -_x;
                out.w = a.w;
                return out;
              }

              static toArray(out, v, ofs = 0) {
                out[ofs + 0] = v.x;
                out[ofs + 1] = v.y;
                out[ofs + 2] = v.z;
                out[ofs + 3] = v.w;
                return out;
              }

              static fromArray(out, arr, ofs = 0) {
                out.x = arr[ofs + 0];
                out.y = arr[ofs + 1];
                out.z = arr[ofs + 2];
                out.w = arr[ofs + 3];
                return out;
              }

              static strictEquals(a, b) {
                return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
              }

              static equals(a, b, epsilon = EPSILON) {
                return Math.abs(a.x - b.x) <= epsilon * Math.max(1.0, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= epsilon * Math.max(1.0, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= epsilon * Math.max(1.0, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= epsilon * Math.max(1.0, Math.abs(a.w), Math.abs(b.w));
              }

              constructor(x, y, z, w) {
                super();

                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                  this.w = x.w;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                  this.w = w || 0;
                }
              }

              clone() {
                return new Vec4(this.x, this.y, this.z, this.w);
              }

              set(x, y, z, w) {
                if (x && typeof x === 'object') {
                  this.x = x.x;
                  this.y = x.y;
                  this.z = x.z;
                  this.w = x.w;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.z = z || 0;
                  this.w = w || 0;
                }

                return this;
              }

              equals(other, epsilon = EPSILON) {
                return Math.abs(this.x - other.x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(other.x)) && Math.abs(this.y - other.y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(other.y)) && Math.abs(this.z - other.z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(other.z)) && Math.abs(this.w - other.w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(other.w));
              }

              equals4f(x, y, z, w, epsilon = EPSILON) {
                return Math.abs(this.x - x) <= epsilon * Math.max(1.0, Math.abs(this.x), Math.abs(x)) && Math.abs(this.y - y) <= epsilon * Math.max(1.0, Math.abs(this.y), Math.abs(y)) && Math.abs(this.z - z) <= epsilon * Math.max(1.0, Math.abs(this.z), Math.abs(z)) && Math.abs(this.w - w) <= epsilon * Math.max(1.0, Math.abs(this.w), Math.abs(w));
              }

              strictEquals(other) {
                return this.x === other.x && this.y === other.y && this.z === other.z && this.w === other.w;
              }

              strictEquals4f(x, y, z, w) {
                return this.x === x && this.y === y && this.z === z && this.w === w;
              }

              lerp(to, ratio) {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                const w = this.w;
                this.x = x + ratio * (to.x - x);
                this.y = y + ratio * (to.y - y);
                this.z = z + ratio * (to.z - z);
                this.w = w + ratio * (to.w - w);
                return this;
              }

              toString() {
                return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.z.toFixed(2)}, ${this.w.toFixed(2)})`;
              }

              clampf(minInclusive, maxInclusive) {
                this.x = clamp(this.x, minInclusive.x, maxInclusive.x);
                this.y = clamp(this.y, minInclusive.y, maxInclusive.y);
                this.z = clamp(this.z, minInclusive.z, maxInclusive.z);
                this.w = clamp(this.w, minInclusive.w, maxInclusive.w);
                return this;
              }

              add(other) {
                this.x += other.x;
                this.y += other.y;
                this.z += other.z;
                this.w += other.w;
                return this;
              }

              add4f(x, y, z, w) {
                this.x += x;
                this.y += y;
                this.z += z;
                this.w += w;
                return this;
              }

              subtract(other) {
                this.x -= other.x;
                this.y -= other.y;
                this.z -= other.z;
                this.w -= other.w;
                return this;
              }

              subtract4f(x, y, z, w) {
                this.x -= x;
                this.y -= y;
                this.z -= z;
                this.w -= w;
                return this;
              }

              multiplyScalar(scalar) {
                if (typeof scalar === 'object') {
                  console.warn('should use Vec4.multiply for vector * vector operation');
                }

                this.x *= scalar;
                this.y *= scalar;
                this.z *= scalar;
                this.w *= scalar;
                return this;
              }

              multiply(other) {
                if (typeof other !== 'object') {
                  console.warn('should use Vec4.scale for vector * scalar operation');
                }

                this.x *= other.x;
                this.y *= other.y;
                this.z *= other.z;
                this.w *= other.w;
                return this;
              }

              multiply4f(x, y, z, w) {
                this.x *= x;
                this.y *= y;
                this.z *= z;
                this.w *= w;
                return this;
              }

              divide(other) {
                this.x /= other.x;
                this.y /= other.y;
                this.z /= other.z;
                this.w /= other.w;
                return this;
              }

              divide4f(x, y, z, w) {
                this.x /= x;
                this.y /= y;
                this.z /= z;
                this.w /= w;
                return this;
              }

              negative() {
                this.x = -this.x;
                this.y = -this.y;
                this.z = -this.z;
                this.w = -this.w;
                return this;
              }

              dot(vector) {
                return this.x * vector.x + this.y * vector.y + this.z * vector.z + this.w * vector.w;
              }

              cross(vector) {
                const {
                  x: ax,
                  y: ay,
                  z: az
                } = this;
                const {
                  x: bx,
                  y: by,
                  z: bz
                } = vector;
                this.x = ay * bz - az * by;
                this.y = az * bx - ax * bz;
                this.z = ax * by - ay * bx;
                return this;
              }

              length() {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                const w = this.w;
                return Math.sqrt(x * x + y * y + z * z + w * w);
              }

              lengthSqr() {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                const w = this.w;
                return x * x + y * y + z * z + w * w;
              }

              normalize() {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                const w = this.w;
                let len = x * x + y * y + z * z + w * w;

                if (len > 0) {
                  len = 1 / Math.sqrt(len);
                  this.x = x * len;
                  this.y = y * len;
                  this.z = z * len;
                  this.w = w * len;
                }

                return this;
              }

              transformMat4(matrix) {
                const x = this.x;
                const y = this.y;
                const z = this.z;
                const w = this.w;
                this.x = matrix.m00 * x + matrix.m04 * y + matrix.m08 * z + matrix.m12 * w;
                this.y = matrix.m01 * x + matrix.m05 * y + matrix.m09 * z + matrix.m13 * w;
                this.z = matrix.m02 * x + matrix.m06 * y + matrix.m10 * z + matrix.m14 * w;
                this.w = matrix.m03 * x + matrix.m07 * y + matrix.m11 * z + matrix.m15 * w;
                return this;
              }

            } exports('bT', Vec4);
            Vec4.ZERO = Object.freeze(new Vec4(0, 0, 0, 0));
            Vec4.ONE = Object.freeze(new Vec4(1, 1, 1, 1));
            Vec4.NEG_ONE = Object.freeze(new Vec4(-1, -1, -1, -1));
            CCClass.fastDefine('cc.Vec4', Vec4, {
              x: 0,
              y: 0,
              z: 0,
              w: 0
            });
            legacyCC.Vec4 = Vec4;
            function v4(x, y, z, w) {
              return new Vec4(x, y, z, w);
            }
            legacyCC.v4 = v4;

            replaceProperty(Vec2, 'Vec2', [{
              name: 'sub',
              newName: 'subtract',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'div',
              newName: 'divide',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'dist',
              newName: 'distance',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'sqrDist',
              newName: 'squaredDistance',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'mag',
              newName: 'len',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'sqrMag',
              newName: 'lengthSqr',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec2,
              targetName: 'Vec2'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec2,
              targetName: 'Vec2'
            }]);
            replaceProperty(Vec2.prototype, 'Vec2', [{
              name: 'mag',
              newName: 'length',
              target: Vec2.prototype,
              targetName: 'Vec2'
            }, {
              name: 'magSqr',
              newName: 'lengthSqr',
              target: Vec2.prototype,
              targetName: 'Vec2'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec2.prototype,
              targetName: 'Vec2'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec2.prototype,
              targetName: 'Vec2'
            }]);
            replaceProperty(Vec3, 'Vec3', [{
              name: 'sub',
              newName: 'subtract',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'div',
              newName: 'divide',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'dist',
              newName: 'distance',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'sqrDist',
              newName: 'squaredDistance',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'mag',
              newName: 'len',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'sqrMag',
              newName: 'lengthSqr',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec3,
              targetName: 'Vec3'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec3,
              targetName: 'Vec3'
            }]);
            replaceProperty(Vec3.prototype, 'Vec3', [{
              name: 'mag',
              newName: 'length',
              target: Vec3.prototype,
              targetName: 'Vec3'
            }, {
              name: 'magSqr',
              newName: 'lengthSqr',
              target: Vec3.prototype,
              targetName: 'Vec3'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec3.prototype,
              targetName: 'Vec3'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec3.prototype,
              targetName: 'Vec3'
            }]);
            replaceProperty(Vec4, 'Vec4', [{
              name: 'sub',
              newName: 'subtract',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'div',
              newName: 'divide',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'dist',
              newName: 'distance',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'sqrDist',
              newName: 'squaredDistance',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'mag',
              newName: 'len',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'sqrMag',
              newName: 'lengthSqr',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec4,
              targetName: 'Vec4'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec4,
              targetName: 'Vec4'
            }]);
            replaceProperty(Vec4.prototype, 'Vec4', [{
              name: 'mag',
              newName: 'length',
              target: Vec4.prototype,
              targetName: 'Vec4'
            }, {
              name: 'magSqr',
              newName: 'lengthSqr',
              target: Vec4.prototype,
              targetName: 'Vec4'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Vec4.prototype,
              targetName: 'Vec4'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Vec4.prototype,
              targetName: 'Vec4'
            }]);
            replaceProperty(Quat, 'Quat', [{
              name: 'mag',
              newName: 'len',
              target: Quat,
              targetName: 'Quat'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Quat,
              targetName: 'Quat'
            }, {
              name: 'sqrMag',
              newName: 'lengthSqr',
              target: Quat,
              targetName: 'Quat'
            }, {
              name: 'scale',
              newName: 'multiplyScalar',
              target: Quat,
              targetName: 'Quat'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Quat,
              targetName: 'Quat'
            }]);
            replaceProperty(Quat.prototype, 'Quat', [{
              name: 'scale',
              newName: 'multiplyScalar',
              target: Quat.prototype,
              targetName: 'Quat'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Quat.prototype,
              targetName: 'Quat'
            }]);
            replaceProperty(Color, 'Color', [{
              name: 'sub',
              newName: 'subtract',
              target: Color,
              targetName: 'Color'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Color,
              targetName: 'Color'
            }, {
              name: 'div',
              newName: 'divide',
              target: Color,
              targetName: 'Color'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Color,
              targetName: 'Color'
            }, {
              name: 'fromHex',
              newName: 'fromHEX',

              customFunction(...args) {
                const arg1 = args[1].toString(16);
                return legacyCC.Color.fromHEX(args[0], arg1);
              }

            }]);
            replaceProperty(Mat3, 'Mat3', [{
              name: 'sub',
              newName: 'subtract',
              target: Mat3,
              targetName: 'Mat3'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Mat3,
              targetName: 'Mat3'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Mat3,
              targetName: 'Mat3'
            }, {
              name: 'transfrom',
              newName: 'transform',
              target: Mat3,
              targetName: 'Mat3'
            }]);
            replaceProperty(Mat3.prototype, 'Mat3', [{
              name: 'sub',
              newName: 'subtract',
              target: Mat3.prototype,
              targetName: 'Mat3'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Mat3.prototype,
              targetName: 'Mat3'
            }, {
              name: 'mulScalar',
              newName: 'multiplyScalar',
              target: Mat3.prototype,
              targetName: 'Mat3'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Mat3.prototype,
              targetName: 'Mat3'
            }]);
            replaceProperty(Mat4, 'Mat4', [{
              name: 'sub',
              newName: 'subtract',
              target: Mat4,
              targetName: 'Mat4'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Mat4,
              targetName: 'Mat4'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Mat4,
              targetName: 'Mat4'
            }]);
            replaceProperty(Mat4.prototype, 'Mat4', [{
              name: 'sub',
              newName: 'subtract',
              target: Mat4.prototype,
              targetName: 'Mat4'
            }, {
              name: 'mul',
              newName: 'multiply',
              target: Mat4.prototype,
              targetName: 'Mat4'
            }, {
              name: 'mulScalar',
              newName: 'multiplyScalar',
              target: Mat4.prototype,
              targetName: 'Mat4'
            }, {
              name: 'exactEquals',
              newName: 'strictEquals',
              target: Mat4.prototype,
              targetName: 'Mat4'
            }]);

            class AffineTransform {
              static identity() {
                return new AffineTransform();
              }

              static clone(affineTransform) {
                return new AffineTransform(affineTransform.a, affineTransform.b, affineTransform.c, affineTransform.d, affineTransform.tx, affineTransform.ty);
              }

              static concat(out, t1, t2) {
                const a = t1.a;
                const b = t1.b;
                const c = t1.c;
                const d = t1.d;
                const tx = t1.tx;
                const ty = t1.ty;
                out.a = a * t2.a + b * t2.c;
                out.b = a * t2.b + b * t2.d;
                out.c = c * t2.a + d * t2.c;
                out.d = c * t2.b + d * t2.d;
                out.tx = tx * t2.a + ty * t2.c + t2.tx;
                out.ty = tx * t2.b + ty * t2.d + t2.ty;
              }

              static invert(out, t) {
                const determinant = 1 / (t.a * t.d - t.b * t.c);
                out.a = determinant * t.d;
                out.b = -determinant * t.b;
                out.c = -determinant * t.c;
                out.d = determinant * t.a;
                out.tx = determinant * (t.c * t.ty - t.d * t.tx);
                out.ty = determinant * (t.b * t.tx - t.a * t.ty);
              }

              static fromMat4(out, mat) {
                out.a = mat.m00;
                out.b = mat.m01;
                out.c = mat.m04;
                out.d = mat.m05;
                out.tx = mat.m12;
                out.ty = mat.m13;
              }

              static transformVec2(out, point, transOrY, t) {
                let x;
                let y;

                if (t === undefined) {
                  t = transOrY;
                  x = point.x;
                  y = point.y;
                } else {
                  x = point;
                  y = transOrY;
                }

                out.x = t.a * x + t.c * y + t.tx;
                out.y = t.b * x + t.d * y + t.ty;
              }

              static transformSize(out, size, t) {
                out.width = t.a * size.width + t.c * size.height;
                out.height = t.b * size.width + t.d * size.height;
              }

              static transformRect(out, rect, t) {
                const or = rect.x + rect.width;
                const ot = rect.y + rect.height;
                const lbx = t.a * rect.x + t.c * rect.y + t.tx;
                const lby = t.b * rect.x + t.d * rect.y + t.ty;
                const rbx = t.a * or + t.c * rect.y + t.tx;
                const rby = t.b * or + t.d * rect.y + t.ty;
                const ltx = t.a * rect.x + t.c * ot + t.tx;
                const lty = t.b * rect.x + t.d * ot + t.ty;
                const rtx = t.a * or + t.c * ot + t.tx;
                const rty = t.b * or + t.d * ot + t.ty;
                const minX = Math.min(lbx, rbx, ltx, rtx);
                const maxX = Math.max(lbx, rbx, ltx, rtx);
                const minY = Math.min(lby, rby, lty, rty);
                const maxY = Math.max(lby, rby, lty, rty);
                out.x = minX;
                out.y = minY;
                out.width = maxX - minX;
                out.height = maxY - minY;
              }

              static transformObb(out_bl, out_tl, out_tr, out_br, rect, anAffineTransform) {
                const tx = anAffineTransform.a * rect.x + anAffineTransform.c * rect.y + anAffineTransform.tx;
                const ty = anAffineTransform.b * rect.x + anAffineTransform.d * rect.y + anAffineTransform.ty;
                const xa = anAffineTransform.a * rect.width;
                const xb = anAffineTransform.b * rect.width;
                const yc = anAffineTransform.c * rect.height;
                const yd = anAffineTransform.d * rect.height;
                out_tl.x = tx;
                out_tl.y = ty;
                out_tr.x = xa + tx;
                out_tr.y = xb + ty;
                out_bl.x = yc + tx;
                out_bl.y = yd + ty;
                out_br.x = xa + yc + tx;
                out_br.y = xb + yd + ty;
              }

              constructor(a = 1, b = 0, c = 0, d = 1, tx = 0, ty = 0) {
                this.a = a;
                this.b = b;
                this.c = c;
                this.d = d;
                this.tx = tx;
                this.ty = ty;
              }

            } exports('ey', AffineTransform);
            legacyCC.AffineTransform = AffineTransform;

            class Size extends ValueType {
              static lerp(out, from, to, ratio) {
                out.width = from.width + (to.width - from.width) * ratio;
                out.height = from.height + (to.height - from.height) * ratio;
                return out;
              }

              set x(val) {
                this.width = val;
              }

              get x() {
                return this.width;
              }

              set y(val) {
                this.height = val;
              }

              get y() {
                return this.height;
              }

              constructor(width, height) {
                super();

                if (width && typeof width === 'object') {
                  this.width = width.width;
                  this.height = width.height;
                } else {
                  this.width = width || 0;
                  this.height = height || 0;
                }
              }

              clone() {
                return new Size(this.width, this.height);
              }

              set(width, height) {
                if (width && typeof width === 'object') {
                  this.height = width.height;
                  this.width = width.width;
                } else {
                  this.width = width || 0;
                  this.height = height || 0;
                }

                return this;
              }

              equals(other) {
                return this.width === other.width && this.height === other.height;
              }

              lerp(to, ratio) {
                this.width += (to.width - this.width) * ratio;
                this.height += (to.height - this.height) * ratio;
                return this;
              }

              toString() {
                return `(${this.width.toFixed(2)}, ${this.height.toFixed(2)})`;
              }

            } exports('cF', Size);
            Size.ZERO = Object.freeze(new Size(0, 0));
            Size.ONE = Object.freeze(new Size(1, 1));
            CCClass.fastDefine('cc.Size', Size, {
              width: 0,
              height: 0
            });
            function size(width = 0, height = 0) {
              return new Size(width, height);
            }
            legacyCC.size = size;
            legacyCC.Size = Size;

            class Rect extends ValueType {
              static fromMinMax(out, v1, v2) {
                const minX = Math.min(v1.x, v2.x);
                const minY = Math.min(v1.y, v2.y);
                const maxX = Math.max(v1.x, v2.x);
                const maxY = Math.max(v1.y, v2.y);
                out.x = minX;
                out.y = minY;
                out.width = maxX - minX;
                out.height = maxY - minY;
                return out;
              }

              static lerp(out, from, to, ratio) {
                const x = from.x;
                const y = from.y;
                const w = from.width;
                const h = from.height;
                out.x = x + (to.x - x) * ratio;
                out.y = y + (to.y - y) * ratio;
                out.width = w + (to.width - w) * ratio;
                out.height = h + (to.height - h) * ratio;
                return out;
              }

              static intersection(out, one, other) {
                const axMin = one.x;
                const ayMin = one.y;
                const axMax = one.x + one.width;
                const ayMax = one.y + one.height;
                const bxMin = other.x;
                const byMin = other.y;
                const bxMax = other.x + other.width;
                const byMax = other.y + other.height;
                out.x = Math.max(axMin, bxMin);
                out.y = Math.max(ayMin, byMin);
                out.width = Math.min(axMax, bxMax) - out.x;
                out.height = Math.min(ayMax, byMax) - out.y;
                return out;
              }

              static union(out, one, other) {
                const x = one.x;
                const y = one.y;
                const w = one.width;
                const h = one.height;
                const bx = other.x;
                const by = other.y;
                const bw = other.width;
                const bh = other.height;
                out.x = Math.min(x, bx);
                out.y = Math.min(y, by);
                out.width = Math.max(x + w, bx + bw) - out.x;
                out.height = Math.max(y + h, by + bh) - out.y;
                return out;
              }

              get xMin() {
                return this.x;
              }

              set xMin(value) {
                this.width += this.x - value;
                this.x = value;
              }

              get yMin() {
                return this.y;
              }

              set yMin(value) {
                this.height += this.y - value;
                this.y = value;
              }

              get xMax() {
                return this.x + this.width;
              }

              set xMax(value) {
                this.width = value - this.x;
              }

              get yMax() {
                return this.y + this.height;
              }

              set yMax(value) {
                this.height = value - this.y;
              }

              get center() {
                return new Vec2(this.x + this.width * 0.5, this.y + this.height * 0.5);
              }

              set center(value) {
                this.x = value.x - this.width * 0.5;
                this.y = value.y - this.height * 0.5;
              }

              get origin() {
                return new Vec2(this.x, this.y);
              }

              set origin(value) {
                this.x = value.x;
                this.y = value.y;
              }

              get size() {
                return new Size(this.width, this.height);
              }

              set size(value) {
                this.width = value.width;
                this.height = value.height;
              }

              set z(val) {
                this.width = val;
              }

              get z() {
                return this.width;
              }

              set w(val) {
                this.height = val;
              }

              get w() {
                return this.height;
              }

              constructor(x, y, width, height) {
                super();

                if (x && typeof x === 'object') {
                  this.y = x.y;
                  this.width = x.width;
                  this.height = x.height;
                  this.x = x.x;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.width = width || 0;
                  this.height = height || 0;
                }
              }

              clone() {
                return new Rect(this.x, this.y, this.width, this.height);
              }

              set(x, y, width, height) {
                if (x && typeof x === 'object') {
                  this.y = x.y;
                  this.width = x.width;
                  this.height = x.height;
                  this.x = x.x;
                } else {
                  this.x = x || 0;
                  this.y = y || 0;
                  this.width = width || 0;
                  this.height = height || 0;
                }

                return this;
              }

              equals(other) {
                return this.x === other.x && this.y === other.y && this.width === other.width && this.height === other.height;
              }

              lerp(to, ratio) {
                const x = this.x;
                const y = this.y;
                const w = this.width;
                const h = this.height;
                this.x = x + (to.x - x) * ratio;
                this.y = y + (to.y - y) * ratio;
                this.width = w + (to.width - w) * ratio;
                this.height = h + (to.height - h) * ratio;
                return this;
              }

              toString() {
                return `(${this.x.toFixed(2)}, ${this.y.toFixed(2)}, ${this.width.toFixed(2)}, ${this.height.toFixed(2)})`;
              }

              intersects(other) {
                const maxax = this.x + this.width;
                const maxay = this.y + this.height;
                const maxbx = other.x + other.width;
                const maxby = other.y + other.height;
                return !(maxax < other.x || maxbx < this.x || maxay < other.y || maxby < this.y);
              }

              contains(point) {
                return this.x <= point.x && this.x + this.width >= point.x && this.y <= point.y && this.y + this.height >= point.y;
              }

              containsRect(other) {
                return this.x <= other.x && this.x + this.width >= other.x + other.width && this.y <= other.y && this.y + this.height >= other.y + other.height;
              }

              transformMat4(mat) {
                const ol = this.x;
                const ob = this.y;
                const or = ol + this.width;
                const ot = ob + this.height;
                const lbx = mat.m00 * ol + mat.m04 * ob + mat.m12;
                const lby = mat.m01 * ol + mat.m05 * ob + mat.m13;
                const rbx = mat.m00 * or + mat.m04 * ob + mat.m12;
                const rby = mat.m01 * or + mat.m05 * ob + mat.m13;
                const ltx = mat.m00 * ol + mat.m04 * ot + mat.m12;
                const lty = mat.m01 * ol + mat.m05 * ot + mat.m13;
                const rtx = mat.m00 * or + mat.m04 * ot + mat.m12;
                const rty = mat.m01 * or + mat.m05 * ot + mat.m13;
                const minX = Math.min(lbx, rbx, ltx, rtx);
                const maxX = Math.max(lbx, rbx, ltx, rtx);
                const minY = Math.min(lby, rby, lty, rty);
                const maxY = Math.max(lby, rby, lty, rty);
                this.x = minX;
                this.y = minY;
                this.width = maxX - minX;
                this.height = maxY - minY;
                return this;
              }

              transformMat4ToPoints(mat, out_lb, out_lt, out_rt, out_rb) {
                const ol = this.x;
                const ob = this.y;
                const or = ol + this.width;
                const ot = ob + this.height;
                out_lb.x = mat.m00 * ol + mat.m04 * ob + mat.m12;
                out_lb.y = mat.m01 * ol + mat.m05 * ob + mat.m13;
                out_rb.x = mat.m00 * or + mat.m04 * ob + mat.m12;
                out_rb.y = mat.m01 * or + mat.m05 * ob + mat.m13;
                out_lt.x = mat.m00 * ol + mat.m04 * ot + mat.m12;
                out_lt.y = mat.m01 * ol + mat.m05 * ot + mat.m13;
                out_rt.x = mat.m00 * or + mat.m04 * ot + mat.m12;
                out_rt.y = mat.m01 * or + mat.m05 * ot + mat.m13;
              }

            } exports('cE', Rect);
            CCClass.fastDefine('cc.Rect', Rect, {
              x: 0,
              y: 0,
              width: 0,
              height: 0
            });
            legacyCC.Rect = Rect;
            function rect(x = 0, y = 0, width = 0, height = 0) {
              return new Rect(x, y, width, height);
            }
            legacyCC.rect = rect;

            var math = /*#__PURE__*/Object.freeze({
                __proto__: null,
                bits: bits,
                Vec2: Vec2,
                v2: v2,
                Vec3: Vec3,
                v3: v3,
                Vec4: Vec4,
                v4: v4,
                Quat: Quat,
                quat: quat,
                Mat3: Mat3,
                Mat4: Mat4,
                mat4: mat4,
                AffineTransform: AffineTransform,
                Size: Size,
                size: size,
                Rect: Rect,
                rect: rect,
                Color: Color,
                color: color,
                EPSILON: EPSILON,
                equals: equals,
                approx: approx,
                clamp: clamp,
                clamp01: clamp01,
                lerp: lerp,
                toRadian: toRadian,
                toDegree: toDegree,
                random: random,
                randomRange: randomRange,
                randomRangeInt: randomRangeInt,
                pseudoRandom: pseudoRandom,
                pseudoRandomRange: pseudoRandomRange,
                pseudoRandomRangeInt: pseudoRandomRangeInt,
                nextPow2: nextPow2$1,
                repeat: repeat,
                pingPong: pingPong,
                inverseLerp: inverseLerp,
                absMaxComponent: absMaxComponent,
                absMax: absMax
            });
            exports('eq', math);

            class Pool$1 {
              constructor(ctor, elementsPerBatch) {
                this._ctor = void 0;
                this._elementsPerBatch = void 0;
                this._nextAvail = void 0;
                this._freepool = [];
                this._ctor = ctor;
                this._elementsPerBatch = Math.max(elementsPerBatch, 1);
                this._nextAvail = this._elementsPerBatch - 1;

                for (let i = 0; i < this._elementsPerBatch; ++i) {
                  this._freepool.push(ctor());
                }
              }

              alloc() {
                if (this._nextAvail < 0) {
                  const elementsPerBatch = this._elementsPerBatch;

                  for (let i = 0; i < elementsPerBatch; i++) {
                    this._freepool.push(this._ctor());
                  }

                  this._nextAvail = elementsPerBatch - 1;
                }

                const ret = this._freepool[this._nextAvail--];
                this._freepool.length--;
                return ret;
              }

              free(obj) {
                this._freepool.push(obj);

                this._nextAvail++;
              }

              freeArray(objs) {
                Array.prototype.push.apply(this._freepool, objs);
                this._nextAvail += objs.length;
              }

              destroy(dtor) {
                if (dtor) {
                  for (let i = 0; i <= this._nextAvail; i++) {
                    dtor(this._freepool[i]);
                  }
                }

                this._freepool.length = 0;
                this._nextAvail = -1;
              }

            } exports('P', Pool$1);

            const Destroyed = 1 << 0;
            const ToDestroy = 1 << 2;
            const DontSave = 1 << 3;
            const EditorOnly = 1 << 4;
            const Dirty = 1 << 5;
            const DontDestroy = 1 << 6;
            const Destroying = 1 << 7;
            const Deactivating = 1 << 8;
            const LockedInEditor = 1 << 9;
            const HideInHierarchy = 1 << 10;
            const IsOnEnableCalled = 1 << 11;
            const IsEditorOnEnableCalled = 1 << 12;
            const IsPreloadStarted = 1 << 13;
            const IsOnLoadCalled = 1 << 14;
            const IsOnLoadStarted = 1 << 15;
            const IsStartCalled = 1 << 16;
            const IsRotationLocked = 1 << 17;
            const IsScaleLocked = 1 << 18;
            const IsAnchorLocked = 1 << 19;
            const IsSizeLocked = 1 << 20;
            const IsPositionLocked = 1 << 21;
            const PersistentMask = ~(ToDestroy | Dirty | Destroying | DontDestroy | Deactivating | IsPreloadStarted | IsOnLoadStarted | IsOnLoadCalled | IsStartCalled | IsOnEnableCalled | IsEditorOnEnableCalled | IsRotationLocked | IsScaleLocked | IsAnchorLocked | IsSizeLocked | IsPositionLocked);
            const AllHideMasks = DontSave | EditorOnly | LockedInEditor | HideInHierarchy;
            const objectsToDestroy = [];

            function compileDestruct(obj, ctor) {
              const shouldSkipId = obj instanceof legacyCC._BaseNode || obj instanceof legacyCC.Component;
              const idToSkip = shouldSkipId ? '_id' : null;
              let key;
              const propsToReset = {};

              for (key in obj) {
                if (obj.hasOwnProperty(key)) {
                  if (key === idToSkip) {
                    continue;
                  }

                  switch (typeof obj[key]) {
                    case 'string':
                      propsToReset[key] = '';
                      break;

                    case 'object':
                    case 'function':
                      propsToReset[key] = null;
                      break;
                  }
                }
              }

              if (CCClass._isCCClass(ctor)) {
                const attrs = legacyCC.Class.Attr.getClassAttrs(ctor);
                const propList = ctor.__props__;

                for (let i = 0; i < propList.length; i++) {
                  key = propList[i];
                  const attrKey = `${key + legacyCC.Class.Attr.DELIMETER}default`;

                  if (attrKey in attrs) {
                    if (shouldSkipId && key === '_id') {
                      continue;
                    }

                    switch (typeof attrs[attrKey]) {
                      case 'string':
                        propsToReset[key] = '';
                        break;

                      case 'object':
                      case 'function':
                        propsToReset[key] = null;
                        break;

                      case 'undefined':
                        propsToReset[key] = undefined;
                        break;
                    }
                  }
                }
              }

              {
                let func = '';

                for (key in propsToReset) {
                  let statement;

                  if (CCClass.IDENTIFIER_RE.test(key)) {
                    statement = `o.${key}=`;
                  } else {
                    statement = `o[${CCClass.escapeForJS(key)}]=`;
                  }

                  let val = propsToReset[key];

                  if (val === '') {
                    val = '""';
                  }

                  func += `${statement + val};\n`;
                }

                return Function('o', func);
              }
            }

            class CCObject {
              static _deferredDestroy() {
                const deleteCount = objectsToDestroy.length;

                for (let i = 0; i < deleteCount; ++i) {
                  const obj = objectsToDestroy[i];

                  if (!(obj._objFlags & Destroyed)) {
                    obj._destroyImmediate();
                  }
                }

                if (deleteCount === objectsToDestroy.length) {
                  objectsToDestroy.length = 0;
                } else {
                  objectsToDestroy.splice(0, deleteCount);
                }
              }

              constructor(name = '') {
                this._objFlags = void 0;
                this._name = void 0;
                this._name = name;
                this._objFlags = 0;
              }

              get name() {
                return this._name;
              }

              set name(value) {
                this._name = value;
              }

              set hideFlags(hideFlags) {
                const flags = hideFlags & CCObject.Flags.AllHideMasks;
                this._objFlags = this._objFlags & ~CCObject.Flags.AllHideMasks | flags;
              }

              get hideFlags() {
                return this._objFlags & CCObject.Flags.AllHideMasks;
              }

              get isValid() {
                return !(this._objFlags & Destroyed);
              }

              destroy() {
                if (this._objFlags & Destroyed) {
                  warnID(5000);
                  return false;
                }

                if (this._objFlags & ToDestroy) {
                  return false;
                }

                this._objFlags |= ToDestroy;
                objectsToDestroy.push(this);

                return true;
              }

              _destruct() {
                const ctor = this.constructor;
                let destruct = ctor.__destruct__;

                if (!destruct) {
                  destruct = compileDestruct(this, ctor);
                  value(ctor, '__destruct__', destruct, true);
                }

                destruct(this);
              }

              _destroyImmediate() {
                if (this._objFlags & Destroyed) {
                  errorID(5000);
                  return;
                }

                if (this._onPreDestroy) {
                  this._onPreDestroy();
                }

                {
                  this._destruct();
                }

                this._objFlags |= Destroyed;
              }

            } exports('cZ', CCObject);

            const prototype = CCObject.prototype;

            prototype._deserialize = null;
            prototype._onPreDestroy = null;
            CCClass.fastDefine('cc.Object', CCObject, {
              _name: '',
              _objFlags: 0
            });
            value(CCObject, 'Flags', {
              Destroyed,
              DontSave,
              EditorOnly,
              Dirty,
              DontDestroy,
              PersistentMask,
              Destroying,
              Deactivating,
              LockedInEditor,
              HideInHierarchy,
              AllHideMasks,
              IsPreloadStarted,
              IsOnLoadStarted,
              IsOnLoadCalled,
              IsOnEnableCalled,
              IsStartCalled,
              IsEditorOnEnableCalled,
              IsPositionLocked,
              IsRotationLocked,
              IsScaleLocked,
              IsAnchorLocked,
              IsSizeLocked
            });
            function isValid(value, strictMode) {
              if (typeof value === 'object') {
                return !!value && !(value._objFlags & (strictMode ? Destroyed | ToDestroy : Destroyed));
              } else {
                return typeof value !== 'undefined';
              }
            }
            legacyCC.isValid = isValid;

            legacyCC.Object = CCObject;

            const fastRemoveAt$1 = array.fastRemoveAt;

            function empty() {}

            class CallbackInfo {
              constructor() {
                this.callback = empty;
                this.target = undefined;
                this.once = false;
              }

              set(callback, target, once) {
                this.callback = callback || empty;
                this.target = target;
                this.once = !!once;
              }

              reset() {
                this.target = undefined;
                this.callback = empty;
                this.once = false;
              }

              check() {
                if (this.target instanceof CCObject && !isValid(this.target, true)) {
                  return false;
                } else {
                  return true;
                }
              }

            }

            const callbackInfoPool = new Pool$1(() => new CallbackInfo(), 32);
            class CallbackList {
              constructor() {
                this.callbackInfos = [];
                this.isInvoking = false;
                this.containCanceled = false;
              }

              removeByCallback(cb) {
                for (let i = 0; i < this.callbackInfos.length; ++i) {
                  const info = this.callbackInfos[i];

                  if (info && info.callback === cb) {
                    info.reset();
                    callbackInfoPool.free(info);
                    fastRemoveAt$1(this.callbackInfos, i);
                    --i;
                  }
                }
              }

              removeByTarget(target) {
                for (let i = 0; i < this.callbackInfos.length; ++i) {
                  const info = this.callbackInfos[i];

                  if (info && info.target === target) {
                    info.reset();
                    callbackInfoPool.free(info);
                    fastRemoveAt$1(this.callbackInfos, i);
                    --i;
                  }
                }
              }

              cancel(index) {
                const info = this.callbackInfos[index];

                if (info) {
                  info.reset();

                  if (this.isInvoking) {
                    this.callbackInfos[index] = null;
                  } else {
                    fastRemoveAt$1(this.callbackInfos, index);
                  }

                  callbackInfoPool.free(info);
                }

                this.containCanceled = true;
              }

              cancelAll() {
                for (let i = 0; i < this.callbackInfos.length; i++) {
                  const info = this.callbackInfos[i];

                  if (info) {
                    info.reset();
                    callbackInfoPool.free(info);
                    this.callbackInfos[i] = null;
                  }
                }

                this.containCanceled = true;
              }

              purgeCanceled() {
                for (let i = this.callbackInfos.length - 1; i >= 0; --i) {
                  const info = this.callbackInfos[i];

                  if (!info) {
                    fastRemoveAt$1(this.callbackInfos, i);
                  }
                }

                this.containCanceled = false;
              }

              clear() {
                this.cancelAll();
                this.callbackInfos.length = 0;
                this.isInvoking = false;
                this.containCanceled = false;
              }

            }
            const MAX_SIZE = 16;
            const callbackListPool = new Pool$1(() => new CallbackList(), MAX_SIZE);
            class CallbacksInvoker {
              constructor() {
                this._callbackTable = createMap(true);
              }

              on(key, callback, target, once) {
                if (!this.hasEventListener(key, callback, target)) {
                  let list = this._callbackTable[key];

                  if (!list) {
                    list = this._callbackTable[key] = callbackListPool.alloc();
                  }

                  const info = callbackInfoPool.alloc();
                  info.set(callback, target, once);
                  list.callbackInfos.push(info);
                }

                return callback;
              }

              hasEventListener(key, callback, target) {
                const list = this._callbackTable && this._callbackTable[key];

                if (!list) {
                  return false;
                }

                const infos = list.callbackInfos;

                if (!callback) {
                  if (list.isInvoking) {
                    for (let i = 0; i < infos.length; ++i) {
                      if (infos[i]) {
                        return true;
                      }
                    }

                    return false;
                  } else {
                    return infos.length > 0;
                  }
                }

                for (let i = 0; i < infos.length; ++i) {
                  const info = infos[i];

                  if (info && info.check() && info.callback === callback && info.target === target) {
                    return true;
                  }
                }

                return false;
              }

              removeAll(keyOrTarget) {
                if (typeof keyOrTarget === 'string') {
                  const list = this._callbackTable && this._callbackTable[keyOrTarget];

                  if (list) {
                    if (list.isInvoking) {
                      list.cancelAll();
                    } else {
                      list.clear();
                      callbackListPool.free(list);
                      delete this._callbackTable[keyOrTarget];
                    }
                  }
                } else if (keyOrTarget) {
                  for (const key in this._callbackTable) {
                    const list = this._callbackTable[key];

                    if (list.isInvoking) {
                      const infos = list.callbackInfos;

                      for (let i = 0; i < infos.length; ++i) {
                        const info = infos[i];

                        if (info && info.target === keyOrTarget) {
                          list.cancel(i);
                        }
                      }
                    } else {
                      list.removeByTarget(keyOrTarget);
                    }
                  }
                }
              }

              off(key, callback, target) {
                const list = this._callbackTable && this._callbackTable[key];

                if (list) {
                  const infos = list.callbackInfos;

                  if (callback) {
                    for (let i = 0; i < infos.length; ++i) {
                      const info = infos[i];

                      if (info && info.callback === callback && info.target === target) {
                        list.cancel(i);
                        break;
                      }
                    }
                  } else {
                    this.removeAll(key);
                  }
                }
              }

              emit(key, arg0, arg1, arg2, arg3, arg4) {
                const list = this._callbackTable && this._callbackTable[key];

                if (list) {
                  const rootInvoker = !list.isInvoking;
                  list.isInvoking = true;
                  const infos = list.callbackInfos;

                  for (let i = 0, len = infos.length; i < len; ++i) {
                    const info = infos[i];

                    if (info) {
                      const callback = info.callback;
                      const target = info.target;

                      if (info.once) {
                        this.off(key, callback, target);
                      }

                      if (!info.check()) {
                        this.off(key, callback, target);
                      } else if (target) {
                        callback.call(target, arg0, arg1, arg2, arg3, arg4);
                      } else {
                        callback(arg0, arg1, arg2, arg3, arg4);
                      }
                    }
                  }

                  if (rootInvoker) {
                    list.isInvoking = false;

                    if (list.containCanceled) {
                      list.purgeCanceled();
                    }
                  }
                }
              }

              clear() {
                for (const key in this._callbackTable) {
                  const list = this._callbackTable[key];

                  if (list) {
                    list.clear();
                    callbackListPool.free(list);
                    delete this._callbackTable[key];
                  }
                }
              }

            }

            function Eventify(base) {
              class Eventified extends base {
                constructor(...args) {
                  super(...args);
                  this._callbackTable = createMap(true);
                }

                once(type, callback, target) {
                  return this.on(type, callback, target, true);
                }

                targetOff(typeOrTarget) {
                  this.removeAll(typeOrTarget);
                }

              }

              const callbacksInvokerPrototype = CallbacksInvoker.prototype;
              const propertyKeys = Object.getOwnPropertyNames(callbacksInvokerPrototype).concat(Object.getOwnPropertySymbols(callbacksInvokerPrototype));

              for (let iPropertyKey = 0; iPropertyKey < propertyKeys.length; ++iPropertyKey) {
                const propertyKey = propertyKeys[iPropertyKey];

                if (!(propertyKey in Eventified.prototype)) {
                  const propertyDescriptor = Object.getOwnPropertyDescriptor(callbacksInvokerPrototype, propertyKey);

                  if (propertyDescriptor) {
                    Object.defineProperty(Eventified.prototype, propertyKey, propertyDescriptor);
                  }
                }
              }

              return Eventified;
            }

            class Empty {}

            const EventTarget = exports('ea', Eventify(Empty));
            legacyCC.EventTarget = EventTarget;

            let BrowserType;

            (function (BrowserType) {
              BrowserType["UNKNOWN"] = "unknown";
              BrowserType["WECHAT"] = "wechat";
              BrowserType["ANDROID"] = "androidbrowser";
              BrowserType["IE"] = "ie";
              BrowserType["EDGE"] = "edge";
              BrowserType["QQ"] = "qqbrowser";
              BrowserType["MOBILE_QQ"] = "mqqbrowser";
              BrowserType["UC"] = "ucbrowser";
              BrowserType["UCBS"] = "ucbs";
              BrowserType["BROWSER_360"] = "360browser";
              BrowserType["BAIDU_APP"] = "baiduboxapp";
              BrowserType["BAIDU"] = "baidubrowser";
              BrowserType["MAXTHON"] = "maxthon";
              BrowserType["OPERA"] = "opera";
              BrowserType["OUPENG"] = "oupeng";
              BrowserType["MIUI"] = "miuibrowser";
              BrowserType["FIREFOX"] = "firefox";
              BrowserType["SAFARI"] = "safari";
              BrowserType["CHROME"] = "chrome";
              BrowserType["LIEBAO"] = "liebao";
              BrowserType["QZONE"] = "qzone";
              BrowserType["SOUGOU"] = "sogou";
              BrowserType["HUAWEI"] = "huawei";
            })(BrowserType || (BrowserType = exports('bn', {})));

            let AppEvent;

            (function (AppEvent) {
              AppEvent["HIDE"] = "hide";
              AppEvent["SHOW"] = "show";
              AppEvent["RESIZE"] = "resize";
              AppEvent["ORIENTATION_CHANGE"] = "orientation_change";
            })(AppEvent || (AppEvent = {}));

            let Language;

            (function (Language) {
              Language["UNKNOWN"] = "unknown";
              Language["ENGLISH"] = "en";
              Language["CHINESE"] = "zh";
              Language["FRENCH"] = "fr";
              Language["ITALIAN"] = "it";
              Language["GERMAN"] = "de";
              Language["SPANISH"] = "es";
              Language["DUTCH"] = "du";
              Language["RUSSIAN"] = "ru";
              Language["KOREAN"] = "ko";
              Language["JAPANESE"] = "ja";
              Language["HUNGARIAN"] = "hu";
              Language["PORTUGUESE"] = "pt";
              Language["ARABIC"] = "ar";
              Language["NORWEGIAN"] = "no";
              Language["POLISH"] = "pl";
              Language["TURKISH"] = "tr";
              Language["UKRAINIAN"] = "uk";
              Language["ROMANIAN"] = "ro";
              Language["BULGARIAN"] = "bg";
            })(Language || (Language = {}));

            let NetworkType;

            (function (NetworkType) {
              NetworkType[NetworkType["NONE"] = 0] = "NONE";
              NetworkType[NetworkType["LAN"] = 1] = "LAN";
              NetworkType[NetworkType["WWAN"] = 2] = "WWAN";
            })(NetworkType || (NetworkType = {}));

            let OS;

            (function (OS) {
              OS["UNKNOWN"] = "Unknown";
              OS["IOS"] = "iOS";
              OS["ANDROID"] = "Android";
              OS["WINDOWS"] = "Windows";
              OS["LINUX"] = "Linux";
              OS["OSX"] = "OS X";
              OS["OHOS"] = "OHOS";
            })(OS || (OS = exports('bl', {})));

            const LEFT = 1 << 2;
            const RIGHT = 1 << 3;
            let Orientation;

            (function (Orientation) {
              Orientation[Orientation["PORTRAIT"] = 1] = "PORTRAIT";
              Orientation[Orientation["PORTRAIT_UPSIDE_DOWN"] = 2] = "PORTRAIT_UPSIDE_DOWN";
              Orientation[Orientation["LANDSCAPE_LEFT"] = LEFT] = "LANDSCAPE_LEFT";
              Orientation[Orientation["LANDSCAPE_RIGHT"] = RIGHT] = "LANDSCAPE_RIGHT";
              Orientation[Orientation["LANDSCAPE"] = LEFT | RIGHT] = "LANDSCAPE";
            })(Orientation || (Orientation = {}));

            let Platform;

            (function (Platform) {
              Platform["UNKNOWN"] = "UNKNOWN";
              Platform["EDITOR_PAGE"] = "EDITOR_PAGE";
              Platform["EDITOR_CORE"] = "EDITOR_CORE";
              Platform["MOBILE_BROWSER"] = "MOBILE_BROWSER";
              Platform["DESKTOP_BROWSER"] = "DESKTOP_BROWSER";
              Platform["WIN32"] = "WIN32";
              Platform["ANDROID"] = "ANDROID";
              Platform["IOS"] = "IOS";
              Platform["MACOS"] = "MACOS";
              Platform["OHOS"] = "OHOS";
              Platform["WECHAT_GAME"] = "WECHAT_GAME";
              Platform["BAIDU_MINI_GAME"] = "BAIDU_MINI_GAME";
              Platform["XIAOMI_QUICK_GAME"] = "XIAOMI_QUICK_GAME";
              Platform["ALIPAY_MINI_GAME"] = "ALIPAY_MINI_GAME";
              Platform["BYTEDANCE_MINI_GAME"] = "BYTEDANCE_MINI_GAME";
              Platform["OPPO_MINI_GAME"] = "OPPO_MINI_GAME";
              Platform["VIVO_MINI_GAME"] = "VIVO_MINI_GAME";
              Platform["HUAWEI_QUICK_GAME"] = "HUAWEI_QUICK_GAME";
              Platform["COCOSPLAY"] = "COCOSPLAY";
              Platform["LINKSURE_MINI_GAME"] = "LINKSURE_MINI_GAME";
              Platform["QTT_MINI_GAME"] = "QTT_MINI_GAME";
            })(Platform || (Platform = exports('eb', {})));

            const orientationMap = {
              0: Orientation.PORTRAIT,
              '-90': Orientation.LANDSCAPE_LEFT,
              90: Orientation.LANDSCAPE_RIGHT,
              180: Orientation.PORTRAIT_UPSIDE_DOWN
            };
            const networkTypeMap = {};
            const platformMap = {
              0: Platform.WIN32,
              2: Platform.MACOS,
              3: Platform.ANDROID,
              4: Platform.IOS,
              5: Platform.IOS,
              6: Platform.OHOS
            };

            class System {
              get networkType() {
                return networkTypeMap[jsb.device.getNetworkType()];
              }

              constructor() {
                this.isNative = void 0;
                this.isBrowser = void 0;
                this.isMobile = void 0;
                this.isLittleEndian = void 0;
                this.platform = void 0;
                this.language = void 0;
                this.nativeLanguage = void 0;
                this.os = void 0;
                this.osVersion = void 0;
                this.osMainVersion = void 0;
                this.browserType = void 0;
                this.browserVersion = void 0;
                this.pixelRatio = void 0;
                this.supportCapability = void 0;
                this._eventTarget = new EventTarget();
                this.isNative = true;
                this.isBrowser = false;
                this.platform = platformMap[__getPlatform()];
                this.isMobile = this.platform === Platform.ANDROID || this.platform === Platform.IOS || this.platform === Platform.OHOS;

                this.isLittleEndian = (() => {
                  const buffer = new ArrayBuffer(2);
                  new DataView(buffer).setInt16(0, 256, true);
                  return new Int16Array(buffer)[0] === 256;
                })();

                const currLanguage = __getCurrentLanguageCode();

                this.nativeLanguage = currLanguage ? currLanguage.toLowerCase() : Language.UNKNOWN;
                this.language = __getCurrentLanguage();
                this.os = __getOS();
                this.osVersion = __getOSVersion();
                this.osMainVersion = parseInt(this.osVersion);
                this.browserType = BrowserType.UNKNOWN;
                this.browserVersion = '';
                this.pixelRatio = jsb.device.getDevicePixelRatio() || 1;
                this.supportCapability = {
                  webp: true,
                  gl: true,
                  canvas: true,
                  imageBitmap: false
                };

                this._registerEvent();
              }

              _registerEvent() {
                jsb.onResize = size => {
                  if (size.width === 0 || size.height === 0) return;
                  size.width /= this.pixelRatio;
                  size.height /= this.pixelRatio;
                  window.resize(size.width, size.height);

                  this._eventTarget.emit(AppEvent.RESIZE);
                };

                jsb.onOrientationChanged = event => {
                  this._eventTarget.emit(AppEvent.ORIENTATION_CHANGE);
                };

                jsb.onPause = () => {
                  this._eventTarget.emit(AppEvent.HIDE);
                };

                jsb.onResume = () => {
                  this._eventTarget.emit(AppEvent.SHOW);
                };
              }

              getViewSize() {
                return new Size(window.innerWidth, window.innerHeight);
              }

              getOrientation() {
                return orientationMap[jsb.device.getDeviceOrientation()];
              }

              getSafeAreaEdge() {
                const nativeSafeArea = jsb.device.getSafeAreaEdge();
                let topEdge = nativeSafeArea.x;
                let bottomEdge = nativeSafeArea.z;
                let leftEdge = nativeSafeArea.y;
                let rightEdge = nativeSafeArea.w;
                const orientation = this.getOrientation();

                if (orientation === Orientation.PORTRAIT) {
                  if (topEdge < bottomEdge) {
                    topEdge = bottomEdge;
                  } else {
                    bottomEdge = topEdge;
                  }
                } else if (leftEdge < rightEdge) {
                  leftEdge = rightEdge;
                } else {
                  rightEdge = leftEdge;
                }

                return {
                  top: topEdge,
                  bottom: bottomEdge,
                  left: leftEdge,
                  right: rightEdge
                };
              }

              getBatteryLevel() {
                return jsb.device.getBatteryLevel();
              }

              triggerGC() {
                jsb.garbageCollect();
              }

              openURL(url) {
                jsb.openURL(url);
              }

              now() {
                if (Date.now) {
                  return Date.now();
                }

                return +new Date();
              }

              restartJSVM() {
                __restartVM();
              }

              onHide(cb) {
                this._eventTarget.on(AppEvent.HIDE, cb);
              }

              onShow(cb) {
                this._eventTarget.on(AppEvent.SHOW, cb);
              }

              onViewResize(cb) {
                this._eventTarget.on(AppEvent.RESIZE, cb);
              }

              onOrientationChange(cb) {
                this._eventTarget.on(AppEvent.ORIENTATION_CHANGE, cb);
              }

              offHide(cb) {
                this._eventTarget.off(AppEvent.HIDE, cb);
              }

              offShow(cb) {
                this._eventTarget.off(AppEvent.SHOW, cb);
              }

              offViewResize(cb) {
                this._eventTarget.off(AppEvent.RESIZE, cb);
              }

              offOrientationChange(cb) {
                this._eventTarget.off(AppEvent.ORIENTATION_CHANGE, cb);
              }

            }

            const system = exports('bk', new System());

            const EXTNAME_RE = /(\.[^\.\/\?\\]*)(\?.*)?$/;
            const DIRNAME_RE = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/;
            const NORMALIZE_RE = /[^\.\/]+\/\.\.\//;
            function join(...segments) {
              let result = '';

              for (const segment of segments) {
                result = (result + (result === '' ? '' : '/') + segment).replace(/(\/|\\\\)$/, '');
              }

              return result;
            }
            function extname(path) {
              const temp = EXTNAME_RE.exec(path);
              return temp ? temp[1] : '';
            }
            function mainFileName(fileName) {
              if (fileName) {
                const idx = fileName.lastIndexOf('.');

                if (idx !== -1) {
                  return fileName.substring(0, idx);
                }
              }

              return fileName;
            }
            function basename(path, extName) {
              const index = path.indexOf('?');

              if (index > 0) {
                path = path.substring(0, index);
              }

              const reg = /(\/|\\)([^\/\\]+)$/g;
              const result = reg.exec(path.replace(/(\/|\\)$/, ''));

              if (!result) {
                return path;
              }

              const baseName = result[2];

              if (extName && path.substring(path.length - extName.length).toLowerCase() === extName.toLowerCase()) {
                return baseName.substring(0, baseName.length - extName.length);
              }

              return baseName;
            }
            function dirname(path) {
              const temp = DIRNAME_RE.exec(path);
              return temp ? temp[2] : '';
            }
            function changeExtname(path, extName) {
              extName = extName || '';
              let index = path.indexOf('?');
              let tempStr = '';

              if (index > 0) {
                tempStr = path.substring(index);
                path = path.substring(0, index);
              }

              index = path.lastIndexOf('.');

              if (index < 0) {
                return path + extName + tempStr;
              }

              return path.substring(0, index) + extName + tempStr;
            }
            function changeBasename(path, baseName, isSameExt) {
              if (baseName.indexOf('.') === 0) {
                return changeExtname(path, baseName);
              }

              let index = path.indexOf('?');
              let tempStr = '';
              const ext = isSameExt ? extname(path) : '';

              if (index > 0) {
                tempStr = path.substring(index);
                path = path.substring(0, index);
              }

              index = path.lastIndexOf('/');
              index = index <= 0 ? 0 : index + 1;
              return path.substring(0, index) + baseName + ext + tempStr;
            }
            function _normalize(url) {
              let oldUrl = url = String(url);

              do {
                oldUrl = url;
                url = url.replace(NORMALIZE_RE, '');
              } while (oldUrl.length !== url.length);

              return url;
            }
            function stripSep(path) {
              return path.replace(/[\/\\]$/, '');
            }
            function getSeperator() {
              return system.os === OS.WINDOWS ? '\\' : '/';
            }

            var path = /*#__PURE__*/Object.freeze({
                __proto__: null,
                join: join,
                extname: extname,
                mainFileName: mainFileName,
                basename: basename,
                dirname: dirname,
                changeExtname: changeExtname,
                changeBasename: changeBasename,
                _normalize: _normalize,
                stripSep: stripSep,
                getSeperator: getSeperator
            });
            exports('eN', path);

            legacyCC.log = log;
            legacyCC.warn = warn;
            legacyCC.error = error;
            legacyCC.assert = assert;
            legacyCC._throw = _throw;
            legacyCC.logID = logID;
            legacyCC.warnID = warnID;
            legacyCC.errorID = errorID;
            legacyCC.assertID = assertID;
            legacyCC.debug = debug$1;
            legacyCC.path = {
              join,
              extname,
              mainFileName,
              basename,
              dirname,
              changeExtname,
              changeBasename,
              _normalize,
              stripSep,

              get sep() {
                return getSeperator();
              }

            };

            let _stageOffset = 0;
            const _name2stageID = {};
            var config = {
              addStage(name) {
                if (_name2stageID[name] !== undefined) {
                  return;
                }

                const stageID = 1 << _stageOffset;
                _name2stageID[name] = stageID;
                _stageOffset += 1;
              },

              stageID(name) {
                const id = _name2stageID[name];

                if (id === undefined) {
                  return -1;
                }

                return id;
              },

              stageIDs(nameList) {
                let key = 0;

                for (const name of nameList) {
                  const id = _name2stageID[name];

                  if (id !== undefined) {
                    key |= id;
                  }
                }

                return key;
              }

            };

            const NativeBufferPool = jsb.NativeBufferPool;
            const NativeObjectPool = jsb.NativeObjectPool;
            const NativeBufferAllocator = jsb.NativeBufferAllocator;

            const contains$2 = (a, t) => {
              for (let i = 0; i < a.length; ++i) {
                if (a[i] === t) return true;
              }

              return false;
            };

            var BufferDataType;

            (function (BufferDataType) {
              BufferDataType[BufferDataType["UINT32"] = 0] = "UINT32";
              BufferDataType[BufferDataType["FLOAT32"] = 1] = "FLOAT32";
              BufferDataType[BufferDataType["NEVER"] = 2] = "NEVER";
            })(BufferDataType || (BufferDataType = {}));

            class BufferPool {
              constructor(poolType, dataType, enumType, entryBits = 8) {
                this._dataType = void 0;
                this._elementCount = void 0;
                this._entryBits = void 0;
                this._stride = void 0;
                this._entriesPerChunk = void 0;
                this._entryMask = void 0;
                this._chunkMask = void 0;
                this._poolFlag = void 0;
                this._arrayBuffers = [];
                this._freelists = [];
                this._uint32BufferViews = [];
                this._float32BufferViews = [];
                this._hasUint32 = false;
                this._hasFloat32 = false;
                this._nativePool = void 0;
                this._elementCount = enumType.COUNT;
                this._entryBits = entryBits;
                this._dataType = dataType;
                const bytesPerElement = 4;
                this._stride = bytesPerElement * this._elementCount;
                this._entriesPerChunk = 1 << entryBits;
                this._entryMask = this._entriesPerChunk - 1;
                this._poolFlag = 1 << 30;
                this._chunkMask = ~(this._entryMask | this._poolFlag);
                this._nativePool = new NativeBufferPool(poolType, entryBits, this._stride);
                let type = BufferDataType.NEVER;
                let hasFloat32 = false;
                let hasUint32 = false;

                for (const e in dataType) {
                  hasFloat32 = this._hasFloat32;
                  hasUint32 = this._hasUint32;

                  if (hasUint32 && hasFloat32) {
                    break;
                  }

                  type = dataType[e];

                  if (!hasFloat32 && type === BufferDataType.FLOAT32) {
                    this._hasFloat32 = true;
                  } else if (!hasUint32 && type === BufferDataType.UINT32) {
                    this._hasUint32 = true;
                  }
                }
              }

              alloc() {
                let i = 0;

                for (; i < this._freelists.length; i++) {
                  const list = this._freelists[i];

                  if (list.length) {
                    const j = list[list.length - 1];
                    list.length--;
                    return (i << this._entryBits) + j + this._poolFlag;
                  }
                }

                const buffer = this._nativePool.allocateNewChunk();

                const float32BufferViews = [];
                const uint32BufferViews = [];
                const freelist = [];
                const hasFloat32 = this._hasFloat32;
                const hasUint32 = this._hasUint32;

                for (let j = 0; j < this._entriesPerChunk; j++) {
                  if (hasFloat32) {
                    float32BufferViews.push(new Float32Array(buffer, this._stride * j, this._elementCount));
                  }

                  if (hasUint32) {
                    uint32BufferViews.push(new Uint32Array(buffer, this._stride * j, this._elementCount));
                  }

                  if (j) {
                    freelist.push(j);
                  }
                }

                this._arrayBuffers.push(buffer);

                if (hasUint32) {
                  this._uint32BufferViews.push(uint32BufferViews);
                }

                if (hasFloat32) {
                  this._float32BufferViews.push(float32BufferViews);
                }

                this._freelists.push(freelist);

                return (i << this._entryBits) + this._poolFlag;
              }

              get(handle, element) {
                const chunk = (this._chunkMask & handle) >> this._entryBits;
                const entry = this._entryMask & handle;
                const bufferViews = this._dataType[element] === BufferDataType.UINT32 ? this._uint32BufferViews : this._float32BufferViews;

                if ( (!handle || chunk < 0 || chunk >= bufferViews.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freelists[chunk], entry))) {
                  console.warn('invalid buffer pool handle');
                  return 0;
                }

                return bufferViews[chunk][entry][element];
              }

              set(handle, element, value) {
                const chunk = (this._chunkMask & handle) >> this._entryBits;
                const entry = this._entryMask & handle;
                const bufferViews = this._dataType[element] === BufferDataType.UINT32 ? this._uint32BufferViews : this._float32BufferViews;

                if ( (!handle || chunk < 0 || chunk >= bufferViews.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freelists[chunk], entry))) {
                  console.warn('invalid buffer pool handle');
                  return;
                }

                bufferViews[chunk][entry][element] = value;
              }

              setVec2(handle, element, vec2) {

                const chunk = (this._chunkMask & handle) >> this._entryBits;
                const entry = this._entryMask & handle;
                const bufferViews = this._dataType[element] === BufferDataType.UINT32 ? this._uint32BufferViews : this._float32BufferViews;

                if ( (!handle || chunk < 0 || chunk >= bufferViews.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freelists[chunk], entry))) {
                  console.warn('invalid buffer pool handle');
                  return;
                }

                let index = element;
                const view = bufferViews[chunk][entry];
                view[index++] = vec2.x;
                view[index++] = vec2.y;
              }

              setVec3(handle, element, vec3) {

                const chunk = (this._chunkMask & handle) >> this._entryBits;
                const entry = this._entryMask & handle;
                const bufferViews = this._dataType[element] === BufferDataType.UINT32 ? this._uint32BufferViews : this._float32BufferViews;

                if ( (!handle || chunk < 0 || chunk >= bufferViews.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freelists[chunk], entry))) {
                  console.warn('invalid buffer pool handle');
                  return;
                }

                let index = element;
                const view = bufferViews[chunk][entry];
                view[index++] = vec3.x;
                view[index++] = vec3.y;
                view[index] = vec3.z;
              }

              getVec3(handle, element, vec3) {

                const chunk = (this._chunkMask & handle) >> this._entryBits;
                const entry = this._entryMask & handle;
                const bufferViews = this._dataType[element] === BufferDataType.UINT32 ? this._uint32BufferViews : this._float32BufferViews;

                if ( (!handle || chunk < 0 || chunk >= bufferViews.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freelists[chunk], entry))) {
                  console.warn('invalid buffer pool handle');
                  return;
                }

                let index = element;
                const view = bufferViews[chunk][entry];
                vec3.x = view[index++];
                vec3.y = view[index++];
                vec3.z = view[index];
              }

              setVec4(handle, element, vec4) {

                const chunk = (this._chunkMask & handle) >> this._entryBits;
                const entry = this._entryMask & handle;
                const bufferViews = this._dataType[element] === BufferDataType.UINT32 ? this._uint32BufferViews : this._float32BufferViews;

                if ( (!handle || chunk < 0 || chunk >= bufferViews.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freelists[chunk], entry))) {
                  console.warn('invalid buffer pool handle');
                  return;
                }

                let index = element;
                const view = bufferViews[chunk][entry];
                view[index++] = vec4.x;
                view[index++] = vec4.y;
                view[index++] = vec4.z;
                view[index] = vec4.w;
              }

              getVec4(handle, element, vec4) {

                const chunk = (this._chunkMask & handle) >> this._entryBits;
                const entry = this._entryMask & handle;
                const bufferViews = this._dataType[element] === BufferDataType.UINT32 ? this._uint32BufferViews : this._float32BufferViews;

                if ( (!handle || chunk < 0 || chunk >= bufferViews.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freelists[chunk], entry))) {
                  console.warn('invalid buffer pool handle');
                  return;
                }

                let index = element;
                const view = bufferViews[chunk][entry];
                vec4.x = view[index++];
                vec4.y = view[index++];
                vec4.z = view[index++];
                vec4.w = view[index];
              }

              setMat4(handle, element, mat4) {

                const chunk = (this._chunkMask & handle) >> this._entryBits;
                const entry = this._entryMask & handle;
                const bufferViews = this._dataType[element] === BufferDataType.UINT32 ? this._uint32BufferViews : this._float32BufferViews;

                if ( (!handle || chunk < 0 || chunk >= bufferViews.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freelists[chunk], entry))) {
                  console.warn('invalid buffer pool handle');
                  return;
                }

                let index = element;
                const view = bufferViews[chunk][entry];
                view[index++] = mat4.m00;
                view[index++] = mat4.m01;
                view[index++] = mat4.m02;
                view[index++] = mat4.m03;
                view[index++] = mat4.m04;
                view[index++] = mat4.m05;
                view[index++] = mat4.m06;
                view[index++] = mat4.m07;
                view[index++] = mat4.m08;
                view[index++] = mat4.m09;
                view[index++] = mat4.m10;
                view[index++] = mat4.m11;
                view[index++] = mat4.m12;
                view[index++] = mat4.m13;
                view[index++] = mat4.m14;
                view[index] = mat4.m15;
              }

              free(handle) {
                const chunk = (this._chunkMask & handle) >> this._entryBits;
                const entry = this._entryMask & handle;

                if ( (!handle || chunk < 0 || chunk >= this._freelists.length || entry < 0 || entry >= this._entriesPerChunk || contains$2(this._freelists[chunk], entry))) {
                  console.warn('invalid buffer pool handle');
                  return;
                }

                const bufferViews = this._hasUint32 ? this._uint32BufferViews : this._float32BufferViews;
                bufferViews[chunk][entry].fill(0);

                this._freelists[chunk].push(entry);
              }

            }

            class ObjectPool {
              constructor(poolType, ctor, dtor) {
                this._ctor = void 0;
                this._dtor = void 0;
                this._indexMask = void 0;
                this._poolFlag = void 0;
                this._array = [];
                this._freelist = [];
                this._nativePool = void 0;
                this._ctor = ctor;

                if (dtor) {
                  this._dtor = dtor;
                }

                this._poolFlag = 1 << 29;
                this._indexMask = ~this._poolFlag;
                this._nativePool = new NativeObjectPool(poolType, this._array);
              }

              alloc(...args) {
                const freelist = this._freelist;
                let i = -1;

                if (freelist.length) {
                  i = freelist[freelist.length - 1];
                  freelist.length--;
                  this._array[i] = this._ctor(arguments, this._array[i]);
                } else {
                  i = this._array.length;

                  const obj = this._ctor(arguments);

                  if (!obj) {
                    return 0;
                  }

                  this._array.push(obj);
                }

                this._nativePool.bind(i, this._array[i]);
                return i + this._poolFlag;
              }

              get(handle) {
                const index = this._indexMask & handle;

                if ( (!handle || index < 0 || index >= this._array.length || contains$2(this._freelist, index))) {
                  console.warn('invalid object pool handle');
                  return null;
                }

                return this._array[index];
              }

              free(handle) {
                const index = this._indexMask & handle;

                if ( (!handle || index < 0 || index >= this._array.length || contains$2(this._freelist, index))) {
                  console.warn('invalid object pool handle');
                  return;
                }

                if (this._dtor) {
                  this._array[index] = this._dtor(this._array[index]);
                }

                this._freelist.push(index);
              }

            }

            class BufferAllocator {
              constructor(poolType) {
                this._nativeBufferAllocator = void 0;
                this._buffers = new Map();
                this._nextBufferIdx = 0;
                this._poolFlag = void 0;
                this._bufferIdxMask = void 0;
                this._freelist = [];
                this._poolFlag = 1 << 30;
                this._bufferIdxMask = ~this._poolFlag;
                this._nativeBufferAllocator = new NativeBufferAllocator(poolType);
              }

              alloc(size) {
                const freelist = this._freelist;
                let bufferIdx = -1;

                if (freelist.length) {
                  bufferIdx = freelist[freelist.length - 1];
                  freelist.length--;
                } else {
                  bufferIdx = this._nextBufferIdx++;
                }

                const buffer = this._nativeBufferAllocator.alloc(bufferIdx, size);

                this._buffers.set(bufferIdx, buffer);

                return bufferIdx | this._poolFlag;
              }

              free(handle) {
                const bufferIdx = this._bufferIdxMask & handle;

                if (!this._buffers.get(bufferIdx)) {
                  {
                    console.warn('invalid buffer allocator handle');
                  }

                  return;
                }

                this._nativeBufferAllocator.free(bufferIdx);

                this._buffers.delete(bufferIdx);

                this._freelist.push(bufferIdx);
              }

              getBuffer(handle) {
                const bufferIdx = this._bufferIdxMask & handle;

                const buffer = this._buffers.get(bufferIdx);

                if (!buffer) {
                  {
                    console.warn('invalid array pool index or invalid array handle');
                  }

                  return null;
                }

                return buffer;
              }

            }

            class TypedArrayPool extends BufferAllocator {
              constructor(poolType, viewCtor, size, step) {
                super(poolType);
                this._viewCtor = void 0;
                this._size = void 0;
                this._step = void 0;
                this._viewCtor = viewCtor;
                this._size = size * viewCtor.BYTES_PER_ELEMENT;
                this._step = step || size;
              }

              alloc() {
                const bufferIdx = this._nextBufferIdx++;

                const buffer = this._nativeBufferAllocator.alloc(bufferIdx, this._size);

                this._buffers.set(bufferIdx, new this._viewCtor(buffer));

                return bufferIdx | this._poolFlag;
              }

              getBuffer(handle) {
                return null;
              }

              assign(handle, targetIdx, value) {
                const bufferIdx = this._bufferIdxMask & handle;

                let array = this._buffers.get(bufferIdx);

                if (!array) {
                  {
                    console.warn('invalid array pool handle');
                  }

                  return;
                }

                const index = targetIdx + 1;

                if (index >= array.length) {
                  let newSize = array.length;

                  while (index >= newSize) {
                    newSize += this._step;
                  }

                  newSize *= this._viewCtor.BYTES_PER_ELEMENT;
                  const newArray = new this._viewCtor(this._nativeBufferAllocator.alloc(bufferIdx, newSize));
                  newArray.set(array);
                  array = newArray;

                  this._buffers.set(bufferIdx, array);
                }

                array[index] = value;
                const len = array[0];
                array[0] = index > len ? index : len;
              }

              erase(handle, index) {
                const bufferIdx = this._bufferIdxMask & handle;

                const array = this._buffers.get(bufferIdx);

                if (!array || index >= array[0]) {
                  {
                    console.warn('invalid array pool index or invalid array handle');
                  }

                  return;
                }

                for (let i = index + 1; i < array[0]; ++i) {
                  array[i] = array[i + 1];
                }

                --array[0];
              }

              push(handle, value) {
                const bufferIdx = this._bufferIdxMask & handle;

                const array = this._buffers.get(bufferIdx);

                if (!array) {
                  {
                    console.warn('invalid array pool handle');
                  }

                  return;
                }

                this.assign(handle, array[0], value);
              }

              pop(handle) {
                const bufferIdx = this._bufferIdxMask & handle;

                const array = this._buffers.get(bufferIdx);

                if (!array) {
                  {
                    console.warn('invalid array pool handle');
                  }

                  return;
                }

                if (array[0] !== 0) --array[0];
              }

              clear(handle) {
                const bufferIdx = this._bufferIdxMask & handle;

                const array = this._buffers.get(bufferIdx);

                if (!array) {
                  {
                    console.warn('invalid array pool handle');
                  }

                  return;
                }

                array[0] = 0;
              }

              get(handle, index) {
                const bufferIdx = this._bufferIdxMask & handle;

                const array = this._buffers.get(bufferIdx);

                if (!array || index >= array[0]) {
                  {
                    console.warn('invalid array pool handle');
                  }

                  return 0;
                }

                return array[index + 1];
              }

              length(handle) {
                const bufferIdx = this._bufferIdxMask & handle;

                const array = this._buffers.get(bufferIdx);

                if (!array) {
                  {
                    console.warn('invalid array pool handle');
                  }

                  return 0;
                }

                return array[0];
              }

            }

            function freeHandleArray(arrayHandle, arrayPool, elementPool, freeArrayItself = true) {
              const count = arrayPool.length(arrayHandle);

              for (let i = 0; i < count; i++) {
                const element = arrayPool.get(arrayHandle, i);

                if (element) {
                  elementPool.free(element);
                }
              }

              if (freeArrayItself) {
                arrayPool.free(arrayHandle);
              } else {
                arrayPool.clear(arrayHandle);
              }
            }
            let PoolType;

            (function (PoolType) {
              PoolType[PoolType["ATTRIBUTE"] = 0] = "ATTRIBUTE";
              PoolType[PoolType["DESCRIPTOR_SETS"] = 1] = "DESCRIPTOR_SETS";
              PoolType[PoolType["SHADER"] = 2] = "SHADER";
              PoolType[PoolType["INPUT_ASSEMBLER"] = 3] = "INPUT_ASSEMBLER";
              PoolType[PoolType["PIPELINE_LAYOUT"] = 4] = "PIPELINE_LAYOUT";
              PoolType[PoolType["FRAMEBUFFER"] = 5] = "FRAMEBUFFER";
              PoolType[PoolType["PASS"] = 100] = "PASS";
              PoolType[PoolType["SUB_MODEL"] = 101] = "SUB_MODEL";
              PoolType[PoolType["MODEL"] = 102] = "MODEL";
              PoolType[PoolType["SCENE"] = 103] = "SCENE";
              PoolType[PoolType["CAMERA"] = 104] = "CAMERA";
              PoolType[PoolType["NODE"] = 105] = "NODE";
              PoolType[PoolType["ROOT"] = 106] = "ROOT";
              PoolType[PoolType["AABB"] = 107] = "AABB";
              PoolType[PoolType["RENDER_WINDOW"] = 108] = "RENDER_WINDOW";
              PoolType[PoolType["FRUSTUM"] = 109] = "FRUSTUM";
              PoolType[PoolType["AMBIENT"] = 110] = "AMBIENT";
              PoolType[PoolType["FOG"] = 111] = "FOG";
              PoolType[PoolType["SKYBOX"] = 112] = "SKYBOX";
              PoolType[PoolType["SHADOW"] = 113] = "SHADOW";
              PoolType[PoolType["LIGHT"] = 114] = "LIGHT";
              PoolType[PoolType["SPHERE"] = 115] = "SPHERE";
              PoolType[PoolType["INSTANCED_ATTRIBUTE"] = 116] = "INSTANCED_ATTRIBUTE";
              PoolType[PoolType["FLAT_BUFFER"] = 117] = "FLAT_BUFFER";
              PoolType[PoolType["SUB_MESH"] = 118] = "SUB_MESH";
              PoolType[PoolType["RASTERIZER_STATE"] = 119] = "RASTERIZER_STATE";
              PoolType[PoolType["DEPTH_STENCIL_STATE"] = 120] = "DEPTH_STENCIL_STATE";
              PoolType[PoolType["BLEND_TARGET"] = 121] = "BLEND_TARGET";
              PoolType[PoolType["BLEND_STATE"] = 122] = "BLEND_STATE";
              PoolType[PoolType["BATCH_2D"] = 123] = "BATCH_2D";
              PoolType[PoolType["PIPELINE_SCENE_DATA"] = 124] = "PIPELINE_SCENE_DATA";
              PoolType[PoolType["SUB_MODEL_ARRAY"] = 200] = "SUB_MODEL_ARRAY";
              PoolType[PoolType["MODEL_ARRAY"] = 201] = "MODEL_ARRAY";
              PoolType[PoolType["ATTRIBUTE_ARRAY"] = 202] = "ATTRIBUTE_ARRAY";
              PoolType[PoolType["FLAT_BUFFER_ARRAY"] = 203] = "FLAT_BUFFER_ARRAY";
              PoolType[PoolType["INSTANCED_BUFFER_ARRAY"] = 204] = "INSTANCED_BUFFER_ARRAY";
              PoolType[PoolType["LIGHT_ARRAY"] = 205] = "LIGHT_ARRAY";
              PoolType[PoolType["BLEND_TARGET_ARRAY"] = 206] = "BLEND_TARGET_ARRAY";
              PoolType[PoolType["BATCH_ARRAY_2D"] = 207] = "BATCH_ARRAY_2D";
              PoolType[PoolType["RAW_BUFFER"] = 300] = "RAW_BUFFER";
              PoolType[PoolType["RAW_OBJECT"] = 400] = "RAW_OBJECT";
            })(PoolType || (PoolType = {}));

            const NULL_HANDLE = exports('aV', 0);
            const ShaderPool = new ObjectPool(PoolType.SHADER, (args, obj) => obj ? (obj.initialize(args[1]), obj) : args[0].createShader(args[1]), obj => (obj && obj.destroy(), obj));
            const DSPool = exports('di', new ObjectPool(PoolType.DESCRIPTOR_SETS, (args, obj) => obj ? (obj.initialize(args[1]), obj) : args[0].createDescriptorSet(args[1]), obj => (obj && obj.destroy(), obj)));
            const IAPool = exports('d7', new ObjectPool(PoolType.INPUT_ASSEMBLER, (args, obj) => obj ? (obj.initialize(args[1]), obj) : args[0].createInputAssembler(args[1]), obj => (obj && obj.destroy(), obj)));
            const PipelineLayoutPool = new ObjectPool(PoolType.PIPELINE_LAYOUT, (args, obj) => obj ? (obj.initialize(args[1]), obj) : args[0].createPipelineLayout(args[1]), obj => (obj && obj.destroy(), obj));
            const FramebufferPool = new ObjectPool(PoolType.FRAMEBUFFER, (args, obj) => obj ? (obj.initialize(args[1]), obj) : args[0].createFramebuffer(args[1]), obj => (obj && obj.destroy(), obj));
            const SubModelArrayPool = new TypedArrayPool(PoolType.SUB_MODEL_ARRAY, Uint32Array, 8, 4);
            const ModelArrayPool = new TypedArrayPool(PoolType.MODEL_ARRAY, Uint32Array, 32, 16);
            const AttributeArrayPool = new TypedArrayPool(PoolType.ATTRIBUTE_ARRAY, Uint32Array, 8, 4);
            const FlatBufferArrayPool = exports('aX', new TypedArrayPool(PoolType.FLAT_BUFFER_ARRAY, Uint32Array, 8, 4));
            const LightArrayPool = new TypedArrayPool(PoolType.LIGHT_ARRAY, Uint32Array, 8, 4);
            const BlendTargetArrayPool = new TypedArrayPool(PoolType.BLEND_TARGET_ARRAY, Uint32Array, 8, 4);
            const UIBatchArrayPool = new TypedArrayPool(PoolType.BATCH_ARRAY_2D, Uint32Array, 32, 16);
            const RawBufferPool = exports('a_', new BufferAllocator(PoolType.RAW_BUFFER));
            const RawObjectPool = new ObjectPool(PoolType.RAW_OBJECT, args => args[0] || {}, _ => undefined);
            let PassView;

            (function (PassView) {
              PassView[PassView["PRIORITY"] = 0] = "PRIORITY";
              PassView[PassView["STAGE"] = 1] = "STAGE";
              PassView[PassView["PHASE"] = 2] = "PHASE";
              PassView[PassView["BATCHING_SCHEME"] = 3] = "BATCHING_SCHEME";
              PassView[PassView["PRIMITIVE"] = 4] = "PRIMITIVE";
              PassView[PassView["DYNAMIC_STATES"] = 5] = "DYNAMIC_STATES";
              PassView[PassView["HASH"] = 6] = "HASH";
              PassView[PassView["RASTERIZER_STATE"] = 7] = "RASTERIZER_STATE";
              PassView[PassView["DEPTH_STENCIL_STATE"] = 8] = "DEPTH_STENCIL_STATE";
              PassView[PassView["BLEND_STATE"] = 9] = "BLEND_STATE";
              PassView[PassView["DESCRIPTOR_SET"] = 10] = "DESCRIPTOR_SET";
              PassView[PassView["PIPELINE_LAYOUT"] = 11] = "PIPELINE_LAYOUT";
              PassView[PassView["COUNT"] = 12] = "COUNT";
            })(PassView || (PassView = {}));

            const passViewDataType = {
              [PassView.PRIORITY]: BufferDataType.UINT32,
              [PassView.STAGE]: BufferDataType.UINT32,
              [PassView.PHASE]: BufferDataType.UINT32,
              [PassView.BATCHING_SCHEME]: BufferDataType.UINT32,
              [PassView.PRIMITIVE]: BufferDataType.UINT32,
              [PassView.DYNAMIC_STATES]: BufferDataType.UINT32,
              [PassView.HASH]: BufferDataType.UINT32,
              [PassView.RASTERIZER_STATE]: BufferDataType.UINT32,
              [PassView.DEPTH_STENCIL_STATE]: BufferDataType.UINT32,
              [PassView.BLEND_STATE]: BufferDataType.UINT32,
              [PassView.DESCRIPTOR_SET]: BufferDataType.UINT32,
              [PassView.PIPELINE_LAYOUT]: BufferDataType.UINT32,
              [PassView.COUNT]: BufferDataType.NEVER
            };
            const PassPool = exports('dc', new BufferPool(PoolType.PASS, passViewDataType, PassView));
            let SubModelView;

            (function (SubModelView) {
              SubModelView[SubModelView["PRIORITY"] = 0] = "PRIORITY";
              SubModelView[SubModelView["PASS_COUNT"] = 1] = "PASS_COUNT";
              SubModelView[SubModelView["PASS_0"] = 2] = "PASS_0";
              SubModelView[SubModelView["PASS_1"] = 3] = "PASS_1";
              SubModelView[SubModelView["PASS_2"] = 4] = "PASS_2";
              SubModelView[SubModelView["PASS_3"] = 5] = "PASS_3";
              SubModelView[SubModelView["PASS_4"] = 6] = "PASS_4";
              SubModelView[SubModelView["PASS_5"] = 7] = "PASS_5";
              SubModelView[SubModelView["PASS_6"] = 8] = "PASS_6";
              SubModelView[SubModelView["PASS_7"] = 9] = "PASS_7";
              SubModelView[SubModelView["SHADER_0"] = 10] = "SHADER_0";
              SubModelView[SubModelView["SHADER_1"] = 11] = "SHADER_1";
              SubModelView[SubModelView["SHADER_2"] = 12] = "SHADER_2";
              SubModelView[SubModelView["SHADER_3"] = 13] = "SHADER_3";
              SubModelView[SubModelView["SHADER_4"] = 14] = "SHADER_4";
              SubModelView[SubModelView["SHADER_5"] = 15] = "SHADER_5";
              SubModelView[SubModelView["SHADER_6"] = 16] = "SHADER_6";
              SubModelView[SubModelView["SHADER_7"] = 17] = "SHADER_7";
              SubModelView[SubModelView["PLANAR_SHADER"] = 18] = "PLANAR_SHADER";
              SubModelView[SubModelView["PLANAR_INSTANCE_SHADER"] = 19] = "PLANAR_INSTANCE_SHADER";
              SubModelView[SubModelView["DESCRIPTOR_SET"] = 20] = "DESCRIPTOR_SET";
              SubModelView[SubModelView["INPUT_ASSEMBLER"] = 21] = "INPUT_ASSEMBLER";
              SubModelView[SubModelView["SUB_MESH"] = 22] = "SUB_MESH";
              SubModelView[SubModelView["COUNT"] = 23] = "COUNT";
            })(SubModelView || (SubModelView = exports('dh', {})));

            const subModelViewDataType = {
              [SubModelView.PRIORITY]: BufferDataType.UINT32,
              [SubModelView.PASS_COUNT]: BufferDataType.UINT32,
              [SubModelView.PASS_0]: BufferDataType.UINT32,
              [SubModelView.PASS_1]: BufferDataType.UINT32,
              [SubModelView.PASS_2]: BufferDataType.UINT32,
              [SubModelView.PASS_3]: BufferDataType.UINT32,
              [SubModelView.PASS_4]: BufferDataType.UINT32,
              [SubModelView.PASS_5]: BufferDataType.UINT32,
              [SubModelView.PASS_6]: BufferDataType.UINT32,
              [SubModelView.PASS_7]: BufferDataType.UINT32,
              [SubModelView.SHADER_0]: BufferDataType.UINT32,
              [SubModelView.SHADER_1]: BufferDataType.UINT32,
              [SubModelView.SHADER_2]: BufferDataType.UINT32,
              [SubModelView.SHADER_3]: BufferDataType.UINT32,
              [SubModelView.SHADER_4]: BufferDataType.UINT32,
              [SubModelView.SHADER_5]: BufferDataType.UINT32,
              [SubModelView.SHADER_6]: BufferDataType.UINT32,
              [SubModelView.SHADER_7]: BufferDataType.UINT32,
              [SubModelView.PLANAR_SHADER]: BufferDataType.UINT32,
              [SubModelView.PLANAR_INSTANCE_SHADER]: BufferDataType.UINT32,
              [SubModelView.DESCRIPTOR_SET]: BufferDataType.UINT32,
              [SubModelView.INPUT_ASSEMBLER]: BufferDataType.UINT32,
              [SubModelView.SUB_MESH]: BufferDataType.UINT32,
              [SubModelView.COUNT]: BufferDataType.NEVER
            };
            const SubModelPool = exports('dg', new BufferPool(PoolType.SUB_MODEL, subModelViewDataType, SubModelView));
            let ModelView;

            (function (ModelView) {
              ModelView[ModelView["ENABLED"] = 0] = "ENABLED";
              ModelView[ModelView["VIS_FLAGS"] = 1] = "VIS_FLAGS";
              ModelView[ModelView["CAST_SHADOW"] = 2] = "CAST_SHADOW";
              ModelView[ModelView["RECEIVE_SHADOW"] = 3] = "RECEIVE_SHADOW";
              ModelView[ModelView["WORLD_BOUNDS"] = 4] = "WORLD_BOUNDS";
              ModelView[ModelView["NODE"] = 5] = "NODE";
              ModelView[ModelView["TRANSFORM"] = 6] = "TRANSFORM";
              ModelView[ModelView["SUB_MODEL_ARRAY"] = 7] = "SUB_MODEL_ARRAY";
              ModelView[ModelView["INSTANCED_BUFFER"] = 8] = "INSTANCED_BUFFER";
              ModelView[ModelView["INSTANCED_ATTR_ARRAY"] = 9] = "INSTANCED_ATTR_ARRAY";
              ModelView[ModelView["COUNT"] = 10] = "COUNT";
            })(ModelView || (ModelView = {}));

            const modelViewDataType = {
              [ModelView.ENABLED]: BufferDataType.UINT32,
              [ModelView.VIS_FLAGS]: BufferDataType.UINT32,
              [ModelView.CAST_SHADOW]: BufferDataType.UINT32,
              [ModelView.RECEIVE_SHADOW]: BufferDataType.UINT32,
              [ModelView.WORLD_BOUNDS]: BufferDataType.UINT32,
              [ModelView.NODE]: BufferDataType.UINT32,
              [ModelView.TRANSFORM]: BufferDataType.UINT32,
              [ModelView.SUB_MODEL_ARRAY]: BufferDataType.UINT32,
              [ModelView.INSTANCED_BUFFER]: BufferDataType.UINT32,
              [ModelView.INSTANCED_ATTR_ARRAY]: BufferDataType.UINT32,
              [ModelView.COUNT]: BufferDataType.NEVER
            };
            const ModelPool = new BufferPool(PoolType.MODEL, modelViewDataType, ModelView);
            let BatchView2D;

            (function (BatchView2D) {
              BatchView2D[BatchView2D["VIS_FLAGS"] = 0] = "VIS_FLAGS";
              BatchView2D[BatchView2D["PASS_COUNT"] = 1] = "PASS_COUNT";
              BatchView2D[BatchView2D["PASS_0"] = 2] = "PASS_0";
              BatchView2D[BatchView2D["PASS_1"] = 3] = "PASS_1";
              BatchView2D[BatchView2D["PASS_2"] = 4] = "PASS_2";
              BatchView2D[BatchView2D["PASS_3"] = 5] = "PASS_3";
              BatchView2D[BatchView2D["SHADER_0"] = 6] = "SHADER_0";
              BatchView2D[BatchView2D["SHADER_1"] = 7] = "SHADER_1";
              BatchView2D[BatchView2D["SHADER_2"] = 8] = "SHADER_2";
              BatchView2D[BatchView2D["SHADER_3"] = 9] = "SHADER_3";
              BatchView2D[BatchView2D["DESCRIPTOR_SET"] = 10] = "DESCRIPTOR_SET";
              BatchView2D[BatchView2D["INPUT_ASSEMBLER"] = 11] = "INPUT_ASSEMBLER";
              BatchView2D[BatchView2D["COUNT"] = 12] = "COUNT";
            })(BatchView2D || (BatchView2D = exports('da', {})));

            const batchView2DDataType = {
              [BatchView2D.VIS_FLAGS]: BufferDataType.UINT32,
              [BatchView2D.PASS_COUNT]: BufferDataType.UINT32,
              [BatchView2D.PASS_0]: BufferDataType.UINT32,
              [BatchView2D.PASS_1]: BufferDataType.UINT32,
              [BatchView2D.PASS_2]: BufferDataType.UINT32,
              [BatchView2D.PASS_3]: BufferDataType.UINT32,
              [BatchView2D.SHADER_0]: BufferDataType.UINT32,
              [BatchView2D.SHADER_1]: BufferDataType.UINT32,
              [BatchView2D.SHADER_2]: BufferDataType.UINT32,
              [BatchView2D.SHADER_3]: BufferDataType.UINT32,
              [BatchView2D.DESCRIPTOR_SET]: BufferDataType.UINT32,
              [BatchView2D.INPUT_ASSEMBLER]: BufferDataType.UINT32,
              [BatchView2D.COUNT]: BufferDataType.NEVER
            };
            const BatchPool2D = exports('d9', new BufferPool(PoolType.BATCH_2D, batchView2DDataType, BatchView2D));
            let AABBView;

            (function (AABBView) {
              AABBView[AABBView["CENTER"] = 0] = "CENTER";
              AABBView[AABBView["HALF_EXTENSION"] = 3] = "HALF_EXTENSION";
              AABBView[AABBView["COUNT"] = 6] = "COUNT";
            })(AABBView || (AABBView = exports('cr', {})));

            const aabbViewDataType = {
              [AABBView.CENTER]: BufferDataType.FLOAT32,
              [AABBView.HALF_EXTENSION]: BufferDataType.FLOAT32,
              [AABBView.COUNT]: BufferDataType.NEVER
            };
            const AABBPool = exports('cq', new BufferPool(PoolType.AABB, aabbViewDataType, AABBView));
            let SceneView;

            (function (SceneView) {
              SceneView[SceneView["MAIN_LIGHT"] = 0] = "MAIN_LIGHT";
              SceneView[SceneView["MODEL_ARRAY"] = 1] = "MODEL_ARRAY";
              SceneView[SceneView["SPHERE_LIGHT_ARRAY"] = 2] = "SPHERE_LIGHT_ARRAY";
              SceneView[SceneView["SPOT_LIGHT_ARRAY"] = 3] = "SPOT_LIGHT_ARRAY";
              SceneView[SceneView["BATCH_ARRAY_2D"] = 4] = "BATCH_ARRAY_2D";
              SceneView[SceneView["COUNT"] = 5] = "COUNT";
            })(SceneView || (SceneView = {}));

            const sceneViewDataType = {
              [SceneView.MAIN_LIGHT]: BufferDataType.UINT32,
              [SceneView.MODEL_ARRAY]: BufferDataType.UINT32,
              [SceneView.SPHERE_LIGHT_ARRAY]: BufferDataType.UINT32,
              [SceneView.SPOT_LIGHT_ARRAY]: BufferDataType.UINT32,
              [SceneView.BATCH_ARRAY_2D]: BufferDataType.UINT32,
              [SceneView.COUNT]: BufferDataType.NEVER
            };
            const ScenePool = new BufferPool(PoolType.SCENE, sceneViewDataType, SceneView);
            let CameraView;

            (function (CameraView) {
              CameraView[CameraView["WIDTH"] = 0] = "WIDTH";
              CameraView[CameraView["HEIGHT"] = 1] = "HEIGHT";
              CameraView[CameraView["EXPOSURE"] = 2] = "EXPOSURE";
              CameraView[CameraView["CLEAR_FLAGS"] = 3] = "CLEAR_FLAGS";
              CameraView[CameraView["CLEAR_DEPTH"] = 4] = "CLEAR_DEPTH";
              CameraView[CameraView["CLEAR_STENCIL"] = 5] = "CLEAR_STENCIL";
              CameraView[CameraView["VISIBILITY"] = 6] = "VISIBILITY";
              CameraView[CameraView["NODE"] = 7] = "NODE";
              CameraView[CameraView["SCENE"] = 8] = "SCENE";
              CameraView[CameraView["FRUSTUM"] = 9] = "FRUSTUM";
              CameraView[CameraView["WINDOW"] = 10] = "WINDOW";
              CameraView[CameraView["FORWARD"] = 11] = "FORWARD";
              CameraView[CameraView["POSITION"] = 14] = "POSITION";
              CameraView[CameraView["VIEW_PORT"] = 17] = "VIEW_PORT";
              CameraView[CameraView["CLEAR_COLOR"] = 21] = "CLEAR_COLOR";
              CameraView[CameraView["MAT_VIEW"] = 25] = "MAT_VIEW";
              CameraView[CameraView["MAT_VIEW_PROJ"] = 41] = "MAT_VIEW_PROJ";
              CameraView[CameraView["MAT_VIEW_PROJ_INV"] = 57] = "MAT_VIEW_PROJ_INV";
              CameraView[CameraView["MAT_PROJ"] = 73] = "MAT_PROJ";
              CameraView[CameraView["MAT_PROJ_INV"] = 89] = "MAT_PROJ_INV";
              CameraView[CameraView["MAT_VIEW_PROJ_OFFSCREEN"] = 105] = "MAT_VIEW_PROJ_OFFSCREEN";
              CameraView[CameraView["MAT_VIEW_PROJ_INV_OFFSCREEN"] = 121] = "MAT_VIEW_PROJ_INV_OFFSCREEN";
              CameraView[CameraView["MAT_PROJ_OFFSCREEN"] = 137] = "MAT_PROJ_OFFSCREEN";
              CameraView[CameraView["MAT_PROJ_INV_OFFSCREEN"] = 153] = "MAT_PROJ_INV_OFFSCREEN";
              CameraView[CameraView["COUNT"] = 169] = "COUNT";
            })(CameraView || (CameraView = {}));

            const cameraViewDataType = {
              [CameraView.WIDTH]: BufferDataType.UINT32,
              [CameraView.HEIGHT]: BufferDataType.UINT32,
              [CameraView.EXPOSURE]: BufferDataType.FLOAT32,
              [CameraView.CLEAR_FLAGS]: BufferDataType.UINT32,
              [CameraView.CLEAR_DEPTH]: BufferDataType.FLOAT32,
              [CameraView.CLEAR_STENCIL]: BufferDataType.UINT32,
              [CameraView.VISIBILITY]: BufferDataType.UINT32,
              [CameraView.NODE]: BufferDataType.UINT32,
              [CameraView.SCENE]: BufferDataType.UINT32,
              [CameraView.FRUSTUM]: BufferDataType.UINT32,
              [CameraView.WINDOW]: BufferDataType.UINT32,
              [CameraView.FORWARD]: BufferDataType.FLOAT32,
              [CameraView.POSITION]: BufferDataType.FLOAT32,
              [CameraView.VIEW_PORT]: BufferDataType.FLOAT32,
              [CameraView.CLEAR_COLOR]: BufferDataType.FLOAT32,
              [CameraView.MAT_VIEW]: BufferDataType.FLOAT32,
              [CameraView.MAT_VIEW_PROJ]: BufferDataType.FLOAT32,
              [CameraView.MAT_VIEW_PROJ_INV]: BufferDataType.FLOAT32,
              [CameraView.MAT_PROJ]: BufferDataType.FLOAT32,
              [CameraView.MAT_PROJ_INV]: BufferDataType.FLOAT32,
              [CameraView.MAT_VIEW_PROJ_OFFSCREEN]: BufferDataType.FLOAT32,
              [CameraView.MAT_VIEW_PROJ_INV_OFFSCREEN]: BufferDataType.FLOAT32,
              [CameraView.MAT_PROJ_OFFSCREEN]: BufferDataType.FLOAT32,
              [CameraView.MAT_PROJ_INV_OFFSCREEN]: BufferDataType.FLOAT32,
              [CameraView.COUNT]: BufferDataType.NEVER
            };
            const CameraPool = new BufferPool(PoolType.CAMERA, cameraViewDataType, CameraView);
            let NodeView;

            (function (NodeView) {
              NodeView[NodeView["FLAGS_CHANGED"] = 0] = "FLAGS_CHANGED";
              NodeView[NodeView["LAYER"] = 1] = "LAYER";
              NodeView[NodeView["WORLD_SCALE"] = 2] = "WORLD_SCALE";
              NodeView[NodeView["WORLD_POSITION"] = 5] = "WORLD_POSITION";
              NodeView[NodeView["WORLD_ROTATION"] = 8] = "WORLD_ROTATION";
              NodeView[NodeView["WORLD_MATRIX"] = 12] = "WORLD_MATRIX";
              NodeView[NodeView["COUNT"] = 28] = "COUNT";
            })(NodeView || (NodeView = {}));

            const nodeViewDataType = {
              [NodeView.FLAGS_CHANGED]: BufferDataType.UINT32,
              [NodeView.LAYER]: BufferDataType.UINT32,
              [NodeView.WORLD_SCALE]: BufferDataType.FLOAT32,
              [NodeView.WORLD_POSITION]: BufferDataType.FLOAT32,
              [NodeView.WORLD_ROTATION]: BufferDataType.FLOAT32,
              [NodeView.WORLD_MATRIX]: BufferDataType.FLOAT32,
              [NodeView.COUNT]: BufferDataType.NEVER
            };

            const NodePool = new BufferPool(PoolType.NODE, nodeViewDataType, NodeView);
            let RootView;

            (function (RootView) {
              RootView[RootView["CUMULATIVE_TIME"] = 0] = "CUMULATIVE_TIME";
              RootView[RootView["FRAME_TIME"] = 1] = "FRAME_TIME";
              RootView[RootView["COUNT"] = 2] = "COUNT";
            })(RootView || (RootView = {}));

            const rootViewDataType = {
              [RootView.CUMULATIVE_TIME]: BufferDataType.FLOAT32,
              [RootView.FRAME_TIME]: BufferDataType.FLOAT32,
              [RootView.COUNT]: BufferDataType.NEVER
            };
            const RootPool = new BufferPool(PoolType.ROOT, rootViewDataType, RootView, 1);
            let RenderWindowView;

            (function (RenderWindowView) {
              RenderWindowView[RenderWindowView["HAS_ON_SCREEN_ATTACHMENTS"] = 0] = "HAS_ON_SCREEN_ATTACHMENTS";
              RenderWindowView[RenderWindowView["HAS_OFF_SCREEN_ATTACHMENTS"] = 1] = "HAS_OFF_SCREEN_ATTACHMENTS";
              RenderWindowView[RenderWindowView["FRAMEBUFFER"] = 2] = "FRAMEBUFFER";
              RenderWindowView[RenderWindowView["COUNT"] = 3] = "COUNT";
            })(RenderWindowView || (RenderWindowView = {}));

            const renderWindowDataType = {
              [RenderWindowView.HAS_ON_SCREEN_ATTACHMENTS]: BufferDataType.UINT32,
              [RenderWindowView.HAS_OFF_SCREEN_ATTACHMENTS]: BufferDataType.UINT32,
              [RenderWindowView.FRAMEBUFFER]: BufferDataType.UINT32,
              [RenderWindowView.COUNT]: BufferDataType.NEVER
            };
            const RenderWindowPool = new BufferPool(PoolType.RENDER_WINDOW, renderWindowDataType, RenderWindowView, 2);
            let FrustumView;

            (function (FrustumView) {
              FrustumView[FrustumView["VERTICES"] = 0] = "VERTICES";
              FrustumView[FrustumView["PLANES"] = 24] = "PLANES";
              FrustumView[FrustumView["COUNT"] = 48] = "COUNT";
            })(FrustumView || (FrustumView = {}));

            const frustumViewDataType = {
              [FrustumView.VERTICES]: BufferDataType.FLOAT32,
              [FrustumView.PLANES]: BufferDataType.FLOAT32,
              [FrustumView.COUNT]: BufferDataType.NEVER
            };
            const FrustumPool = new BufferPool(PoolType.FRUSTUM, frustumViewDataType, FrustumView);
            let AmbientView;

            (function (AmbientView) {
              AmbientView[AmbientView["ENABLE"] = 0] = "ENABLE";
              AmbientView[AmbientView["ILLUM"] = 1] = "ILLUM";
              AmbientView[AmbientView["SKY_COLOR"] = 2] = "SKY_COLOR";
              AmbientView[AmbientView["GROUND_ALBEDO"] = 6] = "GROUND_ALBEDO";
              AmbientView[AmbientView["COUNT"] = 10] = "COUNT";
            })(AmbientView || (AmbientView = {}));

            const ambientViewDataType = {
              [AmbientView.ENABLE]: BufferDataType.UINT32,
              [AmbientView.ILLUM]: BufferDataType.FLOAT32,
              [AmbientView.SKY_COLOR]: BufferDataType.FLOAT32,
              [AmbientView.GROUND_ALBEDO]: BufferDataType.FLOAT32,
              [AmbientView.COUNT]: BufferDataType.NEVER
            };

            const AmbientPool = new BufferPool(PoolType.AMBIENT, ambientViewDataType, AmbientView, 1);
            let SkyboxView;

            (function (SkyboxView) {
              SkyboxView[SkyboxView["ENABLE"] = 0] = "ENABLE";
              SkyboxView[SkyboxView["IS_RGBE"] = 1] = "IS_RGBE";
              SkyboxView[SkyboxView["USE_IBL"] = 2] = "USE_IBL";
              SkyboxView[SkyboxView["MODEL"] = 3] = "MODEL";
              SkyboxView[SkyboxView["COUNT"] = 4] = "COUNT";
            })(SkyboxView || (SkyboxView = {}));

            const skyboxDataType = {
              [SkyboxView.ENABLE]: BufferDataType.UINT32,
              [SkyboxView.IS_RGBE]: BufferDataType.UINT32,
              [SkyboxView.USE_IBL]: BufferDataType.UINT32,
              [SkyboxView.MODEL]: BufferDataType.UINT32,
              [SkyboxView.COUNT]: BufferDataType.NEVER
            };
            const SkyboxPool = new BufferPool(PoolType.SKYBOX, skyboxDataType, SkyboxView, 1);
            let FogView;

            (function (FogView) {
              FogView[FogView["ENABLE"] = 0] = "ENABLE";
              FogView[FogView["TYPE"] = 1] = "TYPE";
              FogView[FogView["DENSITY"] = 2] = "DENSITY";
              FogView[FogView["START"] = 3] = "START";
              FogView[FogView["END"] = 4] = "END";
              FogView[FogView["ATTEN"] = 5] = "ATTEN";
              FogView[FogView["TOP"] = 6] = "TOP";
              FogView[FogView["RANGE"] = 7] = "RANGE";
              FogView[FogView["COLOR"] = 8] = "COLOR";
              FogView[FogView["COUNT"] = 12] = "COUNT";
            })(FogView || (FogView = {}));

            const fogViewDataType = {
              [FogView.ENABLE]: BufferDataType.UINT32,
              [FogView.TYPE]: BufferDataType.UINT32,
              [FogView.DENSITY]: BufferDataType.FLOAT32,
              [FogView.START]: BufferDataType.FLOAT32,
              [FogView.END]: BufferDataType.FLOAT32,
              [FogView.ATTEN]: BufferDataType.FLOAT32,
              [FogView.TOP]: BufferDataType.FLOAT32,
              [FogView.RANGE]: BufferDataType.FLOAT32,
              [FogView.COLOR]: BufferDataType.FLOAT32,
              [FogView.COUNT]: BufferDataType.NEVER
            };

            const FogPool = new BufferPool(PoolType.FOG, fogViewDataType, FogView);
            let ShadowsView;

            (function (ShadowsView) {
              ShadowsView[ShadowsView["ENABLE"] = 0] = "ENABLE";
              ShadowsView[ShadowsView["DIRTY"] = 1] = "DIRTY";
              ShadowsView[ShadowsView["TYPE"] = 2] = "TYPE";
              ShadowsView[ShadowsView["DISTANCE"] = 3] = "DISTANCE";
              ShadowsView[ShadowsView["INSTANCE_PASS"] = 4] = "INSTANCE_PASS";
              ShadowsView[ShadowsView["PLANAR_PASS"] = 5] = "PLANAR_PASS";
              ShadowsView[ShadowsView["NEAR"] = 6] = "NEAR";
              ShadowsView[ShadowsView["FAR"] = 7] = "FAR";
              ShadowsView[ShadowsView["ASPECT"] = 8] = "ASPECT";
              ShadowsView[ShadowsView["PCF_TYPE"] = 9] = "PCF_TYPE";
              ShadowsView[ShadowsView["SHADOW_MAP_DIRTY"] = 10] = "SHADOW_MAP_DIRTY";
              ShadowsView[ShadowsView["BIAS"] = 11] = "BIAS";
              ShadowsView[ShadowsView["PACKING"] = 12] = "PACKING";
              ShadowsView[ShadowsView["LINEAR"] = 13] = "LINEAR";
              ShadowsView[ShadowsView["SELF_SHADOW"] = 14] = "SELF_SHADOW";
              ShadowsView[ShadowsView["NORMAL_BIAS"] = 15] = "NORMAL_BIAS";
              ShadowsView[ShadowsView["ORTHO_SIZE"] = 16] = "ORTHO_SIZE";
              ShadowsView[ShadowsView["AUTO_ADAPT"] = 17] = "AUTO_ADAPT";
              ShadowsView[ShadowsView["COLOR"] = 18] = "COLOR";
              ShadowsView[ShadowsView["SIZE"] = 22] = "SIZE";
              ShadowsView[ShadowsView["NORMAL"] = 24] = "NORMAL";
              ShadowsView[ShadowsView["MAT_LIGHT"] = 27] = "MAT_LIGHT";
              ShadowsView[ShadowsView["COUNT"] = 43] = "COUNT";
            })(ShadowsView || (ShadowsView = {}));

            const shadowsViewDataType = {
              [ShadowsView.ENABLE]: BufferDataType.UINT32,
              [ShadowsView.DIRTY]: BufferDataType.UINT32,
              [ShadowsView.TYPE]: BufferDataType.UINT32,
              [ShadowsView.DISTANCE]: BufferDataType.FLOAT32,
              [ShadowsView.INSTANCE_PASS]: BufferDataType.UINT32,
              [ShadowsView.PLANAR_PASS]: BufferDataType.UINT32,
              [ShadowsView.NEAR]: BufferDataType.FLOAT32,
              [ShadowsView.FAR]: BufferDataType.FLOAT32,
              [ShadowsView.ASPECT]: BufferDataType.FLOAT32,
              [ShadowsView.PCF_TYPE]: BufferDataType.UINT32,
              [ShadowsView.SHADOW_MAP_DIRTY]: BufferDataType.UINT32,
              [ShadowsView.BIAS]: BufferDataType.FLOAT32,
              [ShadowsView.PACKING]: BufferDataType.UINT32,
              [ShadowsView.LINEAR]: BufferDataType.UINT32,
              [ShadowsView.SELF_SHADOW]: BufferDataType.UINT32,
              [ShadowsView.NORMAL_BIAS]: BufferDataType.FLOAT32,
              [ShadowsView.ORTHO_SIZE]: BufferDataType.FLOAT32,
              [ShadowsView.AUTO_ADAPT]: BufferDataType.UINT32,
              [ShadowsView.COLOR]: BufferDataType.FLOAT32,
              [ShadowsView.SIZE]: BufferDataType.FLOAT32,
              [ShadowsView.NORMAL]: BufferDataType.FLOAT32,
              [ShadowsView.MAT_LIGHT]: BufferDataType.FLOAT32,
              [ShadowsView.COUNT]: BufferDataType.NEVER
            };

            const ShadowsPool = new BufferPool(PoolType.SHADOW, shadowsViewDataType, ShadowsView, 1);
            let PipelineSceneDataView;

            (function (PipelineSceneDataView) {
              PipelineSceneDataView[PipelineSceneDataView["SHADOW"] = 0] = "SHADOW";
              PipelineSceneDataView[PipelineSceneDataView["SKYBOX"] = 1] = "SKYBOX";
              PipelineSceneDataView[PipelineSceneDataView["AMBIENT"] = 2] = "AMBIENT";
              PipelineSceneDataView[PipelineSceneDataView["FOG"] = 3] = "FOG";
              PipelineSceneDataView[PipelineSceneDataView["IS_HDR"] = 4] = "IS_HDR";
              PipelineSceneDataView[PipelineSceneDataView["SHADING_SCALE"] = 5] = "SHADING_SCALE";
              PipelineSceneDataView[PipelineSceneDataView["FP_SCALE"] = 6] = "FP_SCALE";
              PipelineSceneDataView[PipelineSceneDataView["DEFERRED_LIGHT_PASS"] = 7] = "DEFERRED_LIGHT_PASS";
              PipelineSceneDataView[PipelineSceneDataView["DEFERRED_LIGHT_PASS_SHADER"] = 8] = "DEFERRED_LIGHT_PASS_SHADER";
              PipelineSceneDataView[PipelineSceneDataView["DEFERRED_POST_PASS"] = 9] = "DEFERRED_POST_PASS";
              PipelineSceneDataView[PipelineSceneDataView["DEFERRED_POST_PASS_SHADER"] = 10] = "DEFERRED_POST_PASS_SHADER";
              PipelineSceneDataView[PipelineSceneDataView["COUNT"] = 11] = "COUNT";
            })(PipelineSceneDataView || (PipelineSceneDataView = {}));

            const pipelineSceneDataType = {
              [PipelineSceneDataView.SHADOW]: BufferDataType.UINT32,
              [PipelineSceneDataView.SKYBOX]: BufferDataType.UINT32,
              [PipelineSceneDataView.AMBIENT]: BufferDataType.UINT32,
              [PipelineSceneDataView.FOG]: BufferDataType.UINT32,
              [PipelineSceneDataView.IS_HDR]: BufferDataType.UINT32,
              [PipelineSceneDataView.SHADING_SCALE]: BufferDataType.UINT32,
              [PipelineSceneDataView.FP_SCALE]: BufferDataType.UINT32,
              [PipelineSceneDataView.DEFERRED_LIGHT_PASS]: BufferDataType.UINT32,
              [PipelineSceneDataView.DEFERRED_LIGHT_PASS_SHADER]: BufferDataType.UINT32,
              [PipelineSceneDataView.DEFERRED_POST_PASS]: BufferDataType.UINT32,
              [PipelineSceneDataView.DEFERRED_POST_PASS_SHADER]: BufferDataType.UINT32,
              [PipelineSceneDataView.COUNT]: BufferDataType.NEVER
            };
            const PipelineSceneDataPool = new BufferPool(PoolType.PIPELINE_SCENE_DATA, pipelineSceneDataType, PipelineSceneDataView, 1);
            let LightView;

            (function (LightView) {
              LightView[LightView["USE_COLOR_TEMPERATURE"] = 0] = "USE_COLOR_TEMPERATURE";
              LightView[LightView["ILLUMINANCE"] = 1] = "ILLUMINANCE";
              LightView[LightView["NODE"] = 2] = "NODE";
              LightView[LightView["RANGE"] = 3] = "RANGE";
              LightView[LightView["TYPE"] = 4] = "TYPE";
              LightView[LightView["AABB"] = 5] = "AABB";
              LightView[LightView["FRUSTUM"] = 6] = "FRUSTUM";
              LightView[LightView["SIZE"] = 7] = "SIZE";
              LightView[LightView["SPOT_ANGLE"] = 8] = "SPOT_ANGLE";
              LightView[LightView["ASPECT"] = 9] = "ASPECT";
              LightView[LightView["DIRECTION"] = 10] = "DIRECTION";
              LightView[LightView["COLOR"] = 13] = "COLOR";
              LightView[LightView["COLOR_TEMPERATURE_RGB"] = 16] = "COLOR_TEMPERATURE_RGB";
              LightView[LightView["POSITION"] = 19] = "POSITION";
              LightView[LightView["COUNT"] = 22] = "COUNT";
            })(LightView || (LightView = {}));

            const lightViewDataType = {
              [LightView.USE_COLOR_TEMPERATURE]: BufferDataType.UINT32,
              [LightView.ILLUMINANCE]: BufferDataType.FLOAT32,
              [LightView.NODE]: BufferDataType.UINT32,
              [LightView.RANGE]: BufferDataType.FLOAT32,
              [LightView.TYPE]: BufferDataType.UINT32,
              [LightView.AABB]: BufferDataType.UINT32,
              [LightView.FRUSTUM]: BufferDataType.UINT32,
              [LightView.SIZE]: BufferDataType.FLOAT32,
              [LightView.SPOT_ANGLE]: BufferDataType.FLOAT32,
              [LightView.ASPECT]: BufferDataType.FLOAT32,
              [LightView.DIRECTION]: BufferDataType.FLOAT32,
              [LightView.COLOR]: BufferDataType.FLOAT32,
              [LightView.COLOR_TEMPERATURE_RGB]: BufferDataType.FLOAT32,
              [LightView.POSITION]: BufferDataType.FLOAT32,
              [LightView.COUNT]: BufferDataType.NEVER
            };
            const LightPool = new BufferPool(PoolType.LIGHT, lightViewDataType, LightView, 3);
            let SphereView;

            (function (SphereView) {
              SphereView[SphereView["RADIUS"] = 0] = "RADIUS";
              SphereView[SphereView["CENTER"] = 1] = "CENTER";
              SphereView[SphereView["COUNT"] = 4] = "COUNT";
            })(SphereView || (SphereView = {}));

            const sphereViewDataType = {
              [SphereView.RADIUS]: BufferDataType.FLOAT32,
              [SphereView.CENTER]: BufferDataType.FLOAT32,
              [SphereView.COUNT]: BufferDataType.NEVER
            };

            const SpherePool = new BufferPool(PoolType.SPHERE, sphereViewDataType, SphereView, 3);
            let FlatBufferView;

            (function (FlatBufferView) {
              FlatBufferView[FlatBufferView["STRIDE"] = 0] = "STRIDE";
              FlatBufferView[FlatBufferView["AMOUNT"] = 1] = "AMOUNT";
              FlatBufferView[FlatBufferView["BUFFER"] = 2] = "BUFFER";
              FlatBufferView[FlatBufferView["COUNT"] = 3] = "COUNT";
            })(FlatBufferView || (FlatBufferView = exports('b0', {})));

            const flatBufferViewDataType = {
              [FlatBufferView.STRIDE]: BufferDataType.UINT32,
              [FlatBufferView.AMOUNT]: BufferDataType.UINT32,
              [FlatBufferView.BUFFER]: BufferDataType.UINT32,
              [FlatBufferView.COUNT]: BufferDataType.NEVER
            };
            const FlatBufferPool = exports('a$', new BufferPool(PoolType.FLAT_BUFFER, flatBufferViewDataType, FlatBufferView, 3));
            let SubMeshView;

            (function (SubMeshView) {
              SubMeshView[SubMeshView["FLAT_BUFFER_ARRAY"] = 0] = "FLAT_BUFFER_ARRAY";
              SubMeshView[SubMeshView["COUNT"] = 1] = "COUNT";
            })(SubMeshView || (SubMeshView = exports('aY', {})));

            const subMeshViewDataType = {
              [SubMeshView.FLAT_BUFFER_ARRAY]: BufferDataType.UINT32,
              [SubMeshView.COUNT]: BufferDataType.NEVER
            };
            const SubMeshPool = exports('aW', new BufferPool(PoolType.SUB_MESH, subMeshViewDataType, SubMeshView, 3));
            let RasterizerStateView;

            (function (RasterizerStateView) {
              RasterizerStateView[RasterizerStateView["IS_DISCARD"] = 0] = "IS_DISCARD";
              RasterizerStateView[RasterizerStateView["POLYGO_MODEL"] = 1] = "POLYGO_MODEL";
              RasterizerStateView[RasterizerStateView["SHADE_MODEL"] = 2] = "SHADE_MODEL";
              RasterizerStateView[RasterizerStateView["CULL_MODE"] = 3] = "CULL_MODE";
              RasterizerStateView[RasterizerStateView["IS_FRONT_FACE_CCW"] = 4] = "IS_FRONT_FACE_CCW";
              RasterizerStateView[RasterizerStateView["DEPTH_BIAS_ENABLED"] = 5] = "DEPTH_BIAS_ENABLED";
              RasterizerStateView[RasterizerStateView["DEPTH_BIAS"] = 6] = "DEPTH_BIAS";
              RasterizerStateView[RasterizerStateView["DEPTH_BIAS_CLAMP"] = 7] = "DEPTH_BIAS_CLAMP";
              RasterizerStateView[RasterizerStateView["DEPTH_BIAS_SLOP"] = 8] = "DEPTH_BIAS_SLOP";
              RasterizerStateView[RasterizerStateView["IS_DEPTH_CLIP"] = 9] = "IS_DEPTH_CLIP";
              RasterizerStateView[RasterizerStateView["IS_MULTI_SAMPLE"] = 10] = "IS_MULTI_SAMPLE";
              RasterizerStateView[RasterizerStateView["LINE_WIDTH"] = 11] = "LINE_WIDTH";
              RasterizerStateView[RasterizerStateView["COUNT"] = 12] = "COUNT";
            })(RasterizerStateView || (RasterizerStateView = {}));

            const rasterizerStateViewDataType = {
              [RasterizerStateView.IS_DISCARD]: BufferDataType.UINT32,
              [RasterizerStateView.POLYGO_MODEL]: BufferDataType.UINT32,
              [RasterizerStateView.SHADE_MODEL]: BufferDataType.UINT32,
              [RasterizerStateView.CULL_MODE]: BufferDataType.UINT32,
              [RasterizerStateView.IS_FRONT_FACE_CCW]: BufferDataType.UINT32,
              [RasterizerStateView.DEPTH_BIAS_ENABLED]: BufferDataType.UINT32,
              [RasterizerStateView.DEPTH_BIAS]: BufferDataType.FLOAT32,
              [RasterizerStateView.DEPTH_BIAS_CLAMP]: BufferDataType.FLOAT32,
              [RasterizerStateView.DEPTH_BIAS_SLOP]: BufferDataType.FLOAT32,
              [RasterizerStateView.IS_DEPTH_CLIP]: BufferDataType.UINT32,
              [RasterizerStateView.IS_MULTI_SAMPLE]: BufferDataType.UINT32,
              [RasterizerStateView.LINE_WIDTH]: BufferDataType.FLOAT32,
              [RasterizerStateView.COUNT]: BufferDataType.NEVER
            };
            const RasterizerStatePool = new BufferPool(PoolType.RASTERIZER_STATE, rasterizerStateViewDataType, RasterizerStateView, 9);
            let DepthStencilStateView;

            (function (DepthStencilStateView) {
              DepthStencilStateView[DepthStencilStateView["DEPTH_TEST"] = 0] = "DEPTH_TEST";
              DepthStencilStateView[DepthStencilStateView["DEPTH_WRITE"] = 1] = "DEPTH_WRITE";
              DepthStencilStateView[DepthStencilStateView["DEPTH_FUNC"] = 2] = "DEPTH_FUNC";
              DepthStencilStateView[DepthStencilStateView["STENCIL_TEST_FRONT"] = 3] = "STENCIL_TEST_FRONT";
              DepthStencilStateView[DepthStencilStateView["STENCIL_FUNC_FRONT"] = 4] = "STENCIL_FUNC_FRONT";
              DepthStencilStateView[DepthStencilStateView["STENCIL_READ_MASK_FRONT"] = 5] = "STENCIL_READ_MASK_FRONT";
              DepthStencilStateView[DepthStencilStateView["STENCIL_WRITE_MASK_FRONT"] = 6] = "STENCIL_WRITE_MASK_FRONT";
              DepthStencilStateView[DepthStencilStateView["STENCIL_FAIL_OP_FRONT"] = 7] = "STENCIL_FAIL_OP_FRONT";
              DepthStencilStateView[DepthStencilStateView["STENCIL_Z_FAIL_OP_FRONT"] = 8] = "STENCIL_Z_FAIL_OP_FRONT";
              DepthStencilStateView[DepthStencilStateView["STENCIL_PASS_OP_FRONT"] = 9] = "STENCIL_PASS_OP_FRONT";
              DepthStencilStateView[DepthStencilStateView["STENCIL_REF_FRONT"] = 10] = "STENCIL_REF_FRONT";
              DepthStencilStateView[DepthStencilStateView["STENCIL_TEST_BACK"] = 11] = "STENCIL_TEST_BACK";
              DepthStencilStateView[DepthStencilStateView["STENCIL_FUNC_BACK"] = 12] = "STENCIL_FUNC_BACK";
              DepthStencilStateView[DepthStencilStateView["STENCIL_READ_MADK_BACK"] = 13] = "STENCIL_READ_MADK_BACK";
              DepthStencilStateView[DepthStencilStateView["STENCIL_WRITE_MASK_BACK"] = 14] = "STENCIL_WRITE_MASK_BACK";
              DepthStencilStateView[DepthStencilStateView["STENCIL_FAIL_OP_BACK"] = 15] = "STENCIL_FAIL_OP_BACK";
              DepthStencilStateView[DepthStencilStateView["STENCIL_Z_FAIL_OP_BACK"] = 16] = "STENCIL_Z_FAIL_OP_BACK";
              DepthStencilStateView[DepthStencilStateView["STENCIL_PASS_OP_BACK"] = 17] = "STENCIL_PASS_OP_BACK";
              DepthStencilStateView[DepthStencilStateView["STENCIL_REF_BACK"] = 18] = "STENCIL_REF_BACK";
              DepthStencilStateView[DepthStencilStateView["COUNT"] = 19] = "COUNT";
            })(DepthStencilStateView || (DepthStencilStateView = {}));

            const depthStencilStateViewDataType = {
              [DepthStencilStateView.DEPTH_TEST]: BufferDataType.UINT32,
              [DepthStencilStateView.DEPTH_WRITE]: BufferDataType.UINT32,
              [DepthStencilStateView.DEPTH_FUNC]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_TEST_FRONT]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_FUNC_FRONT]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_READ_MASK_FRONT]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_WRITE_MASK_FRONT]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_FAIL_OP_FRONT]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_Z_FAIL_OP_FRONT]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_PASS_OP_FRONT]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_REF_FRONT]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_TEST_BACK]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_FUNC_BACK]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_READ_MADK_BACK]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_WRITE_MASK_BACK]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_FAIL_OP_BACK]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_Z_FAIL_OP_BACK]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_PASS_OP_BACK]: BufferDataType.UINT32,
              [DepthStencilStateView.STENCIL_REF_BACK]: BufferDataType.UINT32,
              [DepthStencilStateView.COUNT]: BufferDataType.NEVER
            };
            const DepthStencilStatePool = new BufferPool(PoolType.DEPTH_STENCIL_STATE, depthStencilStateViewDataType, DepthStencilStateView, 9);
            let BlendTargetView;

            (function (BlendTargetView) {
              BlendTargetView[BlendTargetView["BLEND"] = 0] = "BLEND";
              BlendTargetView[BlendTargetView["BLEND_SRC"] = 1] = "BLEND_SRC";
              BlendTargetView[BlendTargetView["BLEND_DST"] = 2] = "BLEND_DST";
              BlendTargetView[BlendTargetView["BLEND_EQ"] = 3] = "BLEND_EQ";
              BlendTargetView[BlendTargetView["BLEND_SRC_ALPHA"] = 4] = "BLEND_SRC_ALPHA";
              BlendTargetView[BlendTargetView["BLEND_DST_ALPHA"] = 5] = "BLEND_DST_ALPHA";
              BlendTargetView[BlendTargetView["BLEND_ALPHA_EQ"] = 6] = "BLEND_ALPHA_EQ";
              BlendTargetView[BlendTargetView["BLEND_COLOR_MASK"] = 7] = "BLEND_COLOR_MASK";
              BlendTargetView[BlendTargetView["COUNT"] = 8] = "COUNT";
            })(BlendTargetView || (BlendTargetView = {}));

            const blendTargetViewDataType = {
              [BlendTargetView.BLEND]: BufferDataType.UINT32,
              [BlendTargetView.BLEND_SRC]: BufferDataType.UINT32,
              [BlendTargetView.BLEND_DST]: BufferDataType.UINT32,
              [BlendTargetView.BLEND_EQ]: BufferDataType.UINT32,
              [BlendTargetView.BLEND_SRC_ALPHA]: BufferDataType.UINT32,
              [BlendTargetView.BLEND_DST_ALPHA]: BufferDataType.UINT32,
              [BlendTargetView.BLEND_ALPHA_EQ]: BufferDataType.UINT32,
              [BlendTargetView.BLEND_COLOR_MASK]: BufferDataType.UINT32,
              [BlendTargetView.COUNT]: BufferDataType.NEVER
            };
            const BlendTargetPool = new BufferPool(PoolType.BLEND_TARGET, depthStencilStateViewDataType, BlendTargetView, 9);
            let BlendStateView;

            (function (BlendStateView) {
              BlendStateView[BlendStateView["IS_A2C"] = 0] = "IS_A2C";
              BlendStateView[BlendStateView["IS_INDEPEND"] = 1] = "IS_INDEPEND";
              BlendStateView[BlendStateView["BLEND_COLOR"] = 2] = "BLEND_COLOR";
              BlendStateView[BlendStateView["BLEND_TARGET"] = 6] = "BLEND_TARGET";
              BlendStateView[BlendStateView["COUNT"] = 7] = "COUNT";
            })(BlendStateView || (BlendStateView = {}));

            const blendStateViewDataType = {
              [BlendStateView.IS_A2C]: BufferDataType.UINT32,
              [BlendStateView.IS_INDEPEND]: BufferDataType.UINT32,
              [BlendStateView.BLEND_COLOR]: BufferDataType.FLOAT32,
              [BlendStateView.BLEND_TARGET]: BufferDataType.UINT32,
              [BlendStateView.COUNT]: BufferDataType.NEVER
            };
            const BlendStatePool = new BufferPool(PoolType.BLEND_STATE, blendStateViewDataType, BlendStateView, 9);

            class Ambient {
              get colorArray() {
                return this._colorArray;
              }

              get albedoArray() {
                return this._albedoArray;
              }

              set enabled(val) {
                AmbientPool.set(this._handle, AmbientView.ENABLE, val ? 1 : 0);
              }

              get enabled() {
                return AmbientPool.get(this._handle, AmbientView.ENABLE);
              }

              get skyColor() {
                return this._skyColor;
              }

              set skyColor(color) {
                this._skyColor.set(color);

                Color.toArray(this._colorArray, this._skyColor);
                AmbientPool.setVec4(this._handle, AmbientView.SKY_COLOR, this._skyColor);
              }

              get skyIllum() {
                return AmbientPool.get(this._handle, AmbientView.ILLUM);
              }

              set skyIllum(illum) {
                AmbientPool.set(this._handle, AmbientView.ILLUM, illum);
              }

              get groundAlbedo() {
                return this._groundAlbedo;
              }

              set groundAlbedo(color) {
                this._groundAlbedo.set(color);

                Vec3.toArray(this._albedoArray, this._groundAlbedo);
                AmbientPool.setVec4(this._handle, AmbientView.GROUND_ALBEDO, this._groundAlbedo);
              }

              get handle() {
                return this._handle;
              }

              constructor() {
                this._skyColor = new Color(51, 128, 204, 1.0);
                this._groundAlbedo = new Color(51, 51, 51, 255);
                this._albedoArray = Float32Array.from([0.2, 0.2, 0.2, 1.0]);
                this._colorArray = Float32Array.from([0.2, 0.5, 0.8, 1.0]);
                this._handle = NULL_HANDLE;
                this._handle = AmbientPool.alloc();
              }

              initialize(ambientInfo) {
                this._skyColor.set(ambientInfo.skyColor);

                this._groundAlbedo.set(ambientInfo.groundAlbedo);

                Color.toArray(this._colorArray, this._skyColor);
                Vec3.toArray(this._albedoArray, this._groundAlbedo);
                AmbientPool.setVec4(this._handle, AmbientView.SKY_COLOR, this._skyColor);
                AmbientPool.setVec4(this._handle, AmbientView.GROUND_ALBEDO, this._groundAlbedo);
                AmbientPool.set(this._handle, AmbientView.ILLUM, ambientInfo.skyIllum);
              }

              destroy() {
                if (this._handle) {
                  AmbientPool.free(this._handle);
                  this._handle = NULL_HANDLE;
                }
              }

            }
            Ambient.SUN_ILLUM = 65000.0;
            Ambient.SKY_ILLUM = 20000.0;
            legacyCC.Ambient = Ambient;

            const X = new Vec3();
            const Y = new Vec3();
            const Z = new Vec3();
            const d = new Vec3();
            const min$1 = new Vec3();
            const max$1 = new Vec3();
            const u = new Array(3);
            const e = new Array(3);
            function point_plane(point, plane_) {
              return Vec3.dot(plane_.n, point) - plane_.d;
            }
            function pt_point_plane(out, point, plane_) {
              const t = point_plane(point, plane_);
              return Vec3.subtract(out, point, Vec3.multiplyScalar(out, plane_.n, t));
            }
            function pt_point_aabb(out, point, aabb_) {
              Vec3.copy(out, point);
              Vec3.subtract(min$1, aabb_.center, aabb_.halfExtents);
              Vec3.add(max$1, aabb_.center, aabb_.halfExtents);
              out.x = out.x < min$1.x ? min$1.x : out.x;
              out.y = out.y < min$1.y ? min$1.y : out.y;
              out.z = out.z < min$1.z ? min$1.z : out.z;
              out.x = out.x > max$1.x ? max$1.x : out.x;
              out.y = out.y > max$1.y ? max$1.y : out.y;
              out.z = out.z > max$1.z ? max$1.z : out.z;
              return out;
            }
            function pt_point_obb(out, point, obb_) {
              Vec3.set(X, obb_.orientation.m00, obb_.orientation.m01, obb_.orientation.m02);
              Vec3.set(Y, obb_.orientation.m03, obb_.orientation.m04, obb_.orientation.m05);
              Vec3.set(Z, obb_.orientation.m06, obb_.orientation.m07, obb_.orientation.m08);
              u[0] = X;
              u[1] = Y;
              u[2] = Z;
              e[0] = obb_.halfExtents.x;
              e[1] = obb_.halfExtents.y;
              e[2] = obb_.halfExtents.z;
              Vec3.subtract(d, point, obb_.center);
              Vec3.set(out, obb_.center.x, obb_.center.y, obb_.center.z);

              for (let i = 0; i < 3; i++) {
                let dist = Vec3.dot(d, u[i]);

                if (dist > e[i]) {
                  dist = e[i];
                }

                if (dist < -e[i]) {
                  dist = -e[i];
                }

                out.x += dist * u[i].x;
                out.y += dist * u[i].y;
                out.z += dist * u[i].z;
              }

              return out;
            }
            function pt_point_line(out, point, linePointA, linePointB) {
              Vec3.subtract(X, linePointA, linePointB);
              const dir = X;
              const dirSquaredLength = Vec3.lengthSqr(dir);

              if (dirSquaredLength == 0) {
                Vec3.copy(out, linePointA);
              } else {
                Vec3.subtract(X, point, linePointA);
                const t = Vec3.dot(X, dir) / dirSquaredLength;

                if (t < 0) {
                  Vec3.copy(out, linePointA);
                } else if (t > 1) {
                  Vec3.copy(out, linePointB);
                } else {
                  Vec3.scaleAndAdd(out, linePointA, dir, t);
                }
              }
            }

            var distance = /*#__PURE__*/Object.freeze({
                __proto__: null,
                point_plane: point_plane,
                pt_point_plane: pt_point_plane,
                pt_point_aabb: pt_point_aabb,
                pt_point_obb: pt_point_obb,
                pt_point_line: pt_point_line
            });

            var enums = {
              SHAPE_RAY: 1 << 0,
              SHAPE_LINE: 1 << 1,
              SHAPE_SPHERE: 1 << 2,
              SHAPE_AABB: 1 << 3,
              SHAPE_OBB: 1 << 4,
              SHAPE_PLANE: 1 << 5,
              SHAPE_TRIANGLE: 1 << 6,
              SHAPE_FRUSTUM: 1 << 7,
              SHAPE_FRUSTUM_ACCURATE: 1 << 8,
              SHAPE_CAPSULE: 1 << 9
            };

            class Line {
              static create(sx, sy, sz, ex, ey, ez) {
                return new Line(sx, sy, sz, ex, ey, ez);
              }

              static clone(a) {
                return new Line(a.s.x, a.s.y, a.s.z, a.e.x, a.e.y, a.e.z);
              }

              static copy(out, a) {
                Vec3.copy(out.s, a.s);
                Vec3.copy(out.e, a.e);
                return out;
              }

              static fromPoints(out, start, end) {
                Vec3.copy(out.s, start);
                Vec3.copy(out.e, end);
                return out;
              }

              static set(out, sx, sy, sz, ex, ey, ez) {
                out.s.x = sx;
                out.s.y = sy;
                out.s.z = sz;
                out.e.x = ex;
                out.e.y = ey;
                out.e.z = ez;
                return out;
              }

              static len(a) {
                return Vec3.distance(a.s, a.e);
              }

              get type() {
                return this._type;
              }

              constructor(sx = 0, sy = 0, sz = 0, ex = 0, ey = 0, ez = -1) {
                this.s = void 0;
                this.e = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_LINE;
                this.s = new Vec3(sx, sy, sz);
                this.e = new Vec3(ex, ey, ez);
              }

              length() {
                return Vec3.distance(this.s, this.e);
              }

            }

            class Ray {
              static create(ox = 0, oy = 0, oz = 0, dx = 0, dy = 0, dz = 1) {
                return new Ray(ox, oy, oz, dx, dy, dz);
              }

              static clone(a) {
                return new Ray(a.o.x, a.o.y, a.o.z, a.d.x, a.d.y, a.d.z);
              }

              static copy(out, a) {
                Vec3.copy(out.o, a.o);
                Vec3.copy(out.d, a.d);
                return out;
              }

              static fromPoints(out, origin, target) {
                Vec3.copy(out.o, origin);
                Vec3.normalize(out.d, Vec3.subtract(out.d, target, origin));
                return out;
              }

              static set(out, ox, oy, oz, dx, dy, dz) {
                out.o.x = ox;
                out.o.y = oy;
                out.o.z = oz;
                out.d.x = dx;
                out.d.y = dy;
                out.d.z = dz;
                return out;
              }

              get type() {
                return this._type;
              }

              constructor(ox = 0, oy = 0, oz = 0, dx = 0, dy = 0, dz = -1) {
                this.o = void 0;
                this.d = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_RAY;
                this.o = new Vec3(ox, oy, oz);
                this.d = new Vec3(dx, dy, dz);
              }

              computeHit(out, distance) {
                Vec3.normalize(out, this.d);
                Vec3.scaleAndAdd(out, this.o, out, distance);
              }

            }

            const _v3_tmp = new Vec3();

            const _offset = new Vec3();

            const _min = new Vec3();

            const _max = new Vec3();

            function maxComponent(v) {
              return Math.max(Math.max(v.x, v.y), v.z);
            }

            class Sphere {
              static create(cx, cy, cz, r) {
                return new Sphere(cx, cy, cz, r);
              }

              static clone(p) {
                return new Sphere(p.center.x, p.center.y, p.center.z, p.radius);
              }

              static copy(out, p) {
                Vec3.copy(out.center, p.center);
                out.radius = p.radius;
                return out;
              }

              static fromPoints(out, minPos, maxPos) {
                Vec3.multiplyScalar(out.center, Vec3.add(_v3_tmp, minPos, maxPos), 0.5);
                out.radius = Vec3.subtract(_v3_tmp, maxPos, minPos).length() * 0.5;
                return out;
              }

              static set(out, cx, cy, cz, r) {
                out.center.x = cx;
                out.center.y = cy;
                out.center.z = cz;
                out.radius = r;
                return out;
              }

              static mergePoint(out, s, point) {
                if (s.radius < 0.0) {
                  out.center.set(point);
                  out.radius = 0.0;
                  return out;
                }

                Vec3.subtract(_offset, point, s.center);

                const dist = _offset.length();

                if (dist > s.radius) {
                  const half = (dist - s.radius) * 0.5;
                  out.radius += half;
                  Vec3.multiplyScalar(_offset, _offset, half / dist);
                  Vec3.add(out.center, out.center, _offset);
                }

                return out;
              }

              static mergeAABB(out, s, a) {
                a.getBoundary(_min, _max);
                Sphere.mergePoint(out, s, _min);
                Sphere.mergePoint(out, s, _max);
                return out;
              }

              get center() {
                return this._center;
              }

              set center(val) {
                this._center = val;
                SpherePool.setVec3(this._poolHandle, SphereView.CENTER, this._center);
              }

              get radius() {
                return SpherePool.get(this._poolHandle, SphereView.RADIUS);
              }

              set radius(val) {
                SpherePool.set(this._poolHandle, SphereView.RADIUS, val);
              }

              get handle() {
                return this._poolHandle;
              }

              get type() {
                return this._type;
              }

              constructor(cx = 0, cy = 0, cz = 0, r = 1) {
                this._center = new Vec3(0, 0, 0);
                this._poolHandle = NULL_HANDLE;
                this._type = void 0;
                this._type = enums.SHAPE_SPHERE;
                this._center = new Vec3(cx, cy, cz);
                this._poolHandle = SpherePool.alloc();
                SpherePool.setVec3(this._poolHandle, SphereView.CENTER, this._center);
                SpherePool.set(this._poolHandle, SphereView.RADIUS, r);
              }

              destroy() {
                if (this._poolHandle) {
                  SpherePool.free(this._poolHandle);
                  this._poolHandle = NULL_HANDLE;
                }
              }

              clone() {
                return Sphere.clone(this);
              }

              copy(a) {
                return Sphere.copy(this, a);
              }

              getBoundary(minPos, maxPos) {
                Vec3.set(minPos, this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);
                Vec3.set(maxPos, this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);
              }

              transform(m, pos, rot, scale, out) {
                Vec3.transformMat4(out.center, this.center, m);
                out.radius = this.radius * maxComponent(scale);
              }

              translateAndRotate(m, rot, out) {
                Vec3.transformMat4(out.center, this.center, m);
              }

              setScale(scale, out) {
                out.radius = this.radius * maxComponent(scale);
              }

            } exports('dW', Sphere);

            class Triangle {
              static create(ax = 1, ay = 0, az = 0, bx = 0, by = 0, bz = 0, cx = 0, cy = 0, cz = 1) {
                return new Triangle(ax, ay, az, bx, by, bz, cx, cy, cz);
              }

              static clone(t) {
                return new Triangle(t.a.x, t.a.y, t.a.z, t.b.x, t.b.y, t.b.z, t.c.x, t.c.y, t.c.z);
              }

              static copy(out, t) {
                Vec3.copy(out.a, t.a);
                Vec3.copy(out.b, t.b);
                Vec3.copy(out.c, t.c);
                return out;
              }

              static fromPoints(out, a, b, c) {
                Vec3.copy(out.a, a);
                Vec3.copy(out.b, b);
                Vec3.copy(out.c, c);
                return out;
              }

              static set(out, ax, ay, az, bx, by, bz, cx, cy, cz) {
                out.a.x = ax;
                out.a.y = ay;
                out.a.z = az;
                out.b.x = bx;
                out.b.y = by;
                out.b.z = bz;
                out.c.x = cx;
                out.c.y = cy;
                out.c.z = cz;
                return out;
              }

              get type() {
                return this._type;
              }

              constructor(ax = 0, ay = 0, az = 0, bx = 1, by = 0, bz = 0, cx = 0, cy = 1, cz = 0) {
                this.a = void 0;
                this.b = void 0;
                this.c = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_TRIANGLE;
                this.a = new Vec3(ax, ay, az);
                this.b = new Vec3(bx, by, bz);
                this.c = new Vec3(cx, cy, cz);
              }

            }

            const deepCopy = (target, source, Ctor) => {
              for (let i = 0; i < source.length; ++i) {
                if (target.length <= i) target.push(new Ctor());
                target[i].copy(source[i]);
              }

              target.length = source.length;
            };

            let ObjectType;

            (function (ObjectType) {
              ObjectType[ObjectType["UNKNOWN"] = 0] = "UNKNOWN";
              ObjectType[ObjectType["BUFFER"] = 1] = "BUFFER";
              ObjectType[ObjectType["TEXTURE"] = 2] = "TEXTURE";
              ObjectType[ObjectType["RENDER_PASS"] = 3] = "RENDER_PASS";
              ObjectType[ObjectType["FRAMEBUFFER"] = 4] = "FRAMEBUFFER";
              ObjectType[ObjectType["SAMPLER"] = 5] = "SAMPLER";
              ObjectType[ObjectType["SHADER"] = 6] = "SHADER";
              ObjectType[ObjectType["DESCRIPTOR_SET_LAYOUT"] = 7] = "DESCRIPTOR_SET_LAYOUT";
              ObjectType[ObjectType["PIPELINE_LAYOUT"] = 8] = "PIPELINE_LAYOUT";
              ObjectType[ObjectType["PIPELINE_STATE"] = 9] = "PIPELINE_STATE";
              ObjectType[ObjectType["DESCRIPTOR_SET"] = 10] = "DESCRIPTOR_SET";
              ObjectType[ObjectType["INPUT_ASSEMBLER"] = 11] = "INPUT_ASSEMBLER";
              ObjectType[ObjectType["COMMAND_BUFFER"] = 12] = "COMMAND_BUFFER";
              ObjectType[ObjectType["QUEUE"] = 13] = "QUEUE";
              ObjectType[ObjectType["GLOBAL_BARRIER"] = 14] = "GLOBAL_BARRIER";
              ObjectType[ObjectType["TEXTURE_BARRIER"] = 15] = "TEXTURE_BARRIER";
              ObjectType[ObjectType["BUFFER_BARRIER"] = 16] = "BUFFER_BARRIER";
            })(ObjectType || (ObjectType = exports('a', {})));

            let Status;

            (function (Status) {
              Status[Status["UNREADY"] = 0] = "UNREADY";
              Status[Status["FAILED"] = 1] = "FAILED";
              Status[Status["SUCCESS"] = 2] = "SUCCESS";
            })(Status || (Status = exports('S', {})));

            let API;

            (function (API) {
              API[API["UNKNOWN"] = 0] = "UNKNOWN";
              API[API["GLES2"] = 1] = "GLES2";
              API[API["GLES3"] = 2] = "GLES3";
              API[API["METAL"] = 3] = "METAL";
              API[API["VULKAN"] = 4] = "VULKAN";
              API[API["WEBGL"] = 5] = "WEBGL";
              API[API["WEBGL2"] = 6] = "WEBGL2";
              API[API["WEBGPU"] = 7] = "WEBGPU";
            })(API || (API = exports('f', {})));

            let SurfaceTransform;

            (function (SurfaceTransform) {
              SurfaceTransform[SurfaceTransform["IDENTITY"] = 0] = "IDENTITY";
              SurfaceTransform[SurfaceTransform["ROTATE_90"] = 1] = "ROTATE_90";
              SurfaceTransform[SurfaceTransform["ROTATE_180"] = 2] = "ROTATE_180";
              SurfaceTransform[SurfaceTransform["ROTATE_270"] = 3] = "ROTATE_270";
            })(SurfaceTransform || (SurfaceTransform = exports('g', {})));

            let Feature;

            (function (Feature) {
              Feature[Feature["COLOR_FLOAT"] = 0] = "COLOR_FLOAT";
              Feature[Feature["COLOR_HALF_FLOAT"] = 1] = "COLOR_HALF_FLOAT";
              Feature[Feature["TEXTURE_FLOAT"] = 2] = "TEXTURE_FLOAT";
              Feature[Feature["TEXTURE_HALF_FLOAT"] = 3] = "TEXTURE_HALF_FLOAT";
              Feature[Feature["TEXTURE_FLOAT_LINEAR"] = 4] = "TEXTURE_FLOAT_LINEAR";
              Feature[Feature["TEXTURE_HALF_FLOAT_LINEAR"] = 5] = "TEXTURE_HALF_FLOAT_LINEAR";
              Feature[Feature["FORMAT_R11G11B10F"] = 6] = "FORMAT_R11G11B10F";
              Feature[Feature["FORMAT_D16"] = 7] = "FORMAT_D16";
              Feature[Feature["FORMAT_D16S8"] = 8] = "FORMAT_D16S8";
              Feature[Feature["FORMAT_D24"] = 9] = "FORMAT_D24";
              Feature[Feature["FORMAT_D24S8"] = 10] = "FORMAT_D24S8";
              Feature[Feature["FORMAT_D32F"] = 11] = "FORMAT_D32F";
              Feature[Feature["FORMAT_D32FS8"] = 12] = "FORMAT_D32FS8";
              Feature[Feature["FORMAT_ETC1"] = 13] = "FORMAT_ETC1";
              Feature[Feature["FORMAT_ETC2"] = 14] = "FORMAT_ETC2";
              Feature[Feature["FORMAT_DXT"] = 15] = "FORMAT_DXT";
              Feature[Feature["FORMAT_PVRTC"] = 16] = "FORMAT_PVRTC";
              Feature[Feature["FORMAT_ASTC"] = 17] = "FORMAT_ASTC";
              Feature[Feature["FORMAT_RGB8"] = 18] = "FORMAT_RGB8";
              Feature[Feature["MSAA"] = 19] = "MSAA";
              Feature[Feature["ELEMENT_INDEX_UINT"] = 20] = "ELEMENT_INDEX_UINT";
              Feature[Feature["INSTANCED_ARRAYS"] = 21] = "INSTANCED_ARRAYS";
              Feature[Feature["MULTIPLE_RENDER_TARGETS"] = 22] = "MULTIPLE_RENDER_TARGETS";
              Feature[Feature["BLEND_MINMAX"] = 23] = "BLEND_MINMAX";
              Feature[Feature["DEPTH_BOUNDS"] = 24] = "DEPTH_BOUNDS";
              Feature[Feature["LINE_WIDTH"] = 25] = "LINE_WIDTH";
              Feature[Feature["STENCIL_WRITE_MASK"] = 26] = "STENCIL_WRITE_MASK";
              Feature[Feature["STENCIL_COMPARE_MASK"] = 27] = "STENCIL_COMPARE_MASK";
              Feature[Feature["MULTITHREADED_SUBMISSION"] = 28] = "MULTITHREADED_SUBMISSION";
              Feature[Feature["COMPUTE_SHADER"] = 29] = "COMPUTE_SHADER";
              Feature[Feature["COUNT"] = 30] = "COUNT";
            })(Feature || (Feature = exports('h', {})));

            let Format;

            (function (Format) {
              Format[Format["UNKNOWN"] = 0] = "UNKNOWN";
              Format[Format["A8"] = 1] = "A8";
              Format[Format["L8"] = 2] = "L8";
              Format[Format["LA8"] = 3] = "LA8";
              Format[Format["R8"] = 4] = "R8";
              Format[Format["R8SN"] = 5] = "R8SN";
              Format[Format["R8UI"] = 6] = "R8UI";
              Format[Format["R8I"] = 7] = "R8I";
              Format[Format["R16F"] = 8] = "R16F";
              Format[Format["R16UI"] = 9] = "R16UI";
              Format[Format["R16I"] = 10] = "R16I";
              Format[Format["R32F"] = 11] = "R32F";
              Format[Format["R32UI"] = 12] = "R32UI";
              Format[Format["R32I"] = 13] = "R32I";
              Format[Format["RG8"] = 14] = "RG8";
              Format[Format["RG8SN"] = 15] = "RG8SN";
              Format[Format["RG8UI"] = 16] = "RG8UI";
              Format[Format["RG8I"] = 17] = "RG8I";
              Format[Format["RG16F"] = 18] = "RG16F";
              Format[Format["RG16UI"] = 19] = "RG16UI";
              Format[Format["RG16I"] = 20] = "RG16I";
              Format[Format["RG32F"] = 21] = "RG32F";
              Format[Format["RG32UI"] = 22] = "RG32UI";
              Format[Format["RG32I"] = 23] = "RG32I";
              Format[Format["RGB8"] = 24] = "RGB8";
              Format[Format["SRGB8"] = 25] = "SRGB8";
              Format[Format["RGB8SN"] = 26] = "RGB8SN";
              Format[Format["RGB8UI"] = 27] = "RGB8UI";
              Format[Format["RGB8I"] = 28] = "RGB8I";
              Format[Format["RGB16F"] = 29] = "RGB16F";
              Format[Format["RGB16UI"] = 30] = "RGB16UI";
              Format[Format["RGB16I"] = 31] = "RGB16I";
              Format[Format["RGB32F"] = 32] = "RGB32F";
              Format[Format["RGB32UI"] = 33] = "RGB32UI";
              Format[Format["RGB32I"] = 34] = "RGB32I";
              Format[Format["RGBA8"] = 35] = "RGBA8";
              Format[Format["BGRA8"] = 36] = "BGRA8";
              Format[Format["SRGB8_A8"] = 37] = "SRGB8_A8";
              Format[Format["RGBA8SN"] = 38] = "RGBA8SN";
              Format[Format["RGBA8UI"] = 39] = "RGBA8UI";
              Format[Format["RGBA8I"] = 40] = "RGBA8I";
              Format[Format["RGBA16F"] = 41] = "RGBA16F";
              Format[Format["RGBA16UI"] = 42] = "RGBA16UI";
              Format[Format["RGBA16I"] = 43] = "RGBA16I";
              Format[Format["RGBA32F"] = 44] = "RGBA32F";
              Format[Format["RGBA32UI"] = 45] = "RGBA32UI";
              Format[Format["RGBA32I"] = 46] = "RGBA32I";
              Format[Format["R5G6B5"] = 47] = "R5G6B5";
              Format[Format["R11G11B10F"] = 48] = "R11G11B10F";
              Format[Format["RGB5A1"] = 49] = "RGB5A1";
              Format[Format["RGBA4"] = 50] = "RGBA4";
              Format[Format["RGB10A2"] = 51] = "RGB10A2";
              Format[Format["RGB10A2UI"] = 52] = "RGB10A2UI";
              Format[Format["RGB9E5"] = 53] = "RGB9E5";
              Format[Format["D16"] = 54] = "D16";
              Format[Format["D16S8"] = 55] = "D16S8";
              Format[Format["D24"] = 56] = "D24";
              Format[Format["D24S8"] = 57] = "D24S8";
              Format[Format["D32F"] = 58] = "D32F";
              Format[Format["D32F_S8"] = 59] = "D32F_S8";
              Format[Format["BC1"] = 60] = "BC1";
              Format[Format["BC1_ALPHA"] = 61] = "BC1_ALPHA";
              Format[Format["BC1_SRGB"] = 62] = "BC1_SRGB";
              Format[Format["BC1_SRGB_ALPHA"] = 63] = "BC1_SRGB_ALPHA";
              Format[Format["BC2"] = 64] = "BC2";
              Format[Format["BC2_SRGB"] = 65] = "BC2_SRGB";
              Format[Format["BC3"] = 66] = "BC3";
              Format[Format["BC3_SRGB"] = 67] = "BC3_SRGB";
              Format[Format["BC4"] = 68] = "BC4";
              Format[Format["BC4_SNORM"] = 69] = "BC4_SNORM";
              Format[Format["BC5"] = 70] = "BC5";
              Format[Format["BC5_SNORM"] = 71] = "BC5_SNORM";
              Format[Format["BC6H_UF16"] = 72] = "BC6H_UF16";
              Format[Format["BC6H_SF16"] = 73] = "BC6H_SF16";
              Format[Format["BC7"] = 74] = "BC7";
              Format[Format["BC7_SRGB"] = 75] = "BC7_SRGB";
              Format[Format["ETC_RGB8"] = 76] = "ETC_RGB8";
              Format[Format["ETC2_RGB8"] = 77] = "ETC2_RGB8";
              Format[Format["ETC2_SRGB8"] = 78] = "ETC2_SRGB8";
              Format[Format["ETC2_RGB8_A1"] = 79] = "ETC2_RGB8_A1";
              Format[Format["ETC2_SRGB8_A1"] = 80] = "ETC2_SRGB8_A1";
              Format[Format["ETC2_RGBA8"] = 81] = "ETC2_RGBA8";
              Format[Format["ETC2_SRGB8_A8"] = 82] = "ETC2_SRGB8_A8";
              Format[Format["EAC_R11"] = 83] = "EAC_R11";
              Format[Format["EAC_R11SN"] = 84] = "EAC_R11SN";
              Format[Format["EAC_RG11"] = 85] = "EAC_RG11";
              Format[Format["EAC_RG11SN"] = 86] = "EAC_RG11SN";
              Format[Format["PVRTC_RGB2"] = 87] = "PVRTC_RGB2";
              Format[Format["PVRTC_RGBA2"] = 88] = "PVRTC_RGBA2";
              Format[Format["PVRTC_RGB4"] = 89] = "PVRTC_RGB4";
              Format[Format["PVRTC_RGBA4"] = 90] = "PVRTC_RGBA4";
              Format[Format["PVRTC2_2BPP"] = 91] = "PVRTC2_2BPP";
              Format[Format["PVRTC2_4BPP"] = 92] = "PVRTC2_4BPP";
              Format[Format["ASTC_RGBA_4x4"] = 93] = "ASTC_RGBA_4x4";
              Format[Format["ASTC_RGBA_5x4"] = 94] = "ASTC_RGBA_5x4";
              Format[Format["ASTC_RGBA_5x5"] = 95] = "ASTC_RGBA_5x5";
              Format[Format["ASTC_RGBA_6x5"] = 96] = "ASTC_RGBA_6x5";
              Format[Format["ASTC_RGBA_6x6"] = 97] = "ASTC_RGBA_6x6";
              Format[Format["ASTC_RGBA_8x5"] = 98] = "ASTC_RGBA_8x5";
              Format[Format["ASTC_RGBA_8x6"] = 99] = "ASTC_RGBA_8x6";
              Format[Format["ASTC_RGBA_8x8"] = 100] = "ASTC_RGBA_8x8";
              Format[Format["ASTC_RGBA_10x5"] = 101] = "ASTC_RGBA_10x5";
              Format[Format["ASTC_RGBA_10x6"] = 102] = "ASTC_RGBA_10x6";
              Format[Format["ASTC_RGBA_10x8"] = 103] = "ASTC_RGBA_10x8";
              Format[Format["ASTC_RGBA_10x10"] = 104] = "ASTC_RGBA_10x10";
              Format[Format["ASTC_RGBA_12x10"] = 105] = "ASTC_RGBA_12x10";
              Format[Format["ASTC_RGBA_12x12"] = 106] = "ASTC_RGBA_12x12";
              Format[Format["ASTC_SRGBA_4x4"] = 107] = "ASTC_SRGBA_4x4";
              Format[Format["ASTC_SRGBA_5x4"] = 108] = "ASTC_SRGBA_5x4";
              Format[Format["ASTC_SRGBA_5x5"] = 109] = "ASTC_SRGBA_5x5";
              Format[Format["ASTC_SRGBA_6x5"] = 110] = "ASTC_SRGBA_6x5";
              Format[Format["ASTC_SRGBA_6x6"] = 111] = "ASTC_SRGBA_6x6";
              Format[Format["ASTC_SRGBA_8x5"] = 112] = "ASTC_SRGBA_8x5";
              Format[Format["ASTC_SRGBA_8x6"] = 113] = "ASTC_SRGBA_8x6";
              Format[Format["ASTC_SRGBA_8x8"] = 114] = "ASTC_SRGBA_8x8";
              Format[Format["ASTC_SRGBA_10x5"] = 115] = "ASTC_SRGBA_10x5";
              Format[Format["ASTC_SRGBA_10x6"] = 116] = "ASTC_SRGBA_10x6";
              Format[Format["ASTC_SRGBA_10x8"] = 117] = "ASTC_SRGBA_10x8";
              Format[Format["ASTC_SRGBA_10x10"] = 118] = "ASTC_SRGBA_10x10";
              Format[Format["ASTC_SRGBA_12x10"] = 119] = "ASTC_SRGBA_12x10";
              Format[Format["ASTC_SRGBA_12x12"] = 120] = "ASTC_SRGBA_12x12";
              Format[Format["COUNT"] = 121] = "COUNT";
            })(Format || (Format = exports('i', {})));

            let FormatType;

            (function (FormatType) {
              FormatType[FormatType["NONE"] = 0] = "NONE";
              FormatType[FormatType["UNORM"] = 1] = "UNORM";
              FormatType[FormatType["SNORM"] = 2] = "SNORM";
              FormatType[FormatType["UINT"] = 3] = "UINT";
              FormatType[FormatType["INT"] = 4] = "INT";
              FormatType[FormatType["UFLOAT"] = 5] = "UFLOAT";
              FormatType[FormatType["FLOAT"] = 6] = "FLOAT";
            })(FormatType || (FormatType = exports('j', {})));

            let Type;

            (function (Type) {
              Type[Type["UNKNOWN"] = 0] = "UNKNOWN";
              Type[Type["BOOL"] = 1] = "BOOL";
              Type[Type["BOOL2"] = 2] = "BOOL2";
              Type[Type["BOOL3"] = 3] = "BOOL3";
              Type[Type["BOOL4"] = 4] = "BOOL4";
              Type[Type["INT"] = 5] = "INT";
              Type[Type["INT2"] = 6] = "INT2";
              Type[Type["INT3"] = 7] = "INT3";
              Type[Type["INT4"] = 8] = "INT4";
              Type[Type["UINT"] = 9] = "UINT";
              Type[Type["UINT2"] = 10] = "UINT2";
              Type[Type["UINT3"] = 11] = "UINT3";
              Type[Type["UINT4"] = 12] = "UINT4";
              Type[Type["FLOAT"] = 13] = "FLOAT";
              Type[Type["FLOAT2"] = 14] = "FLOAT2";
              Type[Type["FLOAT3"] = 15] = "FLOAT3";
              Type[Type["FLOAT4"] = 16] = "FLOAT4";
              Type[Type["MAT2"] = 17] = "MAT2";
              Type[Type["MAT2X3"] = 18] = "MAT2X3";
              Type[Type["MAT2X4"] = 19] = "MAT2X4";
              Type[Type["MAT3X2"] = 20] = "MAT3X2";
              Type[Type["MAT3"] = 21] = "MAT3";
              Type[Type["MAT3X4"] = 22] = "MAT3X4";
              Type[Type["MAT4X2"] = 23] = "MAT4X2";
              Type[Type["MAT4X3"] = 24] = "MAT4X3";
              Type[Type["MAT4"] = 25] = "MAT4";
              Type[Type["SAMPLER1D"] = 26] = "SAMPLER1D";
              Type[Type["SAMPLER1D_ARRAY"] = 27] = "SAMPLER1D_ARRAY";
              Type[Type["SAMPLER2D"] = 28] = "SAMPLER2D";
              Type[Type["SAMPLER2D_ARRAY"] = 29] = "SAMPLER2D_ARRAY";
              Type[Type["SAMPLER3D"] = 30] = "SAMPLER3D";
              Type[Type["SAMPLER_CUBE"] = 31] = "SAMPLER_CUBE";
              Type[Type["SAMPLER"] = 32] = "SAMPLER";
              Type[Type["TEXTURE1D"] = 33] = "TEXTURE1D";
              Type[Type["TEXTURE1D_ARRAY"] = 34] = "TEXTURE1D_ARRAY";
              Type[Type["TEXTURE2D"] = 35] = "TEXTURE2D";
              Type[Type["TEXTURE2D_ARRAY"] = 36] = "TEXTURE2D_ARRAY";
              Type[Type["TEXTURE3D"] = 37] = "TEXTURE3D";
              Type[Type["TEXTURE_CUBE"] = 38] = "TEXTURE_CUBE";
              Type[Type["IMAGE1D"] = 39] = "IMAGE1D";
              Type[Type["IMAGE1D_ARRAY"] = 40] = "IMAGE1D_ARRAY";
              Type[Type["IMAGE2D"] = 41] = "IMAGE2D";
              Type[Type["IMAGE2D_ARRAY"] = 42] = "IMAGE2D_ARRAY";
              Type[Type["IMAGE3D"] = 43] = "IMAGE3D";
              Type[Type["IMAGE_CUBE"] = 44] = "IMAGE_CUBE";
              Type[Type["SUBPASS_INPUT"] = 45] = "SUBPASS_INPUT";
              Type[Type["COUNT"] = 46] = "COUNT";
            })(Type || (Type = exports('k', {})));

            let BufferUsageBit;

            (function (BufferUsageBit) {
              BufferUsageBit[BufferUsageBit["NONE"] = 0] = "NONE";
              BufferUsageBit[BufferUsageBit["TRANSFER_SRC"] = 1] = "TRANSFER_SRC";
              BufferUsageBit[BufferUsageBit["TRANSFER_DST"] = 2] = "TRANSFER_DST";
              BufferUsageBit[BufferUsageBit["INDEX"] = 4] = "INDEX";
              BufferUsageBit[BufferUsageBit["VERTEX"] = 8] = "VERTEX";
              BufferUsageBit[BufferUsageBit["UNIFORM"] = 16] = "UNIFORM";
              BufferUsageBit[BufferUsageBit["STORAGE"] = 32] = "STORAGE";
              BufferUsageBit[BufferUsageBit["INDIRECT"] = 64] = "INDIRECT";
            })(BufferUsageBit || (BufferUsageBit = exports('B', {})));

            let BufferFlagBit;

            (function (BufferFlagBit) {
              BufferFlagBit[BufferFlagBit["NONE"] = 0] = "NONE";
            })(BufferFlagBit || (BufferFlagBit = exports('c', {})));

            let MemoryAccessBit;

            (function (MemoryAccessBit) {
              MemoryAccessBit[MemoryAccessBit["NONE"] = 0] = "NONE";
              MemoryAccessBit[MemoryAccessBit["READ_ONLY"] = 1] = "READ_ONLY";
              MemoryAccessBit[MemoryAccessBit["WRITE_ONLY"] = 2] = "WRITE_ONLY";
              MemoryAccessBit[MemoryAccessBit["READ_WRITE"] = 3] = "READ_WRITE";
            })(MemoryAccessBit || (MemoryAccessBit = exports('l', {})));

            let MemoryUsageBit;

            (function (MemoryUsageBit) {
              MemoryUsageBit[MemoryUsageBit["NONE"] = 0] = "NONE";
              MemoryUsageBit[MemoryUsageBit["DEVICE"] = 1] = "DEVICE";
              MemoryUsageBit[MemoryUsageBit["HOST"] = 2] = "HOST";
            })(MemoryUsageBit || (MemoryUsageBit = exports('M', {})));

            let TextureType;

            (function (TextureType) {
              TextureType[TextureType["TEX1D"] = 0] = "TEX1D";
              TextureType[TextureType["TEX2D"] = 1] = "TEX2D";
              TextureType[TextureType["TEX3D"] = 2] = "TEX3D";
              TextureType[TextureType["CUBE"] = 3] = "CUBE";
              TextureType[TextureType["TEX1D_ARRAY"] = 4] = "TEX1D_ARRAY";
              TextureType[TextureType["TEX2D_ARRAY"] = 5] = "TEX2D_ARRAY";
            })(TextureType || (TextureType = exports('n', {})));

            let TextureUsageBit;

            (function (TextureUsageBit) {
              TextureUsageBit[TextureUsageBit["NONE"] = 0] = "NONE";
              TextureUsageBit[TextureUsageBit["TRANSFER_SRC"] = 1] = "TRANSFER_SRC";
              TextureUsageBit[TextureUsageBit["TRANSFER_DST"] = 2] = "TRANSFER_DST";
              TextureUsageBit[TextureUsageBit["SAMPLED"] = 4] = "SAMPLED";
              TextureUsageBit[TextureUsageBit["STORAGE"] = 8] = "STORAGE";
              TextureUsageBit[TextureUsageBit["COLOR_ATTACHMENT"] = 16] = "COLOR_ATTACHMENT";
              TextureUsageBit[TextureUsageBit["DEPTH_STENCIL_ATTACHMENT"] = 32] = "DEPTH_STENCIL_ATTACHMENT";
              TextureUsageBit[TextureUsageBit["TRANSIENT_ATTACHMENT"] = 64] = "TRANSIENT_ATTACHMENT";
              TextureUsageBit[TextureUsageBit["INPUT_ATTACHMENT"] = 128] = "INPUT_ATTACHMENT";
            })(TextureUsageBit || (TextureUsageBit = exports('o', {})));

            let TextureFlagBit;

            (function (TextureFlagBit) {
              TextureFlagBit[TextureFlagBit["NONE"] = 0] = "NONE";
              TextureFlagBit[TextureFlagBit["GEN_MIPMAP"] = 1] = "GEN_MIPMAP";
              TextureFlagBit[TextureFlagBit["IMMUTABLE"] = 2] = "IMMUTABLE";
            })(TextureFlagBit || (TextureFlagBit = exports('p', {})));

            let SampleCount;

            (function (SampleCount) {
              SampleCount[SampleCount["X1"] = 0] = "X1";
              SampleCount[SampleCount["X2"] = 1] = "X2";
              SampleCount[SampleCount["X4"] = 2] = "X4";
              SampleCount[SampleCount["X8"] = 3] = "X8";
              SampleCount[SampleCount["X16"] = 4] = "X16";
              SampleCount[SampleCount["X32"] = 5] = "X32";
              SampleCount[SampleCount["X64"] = 6] = "X64";
            })(SampleCount || (SampleCount = exports('q', {})));

            let Filter;

            (function (Filter) {
              Filter[Filter["NONE"] = 0] = "NONE";
              Filter[Filter["POINT"] = 1] = "POINT";
              Filter[Filter["LINEAR"] = 2] = "LINEAR";
              Filter[Filter["ANISOTROPIC"] = 3] = "ANISOTROPIC";
            })(Filter || (Filter = exports('F', {})));

            let Address;

            (function (Address) {
              Address[Address["WRAP"] = 0] = "WRAP";
              Address[Address["MIRROR"] = 1] = "MIRROR";
              Address[Address["CLAMP"] = 2] = "CLAMP";
              Address[Address["BORDER"] = 3] = "BORDER";
            })(Address || (Address = exports('A', {})));

            let ComparisonFunc;

            (function (ComparisonFunc) {
              ComparisonFunc[ComparisonFunc["NEVER"] = 0] = "NEVER";
              ComparisonFunc[ComparisonFunc["LESS"] = 1] = "LESS";
              ComparisonFunc[ComparisonFunc["EQUAL"] = 2] = "EQUAL";
              ComparisonFunc[ComparisonFunc["LESS_EQUAL"] = 3] = "LESS_EQUAL";
              ComparisonFunc[ComparisonFunc["GREATER"] = 4] = "GREATER";
              ComparisonFunc[ComparisonFunc["NOT_EQUAL"] = 5] = "NOT_EQUAL";
              ComparisonFunc[ComparisonFunc["GREATER_EQUAL"] = 6] = "GREATER_EQUAL";
              ComparisonFunc[ComparisonFunc["ALWAYS"] = 7] = "ALWAYS";
            })(ComparisonFunc || (ComparisonFunc = exports('d', {})));

            let StencilOp;

            (function (StencilOp) {
              StencilOp[StencilOp["ZERO"] = 0] = "ZERO";
              StencilOp[StencilOp["KEEP"] = 1] = "KEEP";
              StencilOp[StencilOp["REPLACE"] = 2] = "REPLACE";
              StencilOp[StencilOp["INCR"] = 3] = "INCR";
              StencilOp[StencilOp["DECR"] = 4] = "DECR";
              StencilOp[StencilOp["INVERT"] = 5] = "INVERT";
              StencilOp[StencilOp["INCR_WRAP"] = 6] = "INCR_WRAP";
              StencilOp[StencilOp["DECR_WRAP"] = 7] = "DECR_WRAP";
            })(StencilOp || (StencilOp = exports('r', {})));

            let BlendFactor;

            (function (BlendFactor) {
              BlendFactor[BlendFactor["ZERO"] = 0] = "ZERO";
              BlendFactor[BlendFactor["ONE"] = 1] = "ONE";
              BlendFactor[BlendFactor["SRC_ALPHA"] = 2] = "SRC_ALPHA";
              BlendFactor[BlendFactor["DST_ALPHA"] = 3] = "DST_ALPHA";
              BlendFactor[BlendFactor["ONE_MINUS_SRC_ALPHA"] = 4] = "ONE_MINUS_SRC_ALPHA";
              BlendFactor[BlendFactor["ONE_MINUS_DST_ALPHA"] = 5] = "ONE_MINUS_DST_ALPHA";
              BlendFactor[BlendFactor["SRC_COLOR"] = 6] = "SRC_COLOR";
              BlendFactor[BlendFactor["DST_COLOR"] = 7] = "DST_COLOR";
              BlendFactor[BlendFactor["ONE_MINUS_SRC_COLOR"] = 8] = "ONE_MINUS_SRC_COLOR";
              BlendFactor[BlendFactor["ONE_MINUS_DST_COLOR"] = 9] = "ONE_MINUS_DST_COLOR";
              BlendFactor[BlendFactor["SRC_ALPHA_SATURATE"] = 10] = "SRC_ALPHA_SATURATE";
              BlendFactor[BlendFactor["CONSTANT_COLOR"] = 11] = "CONSTANT_COLOR";
              BlendFactor[BlendFactor["ONE_MINUS_CONSTANT_COLOR"] = 12] = "ONE_MINUS_CONSTANT_COLOR";
              BlendFactor[BlendFactor["CONSTANT_ALPHA"] = 13] = "CONSTANT_ALPHA";
              BlendFactor[BlendFactor["ONE_MINUS_CONSTANT_ALPHA"] = 14] = "ONE_MINUS_CONSTANT_ALPHA";
            })(BlendFactor || (BlendFactor = exports('s', {})));

            let BlendOp;

            (function (BlendOp) {
              BlendOp[BlendOp["ADD"] = 0] = "ADD";
              BlendOp[BlendOp["SUB"] = 1] = "SUB";
              BlendOp[BlendOp["REV_SUB"] = 2] = "REV_SUB";
              BlendOp[BlendOp["MIN"] = 3] = "MIN";
              BlendOp[BlendOp["MAX"] = 4] = "MAX";
            })(BlendOp || (BlendOp = exports('t', {})));

            let ColorMask;

            (function (ColorMask) {
              ColorMask[ColorMask["NONE"] = 0] = "NONE";
              ColorMask[ColorMask["R"] = 1] = "R";
              ColorMask[ColorMask["G"] = 2] = "G";
              ColorMask[ColorMask["B"] = 4] = "B";
              ColorMask[ColorMask["A"] = 8] = "A";
              ColorMask[ColorMask["ALL"] = 15] = "ALL";
            })(ColorMask || (ColorMask = exports('u', {})));

            let ShaderStageFlagBit;

            (function (ShaderStageFlagBit) {
              ShaderStageFlagBit[ShaderStageFlagBit["NONE"] = 0] = "NONE";
              ShaderStageFlagBit[ShaderStageFlagBit["VERTEX"] = 1] = "VERTEX";
              ShaderStageFlagBit[ShaderStageFlagBit["CONTROL"] = 2] = "CONTROL";
              ShaderStageFlagBit[ShaderStageFlagBit["EVALUATION"] = 4] = "EVALUATION";
              ShaderStageFlagBit[ShaderStageFlagBit["GEOMETRY"] = 8] = "GEOMETRY";
              ShaderStageFlagBit[ShaderStageFlagBit["FRAGMENT"] = 16] = "FRAGMENT";
              ShaderStageFlagBit[ShaderStageFlagBit["COMPUTE"] = 32] = "COMPUTE";
              ShaderStageFlagBit[ShaderStageFlagBit["ALL"] = 63] = "ALL";
            })(ShaderStageFlagBit || (ShaderStageFlagBit = exports('v', {})));

            let LoadOp;

            (function (LoadOp) {
              LoadOp[LoadOp["LOAD"] = 0] = "LOAD";
              LoadOp[LoadOp["CLEAR"] = 1] = "CLEAR";
              LoadOp[LoadOp["DISCARD"] = 2] = "DISCARD";
            })(LoadOp || (LoadOp = exports('L', {})));

            let StoreOp;

            (function (StoreOp) {
              StoreOp[StoreOp["STORE"] = 0] = "STORE";
              StoreOp[StoreOp["DISCARD"] = 1] = "DISCARD";
            })(StoreOp || (StoreOp = exports('w', {})));

            let AccessType;

            (function (AccessType) {
              AccessType[AccessType["NONE"] = 0] = "NONE";
              AccessType[AccessType["INDIRECT_BUFFER"] = 1] = "INDIRECT_BUFFER";
              AccessType[AccessType["INDEX_BUFFER"] = 2] = "INDEX_BUFFER";
              AccessType[AccessType["VERTEX_BUFFER"] = 3] = "VERTEX_BUFFER";
              AccessType[AccessType["VERTEX_SHADER_READ_UNIFORM_BUFFER"] = 4] = "VERTEX_SHADER_READ_UNIFORM_BUFFER";
              AccessType[AccessType["VERTEX_SHADER_READ_TEXTURE"] = 5] = "VERTEX_SHADER_READ_TEXTURE";
              AccessType[AccessType["VERTEX_SHADER_READ_OTHER"] = 6] = "VERTEX_SHADER_READ_OTHER";
              AccessType[AccessType["FRAGMENT_SHADER_READ_UNIFORM_BUFFER"] = 7] = "FRAGMENT_SHADER_READ_UNIFORM_BUFFER";
              AccessType[AccessType["FRAGMENT_SHADER_READ_TEXTURE"] = 8] = "FRAGMENT_SHADER_READ_TEXTURE";
              AccessType[AccessType["FRAGMENT_SHADER_READ_COLOR_INPUT_ATTACHMENT"] = 9] = "FRAGMENT_SHADER_READ_COLOR_INPUT_ATTACHMENT";
              AccessType[AccessType["FRAGMENT_SHADER_READ_DEPTH_STENCIL_INPUT_ATTACHMENT"] = 10] = "FRAGMENT_SHADER_READ_DEPTH_STENCIL_INPUT_ATTACHMENT";
              AccessType[AccessType["FRAGMENT_SHADER_READ_OTHER"] = 11] = "FRAGMENT_SHADER_READ_OTHER";
              AccessType[AccessType["COLOR_ATTACHMENT_READ"] = 12] = "COLOR_ATTACHMENT_READ";
              AccessType[AccessType["DEPTH_STENCIL_ATTACHMENT_READ"] = 13] = "DEPTH_STENCIL_ATTACHMENT_READ";
              AccessType[AccessType["COMPUTE_SHADER_READ_UNIFORM_BUFFER"] = 14] = "COMPUTE_SHADER_READ_UNIFORM_BUFFER";
              AccessType[AccessType["COMPUTE_SHADER_READ_TEXTURE"] = 15] = "COMPUTE_SHADER_READ_TEXTURE";
              AccessType[AccessType["COMPUTE_SHADER_READ_OTHER"] = 16] = "COMPUTE_SHADER_READ_OTHER";
              AccessType[AccessType["TRANSFER_READ"] = 17] = "TRANSFER_READ";
              AccessType[AccessType["HOST_READ"] = 18] = "HOST_READ";
              AccessType[AccessType["PRESENT"] = 19] = "PRESENT";
              AccessType[AccessType["VERTEX_SHADER_WRITE"] = 20] = "VERTEX_SHADER_WRITE";
              AccessType[AccessType["FRAGMENT_SHADER_WRITE"] = 21] = "FRAGMENT_SHADER_WRITE";
              AccessType[AccessType["COLOR_ATTACHMENT_WRITE"] = 22] = "COLOR_ATTACHMENT_WRITE";
              AccessType[AccessType["DEPTH_STENCIL_ATTACHMENT_WRITE"] = 23] = "DEPTH_STENCIL_ATTACHMENT_WRITE";
              AccessType[AccessType["COMPUTE_SHADER_WRITE"] = 24] = "COMPUTE_SHADER_WRITE";
              AccessType[AccessType["TRANSFER_WRITE"] = 25] = "TRANSFER_WRITE";
              AccessType[AccessType["HOST_PREINITIALIZED"] = 26] = "HOST_PREINITIALIZED";
              AccessType[AccessType["HOST_WRITE"] = 27] = "HOST_WRITE";
            })(AccessType || (AccessType = exports('x', {})));

            let PipelineBindPoint;

            (function (PipelineBindPoint) {
              PipelineBindPoint[PipelineBindPoint["GRAPHICS"] = 0] = "GRAPHICS";
              PipelineBindPoint[PipelineBindPoint["COMPUTE"] = 1] = "COMPUTE";
              PipelineBindPoint[PipelineBindPoint["RAY_TRACING"] = 2] = "RAY_TRACING";
            })(PipelineBindPoint || (PipelineBindPoint = exports('y', {})));

            let PrimitiveMode;

            (function (PrimitiveMode) {
              PrimitiveMode[PrimitiveMode["POINT_LIST"] = 0] = "POINT_LIST";
              PrimitiveMode[PrimitiveMode["LINE_LIST"] = 1] = "LINE_LIST";
              PrimitiveMode[PrimitiveMode["LINE_STRIP"] = 2] = "LINE_STRIP";
              PrimitiveMode[PrimitiveMode["LINE_LOOP"] = 3] = "LINE_LOOP";
              PrimitiveMode[PrimitiveMode["LINE_LIST_ADJACENCY"] = 4] = "LINE_LIST_ADJACENCY";
              PrimitiveMode[PrimitiveMode["LINE_STRIP_ADJACENCY"] = 5] = "LINE_STRIP_ADJACENCY";
              PrimitiveMode[PrimitiveMode["ISO_LINE_LIST"] = 6] = "ISO_LINE_LIST";
              PrimitiveMode[PrimitiveMode["TRIANGLE_LIST"] = 7] = "TRIANGLE_LIST";
              PrimitiveMode[PrimitiveMode["TRIANGLE_STRIP"] = 8] = "TRIANGLE_STRIP";
              PrimitiveMode[PrimitiveMode["TRIANGLE_FAN"] = 9] = "TRIANGLE_FAN";
              PrimitiveMode[PrimitiveMode["TRIANGLE_LIST_ADJACENCY"] = 10] = "TRIANGLE_LIST_ADJACENCY";
              PrimitiveMode[PrimitiveMode["TRIANGLE_STRIP_ADJACENCY"] = 11] = "TRIANGLE_STRIP_ADJACENCY";
              PrimitiveMode[PrimitiveMode["TRIANGLE_PATCH_ADJACENCY"] = 12] = "TRIANGLE_PATCH_ADJACENCY";
              PrimitiveMode[PrimitiveMode["QUAD_PATCH_LIST"] = 13] = "QUAD_PATCH_LIST";
            })(PrimitiveMode || (PrimitiveMode = exports('z', {})));

            let PolygonMode;

            (function (PolygonMode) {
              PolygonMode[PolygonMode["FILL"] = 0] = "FILL";
              PolygonMode[PolygonMode["POINT"] = 1] = "POINT";
              PolygonMode[PolygonMode["LINE"] = 2] = "LINE";
            })(PolygonMode || (PolygonMode = exports('E', {})));

            let ShadeModel;

            (function (ShadeModel) {
              ShadeModel[ShadeModel["GOURAND"] = 0] = "GOURAND";
              ShadeModel[ShadeModel["FLAT"] = 1] = "FLAT";
            })(ShadeModel || (ShadeModel = exports('H', {})));

            let CullMode;

            (function (CullMode) {
              CullMode[CullMode["NONE"] = 0] = "NONE";
              CullMode[CullMode["FRONT"] = 1] = "FRONT";
              CullMode[CullMode["BACK"] = 2] = "BACK";
            })(CullMode || (CullMode = exports('I', {})));

            let DynamicStateFlagBit;

            (function (DynamicStateFlagBit) {
              DynamicStateFlagBit[DynamicStateFlagBit["NONE"] = 0] = "NONE";
              DynamicStateFlagBit[DynamicStateFlagBit["VIEWPORT"] = 1] = "VIEWPORT";
              DynamicStateFlagBit[DynamicStateFlagBit["SCISSOR"] = 2] = "SCISSOR";
              DynamicStateFlagBit[DynamicStateFlagBit["LINE_WIDTH"] = 4] = "LINE_WIDTH";
              DynamicStateFlagBit[DynamicStateFlagBit["DEPTH_BIAS"] = 8] = "DEPTH_BIAS";
              DynamicStateFlagBit[DynamicStateFlagBit["BLEND_CONSTANTS"] = 16] = "BLEND_CONSTANTS";
              DynamicStateFlagBit[DynamicStateFlagBit["DEPTH_BOUNDS"] = 32] = "DEPTH_BOUNDS";
              DynamicStateFlagBit[DynamicStateFlagBit["STENCIL_WRITE_MASK"] = 64] = "STENCIL_WRITE_MASK";
              DynamicStateFlagBit[DynamicStateFlagBit["STENCIL_COMPARE_MASK"] = 128] = "STENCIL_COMPARE_MASK";
            })(DynamicStateFlagBit || (DynamicStateFlagBit = exports('J', {})));

            let StencilFace;

            (function (StencilFace) {
              StencilFace[StencilFace["FRONT"] = 0] = "FRONT";
              StencilFace[StencilFace["BACK"] = 1] = "BACK";
              StencilFace[StencilFace["ALL"] = 2] = "ALL";
            })(StencilFace || (StencilFace = exports('K', {})));

            let DescriptorType;

            (function (DescriptorType) {
              DescriptorType[DescriptorType["UNKNOWN"] = 0] = "UNKNOWN";
              DescriptorType[DescriptorType["UNIFORM_BUFFER"] = 1] = "UNIFORM_BUFFER";
              DescriptorType[DescriptorType["DYNAMIC_UNIFORM_BUFFER"] = 2] = "DYNAMIC_UNIFORM_BUFFER";
              DescriptorType[DescriptorType["STORAGE_BUFFER"] = 4] = "STORAGE_BUFFER";
              DescriptorType[DescriptorType["DYNAMIC_STORAGE_BUFFER"] = 8] = "DYNAMIC_STORAGE_BUFFER";
              DescriptorType[DescriptorType["SAMPLER_TEXTURE"] = 16] = "SAMPLER_TEXTURE";
              DescriptorType[DescriptorType["SAMPLER"] = 32] = "SAMPLER";
              DescriptorType[DescriptorType["TEXTURE"] = 64] = "TEXTURE";
              DescriptorType[DescriptorType["STORAGE_IMAGE"] = 128] = "STORAGE_IMAGE";
              DescriptorType[DescriptorType["INPUT_ATTACHMENT"] = 256] = "INPUT_ATTACHMENT";
            })(DescriptorType || (DescriptorType = exports('N', {})));

            let QueueType;

            (function (QueueType) {
              QueueType[QueueType["GRAPHICS"] = 0] = "GRAPHICS";
              QueueType[QueueType["COMPUTE"] = 1] = "COMPUTE";
              QueueType[QueueType["TRANSFER"] = 2] = "TRANSFER";
            })(QueueType || (QueueType = exports('Q', {})));

            let CommandBufferType;

            (function (CommandBufferType) {
              CommandBufferType[CommandBufferType["PRIMARY"] = 0] = "PRIMARY";
              CommandBufferType[CommandBufferType["SECONDARY"] = 1] = "SECONDARY";
            })(CommandBufferType || (CommandBufferType = exports('C', {})));

            let ClearFlagBit;

            (function (ClearFlagBit) {
              ClearFlagBit[ClearFlagBit["NONE"] = 0] = "NONE";
              ClearFlagBit[ClearFlagBit["COLOR"] = 1] = "COLOR";
              ClearFlagBit[ClearFlagBit["DEPTH"] = 2] = "DEPTH";
              ClearFlagBit[ClearFlagBit["STENCIL"] = 4] = "STENCIL";
              ClearFlagBit[ClearFlagBit["DEPTH_STENCIL"] = 6] = "DEPTH_STENCIL";
              ClearFlagBit[ClearFlagBit["ALL"] = 7] = "ALL";
            })(ClearFlagBit || (ClearFlagBit = exports('R', {})));

            class Size$1 {
              constructor(x = 0, y = 0, z = 0) {
                this.x = x;
                this.y = y;
                this.z = z;
              }

              copy(info) {
                this.x = info.x;
                this.y = info.y;
                this.z = info.z;
                return this;
              }

            } exports('U', Size$1);
            class DeviceCaps {
              constructor(maxVertexAttributes = 0, maxVertexUniformVectors = 0, maxFragmentUniformVectors = 0, maxTextureUnits = 0, maxImageUnits = 0, maxVertexTextureUnits = 0, maxColorRenderTargets = 0, maxShaderStorageBufferBindings = 0, maxShaderStorageBlockSize = 0, maxUniformBufferBindings = 0, maxUniformBlockSize = 0, maxTextureSize = 0, maxCubeMapTextureSize = 0, depthBits = 0, stencilBits = 0, uboOffsetAlignment = 1, maxComputeSharedMemorySize = 0, maxComputeWorkGroupInvocations = 0, maxComputeWorkGroupSize = new Size$1(), maxComputeWorkGroupCount = new Size$1(), clipSpaceMinZ = -1, screenSpaceSignY = 1, clipSpaceSignY = 1) {
                this.maxVertexAttributes = maxVertexAttributes;
                this.maxVertexUniformVectors = maxVertexUniformVectors;
                this.maxFragmentUniformVectors = maxFragmentUniformVectors;
                this.maxTextureUnits = maxTextureUnits;
                this.maxImageUnits = maxImageUnits;
                this.maxVertexTextureUnits = maxVertexTextureUnits;
                this.maxColorRenderTargets = maxColorRenderTargets;
                this.maxShaderStorageBufferBindings = maxShaderStorageBufferBindings;
                this.maxShaderStorageBlockSize = maxShaderStorageBlockSize;
                this.maxUniformBufferBindings = maxUniformBufferBindings;
                this.maxUniformBlockSize = maxUniformBlockSize;
                this.maxTextureSize = maxTextureSize;
                this.maxCubeMapTextureSize = maxCubeMapTextureSize;
                this.depthBits = depthBits;
                this.stencilBits = stencilBits;
                this.uboOffsetAlignment = uboOffsetAlignment;
                this.maxComputeSharedMemorySize = maxComputeSharedMemorySize;
                this.maxComputeWorkGroupInvocations = maxComputeWorkGroupInvocations;
                this.maxComputeWorkGroupSize = maxComputeWorkGroupSize;
                this.maxComputeWorkGroupCount = maxComputeWorkGroupCount;
                this.clipSpaceMinZ = clipSpaceMinZ;
                this.screenSpaceSignY = screenSpaceSignY;
                this.clipSpaceSignY = clipSpaceSignY;
              }

              copy(info) {
                this.maxVertexAttributes = info.maxVertexAttributes;
                this.maxVertexUniformVectors = info.maxVertexUniformVectors;
                this.maxFragmentUniformVectors = info.maxFragmentUniformVectors;
                this.maxTextureUnits = info.maxTextureUnits;
                this.maxImageUnits = info.maxImageUnits;
                this.maxVertexTextureUnits = info.maxVertexTextureUnits;
                this.maxColorRenderTargets = info.maxColorRenderTargets;
                this.maxShaderStorageBufferBindings = info.maxShaderStorageBufferBindings;
                this.maxShaderStorageBlockSize = info.maxShaderStorageBlockSize;
                this.maxUniformBufferBindings = info.maxUniformBufferBindings;
                this.maxUniformBlockSize = info.maxUniformBlockSize;
                this.maxTextureSize = info.maxTextureSize;
                this.maxCubeMapTextureSize = info.maxCubeMapTextureSize;
                this.depthBits = info.depthBits;
                this.stencilBits = info.stencilBits;
                this.uboOffsetAlignment = info.uboOffsetAlignment;
                this.maxComputeSharedMemorySize = info.maxComputeSharedMemorySize;
                this.maxComputeWorkGroupInvocations = info.maxComputeWorkGroupInvocations;
                this.maxComputeWorkGroupSize.copy(info.maxComputeWorkGroupSize);
                this.maxComputeWorkGroupCount.copy(info.maxComputeWorkGroupCount);
                this.clipSpaceMinZ = info.clipSpaceMinZ;
                this.screenSpaceSignY = info.screenSpaceSignY;
                this.clipSpaceSignY = info.clipSpaceSignY;
                return this;
              }

            } exports('V', DeviceCaps);
            class Offset {
              constructor(x = 0, y = 0, z = 0) {
                this.x = x;
                this.y = y;
                this.z = z;
              }

              copy(info) {
                this.x = info.x;
                this.y = info.y;
                this.z = info.z;
                return this;
              }

            } exports('W', Offset);
            class Rect$1 {
              constructor(x = 0, y = 0, width = 0, height = 0) {
                this.x = x;
                this.y = y;
                this.width = width;
                this.height = height;
              }

              copy(info) {
                this.x = info.x;
                this.y = info.y;
                this.width = info.width;
                this.height = info.height;
                return this;
              }

            } exports('X', Rect$1);
            class Extent {
              constructor(width = 0, height = 0, depth = 1) {
                this.width = width;
                this.height = height;
                this.depth = depth;
              }

              copy(info) {
                this.width = info.width;
                this.height = info.height;
                this.depth = info.depth;
                return this;
              }

            } exports('Y', Extent);
            class TextureSubresLayers {
              constructor(mipLevel = 0, baseArrayLayer = 0, layerCount = 1) {
                this.mipLevel = mipLevel;
                this.baseArrayLayer = baseArrayLayer;
                this.layerCount = layerCount;
              }

              copy(info) {
                this.mipLevel = info.mipLevel;
                this.baseArrayLayer = info.baseArrayLayer;
                this.layerCount = info.layerCount;
                return this;
              }

            } exports('Z', TextureSubresLayers);
            class TextureSubresRange {
              constructor(baseMipLevel = 0, levelCount = 1, baseArrayLayer = 0, layerCount = 1) {
                this.baseMipLevel = baseMipLevel;
                this.levelCount = levelCount;
                this.baseArrayLayer = baseArrayLayer;
                this.layerCount = layerCount;
              }

              copy(info) {
                this.baseMipLevel = info.baseMipLevel;
                this.levelCount = info.levelCount;
                this.baseArrayLayer = info.baseArrayLayer;
                this.layerCount = info.layerCount;
                return this;
              }

            } exports('_', TextureSubresRange);
            class TextureCopy {
              constructor(srcSubres = new TextureSubresLayers(), srcOffset = new Offset(), dstSubres = new TextureSubresLayers(), dstOffset = new Offset(), extent = new Extent()) {
                this.srcSubres = srcSubres;
                this.srcOffset = srcOffset;
                this.dstSubres = dstSubres;
                this.dstOffset = dstOffset;
                this.extent = extent;
              }

              copy(info) {
                this.srcSubres.copy(info.srcSubres);
                this.srcOffset.copy(info.srcOffset);
                this.dstSubres.copy(info.dstSubres);
                this.dstOffset.copy(info.dstOffset);
                this.extent.copy(info.extent);
                return this;
              }

            } exports('$', TextureCopy);
            class TextureBlit {
              constructor(srcSubres = new TextureSubresLayers(), srcOffset = new Offset(), srcExtent = new Extent(), dstSubres = new TextureSubresLayers(), dstOffset = new Offset(), dstExtent = new Extent()) {
                this.srcSubres = srcSubres;
                this.srcOffset = srcOffset;
                this.srcExtent = srcExtent;
                this.dstSubres = dstSubres;
                this.dstOffset = dstOffset;
                this.dstExtent = dstExtent;
              }

              copy(info) {
                this.srcSubres.copy(info.srcSubres);
                this.srcOffset.copy(info.srcOffset);
                this.srcExtent.copy(info.srcExtent);
                this.dstSubres.copy(info.dstSubres);
                this.dstOffset.copy(info.dstOffset);
                this.dstExtent.copy(info.dstExtent);
                return this;
              }

            } exports('a0', TextureBlit);
            class BufferTextureCopy {
              constructor(buffStride = 0, buffTexHeight = 0, texOffset = new Offset(), texExtent = new Extent(), texSubres = new TextureSubresLayers()) {
                this.buffStride = buffStride;
                this.buffTexHeight = buffTexHeight;
                this.texOffset = texOffset;
                this.texExtent = texExtent;
                this.texSubres = texSubres;
              }

              copy(info) {
                this.buffStride = info.buffStride;
                this.buffTexHeight = info.buffTexHeight;
                this.texOffset.copy(info.texOffset);
                this.texExtent.copy(info.texExtent);
                this.texSubres.copy(info.texSubres);
                return this;
              }

            } exports('a1', BufferTextureCopy);
            class Viewport {
              constructor(left = 0, top = 0, width = 0, height = 0, minDepth = 0, maxDepth = 1) {
                this.left = left;
                this.top = top;
                this.width = width;
                this.height = height;
                this.minDepth = minDepth;
                this.maxDepth = maxDepth;
              }

              copy(info) {
                this.left = info.left;
                this.top = info.top;
                this.width = info.width;
                this.height = info.height;
                this.minDepth = info.minDepth;
                this.maxDepth = info.maxDepth;
                return this;
              }

            } exports('a2', Viewport);
            class Color$1 {
              constructor(x = 0, y = 0, z = 0, w = 0) {
                this.x = x;
                this.y = y;
                this.z = z;
                this.w = w;
              }

              copy(info) {
                this.x = info.x;
                this.y = info.y;
                this.z = info.z;
                this.w = info.w;
                return this;
              }

            } exports('e', Color$1);
            class BindingMappingInfo {
              constructor(bufferOffsets = [], samplerOffsets = [], flexibleSet = 0) {
                this.bufferOffsets = bufferOffsets;
                this.samplerOffsets = samplerOffsets;
                this.flexibleSet = flexibleSet;
              }

              copy(info) {
                this.bufferOffsets = info.bufferOffsets.slice();
                this.samplerOffsets = info.samplerOffsets.slice();
                this.flexibleSet = info.flexibleSet;
                return this;
              }

            } exports('a3', BindingMappingInfo);
            class BufferInfo {
              constructor(usage = BufferUsageBit.NONE, memUsage = MemoryUsageBit.NONE, size = 0, stride = 0, flags = BufferFlagBit.NONE) {
                this.usage = usage;
                this.memUsage = memUsage;
                this.size = size;
                this.stride = stride;
                this.flags = flags;
              }

              copy(info) {
                this.usage = info.usage;
                this.memUsage = info.memUsage;
                this.size = info.size;
                this.stride = info.stride;
                this.flags = info.flags;
                return this;
              }

            } exports('a4', BufferInfo);
            class BufferViewInfo {
              constructor(buffer = null, offset = 0, range = 0) {
                this.buffer = buffer;
                this.offset = offset;
                this.range = range;
              }

              copy(info) {
                this.buffer = info.buffer;
                this.offset = info.offset;
                this.range = info.range;
                return this;
              }

            } exports('a5', BufferViewInfo);
            class DrawInfo {
              constructor(vertexCount = 0, firstVertex = 0, indexCount = 0, firstIndex = 0, vertexOffset = 0, instanceCount = 0, firstInstance = 0) {
                this.vertexCount = vertexCount;
                this.firstVertex = firstVertex;
                this.indexCount = indexCount;
                this.firstIndex = firstIndex;
                this.vertexOffset = vertexOffset;
                this.instanceCount = instanceCount;
                this.firstInstance = firstInstance;
              }

              copy(info) {
                this.vertexCount = info.vertexCount;
                this.firstVertex = info.firstVertex;
                this.indexCount = info.indexCount;
                this.firstIndex = info.firstIndex;
                this.vertexOffset = info.vertexOffset;
                this.instanceCount = info.instanceCount;
                this.firstInstance = info.firstInstance;
                return this;
              }

            } exports('a6', DrawInfo);
            class DispatchInfo {
              constructor(groupCountX = 0, groupCountY = 0, groupCountZ = 0, indirectBuffer = null, indirectOffset = 0) {
                this.groupCountX = groupCountX;
                this.groupCountY = groupCountY;
                this.groupCountZ = groupCountZ;
                this.indirectBuffer = indirectBuffer;
                this.indirectOffset = indirectOffset;
              }

              copy(info) {
                this.groupCountX = info.groupCountX;
                this.groupCountY = info.groupCountY;
                this.groupCountZ = info.groupCountZ;
                this.indirectBuffer = info.indirectBuffer;
                this.indirectOffset = info.indirectOffset;
                return this;
              }

            } exports('a7', DispatchInfo);
            class IndirectBuffer {
              constructor(drawInfos = []) {
                this.drawInfos = drawInfos;
              }

              copy(info) {
                deepCopy(this.drawInfos, info.drawInfos, DrawInfo);
                return this;
              }

            } exports('a8', IndirectBuffer);
            class TextureInfo {
              constructor(type = TextureType.TEX2D, usage = TextureUsageBit.NONE, format = Format.UNKNOWN, width = 0, height = 0, flags = TextureFlagBit.NONE, layerCount = 1, levelCount = 1, samples = SampleCount.X1, depth = 1) {
                this.type = type;
                this.usage = usage;
                this.format = format;
                this.width = width;
                this.height = height;
                this.flags = flags;
                this.layerCount = layerCount;
                this.levelCount = levelCount;
                this.samples = samples;
                this.depth = depth;
              }

              copy(info) {
                this.type = info.type;
                this.usage = info.usage;
                this.format = info.format;
                this.width = info.width;
                this.height = info.height;
                this.flags = info.flags;
                this.layerCount = info.layerCount;
                this.levelCount = info.levelCount;
                this.samples = info.samples;
                this.depth = info.depth;
                return this;
              }

            } exports('a9', TextureInfo);
            class TextureViewInfo {
              constructor(texture = null, type = TextureType.TEX2D, format = Format.UNKNOWN, baseLevel = 0, levelCount = 1, baseLayer = 0, layerCount = 1) {
                this.texture = texture;
                this.type = type;
                this.format = format;
                this.baseLevel = baseLevel;
                this.levelCount = levelCount;
                this.baseLayer = baseLayer;
                this.layerCount = layerCount;
              }

              copy(info) {
                this.texture = info.texture;
                this.type = info.type;
                this.format = info.format;
                this.baseLevel = info.baseLevel;
                this.levelCount = info.levelCount;
                this.baseLayer = info.baseLayer;
                this.layerCount = info.layerCount;
                return this;
              }

            } exports('aa', TextureViewInfo);
            class SamplerInfo {
              constructor(minFilter = Filter.LINEAR, magFilter = Filter.LINEAR, mipFilter = Filter.NONE, addressU = Address.WRAP, addressV = Address.WRAP, addressW = Address.WRAP, maxAnisotropy = 0, cmpFunc = ComparisonFunc.ALWAYS, borderColor = new Color$1(), mipLODBias = 0) {
                this.minFilter = minFilter;
                this.magFilter = magFilter;
                this.mipFilter = mipFilter;
                this.addressU = addressU;
                this.addressV = addressV;
                this.addressW = addressW;
                this.maxAnisotropy = maxAnisotropy;
                this.cmpFunc = cmpFunc;
                this.borderColor = borderColor;
                this.mipLODBias = mipLODBias;
              }

              copy(info) {
                this.minFilter = info.minFilter;
                this.magFilter = info.magFilter;
                this.mipFilter = info.mipFilter;
                this.addressU = info.addressU;
                this.addressV = info.addressV;
                this.addressW = info.addressW;
                this.maxAnisotropy = info.maxAnisotropy;
                this.cmpFunc = info.cmpFunc;
                this.borderColor.copy(info.borderColor);
                this.mipLODBias = info.mipLODBias;
                return this;
              }

            } exports('ab', SamplerInfo);
            class Uniform {
              constructor(name = '', type = Type.UNKNOWN, count = 0) {
                this.name = name;
                this.type = type;
                this.count = count;
              }

              copy(info) {
                this.name = info.name;
                this.type = info.type;
                this.count = info.count;
                return this;
              }

            } exports('ac', Uniform);
            class UniformBlock {
              constructor(set = 0, binding = 0, name = '', members = [], count = 0) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.members = members;
                this.count = count;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                deepCopy(this.members, info.members, Uniform);
                this.count = info.count;
                return this;
              }

            } exports('ad', UniformBlock);
            class UniformSamplerTexture {
              constructor(set = 0, binding = 0, name = '', type = Type.UNKNOWN, count = 0) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.type = type;
                this.count = count;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.type = info.type;
                this.count = info.count;
                return this;
              }

            } exports('ae', UniformSamplerTexture);
            class UniformSampler {
              constructor(set = 0, binding = 0, name = '', count = 0) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.count = count;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.count = info.count;
                return this;
              }

            } exports('af', UniformSampler);
            class UniformTexture {
              constructor(set = 0, binding = 0, name = '', type = Type.UNKNOWN, count = 0) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.type = type;
                this.count = count;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.type = info.type;
                this.count = info.count;
                return this;
              }

            } exports('ag', UniformTexture);
            class UniformStorageImage {
              constructor(set = 0, binding = 0, name = '', type = Type.UNKNOWN, count = 0, memoryAccess = MemoryAccessBit.READ_WRITE) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.type = type;
                this.count = count;
                this.memoryAccess = memoryAccess;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.type = info.type;
                this.count = info.count;
                this.memoryAccess = info.memoryAccess;
                return this;
              }

            } exports('ah', UniformStorageImage);
            class UniformStorageBuffer {
              constructor(set = 0, binding = 0, name = '', count = 0, memoryAccess = MemoryAccessBit.READ_WRITE) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.count = count;
                this.memoryAccess = memoryAccess;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.count = info.count;
                this.memoryAccess = info.memoryAccess;
                return this;
              }

            } exports('ai', UniformStorageBuffer);
            class UniformInputAttachment {
              constructor(set = 0, binding = 0, name = '', count = 0) {
                this.set = set;
                this.binding = binding;
                this.name = name;
                this.count = count;
              }

              copy(info) {
                this.set = info.set;
                this.binding = info.binding;
                this.name = info.name;
                this.count = info.count;
                return this;
              }

            } exports('aj', UniformInputAttachment);
            class ShaderStage {
              constructor(stage = ShaderStageFlagBit.NONE, source = '') {
                this.stage = stage;
                this.source = source;
              }

              copy(info) {
                this.stage = info.stage;
                this.source = info.source;
                return this;
              }

            } exports('ak', ShaderStage);
            class Attribute {
              constructor(name = '', format = Format.UNKNOWN, isNormalized = false, stream = 0, isInstanced = false, location = 0) {
                this.name = name;
                this.format = format;
                this.isNormalized = isNormalized;
                this.stream = stream;
                this.isInstanced = isInstanced;
                this.location = location;
              }

              copy(info) {
                this.name = info.name;
                this.format = info.format;
                this.isNormalized = info.isNormalized;
                this.stream = info.stream;
                this.isInstanced = info.isInstanced;
                this.location = info.location;
                return this;
              }

            }
            class ShaderInfo {
              constructor(name = '', stages = [], attributes = [], blocks = [], buffers = [], samplerTextures = [], samplers = [], textures = [], images = [], subpassInputs = []) {
                this.name = name;
                this.stages = stages;
                this.attributes = attributes;
                this.blocks = blocks;
                this.buffers = buffers;
                this.samplerTextures = samplerTextures;
                this.samplers = samplers;
                this.textures = textures;
                this.images = images;
                this.subpassInputs = subpassInputs;
              }

              copy(info) {
                this.name = info.name;
                deepCopy(this.stages, info.stages, ShaderStage);
                deepCopy(this.attributes, info.attributes, Attribute);
                deepCopy(this.blocks, info.blocks, UniformBlock);
                deepCopy(this.buffers, info.buffers, UniformStorageBuffer);
                deepCopy(this.samplerTextures, info.samplerTextures, UniformSamplerTexture);
                deepCopy(this.samplers, info.samplers, UniformSampler);
                deepCopy(this.textures, info.textures, UniformTexture);
                deepCopy(this.images, info.images, UniformStorageImage);
                deepCopy(this.subpassInputs, info.subpassInputs, UniformInputAttachment);
                return this;
              }

            } exports('am', ShaderInfo);
            class InputAssemblerInfo {
              constructor(attributes = [], vertexBuffers = [], indexBuffer = null, indirectBuffer = null) {
                this.attributes = attributes;
                this.vertexBuffers = vertexBuffers;
                this.indexBuffer = indexBuffer;
                this.indirectBuffer = indirectBuffer;
              }

              copy(info) {
                deepCopy(this.attributes, info.attributes, Attribute);
                this.vertexBuffers = info.vertexBuffers.slice();
                this.indexBuffer = info.indexBuffer;
                this.indirectBuffer = info.indirectBuffer;
                return this;
              }

            } exports('an', InputAssemblerInfo);
            class ColorAttachment {
              constructor(format = Format.UNKNOWN, sampleCount = SampleCount.X1, loadOp = LoadOp.CLEAR, storeOp = StoreOp.STORE, beginAccesses = [], endAccesses = [AccessType.PRESENT]) {
                this.format = format;
                this.sampleCount = sampleCount;
                this.loadOp = loadOp;
                this.storeOp = storeOp;
                this.beginAccesses = beginAccesses;
                this.endAccesses = endAccesses;
              }

              copy(info) {
                this.format = info.format;
                this.sampleCount = info.sampleCount;
                this.loadOp = info.loadOp;
                this.storeOp = info.storeOp;
                this.beginAccesses = info.beginAccesses.slice();
                this.endAccesses = info.endAccesses.slice();
                return this;
              }

            } exports('ao', ColorAttachment);
            class DepthStencilAttachment {
              constructor(format = Format.UNKNOWN, sampleCount = SampleCount.X1, depthLoadOp = LoadOp.CLEAR, depthStoreOp = StoreOp.STORE, stencilLoadOp = LoadOp.CLEAR, stencilStoreOp = StoreOp.STORE, beginAccesses = [], endAccesses = [AccessType.DEPTH_STENCIL_ATTACHMENT_WRITE]) {
                this.format = format;
                this.sampleCount = sampleCount;
                this.depthLoadOp = depthLoadOp;
                this.depthStoreOp = depthStoreOp;
                this.stencilLoadOp = stencilLoadOp;
                this.stencilStoreOp = stencilStoreOp;
                this.beginAccesses = beginAccesses;
                this.endAccesses = endAccesses;
              }

              copy(info) {
                this.format = info.format;
                this.sampleCount = info.sampleCount;
                this.depthLoadOp = info.depthLoadOp;
                this.depthStoreOp = info.depthStoreOp;
                this.stencilLoadOp = info.stencilLoadOp;
                this.stencilStoreOp = info.stencilStoreOp;
                this.beginAccesses = info.beginAccesses.slice();
                this.endAccesses = info.endAccesses.slice();
                return this;
              }

            } exports('ap', DepthStencilAttachment);
            class SubpassInfo {
              constructor(inputs = [], colors = [], resolves = [], preserves = [], depthStencil = -1) {
                this.inputs = inputs;
                this.colors = colors;
                this.resolves = resolves;
                this.preserves = preserves;
                this.depthStencil = depthStencil;
              }

              copy(info) {
                this.inputs = info.inputs.slice();
                this.colors = info.colors.slice();
                this.resolves = info.resolves.slice();
                this.preserves = info.preserves.slice();
                this.depthStencil = info.depthStencil;
                return this;
              }

            } exports('aq', SubpassInfo);
            class RenderPassInfo {
              constructor(colorAttachments = [], depthStencilAttachment = new DepthStencilAttachment(), subpasses = []) {
                this.colorAttachments = colorAttachments;
                this.depthStencilAttachment = depthStencilAttachment;
                this.subpasses = subpasses;
              }

              copy(info) {
                deepCopy(this.colorAttachments, info.colorAttachments, ColorAttachment);
                this.depthStencilAttachment.copy(info.depthStencilAttachment);
                deepCopy(this.subpasses, info.subpasses, SubpassInfo);
                return this;
              }

            } exports('ar', RenderPassInfo);
            class GlobalBarrierInfo {
              constructor(prevAccesses = [], nextAccesses = []) {
                this.prevAccesses = prevAccesses;
                this.nextAccesses = nextAccesses;
              }

              copy(info) {
                this.prevAccesses = info.prevAccesses.slice();
                this.nextAccesses = info.nextAccesses.slice();
                return this;
              }

            } exports('G', GlobalBarrierInfo);
            class TextureBarrierInfo {
              constructor(prevAccesses = [], nextAccesses = [], discardContents = false, srcQueue = null, dstQueue = null) {
                this.prevAccesses = prevAccesses;
                this.nextAccesses = nextAccesses;
                this.discardContents = discardContents;
                this.srcQueue = srcQueue;
                this.dstQueue = dstQueue;
              }

              copy(info) {
                this.prevAccesses = info.prevAccesses.slice();
                this.nextAccesses = info.nextAccesses.slice();
                this.discardContents = info.discardContents;
                this.srcQueue = info.srcQueue;
                this.dstQueue = info.dstQueue;
                return this;
              }

            } exports('T', TextureBarrierInfo);
            class FramebufferInfo {
              constructor(renderPass = null, colorTextures = [], depthStencilTexture = null, colorMipmapLevels = [], depthStencilMipmapLevel = 0) {
                this.renderPass = renderPass;
                this.colorTextures = colorTextures;
                this.depthStencilTexture = depthStencilTexture;
                this.colorMipmapLevels = colorMipmapLevels;
                this.depthStencilMipmapLevel = depthStencilMipmapLevel;
              }

              copy(info) {
                this.renderPass = info.renderPass;
                this.colorTextures = info.colorTextures.slice();
                this.depthStencilTexture = info.depthStencilTexture;
                this.colorMipmapLevels = info.colorMipmapLevels.slice();
                this.depthStencilMipmapLevel = info.depthStencilMipmapLevel;
                return this;
              }

            } exports('as', FramebufferInfo);
            class DescriptorSetLayoutBinding {
              constructor(binding = -1, descriptorType = DescriptorType.UNKNOWN, count = 0, stageFlags = ShaderStageFlagBit.NONE, immutableSamplers = []) {
                this.binding = binding;
                this.descriptorType = descriptorType;
                this.count = count;
                this.stageFlags = stageFlags;
                this.immutableSamplers = immutableSamplers;
              }

              copy(info) {
                this.binding = info.binding;
                this.descriptorType = info.descriptorType;
                this.count = info.count;
                this.stageFlags = info.stageFlags;
                this.immutableSamplers = info.immutableSamplers.slice();
                return this;
              }

            } exports('at', DescriptorSetLayoutBinding);
            class DescriptorSetLayoutInfo {
              constructor(bindings = []) {
                this.bindings = bindings;
              }

              copy(info) {
                deepCopy(this.bindings, info.bindings, DescriptorSetLayoutBinding);
                return this;
              }

            } exports('au', DescriptorSetLayoutInfo);
            class DescriptorSetInfo {
              constructor(layout = null) {
                this.layout = layout;
              }

              copy(info) {
                this.layout = info.layout;
                return this;
              }

            } exports('av', DescriptorSetInfo);
            class PipelineLayoutInfo {
              constructor(setLayouts = []) {
                this.setLayouts = setLayouts;
              }

              copy(info) {
                this.setLayouts = info.setLayouts.slice();
                return this;
              }

            } exports('aw', PipelineLayoutInfo);
            class InputState {
              constructor(attributes = []) {
                this.attributes = attributes;
              }

              copy(info) {
                deepCopy(this.attributes, info.attributes, Attribute);
                return this;
              }

            } exports('ax', InputState);
            class CommandBufferInfo {
              constructor(queue = null, type = CommandBufferType.PRIMARY) {
                this.queue = queue;
                this.type = type;
              }

              copy(info) {
                this.queue = info.queue;
                this.type = info.type;
                return this;
              }

            } exports('ay', CommandBufferInfo);
            class QueueInfo {
              constructor(type = QueueType.GRAPHICS) {
                this.type = type;
              }

              copy(info) {
                this.type = info.type;
                return this;
              }

            } exports('az', QueueInfo);
            class FormatInfo {
              constructor(name = '', size = 0, count = 0, type = FormatType.NONE, hasAlpha = false, hasDepth = false, hasStencil = false, isCompressed = false) {
                this.name = name;
                this.size = size;
                this.count = count;
                this.type = type;
                this.hasAlpha = hasAlpha;
                this.hasDepth = hasDepth;
                this.hasStencil = hasStencil;
                this.isCompressed = isCompressed;
              }

            } exports('aA', FormatInfo);
            class MemoryStatus {
              constructor(bufferSize = 0, textureSize = 0) {
                this.bufferSize = bufferSize;
                this.textureSize = textureSize;
              }

              copy(info) {
                this.bufferSize = info.bufferSize;
                this.textureSize = info.textureSize;
                return this;
              }

            } exports('aB', MemoryStatus);
            class Obj {
              get gfxType() {
                return this._gfxType;
              }

              constructor(gfxType) {
                this._gfxType = ObjectType.UNKNOWN;
                this._gfxType = gfxType;
              }

            } exports('O', Obj);
            class DeviceInfo {
              constructor(canvasElm, isAntialias = true, isPremultipliedAlpha = true, devicePixelRatio = 1, nativeWidth = 1, nativeHeight = 1, bindingMappingInfo = new BindingMappingInfo()) {
                this.canvasElm = canvasElm;
                this.isAntialias = isAntialias;
                this.isPremultipliedAlpha = isPremultipliedAlpha;
                this.devicePixelRatio = devicePixelRatio;
                this.nativeWidth = nativeWidth;
                this.nativeHeight = nativeHeight;
                this.bindingMappingInfo = bindingMappingInfo;
              }

            } exports('aC', DeviceInfo);
            let AttributeName;

            (function (AttributeName) {
              AttributeName["ATTR_POSITION"] = "a_position";
              AttributeName["ATTR_NORMAL"] = "a_normal";
              AttributeName["ATTR_TANGENT"] = "a_tangent";
              AttributeName["ATTR_BITANGENT"] = "a_bitangent";
              AttributeName["ATTR_WEIGHTS"] = "a_weights";
              AttributeName["ATTR_JOINTS"] = "a_joints";
              AttributeName["ATTR_COLOR"] = "a_color";
              AttributeName["ATTR_COLOR1"] = "a_color1";
              AttributeName["ATTR_COLOR2"] = "a_color2";
              AttributeName["ATTR_TEX_COORD"] = "a_texCoord";
              AttributeName["ATTR_TEX_COORD1"] = "a_texCoord1";
              AttributeName["ATTR_TEX_COORD2"] = "a_texCoord2";
              AttributeName["ATTR_TEX_COORD3"] = "a_texCoord3";
              AttributeName["ATTR_TEX_COORD4"] = "a_texCoord4";
              AttributeName["ATTR_TEX_COORD5"] = "a_texCoord5";
              AttributeName["ATTR_TEX_COORD6"] = "a_texCoord6";
              AttributeName["ATTR_TEX_COORD7"] = "a_texCoord7";
              AttributeName["ATTR_TEX_COORD8"] = "a_texCoord8";
              AttributeName["ATTR_BATCH_ID"] = "a_batch_id";
              AttributeName["ATTR_BATCH_UV"] = "a_batch_uv";
            })(AttributeName || (AttributeName = exports('aD', {})));

            const FormatInfos = exports('aE', Object.freeze([new FormatInfo('UNKNOWN', 0, 0, FormatType.NONE, false, false, false, false), new FormatInfo('A8', 1, 1, FormatType.UNORM, true, false, false, false), new FormatInfo('L8', 1, 1, FormatType.UNORM, false, false, false, false), new FormatInfo('LA8', 1, 2, FormatType.UNORM, true, false, false, false), new FormatInfo('R8', 1, 1, FormatType.UNORM, false, false, false, false), new FormatInfo('R8SN', 1, 1, FormatType.SNORM, false, false, false, false), new FormatInfo('R8UI', 1, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R8I', 1, 1, FormatType.INT, false, false, false, false), new FormatInfo('R16F', 2, 1, FormatType.FLOAT, false, false, false, false), new FormatInfo('R16UI', 2, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R16I', 2, 1, FormatType.INT, false, false, false, false), new FormatInfo('R32F', 4, 1, FormatType.FLOAT, false, false, false, false), new FormatInfo('R32UI', 4, 1, FormatType.UINT, false, false, false, false), new FormatInfo('R32I', 4, 1, FormatType.INT, false, false, false, false), new FormatInfo('RG8', 2, 2, FormatType.UNORM, false, false, false, false), new FormatInfo('RG8SN', 2, 2, FormatType.SNORM, false, false, false, false), new FormatInfo('RG8UI', 2, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG8I', 2, 2, FormatType.INT, false, false, false, false), new FormatInfo('RG16F', 4, 2, FormatType.FLOAT, false, false, false, false), new FormatInfo('RG16UI', 4, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG16I', 4, 2, FormatType.INT, false, false, false, false), new FormatInfo('RG32F', 8, 2, FormatType.FLOAT, false, false, false, false), new FormatInfo('RG32UI', 8, 2, FormatType.UINT, false, false, false, false), new FormatInfo('RG32I', 8, 2, FormatType.INT, false, false, false, false), new FormatInfo('RGB8', 3, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('SRGB8', 3, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('RGB8SN', 3, 3, FormatType.SNORM, false, false, false, false), new FormatInfo('RGB8UI', 3, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB8I', 3, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGB16F', 6, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB16UI', 6, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB16I', 6, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGB32F', 12, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB32UI', 12, 3, FormatType.UINT, false, false, false, false), new FormatInfo('RGB32I', 12, 3, FormatType.INT, false, false, false, false), new FormatInfo('RGBA8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('BGRA8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('SRGB8_A8', 4, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGBA8SN', 4, 4, FormatType.SNORM, true, false, false, false), new FormatInfo('RGBA8UI', 4, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA8I', 4, 4, FormatType.INT, true, false, false, false), new FormatInfo('RGBA16F', 8, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('RGBA16UI', 8, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA16I', 8, 4, FormatType.INT, true, false, false, false), new FormatInfo('RGBA32F', 16, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('RGBA32UI', 16, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGBA32I', 16, 4, FormatType.INT, true, false, false, false), new FormatInfo('R5G6B5', 2, 3, FormatType.UNORM, false, false, false, false), new FormatInfo('R11G11B10F', 4, 3, FormatType.FLOAT, false, false, false, false), new FormatInfo('RGB5A1', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGBA4', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGB10A2', 2, 4, FormatType.UNORM, true, false, false, false), new FormatInfo('RGB10A2UI', 2, 4, FormatType.UINT, true, false, false, false), new FormatInfo('RGB9E5', 2, 4, FormatType.FLOAT, true, false, false, false), new FormatInfo('D16', 2, 1, FormatType.UINT, false, true, false, false), new FormatInfo('D16S8', 3, 2, FormatType.UINT, false, true, true, false), new FormatInfo('D24', 3, 1, FormatType.UINT, false, true, false, false), new FormatInfo('D24S8', 4, 2, FormatType.UINT, false, true, true, false), new FormatInfo('D32F', 4, 1, FormatType.FLOAT, false, true, false, false), new FormatInfo('D32FS8', 5, 2, FormatType.FLOAT, false, true, true, false), new FormatInfo('BC1', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('BC1_ALPHA', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC1_SRGB', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('BC1_SRGB_ALPHA', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC2', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC2_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC3', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC3_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC4', 1, 1, FormatType.UNORM, false, false, false, true), new FormatInfo('BC4_SNORM', 1, 1, FormatType.SNORM, false, false, false, true), new FormatInfo('BC5', 1, 2, FormatType.UNORM, false, false, false, true), new FormatInfo('BC5_SNORM', 1, 2, FormatType.SNORM, false, false, false, true), new FormatInfo('BC6H_UF16', 1, 3, FormatType.UFLOAT, false, false, false, true), new FormatInfo('BC6H_SF16', 1, 3, FormatType.FLOAT, false, false, false, true), new FormatInfo('BC7', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('BC7_SRGB', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC_RGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_RGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_SRGB8', 1, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('ETC2_RGB8_A1', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_SRGB8_A1', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_RGBA8', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ETC2_SRGB8_A8', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('EAC_R11', 1, 1, FormatType.UNORM, false, false, false, true), new FormatInfo('EAC_R11SN', 1, 1, FormatType.SNORM, false, false, false, true), new FormatInfo('EAC_RG11', 2, 2, FormatType.UNORM, false, false, false, true), new FormatInfo('EAC_RG11SN', 2, 2, FormatType.SNORM, false, false, false, true), new FormatInfo('PVRTC_RGB2', 2, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('PVRTC_RGBA2', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC_RGB4', 2, 3, FormatType.UNORM, false, false, false, true), new FormatInfo('PVRTC_RGBA4', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC2_2BPP', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('PVRTC2_4BPP', 2, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_4x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_5x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_5x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_6x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_6x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_8x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_10x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_12x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_RGBA_12x12', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_4x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_5x4', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_5x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_6x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_6x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_8x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x5', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x6', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x8', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_10x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_12x10', 1, 4, FormatType.UNORM, true, false, false, true), new FormatInfo('ASTC_SRGBA_12x12', 1, 4, FormatType.UNORM, true, false, false, true)]));
            const DESCRIPTOR_BUFFER_TYPE = exports('D', DescriptorType.UNIFORM_BUFFER | DescriptorType.DYNAMIC_UNIFORM_BUFFER | DescriptorType.STORAGE_BUFFER | DescriptorType.DYNAMIC_STORAGE_BUFFER);
            const DESCRIPTOR_SAMPLER_TYPE = exports('b', DescriptorType.SAMPLER_TEXTURE | DescriptorType.SAMPLER | DescriptorType.TEXTURE | DescriptorType.STORAGE_IMAGE | DescriptorType.INPUT_ATTACHMENT);
            const DESCRIPTOR_DYNAMIC_TYPE = exports('aF', DescriptorType.DYNAMIC_STORAGE_BUFFER | DescriptorType.DYNAMIC_UNIFORM_BUFFER);
            const DRAW_INFO_SIZE = exports('aG', 28);
            function IsPowerOf2(x) {
              return x > 0 && (x & x - 1) === 0;
            }
            function FormatSize(format, width, height, depth) {
              if (!FormatInfos[format].isCompressed) {
                return width * height * depth * FormatInfos[format].size;
              } else {
                switch (format) {
                  case Format.BC1:
                  case Format.BC1_ALPHA:
                  case Format.BC1_SRGB:
                  case Format.BC1_SRGB_ALPHA:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 8 * depth;

                  case Format.BC2:
                  case Format.BC2_SRGB:
                  case Format.BC3:
                  case Format.BC3_SRGB:
                  case Format.BC4:
                  case Format.BC4_SNORM:
                  case Format.BC6H_SF16:
                  case Format.BC6H_UF16:
                  case Format.BC7:
                  case Format.BC7_SRGB:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

                  case Format.BC5:
                  case Format.BC5_SNORM:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 32 * depth;

                  case Format.ETC_RGB8:
                  case Format.ETC2_RGB8:
                  case Format.ETC2_SRGB8:
                  case Format.ETC2_RGB8_A1:
                  case Format.EAC_R11:
                  case Format.EAC_R11SN:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 8 * depth;

                  case Format.ETC2_RGBA8:
                  case Format.ETC2_SRGB8_A1:
                  case Format.EAC_RG11:
                  case Format.EAC_RG11SN:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

                  case Format.PVRTC_RGB2:
                  case Format.PVRTC_RGBA2:
                  case Format.PVRTC2_2BPP:
                    return Math.ceil(Math.max(width, 16) * Math.max(height, 8) / 4) * depth;

                  case Format.PVRTC_RGB4:
                  case Format.PVRTC_RGBA4:
                  case Format.PVRTC2_4BPP:
                    return Math.ceil(Math.max(width, 8) * Math.max(height, 8) / 2) * depth;

                  case Format.ASTC_RGBA_4x4:
                  case Format.ASTC_SRGBA_4x4:
                    return Math.ceil(width / 4) * Math.ceil(height / 4) * 16 * depth;

                  case Format.ASTC_RGBA_5x4:
                  case Format.ASTC_SRGBA_5x4:
                    return Math.ceil(width / 5) * Math.ceil(height / 4) * 16 * depth;

                  case Format.ASTC_RGBA_5x5:
                  case Format.ASTC_SRGBA_5x5:
                    return Math.ceil(width / 5) * Math.ceil(height / 5) * 16 * depth;

                  case Format.ASTC_RGBA_6x5:
                  case Format.ASTC_SRGBA_6x5:
                    return Math.ceil(width / 6) * Math.ceil(height / 5) * 16 * depth;

                  case Format.ASTC_RGBA_6x6:
                  case Format.ASTC_SRGBA_6x6:
                    return Math.ceil(width / 6) * Math.ceil(height / 6) * 16 * depth;

                  case Format.ASTC_RGBA_8x5:
                  case Format.ASTC_SRGBA_8x5:
                    return Math.ceil(width / 8) * Math.ceil(height / 5) * 16 * depth;

                  case Format.ASTC_RGBA_8x6:
                  case Format.ASTC_SRGBA_8x6:
                    return Math.ceil(width / 8) * Math.ceil(height / 6) * 16 * depth;

                  case Format.ASTC_RGBA_8x8:
                  case Format.ASTC_SRGBA_8x8:
                    return Math.ceil(width / 8) * Math.ceil(height / 8) * 16 * depth;

                  case Format.ASTC_RGBA_10x5:
                  case Format.ASTC_SRGBA_10x5:
                    return Math.ceil(width / 10) * Math.ceil(height / 5) * 16 * depth;

                  case Format.ASTC_RGBA_10x6:
                  case Format.ASTC_SRGBA_10x6:
                    return Math.ceil(width / 10) * Math.ceil(height / 6) * 16 * depth;

                  case Format.ASTC_RGBA_10x8:
                  case Format.ASTC_SRGBA_10x8:
                    return Math.ceil(width / 10) * Math.ceil(height / 8) * 16 * depth;

                  case Format.ASTC_RGBA_10x10:
                  case Format.ASTC_SRGBA_10x10:
                    return Math.ceil(width / 10) * Math.ceil(height / 10) * 16 * depth;

                  case Format.ASTC_RGBA_12x10:
                  case Format.ASTC_SRGBA_12x10:
                    return Math.ceil(width / 12) * Math.ceil(height / 10) * 16 * depth;

                  case Format.ASTC_RGBA_12x12:
                  case Format.ASTC_SRGBA_12x12:
                    return Math.ceil(width / 12) * Math.ceil(height / 12) * 16 * depth;

                  default:
                    {
                      return 0;
                    }
                }
              }
            }
            function FormatSurfaceSize(format, width, height, depth, mips) {
              let size = 0;

              for (let i = 0; i < mips; ++i) {
                size += FormatSize(format, width, height, depth);
                width = Math.max(width >> 1, 1);
                height = Math.max(height >> 1, 1);
              }

              return size;
            }
            const _type2size = [0, 4, 8, 12, 16, 4, 8, 12, 16, 4, 8, 12, 16, 4, 8, 12, 16, 16, 24, 32, 24, 36, 48, 32, 48, 64, 4, 4, 4, 4, 4, 4];
            function GetTypeSize(type) {
              return _type2size[type] || 0;
            }
            function getTypedArrayConstructor(info) {
              const stride = info.size / info.count;

              switch (info.type) {
                case FormatType.UNORM:
                case FormatType.UINT:
                  {
                    switch (stride) {
                      case 1:
                        return Uint8Array;

                      case 2:
                        return Uint16Array;

                      case 4:
                        return Uint32Array;
                    }

                    break;
                  }

                case FormatType.SNORM:
                case FormatType.INT:
                  {
                    switch (stride) {
                      case 1:
                        return Int8Array;

                      case 2:
                        return Int16Array;

                      case 4:
                        return Int32Array;
                    }

                    break;
                  }

                case FormatType.FLOAT:
                  {
                    return Float32Array;
                  }
              }

              return Float32Array;
            }

            var defines = /*#__PURE__*/Object.freeze({
                __proto__: null,
                get ObjectType () { return ObjectType; },
                get Status () { return Status; },
                get API () { return API; },
                get SurfaceTransform () { return SurfaceTransform; },
                get Feature () { return Feature; },
                get Format () { return Format; },
                get FormatType () { return FormatType; },
                get Type () { return Type; },
                get BufferUsageBit () { return BufferUsageBit; },
                get BufferFlagBit () { return BufferFlagBit; },
                get MemoryAccessBit () { return MemoryAccessBit; },
                get MemoryUsageBit () { return MemoryUsageBit; },
                get TextureType () { return TextureType; },
                get TextureUsageBit () { return TextureUsageBit; },
                get TextureFlagBit () { return TextureFlagBit; },
                get SampleCount () { return SampleCount; },
                get Filter () { return Filter; },
                get Address () { return Address; },
                get ComparisonFunc () { return ComparisonFunc; },
                get StencilOp () { return StencilOp; },
                get BlendFactor () { return BlendFactor; },
                get BlendOp () { return BlendOp; },
                get ColorMask () { return ColorMask; },
                get ShaderStageFlagBit () { return ShaderStageFlagBit; },
                get LoadOp () { return LoadOp; },
                get StoreOp () { return StoreOp; },
                get AccessType () { return AccessType; },
                get PipelineBindPoint () { return PipelineBindPoint; },
                get PrimitiveMode () { return PrimitiveMode; },
                get PolygonMode () { return PolygonMode; },
                get ShadeModel () { return ShadeModel; },
                get CullMode () { return CullMode; },
                get DynamicStateFlagBit () { return DynamicStateFlagBit; },
                get StencilFace () { return StencilFace; },
                get DescriptorType () { return DescriptorType; },
                get QueueType () { return QueueType; },
                get CommandBufferType () { return CommandBufferType; },
                get ClearFlagBit () { return ClearFlagBit; },
                Size: Size$1,
                DeviceCaps: DeviceCaps,
                Offset: Offset,
                Rect: Rect$1,
                Extent: Extent,
                TextureSubresLayers: TextureSubresLayers,
                TextureSubresRange: TextureSubresRange,
                TextureCopy: TextureCopy,
                TextureBlit: TextureBlit,
                BufferTextureCopy: BufferTextureCopy,
                Viewport: Viewport,
                Color: Color$1,
                BindingMappingInfo: BindingMappingInfo,
                BufferInfo: BufferInfo,
                BufferViewInfo: BufferViewInfo,
                DrawInfo: DrawInfo,
                DispatchInfo: DispatchInfo,
                IndirectBuffer: IndirectBuffer,
                TextureInfo: TextureInfo,
                TextureViewInfo: TextureViewInfo,
                SamplerInfo: SamplerInfo,
                Uniform: Uniform,
                UniformBlock: UniformBlock,
                UniformSamplerTexture: UniformSamplerTexture,
                UniformSampler: UniformSampler,
                UniformTexture: UniformTexture,
                UniformStorageImage: UniformStorageImage,
                UniformStorageBuffer: UniformStorageBuffer,
                UniformInputAttachment: UniformInputAttachment,
                ShaderStage: ShaderStage,
                Attribute: Attribute,
                ShaderInfo: ShaderInfo,
                InputAssemblerInfo: InputAssemblerInfo,
                ColorAttachment: ColorAttachment,
                DepthStencilAttachment: DepthStencilAttachment,
                SubpassInfo: SubpassInfo,
                RenderPassInfo: RenderPassInfo,
                GlobalBarrierInfo: GlobalBarrierInfo,
                TextureBarrierInfo: TextureBarrierInfo,
                FramebufferInfo: FramebufferInfo,
                DescriptorSetLayoutBinding: DescriptorSetLayoutBinding,
                DescriptorSetLayoutInfo: DescriptorSetLayoutInfo,
                DescriptorSetInfo: DescriptorSetInfo,
                PipelineLayoutInfo: PipelineLayoutInfo,
                InputState: InputState,
                CommandBufferInfo: CommandBufferInfo,
                QueueInfo: QueueInfo,
                FormatInfo: FormatInfo,
                MemoryStatus: MemoryStatus,
                Obj: Obj,
                DeviceInfo: DeviceInfo,
                get AttributeName () { return AttributeName; },
                FormatInfos: FormatInfos,
                DESCRIPTOR_BUFFER_TYPE: DESCRIPTOR_BUFFER_TYPE,
                DESCRIPTOR_SAMPLER_TYPE: DESCRIPTOR_SAMPLER_TYPE,
                DESCRIPTOR_DYNAMIC_TYPE: DESCRIPTOR_DYNAMIC_TYPE,
                DRAW_INFO_SIZE: DRAW_INFO_SIZE,
                IsPowerOf2: IsPowerOf2,
                FormatSize: FormatSize,
                FormatSurfaceSize: FormatSurfaceSize,
                GetTypeSize: GetTypeSize,
                getTypedArrayConstructor: getTypedArrayConstructor
            });

            class RasterizerState {
              constructor(isDiscard = false, polygonMode = PolygonMode.FILL, shadeModel = ShadeModel.GOURAND, cullMode = CullMode.BACK, isFrontFaceCCW = true, depthBiasEnabled = false, depthBias = 0, depthBiasClamp = 0.0, depthBiasSlop = 0.0, isDepthClip = true, isMultisample = false, lineWidth = 1.0) {
                this.h = void 0;
                this.h = RasterizerStatePool.alloc();
                this.assignProperties(isDiscard, polygonMode, shadeModel, cullMode, isFrontFaceCCW, depthBiasEnabled, depthBias, depthBiasClamp, depthBiasSlop, isDepthClip, isMultisample, lineWidth);
              }

              get isDiscard() {
                if (RasterizerStatePool.get(this.h, RasterizerStateView.IS_DISCARD)) return true;else return false;
              }

              set isDiscard(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.IS_DISCARD, val ? 1 : 0);
              }

              get polygonMode() {
                return RasterizerStatePool.get(this.h, RasterizerStateView.POLYGO_MODEL);
              }

              set polygonMode(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.POLYGO_MODEL, val);
              }

              get shadeModel() {
                return RasterizerStatePool.get(this.h, RasterizerStateView.SHADE_MODEL);
              }

              set shadeModel(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.SHADE_MODEL, val);
              }

              get cullMode() {
                return RasterizerStatePool.get(this.h, RasterizerStateView.CULL_MODE);
              }

              set cullMode(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.CULL_MODE, val);
              }

              get isFrontFaceCCW() {
                if (RasterizerStatePool.get(this.h, RasterizerStateView.IS_FRONT_FACE_CCW)) return true;else return false;
              }

              set isFrontFaceCCW(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.IS_FRONT_FACE_CCW, val ? 1 : 0);
              }

              get depthBiasEnabled() {
                if (RasterizerStatePool.get(this.h, RasterizerStateView.DEPTH_BIAS_ENABLED)) return true;else return false;
              }

              set depthBiasEnabled(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.DEPTH_BIAS_ENABLED, val ? 1 : 0);
              }

              get depthBias() {
                return RasterizerStatePool.get(this.h, RasterizerStateView.DEPTH_BIAS);
              }

              set depthBias(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.DEPTH_BIAS, val);
              }

              get depthBiasClamp() {
                return RasterizerStatePool.get(this.h, RasterizerStateView.DEPTH_BIAS_CLAMP);
              }

              set depthBiasClamp(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.DEPTH_BIAS_CLAMP, val);
              }

              get depthBiasSlop() {
                return RasterizerStatePool.get(this.h, RasterizerStateView.DEPTH_BIAS_SLOP);
              }

              set depthBiasSlop(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.DEPTH_BIAS_SLOP, val);
              }

              get isDepthClip() {
                if (RasterizerStatePool.get(this.h, RasterizerStateView.IS_DEPTH_CLIP)) return true;else return false;
              }

              set isDepthClip(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.IS_DEPTH_CLIP, val ? 1 : 0);
              }

              get isMultisample() {
                if (RasterizerStatePool.get(this.h, RasterizerStateView.IS_MULTI_SAMPLE)) return true;else return false;
              }

              set isMultisample(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.IS_MULTI_SAMPLE, val ? 1 : 0);
              }

              get lineWidth() {
                return RasterizerStatePool.get(this.h, RasterizerStateView.LINE_WIDTH);
              }

              set lineWidth(val) {
                RasterizerStatePool.set(this.h, RasterizerStateView.LINE_WIDTH, val);
              }

              get handle() {
                return this.h;
              }

              reset() {
                this.assignProperties(false, PolygonMode.FILL, ShadeModel.GOURAND, CullMode.BACK, true, false, 0, 0.0, 0.0, true, false, 1.0);
              }

              assign(rs) {
                if (!rs) return;
                this.assignProperties(rs.isDiscard, rs.polygonMode, rs.shadeModel, rs.cullMode, rs.isFrontFaceCCW, rs.depthBiasEnabled, rs.depthBias, rs.depthBiasClamp, rs.depthBiasSlop, rs.isDepthClip, rs.isMultisample, rs.lineWidth);
              }

              destroy() {
                if (this.h) {
                  RasterizerStatePool.free(this.h);
                  this.h = NULL_HANDLE;
                }
              }

              assignProperties(isDiscard, polygonMode, shadeModel, cullMode, isFrontFaceCCW, depthBiasEnabled, depthBias, depthBiasClamp, depthBiasSlop, isDepthClip, isMultisample, lineWidth) {
                if (isDiscard !== undefined) this.isDiscard = isDiscard;
                if (polygonMode !== undefined) this.polygonMode = polygonMode;
                if (shadeModel !== undefined) this.shadeModel = shadeModel;
                if (cullMode !== undefined) this.cullMode = cullMode;
                if (isFrontFaceCCW !== undefined) this.isFrontFaceCCW = isFrontFaceCCW;
                if (depthBiasEnabled !== undefined) this.depthBiasEnabled = depthBiasEnabled;
                if (depthBias !== undefined) this.depthBias = depthBias;
                if (depthBiasClamp !== undefined) this.depthBiasClamp = depthBiasClamp;
                if (depthBiasSlop !== undefined) this.depthBiasSlop = depthBiasSlop;
                if (isDepthClip !== undefined) this.isDepthClip = isDepthClip;
                if (isMultisample !== undefined) this.isMultisample = isMultisample;
                if (lineWidth !== undefined) this.lineWidth = lineWidth;
              }

            }
            class DepthStencilState {
              constructor(depthTest = true, depthWrite = true, depthFunc = ComparisonFunc.LESS, stencilTestFront = false, stencilFuncFront = ComparisonFunc.ALWAYS, stencilReadMaskFront = 0xffff, stencilWriteMaskFront = 0xffff, stencilFailOpFront = StencilOp.KEEP, stencilZFailOpFront = StencilOp.KEEP, stencilPassOpFront = StencilOp.KEEP, stencilRefFront = 1, stencilTestBack = false, stencilFuncBack = ComparisonFunc.ALWAYS, stencilReadMaskBack = 0xffff, stencilWriteMaskBack = 0xffff, stencilFailOpBack = StencilOp.KEEP, stencilZFailOpBack = StencilOp.KEEP, stencilPassOpBack = StencilOp.KEEP, stencilRefBack = 1) {
                this.h = void 0;
                this.h = DepthStencilStatePool.alloc();
                this.assignProperties(depthTest, depthWrite, depthFunc, stencilTestFront, stencilFuncFront, stencilReadMaskFront, stencilWriteMaskFront, stencilFailOpFront, stencilZFailOpFront, stencilPassOpFront, stencilRefFront, stencilTestBack, stencilFuncBack, stencilReadMaskBack, stencilWriteMaskBack, stencilFailOpBack, stencilZFailOpBack, stencilPassOpBack, stencilRefBack);
              }

              get depthTest() {
                if (DepthStencilStatePool.get(this.h, DepthStencilStateView.DEPTH_TEST)) return true;else return false;
              }

              set depthTest(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.DEPTH_TEST, val ? 1 : 0);
              }

              get depthWrite() {
                if (DepthStencilStatePool.get(this.h, DepthStencilStateView.DEPTH_WRITE)) return true;else return false;
              }

              set depthWrite(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.DEPTH_WRITE, val ? 1 : 0);
              }

              get depthFunc() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.DEPTH_FUNC);
              }

              set depthFunc(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.DEPTH_FUNC, val);
              }

              get stencilTestFront() {
                if (DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_TEST_FRONT)) return true;else return false;
              }

              set stencilTestFront(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_TEST_FRONT, val ? 1 : 0);
              }

              get stencilFuncFront() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_FUNC_FRONT);
              }

              set stencilFuncFront(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_FUNC_FRONT, val);
              }

              get stencilReadMaskFront() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_READ_MASK_FRONT);
              }

              set stencilReadMaskFront(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_READ_MASK_FRONT, val);
              }

              get stencilWriteMaskFront() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_WRITE_MASK_FRONT);
              }

              set stencilWriteMaskFront(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_WRITE_MASK_FRONT, val);
              }

              get stencilFailOpFront() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_FAIL_OP_FRONT);
              }

              set stencilFailOpFront(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_FAIL_OP_FRONT, val);
              }

              get stencilZFailOpFront() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_Z_FAIL_OP_FRONT);
              }

              set stencilZFailOpFront(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_Z_FAIL_OP_FRONT, val);
              }

              get stencilPassOpFront() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_PASS_OP_FRONT);
              }

              set stencilPassOpFront(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_PASS_OP_FRONT, val);
              }

              get stencilRefFront() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_REF_FRONT);
              }

              set stencilRefFront(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_REF_FRONT, val);
              }

              get stencilTestBack() {
                if (DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_TEST_BACK)) return true;else return false;
              }

              set stencilTestBack(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_TEST_BACK, val ? 1 : 0);
              }

              get stencilFuncBack() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_FUNC_BACK);
              }

              set stencilFuncBack(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_FUNC_BACK, val);
              }

              get stencilReadMaskBack() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_READ_MADK_BACK);
              }

              set stencilReadMaskBack(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_READ_MADK_BACK, val);
              }

              get stencilWriteMaskBack() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_WRITE_MASK_BACK);
              }

              set stencilWriteMaskBack(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_WRITE_MASK_BACK, val);
              }

              get stencilFailOpBack() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_FAIL_OP_BACK);
              }

              set stencilFailOpBack(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_FAIL_OP_BACK, val);
              }

              get stencilZFailOpBack() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_Z_FAIL_OP_BACK);
              }

              set stencilZFailOpBack(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_Z_FAIL_OP_BACK, val);
              }

              get stencilPassOpBack() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_PASS_OP_BACK);
              }

              set stencilPassOpBack(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_PASS_OP_BACK, val);
              }

              get stencilRefBack() {
                return DepthStencilStatePool.get(this.h, DepthStencilStateView.STENCIL_REF_BACK);
              }

              set stencilRefBack(val) {
                DepthStencilStatePool.set(this.h, DepthStencilStateView.STENCIL_REF_BACK, val);
              }

              get handle() {
                return this.h;
              }

              reset() {
                this.assignProperties(true, true, ComparisonFunc.LESS, false, ComparisonFunc.ALWAYS, 0xffff, 0xffff, StencilOp.KEEP, StencilOp.KEEP, StencilOp.KEEP, 1, false, ComparisonFunc.ALWAYS, 0xffff, 0xffff, StencilOp.KEEP, StencilOp.KEEP, StencilOp.KEEP, 1);
              }

              assign(dss) {
                if (!dss) return;
                this.assignProperties(dss.depthTest, dss.depthWrite, dss.depthFunc, dss.stencilTestFront, dss.stencilFuncFront, dss.stencilReadMaskFront, dss.stencilWriteMaskFront, dss.stencilFailOpFront, dss.stencilZFailOpFront, dss.stencilPassOpFront, dss.stencilRefFront, dss.stencilTestBack, dss.stencilFuncBack, dss.stencilReadMaskBack, dss.stencilWriteMaskBack, dss.stencilFailOpBack, dss.stencilZFailOpBack, dss.stencilPassOpBack, dss.stencilRefBack);
              }

              destroy() {
                DepthStencilStatePool.free(this.h);
                this.h = NULL_HANDLE;
              }

              assignProperties(depthTest, depthWrite, depthFunc, stencilTestFront, stencilFuncFront, stencilReadMaskFront, stencilWriteMaskFront, stencilFailOpFront, stencilZFailOpFront, stencilPassOpFront, stencilRefFront, stencilTestBack, stencilFuncBack, stencilReadMaskBack, stencilWriteMaskBack, stencilFailOpBack, stencilZFailOpBack, stencilPassOpBack, stencilRefBack) {
                if (depthTest !== undefined) this.depthTest = depthTest;
                if (depthWrite !== undefined) this.depthWrite = depthWrite;
                if (depthFunc !== undefined) this.depthFunc = depthFunc;
                if (stencilTestFront !== undefined) this.stencilTestFront = stencilTestFront;
                if (stencilFuncFront !== undefined) this.stencilFuncFront = stencilFuncFront;
                if (stencilReadMaskFront !== undefined) this.stencilReadMaskFront = stencilReadMaskFront;
                if (stencilWriteMaskFront !== undefined) this.stencilWriteMaskFront = stencilWriteMaskFront;
                if (stencilFailOpFront !== undefined) this.stencilFailOpFront = stencilFailOpFront;
                if (stencilZFailOpFront !== undefined) this.stencilZFailOpFront = stencilZFailOpFront;
                if (stencilPassOpFront !== undefined) this.stencilPassOpFront = stencilPassOpFront;
                if (stencilRefFront !== undefined) this.stencilRefFront = stencilRefFront;
                if (stencilTestBack !== undefined) this.stencilTestBack = stencilTestBack;
                if (stencilFuncBack !== undefined) this.stencilFuncBack = stencilFuncBack;
                if (stencilReadMaskBack !== undefined) this.stencilReadMaskBack = stencilReadMaskBack;
                if (stencilWriteMaskBack !== undefined) this.stencilWriteMaskBack = stencilWriteMaskBack;
                if (stencilFailOpBack !== undefined) this.stencilFailOpBack = stencilFailOpBack;
                if (stencilZFailOpBack !== undefined) this.stencilZFailOpBack = stencilZFailOpBack;
                if (stencilPassOpBack !== undefined) this.stencilPassOpBack = stencilPassOpBack;
                if (stencilRefBack !== undefined) this.stencilRefBack = stencilRefBack;
              }

            }
            class BlendTarget {
              constructor(blend = false, blendSrc = BlendFactor.ONE, blendDst = BlendFactor.ZERO, blendEq = BlendOp.ADD, blendSrcAlpha = BlendFactor.ONE, blendDstAlpha = BlendFactor.ZERO, blendAlphaEq = BlendOp.ADD, blendColorMask = ColorMask.ALL) {
                this.h = void 0;
                this.h = BlendTargetPool.alloc();
                this.assignProperties(blend, blendSrc, blendDst, blendEq, blendSrcAlpha, blendDstAlpha, blendAlphaEq, blendColorMask);
              }

              get blend() {
                if (BlendTargetPool.get(this.h, BlendTargetView.BLEND)) return true;else return false;
              }

              set blend(val) {
                BlendTargetPool.set(this.h, BlendTargetView.BLEND, val ? 1 : 0);
              }

              get blendSrc() {
                return BlendTargetPool.get(this.h, BlendTargetView.BLEND_SRC);
              }

              set blendSrc(val) {
                BlendTargetPool.set(this.h, BlendTargetView.BLEND_SRC, val);
              }

              get blendDst() {
                return BlendTargetPool.get(this.h, BlendTargetView.BLEND_DST);
              }

              set blendDst(val) {
                BlendTargetPool.set(this.h, BlendTargetView.BLEND_DST, val);
              }

              get blendEq() {
                return BlendTargetPool.get(this.h, BlendTargetView.BLEND_EQ);
              }

              set blendEq(val) {
                BlendTargetPool.set(this.h, BlendTargetView.BLEND_EQ, val);
              }

              get blendSrcAlpha() {
                return BlendTargetPool.get(this.h, BlendTargetView.BLEND_SRC_ALPHA);
              }

              set blendSrcAlpha(val) {
                BlendTargetPool.set(this.h, BlendTargetView.BLEND_SRC_ALPHA, val);
              }

              get blendDstAlpha() {
                return BlendTargetPool.get(this.h, BlendTargetView.BLEND_DST_ALPHA);
              }

              set blendDstAlpha(val) {
                BlendTargetPool.set(this.h, BlendTargetView.BLEND_DST_ALPHA, val);
              }

              get blendAlphaEq() {
                return BlendTargetPool.get(this.h, BlendTargetView.BLEND_ALPHA_EQ);
              }

              set blendAlphaEq(val) {
                BlendTargetPool.set(this.h, BlendTargetView.BLEND_ALPHA_EQ, val);
              }

              get blendColorMask() {
                return BlendTargetPool.get(this.h, BlendTargetView.BLEND_COLOR_MASK);
              }

              set blendColorMask(val) {
                BlendTargetPool.set(this.h, BlendTargetView.BLEND_COLOR_MASK, val);
              }

              get handle() {
                return this.h;
              }

              reset() {
                this.assignProperties(false, BlendFactor.ONE, BlendFactor.ZERO, BlendOp.ADD, BlendFactor.ONE, BlendFactor.ZERO, BlendOp.ADD, ColorMask.ALL);
              }

              destroy() {
                BlendTargetPool.free(this.h);
                this.h = NULL_HANDLE;
              }

              assign(target) {
                if (!target) return;
                this.assignProperties(target.blend, target.blendSrc, target.blendDst, target.blendEq, target.blendSrcAlpha, target.blendDstAlpha, target.blendAlphaEq, target.blendColorMask);
              }

              assignProperties(blend, blendSrc, blendDst, blendEq, blendSrcAlpha, blendDstAlpha, blendAlphaEq, blendColorMask) {
                if (blend !== undefined) this.blend = blend;
                if (blendSrc !== undefined) this.blendSrc = blendSrc;
                if (blendDst !== undefined) this.blendDst = blendDst;
                if (blendEq !== undefined) this.blendEq = blendEq;
                if (blendSrcAlpha !== undefined) this.blendSrcAlpha = blendSrcAlpha;
                if (blendDstAlpha !== undefined) this.blendDstAlpha = blendDstAlpha;
                if (blendAlphaEq !== undefined) this.blendAlphaEq = blendAlphaEq;
                if (blendColorMask !== undefined) this.blendColorMask = blendColorMask;
              }

            }
            class BlendState {
              constructor(isA2C = false, isIndepend = false, blendColor = new Color$1(), targets = [new BlendTarget()]) {
                this.h = void 0;
                this.hBt = void 0;
                this.targets = void 0;
                this._blendColor = void 0;
                this.h = BlendStatePool.alloc();
                this.targets = targets;
                this.blendColor = blendColor;
                this.isA2c = isA2C;
                this.isIndepend = isIndepend;
                this.blendColor = blendColor;
                this.hBt = BlendTargetArrayPool.alloc();
                BlendStatePool.set(this.h, BlendStateView.BLEND_TARGET, this.hBt);

                for (let i = 0, len = targets.length; i < len; ++i) {
                  BlendTargetArrayPool.push(this.hBt, targets[i].handle);
                }
              }

              get isA2c() {
                if (BlendStatePool.get(this.h, BlendStateView.IS_A2C)) return true;else return false;
              }

              set isA2c(val) {
                BlendStatePool.set(this.h, BlendStateView.IS_A2C, val ? 1 : 0);
              }

              get isIndepend() {
                if (BlendStatePool.get(this.h, BlendStateView.IS_INDEPEND)) return true;else return false;
              }

              set isIndepend(val) {
                BlendStatePool.set(this.h, BlendStateView.IS_INDEPEND, val ? 1 : 0);
              }

              get blendColor() {
                return this._blendColor;
              }

              set blendColor(color) {
                this._blendColor = color;
                BlendStatePool.setVec4(this.h, BlendStateView.BLEND_COLOR, color);
              }

              get handle() {
                return this.h;
              }

              setTarget(index, target) {
                let tg = this.targets[index];

                if (!tg) {
                  tg = this.targets[index] = new BlendTarget();
                  BlendTargetArrayPool.assign(this.hBt, index, tg.handle);
                }

                tg.assign(target);
              }

              reset() {
                this.isA2c = false;
                this.isIndepend = false;
                BlendStatePool.setVec4(this.h, BlendStateView.BLEND_COLOR, new Color$1(0, 0, 0, 0));
                const targets = this.targets;

                for (let i = 1, len = targets.length; i < len; ++i) {
                  targets[i].destroy();
                }

                targets.length = 1;
                targets[0].reset();
                BlendTargetArrayPool.clear(this.hBt);
                BlendTargetArrayPool.push(this.hBt, targets[0].handle);
              }

              destroy() {
                BlendStatePool.free(this.h);
                this.h = NULL_HANDLE;
                BlendTargetArrayPool.free(this.hBt);
                this.hBt = NULL_HANDLE;

                for (let i = 0, len = this.targets.length; i < len; ++i) {
                  this.targets[i].destroy();
                }

                this.targets = null;
              }

            }
            const PipelineState = gfx.PipelineState;
            const PipelineStateInfo = gfx.PipelineStateInfo;

            ccenum(Format);
            class Device {
              constructor() {
                this._canvas = null;
                this._canvas2D = null;
                this._gfxAPI = API.UNKNOWN;
                this._transform = SurfaceTransform.IDENTITY;
                this._deviceName = '';
                this._renderer = '';
                this._vendor = '';
                this._version = '';
                this._features = new Array(Feature.COUNT);
                this._queue = null;
                this._cmdBuff = null;
                this._devicePixelRatio = 1.0;
                this._width = 0;
                this._height = 0;
                this._nativeWidth = 0;
                this._nativeHeight = 0;
                this._colorFmt = Format.UNKNOWN;
                this._depthStencilFmt = Format.UNKNOWN;
                this._numDrawCalls = 0;
                this._numInstances = 0;
                this._numTris = 0;
                this._memoryStatus = new MemoryStatus();
                this._caps = new DeviceCaps();
              }

              get canvas() {
                return this._canvas;
              }

              get canvas2D() {
                return this._canvas2D;
              }

              get gfxAPI() {
                return this._gfxAPI;
              }

              get queue() {
                return this._queue;
              }

              get commandBuffer() {
                return this._cmdBuff;
              }

              get devicePixelRatio() {
                return this._devicePixelRatio;
              }

              get width() {
                return this._width;
              }

              get height() {
                return this._height;
              }

              get nativeWidth() {
                return this._nativeWidth;
              }

              get nativeHeight() {
                return this._nativeHeight;
              }

              get renderer() {
                return this._renderer;
              }

              get vendor() {
                return this._vendor;
              }

              get colorFormat() {
                return this._colorFmt;
              }

              get depthStencilFormat() {
                return this._depthStencilFmt;
              }

              get numDrawCalls() {
                return this._numDrawCalls;
              }

              get numInstances() {
                return this._numInstances;
              }

              get numTris() {
                return this._numTris;
              }

              get memoryStatus() {
                return this._memoryStatus;
              }

              get capabilities() {
                return this._caps;
              }

              get surfaceTransform() {
                return this._transform;
              }

              hasFeature(feature) {
                return this._features[feature];
              }

            } exports('aM', Device);

            const getUint8ForString = String.prototype.charCodeAt;

            function getUint8ForArray(idx) {
              return this[idx];
            }

            function murmurhash2_32_gc(input, seed) {
              let l = input.length;
              let h = seed ^ l;
              let i = 0;
              const getUint8 = typeof input === 'string' ? getUint8ForString : getUint8ForArray;

              while (l >= 4) {
                let k = getUint8.call(input, i) & 0xff | (getUint8.call(input, ++i) & 0xff) << 8 | (getUint8.call(input, ++i) & 0xff) << 16 | (getUint8.call(input, ++i) & 0xff) << 24;
                k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
                k ^= k >>> 24;
                k = (k & 0xffff) * 0x5bd1e995 + (((k >>> 16) * 0x5bd1e995 & 0xffff) << 16);
                h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16) ^ k;
                l -= 4;
                ++i;
              }

              switch (l) {
                case 3:
                  h ^= (getUint8.call(input, i + 2) & 0xff) << 16;

                case 2:
                  h ^= (getUint8.call(input, i + 1) & 0xff) << 8;

                case 1:
                  h ^= getUint8.call(input, i) & 0xff;
                  h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
              }

              h ^= h >>> 13;
              h = (h & 0xffff) * 0x5bd1e995 + (((h >>> 16) * 0x5bd1e995 & 0xffff) << 16);
              h ^= h >>> 15;
              return h >>> 0;
            }

            class Shader extends Obj {
              get id() {
                return this._id;
              }

              get name() {
                return this._name;
              }

              get attributes() {
                return this._attributes;
              }

              get blocks() {
                return this._blocks;
              }

              get samplers() {
                return this._samplers;
              }

              constructor(device) {
                super(ObjectType.SHADER);
                this._device = void 0;
                this._id = void 0;
                this._name = '';
                this._stages = [];
                this._attributes = [];
                this._blocks = [];
                this._samplers = [];
                this._device = device;
                this._id = Shader._shaderIdGen++;
              }

            } exports('aN', Shader);
            Shader._shaderIdGen = 0;

            class Texture extends Obj {
              get type() {
                return this._type;
              }

              get usage() {
                return this._usage;
              }

              get format() {
                return this._format;
              }

              get width() {
                return this._width;
              }

              get height() {
                return this._height;
              }

              get depth() {
                return this._depth;
              }

              get layerCount() {
                return this._layerCount;
              }

              get levelCount() {
                return this._levelCount;
              }

              get samples() {
                return this._samples;
              }

              get flags() {
                return this._flags;
              }

              get size() {
                return this._size;
              }

              constructor(device) {
                super(ObjectType.TEXTURE);
                this._device = void 0;
                this._type = TextureType.TEX2D;
                this._usage = TextureUsageBit.NONE;
                this._format = Format.UNKNOWN;
                this._width = 0;
                this._height = 0;
                this._depth = 1;
                this._layerCount = 1;
                this._levelCount = 1;
                this._samples = SampleCount.X1;
                this._flags = TextureFlagBit.NONE;
                this._isPowerOf2 = false;
                this._size = 0;
                this._device = device;
              }

            } exports('aO', Texture);

            const customMappings = {
              Obj: 'GFXObject',
              DRAW_INFO_SIZE: 'GFX_DRAW_INFO_SIZE',
              DESCRIPTOR_BUFFER_TYPE: '',
              DESCRIPTOR_SAMPLER_TYPE: '',
              DESCRIPTOR_DYNAMIC_TYPE: '',
              getTypedArrayConstructor: ''
            };

            for (const api in legacyCC.gfx) {
              if (api === '__esModule') continue;
              let deprecated = customMappings[api];

              if (deprecated === '') {
                deprecated = api;
              } else if (deprecated === undefined) {
                deprecated = `GFX${api}`;
              }

              replaceProperty(legacyCC, 'cc', [{
                name: deprecated,
                newName: api,
                target: legacyCC.gfx,
                targetName: 'cc.gfx'
              }]);
            }

            const polyfillCC = Object.assign({}, defines);
            polyfillCC.Device = gfx.Device;
            polyfillCC.Buffer = gfx.Buffer;
            polyfillCC.Texture = gfx.Texture;
            polyfillCC.Sampler = gfx.Sampler;
            polyfillCC.Shader = gfx.Shader;
            polyfillCC.InputAssembler = gfx.InputAssembler;
            polyfillCC.RenderPass = gfx.RenderPass;
            polyfillCC.Framebuffer = gfx.Framebuffer;
            polyfillCC.DescriptorSet = gfx.DescriptorSet;
            polyfillCC.DescriptorSetLayout = gfx.DescriptorSetLayout;
            polyfillCC.PipelineLayout = gfx.PipelineLayout;
            polyfillCC.PipelineState = gfx.PipelineState;
            polyfillCC.CommandBuffer = gfx.CommandBuffer;
            polyfillCC.Queue = gfx.Queue;
            legacyCC.gfx = polyfillCC;
            const Attribute$1 = exports('al', gfx.Attribute);
            const BlendTarget$1 = exports('aP', BlendTarget);
            const BlendState$1 = exports('aQ', BlendState);
            const RasterizerState$1 = exports('aR', RasterizerState);
            const DepthStencilState$1 = exports('aS', DepthStencilState);
            const PipelineState$1 = exports('aT', PipelineState);
            const PipelineStateInfo$1 = exports('aU', PipelineStateInfo);
            polyfillCC.BlendTarget = BlendTarget;
            polyfillCC.BlendState = BlendState;
            polyfillCC.RasterizerState = RasterizerState;
            polyfillCC.DepthStencilState = DepthStencilState;
            polyfillCC.PipelineStateInfo = PipelineStateInfo;

            let ERaycastMode;

            (function (ERaycastMode) {
              ERaycastMode[ERaycastMode["ALL"] = 0] = "ALL";
              ERaycastMode[ERaycastMode["CLOSEST"] = 1] = "CLOSEST";
              ERaycastMode[ERaycastMode["ANY"] = 2] = "ANY";
            })(ERaycastMode || (ERaycastMode = {}));

            const rayPlane = function () {
              const pt = new Vec3(0, 0, 0);
              return function (ray, plane) {
                const denom = Vec3.dot(ray.d, plane.n);

                if (Math.abs(denom) < Number.EPSILON) {
                  return 0;
                }

                Vec3.multiplyScalar(pt, plane.n, plane.d);
                const t = Vec3.dot(Vec3.subtract(pt, pt, ray.o), plane.n) / denom;

                if (t < 0) {
                  return 0;
                }

                return t;
              };
            }();

            const rayTriangle = function () {
              const ab = new Vec3(0, 0, 0);
              const ac = new Vec3(0, 0, 0);
              const pvec = new Vec3(0, 0, 0);
              const tvec = new Vec3(0, 0, 0);
              const qvec = new Vec3(0, 0, 0);
              return function (ray, triangle, doubleSided) {
                Vec3.subtract(ab, triangle.b, triangle.a);
                Vec3.subtract(ac, triangle.c, triangle.a);
                Vec3.cross(pvec, ray.d, ac);
                const det = Vec3.dot(ab, pvec);

                if (det < Number.EPSILON && (!doubleSided || det > -Number.EPSILON)) {
                  return 0;
                }

                const inv_det = 1 / det;
                Vec3.subtract(tvec, ray.o, triangle.a);
                const u = Vec3.dot(tvec, pvec) * inv_det;

                if (u < 0 || u > 1) {
                  return 0;
                }

                Vec3.cross(qvec, tvec, ab);
                const v = Vec3.dot(ray.d, qvec) * inv_det;

                if (v < 0 || u + v > 1) {
                  return 0;
                }

                const t = Vec3.dot(ac, qvec) * inv_det;
                return t < 0 ? 0 : t;
              };
            }();

            const raySphere = function () {
              const e = new Vec3(0, 0, 0);
              return function (ray, sphere) {
                const r = sphere.radius;
                const c = sphere.center;
                const o = ray.o;
                const d = ray.d;
                const rSq = r * r;
                Vec3.subtract(e, c, o);
                const eSq = e.lengthSqr();
                const aLength = Vec3.dot(e, d);
                const fSq = rSq - (eSq - aLength * aLength);

                if (fSq < 0) {
                  return 0;
                }

                const f = Math.sqrt(fSq);
                const t = eSq < rSq ? aLength + f : aLength - f;

                if (t < 0) {
                  return 0;
                }

                return t;
              };
            }();

            const rayAABB = function () {
              const min = new Vec3();
              const max = new Vec3();
              return function (ray, aabb) {
                Vec3.subtract(min, aabb.center, aabb.halfExtents);
                Vec3.add(max, aabb.center, aabb.halfExtents);
                return rayAABB2(ray, min, max);
              };
            }();

            function rayAABB2(ray, min, max) {
              const o = ray.o;
              const d = ray.d;
              const ix = 1 / d.x;
              const iy = 1 / d.y;
              const iz = 1 / d.z;
              const t1 = (min.x - o.x) * ix;
              const t2 = (max.x - o.x) * ix;
              const t3 = (min.y - o.y) * iy;
              const t4 = (max.y - o.y) * iy;
              const t5 = (min.z - o.z) * iz;
              const t6 = (max.z - o.z) * iz;
              const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));
              const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6));

              if (tmax < 0 || tmin > tmax) {
                return 0;
              }

              return tmin > 0 ? tmin : tmax;
            }

            const rayOBB = function () {
              let center = new Vec3();
              let o = new Vec3();
              let d = new Vec3();
              const X = new Vec3();
              const Y = new Vec3();
              const Z = new Vec3();
              const p = new Vec3();
              const size = new Array(3);
              const f = new Array(3);
              const e = new Array(3);
              const t = new Array(6);
              return function (ray, obb) {
                size[0] = obb.halfExtents.x;
                size[1] = obb.halfExtents.y;
                size[2] = obb.halfExtents.z;
                center = obb.center;
                o = ray.o;
                d = ray.d;
                Vec3.set(X, obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);
                Vec3.set(Y, obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);
                Vec3.set(Z, obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);
                Vec3.subtract(p, center, o);
                f[0] = Vec3.dot(X, d);
                f[1] = Vec3.dot(Y, d);
                f[2] = Vec3.dot(Z, d);
                e[0] = Vec3.dot(X, p);
                e[1] = Vec3.dot(Y, p);
                e[2] = Vec3.dot(Z, p);

                for (let i = 0; i < 3; ++i) {
                  if (f[i] === 0) {
                    if (-e[i] - size[i] > 0 || -e[i] + size[i] < 0) {
                      return 0;
                    }

                    f[i] = 0.0000001;
                  }

                  t[i * 2 + 0] = (e[i] + size[i]) / f[i];
                  t[i * 2 + 1] = (e[i] - size[i]) / f[i];
                }

                const tmin = Math.max(Math.max(Math.min(t[0], t[1]), Math.min(t[2], t[3])), Math.min(t[4], t[5]));
                const tmax = Math.min(Math.min(Math.max(t[0], t[1]), Math.max(t[2], t[3])), Math.max(t[4], t[5]));

                if (tmax < 0 || tmin > tmax) {
                  return 0;
                }

                return tmin > 0 ? tmin : tmax;
              };
            }();

            const rayCapsule = function () {
              const v3_0 = new Vec3();
              const v3_1 = new Vec3();
              const v3_2 = new Vec3();
              const v3_3 = new Vec3();
              const v3_4 = new Vec3();
              const v3_5 = new Vec3();
              const v3_6 = new Vec3();
              const sphere_0 = new Sphere();
              return function (ray, capsule) {
                const radiusSqr = capsule.radius * capsule.radius;
                const vRayNorm = Vec3.normalize(v3_0, ray.d);
                const A = capsule.ellipseCenter0;
                const B = capsule.ellipseCenter1;
                const BA = Vec3.subtract(v3_1, B, A);

                if (BA.equals(Vec3.ZERO)) {
                  sphere_0.radius = capsule.radius;
                  sphere_0.center.set(capsule.ellipseCenter0);
                  return intersect.raySphere(ray, sphere_0);
                }

                const O = ray.o;
                const OA = Vec3.subtract(v3_2, O, A);
                const VxBA = Vec3.cross(v3_3, vRayNorm, BA);
                const a = VxBA.lengthSqr();

                if (a === 0) {
                  sphere_0.radius = capsule.radius;
                  const BO = Vec3.subtract(v3_4, B, O);

                  if (OA.lengthSqr() < BO.lengthSqr()) {
                    sphere_0.center.set(capsule.ellipseCenter0);
                  } else {
                    sphere_0.center.set(capsule.ellipseCenter1);
                  }

                  return intersect.raySphere(ray, sphere_0);
                }

                const OAxBA = Vec3.cross(v3_4, OA, BA);
                const ab2 = BA.lengthSqr();
                const b = 2 * Vec3.dot(VxBA, OAxBA);
                const c = OAxBA.lengthSqr() - radiusSqr * ab2;
                const d = b * b - 4 * a * c;

                if (d < 0) {
                  return 0;
                }

                const t = (-b - Math.sqrt(d)) / (2 * a);

                if (t < 0) {
                  sphere_0.radius = capsule.radius;
                  const BO = Vec3.subtract(v3_5, B, O);

                  if (OA.lengthSqr() < BO.lengthSqr()) {
                    sphere_0.center.set(capsule.ellipseCenter0);
                  } else {
                    sphere_0.center.set(capsule.ellipseCenter1);
                  }

                  return intersect.raySphere(ray, sphere_0);
                } else {
                  const iPos = Vec3.scaleAndAdd(v3_5, ray.o, vRayNorm, t);
                  const iPosLen = Vec3.subtract(v3_6, iPos, A);
                  const tLimit = Vec3.dot(iPosLen, BA) / ab2;

                  if (tLimit >= 0 && tLimit <= 1) {
                    return t;
                  } else if (tLimit < 0) {
                    sphere_0.radius = capsule.radius;
                    sphere_0.center.set(capsule.ellipseCenter0);
                    return intersect.raySphere(ray, sphere_0);
                  } else if (tLimit > 1) {
                    sphere_0.radius = capsule.radius;
                    sphere_0.center.set(capsule.ellipseCenter1);
                    return intersect.raySphere(ray, sphere_0);
                  } else {
                    return 0;
                  }
                }
              };
            }();

            const raySubMesh = function () {
              const tri = Triangle.create();
              const deOpt = {
                distance: Infinity,
                doubleSided: false,
                mode: ERaycastMode.ANY
              };
              let minDis = 0;

              const fillResult = (m, d, i0, i1, i2, r) => {
                if (m === ERaycastMode.CLOSEST) {
                  if (minDis > d || minDis === 0) {
                    minDis = d;

                    if (r) {
                      if (r.length === 0) {
                        r.push({
                          distance: d,
                          vertexIndex0: i0 / 3,
                          vertexIndex1: i1 / 3,
                          vertexIndex2: i2 / 3
                        });
                      } else {
                        r[0].distance = d;
                        r[0].vertexIndex0 = i0 / 3;
                        r[0].vertexIndex1 = i1 / 3;
                        r[0].vertexIndex2 = i2 / 3;
                      }
                    }
                  }
                } else {
                  minDis = d;
                  if (r) r.push({
                    distance: d,
                    vertexIndex0: i0 / 3,
                    vertexIndex1: i1 / 3,
                    vertexIndex2: i2 / 3
                  });
                }
              };

              const narrowphase = (vb, ib, pm, ray, opt) => {
                if (pm === PrimitiveMode.TRIANGLE_LIST) {
                  const cnt = ib.length;

                  for (let j = 0; j < cnt; j += 3) {
                    const i0 = ib[j] * 3;
                    const i1 = ib[j + 1] * 3;
                    const i2 = ib[j + 2] * 3;
                    Vec3.set(tri.a, vb[i0], vb[i0 + 1], vb[i0 + 2]);
                    Vec3.set(tri.b, vb[i1], vb[i1 + 1], vb[i1 + 2]);
                    Vec3.set(tri.c, vb[i2], vb[i2 + 1], vb[i2 + 2]);
                    const dist = intersect.rayTriangle(ray, tri, opt.doubleSided);
                    if (dist === 0 || dist > opt.distance) continue;
                    fillResult(opt.mode, dist, i0, i1, i2, opt.result);
                    if (opt.mode === ERaycastMode.ANY) return dist;
                  }
                } else if (pm === PrimitiveMode.TRIANGLE_STRIP) {
                  const cnt = ib.length - 2;
                  let rev = 0;

                  for (let j = 0; j < cnt; j += 1) {
                    const i0 = ib[j - rev] * 3;
                    const i1 = ib[j + rev + 1] * 3;
                    const i2 = ib[j + 2] * 3;
                    Vec3.set(tri.a, vb[i0], vb[i0 + 1], vb[i0 + 2]);
                    Vec3.set(tri.b, vb[i1], vb[i1 + 1], vb[i1 + 2]);
                    Vec3.set(tri.c, vb[i2], vb[i2 + 1], vb[i2 + 2]);
                    rev = ~rev;
                    const dist = intersect.rayTriangle(ray, tri, opt.doubleSided);
                    if (dist === 0 || dist > opt.distance) continue;
                    fillResult(opt.mode, dist, i0, i1, i2, opt.result);
                    if (opt.mode === ERaycastMode.ANY) return dist;
                  }
                } else if (pm === PrimitiveMode.TRIANGLE_FAN) {
                  const cnt = ib.length - 1;
                  const i0 = ib[0] * 3;
                  Vec3.set(tri.a, vb[i0], vb[i0 + 1], vb[i0 + 2]);

                  for (let j = 1; j < cnt; j += 1) {
                    const i1 = ib[j] * 3;
                    const i2 = ib[j + 1] * 3;
                    Vec3.set(tri.b, vb[i1], vb[i1 + 1], vb[i1 + 2]);
                    Vec3.set(tri.c, vb[i2], vb[i2 + 1], vb[i2 + 2]);
                    const dist = intersect.rayTriangle(ray, tri, opt.doubleSided);
                    if (dist === 0 || dist > opt.distance) continue;
                    fillResult(opt.mode, dist, i0, i1, i2, opt.result);
                    if (opt.mode === ERaycastMode.ANY) return dist;
                  }
                }

                return minDis;
              };

              return function (ray, submesh, options) {
                minDis = 0;
                if (submesh.geometricInfo.positions.length === 0) return minDis;
                const opt = options === undefined ? deOpt : options;
                const min = submesh.geometricInfo.boundingBox.min;
                const max = submesh.geometricInfo.boundingBox.max;

                if (rayAABB2(ray, min, max)) {
                  const pm = submesh.primitiveMode;
                  const {
                    positions: vb,
                    indices: ib
                  } = submesh.geometricInfo;
                  narrowphase(vb, ib, pm, ray, opt);
                }

                return minDis;
              };
            }();

            const rayMesh = function () {
              let minDis = 0;
              const deOpt = {
                distance: Infinity,
                doubleSided: false,
                mode: ERaycastMode.ANY
              };
              return function (ray, mesh, options) {
                minDis = 0;
                const opt = options === undefined ? deOpt : options;
                const length = mesh.renderingSubMeshes.length;
                const min = mesh.struct.minPosition;
                const max = mesh.struct.maxPosition;
                if (min && max && !rayAABB2(ray, min, max)) return minDis;

                for (let i = 0; i < length; i++) {
                  const sm = mesh.renderingSubMeshes[i];
                  const dis = raySubMesh(ray, sm, opt);

                  if (dis) {
                    if (opt.mode === ERaycastMode.CLOSEST) {
                      if (minDis === 0 || minDis > dis) {
                        minDis = dis;
                        if (opt.subIndices) opt.subIndices[0] = i;
                      }
                    } else {
                      minDis = dis;
                      if (opt.subIndices) opt.subIndices.push(i);

                      if (opt.mode === ERaycastMode.ANY) {
                        return dis;
                      }
                    }
                  }
                }

                if (minDis && opt.mode === ERaycastMode.CLOSEST) {
                  if (opt.result) {
                    opt.result[0].distance = minDis;
                    opt.result.length = 1;
                  }

                  if (opt.subIndices) opt.subIndices.length = 1;
                }

                return minDis;
              };
            }();

            const rayModel = function () {
              let minDis = 0;
              const deOpt = {
                distance: Infinity,
                doubleSided: false,
                mode: ERaycastMode.ANY
              };
              const modelRay = new Ray();
              const m4 = new Mat4();
              return function (r, model, options) {
                minDis = 0;
                const opt = options === undefined ? deOpt : options;
                const wb = model.worldBounds;
                if (wb && !rayAABB(r, wb)) return minDis;
                Ray.copy(modelRay, r);

                if (model.node) {
                  Mat4.invert(m4, model.node.getWorldMatrix(m4));
                  Vec3.transformMat4(modelRay.o, r.o, m4);
                  Vec3.transformMat4Normal(modelRay.d, r.d, m4);
                }

                const subModels = model.subModels;

                for (let i = 0; i < subModels.length; i++) {
                  const subMesh = subModels[i].subMesh;
                  const dis = raySubMesh(modelRay, subMesh, opt);

                  if (dis) {
                    if (opt.mode === ERaycastMode.CLOSEST) {
                      if (minDis === 0 || minDis > dis) {
                        minDis = dis;
                        if (opt.subIndices) opt.subIndices[0] = i;
                      }
                    } else {
                      minDis = dis;
                      if (opt.subIndices) opt.subIndices.push(i);

                      if (opt.mode === ERaycastMode.ANY) {
                        return dis;
                      }
                    }
                  }
                }

                if (minDis && opt.mode === ERaycastMode.CLOSEST) {
                  if (opt.result) {
                    opt.result[0].distance = minDis;
                    opt.result.length = 1;
                  }

                  if (opt.subIndices) opt.subIndices.length = 1;
                }

                return minDis;
              };
            }();

            const linePlane = function () {
              const ab = new Vec3(0, 0, 0);
              return function (line, plane) {
                Vec3.subtract(ab, line.e, line.s);
                const t = (plane.d - Vec3.dot(line.s, plane.n)) / Vec3.dot(ab, plane.n);

                if (t < 0 || t > 1) {
                  return 0;
                }

                return t;
              };
            }();

            const lineTriangle = function () {
              const ab = new Vec3(0, 0, 0);
              const ac = new Vec3(0, 0, 0);
              const qp = new Vec3(0, 0, 0);
              const ap = new Vec3(0, 0, 0);
              const n = new Vec3(0, 0, 0);
              const e = new Vec3(0, 0, 0);
              return function (line, triangle, outPt) {
                Vec3.subtract(ab, triangle.b, triangle.a);
                Vec3.subtract(ac, triangle.c, triangle.a);
                Vec3.subtract(qp, line.s, line.e);
                Vec3.cross(n, ab, ac);
                const det = Vec3.dot(qp, n);

                if (det <= 0.0) {
                  return 0;
                }

                Vec3.subtract(ap, line.s, triangle.a);
                const t = Vec3.dot(ap, n);

                if (t < 0 || t > det) {
                  return 0;
                }

                Vec3.cross(e, qp, ap);
                let v = Vec3.dot(ac, e);

                if (v < 0 || v > det) {
                  return 0;
                }

                let w = -Vec3.dot(ab, e);

                if (w < 0.0 || v + w > det) {
                  return 0;
                }

                if (outPt) {
                  const invDet = 1.0 / det;
                  v *= invDet;
                  w *= invDet;
                  const u = 1.0 - v - w;
                  Vec3.set(outPt, triangle.a.x * u + triangle.b.x * v + triangle.c.x * w, triangle.a.y * u + triangle.b.y * v + triangle.c.y * w, triangle.a.z * u + triangle.b.z * v + triangle.c.z * w);
                }

                return 1;
              };
            }();

            const r_t = new Ray();

            function lineAABB(line, aabb) {
              r_t.o.set(line.s);
              Vec3.subtract(r_t.d, line.e, line.s);
              r_t.d.normalize();
              const min = rayAABB(r_t, aabb);
              const len = line.length();

              if (min <= len) {
                return min;
              } else {
                return 0;
              }
            }

            function lineOBB(line, obb) {
              r_t.o.set(line.s);
              Vec3.subtract(r_t.d, line.e, line.s);
              r_t.d.normalize();
              const min = rayOBB(r_t, obb);
              const len = line.length();

              if (min <= len) {
                return min;
              } else {
                return 0;
              }
            }

            function lineSphere(line, sphere) {
              r_t.o.set(line.s);
              Vec3.subtract(r_t.d, line.e, line.s);
              r_t.d.normalize();
              const min = raySphere(r_t, sphere);
              const len = line.length();

              if (min <= len) {
                return min;
              } else {
                return 0;
              }
            }

            const aabbWithAABB = function () {
              const aMin = new Vec3();
              const aMax = new Vec3();
              const bMin = new Vec3();
              const bMax = new Vec3();
              return function (aabb1, aabb2) {
                Vec3.subtract(aMin, aabb1.center, aabb1.halfExtents);
                Vec3.add(aMax, aabb1.center, aabb1.halfExtents);
                Vec3.subtract(bMin, aabb2.center, aabb2.halfExtents);
                Vec3.add(bMax, aabb2.center, aabb2.halfExtents);
                return aMin.x <= bMax.x && aMax.x >= bMin.x && aMin.y <= bMax.y && aMax.y >= bMin.y && aMin.z <= bMax.z && aMax.z >= bMin.z;
              };
            }();

            function getAABBVertices(min, max, out) {
              Vec3.set(out[0], min.x, max.y, max.z);
              Vec3.set(out[1], min.x, max.y, min.z);
              Vec3.set(out[2], min.x, min.y, max.z);
              Vec3.set(out[3], min.x, min.y, min.z);
              Vec3.set(out[4], max.x, max.y, max.z);
              Vec3.set(out[5], max.x, max.y, min.z);
              Vec3.set(out[6], max.x, min.y, max.z);
              Vec3.set(out[7], max.x, min.y, min.z);
            }

            function getOBBVertices(c, e, a1, a2, a3, out) {
              Vec3.set(out[0], c.x + a1.x * e.x + a2.x * e.y + a3.x * e.z, c.y + a1.y * e.x + a2.y * e.y + a3.y * e.z, c.z + a1.z * e.x + a2.z * e.y + a3.z * e.z);
              Vec3.set(out[1], c.x - a1.x * e.x + a2.x * e.y + a3.x * e.z, c.y - a1.y * e.x + a2.y * e.y + a3.y * e.z, c.z - a1.z * e.x + a2.z * e.y + a3.z * e.z);
              Vec3.set(out[2], c.x + a1.x * e.x - a2.x * e.y + a3.x * e.z, c.y + a1.y * e.x - a2.y * e.y + a3.y * e.z, c.z + a1.z * e.x - a2.z * e.y + a3.z * e.z);
              Vec3.set(out[3], c.x + a1.x * e.x + a2.x * e.y - a3.x * e.z, c.y + a1.y * e.x + a2.y * e.y - a3.y * e.z, c.z + a1.z * e.x + a2.z * e.y - a3.z * e.z);
              Vec3.set(out[4], c.x - a1.x * e.x - a2.x * e.y - a3.x * e.z, c.y - a1.y * e.x - a2.y * e.y - a3.y * e.z, c.z - a1.z * e.x - a2.z * e.y - a3.z * e.z);
              Vec3.set(out[5], c.x + a1.x * e.x - a2.x * e.y - a3.x * e.z, c.y + a1.y * e.x - a2.y * e.y - a3.y * e.z, c.z + a1.z * e.x - a2.z * e.y - a3.z * e.z);
              Vec3.set(out[6], c.x - a1.x * e.x + a2.x * e.y - a3.x * e.z, c.y - a1.y * e.x + a2.y * e.y - a3.y * e.z, c.z - a1.z * e.x + a2.z * e.y - a3.z * e.z);
              Vec3.set(out[7], c.x - a1.x * e.x - a2.x * e.y + a3.x * e.z, c.y - a1.y * e.x - a2.y * e.y + a3.y * e.z, c.z - a1.z * e.x - a2.z * e.y + a3.z * e.z);
            }

            function getInterval(vertices, axis) {
              let min = Vec3.dot(axis, vertices[0]);
              let max = min;

              for (let i = 1; i < 8; ++i) {
                const projection = Vec3.dot(axis, vertices[i]);
                min = projection < min ? projection : min;
                max = projection > max ? projection : max;
              }

              return [min, max];
            }

            const aabbWithOBB = function () {
              const test = new Array(15);

              for (let i = 0; i < 15; i++) {
                test[i] = new Vec3(0, 0, 0);
              }

              const vertices = new Array(8);
              const vertices2 = new Array(8);

              for (let i = 0; i < 8; i++) {
                vertices[i] = new Vec3(0, 0, 0);
                vertices2[i] = new Vec3(0, 0, 0);
              }

              const min = new Vec3();
              const max = new Vec3();
              return function (aabb, obb) {
                Vec3.set(test[0], 1, 0, 0);
                Vec3.set(test[1], 0, 1, 0);
                Vec3.set(test[2], 0, 0, 1);
                Vec3.set(test[3], obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);
                Vec3.set(test[4], obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);
                Vec3.set(test[5], obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);

                for (let i = 0; i < 3; ++i) {
                  Vec3.cross(test[6 + i * 3 + 0], test[i], test[0]);
                  Vec3.cross(test[6 + i * 3 + 1], test[i], test[1]);
                  Vec3.cross(test[6 + i * 3 + 1], test[i], test[2]);
                }

                Vec3.subtract(min, aabb.center, aabb.halfExtents);
                Vec3.add(max, aabb.center, aabb.halfExtents);
                getAABBVertices(min, max, vertices);
                getOBBVertices(obb.center, obb.halfExtents, test[3], test[4], test[5], vertices2);

                for (let j = 0; j < 15; ++j) {
                  const a = getInterval(vertices, test[j]);
                  const b = getInterval(vertices2, test[j]);

                  if (b[0] > a[1] || a[0] > b[1]) {
                    return 0;
                  }
                }

                return 1;
              };
            }();

            const aabbPlane = function (aabb, plane) {
              const r = aabb.halfExtents.x * Math.abs(plane.n.x) + aabb.halfExtents.y * Math.abs(plane.n.y) + aabb.halfExtents.z * Math.abs(plane.n.z);
              const dot = Vec3.dot(plane.n, aabb.center);

              if (dot + r < plane.d) {
                return -1;
              } else if (dot - r > plane.d) {
                return 0;
              }

              return 1;
            };

            const aabbFrustum = function (aabb, frustum) {
              for (let i = 0; i < frustum.planes.length; i++) {
                if (aabbPlane(aabb, frustum.planes[i]) === -1) {
                  return 0;
                }
              }

              return 1;
            };

            const aabbFrustumAccurate = function () {
              const tmp = new Array(8);
              let out1 = 0;
              let out2 = 0;

              for (let i = 0; i < tmp.length; i++) {
                tmp[i] = new Vec3(0, 0, 0);
              }

              return function (aabb, frustum) {
                let result = 0;
                let intersects = false;

                for (let i = 0; i < frustum.planes.length; i++) {
                  result = aabbPlane(aabb, frustum.planes[i]);

                  if (result === -1) {
                    return 0;
                  } else if (result === 1) {
                      intersects = true;
                    }
                }

                if (!intersects) {
                  return 1;
                }

                for (let i = 0; i < frustum.vertices.length; i++) {
                  Vec3.subtract(tmp[i], frustum.vertices[i], aabb.center);
                }

                out1 = 0, out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  if (tmp[i].x > aabb.halfExtents.x) {
                    out1++;
                  } else if (tmp[i].x < -aabb.halfExtents.x) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                out1 = 0;
                out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  if (tmp[i].y > aabb.halfExtents.y) {
                    out1++;
                  } else if (tmp[i].y < -aabb.halfExtents.y) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                out1 = 0;
                out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  if (tmp[i].z > aabb.halfExtents.z) {
                    out1++;
                  } else if (tmp[i].z < -aabb.halfExtents.z) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                return 1;
              };
            }();

            const obbPoint = function () {
              const tmp = new Vec3(0, 0, 0);
              const m3 = new Mat3();

              const lessThan = function (a, b) {
                return Math.abs(a.x) < b.x && Math.abs(a.y) < b.y && Math.abs(a.z) < b.z;
              };

              return function (obb, point) {
                Vec3.subtract(tmp, point, obb.center);
                Vec3.transformMat3(tmp, tmp, Mat3.transpose(m3, obb.orientation));
                return lessThan(tmp, obb.halfExtents);
              };
            }();

            const obbPlane = function () {
              const absDot = function (n, x, y, z) {
                return Math.abs(n.x * x + n.y * y + n.z * z);
              };

              return function (obb, plane) {
                const r = obb.halfExtents.x * absDot(plane.n, obb.orientation.m00, obb.orientation.m01, obb.orientation.m02) + obb.halfExtents.y * absDot(plane.n, obb.orientation.m03, obb.orientation.m04, obb.orientation.m05) + obb.halfExtents.z * absDot(plane.n, obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);
                const dot = Vec3.dot(plane.n, obb.center);

                if (dot + r < plane.d) {
                  return -1;
                } else if (dot - r > plane.d) {
                  return 0;
                }

                return 1;
              };
            }();

            const obbFrustum = function (obb, frustum) {
              for (let i = 0; i < frustum.planes.length; i++) {
                if (obbPlane(obb, frustum.planes[i]) === -1) {
                  return 0;
                }
              }

              return 1;
            };

            const obbFrustumAccurate = function () {
              const tmp = new Array(8);
              let dist = 0;
              let out1 = 0;
              let out2 = 0;

              for (let i = 0; i < tmp.length; i++) {
                tmp[i] = new Vec3(0, 0, 0);
              }

              const dot = function (n, x, y, z) {
                return n.x * x + n.y * y + n.z * z;
              };

              return function (obb, frustum) {
                let result = 0;
                let intersects = false;

                for (let i = 0; i < frustum.planes.length; i++) {
                  result = obbPlane(obb, frustum.planes[i]);

                  if (result === -1) {
                    return 0;
                  } else if (result === 1) {
                      intersects = true;
                    }
                }

                if (!intersects) {
                  return 1;
                }

                for (let i = 0; i < frustum.vertices.length; i++) {
                  Vec3.subtract(tmp[i], frustum.vertices[i], obb.center);
                }

                out1 = 0, out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  dist = dot(tmp[i], obb.orientation.m00, obb.orientation.m01, obb.orientation.m02);

                  if (dist > obb.halfExtents.x) {
                    out1++;
                  } else if (dist < -obb.halfExtents.x) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                out1 = 0;
                out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  dist = dot(tmp[i], obb.orientation.m03, obb.orientation.m04, obb.orientation.m05);

                  if (dist > obb.halfExtents.y) {
                    out1++;
                  } else if (dist < -obb.halfExtents.y) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                out1 = 0;
                out2 = 0;

                for (let i = 0; i < frustum.vertices.length; i++) {
                  dist = dot(tmp[i], obb.orientation.m06, obb.orientation.m07, obb.orientation.m08);

                  if (dist > obb.halfExtents.z) {
                    out1++;
                  } else if (dist < -obb.halfExtents.z) {
                    out2++;
                  }
                }

                if (out1 === frustum.vertices.length || out2 === frustum.vertices.length) {
                  return 0;
                }

                return 1;
              };
            }();

            const obbWithOBB = function () {
              const test = new Array(15);

              for (let i = 0; i < 15; i++) {
                test[i] = new Vec3(0, 0, 0);
              }

              const vertices = new Array(8);
              const vertices2 = new Array(8);

              for (let i = 0; i < 8; i++) {
                vertices[i] = new Vec3(0, 0, 0);
                vertices2[i] = new Vec3(0, 0, 0);
              }

              return function (obb1, obb2) {
                Vec3.set(test[0], obb1.orientation.m00, obb1.orientation.m01, obb1.orientation.m02);
                Vec3.set(test[1], obb1.orientation.m03, obb1.orientation.m04, obb1.orientation.m05);
                Vec3.set(test[2], obb1.orientation.m06, obb1.orientation.m07, obb1.orientation.m08);
                Vec3.set(test[3], obb2.orientation.m00, obb2.orientation.m01, obb2.orientation.m02);
                Vec3.set(test[4], obb2.orientation.m03, obb2.orientation.m04, obb2.orientation.m05);
                Vec3.set(test[5], obb2.orientation.m06, obb2.orientation.m07, obb2.orientation.m08);

                for (let i = 0; i < 3; ++i) {
                  Vec3.cross(test[6 + i * 3 + 0], test[i], test[0]);
                  Vec3.cross(test[6 + i * 3 + 1], test[i], test[1]);
                  Vec3.cross(test[6 + i * 3 + 1], test[i], test[2]);
                }

                getOBBVertices(obb1.center, obb1.halfExtents, test[0], test[1], test[2], vertices);
                getOBBVertices(obb2.center, obb2.halfExtents, test[3], test[4], test[5], vertices2);

                for (let i = 0; i < 15; ++i) {
                  const a = getInterval(vertices, test[i]);
                  const b = getInterval(vertices2, test[i]);

                  if (b[0] > a[1] || a[0] > b[1]) {
                    return 0;
                  }
                }

                return 1;
              };
            }();

            const obbCapsule = function () {
              const sphere_0 = new Sphere();
              const v3_0 = new Vec3();
              const v3_1 = new Vec3();
              const v3_2 = new Vec3();
              const v3_verts8 = new Array(8);

              for (let i = 0; i < 8; i++) {
                v3_verts8[i] = new Vec3();
              }

              const v3_axis8 = new Array(8);

              for (let i = 0; i < 8; i++) {
                v3_axis8[i] = new Vec3();
              }

              return function (obb, capsule) {
                const h = Vec3.squaredDistance(capsule.ellipseCenter0, capsule.ellipseCenter1);

                if (h === 0) {
                  sphere_0.radius = capsule.radius;
                  sphere_0.center.set(capsule.ellipseCenter0);
                  return intersect.sphereOBB(sphere_0, obb);
                } else {
                  v3_0.x = obb.orientation.m00;
                  v3_0.y = obb.orientation.m01;
                  v3_0.z = obb.orientation.m02;
                  v3_1.x = obb.orientation.m03;
                  v3_1.y = obb.orientation.m04;
                  v3_1.z = obb.orientation.m05;
                  v3_2.x = obb.orientation.m06;
                  v3_2.y = obb.orientation.m07;
                  v3_2.z = obb.orientation.m08;
                  getOBBVertices(obb.center, obb.halfExtents, v3_0, v3_1, v3_2, v3_verts8);
                  const axes = v3_axis8;
                  const a0 = Vec3.copy(axes[0], v3_0);
                  const a1 = Vec3.copy(axes[1], v3_1);
                  const a2 = Vec3.copy(axes[2], v3_2);
                  const C = Vec3.subtract(axes[3], capsule.center, obb.center);
                  C.normalize();
                  const B = Vec3.subtract(axes[4], capsule.ellipseCenter0, capsule.ellipseCenter1);
                  B.normalize();
                  Vec3.cross(axes[5], a0, B);
                  Vec3.cross(axes[6], a1, B);
                  Vec3.cross(axes[7], a2, B);

                  for (let i = 0; i < 8; ++i) {
                    const a = getInterval(v3_verts8, axes[i]);
                    const d0 = Vec3.dot(axes[i], capsule.ellipseCenter0);
                    const d1 = Vec3.dot(axes[i], capsule.ellipseCenter1);
                    const max_d = Math.max(d0, d1);
                    const min_d = Math.min(d0, d1);
                    const d_min = min_d - capsule.radius;
                    const d_max = max_d + capsule.radius;

                    if (d_min > a[1] || a[0] > d_max) {
                      return 0;
                    }
                  }

                  return 1;
                }
              };
            }();

            const spherePlane = function (sphere, plane) {
              const dot = Vec3.dot(plane.n, sphere.center);
              const r = sphere.radius * plane.n.length();

              if (dot + r < plane.d) {
                return -1;
              } else if (dot - r > plane.d) {
                return 0;
              }

              return 1;
            };

            const sphereFrustum = function (sphere, frustum) {
              for (let i = 0; i < frustum.planes.length; i++) {
                if (spherePlane(sphere, frustum.planes[i]) === -1) {
                  return 0;
                }
              }

              return 1;
            };

            const sphereFrustumAccurate = function () {
              const pt = new Vec3(0, 0, 0);
              const map = [1, -1, 1, -1, 1, -1];
              return function (sphere, frustum) {
                for (let i = 0; i < 6; i++) {
                  const plane = frustum.planes[i];
                  const r = sphere.radius;
                  const c = sphere.center;
                  const n = plane.n;
                  const d = plane.d;
                  const dot = Vec3.dot(n, c);

                  if (dot + r < d) {
                    return 0;
                  } else if (dot - r > d) {
                      continue;
                    }

                  Vec3.add(pt, c, Vec3.multiplyScalar(pt, n, r));

                  for (let j = 0; j < 6; j++) {
                    if (j === i || j === i + map[i]) {
                      continue;
                    }

                    const test = frustum.planes[j];

                    if (Vec3.dot(test.n, pt) < test.d) {
                      return 0;
                    }
                  }
                }

                return 1;
              };
            }();

            const sphereWithSphere = function (sphere0, sphere1) {
              const r = sphere0.radius + sphere1.radius;
              return Vec3.squaredDistance(sphere0.center, sphere1.center) < r * r;
            };

            const sphereAABB = function () {
              const pt = new Vec3();
              return function (sphere, aabb) {
                pt_point_aabb(pt, sphere.center, aabb);
                return Vec3.squaredDistance(sphere.center, pt) < sphere.radius * sphere.radius;
              };
            }();

            const sphereOBB = function () {
              const pt = new Vec3();
              return function (sphere, obb) {
                pt_point_obb(pt, sphere.center, obb);
                return Vec3.squaredDistance(sphere.center, pt) < sphere.radius * sphere.radius;
              };
            }();

            const sphereCapsule = function () {
              const v3_0 = new Vec3();
              const v3_1 = new Vec3();
              return function (sphere, capsule) {
                const r = sphere.radius + capsule.radius;
                const squaredR = r * r;
                const h = Vec3.squaredDistance(capsule.ellipseCenter0, capsule.ellipseCenter1);

                if (h === 0) {
                  return Vec3.squaredDistance(sphere.center, capsule.center) < squaredR;
                } else {
                  Vec3.subtract(v3_0, sphere.center, capsule.ellipseCenter0);
                  Vec3.subtract(v3_1, capsule.ellipseCenter1, capsule.ellipseCenter0);
                  const t = Vec3.dot(v3_0, v3_1) / h;

                  if (t < 0) {
                    return Vec3.squaredDistance(sphere.center, capsule.ellipseCenter0) < squaredR;
                  } else if (t > 1) {
                    return Vec3.squaredDistance(sphere.center, capsule.ellipseCenter1) < squaredR;
                  } else {
                    Vec3.scaleAndAdd(v3_0, capsule.ellipseCenter0, v3_1, t);
                    return Vec3.squaredDistance(sphere.center, v3_0) < squaredR;
                  }
                }
              };
            }();

            const capsuleWithCapsule = function () {
              const v3_0 = new Vec3();
              const v3_1 = new Vec3();
              const v3_2 = new Vec3();
              const v3_3 = new Vec3();
              const v3_4 = new Vec3();
              const v3_5 = new Vec3();
              return function capsuleWithCapsule(capsuleA, capsuleB) {
                const u = Vec3.subtract(v3_0, capsuleA.ellipseCenter1, capsuleA.ellipseCenter0);
                const v = Vec3.subtract(v3_1, capsuleB.ellipseCenter1, capsuleB.ellipseCenter0);
                const w = Vec3.subtract(v3_2, capsuleA.ellipseCenter0, capsuleB.ellipseCenter0);
                const a = Vec3.dot(u, u);
                const b = Vec3.dot(u, v);
                const c = Vec3.dot(v, v);
                const d = Vec3.dot(u, w);
                const e = Vec3.dot(v, w);
                const D = a * c - b * b;
                let sc;
                let sN;
                let sD = D;
                let tc;
                let tN;
                let tD = D;

                if (D < EPSILON) {
                  sN = 0.0;
                  sD = 1.0;
                  tN = e;
                  tD = c;
                } else {
                  sN = b * e - c * d;
                  tN = a * e - b * d;

                  if (sN < 0.0) {
                    sN = 0.0;
                    tN = e;
                    tD = c;
                  } else if (sN > sD) {
                    sN = sD;
                    tN = e + b;
                    tD = c;
                  }
                }

                if (tN < 0.0) {
                  tN = 0.0;

                  if (-d < 0.0) {
                    sN = 0.0;
                  } else if (-d > a) {
                    sN = sD;
                  } else {
                    sN = -d;
                    sD = a;
                  }
                } else if (tN > tD) {
                  tN = tD;

                  if (-d + b < 0.0) {
                    sN = 0;
                  } else if (-d + b > a) {
                    sN = sD;
                  } else {
                    sN = -d + b;
                    sD = a;
                  }
                }

                sc = Math.abs(sN) < EPSILON ? 0.0 : sN / sD;
                tc = Math.abs(tN) < EPSILON ? 0.0 : tN / tD;
                const dP = v3_3;
                dP.set(w);
                dP.add(Vec3.multiplyScalar(v3_4, u, sc));
                dP.subtract(Vec3.multiplyScalar(v3_5, v, tc));
                const radius = capsuleA.radius + capsuleB.radius;
                return dP.lengthSqr() < radius * radius;
              };
            }();

            const intersect = {
              raySphere,
              rayAABB,
              rayOBB,
              rayPlane,
              rayTriangle,
              rayCapsule,
              raySubMesh,
              rayMesh,
              rayModel,
              lineSphere,
              lineAABB,
              lineOBB,
              linePlane,
              lineTriangle,
              sphereWithSphere,
              sphereAABB,
              sphereOBB,
              spherePlane,
              sphereFrustum,
              sphereFrustumAccurate,
              sphereCapsule,
              aabbWithAABB,
              aabbWithOBB,
              aabbPlane,
              aabbFrustum,
              aabbFrustumAccurate,
              obbWithOBB,
              obbPlane,
              obbFrustum,
              obbFrustumAccurate,
              obbPoint,
              obbCapsule,
              capsuleWithCapsule,

              resolve(g1, g2, outPt = null) {
                const type1 = g1._type;
                const type2 = g2._type;
                const resolver = this[type1 | type2];

                if (type1 < type2) {
                  return resolver(g1, g2, outPt);
                } else {
                  return resolver(g2, g1, outPt);
                }
              }

            };
            intersect[enums.SHAPE_RAY | enums.SHAPE_SPHERE] = raySphere;
            intersect[enums.SHAPE_RAY | enums.SHAPE_AABB] = rayAABB;
            intersect[enums.SHAPE_RAY | enums.SHAPE_OBB] = rayOBB;
            intersect[enums.SHAPE_RAY | enums.SHAPE_PLANE] = rayPlane;
            intersect[enums.SHAPE_RAY | enums.SHAPE_TRIANGLE] = rayTriangle;
            intersect[enums.SHAPE_RAY | enums.SHAPE_CAPSULE] = rayCapsule;
            intersect[enums.SHAPE_LINE | enums.SHAPE_SPHERE] = lineSphere;
            intersect[enums.SHAPE_LINE | enums.SHAPE_AABB] = lineAABB;
            intersect[enums.SHAPE_LINE | enums.SHAPE_OBB] = lineOBB;
            intersect[enums.SHAPE_LINE | enums.SHAPE_PLANE] = linePlane;
            intersect[enums.SHAPE_LINE | enums.SHAPE_TRIANGLE] = lineTriangle;
            intersect[enums.SHAPE_SPHERE] = sphereWithSphere;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_AABB] = sphereAABB;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_OBB] = sphereOBB;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_PLANE] = spherePlane;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_FRUSTUM] = sphereFrustum;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_FRUSTUM_ACCURATE] = sphereFrustumAccurate;
            intersect[enums.SHAPE_SPHERE | enums.SHAPE_CAPSULE] = sphereCapsule;
            intersect[enums.SHAPE_AABB] = aabbWithAABB;
            intersect[enums.SHAPE_AABB | enums.SHAPE_OBB] = aabbWithOBB;
            intersect[enums.SHAPE_AABB | enums.SHAPE_PLANE] = aabbPlane;
            intersect[enums.SHAPE_AABB | enums.SHAPE_FRUSTUM] = aabbFrustum;
            intersect[enums.SHAPE_AABB | enums.SHAPE_FRUSTUM_ACCURATE] = aabbFrustumAccurate;
            intersect[enums.SHAPE_OBB] = obbWithOBB;
            intersect[enums.SHAPE_OBB | enums.SHAPE_PLANE] = obbPlane;
            intersect[enums.SHAPE_OBB | enums.SHAPE_FRUSTUM] = obbFrustum;
            intersect[enums.SHAPE_OBB | enums.SHAPE_FRUSTUM_ACCURATE] = obbFrustumAccurate;
            intersect[enums.SHAPE_OBB | enums.SHAPE_CAPSULE] = obbCapsule;
            intersect[enums.SHAPE_CAPSULE] = capsuleWithCapsule;

            replaceProperty(Line.prototype, 'line', [{
              name: 'mag',
              newName: 'len'
            }, {
              name: 'magnitude',
              newName: 'len'
            }]);
            removeProperty(intersect, 'intersect', [{
              name: 'line_quad'
            }]);

            const v1 = new Vec3(0, 0, 0);
            const v2$1 = new Vec3(0, 0, 0);
            const temp_mat = legacyCC.mat4();
            const temp_vec4 = legacyCC.v4();
            class Plane {
              static create(nx, ny, nz, d) {
                return new Plane(nx, ny, nz, d);
              }

              static clone(p) {
                return new Plane(p.n.x, p.n.y, p.n.z, p.d);
              }

              static copy(out, p) {
                Vec3.copy(out.n, p.n);
                out.d = p.d;
                return out;
              }

              static fromPoints(out, a, b, c) {
                Vec3.subtract(v1, b, a);
                Vec3.subtract(v2$1, c, a);
                Vec3.normalize(out.n, Vec3.cross(out.n, v1, v2$1));
                out.d = Vec3.dot(out.n, a);
                return out;
              }

              static set(out, nx, ny, nz, d) {
                out.n.x = nx;
                out.n.y = ny;
                out.n.z = nz;
                out.d = d;
                return out;
              }

              static fromNormalAndPoint(out, normal, point) {
                Vec3.copy(out.n, normal);
                out.d = Vec3.dot(normal, point);
                return out;
              }

              static normalize(out, a) {
                const len = a.n.length();
                Vec3.normalize(out.n, a.n);

                if (len > 0) {
                  out.d = a.d / len;
                }

                return out;
              }

              get type() {
                return this._type;
              }

              set x(val) {
                this.n.x = val;
              }

              get x() {
                return this.n.x;
              }

              set y(val) {
                this.n.y = val;
              }

              get y() {
                return this.n.y;
              }

              set z(val) {
                this.n.z = val;
              }

              get z() {
                return this.n.z;
              }

              set w(val) {
                this.d = val;
              }

              get w() {
                return this.d;
              }

              constructor(nx = 0, ny = 1, nz = 0, d = 0) {
                this.n = void 0;
                this.d = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_PLANE;
                this.n = new Vec3(nx, ny, nz);
                this.d = d;
              }

              transform(mat) {
                Mat4.invert(temp_mat, mat);
                Mat4.transpose(temp_mat, temp_mat);
                Vec4.set(temp_vec4, this.n.x, this.n.y, this.n.z, this.d);
                Vec4.transformMat4(temp_vec4, temp_vec4, temp_mat);
                Vec3.set(this.n, temp_vec4.x, temp_vec4.y, temp_vec4.z);
                this.d = temp_vec4.w;
              }

            }

            const _v3_tmp$1 = new Vec3();

            const _v3_tmp2 = new Vec3();

            const _v3_tmp3 = new Vec3();

            const _v3_tmp4 = new Vec3();

            const _m3_tmp = new Mat3();

            const transform_extent_m4 = (out, extent, m4) => {
              _m3_tmp.m00 = Math.abs(m4.m00);
              _m3_tmp.m01 = Math.abs(m4.m01);
              _m3_tmp.m02 = Math.abs(m4.m02);
              _m3_tmp.m03 = Math.abs(m4.m04);
              _m3_tmp.m04 = Math.abs(m4.m05);
              _m3_tmp.m05 = Math.abs(m4.m06);
              _m3_tmp.m06 = Math.abs(m4.m08);
              _m3_tmp.m07 = Math.abs(m4.m09);
              _m3_tmp.m08 = Math.abs(m4.m10);
              Vec3.transformMat3(out, extent, _m3_tmp);
            };

            class AABB {
              static create(px, py, pz, hw, hh, hl) {
                return new AABB(px, py, pz, hw, hh, hl);
              }

              static clone(a) {
                return new AABB(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z);
              }

              static copy(out, a) {
                Vec3.copy(out.center, a.center);
                Vec3.copy(out.halfExtents, a.halfExtents);
                return out;
              }

              static fromPoints(out, minPos, maxPos) {
                Vec3.add(_v3_tmp$1, maxPos, minPos);
                Vec3.subtract(_v3_tmp2, maxPos, minPos);
                Vec3.multiplyScalar(out.center, _v3_tmp$1, 0.5);
                Vec3.multiplyScalar(out.halfExtents, _v3_tmp2, 0.5);
                return out;
              }

              static set(out, px, py, pz, hw, hh, hl) {
                Vec3.set(out.center, px, py, pz);
                Vec3.set(out.halfExtents, hw, hh, hl);
                return out;
              }

              static merge(out, a, b) {
                Vec3.subtract(_v3_tmp$1, a.center, a.halfExtents);
                Vec3.subtract(_v3_tmp2, b.center, b.halfExtents);
                Vec3.add(_v3_tmp3, a.center, a.halfExtents);
                Vec3.add(_v3_tmp4, b.center, b.halfExtents);
                Vec3.max(_v3_tmp4, _v3_tmp3, _v3_tmp4);
                Vec3.min(_v3_tmp3, _v3_tmp$1, _v3_tmp2);
                return AABB.fromPoints(out, _v3_tmp3, _v3_tmp4);
              }

              static toBoundingSphere(out, a) {
                a.getBoundary(_v3_tmp$1, _v3_tmp2);
                out.center.set(_v3_tmp$1);
                out.radius = 0.0;
                Vec3.subtract(_v3_tmp3, _v3_tmp2, out.center);

                const dist = _v3_tmp3.length();

                const half = dist * 0.5;
                out.radius += half;
                Vec3.multiplyScalar(_v3_tmp3, _v3_tmp3, half / dist);
                Vec3.add(out.center, out.center, _v3_tmp3);
                return out;
              }

              static transform(out, a, matrix) {
                Vec3.transformMat4(out.center, a.center, matrix);
                transform_extent_m4(out.halfExtents, a.halfExtents, matrix);
                return out;
              }

              get type() {
                return this._type;
              }

              constructor(px = 0, py = 0, pz = 0, hw = 1, hh = 1, hl = 1) {
                this.center = void 0;
                this.halfExtents = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_AABB;
                this.center = new Vec3(px, py, pz);
                this.halfExtents = new Vec3(hw, hh, hl);
              }

              getBoundary(minPos, maxPos) {
                Vec3.subtract(minPos, this.center, this.halfExtents);
                Vec3.add(maxPos, this.center, this.halfExtents);
              }

              transform(m, pos, rot, scale, out) {
                Vec3.transformMat4(out.center, this.center, m);
                transform_extent_m4(out.halfExtents, this.halfExtents, m);
              }

              clone() {
                return AABB.clone(this);
              }

              copy(a) {
                return AABB.copy(this, a);
              }

            } exports('bI', AABB);

            const _v3_tmp$2 = new Vec3();

            const _v3_tmp2$1 = new Vec3();

            const _m3_tmp$1 = new Mat3();

            const transform_extent_m3 = (out, extent, m3) => {
              _m3_tmp$1.m00 = Math.abs(m3.m00);
              _m3_tmp$1.m01 = Math.abs(m3.m01);
              _m3_tmp$1.m02 = Math.abs(m3.m02);
              _m3_tmp$1.m03 = Math.abs(m3.m03);
              _m3_tmp$1.m04 = Math.abs(m3.m04);
              _m3_tmp$1.m05 = Math.abs(m3.m05);
              _m3_tmp$1.m06 = Math.abs(m3.m06);
              _m3_tmp$1.m07 = Math.abs(m3.m07);
              _m3_tmp$1.m08 = Math.abs(m3.m08);
              Vec3.transformMat3(out, extent, _m3_tmp$1);
            };

            class OBB {
              static create(cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3) {
                return new OBB(cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
              }

              static clone(a) {
                return new OBB(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z, a.orientation.m00, a.orientation.m01, a.orientation.m02, a.orientation.m03, a.orientation.m04, a.orientation.m05, a.orientation.m06, a.orientation.m07, a.orientation.m08);
              }

              static copy(out, a) {
                Vec3.copy(out.center, a.center);
                Vec3.copy(out.halfExtents, a.halfExtents);
                Mat3.copy(out.orientation, a.orientation);
                return out;
              }

              static fromPoints(out, minPos, maxPos) {
                Vec3.multiplyScalar(out.center, Vec3.add(_v3_tmp$2, minPos, maxPos), 0.5);
                Vec3.multiplyScalar(out.halfExtents, Vec3.subtract(_v3_tmp2$1, maxPos, minPos), 0.5);
                Mat3.identity(out.orientation);
                return out;
              }

              static set(out, cx, cy, cz, hw, hh, hl, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3) {
                Vec3.set(out.center, cx, cy, cz);
                Vec3.set(out.halfExtents, hw, hh, hl);
                Mat3.set(out.orientation, ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
                return out;
              }

              get type() {
                return this._type;
              }

              constructor(cx = 0, cy = 0, cz = 0, hw = 1, hh = 1, hl = 1, ox_1 = 1, ox_2 = 0, ox_3 = 0, oy_1 = 0, oy_2 = 1, oy_3 = 0, oz_1 = 0, oz_2 = 0, oz_3 = 1) {
                this.center = void 0;
                this.halfExtents = void 0;
                this.orientation = void 0;
                this._type = void 0;
                this._type = enums.SHAPE_OBB;
                this.center = new Vec3(cx, cy, cz);
                this.halfExtents = new Vec3(hw, hh, hl);
                this.orientation = new Mat3(ox_1, ox_2, ox_3, oy_1, oy_2, oy_3, oz_1, oz_2, oz_3);
              }

              getBoundary(minPos, maxPos) {
                transform_extent_m3(_v3_tmp$2, this.halfExtents, this.orientation);
                Vec3.subtract(minPos, this.center, _v3_tmp$2);
                Vec3.add(maxPos, this.center, _v3_tmp$2);
              }

              transform(m, pos, rot, scale, out) {
                Vec3.transformMat4(out.center, this.center, m);
                Mat3.fromQuat(out.orientation, rot);
                Vec3.multiply(out.halfExtents, this.halfExtents, scale);
              }

              translateAndRotate(m, rot, out) {
                Vec3.transformMat4(out.center, this.center, m);
                Mat3.fromQuat(out.orientation, rot);
              }

              setScale(scale, out) {
                Vec3.multiply(out.halfExtents, this.halfExtents, scale);
              }

            }

            class Capsule {
              get type() {
                return this._type;
              }

              constructor(radius = 0.5, halfHeight = 0.5, axis = 1) {
                this._type = void 0;
                this.radius = void 0;
                this.halfHeight = void 0;
                this.axis = void 0;
                this.center = void 0;
                this.rotation = void 0;
                this.ellipseCenter0 = void 0;
                this.ellipseCenter1 = void 0;
                this._type = enums.SHAPE_CAPSULE;
                this.radius = radius;
                this.halfHeight = halfHeight;
                this.axis = axis;
                this.center = new Vec3();
                this.rotation = new Quat();
                this.ellipseCenter0 = new Vec3(0, halfHeight, 0);
                this.ellipseCenter1 = new Vec3(0, -halfHeight, 0);
                this.updateCache();
              }

              transform(m, pos, rot, scale, out) {
                const ws = scale;
                const s = absMaxComponent(ws);
                out.radius = this.radius * Math.abs(s);
                const halfTotalWorldHeight = (this.halfHeight + this.radius) * Math.abs(ws.y);
                let halfWorldHeight = halfTotalWorldHeight - out.radius;
                if (halfWorldHeight < 0) halfWorldHeight = 0;
                out.halfHeight = halfWorldHeight;
                Vec3.transformMat4(out.center, this.center, m);
                Quat.multiply(out.rotation, this.rotation, rot);
                out.updateCache();
              }

              updateCache() {
                this.updateLocalCenter();
                Vec3.transformQuat(this.ellipseCenter0, this.ellipseCenter0, this.rotation);
                Vec3.transformQuat(this.ellipseCenter1, this.ellipseCenter1, this.rotation);
                this.ellipseCenter0.add(this.center);
                this.ellipseCenter1.add(this.center);
              }

              updateLocalCenter() {
                const halfHeight = this.halfHeight;
                const axis = this.axis;

                switch (axis) {
                  case 0:
                    this.ellipseCenter0.set(halfHeight, 0, 0);
                    this.ellipseCenter1.set(-halfHeight, 0, 0);
                    break;

                  case 1:
                    this.ellipseCenter0.set(0, halfHeight, 0);
                    this.ellipseCenter1.set(0, -halfHeight, 0);
                    break;

                  case 2:
                    this.ellipseCenter0.set(0, 0, halfHeight);
                    this.ellipseCenter1.set(0, 0, -halfHeight);
                    break;
                }
              }

            }

            const _v = new Array(8);

            _v[0] = new Vec3(1, 1, 1);
            _v[1] = new Vec3(-1, 1, 1);
            _v[2] = new Vec3(-1, -1, 1);
            _v[3] = new Vec3(1, -1, 1);
            _v[4] = new Vec3(1, 1, -1);
            _v[5] = new Vec3(-1, 1, -1);
            _v[6] = new Vec3(-1, -1, -1);
            _v[7] = new Vec3(1, -1, -1);
            class Frustum {
              set accurate(b) {
                this._type = b ? enums.SHAPE_FRUSTUM_ACCURATE : enums.SHAPE_FRUSTUM;
              }

              static create() {
                return new Frustum();
              }

              static clone(f) {
                return Frustum.copy(new Frustum(), f);
              }

              static copy(out, f) {
                out._type = f._type;

                for (let i = 0; i < 6; ++i) {
                  Plane.copy(out.planes[i], f.planes[i]);
                }

                for (let i = 0; i < 8; ++i) {
                  Vec3.copy(out.vertices[i], f.vertices[i]);
                }

                return out;
              }

              get type() {
                return this._type;
              }

              constructor() {
                this._type = void 0;
                this.planes = void 0;
                this.vertices = void 0;
                this._type = enums.SHAPE_FRUSTUM;
                this.planes = new Array(6);

                for (let i = 0; i < 6; ++i) {
                  this.planes[i] = Plane.create(0, 0, 0, 0);
                }

                this.vertices = new Array(8);

                for (let i = 0; i < 8; ++i) {
                  this.vertices[i] = new Vec3();
                }
              }

              update(m, inv) {
                Vec3.set(this.planes[0].n, m.m03 + m.m00, m.m07 + m.m04, m.m11 + m.m08);
                this.planes[0].d = -(m.m15 + m.m12);
                Vec3.set(this.planes[1].n, m.m03 - m.m00, m.m07 - m.m04, m.m11 - m.m08);
                this.planes[1].d = -(m.m15 - m.m12);
                Vec3.set(this.planes[2].n, m.m03 + m.m01, m.m07 + m.m05, m.m11 + m.m09);
                this.planes[2].d = -(m.m15 + m.m13);
                Vec3.set(this.planes[3].n, m.m03 - m.m01, m.m07 - m.m05, m.m11 - m.m09);
                this.planes[3].d = -(m.m15 - m.m13);
                Vec3.set(this.planes[4].n, m.m03 + m.m02, m.m07 + m.m06, m.m11 + m.m10);
                this.planes[4].d = -(m.m15 + m.m14);
                Vec3.set(this.planes[5].n, m.m03 - m.m02, m.m07 - m.m06, m.m11 - m.m10);
                this.planes[5].d = -(m.m15 - m.m14);

                if (this._type !== enums.SHAPE_FRUSTUM_ACCURATE) {
                  return;
                }

                for (let i = 0; i < 6; i++) {
                  const pl = this.planes[i];
                  const invDist = 1 / pl.n.length();
                  Vec3.multiplyScalar(pl.n, pl.n, invDist);
                  pl.d *= invDist;
                }

                for (let i = 0; i < 8; i++) {
                  Vec3.transformMat4(this.vertices[i], _v[i], inv);
                }
              }

              transform(mat) {
                if (this._type !== enums.SHAPE_FRUSTUM_ACCURATE) {
                  return;
                }

                for (let i = 0; i < 8; i++) {
                  Vec3.transformMat4(this.vertices[i], this.vertices[i], mat);
                }

                Plane.fromPoints(this.planes[0], this.vertices[1], this.vertices[5], this.vertices[6]);
                Plane.fromPoints(this.planes[1], this.vertices[3], this.vertices[7], this.vertices[4]);
                Plane.fromPoints(this.planes[2], this.vertices[6], this.vertices[7], this.vertices[3]);
                Plane.fromPoints(this.planes[3], this.vertices[0], this.vertices[4], this.vertices[5]);
                Plane.fromPoints(this.planes[4], this.vertices[2], this.vertices[3], this.vertices[0]);
                Plane.fromPoints(this.planes[0], this.vertices[7], this.vertices[6], this.vertices[5]);
              }

            }

            Frustum.createOrtho = (() => {
              const _temp_v3 = new Vec3();

              return (out, width, height, near, far, transform) => {
                const halfWidth = width / 2;
                const halfHeight = height / 2;
                Vec3.set(_temp_v3, halfWidth, halfHeight, near);
                Vec3.transformMat4(out.vertices[0], _temp_v3, transform);
                Vec3.set(_temp_v3, -halfWidth, halfHeight, near);
                Vec3.transformMat4(out.vertices[1], _temp_v3, transform);
                Vec3.set(_temp_v3, -halfWidth, -halfHeight, near);
                Vec3.transformMat4(out.vertices[2], _temp_v3, transform);
                Vec3.set(_temp_v3, halfWidth, -halfHeight, near);
                Vec3.transformMat4(out.vertices[3], _temp_v3, transform);
                Vec3.set(_temp_v3, halfWidth, halfHeight, far);
                Vec3.transformMat4(out.vertices[4], _temp_v3, transform);
                Vec3.set(_temp_v3, -halfWidth, halfHeight, far);
                Vec3.transformMat4(out.vertices[5], _temp_v3, transform);
                Vec3.set(_temp_v3, -halfWidth, -halfHeight, far);
                Vec3.transformMat4(out.vertices[6], _temp_v3, transform);
                Vec3.set(_temp_v3, halfWidth, -halfHeight, far);
                Vec3.transformMat4(out.vertices[7], _temp_v3, transform);
                Plane.fromPoints(out.planes[0], out.vertices[1], out.vertices[6], out.vertices[5]);
                Plane.fromPoints(out.planes[1], out.vertices[3], out.vertices[4], out.vertices[7]);
                Plane.fromPoints(out.planes[2], out.vertices[6], out.vertices[3], out.vertices[7]);
                Plane.fromPoints(out.planes[3], out.vertices[0], out.vertices[5], out.vertices[4]);
                Plane.fromPoints(out.planes[4], out.vertices[2], out.vertices[0], out.vertices[3]);
                Plane.fromPoints(out.planes[0], out.vertices[7], out.vertices[5], out.vertices[6]);
              };
            })();

            function recordFrustumToSharedMemory(handle, frstm) {
              if (!frstm || handle === NULL_HANDLE) {
                return;
              }

              const vertices = frstm.vertices;
              let vertexOffset = FrustumView.VERTICES;

              for (let i = 0; i < 8; ++i) {
                FrustumPool.setVec3(handle, vertexOffset, vertices[i]);
                vertexOffset += 3;
              }

              const planes = frstm.planes;
              let planeOffset = FrustumView.PLANES;

              for (let i = 0; i < 6; i++, planeOffset += 4) {
                FrustumPool.setVec4(handle, planeOffset, planes[i]);
              }
            }

            let WrapModeMask;

            (function (WrapModeMask) {
              WrapModeMask[WrapModeMask["Default"] = 0] = "Default";
              WrapModeMask[WrapModeMask["Normal"] = 1] = "Normal";
              WrapModeMask[WrapModeMask["Loop"] = 2] = "Loop";
              WrapModeMask[WrapModeMask["ShouldWrap"] = 4] = "ShouldWrap";
              WrapModeMask[WrapModeMask["Clamp"] = 8] = "Clamp";
              WrapModeMask[WrapModeMask["PingPong"] = 22] = "PingPong";
              WrapModeMask[WrapModeMask["Reverse"] = 36] = "Reverse";
            })(WrapModeMask || (WrapModeMask = {}));

            let WrapMode;

            (function (WrapMode) {
              WrapMode[WrapMode["Default"] = WrapModeMask.Default] = "Default";
              WrapMode[WrapMode["Normal"] = WrapModeMask.Normal] = "Normal";
              WrapMode[WrapMode["Reverse"] = WrapModeMask.Reverse] = "Reverse";
              WrapMode[WrapMode["Loop"] = WrapModeMask.Loop] = "Loop";
              WrapMode[WrapMode["LoopReverse"] = WrapModeMask.Loop | WrapModeMask.Reverse] = "LoopReverse";
              WrapMode[WrapMode["PingPong"] = WrapModeMask.PingPong] = "PingPong";
              WrapMode[WrapMode["PingPongReverse"] = WrapModeMask.PingPong | WrapModeMask.Reverse] = "PingPongReverse";
            })(WrapMode || (WrapMode = {}));

            ccenum(WrapMode);
            class WrappedInfo {
              constructor(info) {
                this.ratio = 0;
                this.time = 0;
                this.direction = 1;
                this.stopped = true;
                this.iterations = 0;
                this.frameIndex = undefined;

                if (info) {
                  this.set(info);
                }
              }

              set(info) {
                this.ratio = info.ratio;
                this.time = info.time;
                this.direction = info.direction;
                this.stopped = info.stopped;
                this.iterations = info.iterations;
                this.frameIndex = info.frameIndex;
              }

            }
            function isLerpable(object) {
              return typeof object.lerp === 'function';
            }

            const LOOK_FORWARD = 3;
            const WrapMode$1 = Enum({
              Default: WrapModeMask.Default,
              Normal: WrapModeMask.Normal,
              Clamp: WrapModeMask.Clamp,
              Loop: WrapModeMask.Loop,
              PingPong: WrapModeMask.PingPong
            });
            class Keyframe {
              constructor() {
                this.time = 0;
                this.value = 0;
                this.inTangent = 0;
                this.outTangent = 0;
              }

            }
            CCClass.fastDefine('cc.Keyframe', Keyframe, {
              time: 0,
              value: 0,
              inTangent: 0,
              outTangent: 0
            });
            class OptimizedKey {
              constructor() {
                this.index = void 0;
                this.time = void 0;
                this.endTime = void 0;
                this.coefficient = void 0;
                this.index = -1;
                this.time = 0;
                this.endTime = 0;
                this.coefficient = new Float32Array(4);
              }

              evaluate(T) {
                const t = T - this.time;
                return evalOptCurve(t, this.coefficient);
              }

            }
            function evalOptCurve(t, coefs) {
              return t * (t * (t * coefs[0] + coefs[1]) + coefs[2]) + coefs[3];
            }
            class AnimationCurve {
              constructor(keyFrames = null) {
                this.keyFrames = void 0;
                this.preWrapMode = WrapMode$1.Loop;
                this.postWrapMode = WrapMode$1.Clamp;
                this.cachedKey = void 0;
                this.keyFrames = keyFrames || [].concat(AnimationCurve.defaultKF);
                this.cachedKey = new OptimizedKey();
              }

              addKey(keyFrame) {
                if (this.keyFrames == null) {
                  this.keyFrames = [];
                }

                this.keyFrames.push(keyFrame);
              }

              evaluate_slow(time) {
                let wrappedTime = time;
                const wrapMode = time < 0 ? this.preWrapMode : this.postWrapMode;
                const startTime = this.keyFrames[0].time;
                const endTime = this.keyFrames[this.keyFrames.length - 1].time;

                switch (wrapMode) {
                  case WrapMode$1.Loop:
                    wrappedTime = repeat(time - startTime, endTime - startTime) + startTime;
                    break;

                  case WrapMode$1.PingPong:
                    wrappedTime = pingPong(time - startTime, endTime - startTime) + startTime;
                    break;

                  case WrapMode$1.Default:
                  case WrapMode$1.Normal:
                  case WrapMode$1.Clamp:
                    wrappedTime = clamp(time, startTime, endTime);
                    break;

                  default:
                    wrappedTime = clamp(time, startTime, endTime);
                    break;
                }

                let preKFIndex = 0;

                if (wrappedTime > this.keyFrames[0].time) {
                  if (wrappedTime >= this.keyFrames[this.keyFrames.length - 1].time) {
                    preKFIndex = this.keyFrames.length - 2;
                  } else {
                    for (let i = 0; i < this.keyFrames.length - 1; i++) {
                      if (wrappedTime >= this.keyFrames[0].time && wrappedTime <= this.keyFrames[i + 1].time) {
                        preKFIndex = i;
                        break;
                      }
                    }
                  }
                }

                const keyframe0 = this.keyFrames[preKFIndex];
                const keyframe1 = this.keyFrames[preKFIndex + 1];
                const t = inverseLerp(keyframe0.time, keyframe1.time, wrappedTime);
                const dt = keyframe1.time - keyframe0.time;
                const m0 = keyframe0.outTangent * dt;
                const m1 = keyframe1.inTangent * dt;
                const t2 = t * t;
                const t3 = t2 * t;
                const a = 2 * t3 - 3 * t2 + 1;
                const b = t3 - 2 * t2 + t;
                const c = t3 - t2;
                const d = -2 * t3 + 3 * t2;
                return a * keyframe0.value + b * m0 + c * m1 + d * keyframe1.value;
              }

              evaluate(time) {
                let wrappedTime = time;
                const wrapMode = time < 0 ? this.preWrapMode : this.postWrapMode;
                const startTime = this.keyFrames[0].time;
                const endTime = this.keyFrames[this.keyFrames.length - 1].time;

                switch (wrapMode) {
                  case WrapMode$1.Loop:
                    wrappedTime = repeat(time - startTime, endTime - startTime) + startTime;
                    break;

                  case WrapMode$1.PingPong:
                    wrappedTime = pingPong(time - startTime, endTime - startTime) + startTime;
                    break;

                  case WrapMode$1.Default:
                  case WrapMode$1.Normal:
                  case WrapMode$1.Clamp:
                    wrappedTime = clamp(time, startTime, endTime);
                    break;

                  default:
                    wrappedTime = clamp(time, startTime, endTime);
                    break;
                }

                if (wrappedTime >= this.cachedKey.time && wrappedTime < this.cachedKey.endTime) {
                  return this.cachedKey.evaluate(wrappedTime);
                }

                const leftIndex = this.findIndex(this.cachedKey, wrappedTime);
                const rightIndex = Math.min(leftIndex + 1, this.keyFrames.length - 1);
                this.calcOptimizedKey(this.cachedKey, leftIndex, rightIndex);
                return this.cachedKey.evaluate(wrappedTime);
              }

              calcOptimizedKey(optKey, leftIndex, rightIndex) {
                const lhs = this.keyFrames[leftIndex];
                const rhs = this.keyFrames[rightIndex];
                optKey.index = leftIndex;
                optKey.time = lhs.time;
                optKey.endTime = rhs.time;
                const dx = rhs.time - lhs.time;
                const dy = rhs.value - lhs.value;
                const length = 1 / (dx * dx);
                const d1 = lhs.outTangent * dx;
                const d2 = rhs.inTangent * dx;
                optKey.coefficient[0] = (d1 + d2 - dy - dy) * length / dx;
                optKey.coefficient[1] = (dy + dy + dy - d1 - d1 - d2) * length;
                optKey.coefficient[2] = lhs.outTangent;
                optKey.coefficient[3] = lhs.value;
              }

              findIndex(optKey, t) {
                const cachedIndex = optKey.index;

                if (cachedIndex !== -1) {
                  const cachedTime = this.keyFrames[cachedIndex].time;

                  if (t > cachedTime) {
                    for (let i = 0; i < LOOK_FORWARD; i++) {
                      const currIndex = cachedIndex + i;

                      if (currIndex + 1 < this.keyFrames.length && this.keyFrames[currIndex + 1].time > t) {
                        return currIndex;
                      }
                    }
                  } else {
                    for (let i = 0; i < LOOK_FORWARD; i++) {
                      const currIndex = cachedIndex - i;

                      if (currIndex >= 0 && this.keyFrames[currIndex - 1].time <= t) {
                        return currIndex - 1;
                      }
                    }
                  }
                }

                let left = 0;
                let right = this.keyFrames.length;
                let mid;

                while (right - left > 1) {
                  mid = Math.floor((left + right) / 2);

                  if (this.keyFrames[mid].time >= t) {
                    right = mid;
                  } else {
                    left = mid;
                  }
                }

                return left;
              }

            } exports('dF', AnimationCurve);
            AnimationCurve.defaultKF = [{
              time: 0,
              value: 1,
              inTangent: 0,
              outTangent: 0
            }, {
              time: 1,
              value: 1,
              inTangent: 0,
              outTangent: 0
            }];
            CCClass.fastDefine('cc.AnimationCurve', AnimationCurve, {
              preWrapMode: WrapMode$1.Default,
              postWrapMode: WrapMode$1.Default,
              keyFrames: []
            });

            replaceProperty(intersect, 'intersect', [{
              name: 'ray_aabb',
              newName: 'rayAABB'
            }, {
              name: 'ray_plane',
              newName: 'rayPlane'
            }, {
              name: 'ray_triangle',
              newName: 'rayTriangle'
            }, {
              name: 'ray_sphere',
              newName: 'raySphere'
            }, {
              name: 'ray_obb',
              newName: 'rayOBB'
            }, {
              name: 'ray_capsule',
              newName: 'rayCapsule'
            }, {
              name: 'ray_subMesh',
              newName: 'raySubMesh'
            }, {
              name: 'ray_mesh',
              newName: 'rayMesh'
            }, {
              name: 'ray_model',
              newName: 'rayModel'
            }, {
              name: 'line_plane',
              newName: 'linePlane'
            }, {
              name: 'line_triangle',
              newName: 'lineTriangle'
            }, {
              name: 'line_aabb',
              newName: 'lineAABB'
            }, {
              name: 'line_obb',
              newName: 'lineOBB'
            }, {
              name: 'line_sphere',
              newName: 'lineSphere'
            }, {
              name: 'aabb_aabb',
              newName: 'aabbWithAABB'
            }, {
              name: 'aabb_obb',
              newName: 'aabbWithOBB'
            }, {
              name: 'aabb_plane',
              newName: 'aabbPlane'
            }, {
              name: 'aabb_frustum',
              newName: 'aabbFrustum'
            }, {
              name: 'aabbFrustum_accurate',
              newName: 'aabbFrustumAccurate'
            }, {
              name: 'obb_point',
              newName: 'obbPoint'
            }, {
              name: 'obb_plane',
              newName: 'obbPlane'
            }, {
              name: 'obb_frustum',
              newName: 'obbFrustum'
            }, {
              name: 'obbFrustum_accurate',
              newName: 'obbFrustumAccurate'
            }, {
              name: 'obb_obb',
              newName: 'obbWithOBB'
            }, {
              name: 'obb_capsule',
              newName: 'obbCapsule'
            }, {
              name: 'sphere_plane',
              newName: 'spherePlane'
            }, {
              name: 'sphere_frustum',
              newName: 'sphereFrustum'
            }, {
              name: 'sphereFrustum_accurate',
              newName: 'sphereFrustumAccurate'
            }, {
              name: 'sphere_sphere',
              newName: 'sphereWithSphere'
            }, {
              name: 'sphere_aabb',
              newName: 'sphereAABB'
            }, {
              name: 'sphere_obb',
              newName: 'sphereOBB'
            }, {
              name: 'sphere_capsule',
              newName: 'sphereCapsule'
            }, {
              name: 'capsule_capsule',
              newName: 'capsuleWithCapsule'
            }]);

            function deprecatedClassMessage(oldClassName, newClassName) {
              console.warn(`${oldClassName} is deprecated, please use ${newClassName} instead.`);
            }

            class line extends Line {
              constructor() {
                super();
                deprecatedClassMessage('line', 'Line');
              }

            }
            class plane extends Plane {
              constructor() {
                super();
                deprecatedClassMessage('plane', 'Plane');
              }

            }
            class ray extends Ray {
              constructor() {
                super();
                deprecatedClassMessage('ray', 'Ray');
              }

            }
            class triangle extends Triangle {
              constructor() {
                super();
                deprecatedClassMessage('triangle', 'Triangle');
              }

            }
            class sphere extends Sphere {
              constructor() {
                super();
                deprecatedClassMessage('sphere', 'Sphere');
              }

            }
            class aabb extends AABB {
              constructor() {
                super();
                deprecatedClassMessage('aabb', 'AABB');
              }

            }
            class obb extends OBB {
              constructor() {
                super();
                deprecatedClassMessage('obb', 'OBB');
              }

            }
            class capsule extends Capsule {
              constructor() {
                super();
                deprecatedClassMessage('capsule', 'Capsule');
              }

            }
            class frustum extends Frustum {
              constructor() {
                super();
                deprecatedClassMessage('frustum', 'Frustum');
              }

            }

            var geometry = /*#__PURE__*/Object.freeze({
                __proto__: null,
                distance: distance,
                enums: enums,
                intersect: intersect,
                Line: Line,
                Plane: Plane,
                Ray: Ray,
                Triangle: Triangle,
                Sphere: Sphere,
                AABB: AABB,
                OBB: OBB,
                Capsule: Capsule,
                Frustum: Frustum,
                Keyframe: Keyframe,
                AnimationCurve: AnimationCurve,
                get ERaycastMode () { return ERaycastMode; },
                line: line,
                plane: plane,
                ray: ray,
                triangle: triangle,
                sphere: sphere,
                aabb: aabb,
                obb: obb,
                capsule: capsule,
                frustum: frustum
            });
            exports('er', geometry);

            const layerList = {
              NONE: 0,
              IGNORE_RAYCAST: 1 << 20,
              GIZMOS: 1 << 21,
              EDITOR: 1 << 22,
              UI_3D: 1 << 23,
              SCENE_GIZMO: 1 << 24,
              UI_2D: 1 << 25,
              PROFILER: 1 << 28,
              DEFAULT: 1 << 30,
              ALL: 0xffffffff
            };
            class Layers {
              static makeMaskInclude(includes) {
                let mask = 0;

                for (const inc of includes) {
                  mask |= inc;
                }

                return mask;
              }

              static makeMaskExclude(excludes) {
                return ~Layers.makeMaskInclude(excludes);
              }

              static addLayer(name, bitNum) {
                if (bitNum === undefined) {
                  console.warn('bitNum can\'t be undefined');
                  return;
                }

                if (bitNum > 19 || bitNum < 0) {
                  console.warn('maximum layers reached.');
                  return;
                }

                Layers.Enum[name] = 1 << bitNum;
                Layers.Enum[bitNum] = name;
                Layers.BitMask[name] = 1 << bitNum;
                Layers.BitMask[bitNum] = name;
              }

              static deleteLayer(bitNum) {
                if (bitNum > 19 || bitNum < 0) {
                  console.warn('do not change buildin layers.');
                  return;
                }

                delete Layers.Enum[Layers.Enum[bitNum]];
                delete Layers.Enum[bitNum];
                delete Layers.BitMask[Layers.BitMask[bitNum]];
                delete Layers.BitMask[bitNum];
              }

            } exports('d8', Layers);
            Layers.Enum = Enum(layerList);
            Layers.BitMask = BitMask({ ...layerList
            });
            legacyCC.Layers = Layers;

            let RenderPassStage;

            (function (RenderPassStage) {
              RenderPassStage[RenderPassStage["DEFAULT"] = 100] = "DEFAULT";
              RenderPassStage[RenderPassStage["UI"] = 200] = "UI";
            })(RenderPassStage || (RenderPassStage = {}));

            legacyCC.RenderPassStage = RenderPassStage;
            let RenderPriority;

            (function (RenderPriority) {
              RenderPriority[RenderPriority["MIN"] = 0] = "MIN";
              RenderPriority[RenderPriority["MAX"] = 255] = "MAX";
              RenderPriority[RenderPriority["DEFAULT"] = 128] = "DEFAULT";
            })(RenderPriority || (RenderPriority = exports('d6', {})));

            const globalDescriptorSetLayout = {
              bindings: [],
              layouts: {}
            };
            const localDescriptorSetLayout = {
              bindings: [],
              layouts: {}
            };
            let PipelineGlobalBindings;

            (function (PipelineGlobalBindings) {
              PipelineGlobalBindings[PipelineGlobalBindings["UBO_GLOBAL"] = 0] = "UBO_GLOBAL";
              PipelineGlobalBindings[PipelineGlobalBindings["UBO_CAMERA"] = 1] = "UBO_CAMERA";
              PipelineGlobalBindings[PipelineGlobalBindings["UBO_SHADOW"] = 2] = "UBO_SHADOW";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_SHADOWMAP"] = 3] = "SAMPLER_SHADOWMAP";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_ENVIRONMENT"] = 4] = "SAMPLER_ENVIRONMENT";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_SPOT_LIGHTING_MAP"] = 5] = "SAMPLER_SPOT_LIGHTING_MAP";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_GBUFFER_ALBEDOMAP"] = 6] = "SAMPLER_GBUFFER_ALBEDOMAP";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_GBUFFER_POSITIONMAP"] = 7] = "SAMPLER_GBUFFER_POSITIONMAP";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_GBUFFER_NORMALMAP"] = 8] = "SAMPLER_GBUFFER_NORMALMAP";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_GBUFFER_EMISSIVEMAP"] = 9] = "SAMPLER_GBUFFER_EMISSIVEMAP";
              PipelineGlobalBindings[PipelineGlobalBindings["SAMPLER_LIGHTING_RESULTMAP"] = 10] = "SAMPLER_LIGHTING_RESULTMAP";
              PipelineGlobalBindings[PipelineGlobalBindings["COUNT"] = 11] = "COUNT";
            })(PipelineGlobalBindings || (PipelineGlobalBindings = {}));

            const GLOBAL_UBO_COUNT = PipelineGlobalBindings.SAMPLER_SHADOWMAP;
            const GLOBAL_SAMPLER_COUNT = PipelineGlobalBindings.COUNT - GLOBAL_UBO_COUNT;
            let ModelLocalBindings;

            (function (ModelLocalBindings) {
              ModelLocalBindings[ModelLocalBindings["UBO_LOCAL"] = 0] = "UBO_LOCAL";
              ModelLocalBindings[ModelLocalBindings["UBO_FORWARD_LIGHTS"] = 1] = "UBO_FORWARD_LIGHTS";
              ModelLocalBindings[ModelLocalBindings["UBO_SKINNING_ANIMATION"] = 2] = "UBO_SKINNING_ANIMATION";
              ModelLocalBindings[ModelLocalBindings["UBO_SKINNING_TEXTURE"] = 3] = "UBO_SKINNING_TEXTURE";
              ModelLocalBindings[ModelLocalBindings["UBO_MORPH"] = 4] = "UBO_MORPH";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_JOINTS"] = 5] = "SAMPLER_JOINTS";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_POSITION"] = 6] = "SAMPLER_MORPH_POSITION";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_NORMAL"] = 7] = "SAMPLER_MORPH_NORMAL";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_MORPH_TANGENT"] = 8] = "SAMPLER_MORPH_TANGENT";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_LIGHTMAP"] = 9] = "SAMPLER_LIGHTMAP";
              ModelLocalBindings[ModelLocalBindings["SAMPLER_SPRITE"] = 10] = "SAMPLER_SPRITE";
              ModelLocalBindings[ModelLocalBindings["COUNT"] = 11] = "COUNT";
            })(ModelLocalBindings || (ModelLocalBindings = exports('dj', {})));

            const LOCAL_UBO_COUNT = ModelLocalBindings.SAMPLER_JOINTS;
            const LOCAL_SAMPLER_COUNT = ModelLocalBindings.COUNT - LOCAL_UBO_COUNT;
            let SetIndex;

            (function (SetIndex) {
              SetIndex[SetIndex["GLOBAL"] = 0] = "GLOBAL";
              SetIndex[SetIndex["MATERIAL"] = 1] = "MATERIAL";
              SetIndex[SetIndex["LOCAL"] = 2] = "LOCAL";
            })(SetIndex || (SetIndex = {}));

            const bindingMappingInfo = new BindingMappingInfo();
            bindingMappingInfo.bufferOffsets = [0, GLOBAL_UBO_COUNT + LOCAL_UBO_COUNT, GLOBAL_UBO_COUNT];
            bindingMappingInfo.samplerOffsets = [-GLOBAL_UBO_COUNT, GLOBAL_SAMPLER_COUNT + LOCAL_SAMPLER_COUNT, GLOBAL_SAMPLER_COUNT - LOCAL_UBO_COUNT];
            bindingMappingInfo.flexibleSet = 1;
            class UBOGlobal {}
            UBOGlobal.TIME_OFFSET = 0;
            UBOGlobal.NATIVE_SIZE_OFFSET = UBOGlobal.TIME_OFFSET + 4;
            UBOGlobal.SCREEN_SIZE_OFFSET = UBOGlobal.NATIVE_SIZE_OFFSET + 4;
            UBOGlobal.COUNT = UBOGlobal.SCREEN_SIZE_OFFSET + 4;
            UBOGlobal.SIZE = UBOGlobal.COUNT * 4;
            UBOGlobal.NAME = 'CCGlobal';
            UBOGlobal.BINDING = PipelineGlobalBindings.UBO_GLOBAL;
            UBOGlobal.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOGlobal.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
            UBOGlobal.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOGlobal.BINDING, UBOGlobal.NAME, [new Uniform('cc_time', Type.FLOAT4, 1), new Uniform('cc_screenSize', Type.FLOAT4, 1), new Uniform('cc_nativeSize', Type.FLOAT4, 1)], 1);
            globalDescriptorSetLayout.layouts[UBOGlobal.NAME] = UBOGlobal.LAYOUT;
            globalDescriptorSetLayout.bindings[UBOGlobal.BINDING] = UBOGlobal.DESCRIPTOR;
            class UBOCamera {}
            UBOCamera.MAT_VIEW_OFFSET = 0;
            UBOCamera.MAT_VIEW_INV_OFFSET = UBOCamera.MAT_VIEW_OFFSET + 16;
            UBOCamera.MAT_PROJ_OFFSET = UBOCamera.MAT_VIEW_INV_OFFSET + 16;
            UBOCamera.MAT_PROJ_INV_OFFSET = UBOCamera.MAT_PROJ_OFFSET + 16;
            UBOCamera.MAT_VIEW_PROJ_OFFSET = UBOCamera.MAT_PROJ_INV_OFFSET + 16;
            UBOCamera.MAT_VIEW_PROJ_INV_OFFSET = UBOCamera.MAT_VIEW_PROJ_OFFSET + 16;
            UBOCamera.CAMERA_POS_OFFSET = UBOCamera.MAT_VIEW_PROJ_INV_OFFSET + 16;
            UBOCamera.SCREEN_SCALE_OFFSET = UBOCamera.CAMERA_POS_OFFSET + 4;
            UBOCamera.EXPOSURE_OFFSET = UBOCamera.SCREEN_SCALE_OFFSET + 4;
            UBOCamera.MAIN_LIT_DIR_OFFSET = UBOCamera.EXPOSURE_OFFSET + 4;
            UBOCamera.MAIN_LIT_COLOR_OFFSET = UBOCamera.MAIN_LIT_DIR_OFFSET + 4;
            UBOCamera.AMBIENT_SKY_OFFSET = UBOCamera.MAIN_LIT_COLOR_OFFSET + 4;
            UBOCamera.AMBIENT_GROUND_OFFSET = UBOCamera.AMBIENT_SKY_OFFSET + 4;
            UBOCamera.GLOBAL_FOG_COLOR_OFFSET = UBOCamera.AMBIENT_GROUND_OFFSET + 4;
            UBOCamera.GLOBAL_FOG_BASE_OFFSET = UBOCamera.GLOBAL_FOG_COLOR_OFFSET + 4;
            UBOCamera.GLOBAL_FOG_ADD_OFFSET = UBOCamera.GLOBAL_FOG_BASE_OFFSET + 4;
            UBOCamera.COUNT = UBOCamera.GLOBAL_FOG_ADD_OFFSET + 4;
            UBOCamera.SIZE = UBOCamera.COUNT * 4;
            UBOCamera.NAME = 'CCCamera';
            UBOCamera.BINDING = PipelineGlobalBindings.UBO_CAMERA;
            UBOCamera.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOCamera.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
            UBOCamera.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOCamera.BINDING, UBOCamera.NAME, [new Uniform('cc_matView', Type.MAT4, 1), new Uniform('cc_matViewInv', Type.MAT4, 1), new Uniform('cc_matProj', Type.MAT4, 1), new Uniform('cc_matProjInv', Type.MAT4, 1), new Uniform('cc_matViewProj', Type.MAT4, 1), new Uniform('cc_matViewProjInv', Type.MAT4, 1), new Uniform('cc_cameraPos', Type.FLOAT4, 1), new Uniform('cc_screenScale', Type.FLOAT4, 1), new Uniform('cc_exposure', Type.FLOAT4, 1), new Uniform('cc_mainLitDir', Type.FLOAT4, 1), new Uniform('cc_mainLitColor', Type.FLOAT4, 1), new Uniform('cc_ambientSky', Type.FLOAT4, 1), new Uniform('cc_ambientGround', Type.FLOAT4, 1), new Uniform('cc_fogColor', Type.FLOAT4, 1), new Uniform('cc_fogBase', Type.FLOAT4, 1), new Uniform('cc_fogAdd', Type.FLOAT4, 1)], 1);
            globalDescriptorSetLayout.layouts[UBOCamera.NAME] = UBOCamera.LAYOUT;
            globalDescriptorSetLayout.bindings[UBOCamera.BINDING] = UBOCamera.DESCRIPTOR;
            class UBOShadow {}
            UBOShadow.MAT_LIGHT_PLANE_PROJ_OFFSET = 0;
            UBOShadow.MAT_LIGHT_VIEW_OFFSET = UBOShadow.MAT_LIGHT_PLANE_PROJ_OFFSET + 16;
            UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET = UBOShadow.MAT_LIGHT_VIEW_OFFSET + 16;
            UBOShadow.SHADOW_NEAR_FAR_LINEAR_SELF_INFO_OFFSET = UBOShadow.MAT_LIGHT_VIEW_PROJ_OFFSET + 16;
            UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET = UBOShadow.SHADOW_NEAR_FAR_LINEAR_SELF_INFO_OFFSET + 4;
            UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET = UBOShadow.SHADOW_WIDTH_HEIGHT_PCF_BIAS_INFO_OFFSET + 4;
            UBOShadow.SHADOW_COLOR_OFFSET = UBOShadow.SHADOW_LIGHT_PACKING_NBIAS_NULL_INFO_OFFSET + 4;
            UBOShadow.COUNT = UBOShadow.SHADOW_COLOR_OFFSET + 4;
            UBOShadow.SIZE = UBOShadow.COUNT * 4;
            UBOShadow.NAME = 'CCShadow';
            UBOShadow.BINDING = PipelineGlobalBindings.UBO_SHADOW;
            UBOShadow.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOShadow.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.ALL);
            UBOShadow.LAYOUT = new UniformBlock(SetIndex.GLOBAL, UBOShadow.BINDING, UBOShadow.NAME, [new Uniform('cc_matLightPlaneProj', Type.MAT4, 1), new Uniform('cc_matLightView', Type.MAT4, 1), new Uniform('cc_matLightViewProj', Type.MAT4, 1), new Uniform('cc_shadowNFLSInfo', Type.FLOAT4, 1), new Uniform('cc_shadowWHPBInfo', Type.FLOAT4, 1), new Uniform('cc_shadowLPNNInfo', Type.FLOAT4, 1), new Uniform('cc_shadowColor', Type.FLOAT4, 1)], 1);
            globalDescriptorSetLayout.layouts[UBOShadow.NAME] = UBOShadow.LAYOUT;
            globalDescriptorSetLayout.bindings[UBOShadow.BINDING] = UBOShadow.DESCRIPTOR;
            const UNIFORM_SHADOWMAP_NAME = 'cc_shadowMap';
            const UNIFORM_SHADOWMAP_BINDING = PipelineGlobalBindings.SAMPLER_SHADOWMAP;
            const UNIFORM_SHADOWMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SHADOWMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_SHADOWMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_SHADOWMAP_BINDING, UNIFORM_SHADOWMAP_NAME, Type.SAMPLER2D, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_SHADOWMAP_NAME] = UNIFORM_SHADOWMAP_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_SHADOWMAP_BINDING] = UNIFORM_SHADOWMAP_DESCRIPTOR;
            const UNIFORM_GBUFFER_ALBEDOMAP_NAME = 'cc_gbuffer_albedoMap';
            const UNIFORM_GBUFFER_ALBEDOMAP_BINDING = PipelineGlobalBindings.SAMPLER_GBUFFER_ALBEDOMAP;
            const UNIFORM_GBUFFER_ALBEDOMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_GBUFFER_ALBEDOMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_GBUFFER_ALBEDOMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_GBUFFER_ALBEDOMAP_BINDING, UNIFORM_GBUFFER_ALBEDOMAP_NAME, Type.SAMPLER2D, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_GBUFFER_ALBEDOMAP_NAME] = UNIFORM_GBUFFER_ALBEDOMAP_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_GBUFFER_ALBEDOMAP_BINDING] = UNIFORM_GBUFFER_ALBEDOMAP_DESCRIPTOR;
            const UNIFORM_GBUFFER_POSITIONMAP_NAME = 'cc_gbuffer_positionMap';
            const UNIFORM_GBUFFER_POSITIONMAP_BINDING = PipelineGlobalBindings.SAMPLER_GBUFFER_POSITIONMAP;
            const UNIFORM_GBUFFER_POSITIONMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_GBUFFER_POSITIONMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_GBUFFER_POSITIONMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_GBUFFER_POSITIONMAP_BINDING, UNIFORM_GBUFFER_POSITIONMAP_NAME, Type.SAMPLER2D, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_GBUFFER_POSITIONMAP_NAME] = UNIFORM_GBUFFER_POSITIONMAP_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_GBUFFER_POSITIONMAP_BINDING] = UNIFORM_GBUFFER_POSITIONMAP_DESCRIPTOR;
            const UNIFORM_GBUFFER_NORMALMAP_NAME = 'cc_gbuffer_normalMap';
            const UNIFORM_GBUFFER_NORMALMAP_BINDING = PipelineGlobalBindings.SAMPLER_GBUFFER_NORMALMAP;
            const UNIFORM_GBUFFER_NORMALMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_GBUFFER_NORMALMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_GBUFFER_NORMALMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_GBUFFER_NORMALMAP_BINDING, UNIFORM_GBUFFER_NORMALMAP_NAME, Type.SAMPLER2D, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_GBUFFER_NORMALMAP_NAME] = UNIFORM_GBUFFER_NORMALMAP_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_GBUFFER_NORMALMAP_BINDING] = UNIFORM_GBUFFER_NORMALMAP_DESCRIPTOR;
            const UNIFORM_LIGHTING_RESULTMAP_NAME = 'cc_lighting_resultMap';
            const UNIFORM_LIGHTING_RESULTMAP_BINDING = PipelineGlobalBindings.SAMPLER_LIGHTING_RESULTMAP;
            const UNIFORM_LIGHTING_RESULTMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_LIGHTING_RESULTMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_LIGHTING_RESULTMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_LIGHTING_RESULTMAP_BINDING, UNIFORM_LIGHTING_RESULTMAP_NAME, Type.SAMPLER2D, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_LIGHTING_RESULTMAP_NAME] = UNIFORM_LIGHTING_RESULTMAP_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_LIGHTING_RESULTMAP_BINDING] = UNIFORM_LIGHTING_RESULTMAP_DESCRIPTOR;
            const UNIFORM_GBUFFER_EMISSIVEMAP_NAME = 'cc_gbuffer_emissiveMap';
            const UNIFORM_GBUFFER_EMISSIVEMAP_BINDING = PipelineGlobalBindings.SAMPLER_GBUFFER_EMISSIVEMAP;
            const UNIFORM_GBUFFER_EMISSIVEMAP_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_GBUFFER_EMISSIVEMAP_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_GBUFFER_EMISSIVEMAP_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_GBUFFER_EMISSIVEMAP_BINDING, UNIFORM_GBUFFER_EMISSIVEMAP_NAME, Type.SAMPLER2D, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_GBUFFER_EMISSIVEMAP_NAME] = UNIFORM_GBUFFER_EMISSIVEMAP_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_GBUFFER_EMISSIVEMAP_BINDING] = UNIFORM_GBUFFER_EMISSIVEMAP_DESCRIPTOR;
            const UNIFORM_ENVIRONMENT_NAME = 'cc_environment';
            const UNIFORM_ENVIRONMENT_BINDING = PipelineGlobalBindings.SAMPLER_ENVIRONMENT;
            const UNIFORM_ENVIRONMENT_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_ENVIRONMENT_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_ENVIRONMENT_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_ENVIRONMENT_BINDING, UNIFORM_ENVIRONMENT_NAME, Type.SAMPLER_CUBE, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_ENVIRONMENT_NAME] = UNIFORM_ENVIRONMENT_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_ENVIRONMENT_BINDING] = UNIFORM_ENVIRONMENT_DESCRIPTOR;
            const UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_NAME = 'cc_spotLightingMap';
            const UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_BINDING = PipelineGlobalBindings.SAMPLER_SPOT_LIGHTING_MAP;
            const UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.GLOBAL, UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_BINDING, UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_NAME, Type.SAMPLER2D, 1);
            globalDescriptorSetLayout.layouts[UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_NAME] = UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_LAYOUT;
            globalDescriptorSetLayout.bindings[UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_BINDING] = UNIFORM_SPOT_LIGHTING_MAP_TEXTURE_DESCRIPTOR;
            class UBOLocal {} exports('dk', UBOLocal);
            UBOLocal.MAT_WORLD_OFFSET = 0;
            UBOLocal.MAT_WORLD_IT_OFFSET = UBOLocal.MAT_WORLD_OFFSET + 16;
            UBOLocal.LIGHTINGMAP_UVPARAM = UBOLocal.MAT_WORLD_IT_OFFSET + 16;
            UBOLocal.COUNT = UBOLocal.LIGHTINGMAP_UVPARAM + 4;
            UBOLocal.SIZE = UBOLocal.COUNT * 4;
            UBOLocal.NAME = 'CCLocal';
            UBOLocal.BINDING = ModelLocalBindings.UBO_LOCAL;
            UBOLocal.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOLocal.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
            UBOLocal.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOLocal.BINDING, UBOLocal.NAME, [new Uniform('cc_matWorld', Type.MAT4, 1), new Uniform('cc_matWorldIT', Type.MAT4, 1), new Uniform('cc_lightingMapUVParam', Type.FLOAT4, 1)], 1);
            localDescriptorSetLayout.layouts[UBOLocal.NAME] = UBOLocal.LAYOUT;
            localDescriptorSetLayout.bindings[UBOLocal.BINDING] = UBOLocal.DESCRIPTOR;
            const INST_MAT_WORLD = 'a_matWorld0';
            class UBOLocalBatched {}
            UBOLocalBatched.BATCHING_COUNT = 10;
            UBOLocalBatched.MAT_WORLDS_OFFSET = 0;
            UBOLocalBatched.COUNT = 16 * UBOLocalBatched.BATCHING_COUNT;
            UBOLocalBatched.SIZE = UBOLocalBatched.COUNT * 4;
            UBOLocalBatched.NAME = 'CCLocalBatched';
            UBOLocalBatched.BINDING = ModelLocalBindings.UBO_LOCAL;
            UBOLocalBatched.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOLocalBatched.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
            UBOLocalBatched.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOLocalBatched.BINDING, UBOLocalBatched.NAME, [new Uniform('cc_matWorlds', Type.MAT4, UBOLocalBatched.BATCHING_COUNT)], 1);
            localDescriptorSetLayout.layouts[UBOLocalBatched.NAME] = UBOLocalBatched.LAYOUT;
            localDescriptorSetLayout.bindings[UBOLocalBatched.BINDING] = UBOLocalBatched.DESCRIPTOR;
            class UBOForwardLight {}
            UBOForwardLight.LIGHTS_PER_PASS = 1;
            UBOForwardLight.LIGHT_POS_OFFSET = 0;
            UBOForwardLight.LIGHT_COLOR_OFFSET = UBOForwardLight.LIGHT_POS_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
            UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET = UBOForwardLight.LIGHT_COLOR_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
            UBOForwardLight.LIGHT_DIR_OFFSET = UBOForwardLight.LIGHT_SIZE_RANGE_ANGLE_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
            UBOForwardLight.COUNT = UBOForwardLight.LIGHT_DIR_OFFSET + UBOForwardLight.LIGHTS_PER_PASS * 4;
            UBOForwardLight.SIZE = UBOForwardLight.COUNT * 4;
            UBOForwardLight.NAME = 'CCForwardLight';
            UBOForwardLight.BINDING = ModelLocalBindings.UBO_FORWARD_LIGHTS;
            UBOForwardLight.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOForwardLight.BINDING, DescriptorType.DYNAMIC_UNIFORM_BUFFER, 1, ShaderStageFlagBit.FRAGMENT);
            UBOForwardLight.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOForwardLight.BINDING, UBOForwardLight.NAME, [new Uniform('cc_lightPos', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightColor', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightSizeRangeAngle', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS), new Uniform('cc_lightDir', Type.FLOAT4, UBOForwardLight.LIGHTS_PER_PASS)], 1);
            localDescriptorSetLayout.layouts[UBOForwardLight.NAME] = UBOForwardLight.LAYOUT;
            localDescriptorSetLayout.bindings[UBOForwardLight.BINDING] = UBOForwardLight.DESCRIPTOR;
            const JOINT_UNIFORM_CAPACITY = 30;
            class UBOSkinningTexture {} exports('ct', UBOSkinningTexture);
            UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET = 0;
            UBOSkinningTexture.COUNT = UBOSkinningTexture.JOINTS_TEXTURE_INFO_OFFSET + 4;
            UBOSkinningTexture.SIZE = UBOSkinningTexture.COUNT * 4;
            UBOSkinningTexture.NAME = 'CCSkinningTexture';
            UBOSkinningTexture.BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;
            UBOSkinningTexture.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinningTexture.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
            UBOSkinningTexture.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinningTexture.BINDING, UBOSkinningTexture.NAME, [new Uniform('cc_jointTextureInfo', Type.FLOAT4, 1)], 1);
            localDescriptorSetLayout.layouts[UBOSkinningTexture.NAME] = UBOSkinningTexture.LAYOUT;
            localDescriptorSetLayout.bindings[UBOSkinningTexture.BINDING] = UBOSkinningTexture.DESCRIPTOR;
            class UBOSkinningAnimation {} exports('cl', UBOSkinningAnimation);
            UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET = 0;
            UBOSkinningAnimation.COUNT = UBOSkinningAnimation.JOINTS_ANIM_INFO_OFFSET + 4;
            UBOSkinningAnimation.SIZE = UBOSkinningAnimation.COUNT * 4;
            UBOSkinningAnimation.NAME = 'CCSkinningAnimation';
            UBOSkinningAnimation.BINDING = ModelLocalBindings.UBO_SKINNING_ANIMATION;
            UBOSkinningAnimation.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinningAnimation.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
            UBOSkinningAnimation.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinningAnimation.BINDING, UBOSkinningAnimation.NAME, [new Uniform('cc_jointAnimInfo', Type.FLOAT4, 1)], 1);
            localDescriptorSetLayout.layouts[UBOSkinningAnimation.NAME] = UBOSkinningAnimation.LAYOUT;
            localDescriptorSetLayout.bindings[UBOSkinningAnimation.BINDING] = UBOSkinningAnimation.DESCRIPTOR;
            const INST_JOINT_ANIM_INFO = exports('cv', 'a_jointAnimInfo');
            class UBOSkinning {} exports('cs', UBOSkinning);
            UBOSkinning.JOINTS_OFFSET = 0;
            UBOSkinning.COUNT = UBOSkinning.JOINTS_OFFSET + JOINT_UNIFORM_CAPACITY * 12;
            UBOSkinning.SIZE = UBOSkinning.COUNT * 4;
            UBOSkinning.NAME = 'CCSkinning';
            UBOSkinning.BINDING = ModelLocalBindings.UBO_SKINNING_TEXTURE;
            UBOSkinning.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOSkinning.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
            UBOSkinning.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOSkinning.BINDING, UBOSkinning.NAME, [new Uniform('cc_joints', Type.FLOAT4, JOINT_UNIFORM_CAPACITY * 3)], 1);
            localDescriptorSetLayout.layouts[UBOSkinning.NAME] = UBOSkinning.LAYOUT;
            localDescriptorSetLayout.bindings[UBOSkinning.BINDING] = UBOSkinning.DESCRIPTOR;
            class UBOMorph {} exports('bs', UBOMorph);
            UBOMorph.MAX_MORPH_TARGET_COUNT = 60;
            UBOMorph.OFFSET_OF_WEIGHTS = 0;
            UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH = 4 * UBOMorph.MAX_MORPH_TARGET_COUNT;
            UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT = UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_WIDTH + 4;
            UBOMorph.OFFSET_OF_VERTICES_COUNT = UBOMorph.OFFSET_OF_DISPLACEMENT_TEXTURE_HEIGHT + 4;
            UBOMorph.COUNT_BASE_4_BYTES = 4 * Math.ceil(UBOMorph.MAX_MORPH_TARGET_COUNT / 4) + 4;
            UBOMorph.SIZE = UBOMorph.COUNT_BASE_4_BYTES * 4;
            UBOMorph.NAME = 'CCMorph';
            UBOMorph.BINDING = ModelLocalBindings.UBO_MORPH;
            UBOMorph.DESCRIPTOR = new DescriptorSetLayoutBinding(UBOMorph.BINDING, DescriptorType.UNIFORM_BUFFER, 1, ShaderStageFlagBit.VERTEX);
            UBOMorph.LAYOUT = new UniformBlock(SetIndex.LOCAL, UBOMorph.BINDING, UBOMorph.NAME, [new Uniform('cc_displacementWeights', Type.FLOAT4, UBOMorph.MAX_MORPH_TARGET_COUNT / 4), new Uniform('cc_displacementTextureInfo', Type.FLOAT4, 1)], 1);
            localDescriptorSetLayout.layouts[UBOMorph.NAME] = UBOMorph.LAYOUT;
            localDescriptorSetLayout.bindings[UBOMorph.BINDING] = UBOMorph.DESCRIPTOR;
            const UNIFORM_JOINT_TEXTURE_NAME = 'cc_jointTexture';
            const UNIFORM_JOINT_TEXTURE_BINDING = exports('cu', ModelLocalBindings.SAMPLER_JOINTS);
            const UNIFORM_JOINT_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_JOINT_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
            const UNIFORM_JOINT_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_JOINT_TEXTURE_BINDING, UNIFORM_JOINT_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_JOINT_TEXTURE_NAME] = UNIFORM_JOINT_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_JOINT_TEXTURE_BINDING] = UNIFORM_JOINT_TEXTURE_DESCRIPTOR;
            const UNIFORM_POSITION_MORPH_TEXTURE_NAME = 'cc_PositionDisplacements';
            const UNIFORM_POSITION_MORPH_TEXTURE_BINDING = exports('bC', ModelLocalBindings.SAMPLER_MORPH_POSITION);
            const UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_POSITION_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
            const UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_POSITION_MORPH_TEXTURE_BINDING, UNIFORM_POSITION_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_POSITION_MORPH_TEXTURE_NAME] = UNIFORM_POSITION_MORPH_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_POSITION_MORPH_TEXTURE_BINDING] = UNIFORM_POSITION_MORPH_TEXTURE_DESCRIPTOR;
            const UNIFORM_NORMAL_MORPH_TEXTURE_NAME = 'cc_NormalDisplacements';
            const UNIFORM_NORMAL_MORPH_TEXTURE_BINDING = exports('bB', ModelLocalBindings.SAMPLER_MORPH_NORMAL);
            const UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_NORMAL_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
            const UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_NORMAL_MORPH_TEXTURE_BINDING, UNIFORM_NORMAL_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_NORMAL_MORPH_TEXTURE_NAME] = UNIFORM_NORMAL_MORPH_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_NORMAL_MORPH_TEXTURE_BINDING] = UNIFORM_NORMAL_MORPH_TEXTURE_DESCRIPTOR;
            const UNIFORM_TANGENT_MORPH_TEXTURE_NAME = 'cc_TangentDisplacements';
            const UNIFORM_TANGENT_MORPH_TEXTURE_BINDING = exports('bA', ModelLocalBindings.SAMPLER_MORPH_TANGENT);
            const UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_TANGENT_MORPH_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.VERTEX);
            const UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_TANGENT_MORPH_TEXTURE_BINDING, UNIFORM_TANGENT_MORPH_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_TANGENT_MORPH_TEXTURE_NAME] = UNIFORM_TANGENT_MORPH_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_TANGENT_MORPH_TEXTURE_BINDING] = UNIFORM_TANGENT_MORPH_TEXTURE_DESCRIPTOR;
            const UNIFORM_LIGHTMAP_TEXTURE_NAME = 'cc_lightingMap';
            const UNIFORM_LIGHTMAP_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_LIGHTMAP;
            const UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_LIGHTMAP_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_LIGHTMAP_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_LIGHTMAP_TEXTURE_BINDING, UNIFORM_LIGHTMAP_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_LIGHTMAP_TEXTURE_NAME] = UNIFORM_LIGHTMAP_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_LIGHTMAP_TEXTURE_BINDING] = UNIFORM_LIGHTMAP_TEXTURE_DESCRIPTOR;
            const UNIFORM_SPRITE_TEXTURE_NAME = 'cc_spriteTexture';
            const UNIFORM_SPRITE_TEXTURE_BINDING = ModelLocalBindings.SAMPLER_SPRITE;
            const UNIFORM_SPRITE_TEXTURE_DESCRIPTOR = new DescriptorSetLayoutBinding(UNIFORM_SPRITE_TEXTURE_BINDING, DescriptorType.SAMPLER_TEXTURE, 1, ShaderStageFlagBit.FRAGMENT);
            const UNIFORM_SPRITE_TEXTURE_LAYOUT = new UniformSamplerTexture(SetIndex.LOCAL, UNIFORM_SPRITE_TEXTURE_BINDING, UNIFORM_SPRITE_TEXTURE_NAME, Type.SAMPLER2D, 1);
            localDescriptorSetLayout.layouts[UNIFORM_SPRITE_TEXTURE_NAME] = UNIFORM_SPRITE_TEXTURE_LAYOUT;
            localDescriptorSetLayout.bindings[UNIFORM_SPRITE_TEXTURE_BINDING] = UNIFORM_SPRITE_TEXTURE_DESCRIPTOR;
            const CAMERA_DEFAULT_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.GIZMOS, Layers.BitMask.EDITOR, Layers.BitMask.SCENE_GIZMO, Layers.BitMask.PROFILER]);
            const CAMERA_EDITOR_MASK = Layers.makeMaskExclude([Layers.BitMask.UI_2D, Layers.BitMask.PROFILER]);
            const MODEL_ALWAYS_MASK = Layers.Enum.ALL;

            let CameraFOVAxis;

            (function (CameraFOVAxis) {
              CameraFOVAxis[CameraFOVAxis["VERTICAL"] = 0] = "VERTICAL";
              CameraFOVAxis[CameraFOVAxis["HORIZONTAL"] = 1] = "HORIZONTAL";
            })(CameraFOVAxis || (CameraFOVAxis = {}));

            let CameraProjection;

            (function (CameraProjection) {
              CameraProjection[CameraProjection["ORTHO"] = 0] = "ORTHO";
              CameraProjection[CameraProjection["PERSPECTIVE"] = 1] = "PERSPECTIVE";
            })(CameraProjection || (CameraProjection = {}));

            let CameraAperture;

            (function (CameraAperture) {
              CameraAperture[CameraAperture["F1_8"] = 0] = "F1_8";
              CameraAperture[CameraAperture["F2_0"] = 1] = "F2_0";
              CameraAperture[CameraAperture["F2_2"] = 2] = "F2_2";
              CameraAperture[CameraAperture["F2_5"] = 3] = "F2_5";
              CameraAperture[CameraAperture["F2_8"] = 4] = "F2_8";
              CameraAperture[CameraAperture["F3_2"] = 5] = "F3_2";
              CameraAperture[CameraAperture["F3_5"] = 6] = "F3_5";
              CameraAperture[CameraAperture["F4_0"] = 7] = "F4_0";
              CameraAperture[CameraAperture["F4_5"] = 8] = "F4_5";
              CameraAperture[CameraAperture["F5_0"] = 9] = "F5_0";
              CameraAperture[CameraAperture["F5_6"] = 10] = "F5_6";
              CameraAperture[CameraAperture["F6_3"] = 11] = "F6_3";
              CameraAperture[CameraAperture["F7_1"] = 12] = "F7_1";
              CameraAperture[CameraAperture["F8_0"] = 13] = "F8_0";
              CameraAperture[CameraAperture["F9_0"] = 14] = "F9_0";
              CameraAperture[CameraAperture["F10_0"] = 15] = "F10_0";
              CameraAperture[CameraAperture["F11_0"] = 16] = "F11_0";
              CameraAperture[CameraAperture["F13_0"] = 17] = "F13_0";
              CameraAperture[CameraAperture["F14_0"] = 18] = "F14_0";
              CameraAperture[CameraAperture["F16_0"] = 19] = "F16_0";
              CameraAperture[CameraAperture["F18_0"] = 20] = "F18_0";
              CameraAperture[CameraAperture["F20_0"] = 21] = "F20_0";
              CameraAperture[CameraAperture["F22_0"] = 22] = "F22_0";
            })(CameraAperture || (CameraAperture = {}));

            let CameraISO;

            (function (CameraISO) {
              CameraISO[CameraISO["ISO100"] = 0] = "ISO100";
              CameraISO[CameraISO["ISO200"] = 1] = "ISO200";
              CameraISO[CameraISO["ISO400"] = 2] = "ISO400";
              CameraISO[CameraISO["ISO800"] = 3] = "ISO800";
            })(CameraISO || (CameraISO = {}));

            let CameraShutter;

            (function (CameraShutter) {
              CameraShutter[CameraShutter["D1"] = 0] = "D1";
              CameraShutter[CameraShutter["D2"] = 1] = "D2";
              CameraShutter[CameraShutter["D4"] = 2] = "D4";
              CameraShutter[CameraShutter["D8"] = 3] = "D8";
              CameraShutter[CameraShutter["D15"] = 4] = "D15";
              CameraShutter[CameraShutter["D30"] = 5] = "D30";
              CameraShutter[CameraShutter["D60"] = 6] = "D60";
              CameraShutter[CameraShutter["D125"] = 7] = "D125";
              CameraShutter[CameraShutter["D250"] = 8] = "D250";
              CameraShutter[CameraShutter["D500"] = 9] = "D500";
              CameraShutter[CameraShutter["D1000"] = 10] = "D1000";
              CameraShutter[CameraShutter["D2000"] = 11] = "D2000";
              CameraShutter[CameraShutter["D4000"] = 12] = "D4000";
            })(CameraShutter || (CameraShutter = {}));

            const FSTOPS = [1.8, 2.0, 2.2, 2.5, 2.8, 3.2, 3.5, 4.0, 4.5, 5.0, 5.6, 6.3, 7.1, 8.0, 9.0, 10.0, 11.0, 13.0, 14.0, 16.0, 18.0, 20.0, 22.0];
            const SHUTTERS = [1.0, 1.0 / 2.0, 1.0 / 4.0, 1.0 / 8.0, 1.0 / 15.0, 1.0 / 30.0, 1.0 / 60.0, 1.0 / 125.0, 1.0 / 250.0, 1.0 / 500.0, 1.0 / 1000.0, 1.0 / 2000.0, 1.0 / 4000.0];
            const ISOS = [100.0, 200.0, 400.0, 800.0];
            const v_a = new Vec3();
            const v_b = new Vec3();

            const _tempMat1 = new Mat4();

            const SKYBOX_FLAG = ClearFlagBit.STENCIL << 1;
            const correctionMatrices = [];
            class Camera {
              constructor(device) {
                this.isWindowSize = true;
                this.screenScale = void 0;
                this._device = void 0;
                this._scene = null;
                this._node = null;
                this._name = null;
                this._enabled = false;
                this._proj = -1;
                this._aspect = void 0;
                this._orthoHeight = 10.0;
                this._fovAxis = CameraFOVAxis.VERTICAL;
                this._fov = toRadian(45);
                this._nearClip = 1.0;
                this._farClip = 1000.0;
                this._clearColor = new Color$1(0.2, 0.2, 0.2, 1);
                this._viewport = new Rect(0, 0, 1, 1);
                this._curTransform = SurfaceTransform.IDENTITY;
                this._isProjDirty = true;
                this._matView = new Mat4();
                this._matViewInv = null;
                this._matProj = new Mat4();
                this._matProjInv = new Mat4();
                this._matViewProj = new Mat4();
                this._matViewProjInv = new Mat4();
                this._frustum = new Frustum();
                this._forward = new Vec3();
                this._position = new Vec3();
                this._priority = 0;
                this._aperture = CameraAperture.F16_0;
                this._apertureValue = void 0;
                this._shutter = CameraShutter.D125;
                this._shutterValue = 0.0;
                this._iso = CameraISO.ISO100;
                this._isoValue = 0.0;
                this._ec = 0.0;
                this._poolHandle = NULL_HANDLE;
                this._frustumHandle = NULL_HANDLE;
                this._window = null;
                this._device = device;
                this._apertureValue = FSTOPS[this._aperture];
                this._shutterValue = SHUTTERS[this._shutter];
                this._isoValue = ISOS[this._iso];
                this._aspect = this.screenScale = 1;

                if (!correctionMatrices.length) {
                  const ySign = device.capabilities.clipSpaceSignY;
                  correctionMatrices[SurfaceTransform.IDENTITY] = new Mat4(1, 0, 0, 0, 0, ySign);
                  correctionMatrices[SurfaceTransform.ROTATE_90] = new Mat4(0, 1, 0, 0, -ySign, 0);
                  correctionMatrices[SurfaceTransform.ROTATE_180] = new Mat4(-1, 0, 0, 0, 0, -ySign);
                  correctionMatrices[SurfaceTransform.ROTATE_270] = new Mat4(0, -1, 0, 0, ySign, 0);
                }
              }

              initialize(info) {
                this._name = info.name;
                this._node = info.node;
                this._proj = info.projection;
                this._priority = info.priority || 0;
                this._aspect = this.screenScale = 1;
                const handle = this._poolHandle = CameraPool.alloc();
                CameraPool.set(handle, CameraView.WIDTH, 1);
                CameraPool.set(handle, CameraView.HEIGHT, 1);
                CameraPool.set(handle, CameraView.CLEAR_FLAGS, ClearFlagBit.NONE);
                CameraPool.set(handle, CameraView.CLEAR_DEPTH, 1.0);
                CameraPool.set(handle, CameraView.NODE, this._node.handle);
                CameraPool.set(handle, CameraView.VISIBILITY, CAMERA_DEFAULT_MASK);
                if (this._scene) CameraPool.set(handle, CameraView.SCENE, this._scene.handle);

                {
                  this._frustumHandle = FrustumPool.alloc();
                  CameraPool.set(handle, CameraView.FRUSTUM, this._frustumHandle);
                }

                this.updateExposure();
                this.changeTargetWindow(info.window);
                console.log(`Created Camera: ${this._name} ${CameraPool.get(handle, CameraView.WIDTH)}x${CameraPool.get(handle, CameraView.HEIGHT)}`);
              }

              destroy() {
                if (this._window) {
                  this._window.detachCamera(this);
                }

                this._name = null;

                if (this._poolHandle) {
                  CameraPool.free(this._poolHandle);
                  this._poolHandle = NULL_HANDLE;

                  if (this._frustumHandle) {
                    FrustumPool.free(this._frustumHandle);
                    this._frustumHandle = NULL_HANDLE;
                  }
                }
              }

              attachToScene(scene) {
                this._scene = scene;
                this._enabled = true;
                CameraPool.set(this._poolHandle, CameraView.SCENE, scene.handle);
              }

              detachFromScene() {
                this._scene = null;
                this._enabled = false;
                CameraPool.set(this._poolHandle, CameraView.SCENE, 0);
              }

              resize(width, height) {
                const handle = this._poolHandle;
                CameraPool.set(handle, CameraView.WIDTH, width);
                CameraPool.set(handle, CameraView.HEIGHT, height);
                this._aspect = width * this._viewport.width / (height * this._viewport.height);
                this._isProjDirty = true;
              }

              setFixedSize(width, height) {
                const handle = this._poolHandle;
                CameraPool.set(handle, CameraView.WIDTH, width);
                CameraPool.set(handle, CameraView.HEIGHT, height);
                this._aspect = width * this._viewport.width / (height * this._viewport.height);
                this.isWindowSize = false;
              }

              update(forceUpdate = false) {
                if (!this._node) return;
                let viewProjDirty = false;

                if (this._node.hasChangedFlags || forceUpdate) {
                  Mat4.invert(this._matView, this._node.worldMatrix);
                  CameraPool.setMat4(this._poolHandle, CameraView.MAT_VIEW, this._matView);
                  this._forward.x = -this._matView.m02;
                  this._forward.y = -this._matView.m06;
                  this._forward.z = -this._matView.m10;

                  this._node.getWorldPosition(this._position);

                  CameraPool.setVec3(this._poolHandle, CameraView.POSITION, this._position);
                  CameraPool.setVec3(this._poolHandle, CameraView.FORWARD, this._forward);
                  viewProjDirty = true;
                }

                let orientation = this._device.surfaceTransform;

                if (this._isProjDirty || this._curTransform !== orientation) {
                  var _this$window;

                  this._curTransform = orientation;
                  const projectionSignY = this._device.capabilities.clipSpaceSignY;

                  if ((_this$window = this.window) === null || _this$window === void 0 ? void 0 : _this$window.hasOffScreenAttachments) {
                    orientation = SurfaceTransform.IDENTITY;
                  }

                  if (this._proj === CameraProjection.PERSPECTIVE) {
                    Mat4.perspective(this._matProj, this._fov, this._aspect, this._nearClip, this._farClip, this._fovAxis === CameraFOVAxis.VERTICAL, this._device.capabilities.clipSpaceMinZ, projectionSignY, orientation);
                  } else {
                    const x = this._orthoHeight * this._aspect;
                    const y = this._orthoHeight;
                    Mat4.ortho(this._matProj, -x, x, -y, y, this._nearClip, this._farClip, this._device.capabilities.clipSpaceMinZ, projectionSignY, orientation);
                  }

                  Mat4.invert(this._matProjInv, this._matProj);
                  CameraPool.setMat4(this._poolHandle, CameraView.MAT_PROJ, this._matProj);
                  CameraPool.setMat4(this._poolHandle, CameraView.MAT_PROJ_INV, this._matProjInv);
                  viewProjDirty = true;
                  this._isProjDirty = false;
                }

                if (viewProjDirty) {
                  Mat4.multiply(this._matViewProj, this._matProj, this._matView);
                  Mat4.invert(this._matViewProjInv, this._matViewProj);

                  this._frustum.update(this._matViewProj, this._matViewProjInv);

                  CameraPool.setMat4(this._poolHandle, CameraView.MAT_VIEW_PROJ, this._matViewProj);
                  CameraPool.setMat4(this._poolHandle, CameraView.MAT_VIEW_PROJ_INV, this._matViewProjInv);
                  recordFrustumToSharedMemory(this._frustumHandle, this._frustum);
                }
              }

              set node(val) {
                this._node = val;
              }

              get node() {
                return this._node;
              }

              set enabled(val) {
                this._enabled = val;
              }

              get enabled() {
                return this._enabled;
              }

              set orthoHeight(val) {
                this._orthoHeight = val;
                this._isProjDirty = true;
              }

              get orthoHeight() {
                return this._orthoHeight;
              }

              set projectionType(val) {
                this._proj = val;
                this._isProjDirty = true;
              }

              get projectionType() {
                return this._proj;
              }

              set fovAxis(axis) {
                this._fovAxis = axis;
                this._isProjDirty = true;
              }

              get fovAxis() {
                return this._fovAxis;
              }

              set fov(fov) {
                this._fov = fov;
                this._isProjDirty = true;
              }

              get fov() {
                return this._fov;
              }

              set nearClip(nearClip) {
                this._nearClip = nearClip;
                this._isProjDirty = true;
              }

              get nearClip() {
                return this._nearClip;
              }

              set farClip(farClip) {
                this._farClip = farClip;
                this._isProjDirty = true;
              }

              get farClip() {
                return this._farClip;
              }

              set clearColor(val) {
                this._clearColor.x = val.x;
                this._clearColor.y = val.y;
                this._clearColor.z = val.z;
                this._clearColor.w = val.w;
                CameraPool.setVec4(this._poolHandle, CameraView.CLEAR_COLOR, val);
              }

              get clearColor() {
                return this._clearColor;
              }

              get viewport() {
                return this._viewport;
              }

              set viewport(val) {
                const {
                  x,
                  width,
                  height
                } = val;
                const y = this._device.capabilities.clipSpaceSignY < 0 ? 1 - val.y - height : val.y;

                switch (this._device.surfaceTransform) {
                  case SurfaceTransform.ROTATE_90:
                    this._viewport.x = 1 - y - height;
                    this._viewport.y = x;
                    this._viewport.width = height;
                    this._viewport.height = width;
                    break;

                  case SurfaceTransform.ROTATE_180:
                    this._viewport.x = 1 - x - width;
                    this._viewport.y = 1 - y - height;
                    this._viewport.width = width;
                    this._viewport.height = height;
                    break;

                  case SurfaceTransform.ROTATE_270:
                    this._viewport.x = y;
                    this._viewport.y = 1 - x - width;
                    this._viewport.width = height;
                    this._viewport.height = width;
                    break;

                  case SurfaceTransform.IDENTITY:
                    this._viewport.x = x;
                    this._viewport.y = y;
                    this._viewport.width = width;
                    this._viewport.height = height;
                    break;
                }

                CameraPool.setVec4(this._poolHandle, CameraView.VIEW_PORT, this._viewport);
                this.resize(this.width, this.height);
              }

              get scene() {
                return this._scene;
              }

              get name() {
                return this._name;
              }

              get width() {
                return CameraPool.get(this._poolHandle, CameraView.WIDTH);
              }

              get height() {
                return CameraPool.get(this._poolHandle, CameraView.HEIGHT);
              }

              get aspect() {
                return this._aspect;
              }

              set matView(val) {
                this._matView = val;
                CameraPool.setMat4(this._poolHandle, CameraView.MAT_VIEW, this._matView);
              }

              get matView() {
                return this._matView;
              }

              set matViewInv(val) {
                this._matViewInv = val;
              }

              get matViewInv() {
                return this._matViewInv || this._node.worldMatrix;
              }

              set matProj(val) {
                this._matProj = val;
                CameraPool.setMat4(this._poolHandle, CameraView.MAT_PROJ, this._matProj);
              }

              get matProj() {
                return this._matProj;
              }

              set matProjInv(val) {
                this._matProjInv = val;
                CameraPool.setMat4(this._poolHandle, CameraView.MAT_PROJ_INV, this._matProjInv);
              }

              get matProjInv() {
                return this._matProjInv;
              }

              set matViewProj(val) {
                this._matViewProj = val;
                CameraPool.setMat4(this._poolHandle, CameraView.MAT_VIEW_PROJ, this._matViewProj);
              }

              get matViewProj() {
                return this._matViewProj;
              }

              set matViewProjInv(val) {
                this._matViewProjInv = val;
                CameraPool.setMat4(this._poolHandle, CameraView.MAT_VIEW_PROJ_INV, this._matViewProjInv);
              }

              get matViewProjInv() {
                return this._matViewProjInv;
              }

              set frustum(val) {
                this._frustum = val;
                recordFrustumToSharedMemory(this._frustumHandle, val);
              }

              get frustum() {
                return this._frustum;
              }

              set window(val) {
                this._window = val;
                if (val) CameraPool.set(this._poolHandle, CameraView.WINDOW, val.handle);
              }

              get window() {
                return this._window;
              }

              set forward(val) {
                this._forward = val;
                CameraPool.setVec3(this._poolHandle, CameraView.FORWARD, this._forward);
              }

              get forward() {
                return this._forward;
              }

              set position(val) {
                this._position = val;
                CameraPool.setVec3(this._poolHandle, CameraView.POSITION, this._position);
              }

              get position() {
                return this._position;
              }

              set visibility(vis) {
                CameraPool.set(this._poolHandle, CameraView.VISIBILITY, vis);
              }

              get visibility() {
                return CameraPool.get(this._poolHandle, CameraView.VISIBILITY);
              }

              get priority() {
                return this._priority;
              }

              set priority(val) {
                this._priority = val;
              }

              set aperture(val) {
                this._aperture = val;
                this._apertureValue = FSTOPS[this._aperture];
                this.updateExposure();
              }

              get aperture() {
                return this._aperture;
              }

              get apertureValue() {
                return this._apertureValue;
              }

              set shutter(val) {
                this._shutter = val;
                this._shutterValue = SHUTTERS[this._shutter];
                this.updateExposure();
              }

              get shutter() {
                return this._shutter;
              }

              get shutterValue() {
                return this._shutterValue;
              }

              set iso(val) {
                this._iso = val;
                this._isoValue = ISOS[this._iso];
                this.updateExposure();
              }

              get iso() {
                return this._iso;
              }

              get isoValue() {
                return this._isoValue;
              }

              set ec(val) {
                this._ec = val;
              }

              get ec() {
                return this._ec;
              }

              get exposure() {
                return CameraPool.get(this._poolHandle, CameraView.EXPOSURE);
              }

              get clearFlag() {
                return CameraPool.get(this._poolHandle, CameraView.CLEAR_FLAGS);
              }

              set clearFlag(flag) {
                CameraPool.set(this._poolHandle, CameraView.CLEAR_FLAGS, flag);
              }

              get clearDepth() {
                return CameraPool.get(this._poolHandle, CameraView.CLEAR_DEPTH);
              }

              set clearDepth(depth) {
                CameraPool.set(this._poolHandle, CameraView.CLEAR_DEPTH, depth);
              }

              get clearStencil() {
                return CameraPool.get(this._poolHandle, CameraView.CLEAR_STENCIL);
              }

              set clearStencil(stencil) {
                CameraPool.set(this._poolHandle, CameraView.CLEAR_STENCIL, stencil);
              }

              get handle() {
                return this._poolHandle;
              }

              changeTargetWindow(window = null) {
                if (this._window) {
                  this._window.detachCamera(this);
                }

                const win = window || legacyCC.director.root.mainWindow;

                if (win) {
                  win.attachCamera(this);
                  this.resize(win.width, win.height);
                  this._window = win;
                  CameraPool.set(this._poolHandle, CameraView.WINDOW, win.handle);
                }
              }

              detachCamera() {
                if (this._window) {
                  this._window.detachCamera(this);
                }
              }

              screenPointToRay(out, x, y) {
                if (!this._node) return null;
                const handle = this._poolHandle;
                const width = CameraPool.get(handle, CameraView.WIDTH);
                const height = CameraPool.get(handle, CameraView.HEIGHT);
                const cx = this._viewport.x * width;
                const cy = this._viewport.y * height;
                const cw = this._viewport.width * width;
                const ch = this._viewport.height * height;
                const isProj = this._proj === CameraProjection.PERSPECTIVE;
                const ySign = this._device.capabilities.clipSpaceSignY;
                const preTransform = preTransforms[this._curTransform];
                Vec3.set(v_a, (x - cx) / cw * 2 - 1, (y - cy) / ch * 2 - 1, isProj ? 1 : -1);
                const {
                  x: ox,
                  y: oy
                } = v_a;
                v_a.x = ox * preTransform[0] + oy * preTransform[2] * ySign;
                v_a.y = ox * preTransform[1] + oy * preTransform[3] * ySign;
                Vec3.transformMat4(isProj ? v_a : out.o, v_a, this._matViewProjInv);

                if (isProj) {
                  this._node.getWorldPosition(v_b);

                  Ray.fromPoints(out, v_b, v_a);
                } else {
                  Vec3.transformQuat(out.d, Vec3.FORWARD, this._node.worldRotation);
                }

                return out;
              }

              screenToWorld(out, screenPos) {
                const handle = this._poolHandle;
                const width = CameraPool.get(handle, CameraView.WIDTH);
                const height = CameraPool.get(handle, CameraView.HEIGHT);
                const cx = this._viewport.x * width;
                const cy = this._viewport.y * height;
                const cw = this._viewport.width * width;
                const ch = this._viewport.height * height;
                const ySign = this._device.capabilities.clipSpaceSignY;
                const preTransform = preTransforms[this._curTransform];

                if (this._proj === CameraProjection.PERSPECTIVE) {
                  Vec3.set(out, (screenPos.x - cx) / cw * 2 - 1, (screenPos.y - cy) / ch * 2 - 1, 1.0);
                  const {
                    x,
                    y
                  } = out;
                  out.x = x * preTransform[0] + y * preTransform[2] * ySign;
                  out.y = x * preTransform[1] + y * preTransform[3] * ySign;
                  Vec3.transformMat4(out, out, this._matViewProjInv);

                  if (this._node) {
                    this._node.getWorldPosition(v_a);
                  }

                  Vec3.lerp(out, v_a, out, lerp(this._nearClip / this._farClip, 1, screenPos.z));
                } else {
                  Vec3.set(out, (screenPos.x - cx) / cw * 2 - 1, (screenPos.y - cy) / ch * 2 - 1, screenPos.z * 2 - 1);
                  const {
                    x,
                    y
                  } = out;
                  out.x = x * preTransform[0] + y * preTransform[2] * ySign;
                  out.y = x * preTransform[1] + y * preTransform[3] * ySign;
                  Vec3.transformMat4(out, out, this._matViewProjInv);
                }

                return out;
              }

              worldToScreen(out, worldPos) {
                const handle = this._poolHandle;
                const width = CameraPool.get(handle, CameraView.WIDTH);
                const height = CameraPool.get(handle, CameraView.HEIGHT);
                const cx = this._viewport.x * width;
                const cy = this._viewport.y * height;
                const cw = this._viewport.width * width;
                const ch = this._viewport.height * height;
                const ySign = this._device.capabilities.clipSpaceSignY;
                const preTransform = preTransforms[this._curTransform];
                Vec3.transformMat4(out, worldPos, this._matViewProj);
                const {
                  x,
                  y
                } = out;
                out.x = x * preTransform[0] + y * preTransform[2] * ySign;
                out.y = x * preTransform[1] + y * preTransform[3] * ySign;
                out.x = cx + (out.x + 1) * 0.5 * cw;
                out.y = cy + (out.y + 1) * 0.5 * ch;
                out.z = out.z * 0.5 + 0.5;
                return out;
              }

              worldMatrixToScreen(out, worldMatrix, width, height) {
                Mat4.multiply(out, this._matViewProj, worldMatrix);
                Mat4.multiply(out, correctionMatrices[this._curTransform], out);
                const halfWidth = width / 2;
                const halfHeight = height / 2;
                Mat4.identity(_tempMat1);
                Mat4.transform(_tempMat1, _tempMat1, Vec3.set(v_a, halfWidth, halfHeight, 0));
                Mat4.scale(_tempMat1, _tempMat1, Vec3.set(v_a, halfWidth, halfHeight, 1));
                Mat4.multiply(out, _tempMat1, out);
                return out;
              }

              updateExposure() {
                const ev100 = Math.log2(this._apertureValue * this._apertureValue / this._shutterValue * 100.0 / this._isoValue);
                CameraPool.set(this._poolHandle, CameraView.EXPOSURE, 0.833333 / 2.0 ** ev100);
              }

            }

            let NodeSpace;

            (function (NodeSpace) {
              NodeSpace[NodeSpace["LOCAL"] = 0] = "LOCAL";
              NodeSpace[NodeSpace["WORLD"] = 1] = "WORLD";
            })(NodeSpace || (NodeSpace = {}));

            let TransformBit;

            (function (TransformBit) {
              TransformBit[TransformBit["NONE"] = 0] = "NONE";
              TransformBit[TransformBit["POSITION"] = 1] = "POSITION";
              TransformBit[TransformBit["ROTATION"] = 2] = "ROTATION";
              TransformBit[TransformBit["SCALE"] = 4] = "SCALE";
              TransformBit[TransformBit["RS"] = TransformBit.ROTATION | TransformBit.SCALE] = "RS";
              TransformBit[TransformBit["TRS"] = TransformBit.POSITION | TransformBit.ROTATION | TransformBit.SCALE] = "TRS";
              TransformBit[TransformBit["TRS_MASK"] = ~TransformBit.TRS] = "TRS_MASK";
            })(TransformBit || (TransformBit = exports('b_', {})));

            legacyCC.internal.TransformBit = TransformBit;

            class RenderScene {
              get root() {
                return this._root;
              }

              get name() {
                return this._name;
              }

              get cameras() {
                return this._cameras;
              }

              get mainLight() {
                return this._mainLight;
              }

              get sphereLights() {
                return this._sphereLights;
              }

              get spotLights() {
                return this._spotLights;
              }

              get models() {
                return this._models;
              }

              get handle() {
                return this._scenePoolHandle;
              }

              get batches() {
                return this._batches;
              }

              static registerCreateFunc(root) {
                root._createSceneFun = _root => new RenderScene(_root);
              }

              constructor(root) {
                this._root = void 0;
                this._name = '';
                this._cameras = [];
                this._models = [];
                this._batches = [];
                this._directionalLights = [];
                this._sphereLights = [];
                this._spotLights = [];
                this._mainLight = null;
                this._modelId = 0;
                this._scenePoolHandle = NULL_HANDLE;
                this._modelArrayHandle = NULL_HANDLE;
                this._batchArrayHandle = NULL_HANDLE;
                this._sphereLightsHandle = NULL_HANDLE;
                this._spotLightsHandle = NULL_HANDLE;
                this._root = root;

                this._createHandles();
              }

              initialize(info) {
                this._name = info.name;

                this._createHandles();

                return true;
              }

              update(stamp) {
                const mainLight = this._mainLight;

                if (mainLight) {
                  mainLight.update();
                }

                const sphereLights = this._sphereLights;

                for (let i = 0; i < sphereLights.length; i++) {
                  const light = sphereLights[i];
                  light.update();
                }

                const spotLights = this._spotLights;

                for (let i = 0; i < spotLights.length; i++) {
                  const light = spotLights[i];
                  light.update();
                }

                const models = this._models;

                for (let i = 0; i < models.length; i++) {
                  const model = models[i];

                  if (model.enabled) {
                    model.updateTransform(stamp);
                    model.updateUBOs(stamp);
                  }
                }
              }

              destroy() {
                this.removeCameras();
                this.removeSphereLights();
                this.removeSpotLights();
                this.removeModels();

                if (this._modelArrayHandle) {
                  ModelArrayPool.free(this._modelArrayHandle);
                  this._modelArrayHandle = NULL_HANDLE;
                }

                if (this._scenePoolHandle) {
                  ScenePool.free(this._scenePoolHandle);
                  this._scenePoolHandle = NULL_HANDLE;
                }

                if (this._sphereLightsHandle) {
                  LightArrayPool.free(this._sphereLightsHandle);
                  this._sphereLightsHandle = NULL_HANDLE;
                }

                if (this._spotLightsHandle) {
                  LightArrayPool.free(this._spotLightsHandle);
                  this._spotLightsHandle = NULL_HANDLE;
                }

                if (this._batchArrayHandle) {
                  UIBatchArrayPool.free(this._batchArrayHandle);
                  this._batchArrayHandle = NULL_HANDLE;
                }
              }

              addCamera(cam) {
                cam.attachToScene(this);

                this._cameras.push(cam);
              }

              removeCamera(camera) {
                for (let i = 0; i < this._cameras.length; ++i) {
                  if (this._cameras[i] === camera) {
                    this._cameras.splice(i, 1);

                    camera.detachFromScene();
                    return;
                  }
                }
              }

              removeCameras() {
                for (const camera of this._cameras) {
                  camera.detachFromScene();
                }

                this._cameras.splice(0);
              }

              setMainLight(dl) {
                this._mainLight = dl;
                ScenePool.set(this._scenePoolHandle, SceneView.MAIN_LIGHT, dl.handle);
              }

              unsetMainLight(dl) {
                if (this._mainLight === dl) {
                  const dlList = this._directionalLights;

                  if (dlList.length) {
                    this._mainLight = dlList[dlList.length - 1];

                    if (this._mainLight.node) {
                      this._mainLight.node.hasChangedFlags |= TransformBit.ROTATION;
                    }
                  } else {
                    this._mainLight = null;
                  }
                }
              }

              addDirectionalLight(dl) {
                dl.attachToScene(this);

                this._directionalLights.push(dl);
              }

              removeDirectionalLight(dl) {
                for (let i = 0; i < this._directionalLights.length; ++i) {
                  if (this._directionalLights[i] === dl) {
                    dl.detachFromScene();

                    this._directionalLights.splice(i, 1);

                    return;
                  }
                }
              }

              addSphereLight(pl) {
                pl.attachToScene(this);

                this._sphereLights.push(pl);

                LightArrayPool.push(this._sphereLightsHandle, pl.handle);
              }

              removeSphereLight(pl) {
                for (let i = 0; i < this._sphereLights.length; ++i) {
                  if (this._sphereLights[i] === pl) {
                    pl.detachFromScene();

                    this._sphereLights.splice(i, 1);

                    LightArrayPool.erase(this._sphereLightsHandle, i);
                    return;
                  }
                }
              }

              addSpotLight(sl) {
                sl.attachToScene(this);

                this._spotLights.push(sl);

                LightArrayPool.push(this._spotLightsHandle, sl.handle);
              }

              removeSpotLight(sl) {
                for (let i = 0; i < this._spotLights.length; ++i) {
                  if (this._spotLights[i] === sl) {
                    sl.detachFromScene();

                    this._spotLights.splice(i, 1);

                    LightArrayPool.erase(this._spotLightsHandle, i);
                    return;
                  }
                }
              }

              removeSphereLights() {
                for (let i = 0; i < this._sphereLights.length; ++i) {
                  this._sphereLights[i].detachFromScene();
                }

                this._sphereLights.length = 0;
                LightArrayPool.clear(this._sphereLightsHandle);
              }

              removeSpotLights() {
                for (let i = 0; i < this._spotLights.length; ++i) {
                  this._spotLights[i].detachFromScene();
                }

                this._spotLights = [];
                LightArrayPool.clear(this._spotLightsHandle);
              }

              addModel(m) {
                m.attachToScene(this);

                this._models.push(m);

                ModelArrayPool.push(this._modelArrayHandle, m.handle);
              }

              removeModel(model) {
                for (let i = 0; i < this._models.length; ++i) {
                  if (this._models[i] === model) {
                    model.detachFromScene();

                    this._models.splice(i, 1);

                    ModelArrayPool.erase(this._modelArrayHandle, i);
                    return;
                  }
                }
              }

              removeModels() {
                for (const m of this._models) {
                  m.detachFromScene();
                  m.destroy();
                }

                this._models.length = 0;
                ModelArrayPool.clear(this._modelArrayHandle);
              }

              addBatch(batch) {
                this._batches.push(batch);

                UIBatchArrayPool.push(this._batchArrayHandle, batch.handle);
              }

              removeBatch(batch) {
                for (let i = 0; i < this._batches.length; ++i) {
                  if (this._batches[i] === batch) {
                    this._batches.splice(i, 1);

                    UIBatchArrayPool.erase(this._batchArrayHandle, i);
                    return;
                  }
                }
              }

              removeBatches() {
                this._batches.length = 0;
                UIBatchArrayPool.clear(this._batchArrayHandle);
              }

              onGlobalPipelineStateChanged() {
                for (const m of this._models) {
                  m.onGlobalPipelineStateChanged();
                }
              }

              generateModelId() {
                return this._modelId++;
              }

              _createHandles() {
                if (!this._modelArrayHandle) {
                  this._modelArrayHandle = ModelArrayPool.alloc();
                  this._scenePoolHandle = ScenePool.alloc();
                  ScenePool.set(this._scenePoolHandle, SceneView.MODEL_ARRAY, this._modelArrayHandle);
                  this._spotLightsHandle = LightArrayPool.alloc();
                  ScenePool.set(this._scenePoolHandle, SceneView.SPOT_LIGHT_ARRAY, this._spotLightsHandle);
                  this._sphereLightsHandle = LightArrayPool.alloc();
                  ScenePool.set(this._scenePoolHandle, SceneView.SPHERE_LIGHT_ARRAY, this._sphereLightsHandle);
                }

                if (!this._batchArrayHandle) {
                  this._batchArrayHandle = UIBatchArrayPool.alloc();
                  ScenePool.set(this._scenePoolHandle, SceneView.BATCH_ARRAY_2D, this._batchArrayHandle);
                }
              }

            }

            function _initializerDefineProperty(target, property, descriptor, context) {
              if (!descriptor) return;
              Object.defineProperty(target, property, {
                enumerable: descriptor.enumerable,
                configurable: descriptor.configurable,
                writable: descriptor.writable,
                value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
              });
            }

            function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
              var desc = {};
              Object.keys(descriptor).forEach(function (key) {
                desc[key] = descriptor[key];
              });
              desc.enumerable = !!desc.enumerable;
              desc.configurable = !!desc.configurable;

              if ('value' in desc || desc.initializer) {
                desc.writable = true;
              }

              desc = decorators.slice().reverse().reduce(function (desc, decorator) {
                return decorator(target, property, desc) || desc;
              }, desc);

              if (context && desc.initializer !== void 0) {
                desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
                desc.initializer = undefined;
              }

              if (desc.initializer === void 0) {
                Object.defineProperty(target, property, desc);
                desc = null;
              }

              return desc;
            }

            const emptyDecorator = () => {};
            const emptyDecoratorFn = () => emptyDecorator;
            const emptySmartClassDecorator = makeSmartClassDecorator(() => {});
            function makeSmartClassDecorator(decorate) {
              return proxyFn;

              function proxyFn(target) {
                if (typeof target === 'function') {
                  return decorate(target);
                } else {
                  return function (constructor) {
                    return decorate(constructor, target);
                  };
                }
              }
            }

            function writeEditorClassProperty(constructor, propertyName, value) {
              const cache = getClassCache(constructor);

              if (cache) {
                const proto = getSubDict(cache, 'proto');
                getSubDict(proto, 'editor')[propertyName] = value;
              }
            }

            function makeEditorClassDecoratorFn(propertyName) {
              return value => constructor => {
                writeEditorClassProperty(constructor, propertyName, value);
              };
            }
            const CACHE_KEY = '__ccclassCache__';
            function getClassCache(ctor, decoratorName) {

              return getSubDict(ctor, CACHE_KEY);
            }
            function getSubDict(obj, key) {
              return obj[key] || (obj[key] = {});
            }

            const ccclass = exports('bD', makeSmartClassDecorator((constructor, name) => {
              let base = js.getSuper(constructor);

              if (base === Object) {
                base = null;
              }

              const proto = {
                name,
                extends: base,
                ctor: constructor
              };
              const cache = constructor[CACHE_KEY];

              if (cache) {
                const decoratedProto = cache.proto;

                if (decoratedProto) {
                  js.mixin(proto, decoratedProto);
                }

                constructor[CACHE_KEY] = undefined;
              }

              const res = CCClass(proto);

              return res;
            }));

            const requireComponent = exports('cS', makeEditorClassDecoratorFn('requireComponent'));
            const executionOrder = exports('bV', makeEditorClassDecoratorFn('executionOrder'));
            const disallowMultiple = exports('cO',  emptySmartClassDecorator);

            function property(target, propertyKey, descriptor) {
              let options = null;

              function normalized(target, propertyKey, descriptor) {
                const cache = getClassCache(target.constructor);

                if (cache) {
                  const ccclassProto = getSubDict(cache, 'proto');
                  const properties = getSubDict(ccclassProto, 'properties');
                  genProperty(target.constructor, properties, propertyKey, options, descriptor, cache);
                }
              }

              if (target === undefined) {
                return property({
                  type: undefined
                });
              } else if (typeof propertyKey === 'undefined') {
                options = target;
                return normalized;
              } else {
                normalized(target, propertyKey, descriptor);
              }
            }

            function getDefaultFromInitializer(initializer) {
              let value;

              try {
                value = initializer();
              } catch (e) {
                return initializer;
              }

              if (typeof value !== 'object' || value === null) {
                return value;
              } else {
                return initializer;
              }
            }

            function extractActualDefaultValues(ctor) {
              let dummyObj;

              try {
                dummyObj = new ctor();
              } catch (e) {

                return {};
              }

              return dummyObj;
            }

            function genProperty(ctor, properties, propertyKey, options, descriptor, cache) {
              let fullOptions;
              const isGetset = descriptor && (descriptor.get || descriptor.set);

              if (options) {
                fullOptions = getFullFormOfProperty(options, isGetset);
              }

              const existsPropertyRecord = properties[propertyKey];
              const propertyRecord = js.mixin(existsPropertyRecord || {}, fullOptions || options || {});

              if (isGetset) {

                if (descriptor.get) {
                  propertyRecord.get = descriptor.get;
                }

                if (descriptor.set) {
                  propertyRecord.set = descriptor.set;
                }
              } else {

                if (descriptor) {
                  if (descriptor.initializer) {
                    propertyRecord.default = getDefaultFromInitializer(descriptor.initializer);
                  }
                } else {
                  const actualDefaultValues = cache.default || (cache.default = extractActualDefaultValues(ctor));

                  if (actualDefaultValues.hasOwnProperty(propertyKey)) {
                    propertyRecord.default = actualDefaultValues[propertyKey];
                  }
                }
              }

              properties[propertyKey] = propertyRecord;
            }

            const serializable = exports('bF', (target, propertyKey, descriptor) => property(makeSerializable({}))(target, propertyKey, descriptor));
            function formerlySerializedAs(name) {
              return property(makeSerializable({
                formerlySerializedAs: name
              }));
            }
            const editorOnly = exports('dB', (target, propertyKey, descriptor) => property({
              editorOnly: true
            })(target, propertyKey, descriptor));

            function makeSerializable(options) {
              options.__noImplicit = true;

              if (!('serializable' in options)) {
                options.serializable = true;
              }

              return options;
            }

            const executeInEditMode = exports('bR',  emptySmartClassDecorator);
            const menu = exports('bW',  emptyDecoratorFn);
            const playOnFocus = exports('e8',  emptySmartClassDecorator);
            const inspector =  emptyDecoratorFn;
            const icon =  emptyDecoratorFn;
            const help = exports('bU',  emptyDecoratorFn);
            const editable = exports('bP',  emptyDecorator );
            const visible = exports('bY',  emptyDecoratorFn );
            const readOnly = exports('dX',  emptyDecorator );
            const displayName = exports('cT',  emptyDecoratorFn );
            const tooltip = exports('bX',  emptyDecoratorFn );
            const range = exports('c7',  emptyDecoratorFn );
            const rangeMin = exports('dp',  emptyDecoratorFn );
            const rangeMax = exports('dq',  emptyDecoratorFn );
            const rangeStep =  emptyDecoratorFn ;
            const slide = exports('c6',  emptyDecorator );
            const displayOrder = exports('cQ',  emptyDecoratorFn );
            const unit = exports('cb',  emptyDecoratorFn );
            const radian = exports('dO',  emptyDecorator );
            const multiline = exports('cU',  emptyDecorator );
            const disallowAnimation = exports('bS',  emptyDecorator );

            const integer = type(CCInteger);
            const float = type(CCFloat);
            const boolean = type(CCBoolean);
            const string = exports('cI', type(CCString));
            function type(type) {
              return property({
                type
              });
            }

            const override = exports('cy', (target, propertyKey, descriptor) => property({
              __noImplicit: true,
              override: true
            })(target, propertyKey, descriptor));

            class Cache {
              constructor(map) {
                this._map = null;
                this._count = 0;

                if (map) {
                  this._map = map;
                  this._count = Object.keys(map).length;
                } else {
                  this._map = js.createMap(true);
                  this._count = 0;
                }
              }

              add(key, val) {
                if (!(key in this._map)) {
                  this._count++;
                }

                return this._map[key] = val;
              }

              get(key) {
                return this._map[key];
              }

              has(key) {
                return key in this._map;
              }

              remove(key) {
                const out = this._map[key];

                if (key in this._map) {
                  delete this._map[key];
                  this._count--;
                }

                return out;
              }

              clear() {
                if (this._count !== 0) {
                  this._map = js.createMap(true);
                  this._count = 0;
                }
              }

              forEach(func) {
                for (const key in this._map) {
                  func(this._map[key], key);
                }
              }

              find(predicate) {
                for (const key in this._map) {
                  if (predicate(this._map[key], key)) {
                    return this._map[key];
                  }
                }

                return null;
              }

              get count() {
                return this._count;
              }

              destroy() {
                this._map = null;
              }

            }

            class Pipeline {
              constructor(name, funcs) {
                this.id = Pipeline._pipelineId++;
                this.name = '';
                this.pipes = [];
                this.name = name;

                for (let i = 0, l = funcs.length; i < l; i++) {
                  this.pipes.push(funcs[i]);
                }
              }

              insert(func, index) {
                if (index > this.pipes.length) {
                  warnID(4921);
                  return this;
                }

                this.pipes.splice(index, 0, func);
                return this;
              }

              append(func) {
                this.pipes.push(func);
                return this;
              }

              remove(index) {
                this.pipes.splice(index, 1);
                return this;
              }

              sync(task) {
                const pipes = this.pipes;

                if (pipes.length === 0) {
                  return null;
                }

                task.isFinish = false;

                for (let i = 0, l = pipes.length; i < l;) {
                  const pipe = pipes[i];
                  const result = pipe(task);

                  if (result) {
                    task.isFinish = true;
                    return result;
                  }

                  i++;

                  if (i !== l) {
                    task.input = task.output;
                    task.output = null;
                  }
                }

                task.isFinish = true;
                return task.output;
              }

              async(task) {
                const pipes = this.pipes;

                if (pipes.length === 0) {
                  return;
                }

                task.isFinish = false;

                this._flow(0, task);
              }

              _flow(index, task) {
                const pipe = this.pipes[index];
                pipe(task, result => {
                  if (result) {
                    task.isFinish = true;
                    task.dispatch('complete', result);
                  } else {
                    index++;

                    if (index < this.pipes.length) {
                      task.input = task.output;
                      task.output = null;

                      this._flow(index, task);
                    } else {
                      task.isFinish = true;
                      task.dispatch('complete', result, task.output);
                    }
                  }
                });
              }

            }
            Pipeline._pipelineId = 0;

            const assets = new Cache();
            const files = new Cache();
            const parsed = new Cache();
            const bundles = new Cache();
            const pipeline = new Pipeline('normal load', []);
            const fetchPipeline = new Pipeline('fetch', []);
            const transformPipeline = new Pipeline('transform url', []);
            const references =  null;
            let RequestType;

            (function (RequestType) {
              RequestType["UUID"] = "uuid";
              RequestType["PATH"] = "path";
              RequestType["DIR"] = "dir";
              RequestType["URL"] = "url";
              RequestType["SCENE"] = "scene";
            })(RequestType || (RequestType = {}));

            const presets = {
              default: {
                priority: 0
              },
              preload: {
                maxConcurrency: 6,
                maxRequestsPerFrame: 2,
                priority: -1
              },
              scene: {
                maxConcurrency: 20,
                maxRequestsPerFrame: 20,
                priority: 1
              },
              bundle: {
                maxConcurrency: 20,
                maxRequestsPerFrame: 20,
                priority: 2
              },
              remote: {
                maxRetryCount: 4
              }
            };
            let BuiltinBundleName;

            (function (BuiltinBundleName) {
              BuiltinBundleName["RESOURCES"] = "resources";
              BuiltinBundleName["MAIN"] = "main";
              BuiltinBundleName["START_SCENE"] = "start-scene";
            })(BuiltinBundleName || (BuiltinBundleName = {}));

            class Task {
              static create(options) {
                let out;

                if (Task._deadPool.length !== 0) {
                  out = Task._deadPool.pop();
                  out.set(options);
                } else {
                  out = new Task(options);
                }

                return out;
              }

              constructor(options) {
                this.id = Task._taskId++;
                this.onComplete = null;
                this.onProgress = null;
                this.onError = null;
                this.source = null;
                this.output = null;
                this.input = null;
                this.progress = null;
                this.options = null;
                this.isFinish = true;
                this.set(options);
              }

              set(options = Object.create(null)) {
                this.onComplete = options.onComplete || null;
                this.onProgress = options.onProgress || null;
                this.onError = options.onError || null;
                this.source = this.input = options.input;
                this.output = null;
                this.progress = options.progress;
                this.options = options.options || Object.create(null);
              }

              dispatch(event, param1, param2, param3, param4) {
                switch (event) {
                  case 'complete':
                    if (this.onComplete) {
                      this.onComplete(param1, param2);
                    }

                    break;

                  case 'progress':
                    if (this.onProgress) {
                      this.onProgress(param1, param2, param3, param4);
                    }

                    break;

                  case 'error':
                    if (this.onError) {
                      this.onError(param1, param2, param3, param4);
                    }

                    break;

                  default:
                    {
                      const str = `on${event[0].toUpperCase()}${event.substr(1)}`;

                      if (typeof this[str] === 'function') {
                        this[str](param1, param2, param3, param4);
                      }

                      break;
                    }
                }
              }

              recycle() {
                if (Task._deadPool.length === Task.MAX_DEAD_NUM) {
                  return;
                }

                this.onComplete = null;
                this.onProgress = null;
                this.onError = null;
                this.source = this.output = this.input = null;
                this.progress = null;
                this.options = null;

                Task._deadPool.push(this);
              }

            }
            Task.MAX_DEAD_NUM = 500;
            Task._taskId = 0;
            Task._deadPool = [];

            const HexChars = '0123456789abcdef'.split('');
            const _t = ['', '', '', ''];

            const UuidTemplate = _t.concat(_t, '-', _t, '-', _t, '-', _t, '-', _t, _t, _t);

            const Indices = UuidTemplate.map((x, i) => x === '-' ? NaN : i).filter(isFinite);
            function decodeUuid(base64) {
              const strs = base64.split('@');
              const uuid = strs[0];

              if (uuid.length !== 22) {
                return base64;
              }

              UuidTemplate[0] = base64[0];
              UuidTemplate[1] = base64[1];

              for (let i = 2, j = 2; i < 22; i += 2) {
                const lhs = BASE64_VALUES[base64.charCodeAt(i)];
                const rhs = BASE64_VALUES[base64.charCodeAt(i + 1)];
                UuidTemplate[Indices[j++]] = HexChars[lhs >> 2];
                UuidTemplate[Indices[j++]] = HexChars[(lhs & 3) << 2 | rhs >> 4];
                UuidTemplate[Indices[j++]] = HexChars[rhs & 0xF];
              }

              return base64.replace(uuid, UuidTemplate.join(''));
            }

            const _uuidRegex = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-@]{8,}).*/;
            function getUuidFromURL(url) {
              const matches = _uuidRegex.exec(url);

              if (matches) {
                return matches[1];
              }

              return '';
            }
            function getUrlWithUuid(uuid, options) {
              options = options || Object.create(null);
              options.__isNative__ = options.isNative;
              options.ext = options.nativeExt;
              const bundle = bundles.find(b => !!b.getAssetInfo(uuid));

              if (bundle) {
                options.bundle = bundle.name;
              }

              return transform(uuid, options);
            }
            function isScene(asset) {
              return asset && (asset instanceof legacyCC.SceneAsset || asset instanceof legacyCC.Scene);
            }
            function normalize(url) {
              if (url) {
                if (url.charCodeAt(0) === 46 && url.charCodeAt(1) === 47) {
                  url = url.slice(2);
                } else if (url.charCodeAt(0) === 47) {
                  url = url.slice(1);
                }
              }

              return url;
            }
            function transform(input, options) {
              const subTask = Task.create({
                input,
                options
              });
              const urls = [];

              try {
                const result = transformPipeline.sync(subTask);

                for (const requestItem of result) {
                  const url = requestItem.url;
                  requestItem.recycle();
                  urls.push(url);
                }
              } catch (e) {
                for (const item of subTask.output) {
                  item.recycle();
                }

                error(e.message, e.stack);
              }

              subTask.recycle();
              return urls.length > 1 ? urls : urls[0];
            }

            var helper = /*#__PURE__*/Object.freeze({
                __proto__: null,
                getUuidFromURL: getUuidFromURL,
                getUrlWithUuid: getUrlWithUuid,
                isScene: isScene,
                normalize: normalize,
                transform: transform,
                decodeUuid: decodeUuid
            });

            class Event {
              constructor(type, bubbles) {
                this.type = void 0;
                this.bubbles = void 0;
                this.target = null;
                this.currentTarget = null;
                this.eventPhase = 0;
                this.propagationStopped = false;
                this.propagationImmediateStopped = false;
                this.type = type;
                this.bubbles = !!bubbles;
              }

              unuse() {
                this.type = Event.NO_TYPE;
                this.target = null;
                this.currentTarget = null;
                this.eventPhase = Event.NONE;
                this.propagationStopped = false;
                this.propagationImmediateStopped = false;
              }

              reuse(type, bubbles) {
                this.type = type;
                this.bubbles = bubbles || false;
              }

              isStopped() {
                return this.propagationStopped || this.propagationImmediateStopped;
              }

              getCurrentTarget() {
                return this.currentTarget;
              }

              getType() {
                return this.type;
              }

            } exports('dz', Event);
            Event.NO_TYPE = 'no_type';
            Event.TOUCH = 'touch';
            Event.MOUSE = 'mouse';
            Event.KEYBOARD = 'keyboard';
            Event.ACCELERATION = 'acceleration';
            Event.NONE = 0;
            Event.CAPTURING_PHASE = 1;
            Event.AT_TARGET = 2;
            Event.BUBBLING_PHASE = 3;
            legacyCC.Event = Event;

            var _dec, _class, _class2, _descriptor, _temp;
            let Asset = exports('bG', (_dec = ccclass('cc.Asset'), _dec(_class = (_class2 = (_temp = class Asset extends Eventify(CCObject) {
              static deserialize(data) {
                return legacyCC.deserialize(data);
              }

              get nativeUrl() {
                if (!this._nativeUrl) {
                  if (!this._native) return '';
                  const name = this._native;

                  if (name.charCodeAt(0) === 47) {
                    return name.slice(1);
                  }

                  if (name.charCodeAt(0) === 46) {
                    this._nativeUrl = getUrlWithUuid(this._uuid, {
                      nativeExt: name,
                      isNative: true
                    });
                  } else {
                    this._nativeUrl = getUrlWithUuid(this._uuid, {
                      __nativeName__: name,
                      nativeExt: extname(name),
                      isNative: true
                    });
                  }
                }

                return this._nativeUrl;
              }

              get _nativeAsset() {
                return this._file;
              }

              set _nativeAsset(obj) {
                this._file = obj;
              }

              constructor(...args) {
                super(...args);
                this.loaded = true;

                _initializerDefineProperty(this, "_native", _descriptor, this);

                this._nativeUrl = '';
                this.__onLoadedInvoked__ = false;
                this.__nativeDepend__ = null;
                this.__depends__ = null;
                this._file = null;
                this._ref = 0;
                Object.defineProperty(this, '_uuid', {
                  value: '',
                  writable: true
                });
              }

              toString() {
                return this.nativeUrl;
              }

              serialize() {}

              _setRawAsset(filename, inLibrary = true) {
                if (inLibrary !== false) {
                  this._native = filename || '';
                } else {
                  this._native = `/${filename}`;
                }
              }

              get _nativeDep() {
                if (this._native) {
                  return {
                    __isNative__: true,
                    uuid: this._uuid,
                    ext: this._native
                  };
                }

                return undefined;
              }

              get refCount() {
                return this._ref;
              }

              addRef() {
                this._ref++;
                return this;
              }

              decRef(autoRelease = true) {
                if (this._ref > 0) {
                  this._ref--;
                }

                if (autoRelease) {
                  legacyCC.assetManager._releaseManager.tryRelease(this);
                }

                return this;
              }

              onLoaded() {}

              initDefault(uuid) {
                if (uuid) {
                  this._uuid = uuid;
                }

                this.isDefault = true;
              }

              validate() {
                return true;
              }

            }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "_native", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _applyDecoratedDescriptor(_class2.prototype, "_nativeAsset", [property], Object.getOwnPropertyDescriptor(_class2.prototype, "_nativeAsset"), _class2.prototype)), _class2)) || _class));
            Asset.prototype.createNode = null;
            legacyCC.Asset = Asset;

            let CUSTOM_PIXEL_FORMAT = 1024;
            let PixelFormat;

            (function (PixelFormat) {
              PixelFormat[PixelFormat["RGB565"] = Format.R5G6B5] = "RGB565";
              PixelFormat[PixelFormat["RGB5A1"] = Format.RGB5A1] = "RGB5A1";
              PixelFormat[PixelFormat["RGBA4444"] = Format.RGBA4] = "RGBA4444";
              PixelFormat[PixelFormat["RGB888"] = Format.RGB8] = "RGB888";
              PixelFormat[PixelFormat["RGB32F"] = Format.RGB32F] = "RGB32F";
              PixelFormat[PixelFormat["RGBA8888"] = Format.RGBA8] = "RGBA8888";
              PixelFormat[PixelFormat["RGBA32F"] = Format.RGBA32F] = "RGBA32F";
              PixelFormat[PixelFormat["A8"] = Format.A8] = "A8";
              PixelFormat[PixelFormat["I8"] = Format.L8] = "I8";
              PixelFormat[PixelFormat["AI8"] = Format.LA8] = "AI8";
              PixelFormat[PixelFormat["RGB_PVRTC_2BPPV1"] = Format.PVRTC_RGB2] = "RGB_PVRTC_2BPPV1";
              PixelFormat[PixelFormat["RGBA_PVRTC_2BPPV1"] = Format.PVRTC_RGBA2] = "RGBA_PVRTC_2BPPV1";
              PixelFormat[PixelFormat["RGB_A_PVRTC_2BPPV1"] = CUSTOM_PIXEL_FORMAT++] = "RGB_A_PVRTC_2BPPV1";
              PixelFormat[PixelFormat["RGB_PVRTC_4BPPV1"] = Format.PVRTC_RGB4] = "RGB_PVRTC_4BPPV1";
              PixelFormat[PixelFormat["RGBA_PVRTC_4BPPV1"] = Format.PVRTC_RGBA4] = "RGBA_PVRTC_4BPPV1";
              PixelFormat[PixelFormat["RGB_A_PVRTC_4BPPV1"] = CUSTOM_PIXEL_FORMAT++] = "RGB_A_PVRTC_4BPPV1";
              PixelFormat[PixelFormat["RGB_ETC1"] = Format.ETC_RGB8] = "RGB_ETC1";
              PixelFormat[PixelFormat["RGBA_ETC1"] = CUSTOM_PIXEL_FORMAT++] = "RGBA_ETC1";
              PixelFormat[PixelFormat["RGB_ETC2"] = Format.ETC2_RGB8] = "RGB_ETC2";
              PixelFormat[PixelFormat["RGBA_ETC2"] = Format.ETC2_RGBA8] = "RGBA_ETC2";
              PixelFormat[PixelFormat["RGBA_ASTC_4x4"] = Format.ASTC_RGBA_4x4] = "RGBA_ASTC_4x4";
              PixelFormat[PixelFormat["RGBA_ASTC_5x4"] = Format.ASTC_RGBA_5x4] = "RGBA_ASTC_5x4";
              PixelFormat[PixelFormat["RGBA_ASTC_5x5"] = Format.ASTC_RGBA_5x5] = "RGBA_ASTC_5x5";
              PixelFormat[PixelFormat["RGBA_ASTC_6x5"] = Format.ASTC_RGBA_6x5] = "RGBA_ASTC_6x5";
              PixelFormat[PixelFormat["RGBA_ASTC_6x6"] = Format.ASTC_RGBA_6x6] = "RGBA_ASTC_6x6";
              PixelFormat[PixelFormat["RGBA_ASTC_8x5"] = Format.ASTC_RGBA_8x5] = "RGBA_ASTC_8x5";
              PixelFormat[PixelFormat["RGBA_ASTC_8x6"] = Format.ASTC_RGBA_8x6] = "RGBA_ASTC_8x6";
              PixelFormat[PixelFormat["RGBA_ASTC_8x8"] = Format.ASTC_RGBA_8x8] = "RGBA_ASTC_8x8";
              PixelFormat[PixelFormat["RGBA_ASTC_10x5"] = Format.ASTC_RGBA_10x5] = "RGBA_ASTC_10x5";
              PixelFormat[PixelFormat["RGBA_ASTC_10x6"] = Format.ASTC_RGBA_10x6] = "RGBA_ASTC_10x6";
              PixelFormat[PixelFormat["RGBA_ASTC_10x8"] = Format.ASTC_RGBA_10x8] = "RGBA_ASTC_10x8";
              PixelFormat[PixelFormat["RGBA_ASTC_10x10"] = Format.ASTC_RGBA_10x10] = "RGBA_ASTC_10x10";
              PixelFormat[PixelFormat["RGBA_ASTC_12x10"] = Format.ASTC_RGBA_12x10] = "RGBA_ASTC_12x10";
              PixelFormat[PixelFormat["RGBA_ASTC_12x12"] = Format.ASTC_RGBA_12x12] = "RGBA_ASTC_12x12";
            })(PixelFormat || (PixelFormat = exports('cB', {})));

            let WrapMode$2;

            (function (WrapMode) {
              WrapMode[WrapMode["REPEAT"] = Address.WRAP] = "REPEAT";
              WrapMode[WrapMode["CLAMP_TO_EDGE"] = Address.CLAMP] = "CLAMP_TO_EDGE";
              WrapMode[WrapMode["MIRRORED_REPEAT"] = Address.MIRROR] = "MIRRORED_REPEAT";
              WrapMode[WrapMode["CLAMP_TO_BORDER"] = Address.BORDER] = "CLAMP_TO_BORDER";
            })(WrapMode$2 || (WrapMode$2 = exports('dH', {})));

            let Filter$1;

            (function (Filter$1) {
              Filter$1[Filter$1["NONE"] = Filter.NONE] = "NONE";
              Filter$1[Filter$1["LINEAR"] = Filter.LINEAR] = "LINEAR";
              Filter$1[Filter$1["NEAREST"] = Filter.POINT] = "NEAREST";
            })(Filter$1 || (Filter$1 = exports('cA', {})));

            var _dec$1, _class$1, _class2$1, _class3, _temp$1;

            function isImageBitmap(imageSource) {
              return legacyCC.sys.capabilities.imageBitmap && imageSource instanceof ImageBitmap;
            }

            function isNativeImage(imageSource) {

              if ( imageSource._compressed === true) {
                return false;
              }

              return imageSource instanceof HTMLImageElement || imageSource instanceof HTMLCanvasElement || isImageBitmap(imageSource);
            }

            let ImageAsset = exports('bu', (_dec$1 = ccclass('cc.ImageAsset'), _dec$1(_class$1 = (_class2$1 = (_temp$1 = _class3 = class ImageAsset extends Asset {
              get _nativeAsset() {
                return this._nativeData;
              }

              set _nativeAsset(value) {
                if (!(value instanceof HTMLElement) && !isImageBitmap(value)) {
                  value.format = value.format || this._format;
                }

                this.reset(value);
              }

              get data() {
                if (this._nativeData && isNativeImage(this._nativeData)) {
                  return this._nativeData;
                }

                return this._nativeData && this._nativeData._data;
              }

              get width() {
                return this._nativeData.width || this._width;
              }

              get height() {
                return this._nativeData.height || this._height;
              }

              get format() {
                return this._format;
              }

              get isCompressed() {
                return this._format >= PixelFormat.RGB_ETC1 && this._format <= PixelFormat.RGBA_ASTC_12x12 || this._format >= PixelFormat.RGB_A_PVRTC_2BPPV1 && this._format <= PixelFormat.RGBA_ETC1;
              }

              get url() {
                return this.nativeUrl;
              }

              set _texture(tex) {
                this._tex = tex;
              }

              get _texture() {
                if (!this._tex) {
                  const tex = new legacyCC.Texture2D();
                  tex.name = this.nativeUrl;
                  tex.image = this;
                  this._tex = tex;
                }

                return this._tex;
              }

              constructor(nativeAsset) {
                super();
                this._nativeData = void 0;
                this._tex = void 0;
                this._exportedExts = undefined;
                this._format = PixelFormat.RGBA8888;
                this._width = 0;
                this._height = 0;
                this.loaded = false;
                this._nativeData = {
                  _data: null,
                  width: 0,
                  height: 0,
                  format: 0,
                  _compressed: false
                };

                if (nativeAsset !== undefined) {
                  this.reset(nativeAsset);
                }
              }

              reset(data) {
                if (isImageBitmap(data)) {
                  this._nativeData = data;

                  this._onDataComplete();
                } else if (!(data instanceof HTMLElement)) {
                  this._nativeData = data;
                  this._format = data.format;

                  this._onDataComplete();
                } else {
                  this._nativeData = data;

                  if ( data.complete || data instanceof HTMLCanvasElement) {
                    this._onDataComplete();
                  } else {
                    this.loaded = false;
                    data.addEventListener('load', () => {
                      this._onDataComplete();
                    });
                    data.addEventListener('error', err => {
                      warnID(3119, err.message);
                    });
                  }
                }
              }

              destroy() {
                if (this.data && this.data instanceof HTMLImageElement) {
                  this.data.src = '';

                  this._setRawAsset('');

                  this.data.destroy();
                } else if (isImageBitmap(this.data)) {
                  this.data.close && this.data.close();
                }

                return super.destroy();
              }

              _serialize() {
              }

              _deserialize(data) {
                let fmtStr = '';

                if (typeof data === 'string') {
                  fmtStr = data;
                } else {
                  this._width = data.w;
                  this._height = data.h;
                  fmtStr = data.fmt;
                }

                const device = _getGlobalDevice();

                const extensionIDs = fmtStr.split('_');
                let defaultExt = '';
                let preferedExtensionIndex = Number.MAX_VALUE;
                let format = this._format;
                let ext = '';
                const SupportTextureFormats = legacyCC.macro.SUPPORT_TEXTURE_FORMATS;

                for (const extensionID of extensionIDs) {
                  const extFormat = extensionID.split('@');
                  const i = parseInt(extFormat[0], undefined);
                  const tmpExt = ImageAsset.extnames[i] || extFormat[0];
                  const index = SupportTextureFormats.indexOf(tmpExt);

                  if (index !== -1 && index < preferedExtensionIndex) {
                    const fmt = extFormat[1] ? parseInt(extFormat[1]) : this._format;

                    if (tmpExt === '.astc' && (!device || !device.hasFeature(Feature.FORMAT_ASTC))) {
                      continue;
                    } else if (tmpExt === '.pvr' && (!device || !device.hasFeature(Feature.FORMAT_PVRTC))) {
                      continue;
                    } else if ((fmt === PixelFormat.RGB_ETC1 || fmt === PixelFormat.RGBA_ETC1) && (!device || !device.hasFeature(Feature.FORMAT_ETC1))) {
                      continue;
                    } else if ((fmt === PixelFormat.RGB_ETC2 || fmt === PixelFormat.RGBA_ETC2) && (!device || !device.hasFeature(Feature.FORMAT_ETC2))) {
                      continue;
                    } else if (tmpExt === '.webp' && !legacyCC.sys.capabilities.webp) {
                      continue;
                    }

                    preferedExtensionIndex = index;
                    ext = tmpExt;
                    format = fmt;
                  } else if (!defaultExt) {
                    defaultExt = tmpExt;
                  }
                }

                if (ext) {
                  this._setRawAsset(ext);

                  this._format = format;
                } else if (defaultExt) {
                  this._setRawAsset(defaultExt);

                  warnID(3120, defaultExt, defaultExt);
                } else {
                  warnID(3121);
                }
              }

              _onDataComplete() {
                this.loaded = true;
                this.emit('load');
              }

              initDefault(uuid) {
                super.initDefault(uuid);

                if (!ImageAsset._sharedPlaceHolderCanvas) {
                  const canvas = document.createElement('canvas');
                  const context = canvas.getContext('2d');
                  const l = canvas.width = canvas.height = 2;
                  context.fillStyle = '#ff00ff';
                  context.fillRect(0, 0, l, l);
                  this.reset(canvas);
                  ImageAsset._sharedPlaceHolderCanvas = canvas;
                } else {
                  this.reset(ImageAsset._sharedPlaceHolderCanvas);
                }
              }

              validate() {
                return !!this.data;
              }

            }, _class3.extnames = ['.png', '.jpg', '.jpeg', '.bmp', '.webp', '.pvr', '.pkm', '.astc'], _class3._sharedPlaceHolderCanvas = null, _temp$1), (_applyDecoratedDescriptor(_class2$1.prototype, "_nativeAsset", [override], Object.getOwnPropertyDescriptor(_class2$1.prototype, "_nativeAsset"), _class2$1.prototype)), _class2$1)) || _class$1));

            function _getGlobalDevice() {
              if (legacyCC.director.root) {
                return legacyCC.director.root.device;
              }

              return null;
            }

            legacyCC.ImageAsset = ImageAsset;

            let SamplerInfoIndex;

            (function (SamplerInfoIndex) {
              SamplerInfoIndex[SamplerInfoIndex["minFilter"] = 0] = "minFilter";
              SamplerInfoIndex[SamplerInfoIndex["magFilter"] = 1] = "magFilter";
              SamplerInfoIndex[SamplerInfoIndex["mipFilter"] = 2] = "mipFilter";
              SamplerInfoIndex[SamplerInfoIndex["addressU"] = 3] = "addressU";
              SamplerInfoIndex[SamplerInfoIndex["addressV"] = 4] = "addressV";
              SamplerInfoIndex[SamplerInfoIndex["addressW"] = 5] = "addressW";
              SamplerInfoIndex[SamplerInfoIndex["maxAnisotropy"] = 6] = "maxAnisotropy";
              SamplerInfoIndex[SamplerInfoIndex["cmpFunc"] = 7] = "cmpFunc";
              SamplerInfoIndex[SamplerInfoIndex["mipLODBias"] = 8] = "mipLODBias";
              SamplerInfoIndex[SamplerInfoIndex["total"] = 9] = "total";
            })(SamplerInfoIndex || (SamplerInfoIndex = {}));

            const defaultInfo = [Filter.LINEAR, Filter.LINEAR, Filter.NONE, Address.WRAP, Address.WRAP, Address.WRAP, 0, ComparisonFunc.NEVER, 0];
            const defaultSamplerHash = genSamplerHash(defaultInfo);
            const borderColor = new Color$1();

            const _samplerInfo = new SamplerInfo();

            function genSamplerHash(info) {
              let value = 0;
              let hash = 0;

              for (let i = 0; i < defaultInfo.length; i++) {
                value = info[i] || defaultInfo[i];

                switch (i) {
                  case SamplerInfoIndex.minFilter:
                    hash |= value;
                    break;

                  case SamplerInfoIndex.magFilter:
                    hash |= value << 2;
                    break;

                  case SamplerInfoIndex.mipFilter:
                    hash |= value << 4;
                    break;

                  case SamplerInfoIndex.addressU:
                    hash |= value << 6;
                    break;

                  case SamplerInfoIndex.addressV:
                    hash |= value << 8;
                    break;

                  case SamplerInfoIndex.addressW:
                    hash |= value << 10;
                    break;

                  case SamplerInfoIndex.maxAnisotropy:
                    hash |= value << 12;
                    break;

                  case SamplerInfoIndex.cmpFunc:
                    hash |= value << 16;
                    break;

                  case SamplerInfoIndex.mipLODBias:
                    hash |= value << 28;
                    break;
                }
              }

              return hash;
            }

            class SamplerLib {
              constructor() {
                this._cache = {};
              }

              getSampler(device, hash) {
                if (!hash) {
                  hash = defaultSamplerHash;
                }

                const cache = this._cache[hash];

                if (cache) {
                  return cache;
                }

                _samplerInfo.minFilter = hash & 3;
                _samplerInfo.magFilter = hash >> 2 & 3;
                _samplerInfo.mipFilter = hash >> 4 & 3;
                _samplerInfo.addressU = hash >> 6 & 3;
                _samplerInfo.addressV = hash >> 8 & 3;
                _samplerInfo.addressW = hash >> 10 & 3;
                _samplerInfo.maxAnisotropy = hash >> 12 & 15;
                _samplerInfo.cmpFunc = hash >> 16 & 15;
                _samplerInfo.mipLODBias = hash >> 28 & 15;
                _samplerInfo.borderColor = borderColor;
                const sampler = this._cache[hash] = device.createSampler(_samplerInfo);
                return sampler;
              }

            }

            const samplerLib = exports('bw', new SamplerLib());
            legacyCC.samplerLib = samplerLib;

            var _dec$2, _class$2, _class2$2, _descriptor$1, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _class3$1, _temp$2;
            const idGenerator = new IDGenerator('Tex');
            let TextureBase = exports('cV', (_dec$2 = ccclass('cc.TextureBase'), _dec$2(_class$2 = (_class2$2 = (_temp$2 = _class3$1 = class TextureBase extends Asset {
              get isCompressed() {
                return this._format >= PixelFormat.RGB_ETC1 && this._format <= PixelFormat.RGBA_ASTC_12x12 || this._format >= PixelFormat.RGB_A_PVRTC_2BPPV1 && this._format <= PixelFormat.RGBA_ETC1;
              }

              get width() {
                return this._width;
              }

              get height() {
                return this._height;
              }

              constructor() {
                super();

                _initializerDefineProperty(this, "_format", _descriptor$1, this);

                _initializerDefineProperty(this, "_minFilter", _descriptor2, this);

                _initializerDefineProperty(this, "_magFilter", _descriptor3, this);

                _initializerDefineProperty(this, "_mipFilter", _descriptor4, this);

                _initializerDefineProperty(this, "_wrapS", _descriptor5, this);

                _initializerDefineProperty(this, "_wrapT", _descriptor6, this);

                _initializerDefineProperty(this, "_wrapR", _descriptor7, this);

                _initializerDefineProperty(this, "_anisotropy", _descriptor8, this);

                this._width = 1;
                this._height = 1;
                this._id = void 0;
                this._samplerInfo = [];
                this._samplerHash = 0;
                this._gfxSampler = null;
                this._gfxDevice = null;
                this._textureHash = 0;
                this._id = idGenerator.getNewId();
                this.loaded = false;
                this._gfxDevice = this._getGFXDevice();
                this._textureHash = murmurhash2_32_gc(this._id, 666);
              }

              getId() {
                return this._id;
              }

              getPixelFormat() {
                return this._format;
              }

              getAnisotropy() {
                return this._anisotropy;
              }

              setWrapMode(wrapS, wrapT, wrapR) {
                this._wrapS = wrapS;
                this._samplerInfo[SamplerInfoIndex.addressU] = wrapS;
                this._wrapT = wrapT;
                this._samplerInfo[SamplerInfoIndex.addressV] = wrapT;

                if (wrapR !== undefined) {
                  this._wrapR = wrapR;
                  this._samplerInfo[SamplerInfoIndex.addressW] = wrapR;
                }

                this._samplerHash = genSamplerHash(this._samplerInfo);

                if (this._gfxDevice) {
                  this._gfxSampler = samplerLib.getSampler(this._gfxDevice, this._samplerHash);
                }
              }

              setFilters(minFilter, magFilter) {
                this._minFilter = minFilter;
                this._samplerInfo[SamplerInfoIndex.minFilter] = minFilter;
                this._magFilter = magFilter;
                this._samplerInfo[SamplerInfoIndex.magFilter] = magFilter;
                this._samplerHash = genSamplerHash(this._samplerInfo);

                if (this._gfxDevice) {
                  this._gfxSampler = samplerLib.getSampler(this._gfxDevice, this._samplerHash);
                }
              }

              setMipFilter(mipFilter) {
                this._mipFilter = mipFilter;
                this._samplerInfo[SamplerInfoIndex.mipFilter] = mipFilter;
                this._samplerHash = genSamplerHash(this._samplerInfo);

                if (this._gfxDevice) {
                  this._gfxSampler = samplerLib.getSampler(this._gfxDevice, this._samplerHash);
                }
              }

              setAnisotropy(anisotropy) {
                this._anisotropy = anisotropy;
                this._samplerInfo[SamplerInfoIndex.maxAnisotropy] = anisotropy;
                this._samplerHash = genSamplerHash(this._samplerInfo);

                if (this._gfxDevice) {
                  this._gfxSampler = samplerLib.getSampler(this._gfxDevice, this._samplerHash);
                }
              }

              destroy() {
                const destroyed = super.destroy();

                if (destroyed && legacyCC.director.root && legacyCC.director.root.batcher2D) {
                  legacyCC.director.root.batcher2D._releaseDescriptorSetCache(this._textureHash);
                }

                return destroyed;
              }

              getHash() {
                return this._textureHash;
              }

              getGFXTexture() {
                return null;
              }

              getSamplerHash() {
                return this._samplerHash;
              }

              getGFXSampler() {
                if (!this._gfxSampler) {
                  if (this._gfxDevice) {
                    this._gfxSampler = samplerLib.getSampler(this._gfxDevice, this._samplerHash);
                  } else {
                    errorID(9302);
                  }
                }

                return this._gfxSampler;
              }

              _serialize(ctxForExporting) {

                return '';
              }

              _deserialize(serializedData, handle) {
                const data = serializedData;
                const fields = data.split(',');
                fields.unshift('');

                if (fields.length >= 5) {
                  this.setFilters(parseInt(fields[1]), parseInt(fields[2]));
                  this.setWrapMode(parseInt(fields[3]), parseInt(fields[4]));
                }

                if (fields.length >= 7) {
                  this.setMipFilter(parseInt(fields[5]));
                  this.setAnisotropy(parseInt(fields[6]));
                }
              }

              _getGFXDevice() {
                if (legacyCC.director.root) {
                  return legacyCC.director.root.device;
                }

                return null;
              }

              _getGFXFormat() {
                return this._getGFXPixelFormat(this._format);
              }

              _setGFXFormat(format) {
                this._format = format === undefined ? PixelFormat.RGBA8888 : format;
              }

              _getGFXPixelFormat(format) {
                if (format === PixelFormat.RGBA_ETC1) {
                  format = PixelFormat.RGB_ETC1;
                } else if (format === PixelFormat.RGB_A_PVRTC_4BPPV1) {
                  format = PixelFormat.RGB_PVRTC_4BPPV1;
                } else if (format === PixelFormat.RGB_A_PVRTC_2BPPV1) {
                  format = PixelFormat.RGB_PVRTC_2BPPV1;
                }

                return format;
              }

            }, _class3$1.PixelFormat = PixelFormat, _class3$1.WrapMode = WrapMode$2, _class3$1.Filter = Filter$1, _temp$2), (_descriptor$1 = _applyDecoratedDescriptor(_class2$2.prototype, "_format", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return PixelFormat.RGBA8888;
              }
            }), _descriptor2 = _applyDecoratedDescriptor(_class2$2.prototype, "_minFilter", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Filter$1.LINEAR;
              }
            }), _descriptor3 = _applyDecoratedDescriptor(_class2$2.prototype, "_magFilter", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Filter$1.LINEAR;
              }
            }), _descriptor4 = _applyDecoratedDescriptor(_class2$2.prototype, "_mipFilter", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Filter$1.NONE;
              }
            }), _descriptor5 = _applyDecoratedDescriptor(_class2$2.prototype, "_wrapS", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return WrapMode$2.REPEAT;
              }
            }), _descriptor6 = _applyDecoratedDescriptor(_class2$2.prototype, "_wrapT", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return WrapMode$2.REPEAT;
              }
            }), _descriptor7 = _applyDecoratedDescriptor(_class2$2.prototype, "_wrapR", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return WrapMode$2.REPEAT;
              }
            }), _descriptor8 = _applyDecoratedDescriptor(_class2$2.prototype, "_anisotropy", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            })), _class2$2)) || _class$2));
            legacyCC.TextureBase = TextureBase;

            const SUPPORT_MIN_FORMAT_VERSION = 1;
            const EMPTY_PLACEHOLDER = 0;
            const BuiltinValueTypes = [Vec2, Vec3, Vec4, Quat, Color, Size, Rect, Mat4];

            function BuiltinValueTypeParsers_xyzw(obj, data) {
              obj.x = data[1];
              obj.y = data[2];
              obj.z = data[3];
              obj.w = data[4];
            }

            const BuiltinValueTypeSetters = [(obj, data) => {
              obj.x = data[1];
              obj.y = data[2];
            }, (obj, data) => {
              obj.x = data[1];
              obj.y = data[2];
              obj.z = data[3];
            }, BuiltinValueTypeParsers_xyzw, BuiltinValueTypeParsers_xyzw, (obj, data) => {
              obj._val = data[1];
            }, (obj, data) => {
              obj.width = data[1];
              obj.height = data[2];
            }, (obj, data) => {
              obj.x = data[1];
              obj.y = data[2];
              obj.width = data[3];
              obj.height = data[4];
            }, (obj, data) => {
              Mat4.fromArray(obj, data, 1);
            }];

            const DataTypeID = {
              SimpleType: 0,
              InstanceRef: 1,
              Array_InstanceRef: 2,
              Array_AssetRefByInnerObj: 3,
              Class: 4,
              ValueTypeCreated: 5,
              AssetRefByInnerObj: 6,
              TRS: 7,
              ValueType: 8,
              Array_Class: 9,
              CustomizedClass: 10,
              Dict: 11,
              Array: 12,
              ARRAY_LENGTH: 13
            };
            const CLASS_TYPE = 0;
            const CLASS_KEYS = 1;
            const CLASS_PROP_TYPE_OFFSET = 2;
            const MASK_CLASS = 0;
            const OBJ_DATA_MASK = 0;
            const CUSTOM_OBJ_DATA_CLASS = 0;
            const CUSTOM_OBJ_DATA_CONTENT = 1;
            const VALUETYPE_SETTER = 0;
            const DICT_JSON_LAYOUT = 0;
            const ARRAY_ITEM_VALUES = 0;
            const Refs = {
              EACH_RECORD_LENGTH: 3,
              OWNER_OFFSET: 0,
              KEY_OFFSET: 1,
              TARGET_OFFSET: 2
            };
            const File = {
              Version: 0,
              Context: 0,
              SharedUuids: 1,
              SharedStrings: 2,
              SharedClasses: 3,
              SharedMasks: 4,
              Instances: 5,
              InstanceTypes: 6,
              Refs: 7,
              DependObjs: 8,
              DependKeys: 9,
              DependUuidIndices: 10,
              ARRAY_LENGTH: 11
            };
            const PACKED_SECTIONS = File.Instances;
            class Details {
              constructor() {
                this.uuidObjList = null;
                this.uuidPropList = null;
                this.uuidList = null;
                this.uuidTypeList = [];
              }

              init(data) {
                {
                  this.uuidObjList = data[File.DependObjs];
                  this.uuidPropList = data[File.DependKeys];
                  this.uuidList = data[File.DependUuidIndices];
                }
              }

              reset() {
                {
                  this.uuidList = null;
                  this.uuidObjList = null;
                  this.uuidPropList = null;
                }
              }

              push(obj, propName, uuid, type) {
                this.uuidObjList.push(obj);
                this.uuidPropList.push(propName);
                this.uuidList.push(uuid);
                this.uuidTypeList.push(type || '');
              }

            } exports('eU', Details);
            Details.pool = new Pool(obj => {
              obj.reset();
            }, 5);

            Details.pool.get = function () {
              return this._get() || new Details();
            };

            function dereference(refs, instances, strings) {
              const dataLength = refs.length - 1;
              let i = 0;
              const instanceOffset = refs[dataLength] * Refs.EACH_RECORD_LENGTH;

              for (; i < instanceOffset; i += Refs.EACH_RECORD_LENGTH) {
                const owner = refs[i];
                const target = instances[refs[i + Refs.TARGET_OFFSET]];
                const keyIndex = refs[i + Refs.KEY_OFFSET];

                if (keyIndex >= 0) {
                  owner[strings[keyIndex]] = target;
                } else {
                  owner[~keyIndex] = target;
                }
              }

              for (; i < dataLength; i += Refs.EACH_RECORD_LENGTH) {
                const owner = instances[refs[i]];
                const target = instances[refs[i + Refs.TARGET_OFFSET]];
                const keyIndex = refs[i + Refs.KEY_OFFSET];

                if (keyIndex >= 0) {
                  owner[strings[keyIndex]] = target;
                } else {
                  owner[~keyIndex] = target;
                }
              }
            }

            function deserializeCCObject(data, objectData) {
              const mask = data[File.SharedMasks][objectData[OBJ_DATA_MASK]];
              const clazz = mask[MASK_CLASS];
              const ctor = clazz[CLASS_TYPE];
              const obj = new ctor();
              const keys = clazz[CLASS_KEYS];
              const classTypeOffset = clazz[CLASS_PROP_TYPE_OFFSET];
              const maskTypeOffset = mask[mask.length - 1];
              let i = MASK_CLASS + 1;

              for (; i < maskTypeOffset; ++i) {
                const key = keys[mask[i]];
                obj[key] = objectData[i];
              }

              for (; i < objectData.length; ++i) {
                const key = keys[mask[i]];
                const type = clazz[mask[i] + classTypeOffset];
                const op = ASSIGNMENTS[type];
                op(data, obj, key, objectData[i]);
              }

              return obj;
            }

            function deserializeCustomCCObject(data, ctor, value) {
              const obj = new ctor();

              if (obj._deserialize) {
                obj._deserialize(value, data[File.Context]);
              } else {
                errorID(5303, getClassName(ctor));
              }

              return obj;
            }

            function assignSimple(data, owner, key, value) {
              owner[key] = value;
            }

            function assignInstanceRef(data, owner, key, value) {
              if (value >= 0) {
                owner[key] = data[File.Instances][value];
              } else {
                data[File.Refs][~value * Refs.EACH_RECORD_LENGTH] = owner;
              }
            }

            function genArrayParser(parser) {
              return (data, owner, key, value) => {
                owner[key] = value;

                for (let i = 0; i < value.length; ++i) {
                  parser(data, value, i, value[i]);
                }
              };
            }

            function parseAssetRefByInnerObj(data, owner, key, value) {
              owner[key] = null;
              data[File.DependObjs][value] = owner;
            }

            function parseClass(data, owner, key, value) {
              owner[key] = deserializeCCObject(data, value);
            }

            function parseCustomClass(data, owner, key, value) {
              const ctor = data[File.SharedClasses][value[CUSTOM_OBJ_DATA_CLASS]];
              owner[key] = deserializeCustomCCObject(data, ctor, value[CUSTOM_OBJ_DATA_CONTENT]);
            }

            function parseValueTypeCreated(data, owner, key, value) {
              BuiltinValueTypeSetters[value[VALUETYPE_SETTER]](owner[key], value);
            }

            function parseValueType(data, owner, key, value) {
              const val = new BuiltinValueTypes[value[VALUETYPE_SETTER]]();
              BuiltinValueTypeSetters[value[VALUETYPE_SETTER]](val, value);
              owner[key] = val;
            }

            function parseTRS(data, owner, key, value) {
              const typedArray = owner[key];
              typedArray.set(value);
            }

            function parseDict(data, owner, key, value) {
              const dict = value[DICT_JSON_LAYOUT];
              owner[key] = dict;

              for (let i = DICT_JSON_LAYOUT + 1; i < value.length; i += 3) {
                const subKey = value[i];
                const subType = value[i + 1];
                const subValue = value[i + 2];
                const op = ASSIGNMENTS[subType];
                op(data, dict, subKey, subValue);
              }
            }

            function parseArray(data, owner, key, value) {
              const array = value[ARRAY_ITEM_VALUES];
              owner[key] = array;

              for (let i = 0; i < array.length; ++i) {
                const subValue = array[i];
                const type = value[i + 1];

                if (type !== DataTypeID.SimpleType) {
                  const op = ASSIGNMENTS[type];
                  op(data, array, i, subValue);
                }
              }
            }

            const ASSIGNMENTS = new Array(DataTypeID.ARRAY_LENGTH);
            ASSIGNMENTS[DataTypeID.SimpleType] = assignSimple;
            ASSIGNMENTS[DataTypeID.InstanceRef] = assignInstanceRef;
            ASSIGNMENTS[DataTypeID.Array_InstanceRef] = genArrayParser(assignInstanceRef);
            ASSIGNMENTS[DataTypeID.Array_AssetRefByInnerObj] = genArrayParser(parseAssetRefByInnerObj);
            ASSIGNMENTS[DataTypeID.Class] = parseClass;
            ASSIGNMENTS[DataTypeID.ValueTypeCreated] = parseValueTypeCreated;
            ASSIGNMENTS[DataTypeID.AssetRefByInnerObj] = parseAssetRefByInnerObj;
            ASSIGNMENTS[DataTypeID.TRS] = parseTRS;
            ASSIGNMENTS[DataTypeID.ValueType] = parseValueType;
            ASSIGNMENTS[DataTypeID.Array_Class] = genArrayParser(parseClass);
            ASSIGNMENTS[DataTypeID.CustomizedClass] = parseCustomClass;
            ASSIGNMENTS[DataTypeID.Dict] = parseDict;
            ASSIGNMENTS[DataTypeID.Array] = parseArray;

            function parseInstances(data) {
              const instances = data[File.Instances];
              const instanceTypes = data[File.InstanceTypes];
              const instanceTypesLen = instanceTypes === EMPTY_PLACEHOLDER ? 0 : instanceTypes.length;
              let rootIndex = instances[instances.length - 1];
              let normalObjectCount = instances.length - instanceTypesLen;

              if (typeof rootIndex !== 'number') {
                rootIndex = 0;
              } else {
                if (rootIndex < 0) {
                  rootIndex = ~rootIndex;
                }

                --normalObjectCount;
              }

              let insIndex = 0;

              for (; insIndex < normalObjectCount; ++insIndex) {
                instances[insIndex] = deserializeCCObject(data, instances[insIndex]);
              }

              const classes = data[File.SharedClasses];

              for (let typeIndex = 0; typeIndex < instanceTypesLen; ++typeIndex, ++insIndex) {
                let type = instanceTypes[typeIndex];
                const eachData = instances[insIndex];

                if (type >= 0) {
                  const ctor = classes[type];
                  instances[insIndex] = deserializeCustomCCObject(data, ctor, eachData);
                } else {
                  type = ~type;
                  const op = ASSIGNMENTS[type];
                  op(data, instances, insIndex, eachData);
                }
              }

              return rootIndex;
            }

            function getMissingClass(hasCustomFinder, type) {
              if (!hasCustomFinder) {
                deserialize.reportMissingClass(type);
              }

              return Object;
            }

            function doLookupClass(classFinder, type, container, index, silent, hasCustomFinder) {
              let klass = classFinder(type);

              if (!klass) {
                if (silent) {
                  container[index] = ((c, i, t) => function proxy() {
                    const actualClass = classFinder(t) || getMissingClass(hasCustomFinder, t);
                    c[i] = actualClass;
                    return new actualClass();
                  })(container, index, type);

                  return;
                } else {
                  klass = getMissingClass(hasCustomFinder, type);
                }
              }

              container[index] = klass;
            }

            function lookupClasses(data, silent, customFinder) {
              const classFinder = customFinder || _getClassById;
              const classes = data[File.SharedClasses];

              for (let i = 0; i < classes.length; ++i) {
                const klassLayout = classes[i];

                if (typeof klassLayout !== 'string') {
                  {
                    if (typeof klassLayout[CLASS_TYPE] === 'function') {
                      throw new Error('Can not deserialize the same JSON data again.');
                    }
                  }

                  const type = klassLayout[CLASS_TYPE];
                  doLookupClass(classFinder, type, klassLayout, CLASS_TYPE, silent, customFinder);
                } else {
                  doLookupClass(classFinder, klassLayout, classes, i, silent, customFinder);
                }
              }
            }

            function cacheMasks(data) {
              const masks = data[File.SharedMasks];

              if (masks) {
                const classes = data[File.SharedClasses];

                for (let i = 0; i < masks.length; ++i) {
                  const mask = masks[i];
                  mask[MASK_CLASS] = classes[mask[MASK_CLASS]];
                }
              }
            }

            function parseResult(data) {
              const instances = data[File.Instances];
              const sharedStrings = data[File.SharedStrings];
              const dependSharedUuids = data[File.SharedUuids];
              const dependObjs = data[File.DependObjs];
              const dependKeys = data[File.DependKeys];
              const dependUuids = data[File.DependUuidIndices];

              for (let i = 0; i < dependObjs.length; ++i) {
                const obj = dependObjs[i];

                if (typeof obj === 'number') {
                  dependObjs[i] = instances[obj];
                }

                let key = dependKeys[i];

                if (typeof key === 'number') {
                  if (key >= 0) {
                    key = sharedStrings[key];
                  } else {
                    key = ~key;
                  }

                  dependKeys[i] = key;
                }

                const uuid = dependUuids[i];

                if (typeof uuid === 'number') {
                  dependUuids[i] = dependSharedUuids[uuid];
                }
              }
            }
            function deserialize(data, details, options) {
              if (typeof data === 'string') {
                data = JSON.parse(data);
              }

              const borrowDetails = !details;
              details = details || Details.pool.get();
              let res;

              {
                details.init(data);
                options = options || {};
                let version = data[File.Version];
                let preprocessed = false;

                if (typeof version === 'object') {
                  preprocessed = version.preprocessed;
                  version = version.version;
                }

                if (version < SUPPORT_MIN_FORMAT_VERSION) {
                  throw new Error(getError(5304, version));
                }

                options._version = version;
                options.result = details;
                data[File.Context] = options;

                if (!preprocessed) {
                  lookupClasses(data, false, options.classFinder);
                  cacheMasks(data);
                }

                legacyCC.game._isCloning = true;
                const instances = data[File.Instances];
                const rootIndex = parseInstances(data);
                legacyCC.game._isCloning = false;

                if (data[File.Refs]) {
                  dereference(data[File.Refs], instances, data[File.SharedStrings]);
                }

                parseResult(data);

                {
                  for (let i = 0; i < instances.length; ++i) {
                    var _instances$i, _instances$i$onAfterD;

                    (_instances$i = instances[i]) === null || _instances$i === void 0 ? void 0 : (_instances$i$onAfterD = _instances$i.onAfterDeserialize_JSB) === null || _instances$i$onAfterD === void 0 ? void 0 : _instances$i$onAfterD.call(_instances$i);
                  }
                }

                res = instances[rootIndex];
              }

              if (borrowDetails) {
                Details.pool.put(details);
              }

              return res;
            }
            deserialize.Details = Details;

            deserialize.reportMissingClass = id => {
              {
                warnID(5302, id);
              }
            };

            class FileInfo {
              constructor(version) {
                this.preprocessed = true;
                this.version = version;
              }

            }

            function unpackJSONs(data, classFinder) {
              if (data[File.Version] < SUPPORT_MIN_FORMAT_VERSION) {
                throw new Error(getError(5304, data[File.Version]));
              }

              lookupClasses(data, true, classFinder);
              cacheMasks(data);
              const version = new FileInfo(data[File.Version]);
              const sharedUuids = data[File.SharedUuids];
              const sharedStrings = data[File.SharedStrings];
              const sharedClasses = data[File.SharedClasses];
              const sharedMasks = data[File.SharedMasks];
              const sections = data[PACKED_SECTIONS];

              for (let i = 0; i < sections.length; ++i) {
                sections[i].unshift(version, sharedUuids, sharedStrings, sharedClasses, sharedMasks);
              }

              return sections;
            }
            function packCustomObjData(type, data, hasNativeDep) {
              return [SUPPORT_MIN_FORMAT_VERSION, EMPTY_PLACEHOLDER, EMPTY_PLACEHOLDER, [type], EMPTY_PLACEHOLDER, hasNativeDep ? [data, ~0] : [data], [0], EMPTY_PLACEHOLDER, [], [], []];
            }
            function hasNativeDep(data) {
              const instances = data[File.Instances];
              const rootInfo = instances[instances.length - 1];

              if (typeof rootInfo !== 'number') {
                return false;
              } else {
                return rootInfo < 0;
              }
            }
            function getDependUuidList(json) {
              const sharedUuids = json[File.SharedUuids];
              return json[File.DependUuidIndices].map(index => sharedUuids[index]);
            }

            legacyCC.deserialize = deserialize;

            var _dec$3, _class$3, _dec2, _class2$3, _dec3, _class3$2;
            let Script = exports('f0', (_dec$3 = ccclass('cc.Script'), _dec$3(_class$3 = class Script extends Asset {}) || _class$3));
            legacyCC._Script = Script;
            let JavaScript = exports('f1', (_dec2 = ccclass('cc.JavaScript'), _dec2(_class2$3 = class JavaScript extends Script {}) || _class2$3));
            legacyCC._JavaScript = JavaScript;
            let TypeScript = exports('f2', (_dec3 = ccclass('cc.TypeScript'), _dec3(_class3$2 = class TypeScript extends Script {}) || _class3$2));
            legacyCC._TypeScript = TypeScript;

            var _dec$4, _dec2$1, _dec3$1, _dec4, _class$4, _class2$4, _descriptor$2, _descriptor2$1, _descriptor3$1, _class3$3, _temp$3;
            const idGenerator$1 = new IDGenerator('Comp');
            const IsOnLoadCalled$1 = CCObject.Flags.IsOnLoadCalled;
            const NullNode = null;
            let Component = exports('c8', (_dec$4 = ccclass('cc.Component'), _dec2$1 = displayName(), _dec3$1 = type(Script), _dec4 = tooltip(), _dec$4(_class$4 = (_class2$4 = (_temp$3 = _class3$3 = class Component extends CCObject {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "node", _descriptor$2, this);

                _initializerDefineProperty(this, "_enabled", _descriptor2$1, this);

                _initializerDefineProperty(this, "__prefab", _descriptor3$1, this);

                this._sceneGetter = null;
                this._id = idGenerator$1.getNewId();
              }

              get name() {
                if (this._name) {
                  return this._name;
                }

                let className = getClassName(this);
                const trimLeft = className.lastIndexOf('.');

                if (trimLeft >= 0) {
                  className = className.slice(trimLeft + 1);
                }

                return `${this.node.name}<${className}>`;
              }

              set name(value) {
                this._name = value;
              }

              get uuid() {
                return this._id;
              }

              get __scriptAsset() {
                return null;
              }

              get enabled() {
                return this._enabled;
              }

              set enabled(value) {
                if (this._enabled !== value) {
                  this._enabled = value;

                  if (this.node.activeInHierarchy) {
                    const compScheduler = legacyCC.director._compScheduler;

                    if (value) {
                      compScheduler.enableComp(this);
                    } else {
                      compScheduler.disableComp(this);
                    }
                  }
                }
              }

              get enabledInHierarchy() {
                return this._enabled && this.node && this.node.activeInHierarchy;
              }

              get _isOnLoadCalled() {
                return this._objFlags & IsOnLoadCalled$1;
              }

              _getRenderScene() {
                if (this._sceneGetter) {
                  return this._sceneGetter();
                }

                return this.node.scene._renderScene;
              }

              addComponent(typeOrClassName) {
                return this.node.addComponent(typeOrClassName);
              }

              getComponent(typeOrClassName) {
                return this.node.getComponent(typeOrClassName);
              }

              getComponents(typeOrClassName) {
                return this.node.getComponents(typeOrClassName);
              }

              getComponentInChildren(typeOrClassName) {
                return this.node.getComponentInChildren(typeOrClassName);
              }

              getComponentsInChildren(typeOrClassName) {
                return this.node.getComponentsInChildren(typeOrClassName);
              }

              destroy() {

                if (super.destroy()) {
                  if (this._enabled && this.node.activeInHierarchy) {
                    legacyCC.director._compScheduler.disableComp(this);
                  }

                  return true;
                }

                return false;
              }

              _onPreDestroy() {
                this.unscheduleAllCallbacks();

                legacyCC.director._nodeActivator.destroyComp(this);

                this.node._removeComponent(this);
              }

              _instantiate(cloned) {
                if (!cloned) {
                  cloned = legacyCC.instantiate._clone(this, this);
                }

                if (cloned) {
                  cloned.node = NullNode;
                }

                return cloned;
              }

              schedule(callback, interval = 0, repeat = legacyCC.macro.REPEAT_FOREVER, delay = 0) {
                assertID(callback, 1619);
                interval = interval || 0;
                assertID(interval >= 0, 1620);
                repeat = Number.isNaN(repeat) ? legacyCC.macro.REPEAT_FOREVER : repeat;
                delay = delay || 0;
                const scheduler = legacyCC.director.getScheduler();
                const paused = scheduler.isTargetPaused(this);
                scheduler.schedule(callback, this, interval, repeat, delay, paused);
              }

              scheduleOnce(callback, delay = 0) {
                this.schedule(callback, 0, 0, delay);
              }

              unschedule(callback_fn) {
                if (!callback_fn) {
                  return;
                }

                legacyCC.director.getScheduler().unschedule(callback_fn, this);
              }

              unscheduleAllCallbacks() {
                legacyCC.director.getScheduler().unscheduleAllForTarget(this);
              }

            }, _class3$3.system = null, _temp$3), (_applyDecoratedDescriptor(_class2$4.prototype, "__scriptAsset", [_dec2$1, _dec3$1, _dec4, disallowAnimation], Object.getOwnPropertyDescriptor(_class2$4.prototype, "__scriptAsset"), _class2$4.prototype), _descriptor$2 = _applyDecoratedDescriptor(_class2$4.prototype, "node", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return NullNode;
              }
            }), _descriptor2$1 = _applyDecoratedDescriptor(_class2$4.prototype, "_enabled", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return true;
              }
            }), _descriptor3$1 = _applyDecoratedDescriptor(_class2$4.prototype, "__prefab", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class2$4)) || _class$4));
            const proto = Component.prototype;
            proto.update = null;
            proto.lateUpdate = null;
            proto.__preload = null;
            proto.onLoad = null;
            proto.start = null;
            proto.onEnable = null;
            proto.onDisable = null;
            proto.onDestroy = null;
            proto.onFocusInEditor = null;
            proto.onLostFocusInEditor = null;
            proto.resetInEditor = null;
            proto._getLocalBounds = null;
            proto.onRestore = null;
            Component._requireComponent = null;
            Component._executionOrder = 0;

            value(Component, '_registerEditorProps', (cls, props) => {
              const reqComp = props.requireComponent;

              if (reqComp) {
                cls._requireComponent = reqComp;
              }

              const order = props.executionOrder;

              if (order && typeof order === 'number') {
                cls._executionOrder = order;
              }
            });
            legacyCC.Component = Component;

            var _dec$5, _dec2$2, _class$5, _class2$5, _descriptor$3, _temp$4;
            let MissingScript = exports('fG', (_dec$5 = ccclass('cc.MissingScript'), _dec2$2 = inspector(), _dec$5(_class$5 = _dec2$2(_class$5 = (_class2$5 = (_temp$4 = class MissingScript extends Component {
              static safeFindClass(id) {
                const cls = _getClassById(id);

                if (cls) {
                  return cls;
                }

                legacyCC.deserialize.reportMissingClass(id);
                return undefined;
              }

              constructor() {
                super();

                _initializerDefineProperty(this, "_$erialized", _descriptor$3, this);
              }

              onLoad() {
                warnID(4600, this.node.name);
              }

            }, _temp$4), (_descriptor$3 = _applyDecoratedDescriptor(_class2$5.prototype, "_$erialized", [serializable, editorOnly], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class2$5)) || _class$5) || _class$5));
            legacyCC._MissingScript = MissingScript;

            function deserialize$1 (json, options) {
              let classFinder;

              {
                classFinder = MissingScript.safeFindClass;
              }

              const tdInfo = Details.pool.get();
              let asset;

              try {
                asset = deserialize(json, tdInfo, {
                  classFinder,
                  customEnv: options
                });
              } catch (e) {
                error(e);
                Details.pool.put(tdInfo);
                throw e;
              }

              asset._uuid = options.__uuid__ || '';

              const uuidList = tdInfo.uuidList;
              const objList = tdInfo.uuidObjList;
              const propList = tdInfo.uuidPropList;
              const typeList = tdInfo.uuidTypeList || [];
              const depends = [];

              for (let i = 0; i < uuidList.length; i++) {
                const dependUuid = uuidList[i];
                depends[i] = {
                  uuid: decodeUuid(dependUuid),
                  owner: objList[i],
                  prop: propList[i],
                  type: js._getClassById(typeList[i])
                };
              }

              asset.__depends__ = depends;

              if (asset._native) {
                asset.__nativeDepend__ = true;
              }

              Details.pool.put(tdInfo);
              return asset;
            }

            class DependUtil {
              constructor() {
                this._depends = new Cache();
              }

              init() {
                this._depends.clear();
              }

              getNativeDep(uuid) {
                const depend = this._depends.get(uuid);

                if (depend && depend.nativeDep) {
                  return { ...depend.nativeDep
                  };
                }

                return null;
              }

              getDeps(uuid) {
                if (this._depends.has(uuid)) {
                  return this._depends.get(uuid).deps;
                }

                return [];
              }

              getDepsRecursively(uuid) {
                const exclude = Object.create(null);
                const depends = [];

                this._descend(uuid, exclude, depends);

                return depends;
              }

              remove(uuid) {
                this._depends.remove(uuid);
              }

              parse(uuid, json) {
                let out = null;

                if (Array.isArray(json) || json.__type__) {
                  if (this._depends.has(uuid)) {
                    return this._depends.get(uuid);
                  }

                  if (Array.isArray(json) && ( !hasNativeDep(json))) {
                    out = {
                      deps: this._parseDepsFromJson(json)
                    };
                  } else {
                    try {
                      const asset = deserialize$1(json, {
                        __uuid__: uuid
                      });
                      out = this._parseDepsFromAsset(asset);

                      if (out.nativeDep) {
                        out.nativeDep.uuid = uuid;
                      }

                      parsed.add(`${uuid}@import`, asset);
                    } catch (e) {
                      files.remove(`${uuid}@import`);
                      out = {
                        deps: []
                      };
                    }
                  }
                } else {
                  if ( this._depends.has(uuid)) {
                    out = this._depends.get(uuid);

                    if (out.parsedFromExistAsset) {
                      return out;
                    }
                  }

                  out = this._parseDepsFromAsset(json);
                }

                this._depends.add(uuid, out);

                return out;
              }

              _parseDepsFromAsset(asset) {
                const out = {
                  deps: [],
                  parsedFromExistAsset: true
                };
                const deps = asset.__depends__;

                for (let i = 0, l = deps.length; i < l; i++) {
                  out.deps.push(deps[i].uuid);
                }

                if (asset.__nativeDepend__) {
                  out.nativeDep = asset._nativeDep;
                }

                return out;
              }

              _parseDepsFromJson(json) {
                let depends = null;

                depends = getDependUuidList(json);
                depends.forEach((uuid, index) => depends[index] = decodeUuid(uuid));
                return depends;
              }

              _descend(uuid, exclude, depends) {
                const deps = this.getDeps(uuid);

                for (let i = 0; i < deps.length; i++) {
                  const depend = deps[i];

                  if (!exclude[depend]) {
                    exclude[depend] = true;
                    depends.push(depend);

                    this._descend(depend, exclude, depends);
                  }
                }
              }

            }
            var dependUtil = new DependUtil();

            var _dec$6, _class$6, _temp$5;
            const _regions = [new BufferTextureCopy()];

            function getMipLevel(width, height) {
              let size = Math.max(width, height);
              let level = 0;

              while (size) {
                size >>= 1;
                level++;
              }

              return level;
            }

            function isPOT(n) {
              return n && (n & n - 1) === 0;
            }

            function canGenerateMipmap(device, w, h) {
              const needCheckPOT = device.gfxAPI === API.WEBGL;

              if (needCheckPOT) {
                return isPOT(w) && isPOT(h);
              }

              return true;
            }

            let SimpleTexture = (_dec$6 = ccclass('cc.SimpleTexture'), _dec$6(_class$6 = (_temp$5 = class SimpleTexture extends TextureBase {
              constructor(...args) {
                super(...args);
                this._gfxTexture = null;
                this._mipmapLevel = 1;
                this._textureWidth = 0;
                this._textureHeight = 0;
              }

              get mipmapLevel() {
                return this._mipmapLevel;
              }

              getGFXTexture() {
                return this._gfxTexture;
              }

              destroy() {
                this._tryDestroyTexture();

                return super.destroy();
              }

              updateImage() {
                this.updateMipmaps(0);
              }

              updateMipmaps(firstLevel = 0, count) {}

              uploadData(source, level = 0, arrayIndex = 0) {
                if (!this._gfxTexture || this._mipmapLevel <= level) {
                  return;
                }

                const gfxDevice = this._getGFXDevice();

                if (!gfxDevice) {
                  return;
                }

                const region = _regions[0];
                region.texExtent.width = this._textureWidth >> level;
                region.texExtent.height = this._textureHeight >> level;
                region.texSubres.mipLevel = level;
                region.texSubres.baseArrayLayer = arrayIndex;

                if (ArrayBuffer.isView(source)) {
                  gfxDevice.copyBuffersToTexture([source], this._gfxTexture, _regions);
                } else {
                  gfxDevice.copyTexImagesToTexture([source], this._gfxTexture, _regions);
                }
              }

              _assignImage(image, level, arrayIndex) {
                const upload = () => {
                  const data = image.data;

                  if (!data) {
                    return;
                  }

                  this.uploadData(data, level, arrayIndex);

                  this._checkTextureLoaded();

                  if (macro.CLEANUP_IMAGE_CACHE) {
                    const deps = dependUtil.getDeps(this._uuid);
                    const index = deps.indexOf(image._uuid);

                    if (index !== -1) {
                      fastRemoveAt(deps, index);
                      image.decRef();
                    }
                  }
                };

                if (image.loaded) {
                  upload();
                } else {
                  image.once('load', () => {
                    upload();
                  });

                  if (!this.isCompressed) {
                    const defaultImg = legacyCC.builtinResMgr.get('black-texture').image;
                    this.uploadData(defaultImg.data, level, arrayIndex);
                  }

                  legacyCC.assetManager.postLoadNative(image);
                }
              }

              _checkTextureLoaded() {
                this._textureReady();
              }

              _textureReady() {
                this.loaded = true;
                this.emit('load');
              }

              _setMipmapLevel(value) {
                this._mipmapLevel = value < 1 ? 1 : value;
              }

              _getGfxTextureCreateInfo(presumed) {
                return null;
              }

              _tryReset() {
                this._tryDestroyTexture();

                if (this._mipmapLevel === 0) {
                  return;
                }

                const device = this._getGFXDevice();

                if (!device) {
                  return;
                }

                this._createTexture(device);
              }

              _createTexture(device) {
                if (this._width === 0 || this._height === 0) {
                  return;
                }

                let flags = TextureFlagBit.NONE;

                if (this._mipFilter !== Filter$1.NONE && canGenerateMipmap(device, this._width, this._height)) {
                  this._mipmapLevel = getMipLevel(this._width, this._height);
                  flags = TextureFlagBit.GEN_MIPMAP;
                }

                const textureCreateInfo = this._getGfxTextureCreateInfo({
                  usage: TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST,
                  format: this._getGFXFormat(),
                  levelCount: this._mipmapLevel,
                  flags: flags | TextureFlagBit.IMMUTABLE
                });

                if (!textureCreateInfo) {
                  return;
                }

                const texture = device.createTexture(textureCreateInfo);
                this._textureWidth = textureCreateInfo.width;
                this._textureHeight = textureCreateInfo.height;
                this._gfxTexture = texture;
              }

              _tryDestroyTexture() {
                if (this._gfxTexture) {
                  this._gfxTexture.destroy();

                  this._gfxTexture = null;
                }
              }

            }, _temp$5)) || _class$6);
            legacyCC.SimpleTexture = SimpleTexture;

            var _dec$7, _dec2$3, _class$7, _class2$6, _descriptor$4, _temp$6;
            let Texture2D = exports('bv', (_dec$7 = ccclass('cc.Texture2D'), _dec2$3 = type([ImageAsset]), _dec$7(_class$7 = (_class2$6 = (_temp$6 = class Texture2D extends SimpleTexture {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "_mipmaps", _descriptor$4, this);
              }

              get mipmaps() {
                return this._mipmaps;
              }

              set mipmaps(value) {
                this._mipmaps = value;

                this._setMipmapLevel(this._mipmaps.length);

                if (this._mipmaps.length > 0) {
                  const imageAsset = this._mipmaps[0];
                  this.reset({
                    width: imageAsset.width,
                    height: imageAsset.height,
                    format: imageAsset.format,
                    mipmapLevel: this._mipmaps.length
                  });

                  this._mipmaps.forEach((mipmap, level) => {
                    this._assignImage(mipmap, level);
                  });
                } else {
                  this.reset({
                    width: 0,
                    height: 0,
                    mipmapLevel: this._mipmaps.length
                  });
                }
              }

              get image() {
                return this._mipmaps.length === 0 ? null : this._mipmaps[0];
              }

              set image(value) {
                this.mipmaps = value ? [value] : [];
              }

              initialize() {
                this.mipmaps = this._mipmaps;
              }

              onLoaded() {
                this.initialize();
              }

              reset(info) {
                this._width = info.width;
                this._height = info.height;

                this._setGFXFormat(info.format);

                this._setMipmapLevel(info.mipmapLevel || 1);

                this._tryReset();
              }

              create(width, height, format = PixelFormat.RGBA8888, mipmapLevel = 1) {
                this.reset({
                  width,
                  height,
                  format,
                  mipmapLevel
                });
              }

              toString() {
                return this._mipmaps.length !== 0 ? this._mipmaps[0].url : '';
              }

              updateMipmaps(firstLevel = 0, count) {
                if (firstLevel >= this._mipmaps.length) {
                  return;
                }

                const nUpdate = Math.min(count === undefined ? this._mipmaps.length : count, this._mipmaps.length - firstLevel);

                for (let i = 0; i < nUpdate; ++i) {
                  const level = firstLevel + i;

                  this._assignImage(this._mipmaps[level], level);
                }
              }

              getHtmlElementObj() {
                return this._mipmaps[0] && this._mipmaps[0].data instanceof HTMLElement ? this._mipmaps[0].data : null;
              }

              destroy() {
                this._mipmaps = [];
                return super.destroy();
              }

              description() {
                const url = this._mipmaps[0] ? this._mipmaps[0].url : '';
                return `<cc.Texture2D | Name = ${url} | Dimension = ${this.width} x ${this.height}>`;
              }

              releaseTexture() {
                this.destroy();
              }

              _serialize(ctxForExporting) {

                return null;
              }

              _deserialize(serializedData, handle) {
                const data = serializedData;

                super._deserialize(data.base, handle);

                this._mipmaps = new Array(data.mipmaps.length);

                for (let i = 0; i < data.mipmaps.length; ++i) {
                  this._mipmaps[i] = new ImageAsset();

                  if (!data.mipmaps[i]) {
                    continue;
                  }

                  const mipmapUUID = data.mipmaps[i];
                  handle.result.push(this._mipmaps, `${i}`, mipmapUUID, js._getClassId(ImageAsset));
                  this._mipmaps[i]._texture = this;
                }
              }

              _getGfxTextureCreateInfo(presumed) {
                const texInfo = new TextureInfo(TextureType.TEX2D);
                texInfo.width = this._width;
                texInfo.height = this._height;
                return Object.assign(texInfo, presumed);
              }

              _checkTextureLoaded() {
                let ready = true;

                for (let i = 0; i < this._mipmaps.length; ++i) {
                  const image = this._mipmaps[i];

                  if (!image.loaded) {
                    ready = false;
                    break;
                  }
                }

                if (ready) {
                  super._textureReady();
                }
              }

              initDefault(uuid) {
                super.initDefault(uuid);
                const imageAsset = new ImageAsset();
                imageAsset.initDefault();
                this.image = imageAsset;
              }

              validate() {
                return this.mipmaps && this.mipmaps.length !== 0;
              }

            }, _temp$6), (_descriptor$4 = _applyDecoratedDescriptor(_class2$6.prototype, "_mipmaps", [_dec2$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class2$6)) || _class$7));
            legacyCC.Texture2D = Texture2D;

            var _dec$8, _class$8, _class2$7, _descriptor$5, _class3$4, _temp$7;
            var FaceIndex;

            (function (FaceIndex) {
              FaceIndex[FaceIndex["right"] = 0] = "right";
              FaceIndex[FaceIndex["left"] = 1] = "left";
              FaceIndex[FaceIndex["top"] = 2] = "top";
              FaceIndex[FaceIndex["bottom"] = 3] = "bottom";
              FaceIndex[FaceIndex["front"] = 4] = "front";
              FaceIndex[FaceIndex["back"] = 5] = "back";
            })(FaceIndex || (FaceIndex = {}));

            let TextureCube = exports('e$', (_dec$8 = ccclass('cc.TextureCube'), _dec$8(_class$8 = (_class2$7 = (_temp$7 = _class3$4 = class TextureCube extends SimpleTexture {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "_mipmaps", _descriptor$5, this);
              }

              get mipmaps() {
                return this._mipmaps;
              }

              set mipmaps(value) {
                this._mipmaps = value;

                this._setMipmapLevel(this._mipmaps.length);

                if (this._mipmaps.length > 0) {
                  const imageAsset = this._mipmaps[0].front;
                  this.reset({
                    width: imageAsset.width,
                    height: imageAsset.height,
                    format: imageAsset.format,
                    mipmapLevel: this._mipmaps.length
                  });

                  this._mipmaps.forEach((mipmap, level) => {
                    _forEachFace(mipmap, (face, faceIndex) => {
                      this._assignImage(face, level, faceIndex);
                    });
                  });
                } else {
                  this.reset({
                    width: 0,
                    height: 0,
                    mipmapLevel: this._mipmaps.length
                  });
                }
              }

              get image() {
                return this._mipmaps.length === 0 ? null : this._mipmaps[0];
              }

              set image(value) {
                this.mipmaps = value ? [value] : [];
              }

              static fromTexture2DArray(textures, out) {
                const mipmaps = [];
                const nMipmaps = textures.length / 6;

                for (let i = 0; i < nMipmaps; i++) {
                  const x = i * 6;
                  mipmaps.push({
                    front: textures[x + FaceIndex.front].image,
                    back: textures[x + FaceIndex.back].image,
                    left: textures[x + FaceIndex.left].image,
                    right: textures[x + FaceIndex.right].image,
                    top: textures[x + FaceIndex.top].image,
                    bottom: textures[x + FaceIndex.bottom].image
                  });
                }

                out = out || new TextureCube();
                out.mipmaps = mipmaps;
                return out;
              }

              onLoaded() {
                this.mipmaps = this._mipmaps;
                this.loaded = true;
                this.emit('load');
              }

              reset(info) {
                this._width = info.width;
                this._height = info.height;

                this._setGFXFormat(info.format);

                this._setMipmapLevel(info.mipmapLevel || 1);

                this._tryReset();
              }

              updateMipmaps(firstLevel = 0, count) {
                if (firstLevel >= this._mipmaps.length) {
                  return;
                }

                const nUpdate = Math.min(count === undefined ? this._mipmaps.length : count, this._mipmaps.length - firstLevel);

                for (let i = 0; i < nUpdate; ++i) {
                  const level = firstLevel + i;

                  _forEachFace(this._mipmaps[level], (face, faceIndex) => {
                    this._assignImage(face, level, faceIndex);
                  });
                }
              }

              destroy() {
                this._mipmaps = [];
                return super.destroy();
              }

              releaseTexture() {
                this.mipmaps = [];
              }

              _serialize(ctxForExporting) {

                return null;
              }

              _deserialize(serializedData, handle) {
                const data = serializedData;

                super._deserialize(data.base, handle);

                this._mipmaps = new Array(data.mipmaps.length);

                for (let i = 0; i < data.mipmaps.length; ++i) {
                  this._mipmaps[i] = {
                    front: new ImageAsset(),
                    back: new ImageAsset(),
                    left: new ImageAsset(),
                    right: new ImageAsset(),
                    top: new ImageAsset(),
                    bottom: new ImageAsset()
                  };
                  const mipmap = data.mipmaps[i];

                  const imageAssetClassId = js._getClassId(ImageAsset);

                  handle.result.push(this._mipmaps[i], `front`, mipmap.front, imageAssetClassId);
                  handle.result.push(this._mipmaps[i], `back`, mipmap.back, imageAssetClassId);
                  handle.result.push(this._mipmaps[i], `left`, mipmap.left, imageAssetClassId);
                  handle.result.push(this._mipmaps[i], `right`, mipmap.right, imageAssetClassId);
                  handle.result.push(this._mipmaps[i], `top`, mipmap.top, imageAssetClassId);
                  handle.result.push(this._mipmaps[i], `bottom`, mipmap.bottom, imageAssetClassId);
                }
              }

              _getGfxTextureCreateInfo(presumed) {
                const texInfo = new TextureInfo(TextureType.CUBE);
                texInfo.width = this._width;
                texInfo.height = this._height;
                texInfo.layerCount = 6;
                Object.assign(texInfo, presumed);
                return texInfo;
              }

              initDefault(uuid) {
                super.initDefault(uuid);
                const imageAsset = new ImageAsset();
                imageAsset.initDefault();
                this.mipmaps = [{
                  front: imageAsset,
                  back: imageAsset,
                  top: imageAsset,
                  bottom: imageAsset,
                  left: imageAsset,
                  right: imageAsset
                }];
              }

              validate() {
                return this._mipmaps.length !== 0 && !this._mipmaps.find(x => !(x.top && x.bottom && x.front && x.back && x.left && x.right));
              }

            }, _class3$4.FaceIndex = FaceIndex, _temp$7), (_descriptor$5 = _applyDecoratedDescriptor(_class2$7.prototype, "_mipmaps", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class2$7)) || _class$8));
            legacyCC.TextureCube = TextureCube;

            function _forEachFace(mipmap, callback) {
              callback(mipmap.front, FaceIndex.front);
              callback(mipmap.back, FaceIndex.back);
              callback(mipmap.left, FaceIndex.left);
              callback(mipmap.right, FaceIndex.right);
              callback(mipmap.top, FaceIndex.top);
              callback(mipmap.bottom, FaceIndex.bottom);
            }

            const effects = exports('fH', [{
              "name": "billboard",
              "techniques": [{
                "name": "add",
                "passes": [{
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 2,
                      "blendDst": 1,
                      "blendSrcAlpha": 2,
                      "blendDstAlpha": 1
                    }]
                  },
                  "program": "billboard|vert:vs_main|tinted-fs:add",
                  "depthStencilState": {
                    "depthTest": true,
                    "depthWrite": false
                  },
                  "properties": {
                    "mainTexture": {
                      "value": "grey",
                      "type": 28
                    },
                    "mainTiling_Offset": {
                      "value": [1, 1, 0, 0],
                      "type": 16
                    },
                    "tintColor": {
                      "value": [0.5, 0.5, 0.5, 0.5],
                      "type": 16
                    }
                  }
                }]
              }],
              "shaders": [{
                "name": "billboard|vert:vs_main|tinted-fs:add",
                "hash": 456146524,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 50,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 38
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCLocal",
                      "defines": []
                    }],
                    "samplerTextures": []
                  }
                },
                "defines": [{
                  "name": "CC_USE_HDR",
                  "type": "boolean"
                }],
                "blocks": [{
                  "name": "Constants",
                  "defines": [],
                  "binding": 0,
                  "stageFlags": 1,
                  "members": [{
                    "name": "mainTiling_Offset",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "frameTile_velLenScale",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "scale",
                    "type": 16,
                    "count": 1
                  }]
                }, {
                  "name": "builtin",
                  "defines": [],
                  "binding": 1,
                  "stageFlags": 1,
                  "members": [{
                    "name": "cc_size_rotation",
                    "type": 16,
                    "count": 1
                  }]
                }, {
                  "name": "FragConstants",
                  "defines": [],
                  "binding": 2,
                  "stageFlags": 16,
                  "members": [{
                    "name": "tintColor",
                    "type": 16,
                    "count": 1
                  }]
                }],
                "samplerTextures": [{
                  "name": "mainTexture",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 3
                }],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 1
                }, {
                  "name": "a_color",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 2
                }]
              }]
            }, {
              "name": "clear-stencil",
              "techniques": [{
                "passes": [{
                  "blendState": {
                    "targets": [{
                      "blend": true
                    }]
                  },
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "program": "clear-stencil|sprite-vs:vert|sprite-fs:frag",
                  "depthStencilState": {
                    "depthTest": false,
                    "depthWrite": false
                  }
                }]
              }],
              "shaders": [{
                "name": "clear-stencil|sprite-vs:vert|sprite-fs:frag",
                "hash": 1062464958,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 0,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 0
                  },
                  "globals": {
                    "blocks": [],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [],
                    "samplerTextures": []
                  }
                },
                "defines": [],
                "blocks": [],
                "samplerTextures": [],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }]
              }]
            }, {
              "name": "graphics",
              "techniques": [{
                "passes": [{
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 1,
                      "blendDst": 4,
                      "blendSrcAlpha": 1,
                      "blendDstAlpha": 4
                    }]
                  },
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "program": "graphics|vs:vert|fs:frag",
                  "depthStencilState": {
                    "depthTest": false,
                    "depthWrite": false
                  }
                }]
              }],
              "shaders": [{
                "name": "graphics|vs:vert|fs:frag",
                "hash": 3946667351,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 46,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 0
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCLocal",
                      "defines": []
                    }],
                    "samplerTextures": []
                  }
                },
                "defines": [],
                "blocks": [],
                "samplerTextures": [],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_color",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 1
                }, {
                  "name": "a_dist",
                  "type": 13,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 11,
                  "location": 2
                }]
              }]
            }, {
              "name": "particle-gpu",
              "techniques": [{
                "name": "add",
                "passes": [{
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 2,
                      "blendDst": 1,
                      "blendSrcAlpha": 2,
                      "blendDstAlpha": 1
                    }]
                  },
                  "program": "particle-gpu|particle-vs-gpu:gpvs_main|tinted-fs:add",
                  "depthStencilState": {
                    "depthTest": true,
                    "depthWrite": false
                  },
                  "properties": {
                    "mainTexture": {
                      "value": "grey",
                      "type": 28
                    },
                    "mainTiling_Offset": {
                      "value": [1, 1, 0, 0],
                      "type": 16
                    },
                    "tintColor": {
                      "value": [0.5, 0.5, 0.5, 0.5],
                      "type": 16
                    }
                  }
                }]
              }],
              "shaders": [{
                "name": "particle-gpu|particle-vs-gpu:gpvs_main|tinted-fs:add",
                "hash": 932177378,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 60,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 38
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCLocal",
                      "defines": []
                    }],
                    "samplerTextures": []
                  }
                },
                "defines": [{
                  "name": "CC_RENDER_MODE",
                  "type": "number",
                  "range": [0, 4]
                }, {
                  "name": "COLOR_OVER_TIME_MODULE_ENABLE",
                  "type": "boolean"
                }, {
                  "name": "ROTATION_OVER_TIME_MODULE_ENABLE",
                  "type": "boolean"
                }, {
                  "name": "SIZE_OVER_TIME_MODULE_ENABLE",
                  "type": "boolean"
                }, {
                  "name": "FORCE_OVER_TIME_MODULE_ENABLE",
                  "type": "boolean"
                }, {
                  "name": "VELOCITY_OVER_TIME_MODULE_ENABLE",
                  "type": "boolean"
                }, {
                  "name": "TEXTURE_ANIMATION_MODULE_ENABLE",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_WORLD_SPACE",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_HDR",
                  "type": "boolean"
                }],
                "blocks": [{
                  "name": "Constants",
                  "defines": [],
                  "binding": 0,
                  "stageFlags": 1,
                  "members": [{
                    "name": "mainTiling_Offset",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "frameTile_velLenScale",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "scale",
                    "type": 16,
                    "count": 1
                  }]
                }, {
                  "name": "SampleConstants",
                  "defines": [],
                  "binding": 1,
                  "stageFlags": 1,
                  "members": [{
                    "name": "u_sampleInfo",
                    "type": 16,
                    "count": 1
                  }]
                }, {
                  "name": "TickConstants",
                  "defines": [],
                  "binding": 2,
                  "stageFlags": 1,
                  "members": [{
                    "name": "u_worldRot",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "u_timeDelta",
                    "type": 16,
                    "count": 1
                  }]
                }, {
                  "name": "ColorConstant",
                  "defines": ["COLOR_OVER_TIME_MODULE_ENABLE"],
                  "binding": 3,
                  "stageFlags": 1,
                  "members": [{
                    "name": "u_color_mode",
                    "type": 5,
                    "count": 1
                  }]
                }, {
                  "name": "RotationConstant",
                  "defines": ["ROTATION_OVER_TIME_MODULE_ENABLE"],
                  "binding": 4,
                  "stageFlags": 1,
                  "members": [{
                    "name": "u_rotation_mode",
                    "type": 5,
                    "count": 1
                  }]
                }, {
                  "name": "SizeConstant",
                  "defines": ["SIZE_OVER_TIME_MODULE_ENABLE"],
                  "binding": 5,
                  "stageFlags": 1,
                  "members": [{
                    "name": "u_size_mode",
                    "type": 5,
                    "count": 1
                  }]
                }, {
                  "name": "ForceConstant",
                  "defines": ["FORCE_OVER_TIME_MODULE_ENABLE"],
                  "binding": 6,
                  "stageFlags": 1,
                  "members": [{
                    "name": "u_force_mode",
                    "type": 5,
                    "count": 1
                  }, {
                    "name": "u_force_space",
                    "type": 5,
                    "count": 1
                  }]
                }, {
                  "name": "VelocityConstant",
                  "defines": ["VELOCITY_OVER_TIME_MODULE_ENABLE"],
                  "binding": 7,
                  "stageFlags": 1,
                  "members": [{
                    "name": "u_velocity_mode",
                    "type": 5,
                    "count": 1
                  }, {
                    "name": "u_velocity_space",
                    "type": 5,
                    "count": 1
                  }]
                }, {
                  "name": "AnimationConstant",
                  "defines": ["TEXTURE_ANIMATION_MODULE_ENABLE"],
                  "binding": 8,
                  "stageFlags": 1,
                  "members": [{
                    "name": "u_anim_info",
                    "type": 16,
                    "count": 1
                  }]
                }, {
                  "name": "FragConstants",
                  "defines": [],
                  "binding": 9,
                  "stageFlags": 16,
                  "members": [{
                    "name": "tintColor",
                    "type": 16,
                    "count": 1
                  }]
                }],
                "samplerTextures": [{
                  "name": "color_over_time_tex0",
                  "type": 28,
                  "count": 1,
                  "defines": ["COLOR_OVER_TIME_MODULE_ENABLE"],
                  "stageFlags": 1,
                  "binding": 10
                }, {
                  "name": "rotation_over_time_tex0",
                  "type": 28,
                  "count": 1,
                  "defines": ["ROTATION_OVER_TIME_MODULE_ENABLE"],
                  "stageFlags": 1,
                  "binding": 11
                }, {
                  "name": "size_over_time_tex0",
                  "type": 28,
                  "count": 1,
                  "defines": ["SIZE_OVER_TIME_MODULE_ENABLE"],
                  "stageFlags": 1,
                  "binding": 12
                }, {
                  "name": "force_over_time_tex0",
                  "type": 28,
                  "count": 1,
                  "defines": ["FORCE_OVER_TIME_MODULE_ENABLE"],
                  "stageFlags": 1,
                  "binding": 13
                }, {
                  "name": "velocity_over_time_tex0",
                  "type": 28,
                  "count": 1,
                  "defines": ["VELOCITY_OVER_TIME_MODULE_ENABLE"],
                  "stageFlags": 1,
                  "binding": 14
                }, {
                  "name": "texture_animation_tex0",
                  "type": 28,
                  "count": 1,
                  "defines": ["TEXTURE_ANIMATION_MODULE_ENABLE"],
                  "stageFlags": 1,
                  "binding": 15
                }, {
                  "name": "mainTexture",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 16
                }],
                "attributes": [{
                  "name": "a_position_starttime",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 0
                }, {
                  "name": "a_size_uv",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 1
                }, {
                  "name": "a_rotation_uv",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 2
                }, {
                  "name": "a_color",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 3
                }, {
                  "name": "a_dir_life",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 4
                }, {
                  "name": "a_rndSeed",
                  "type": 13,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 11,
                  "location": 5
                }, {
                  "name": "a_texCoord",
                  "type": 15,
                  "count": 1,
                  "defines": ["CC_RENDER_MODE"],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 6
                }, {
                  "name": "a_texCoord3",
                  "type": 15,
                  "count": 1,
                  "defines": ["CC_RENDER_MODE"],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 7
                }, {
                  "name": "a_normal",
                  "type": 15,
                  "count": 1,
                  "defines": ["CC_RENDER_MODE"],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 8
                }, {
                  "name": "a_color1",
                  "type": 16,
                  "count": 1,
                  "defines": ["CC_RENDER_MODE"],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 9
                }]
              }]
            }, {
              "name": "particle-trail",
              "techniques": [{
                "name": "add",
                "passes": [{
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 2,
                      "blendDst": 1,
                      "blendSrcAlpha": 2,
                      "blendDstAlpha": 1
                    }]
                  },
                  "program": "particle-trail|particle-trail:vs_main|tinted-fs:add",
                  "depthStencilState": {
                    "depthTest": true,
                    "depthWrite": false
                  },
                  "properties": {
                    "mainTexture": {
                      "value": "grey",
                      "type": 28
                    },
                    "mainTiling_Offset": {
                      "value": [1, 1, 0, 0],
                      "type": 16
                    },
                    "frameTile_velLenScale": {
                      "value": [1, 1, 0, 0],
                      "type": 16
                    },
                    "tintColor": {
                      "value": [0.5, 0.5, 0.5, 0.5],
                      "type": 16
                    }
                  }
                }]
              }],
              "shaders": [{
                "name": "particle-trail|particle-trail:vs_main|tinted-fs:add",
                "hash": 293909391,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 49,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 38
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCLocal",
                      "defines": []
                    }],
                    "samplerTextures": []
                  }
                },
                "defines": [{
                  "name": "CC_RENDER_MODE",
                  "type": "number",
                  "range": [0, 4]
                }, {
                  "name": "CC_DRAW_WIRE_FRAME",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_WORLD_SPACE",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_HDR",
                  "type": "boolean"
                }],
                "blocks": [{
                  "name": "Constants",
                  "defines": [],
                  "binding": 0,
                  "stageFlags": 1,
                  "members": [{
                    "name": "mainTiling_Offset",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "frameTile_velLenScale",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "scale",
                    "type": 16,
                    "count": 1
                  }]
                }, {
                  "name": "FragConstants",
                  "defines": [],
                  "binding": 1,
                  "stageFlags": 16,
                  "members": [{
                    "name": "tintColor",
                    "type": 16,
                    "count": 1
                  }]
                }],
                "samplerTextures": [{
                  "name": "mainTexture",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 2
                }],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_texCoord",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 1
                }, {
                  "name": "a_texCoord1",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 2
                }, {
                  "name": "a_texCoord2",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 3
                }, {
                  "name": "a_color",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 4
                }]
              }]
            }, {
              "name": "particle",
              "techniques": [{
                "name": "add",
                "passes": [{
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 2,
                      "blendDst": 1,
                      "blendSrcAlpha": 2,
                      "blendDstAlpha": 1
                    }]
                  },
                  "program": "particle|particle-vs-legacy:lpvs_main|tinted-fs:add",
                  "depthStencilState": {
                    "depthTest": true,
                    "depthWrite": false
                  },
                  "properties": {
                    "mainTexture": {
                      "value": "grey",
                      "type": 28
                    },
                    "mainTiling_Offset": {
                      "value": [1, 1, 0, 0],
                      "type": 16
                    },
                    "tintColor": {
                      "value": [0.5, 0.5, 0.5, 0.5],
                      "type": 16
                    }
                  }
                }]
              }],
              "shaders": [{
                "name": "particle|particle-vs-legacy:lpvs_main|tinted-fs:add",
                "hash": 3802928649,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 49,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 38
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCLocal",
                      "defines": []
                    }],
                    "samplerTextures": []
                  }
                },
                "defines": [{
                  "name": "CC_RENDER_MODE",
                  "type": "number",
                  "range": [0, 4]
                }, {
                  "name": "CC_USE_WORLD_SPACE",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_HDR",
                  "type": "boolean"
                }],
                "blocks": [{
                  "name": "Constants",
                  "defines": [],
                  "binding": 0,
                  "stageFlags": 1,
                  "members": [{
                    "name": "mainTiling_Offset",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "frameTile_velLenScale",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "scale",
                    "type": 16,
                    "count": 1
                  }]
                }, {
                  "name": "FragConstants",
                  "defines": [],
                  "binding": 1,
                  "stageFlags": 16,
                  "members": [{
                    "name": "tintColor",
                    "type": 16,
                    "count": 1
                  }]
                }],
                "samplerTextures": [{
                  "name": "mainTexture",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 2
                }],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_texCoord",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 1
                }, {
                  "name": "a_texCoord1",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 2
                }, {
                  "name": "a_texCoord2",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 3
                }, {
                  "name": "a_color",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 4
                }, {
                  "name": "a_color1",
                  "type": 15,
                  "count": 1,
                  "defines": ["CC_RENDER_MODE"],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 8
                }, {
                  "name": "a_texCoord3",
                  "type": 15,
                  "count": 1,
                  "defines": ["CC_RENDER_MODE"],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 6
                }, {
                  "name": "a_normal",
                  "type": 15,
                  "count": 1,
                  "defines": ["CC_RENDER_MODE"],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 7
                }]
              }]
            }, {
              "name": "spine",
              "techniques": [{
                "passes": [{
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 2,
                      "blendDst": 4,
                      "blendDstAlpha": 4
                    }]
                  },
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "program": "spine|sprite-vs:vert|sprite-fs:frag",
                  "depthStencilState": {
                    "depthTest": false,
                    "depthWrite": false
                  },
                  "properties": {
                    "alphaThreshold": {
                      "value": [0.5],
                      "type": 13
                    }
                  }
                }]
              }],
              "shaders": [{
                "name": "spine|sprite-vs:vert|sprite-fs:frag",
                "hash": 2041444135,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 46,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 1
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCLocal",
                      "defines": ["USE_LOCAL"]
                    }],
                    "samplerTextures": [{
                      "name": "cc_spriteTexture",
                      "defines": []
                    }]
                  }
                },
                "defines": [{
                  "name": "USE_LOCAL",
                  "type": "boolean"
                }, {
                  "name": "TWO_COLORED",
                  "type": "boolean"
                }, {
                  "name": "USE_ALPHA_TEST",
                  "type": "boolean"
                }],
                "blocks": [{
                  "name": "ALPHA_TEST_DATA",
                  "defines": ["USE_ALPHA_TEST"],
                  "binding": 0,
                  "stageFlags": 16,
                  "members": [{
                    "name": "alphaThreshold",
                    "type": 13,
                    "count": 1
                  }]
                }],
                "samplerTextures": [],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 1
                }, {
                  "name": "a_color",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 2
                }, {
                  "name": "a_color2",
                  "type": 16,
                  "count": 1,
                  "defines": ["TWO_COLORED"],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 3
                }]
              }]
            }, {
              "name": "sprite",
              "techniques": [{
                "passes": [{
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 2,
                      "blendDst": 4,
                      "blendDstAlpha": 4
                    }]
                  },
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "program": "sprite|sprite-vs:vert|sprite-fs:frag",
                  "depthStencilState": {
                    "depthTest": false,
                    "depthWrite": false
                  },
                  "properties": {
                    "alphaThreshold": {
                      "value": [0.5],
                      "type": 13
                    }
                  }
                }]
              }],
              "shaders": [{
                "name": "sprite|sprite-vs:vert|sprite-fs:frag",
                "hash": 1142786345,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 46,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 1
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCLocal",
                      "defines": ["USE_LOCAL"]
                    }],
                    "samplerTextures": [{
                      "name": "cc_spriteTexture",
                      "defines": ["USE_TEXTURE"]
                    }]
                  }
                },
                "defines": [{
                  "name": "USE_LOCAL",
                  "type": "boolean"
                }, {
                  "name": "SAMPLE_FROM_RT",
                  "type": "boolean"
                }, {
                  "name": "USE_PIXEL_ALIGNMENT",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_EMBEDDED_ALPHA",
                  "type": "boolean"
                }, {
                  "name": "USE_ALPHA_TEST",
                  "type": "boolean"
                }, {
                  "name": "USE_TEXTURE",
                  "type": "boolean"
                }, {
                  "name": "IS_GRAY",
                  "type": "boolean"
                }],
                "blocks": [{
                  "name": "ALPHA_TEST_DATA",
                  "defines": ["USE_ALPHA_TEST"],
                  "binding": 0,
                  "stageFlags": 16,
                  "members": [{
                    "name": "alphaThreshold",
                    "type": 13,
                    "count": 1
                  }]
                }],
                "samplerTextures": [],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 1
                }, {
                  "name": "a_color",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 2
                }]
              }]
            }, {
              "name": "standard",
              "techniques": [{
                "name": "opaque",
                "passes": [{
                  "program": "standard|standard-vs|standard-fs",
                  "properties": {
                    "tilingOffset": {
                      "value": [1, 1, 0, 0],
                      "type": 16
                    },
                    "mainColor": {
                      "value": [1, 1, 1, 1],
                      "type": 16,
                      "handleInfo": ["albedo", 0, 16]
                    },
                    "albedoScale": {
                      "value": [1, 1, 1],
                      "type": 15,
                      "handleInfo": ["albedoScaleAndCutoff", 0, 15]
                    },
                    "alphaThreshold": {
                      "value": [0.5],
                      "type": 13,
                      "handleInfo": ["albedoScaleAndCutoff", 3, 13]
                    },
                    "occlusion": {
                      "value": [1],
                      "type": 13,
                      "handleInfo": ["pbrParams", 0, 13]
                    },
                    "roughness": {
                      "value": [0.8],
                      "type": 13,
                      "handleInfo": ["pbrParams", 1, 13]
                    },
                    "metallic": {
                      "value": [0.6],
                      "type": 13,
                      "handleInfo": ["pbrParams", 2, 13]
                    },
                    "normalStrenth": {
                      "value": [1],
                      "type": 13,
                      "handleInfo": ["pbrParams", 3, 13]
                    },
                    "emissive": {
                      "value": [0, 0, 0, 1],
                      "type": 16
                    },
                    "emissiveScale": {
                      "value": [1, 1, 1],
                      "type": 15,
                      "handleInfo": ["emissiveScaleParam", 0, 15]
                    },
                    "mainTexture": {
                      "value": "grey",
                      "type": 28,
                      "handleInfo": ["albedoMap", 0, 28]
                    },
                    "normalMap": {
                      "value": "normal",
                      "type": 28
                    },
                    "pbrMap": {
                      "value": "grey",
                      "type": 28
                    },
                    "metallicRoughnessMap": {
                      "value": "grey",
                      "type": 28
                    },
                    "occlusionMap": {
                      "value": "white",
                      "type": 28
                    },
                    "emissiveMap": {
                      "value": "grey",
                      "type": 28
                    },
                    "albedo": {
                      "type": 16,
                      "value": [1, 1, 1, 1]
                    },
                    "albedoScaleAndCutoff": {
                      "type": 16,
                      "value": [1, 1, 1, 0.5]
                    },
                    "pbrParams": {
                      "type": 16,
                      "value": [1, 0.8, 0.6, 1]
                    },
                    "emissiveScaleParam": {
                      "type": 16,
                      "value": [1, 1, 1, 0]
                    },
                    "albedoMap": {
                      "type": 28,
                      "value": "grey"
                    }
                  }
                }, {
                  "phase": "deferred",
                  "propertyIndex": 0,
                  "blendState": {
                    "targets": [{
                      "blend": false
                    }, {
                      "blend": false
                    }, {
                      "blend": false
                    }, {
                      "blend": false
                    }]
                  },
                  "program": "standard|standard-vs|standard-fs",
                  "properties": {
                    "tilingOffset": {
                      "value": [1, 1, 0, 0],
                      "type": 16
                    },
                    "mainColor": {
                      "value": [1, 1, 1, 1],
                      "type": 16,
                      "handleInfo": ["albedo", 0, 16]
                    },
                    "albedoScale": {
                      "value": [1, 1, 1],
                      "type": 15,
                      "handleInfo": ["albedoScaleAndCutoff", 0, 15]
                    },
                    "alphaThreshold": {
                      "value": [0.5],
                      "type": 13,
                      "handleInfo": ["albedoScaleAndCutoff", 3, 13]
                    },
                    "occlusion": {
                      "value": [1],
                      "type": 13,
                      "handleInfo": ["pbrParams", 0, 13]
                    },
                    "roughness": {
                      "value": [0.8],
                      "type": 13,
                      "handleInfo": ["pbrParams", 1, 13]
                    },
                    "metallic": {
                      "value": [0.6],
                      "type": 13,
                      "handleInfo": ["pbrParams", 2, 13]
                    },
                    "normalStrenth": {
                      "value": [1],
                      "type": 13,
                      "handleInfo": ["pbrParams", 3, 13]
                    },
                    "emissive": {
                      "value": [0, 0, 0, 1],
                      "type": 16
                    },
                    "emissiveScale": {
                      "value": [1, 1, 1],
                      "type": 15,
                      "handleInfo": ["emissiveScaleParam", 0, 15]
                    },
                    "mainTexture": {
                      "value": "grey",
                      "type": 28,
                      "handleInfo": ["albedoMap", 0, 28]
                    },
                    "normalMap": {
                      "value": "normal",
                      "type": 28
                    },
                    "pbrMap": {
                      "value": "grey",
                      "type": 28
                    },
                    "metallicRoughnessMap": {
                      "value": "grey",
                      "type": 28
                    },
                    "occlusionMap": {
                      "value": "white",
                      "type": 28
                    },
                    "emissiveMap": {
                      "value": "grey",
                      "type": 28
                    },
                    "albedo": {
                      "type": 16,
                      "value": [1, 1, 1, 1]
                    },
                    "albedoScaleAndCutoff": {
                      "type": 16,
                      "value": [1, 1, 1, 0.5]
                    },
                    "pbrParams": {
                      "type": 16,
                      "value": [1, 0.8, 0.6, 1]
                    },
                    "emissiveScaleParam": {
                      "type": 16,
                      "value": [1, 1, 1, 0]
                    },
                    "albedoMap": {
                      "type": 28,
                      "value": "grey"
                    }
                  }
                }, {
                  "phase": "forward-add",
                  "propertyIndex": 0,
                  "embeddedMacros": {
                    "CC_FORWARD_ADD": true
                  },
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 1,
                      "blendDst": 1,
                      "blendSrcAlpha": 0,
                      "blendDstAlpha": 1
                    }]
                  },
                  "program": "standard|standard-vs|standard-fs",
                  "depthStencilState": {
                    "depthFunc": 2,
                    "depthTest": true,
                    "depthWrite": false
                  },
                  "properties": {
                    "tilingOffset": {
                      "value": [1, 1, 0, 0],
                      "type": 16
                    },
                    "mainColor": {
                      "value": [1, 1, 1, 1],
                      "type": 16,
                      "handleInfo": ["albedo", 0, 16]
                    },
                    "albedoScale": {
                      "value": [1, 1, 1],
                      "type": 15,
                      "handleInfo": ["albedoScaleAndCutoff", 0, 15]
                    },
                    "alphaThreshold": {
                      "value": [0.5],
                      "type": 13,
                      "handleInfo": ["albedoScaleAndCutoff", 3, 13]
                    },
                    "occlusion": {
                      "value": [1],
                      "type": 13,
                      "handleInfo": ["pbrParams", 0, 13]
                    },
                    "roughness": {
                      "value": [0.8],
                      "type": 13,
                      "handleInfo": ["pbrParams", 1, 13]
                    },
                    "metallic": {
                      "value": [0.6],
                      "type": 13,
                      "handleInfo": ["pbrParams", 2, 13]
                    },
                    "normalStrenth": {
                      "value": [1],
                      "type": 13,
                      "handleInfo": ["pbrParams", 3, 13]
                    },
                    "emissive": {
                      "value": [0, 0, 0, 1],
                      "type": 16
                    },
                    "emissiveScale": {
                      "value": [1, 1, 1],
                      "type": 15,
                      "handleInfo": ["emissiveScaleParam", 0, 15]
                    },
                    "mainTexture": {
                      "value": "grey",
                      "type": 28,
                      "handleInfo": ["albedoMap", 0, 28]
                    },
                    "normalMap": {
                      "value": "normal",
                      "type": 28
                    },
                    "pbrMap": {
                      "value": "grey",
                      "type": 28
                    },
                    "metallicRoughnessMap": {
                      "value": "grey",
                      "type": 28
                    },
                    "occlusionMap": {
                      "value": "white",
                      "type": 28
                    },
                    "emissiveMap": {
                      "value": "grey",
                      "type": 28
                    },
                    "albedo": {
                      "type": 16,
                      "value": [1, 1, 1, 1]
                    },
                    "albedoScaleAndCutoff": {
                      "type": 16,
                      "value": [1, 1, 1, 0.5]
                    },
                    "pbrParams": {
                      "type": 16,
                      "value": [1, 0.8, 0.6, 1]
                    },
                    "emissiveScaleParam": {
                      "type": 16,
                      "value": [1, 1, 1, 0]
                    },
                    "albedoMap": {
                      "type": 28,
                      "value": "grey"
                    }
                  }
                }, {
                  "phase": "shadow-caster",
                  "propertyIndex": 0,
                  "rasterizerState": {
                    "cullMode": 1
                  },
                  "program": "standard|shadow-caster-vs:vert|shadow-caster-fs:frag",
                  "properties": {
                    "tilingOffset": {
                      "value": [1, 1, 0, 0],
                      "type": 16
                    },
                    "mainColor": {
                      "value": [1, 1, 1, 1],
                      "type": 16,
                      "handleInfo": ["albedo", 0, 16]
                    },
                    "albedoScale": {
                      "value": [1, 1, 1],
                      "type": 15,
                      "handleInfo": ["albedoScaleAndCutoff", 0, 15]
                    },
                    "alphaThreshold": {
                      "value": [0.5],
                      "type": 13,
                      "handleInfo": ["albedoScaleAndCutoff", 3, 13]
                    },
                    "occlusion": {
                      "value": [1],
                      "type": 13,
                      "handleInfo": ["pbrParams", 0, 13]
                    },
                    "roughness": {
                      "value": [0.8],
                      "type": 13,
                      "handleInfo": ["pbrParams", 1, 13]
                    },
                    "metallic": {
                      "value": [0.6],
                      "type": 13,
                      "handleInfo": ["pbrParams", 2, 13]
                    },
                    "normalStrenth": {
                      "value": [1],
                      "type": 13,
                      "handleInfo": ["pbrParams", 3, 13]
                    },
                    "emissive": {
                      "value": [0, 0, 0, 1],
                      "type": 16
                    },
                    "emissiveScale": {
                      "value": [1, 1, 1],
                      "type": 15,
                      "handleInfo": ["emissiveScaleParam", 0, 15]
                    },
                    "mainTexture": {
                      "value": "grey",
                      "type": 28,
                      "handleInfo": ["albedoMap", 0, 28]
                    },
                    "albedo": {
                      "type": 16,
                      "value": [1, 1, 1, 1]
                    },
                    "albedoScaleAndCutoff": {
                      "type": 16,
                      "value": [1, 1, 1, 0.5]
                    },
                    "pbrParams": {
                      "type": 16,
                      "value": [1, 0.8, 0.6, 1]
                    },
                    "emissiveScaleParam": {
                      "type": 16,
                      "value": [1, 1, 1, 0]
                    },
                    "albedoMap": {
                      "type": 28,
                      "value": "grey"
                    }
                  }
                }]
              }],
              "shaders": [{
                "name": "standard|standard-vs|standard-fs",
                "hash": 632993342,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 216,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 59
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }, {
                      "name": "CCShadow",
                      "defines": []
                    }],
                    "samplerTextures": [{
                      "name": "cc_shadowMap",
                      "defines": ["CC_RECEIVE_SHADOW"]
                    }, {
                      "name": "cc_spotLightingMap",
                      "defines": ["CC_RECEIVE_SHADOW"]
                    }, {
                      "name": "cc_environment",
                      "defines": ["CC_USE_IBL"]
                    }]
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCMorph",
                      "defines": ["CC_USE_MORPH"]
                    }, {
                      "name": "CCSkinningTexture",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCSkinningAnimation",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCSkinning",
                      "defines": ["CC_USE_SKINNING", "!CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCLocalBatched",
                      "defines": ["!USE_INSTANCING", "USE_BATCHING"]
                    }, {
                      "name": "CCLocal",
                      "defines": ["!USE_INSTANCING", "!USE_BATCHING"]
                    }, {
                      "name": "CCForwardLight",
                      "defines": ["CC_FORWARD_ADD"]
                    }],
                    "samplerTextures": [{
                      "name": "cc_PositionDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_POSITION"]
                    }, {
                      "name": "cc_NormalDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_NORMAL"]
                    }, {
                      "name": "cc_TangentDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_TANGENT"]
                    }, {
                      "name": "cc_jointTexture",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "cc_lightingMap",
                      "defines": ["USE_LIGHTMAP", "!USE_BATCHING", "!CC_FORWARD_ADD"]
                    }]
                  }
                },
                "defines": [{
                  "name": "CC_USE_MORPH",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_COUNT",
                  "type": "number",
                  "range": [2, 8]
                }, {
                  "name": "CC_MORPH_PRECOMPUTED",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_POSITION",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_NORMAL",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_TANGENT",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_SKINNING",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_BAKED_ANIMATION",
                  "type": "boolean"
                }, {
                  "name": "USE_INSTANCING",
                  "type": "boolean"
                }, {
                  "name": "USE_BATCHING",
                  "type": "boolean"
                }, {
                  "name": "USE_LIGHTMAP",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_FOG",
                  "type": "number",
                  "range": [0, 4]
                }, {
                  "name": "CC_FORWARD_ADD",
                  "type": "boolean"
                }, {
                  "name": "CC_RECEIVE_SHADOW",
                  "type": "boolean"
                }, {
                  "name": "USE_VERTEX_COLOR",
                  "type": "boolean"
                }, {
                  "name": "USE_NORMAL_MAP",
                  "type": "boolean"
                }, {
                  "name": "HAS_SECOND_UV",
                  "type": "boolean"
                }, {
                  "name": "SAMPLE_FROM_RT",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_IBL",
                  "type": "number",
                  "range": [0, 2]
                }, {
                  "name": "CC_USE_HDR",
                  "type": "boolean"
                }, {
                  "name": "USE_ALBEDO_MAP",
                  "type": "boolean"
                }, {
                  "name": "ALBEDO_UV",
                  "type": "string",
                  "options": ["v_uv", "v_uv1"]
                }, {
                  "name": "NORMAL_UV",
                  "type": "string",
                  "options": ["v_uv", "v_uv1"]
                }, {
                  "name": "PBR_UV",
                  "type": "string",
                  "options": ["v_uv", "v_uv1"]
                }, {
                  "name": "USE_PBR_MAP",
                  "type": "boolean"
                }, {
                  "name": "USE_METALLIC_ROUGHNESS_MAP",
                  "type": "boolean"
                }, {
                  "name": "USE_OCCLUSION_MAP",
                  "type": "boolean"
                }, {
                  "name": "USE_EMISSIVE_MAP",
                  "type": "boolean"
                }, {
                  "name": "EMISSIVE_UV",
                  "type": "string",
                  "options": ["v_uv", "v_uv1"]
                }, {
                  "name": "USE_ALPHA_TEST",
                  "type": "boolean"
                }, {
                  "name": "ALPHA_TEST_CHANNEL",
                  "type": "string",
                  "options": ["a", "r"]
                }, {
                  "name": "CC_PIPELINE_TYPE",
                  "type": "number",
                  "range": [0, 1]
                }],
                "blocks": [{
                  "name": "Constants",
                  "defines": [],
                  "binding": 0,
                  "stageFlags": 17,
                  "members": [{
                    "name": "tilingOffset",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "albedo",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "albedoScaleAndCutoff",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "pbrParams",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "emissive",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "emissiveScaleParam",
                    "type": 16,
                    "count": 1
                  }]
                }],
                "samplerTextures": [{
                  "name": "albedoMap",
                  "type": 28,
                  "count": 1,
                  "defines": ["USE_ALBEDO_MAP"],
                  "stageFlags": 16,
                  "binding": 1
                }, {
                  "name": "normalMap",
                  "type": 28,
                  "count": 1,
                  "defines": ["USE_NORMAL_MAP"],
                  "stageFlags": 16,
                  "binding": 2
                }, {
                  "name": "pbrMap",
                  "type": 28,
                  "count": 1,
                  "defines": ["USE_PBR_MAP"],
                  "stageFlags": 16,
                  "binding": 3
                }, {
                  "name": "metallicRoughnessMap",
                  "type": 28,
                  "count": 1,
                  "defines": ["USE_METALLIC_ROUGHNESS_MAP"],
                  "stageFlags": 16,
                  "binding": 4
                }, {
                  "name": "occlusionMap",
                  "type": 28,
                  "count": 1,
                  "defines": ["USE_OCCLUSION_MAP"],
                  "stageFlags": 16,
                  "binding": 5
                }, {
                  "name": "emissiveMap",
                  "type": 28,
                  "count": 1,
                  "defines": ["USE_EMISSIVE_MAP"],
                  "stageFlags": 16,
                  "binding": 6
                }],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_normal",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 1
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 2
                }, {
                  "name": "a_tangent",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 3
                }, {
                  "name": "a_vertexId",
                  "type": 13,
                  "count": 1,
                  "defines": ["CC_USE_MORPH"],
                  "stageFlags": 1,
                  "format": 11,
                  "location": 6
                }, {
                  "name": "a_joints",
                  "type": "u32vec4",
                  "count": 1,
                  "defines": ["CC_USE_SKINNING"],
                  "stageFlags": 1,
                  "location": 4
                }, {
                  "name": "a_weights",
                  "type": 16,
                  "count": 1,
                  "defines": ["CC_USE_SKINNING"],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 5
                }, {
                  "name": "a_jointAnimInfo",
                  "type": 16,
                  "count": 1,
                  "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION", "USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 7
                }, {
                  "name": "a_matWorld0",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 8
                }, {
                  "name": "a_matWorld1",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 9
                }, {
                  "name": "a_matWorld2",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 10
                }, {
                  "name": "a_lightingMapUVParam",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING", "USE_LIGHTMAP"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 11
                }, {
                  "name": "a_dyn_batch_id",
                  "type": 13,
                  "count": 1,
                  "defines": ["!USE_INSTANCING", "USE_BATCHING"],
                  "stageFlags": 1,
                  "format": 11,
                  "location": 12
                }, {
                  "name": "a_color",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_VERTEX_COLOR"],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 13
                }, {
                  "name": "a_texCoord1",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 14
                }]
              }, {
                "name": "standard|shadow-caster-vs:vert|shadow-caster-fs:frag",
                "hash": 1518991842,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 179,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 22
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCShadow",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCMorph",
                      "defines": ["CC_USE_MORPH"]
                    }, {
                      "name": "CCSkinningTexture",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCSkinningAnimation",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCSkinning",
                      "defines": ["CC_USE_SKINNING", "!CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCLocalBatched",
                      "defines": ["!USE_INSTANCING", "USE_BATCHING"]
                    }, {
                      "name": "CCLocal",
                      "defines": ["!USE_INSTANCING", "!USE_BATCHING"]
                    }],
                    "samplerTextures": [{
                      "name": "cc_PositionDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_POSITION"]
                    }, {
                      "name": "cc_NormalDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_NORMAL"]
                    }, {
                      "name": "cc_TangentDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_TANGENT"]
                    }, {
                      "name": "cc_jointTexture",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }]
                  }
                },
                "defines": [{
                  "name": "CC_USE_MORPH",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_COUNT",
                  "type": "number",
                  "range": [2, 8]
                }, {
                  "name": "CC_MORPH_PRECOMPUTED",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_POSITION",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_NORMAL",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_TANGENT",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_SKINNING",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_BAKED_ANIMATION",
                  "type": "boolean"
                }, {
                  "name": "USE_INSTANCING",
                  "type": "boolean"
                }, {
                  "name": "USE_BATCHING",
                  "type": "boolean"
                }, {
                  "name": "USE_LIGHTMAP",
                  "type": "boolean"
                }, {
                  "name": "HAS_SECOND_UV",
                  "type": "boolean"
                }, {
                  "name": "USE_ALBEDO_MAP",
                  "type": "boolean"
                }, {
                  "name": "ALBEDO_UV",
                  "type": "string",
                  "options": ["v_uv", "v_uv1"]
                }, {
                  "name": "USE_ALPHA_TEST",
                  "type": "boolean"
                }, {
                  "name": "ALPHA_TEST_CHANNEL",
                  "type": "string",
                  "options": ["a", "r"]
                }],
                "blocks": [{
                  "name": "Constants",
                  "defines": [],
                  "binding": 0,
                  "stageFlags": 17,
                  "members": [{
                    "name": "tilingOffset",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "albedo",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "albedoScaleAndCutoff",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "pbrParams",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "emissive",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "emissiveScaleParam",
                    "type": 16,
                    "count": 1
                  }]
                }],
                "samplerTextures": [{
                  "name": "albedoMap",
                  "type": 28,
                  "count": 1,
                  "defines": ["USE_ALBEDO_MAP"],
                  "stageFlags": 16,
                  "binding": 1
                }],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_normal",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 1
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 2
                }, {
                  "name": "a_tangent",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 3
                }, {
                  "name": "a_vertexId",
                  "type": 13,
                  "count": 1,
                  "defines": ["CC_USE_MORPH"],
                  "stageFlags": 1,
                  "format": 11,
                  "location": 6
                }, {
                  "name": "a_joints",
                  "type": "u32vec4",
                  "count": 1,
                  "defines": ["CC_USE_SKINNING"],
                  "stageFlags": 1,
                  "location": 4
                }, {
                  "name": "a_weights",
                  "type": 16,
                  "count": 1,
                  "defines": ["CC_USE_SKINNING"],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 5
                }, {
                  "name": "a_jointAnimInfo",
                  "type": 16,
                  "count": 1,
                  "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION", "USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 7
                }, {
                  "name": "a_matWorld0",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 8
                }, {
                  "name": "a_matWorld1",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 9
                }, {
                  "name": "a_matWorld2",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 10
                }, {
                  "name": "a_lightingMapUVParam",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING", "USE_LIGHTMAP"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 11
                }, {
                  "name": "a_dyn_batch_id",
                  "type": 13,
                  "count": 1,
                  "defines": ["!USE_INSTANCING", "USE_BATCHING"],
                  "stageFlags": 1,
                  "format": 11,
                  "location": 12
                }, {
                  "name": "a_texCoord1",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 13
                }]
              }]
            }, {
              "name": "terrain",
              "techniques": [{
                "name": "opaque",
                "passes": [{
                  "program": "terrain|terrain-vs|terrain-fs",
                  "properties": {
                    "UVScale": {
                      "value": [1, 1, 1, 1],
                      "type": 16
                    },
                    "lightMapUVParam": {
                      "value": [0, 0, 0, 0],
                      "type": 16
                    },
                    "metallic": {
                      "value": [0, 0, 0, 0],
                      "type": 16
                    },
                    "roughness": {
                      "value": [1, 1, 1, 1],
                      "type": 16
                    },
                    "weightMap": {
                      "value": "black",
                      "type": 28
                    },
                    "detailMap0": {
                      "value": "grey",
                      "type": 28
                    },
                    "detailMap1": {
                      "value": "grey",
                      "type": 28
                    },
                    "detailMap2": {
                      "value": "grey",
                      "type": 28
                    },
                    "detailMap3": {
                      "value": "grey",
                      "type": 28
                    },
                    "normalMap0": {
                      "value": "normal",
                      "type": 28
                    },
                    "normalMap1": {
                      "value": "normal",
                      "type": 28
                    },
                    "normalMap2": {
                      "value": "normal",
                      "type": 28
                    },
                    "normalMap3": {
                      "value": "normal",
                      "type": 28
                    },
                    "lightMap": {
                      "value": "grey",
                      "type": 28
                    }
                  }
                }, {
                  "phase": "deferred",
                  "propertyIndex": 0,
                  "blendState": {
                    "targets": [{
                      "blend": false
                    }, {
                      "blend": false
                    }, {
                      "blend": false
                    }, {
                      "blend": false
                    }]
                  },
                  "program": "terrain|terrain-vs|terrain-fs",
                  "properties": {
                    "UVScale": {
                      "value": [1, 1, 1, 1],
                      "type": 16
                    },
                    "lightMapUVParam": {
                      "value": [0, 0, 0, 0],
                      "type": 16
                    },
                    "metallic": {
                      "value": [0, 0, 0, 0],
                      "type": 16
                    },
                    "roughness": {
                      "value": [1, 1, 1, 1],
                      "type": 16
                    },
                    "weightMap": {
                      "value": "black",
                      "type": 28
                    },
                    "detailMap0": {
                      "value": "grey",
                      "type": 28
                    },
                    "detailMap1": {
                      "value": "grey",
                      "type": 28
                    },
                    "detailMap2": {
                      "value": "grey",
                      "type": 28
                    },
                    "detailMap3": {
                      "value": "grey",
                      "type": 28
                    },
                    "normalMap0": {
                      "value": "normal",
                      "type": 28
                    },
                    "normalMap1": {
                      "value": "normal",
                      "type": 28
                    },
                    "normalMap2": {
                      "value": "normal",
                      "type": 28
                    },
                    "normalMap3": {
                      "value": "normal",
                      "type": 28
                    },
                    "lightMap": {
                      "value": "grey",
                      "type": 28
                    }
                  }
                }, {
                  "phase": "forward-add",
                  "propertyIndex": 0,
                  "embeddedMacros": {
                    "CC_FORWARD_ADD": true
                  },
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 1,
                      "blendDst": 1,
                      "blendSrcAlpha": 0,
                      "blendDstAlpha": 1
                    }]
                  },
                  "program": "terrain|terrain-vs|terrain-fs",
                  "depthStencilState": {
                    "depthFunc": 2,
                    "depthTest": true,
                    "depthWrite": false
                  },
                  "properties": {
                    "UVScale": {
                      "value": [1, 1, 1, 1],
                      "type": 16
                    },
                    "lightMapUVParam": {
                      "value": [0, 0, 0, 0],
                      "type": 16
                    },
                    "metallic": {
                      "value": [0, 0, 0, 0],
                      "type": 16
                    },
                    "roughness": {
                      "value": [1, 1, 1, 1],
                      "type": 16
                    },
                    "weightMap": {
                      "value": "black",
                      "type": 28
                    },
                    "detailMap0": {
                      "value": "grey",
                      "type": 28
                    },
                    "detailMap1": {
                      "value": "grey",
                      "type": 28
                    },
                    "detailMap2": {
                      "value": "grey",
                      "type": 28
                    },
                    "detailMap3": {
                      "value": "grey",
                      "type": 28
                    },
                    "normalMap0": {
                      "value": "normal",
                      "type": 28
                    },
                    "normalMap1": {
                      "value": "normal",
                      "type": 28
                    },
                    "normalMap2": {
                      "value": "normal",
                      "type": 28
                    },
                    "normalMap3": {
                      "value": "normal",
                      "type": 28
                    },
                    "lightMap": {
                      "value": "grey",
                      "type": 28
                    }
                  }
                }, {
                  "phase": "shadow-add",
                  "propertyIndex": 0,
                  "rasterizerState": {
                    "cullMode": 2
                  },
                  "program": "terrain|shadow-caster-vs:vert|shadow-caster-fs:frag"
                }]
              }],
              "shaders": [{
                "name": "terrain|terrain-vs|terrain-fs",
                "hash": 2532494361,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 64,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 55
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }, {
                      "name": "CCShadow",
                      "defines": []
                    }],
                    "samplerTextures": [{
                      "name": "cc_shadowMap",
                      "defines": ["CC_RECEIVE_SHADOW"]
                    }, {
                      "name": "cc_spotLightingMap",
                      "defines": ["CC_RECEIVE_SHADOW"]
                    }, {
                      "name": "cc_environment",
                      "defines": ["CC_USE_IBL"]
                    }]
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCLocal",
                      "defines": []
                    }, {
                      "name": "CCForwardLight",
                      "defines": ["CC_FORWARD_ADD"]
                    }],
                    "samplerTextures": [{
                      "name": "cc_lightingMap",
                      "defines": ["USE_LIGHTMAP", "!USE_BATCHING", "!CC_FORWARD_ADD"]
                    }]
                  }
                },
                "defines": [{
                  "name": "CC_USE_FOG",
                  "type": "number",
                  "range": [0, 4]
                }, {
                  "name": "CC_FORWARD_ADD",
                  "type": "boolean"
                }, {
                  "name": "CC_RECEIVE_SHADOW",
                  "type": "boolean"
                }, {
                  "name": "USE_NORMALMAP",
                  "type": "boolean"
                }, {
                  "name": "USE_LIGHTMAP",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_IBL",
                  "type": "number",
                  "range": [0, 2]
                }, {
                  "name": "USE_BATCHING",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_HDR",
                  "type": "boolean"
                }, {
                  "name": "LAYERS",
                  "type": "number",
                  "range": [0, 4]
                }, {
                  "name": "USE_PBR",
                  "type": "boolean"
                }, {
                  "name": "CC_PIPELINE_TYPE",
                  "type": "number",
                  "range": [0, 1]
                }],
                "blocks": [{
                  "name": "TexCoords",
                  "defines": [],
                  "binding": 0,
                  "stageFlags": 1,
                  "members": [{
                    "name": "UVScale",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "lightMapUVParam",
                    "type": 16,
                    "count": 1
                  }]
                }, {
                  "name": "PbrParams",
                  "defines": [],
                  "binding": 1,
                  "stageFlags": 16,
                  "members": [{
                    "name": "metallic",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "roughness",
                    "type": 16,
                    "count": 1
                  }]
                }],
                "samplerTextures": [{
                  "name": "weightMap",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 2
                }, {
                  "name": "detailMap0",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 3
                }, {
                  "name": "detailMap1",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 4
                }, {
                  "name": "detailMap2",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 5
                }, {
                  "name": "detailMap3",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 6
                }, {
                  "name": "normalMap0",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 7
                }, {
                  "name": "normalMap1",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 8
                }, {
                  "name": "normalMap2",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 9
                }, {
                  "name": "normalMap3",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 10
                }, {
                  "name": "lightMap",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 11
                }],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_normal",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 1
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 2
                }]
              }, {
                "name": "terrain|shadow-caster-vs:vert|shadow-caster-fs:frag",
                "hash": 3874167763,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 62,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 0
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }, {
                      "name": "CCShadow",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCLocal",
                      "defines": []
                    }],
                    "samplerTextures": []
                  }
                },
                "defines": [],
                "blocks": [],
                "samplerTextures": [],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_normal",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 1
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 2
                }]
              }]
            }, {
              "name": "unlit",
              "techniques": [{
                "name": "opaque",
                "passes": [{
                  "program": "unlit|unlit-vs:vert|unlit-fs:frag",
                  "properties": {
                    "mainTexture": {
                      "value": "grey",
                      "type": 28
                    },
                    "tilingOffset": {
                      "value": [1, 1, 0, 0],
                      "type": 16
                    },
                    "mainColor": {
                      "value": [1, 1, 1, 1],
                      "type": 16
                    },
                    "colorScale": {
                      "value": [1, 1, 1],
                      "type": 15,
                      "handleInfo": ["colorScaleAndCutoff", 0, 15]
                    },
                    "alphaThreshold": {
                      "value": [0.5],
                      "type": 13,
                      "handleInfo": ["colorScaleAndCutoff", 3, 13]
                    },
                    "color": {
                      "type": 16,
                      "handleInfo": ["mainColor", 0, 16]
                    },
                    "colorScaleAndCutoff": {
                      "type": 16,
                      "value": [1, 1, 1, 0.5]
                    }
                  }
                }]
              }],
              "shaders": [{
                "name": "unlit|unlit-vs:vert|unlit-fs:frag",
                "hash": 3579616855,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 195,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 39
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCMorph",
                      "defines": ["CC_USE_MORPH"]
                    }, {
                      "name": "CCSkinningTexture",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCSkinningAnimation",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCSkinning",
                      "defines": ["CC_USE_SKINNING", "!CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCLocalBatched",
                      "defines": ["!USE_INSTANCING", "USE_BATCHING"]
                    }, {
                      "name": "CCLocal",
                      "defines": ["!USE_INSTANCING", "!USE_BATCHING"]
                    }],
                    "samplerTextures": [{
                      "name": "cc_PositionDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_POSITION"]
                    }, {
                      "name": "cc_NormalDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_NORMAL"]
                    }, {
                      "name": "cc_TangentDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_TANGENT"]
                    }, {
                      "name": "cc_jointTexture",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }]
                  }
                },
                "defines": [{
                  "name": "CC_USE_MORPH",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_COUNT",
                  "type": "number",
                  "range": [2, 8]
                }, {
                  "name": "CC_MORPH_PRECOMPUTED",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_POSITION",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_NORMAL",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_TANGENT",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_SKINNING",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_BAKED_ANIMATION",
                  "type": "boolean"
                }, {
                  "name": "USE_INSTANCING",
                  "type": "boolean"
                }, {
                  "name": "USE_BATCHING",
                  "type": "boolean"
                }, {
                  "name": "USE_LIGHTMAP",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_FOG",
                  "type": "number",
                  "range": [0, 4]
                }, {
                  "name": "CC_FORWARD_ADD",
                  "type": "boolean"
                }, {
                  "name": "USE_VERTEX_COLOR",
                  "type": "boolean"
                }, {
                  "name": "USE_TEXTURE",
                  "type": "boolean"
                }, {
                  "name": "SAMPLE_FROM_RT",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_HDR",
                  "type": "boolean"
                }, {
                  "name": "USE_ALPHA_TEST",
                  "type": "boolean"
                }, {
                  "name": "ALPHA_TEST_CHANNEL",
                  "type": "string",
                  "options": ["a", "r", "g", "b"]
                }],
                "blocks": [{
                  "name": "TexCoords",
                  "defines": ["USE_TEXTURE"],
                  "binding": 0,
                  "stageFlags": 1,
                  "members": [{
                    "name": "tilingOffset",
                    "type": 16,
                    "count": 1
                  }]
                }, {
                  "name": "Constant",
                  "defines": [],
                  "binding": 1,
                  "stageFlags": 16,
                  "members": [{
                    "name": "mainColor",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "colorScaleAndCutoff",
                    "type": 16,
                    "count": 1
                  }]
                }],
                "samplerTextures": [{
                  "name": "mainTexture",
                  "type": 28,
                  "count": 1,
                  "defines": ["USE_TEXTURE"],
                  "stageFlags": 16,
                  "binding": 2
                }],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_normal",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 1
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 2
                }, {
                  "name": "a_tangent",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 3
                }, {
                  "name": "a_vertexId",
                  "type": 13,
                  "count": 1,
                  "defines": ["CC_USE_MORPH"],
                  "stageFlags": 1,
                  "format": 11,
                  "location": 6
                }, {
                  "name": "a_joints",
                  "type": "u32vec4",
                  "count": 1,
                  "defines": ["CC_USE_SKINNING"],
                  "stageFlags": 1,
                  "location": 4
                }, {
                  "name": "a_weights",
                  "type": 16,
                  "count": 1,
                  "defines": ["CC_USE_SKINNING"],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 5
                }, {
                  "name": "a_jointAnimInfo",
                  "type": 16,
                  "count": 1,
                  "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION", "USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 7
                }, {
                  "name": "a_matWorld0",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 8
                }, {
                  "name": "a_matWorld1",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 9
                }, {
                  "name": "a_matWorld2",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 10
                }, {
                  "name": "a_lightingMapUVParam",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING", "USE_LIGHTMAP"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 11
                }, {
                  "name": "a_dyn_batch_id",
                  "type": 13,
                  "count": 1,
                  "defines": ["!USE_INSTANCING", "USE_BATCHING"],
                  "stageFlags": 1,
                  "format": 11,
                  "location": 12
                }, {
                  "name": "a_color",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_VERTEX_COLOR"],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 13
                }]
              }]
            }, {
              "name": "deferred-lighting",
              "techniques": [{
                "passes": [{
                  "phase": "deferred-lighting",
                  "program": "deferred-lighting|lighting-vs|lighting-fs",
                  "depthStencilState": {
                    "depthFunc": 4,
                    "depthTest": true,
                    "depthWrite": false
                  }
                }]
              }],
              "shaders": [{
                "name": "deferred-lighting|lighting-vs|lighting-fs",
                "hash": 4181944545,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 37,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 53
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }, {
                      "name": "CCShadow",
                      "defines": []
                    }],
                    "samplerTextures": [{
                      "name": "cc_shadowMap",
                      "defines": ["CC_RECEIVE_SHADOW"]
                    }, {
                      "name": "cc_spotLightingMap",
                      "defines": ["CC_RECEIVE_SHADOW"]
                    }, {
                      "name": "cc_environment",
                      "defines": ["CC_USE_IBL"]
                    }, {
                      "name": "cc_gbuffer_albedoMap",
                      "defines": []
                    }, {
                      "name": "cc_gbuffer_positionMap",
                      "defines": []
                    }, {
                      "name": "cc_gbuffer_normalMap",
                      "defines": []
                    }, {
                      "name": "cc_gbuffer_emissiveMap",
                      "defines": []
                    }]
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCForwardLight",
                      "defines": []
                    }],
                    "samplerTextures": []
                  }
                },
                "defines": [{
                  "name": "CC_RECEIVE_SHADOW",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_IBL",
                  "type": "number",
                  "range": [0, 2]
                }, {
                  "name": "USE_LIGHTMAP",
                  "type": "boolean"
                }, {
                  "name": "USE_BATCHING",
                  "type": "boolean"
                }, {
                  "name": "CC_FORWARD_ADD",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_HDR",
                  "type": "boolean"
                }, {
                  "name": "CC_PIPELINE_TYPE",
                  "type": "number",
                  "range": [0, 1]
                }, {
                  "name": "CC_USE_FOG",
                  "type": "number",
                  "range": [0, 4]
                }],
                "blocks": [],
                "samplerTextures": [],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_normal",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 1
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 2
                }, {
                  "name": "a_tangent",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 3
                }]
              }]
            }, {
              "name": "planar-shadow",
              "techniques": [{
                "passes": [{
                  "phase": "planarShadow",
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 2,
                      "blendDst": 4,
                      "blendDstAlpha": 4
                    }]
                  },
                  "program": "planar-shadow|planar-shadow-vs:vert|planar-shadow-fs:frag",
                  "depthStencilState": {
                    "depthTest": true,
                    "depthWrite": false,
                    "stencilTestFront": true,
                    "stencilFuncFront": 5,
                    "stencilPassOpFront": 2,
                    "stencilRefBack": 128,
                    "stencilRefFront": 128,
                    "stencilReadMaskBack": 128,
                    "stencilReadMaskFront": 128,
                    "stencilWriteMaskBack": 128,
                    "stencilWriteMaskFront": 128
                  }
                }]
              }],
              "shaders": [{
                "name": "planar-shadow|planar-shadow-vs:vert|planar-shadow-fs:frag",
                "hash": 3940098901,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 210,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 53
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }, {
                      "name": "CCShadow",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCMorph",
                      "defines": ["CC_USE_MORPH"]
                    }, {
                      "name": "CCSkinningTexture",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCSkinningAnimation",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCSkinning",
                      "defines": ["CC_USE_SKINNING", "!CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCLocalBatched",
                      "defines": ["!USE_INSTANCING", "USE_BATCHING"]
                    }, {
                      "name": "CCLocal",
                      "defines": ["!USE_INSTANCING", "!USE_BATCHING"]
                    }],
                    "samplerTextures": [{
                      "name": "cc_PositionDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_POSITION"]
                    }, {
                      "name": "cc_NormalDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_NORMAL"]
                    }, {
                      "name": "cc_TangentDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_TANGENT"]
                    }, {
                      "name": "cc_jointTexture",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }]
                  }
                },
                "defines": [{
                  "name": "CC_USE_MORPH",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_COUNT",
                  "type": "number",
                  "range": [2, 8]
                }, {
                  "name": "CC_MORPH_PRECOMPUTED",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_POSITION",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_NORMAL",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_TANGENT",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_SKINNING",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_BAKED_ANIMATION",
                  "type": "boolean"
                }, {
                  "name": "USE_INSTANCING",
                  "type": "boolean"
                }, {
                  "name": "USE_BATCHING",
                  "type": "boolean"
                }, {
                  "name": "USE_LIGHTMAP",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_HDR",
                  "type": "boolean"
                }],
                "blocks": [],
                "samplerTextures": [],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_normal",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 1
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 2
                }, {
                  "name": "a_tangent",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 3
                }, {
                  "name": "a_vertexId",
                  "type": 13,
                  "count": 1,
                  "defines": ["CC_USE_MORPH"],
                  "stageFlags": 1,
                  "format": 11,
                  "location": 6
                }, {
                  "name": "a_joints",
                  "type": "u32vec4",
                  "count": 1,
                  "defines": ["CC_USE_SKINNING"],
                  "stageFlags": 1,
                  "location": 4
                }, {
                  "name": "a_weights",
                  "type": 16,
                  "count": 1,
                  "defines": ["CC_USE_SKINNING"],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 5
                }, {
                  "name": "a_jointAnimInfo",
                  "type": 16,
                  "count": 1,
                  "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION", "USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 7
                }, {
                  "name": "a_matWorld0",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 8
                }, {
                  "name": "a_matWorld1",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 9
                }, {
                  "name": "a_matWorld2",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 10
                }, {
                  "name": "a_lightingMapUVParam",
                  "type": 16,
                  "count": 1,
                  "defines": ["USE_INSTANCING", "USE_LIGHTMAP"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 11
                }, {
                  "name": "a_dyn_batch_id",
                  "type": 13,
                  "count": 1,
                  "defines": ["!USE_INSTANCING", "USE_BATCHING"],
                  "stageFlags": 1,
                  "format": 11,
                  "location": 12
                }]
              }]
            }, {
              "name": "post-process",
              "techniques": [{
                "passes": [{
                  "phase": "post-process",
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 2,
                      "blendDst": 4,
                      "blendSrcAlpha": 2,
                      "blendDstAlpha": 4
                    }]
                  },
                  "program": "post-process|post-process-vs|post-process-fs",
                  "depthStencilState": {
                    "depthTest": false,
                    "depthWrite": false
                  }
                }]
              }],
              "shaders": [{
                "name": "post-process|post-process-vs|post-process-fs",
                "hash": 2054814724,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 145,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 37
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }],
                    "samplerTextures": [{
                      "name": "cc_lighting_resultMap",
                      "defines": []
                    }]
                  },
                  "locals": {
                    "blocks": [{
                      "name": "CCMorph",
                      "defines": ["CC_USE_MORPH"]
                    }, {
                      "name": "CCSkinningTexture",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCSkinningAnimation",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }, {
                      "name": "CCSkinning",
                      "defines": ["CC_USE_SKINNING", "!CC_USE_BAKED_ANIMATION"]
                    }],
                    "samplerTextures": [{
                      "name": "cc_PositionDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_POSITION"]
                    }, {
                      "name": "cc_NormalDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_NORMAL"]
                    }, {
                      "name": "cc_TangentDisplacements",
                      "defines": ["CC_USE_MORPH", "CC_MORPH_TARGET_HAS_TANGENT"]
                    }, {
                      "name": "cc_jointTexture",
                      "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION"]
                    }]
                  }
                },
                "defines": [{
                  "name": "CC_USE_MORPH",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_COUNT",
                  "type": "number",
                  "range": [2, 8]
                }, {
                  "name": "CC_MORPH_PRECOMPUTED",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_POSITION",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_NORMAL",
                  "type": "boolean"
                }, {
                  "name": "CC_MORPH_TARGET_HAS_TANGENT",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_SKINNING",
                  "type": "boolean"
                }, {
                  "name": "CC_USE_BAKED_ANIMATION",
                  "type": "boolean"
                }, {
                  "name": "USE_INSTANCING",
                  "type": "boolean"
                }],
                "blocks": [],
                "samplerTextures": [],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_normal",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 1
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 2
                }, {
                  "name": "a_tangent",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 3
                }, {
                  "name": "a_vertexId",
                  "type": 13,
                  "count": 1,
                  "defines": ["CC_USE_MORPH"],
                  "stageFlags": 1,
                  "format": 11,
                  "location": 6
                }, {
                  "name": "a_joints",
                  "type": "u32vec4",
                  "count": 1,
                  "defines": ["CC_USE_SKINNING"],
                  "stageFlags": 1,
                  "location": 4
                }, {
                  "name": "a_weights",
                  "type": 16,
                  "count": 1,
                  "defines": ["CC_USE_SKINNING"],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 5
                }, {
                  "name": "a_jointAnimInfo",
                  "type": 16,
                  "count": 1,
                  "defines": ["CC_USE_SKINNING", "CC_USE_BAKED_ANIMATION", "USE_INSTANCING"],
                  "stageFlags": 1,
                  "format": 44,
                  "isInstanced": true,
                  "location": 7
                }]
              }]
            }, {
              "name": "skybox",
              "techniques": [{
                "passes": [{
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "program": "skybox|sky-vs:vert|sky-fs:frag",
                  "priority": 245,
                  "depthStencilState": {
                    "depthTest": true,
                    "depthWrite": false
                  }
                }]
              }],
              "shaders": [{
                "name": "skybox|sky-vs:vert|sky-fs:frag",
                "hash": 553035852,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 37,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 37
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }],
                    "samplerTextures": [{
                      "name": "cc_environment",
                      "defines": []
                    }]
                  },
                  "locals": {
                    "blocks": [],
                    "samplerTextures": []
                  }
                },
                "defines": [{
                  "name": "CC_USE_IBL",
                  "type": "number",
                  "range": [0, 2]
                }, {
                  "name": "CC_USE_HDR",
                  "type": "boolean"
                }, {
                  "name": "USE_RGBE_CUBEMAP",
                  "type": "boolean"
                }],
                "blocks": [],
                "samplerTextures": [],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_normal",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 1
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 2
                }, {
                  "name": "a_tangent",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 3
                }]
              }]
            }, {
              "name": "profiler",
              "techniques": [{
                "passes": [{
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 2,
                      "blendDst": 4,
                      "blendDstAlpha": 4
                    }]
                  },
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "program": "profiler|profiler-vs:vert|profiler-fs:frag",
                  "depthStencilState": {
                    "depthTest": false,
                    "depthWrite": false
                  }
                }]
              }],
              "shaders": [{
                "name": "profiler|profiler-vs:vert|profiler-fs:frag",
                "hash": 3108604430,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 58,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 37
                  },
                  "globals": {
                    "blocks": [{
                      "name": "CCGlobal",
                      "defines": []
                    }, {
                      "name": "CCCamera",
                      "defines": []
                    }],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [],
                    "samplerTextures": []
                  }
                },
                "defines": [{
                  "name": "CC_USE_HDR",
                  "type": "boolean"
                }],
                "blocks": [{
                  "name": "Constants",
                  "defines": [],
                  "binding": 0,
                  "stageFlags": 1,
                  "members": [{
                    "name": "offset",
                    "type": 16,
                    "count": 1
                  }]
                }, {
                  "name": "PerFrameInfo",
                  "defines": [],
                  "binding": 1,
                  "stageFlags": 1,
                  "members": [{
                    "name": "digits",
                    "type": 16,
                    "count": 20
                  }]
                }],
                "samplerTextures": [{
                  "name": "mainTexture",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 2
                }],
                "attributes": [{
                  "name": "a_position",
                  "type": 15,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 32,
                  "location": 0
                }, {
                  "name": "a_color",
                  "type": 16,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 44,
                  "location": 1
                }]
              }]
            }, {
              "name": "splash-screen",
              "techniques": [{
                "name": "default",
                "passes": [{
                  "blendState": {
                    "targets": [{
                      "blend": true,
                      "blendSrc": 2,
                      "blendDst": 4,
                      "blendDstAlpha": 4
                    }]
                  },
                  "rasterizerState": {
                    "cullMode": 0
                  },
                  "program": "splash-screen|splash-screen-vs:vert|splash-screen-fs:frag",
                  "depthStencilState": {
                    "depthTest": false,
                    "depthWrite": false
                  },
                  "properties": {
                    "mainTexture": {
                      "value": "grey",
                      "type": 28
                    },
                    "resolution": {
                      "value": [640, 960],
                      "type": 14,
                      "handleInfo": ["u_buffer0", 0, 14]
                    },
                    "precent": {
                      "value": [0.5],
                      "type": 13,
                      "handleInfo": ["u_buffer0", 2, 13]
                    },
                    "scale": {
                      "value": [200, 500],
                      "type": 14,
                      "handleInfo": ["u_buffer1", 0, 14]
                    },
                    "translate": {
                      "value": [320, 480],
                      "type": 14,
                      "handleInfo": ["u_buffer1", 2, 14]
                    },
                    "u_buffer0": {
                      "type": 16,
                      "value": [640, 960, 0.5, 0]
                    },
                    "u_buffer1": {
                      "type": 16,
                      "value": [200, 500, 320, 480]
                    }
                  }
                }]
              }],
              "shaders": [{
                "name": "splash-screen|splash-screen-vs:vert|splash-screen-fs:frag",
                "hash": 624029864,
                "builtins": {
                  "statistics": {
                    "CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS": 6,
                    "CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS": 0
                  },
                  "globals": {
                    "blocks": [],
                    "samplerTextures": []
                  },
                  "locals": {
                    "blocks": [],
                    "samplerTextures": []
                  }
                },
                "defines": [],
                "blocks": [{
                  "name": "Constant",
                  "defines": [],
                  "binding": 0,
                  "stageFlags": 1,
                  "members": [{
                    "name": "u_buffer0",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "u_buffer1",
                    "type": 16,
                    "count": 1
                  }, {
                    "name": "u_projection",
                    "type": 25,
                    "count": 1
                  }]
                }],
                "samplerTextures": [{
                  "name": "mainTexture",
                  "type": 28,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 16,
                  "binding": 1
                }],
                "attributes": [{
                  "name": "a_position",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 0
                }, {
                  "name": "a_texCoord",
                  "type": 14,
                  "count": 1,
                  "defines": [],
                  "stageFlags": 1,
                  "format": 21,
                  "location": 1
                }]
              }]
            }]);

            const dtMask = 0xf0000000;
            const typeMask = 0x0fc00000;
            const setMask = 0x00300000;
            const bindingMask = 0x000fc000;
            const offsetMask = 0x00003fff;
            let PropertyType;

            (function (PropertyType) {
              PropertyType[PropertyType["BUFFER"] = 0] = "BUFFER";
              PropertyType[PropertyType["TEXTURE"] = 1] = "TEXTURE";
            })(PropertyType || (PropertyType = {}));

            const genHandle = (pt, set, binding, type, offset = 0) => pt << 28 & dtMask | type << 22 & typeMask | set << 20 & setMask | binding << 14 & bindingMask | offset & offsetMask;
            const getPropertyTypeFromHandle = handle => (handle & dtMask) >>> 28;
            const getTypeFromHandle = handle => (handle & typeMask) >>> 22;
            const getSetIndexFromHandle = handle => (handle & setMask) >>> 20;
            const getBindingFromHandle = handle => (handle & bindingMask) >>> 14;
            const getOffsetFromHandle = handle => handle & offsetMask;
            const customizeType = (handle, type) => handle & ~typeMask | type << 22 & typeMask;
            const type2reader = {
              [Type.UNKNOWN]: (a, v, idx = 0) => console.warn('illegal uniform handle'),
              [Type.INT]: (a, v, idx = 0) => a[idx],
              [Type.INT2]: (a, v, idx = 0) => Vec2.fromArray(v, a, idx),
              [Type.INT3]: (a, v, idx = 0) => Vec3.fromArray(v, a, idx),
              [Type.INT4]: (a, v, idx = 0) => Vec4.fromArray(v, a, idx),
              [Type.FLOAT]: (a, v, idx = 0) => a[idx],
              [Type.FLOAT2]: (a, v, idx = 0) => Vec2.fromArray(v, a, idx),
              [Type.FLOAT3]: (a, v, idx = 0) => Vec3.fromArray(v, a, idx),
              [Type.FLOAT4]: (a, v, idx = 0) => Vec4.fromArray(v, a, idx),
              [Type.MAT3]: (a, v, idx = 0) => Mat3.fromArray(v, a, idx),
              [Type.MAT4]: (a, v, idx = 0) => Mat4.fromArray(v, a, idx)
            };
            const type2writer = {
              [Type.UNKNOWN]: (a, v, idx = 0) => console.warn('illegal uniform handle'),
              [Type.INT]: (a, v, idx = 0) => a[idx] = v,
              [Type.INT2]: (a, v, idx = 0) => Vec2.toArray(a, v, idx),
              [Type.INT3]: (a, v, idx = 0) => Vec3.toArray(a, v, idx),
              [Type.INT4]: (a, v, idx = 0) => Vec4.toArray(a, v, idx),
              [Type.FLOAT]: (a, v, idx = 0) => a[idx] = v,
              [Type.FLOAT2]: (a, v, idx = 0) => Vec2.toArray(a, v, idx),
              [Type.FLOAT3]: (a, v, idx = 0) => Vec3.toArray(a, v, idx),
              [Type.FLOAT4]: (a, v, idx = 0) => Vec4.toArray(a, v, idx),
              [Type.MAT3]: (a, v, idx = 0) => Mat3.toArray(a, v, idx),
              [Type.MAT4]: (a, v, idx = 0) => Mat4.toArray(a, v, idx)
            };
            const defaultValues = [Object.freeze([0]), Object.freeze([0, 0]), Object.freeze([0, 0, 0, 0]), Object.freeze([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1])];
            function getDefaultFromType(type) {
              switch (type) {
                case Type.BOOL:
                case Type.INT:
                case Type.UINT:
                case Type.FLOAT:
                  return defaultValues[0];

                case Type.BOOL2:
                case Type.INT2:
                case Type.UINT2:
                case Type.FLOAT2:
                  return defaultValues[1];

                case Type.BOOL4:
                case Type.INT4:
                case Type.UINT4:
                case Type.FLOAT4:
                  return defaultValues[2];

                case Type.MAT4:
                  return defaultValues[3];

                case Type.SAMPLER2D:
                  return 'default-texture';

                case Type.SAMPLER_CUBE:
                  return 'default-cube-texture';
              }

              return defaultValues[0];
            }
            function overrideMacros(target, source) {
              const entries = Object.entries(source);
              let isDifferent = false;

              for (let i = 0; i < entries.length; i++) {
                if (target[entries[i][0]] !== entries[i][1]) {
                  target[entries[i][0]] = entries[i][1];
                  isDifferent = true;
                }
              }

              return isDifferent;
            }

            const _dsLayoutInfo = new DescriptorSetLayoutInfo();

            function getBitCount(cnt) {
              return Math.ceil(Math.log2(Math.max(cnt, 2)));
            }

            function mapDefine(info, def) {
              switch (info.type) {
                case 'boolean':
                  return typeof def === 'number' ? def.toString() : def ? '1' : '0';

                case 'string':
                  return def !== undefined ? def : info.options[0];

                case 'number':
                  return def !== undefined ? def.toString() : info.range[0].toString();

                default:
                  console.warn(`unknown define type '${info.type}'`);
                  return '-1';
              }
            }

            function prepareDefines(defs, tDefs) {
              const macros = [];

              for (let i = 0; i < tDefs.length; i++) {
                const tmpl = tDefs[i];
                const name = tmpl.name;
                const v = defs[name];
                const value = mapDefine(tmpl, v);
                const isDefault = !v || v === '0';
                macros.push({
                  name,
                  value,
                  isDefault
                });
              }

              return macros;
            }

            function getShaderInstanceName(name, macros) {
              return name + macros.reduce((acc, cur) => cur.isDefault ? acc : `${acc}|${cur.name}${cur.value}`, '');
            }

            function insertBuiltinBindings(tmpl, tmplInfo, source, type, outBindings) {
              const target = tmpl.builtins[type];
              const tempBlocks = [];

              for (let i = 0; i < target.blocks.length; i++) {
                const b = target.blocks[i];
                const info = source.layouts[b.name];
                const binding = info && source.bindings.find(bd => bd.binding === info.binding);

                if (!info || !binding || !(binding.descriptorType & DESCRIPTOR_BUFFER_TYPE)) {
                  console.warn(`builtin UBO '${b.name}' not available!`);
                  continue;
                }

                tempBlocks.push(info);
                if (outBindings && !outBindings.includes(binding)) outBindings.push(binding);
              }

              Array.prototype.unshift.apply(tmplInfo.gfxBlocks, tempBlocks);
              const tempSamplerTextures = [];

              for (let i = 0; i < target.samplerTextures.length; i++) {
                const s = target.samplerTextures[i];
                const info = source.layouts[s.name];
                const binding = info && source.bindings.find(bd => bd.binding === info.binding);

                if (!info || !binding || !(binding.descriptorType & DESCRIPTOR_SAMPLER_TYPE)) {
                  console.warn(`builtin samplerTexture '${s.name}' not available!`);
                  continue;
                }

                tempSamplerTextures.push(info);
                if (outBindings && !outBindings.includes(binding)) outBindings.push(binding);
              }

              Array.prototype.unshift.apply(tmplInfo.gfxSamplerTextures, tempSamplerTextures);
              if (outBindings) outBindings.sort((a, b) => a.binding - b.binding);
            }

            function getSize(block) {
              return block.members.reduce((s, m) => s + GetTypeSize(m.type) * m.count, 0);
            }

            function genHandles(tmpl) {
              const handleMap = {};

              for (let i = 0; i < tmpl.blocks.length; i++) {
                const block = tmpl.blocks[i];
                const members = block.members;
                let offset = 0;

                for (let j = 0; j < members.length; j++) {
                  const uniform = members[j];
                  handleMap[uniform.name] = genHandle(PropertyType.BUFFER, SetIndex.MATERIAL, block.binding, uniform.type, offset);
                  offset += (GetTypeSize(uniform.type) >> 2) * uniform.count;
                }
              }

              for (let i = 0; i < tmpl.samplerTextures.length; i++) {
                const samplerTexture = tmpl.samplerTextures[i];
                handleMap[samplerTexture.name] = genHandle(PropertyType.TEXTURE, SetIndex.MATERIAL, samplerTexture.binding, samplerTexture.type);
              }

              return handleMap;
            }

            function dependencyCheck(dependencies, defines) {
              for (let i = 0; i < dependencies.length; i++) {
                const d = dependencies[i];

                if (d[0] === '!') {
                  if (defines[d.slice(1)]) {
                    return false;
                  }
                } else if (!defines[d]) {
                  return false;
                }
              }

              return true;
            }

            function getActiveAttributes(tmpl, tmplInfo, defines) {
              const out = [];
              const attributes = tmpl.attributes;
              const gfxAttributes = tmplInfo.gfxAttributes;

              for (let i = 0; i < attributes.length; i++) {
                if (!dependencyCheck(attributes[i].defines, defines)) {
                  continue;
                }

                out.push(gfxAttributes[i]);
              }

              return out;
            }

            class ProgramLib {
              constructor() {
                this._templates = {};
                this._cache = {};
                this._templateInfos = {};
              }

              register(effect) {
                for (let i = 0; i < effect.shaders.length; i++) {
                  const tmpl = this.define(effect.shaders[i]);
                  tmpl.effectName = effect.name;
                }
              }

              define(shader) {
                const curTmpl = this._templates[shader.name];

                if (curTmpl && curTmpl.hash === shader.hash) {
                  return curTmpl;
                }

                const tmpl = { ...shader
                };
                let offset = 0;

                for (let i = 0; i < tmpl.defines.length; i++) {
                  const def = tmpl.defines[i];
                  let cnt = 1;

                  if (def.type === 'number') {
                    const range = def.range;
                    cnt = getBitCount(range[1] - range[0] + 1);

                    def._map = value => value - range[0];
                  } else if (def.type === 'string') {
                    cnt = getBitCount(def.options.length);

                    def._map = value => Math.max(0, def.options.findIndex(s => s === value));
                  } else if (def.type === 'boolean') {
                    def._map = value => value ? 1 : 0;
                  }

                  def._offset = offset;
                  offset += cnt;
                }

                if (offset > 31) {
                  tmpl.uber = true;
                }

                tmpl.constantMacros = '';

                for (const key in tmpl.builtins.statistics) {
                  tmpl.constantMacros += `#define ${key} ${tmpl.builtins.statistics[key]}\n`;
                }

                this._templates[shader.name] = tmpl;

                if (!this._templateInfos[tmpl.hash]) {
                  const tmplInfo = {};
                  tmplInfo.samplerStartBinding = tmpl.blocks.length;
                  tmplInfo.gfxBlocks = [];
                  tmplInfo.gfxSamplerTextures = [];
                  tmplInfo.bindings = [];
                  tmplInfo.blockSizes = [];

                  for (let i = 0; i < tmpl.blocks.length; i++) {
                    const block = tmpl.blocks[i];
                    tmplInfo.blockSizes.push(getSize(block));
                    tmplInfo.bindings.push(new DescriptorSetLayoutBinding(block.binding, block.descriptorType || DescriptorType.UNIFORM_BUFFER, 1, block.stageFlags));
                    tmplInfo.gfxBlocks.push(new UniformBlock(SetIndex.MATERIAL, block.binding, block.name, block.members.map(m => new Uniform(m.name, m.type, m.count)), 1));
                  }

                  for (let i = 0; i < tmpl.samplerTextures.length; i++) {
                    const samplerTexture = tmpl.samplerTextures[i];
                    tmplInfo.bindings.push(new DescriptorSetLayoutBinding(samplerTexture.binding, samplerTexture.descriptorType || DescriptorType.SAMPLER_TEXTURE, samplerTexture.count, samplerTexture.stageFlags));
                    tmplInfo.gfxSamplerTextures.push(new UniformSamplerTexture(SetIndex.MATERIAL, samplerTexture.binding, samplerTexture.name, samplerTexture.type, samplerTexture.count));
                  }

                  tmplInfo.gfxAttributes = [];

                  for (let i = 0; i < tmpl.attributes.length; i++) {
                    const attr = tmpl.attributes[i];
                    tmplInfo.gfxAttributes.push(new Attribute$1(attr.name, attr.format, attr.isNormalized, 0, attr.isInstanced, attr.location));
                  }

                  insertBuiltinBindings(tmpl, tmplInfo, localDescriptorSetLayout, 'locals');
                  tmplInfo.gfxStages = [];
                  tmplInfo.gfxStages.push(new ShaderStage(ShaderStageFlagBit.VERTEX, ''));
                  tmplInfo.gfxStages.push(new ShaderStage(ShaderStageFlagBit.FRAGMENT, ''));
                  tmplInfo.handleMap = genHandles(tmpl);
                  tmplInfo.hPipelineLayout = NULL_HANDLE;
                  tmplInfo.setLayouts = [];
                  this._templateInfos[tmpl.hash] = tmplInfo;
                }

                return tmpl;
              }

              getTemplate(name) {
                return this._templates[name];
              }

              getTemplateInfo(name) {
                const hash = this._templates[name].hash;
                return this._templateInfos[hash];
              }

              getDescriptorSetLayout(device, name, isLocal = false) {
                const tmpl = this._templates[name];
                const tmplInfo = this._templateInfos[tmpl.hash];

                if (!tmplInfo.setLayouts.length) {
                  _dsLayoutInfo.bindings = tmplInfo.bindings;
                  tmplInfo.setLayouts[SetIndex.MATERIAL] = device.createDescriptorSetLayout(_dsLayoutInfo);
                  _dsLayoutInfo.bindings = localDescriptorSetLayout.bindings;
                  tmplInfo.setLayouts[SetIndex.LOCAL] = device.createDescriptorSetLayout(_dsLayoutInfo);
                }

                return tmplInfo.setLayouts[isLocal ? SetIndex.LOCAL : SetIndex.MATERIAL];
              }

              hasProgram(name) {
                return this._templates[name] !== undefined;
              }

              getKey(name, defines) {
                const tmpl = this._templates[name];
                const tmplDefs = tmpl.defines;

                if (tmpl.uber) {
                  let key = '';

                  for (let i = 0; i < tmplDefs.length; i++) {
                    const tmplDef = tmplDefs[i];
                    const value = defines[tmplDef.name];

                    if (!value || !tmplDef._map) {
                      continue;
                    }

                    const mapped = tmplDef._map(value);

                    const offset = tmplDef._offset;
                    key += `${offset}${mapped}|`;
                  }

                  return `${key}${tmpl.hash}`;
                }

                let key = 0;

                for (let i = 0; i < tmplDefs.length; i++) {
                  const tmplDef = tmplDefs[i];
                  const value = defines[tmplDef.name];

                  if (!value || !tmplDef._map) {
                    continue;
                  }

                  const mapped = tmplDef._map(value);

                  const offset = tmplDef._offset;
                  key |= mapped << offset;
                }

                return `${key.toString(16)}|${tmpl.hash}`;
              }

              destroyShaderByDefines(defines) {
                const names = Object.keys(defines);

                if (!names.length) {
                  return;
                }

                const regexes = names.map(cur => {
                  let val = defines[cur];

                  if (typeof val === 'boolean') {
                    val = val ? '1' : '0';
                  }

                  return new RegExp(`${cur}${val}`);
                });
                const keys = Object.keys(this._cache).filter(k => regexes.every(re => re.test(ShaderPool.get(this._cache[k]).name)));

                for (let i = 0; i < keys.length; i++) {
                  const k = keys[i];
                  const prog = ShaderPool.get(this._cache[k]);
                  console.log(`destroyed shader ${prog.name}`);
                  prog.destroy();
                  delete this._cache[k];
                }
              }

              getGFXShader(device, name, defines, pipeline, key) {
                Object.assign(defines, pipeline.macros);
                if (!key) key = this.getKey(name, defines);
                const res = this._cache[key];

                if (res) {
                  return res;
                }

                const tmpl = this._templates[name];
                const tmplInfo = this._templateInfos[tmpl.hash];

                if (!tmplInfo.hPipelineLayout) {
                  this.getDescriptorSetLayout(device, name);
                  insertBuiltinBindings(tmpl, tmplInfo, globalDescriptorSetLayout, 'globals');
                  tmplInfo.setLayouts[SetIndex.GLOBAL] = pipeline.descriptorSetLayout;
                  tmplInfo.hPipelineLayout = PipelineLayoutPool.alloc(device, new PipelineLayoutInfo(tmplInfo.setLayouts));
                }

                const macroArray = prepareDefines(defines, tmpl.defines);
                const prefix = pipeline.constantMacros + tmpl.constantMacros + macroArray.reduce((acc, cur) => `${acc}#define ${cur.name} ${cur.value}\n`, '');
                let src = tmpl.glsl3;
                const deviceShaderVersion = getDeviceShaderVersion(device);

                if (deviceShaderVersion) {
                  src = tmpl[deviceShaderVersion];
                } else {
                  console.error('Invalid GFX API!');
                }

                tmplInfo.gfxStages[0].source = prefix + src.vert;
                tmplInfo.gfxStages[1].source = prefix + src.frag;
                const attributes = getActiveAttributes(tmpl, tmplInfo, defines);
                const instanceName = getShaderInstanceName(name, macroArray);
                const shaderInfo = new ShaderInfo(instanceName, tmplInfo.gfxStages, attributes, tmplInfo.gfxBlocks);
                shaderInfo.samplerTextures = tmplInfo.gfxSamplerTextures;
                return this._cache[key] = ShaderPool.alloc(device, shaderInfo);
              }

            }

            function getDeviceShaderVersion(device) {
              switch (device.gfxAPI) {
                case API.GLES2:
                case API.WEBGL:
                  return 'glsl1';

                case API.GLES3:
                case API.WEBGL2:
                  return 'glsl3';

                default:
                  return 'glsl4';
              }
            }
            const programLib = new ProgramLib();
            legacyCC.programLib = programLib;

            const glsl1 = [[{
              "vert": "\nprecision mediump float;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matViewInv;\nuniform highp mat4 cc_matViewProj;\nuniform highp mat4 cc_matWorld;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\nmat3 m = mat3(xAxis,yAxis,zAxis);\nfloat trace = m[0][0] + m[1][1] + m[2][2];\nvec4 quat;\nif (trace > 0.) {\nfloat s = 0.5 / sqrt(trace + 1.0);\nquat.w = 0.25 / s;\nquat.x = (m[2][1] - m[1][2]) * s;\nquat.y = (m[0][2] - m[2][0]) * s;\nquat.z = (m[1][0] - m[0][1]) * s;\n} else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\nfloat s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\nquat.w = (m[2][1] - m[1][2]) / s;\nquat.x = 0.25 * s;\nquat.y = (m[0][1] + m[1][0]) / s;\nquat.z = (m[0][2] + m[2][0]) / s;\n} else if (m[1][1] > m[2][2]) {\nfloat s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\nquat.w = (m[0][2] - m[2][0]) / s;\nquat.x = (m[0][1] + m[1][0]) / s;\nquat.y = 0.25 * s;\nquat.z = (m[1][2] + m[2][1]) / s;\n} else {\nfloat s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\nquat.w = (m[1][0] - m[0][1]) / s;\nquat.x = (m[0][2] + m[2][0]) / s;\nquat.y = (m[1][2] + m[2][1]) / s;\nquat.z = 0.25 * s;\n}\nfloat len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\nif (len > 0.) {\nlen = 1. / sqrt(len);\nquat.x = quat.x * len;\nquat.y = quat.y * len;\nquat.z = quat.z * len;\nquat.w = quat.w * len;\n}\nreturn quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\nfloat x = angle.x / 2.;\nfloat y = angle.y / 2.;\nfloat z = angle.z / 2.;\nfloat sx = sin(x);\nfloat cx = cos(x);\nfloat sy = sin(y);\nfloat cy = cos(y);\nfloat sz = sin(z);\nfloat cz = cos(z);\nvec4 quat = vec4(0);\nquat.x = sx * cy * cz + cx * sy * sz;\nquat.y = cx * sy * cz + sx * cy * sz;\nquat.z = cx * cy * sz - sx * sy * cz;\nquat.w = cx * cy * cz - sx * sy * sz;\nreturn quat;\n}\nvec4 quatMultiply (vec4 a, vec4 b){\nvec4 quat;\nquat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\nquat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\nquat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\nquat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\nreturn quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\nfloat ix = q.w * v.x + q.y * v.z - q.z * v.y;\nfloat iy = q.w * v.y + q.z * v.x - q.x * v.z;\nfloat iz = q.w * v.z + q.x * v.y - q.y * v.x;\nfloat iw = -q.x * v.x - q.y * v.y - q.z * v.z;\nv.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\nv.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\nv.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\nvec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\nvec4 rotQuat = quatMultiply(viewQuat, q);\nrotateVecFromQuat(pos, rotQuat);\nreturn pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\nfloat xOS = cos(angle) * corner.x - sin(angle) * corner.y;\nfloat yOS = sin(angle) * corner.x + cos(angle) * corner.y;\ncorner.x = xOS;\ncorner.y = yOS;\n}\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n, mat4 viewInv\n) {\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\nvec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\nvec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n}\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nuniform vec4 cc_size_rotation;\nvec4 vs_main() {\nvec4 pos = vec4(a_position, 1);\npos = cc_matWorld * pos;\nvec2 vertOffset = a_texCoord.xy - 0.5;\ncomputeVertPos(pos, vertOffset, quaternionFromEuler(vec3(0., 0., cc_size_rotation.z)), vec3(cc_size_rotation.xy, 0.), cc_matViewInv);\npos = cc_matViewProj * pos;\nuv = a_texCoord.xy;\ncolor = a_color;\nreturn pos;\n}\nvoid main() { gl_Position = vs_main(); }",
              "frag": "\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\nreturn CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"
            }], [{
              "vert": "\nprecision highp float;\nattribute vec3 a_position;\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nvec4 frag () {\nvec4 o = vec4(1.0);\nreturn o;\n}\nvoid main() { gl_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\nuniform highp mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\nattribute float a_dist;\nvarying float v_dist;\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\npos = cc_matViewProj * cc_matWorld * pos;\nv_color = a_color;\nv_dist = a_dist;\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\nprecision highp float;\nvarying vec4 v_color;\nvarying float v_dist;\nvec4 frag () {\nvec4 o = v_color;\n#ifdef GL_OES_standard_derivatives\nfloat aa = fwidth(v_dist);\n#else\nfloat aa = 0.05;\n#endif\nfloat alpha = 1. - smoothstep(-aa, 0., abs(v_dist) - 1.0);\no.rgb *= o.a;\no *= alpha;\nreturn o;\n}\nvoid main() { gl_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\nmat3 m = mat3(xAxis,yAxis,zAxis);\nfloat trace = m[0][0] + m[1][1] + m[2][2];\nvec4 quat;\nif (trace > 0.) {\nfloat s = 0.5 / sqrt(trace + 1.0);\nquat.w = 0.25 / s;\nquat.x = (m[2][1] - m[1][2]) * s;\nquat.y = (m[0][2] - m[2][0]) * s;\nquat.z = (m[1][0] - m[0][1]) * s;\n} else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\nfloat s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\nquat.w = (m[2][1] - m[1][2]) / s;\nquat.x = 0.25 * s;\nquat.y = (m[0][1] + m[1][0]) / s;\nquat.z = (m[0][2] + m[2][0]) / s;\n} else if (m[1][1] > m[2][2]) {\nfloat s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\nquat.w = (m[0][2] - m[2][0]) / s;\nquat.x = (m[0][1] + m[1][0]) / s;\nquat.y = 0.25 * s;\nquat.z = (m[1][2] + m[2][1]) / s;\n} else {\nfloat s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\nquat.w = (m[1][0] - m[0][1]) / s;\nquat.x = (m[0][2] + m[2][0]) / s;\nquat.y = (m[1][2] + m[2][1]) / s;\nquat.z = 0.25 * s;\n}\nfloat len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\nif (len > 0.) {\nlen = 1. / sqrt(len);\nquat.x = quat.x * len;\nquat.y = quat.y * len;\nquat.z = quat.z * len;\nquat.w = quat.w * len;\n}\nreturn quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\nfloat x = angle.x / 2.;\nfloat y = angle.y / 2.;\nfloat z = angle.z / 2.;\nfloat sx = sin(x);\nfloat cx = cos(x);\nfloat sy = sin(y);\nfloat cy = cos(y);\nfloat sz = sin(z);\nfloat cz = cos(z);\nvec4 quat = vec4(0);\nquat.x = sx * cy * cz + cx * sy * sz;\nquat.y = cx * sy * cz + sx * cy * sz;\nquat.z = cx * cy * sz - sx * sy * cz;\nquat.w = cx * cy * cz - sx * sy * sz;\nreturn quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\nfloat x2 = q.x + q.x;\nfloat y2 = q.y + q.y;\nfloat z2 = q.z + q.z;\nfloat xx = q.x * x2;\nfloat xy = q.x * y2;\nfloat xz = q.x * z2;\nfloat yy = q.y * y2;\nfloat yz = q.y * z2;\nfloat zz = q.z * z2;\nfloat wx = q.w * x2;\nfloat wy = q.w * y2;\nfloat wz = q.w * z2;\nreturn mat4(\n1. - (yy + zz), xy + wz, xz - wy, 0,\nxy - wz, 1. - (xx + zz), yz + wx, 0,\nxz + wy, yz - wx, 1. - (xx + yy), 0,\np.x, p.y, p.z, 1\n);\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\nfloat x = q.x, y = q.y, z = q.z, w = q.w;\nfloat x2 = x + x;\nfloat y2 = y + y;\nfloat z2 = z + z;\nfloat xx = x * x2;\nfloat xy = x * y2;\nfloat xz = x * z2;\nfloat yy = y * y2;\nfloat yz = y * z2;\nfloat zz = z * z2;\nfloat wx = w * x2;\nfloat wy = w * y2;\nfloat wz = w * z2;\nfloat sx = s.x;\nfloat sy = s.y;\nfloat sz = s.z;\nreturn mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n(xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n(xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\nt.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\nvec4 quat;\nquat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\nquat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\nquat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\nquat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\nreturn quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\nfloat ix = q.w * v.x + q.y * v.z - q.z * v.y;\nfloat iy = q.w * v.y + q.z * v.x - q.x * v.z;\nfloat iz = q.w * v.z + q.x * v.y - q.y * v.x;\nfloat iw = -q.x * v.x - q.y * v.y - q.z * v.z;\nv.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\nv.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\nv.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\nvec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\nvec4 rotQuat = quatMultiply(viewQuat, q);\nrotateVecFromQuat(pos, rotQuat);\nreturn pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\nfloat xOS = cos(angle) * corner.x - sin(angle) * corner.y;\nfloat yOS = sin(angle) * corner.x + cos(angle) * corner.y;\ncorner.x = xOS;\ncorner.y = yOS;\n}\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matViewInv;\nuniform highp mat4 cc_matViewProj;\nuniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n, vec3 eye\n, vec4 velocity\n, float velocityScale\n, float lengthScale\n, float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\nvec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\nvec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\nvec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\nvec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\npos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = vec3(1, 0, 0);\nvec3 camY = vec3(0, 0, -1);\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\nvec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\nrotateCorner(viewSpaceVert, q.z);\nvec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\nvec3 camY = vec3(0, 1, 0);\nvec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\npos.xyz += offset;\n#else\npos.x += vertOffset.x;\npos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\nvec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\naniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\nvertIndex.y = 1. - vertIndex.y;\n#endif\nreturn (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nuniform vec4 u_sampleInfo;\nuniform vec4 u_worldRot;\nuniform vec4 u_timeDelta;\nattribute vec4 a_position_starttime;\nattribute vec4 a_size_uv;\nattribute vec4 a_rotation_uv;\nattribute vec4 a_color;\nattribute vec4 a_dir_life;\nattribute float a_rndSeed;\n#if CC_RENDER_MODE == 4\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord3;\nattribute vec3 a_normal;\nattribute vec4 a_color1;\n#endif\nvec3 unpackCurveData (sampler2D tex, vec2 coord) {\nvec4 a = texture2D(tex, coord);\nvec4 b = texture2D(tex, coord + u_sampleInfo.y);\nfloat c = fract(coord.x * u_sampleInfo.x);\nreturn mix(a.xyz, b.xyz, c);\n}\nvec3 unpackCurveData (sampler2D tex, vec2 coord, out float w) {\nvec4 a = texture2D(tex, coord);\nvec4 b = texture2D(tex, coord + u_sampleInfo.y);\nfloat c = fract(coord.x * u_sampleInfo.x);\nw = mix(a.w, b.w, c);\nreturn mix(a.xyz, b.xyz, c);\n}\nfloat pseudoRandom (float seed) {\nseed = mod(seed, 233280.);\nfloat q = (seed * 9301. + 49297.) / 233280.;\nreturn fract(q);\n}\n#if COLOR_OVER_TIME_MODULE_ENABLE\nuniform sampler2D color_over_time_tex0;\nuniform int u_color_mode;\n#endif\n#if ROTATION_OVER_TIME_MODULE_ENABLE\nuniform sampler2D rotation_over_time_tex0;\nuniform int u_rotation_mode;\n#endif\n#if SIZE_OVER_TIME_MODULE_ENABLE\nuniform sampler2D size_over_time_tex0;\nuniform int u_size_mode;\n#endif\n#if FORCE_OVER_TIME_MODULE_ENABLE\nuniform sampler2D force_over_time_tex0;\nuniform int u_force_mode;\nuniform int u_force_space;\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\nuniform sampler2D velocity_over_time_tex0;\nuniform int u_velocity_mode;\nuniform int u_velocity_space;\n#endif\n#if TEXTURE_ANIMATION_MODULE_ENABLE\nuniform sampler2D texture_animation_tex0;\nuniform vec4 u_anim_info;\n#endif\nfloat repeat (float t, float length) {\nreturn t - floor(t / length) * length;\n}\nvec4 rotateQuat (vec4 p, vec4 q) {\nvec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\nvec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\nreturn vec4(res.xyz, p.w);\n}\nvec4 gpvs_main () {\nfloat activeTime = u_timeDelta.x - a_position_starttime.w;\nfloat normalizedTime = clamp(activeTime / a_dir_life.w, 0.0, 1.0);\nvec2 timeCoord0 = vec2(normalizedTime, 0.);\nvec2 timeCoord1 = vec2(normalizedTime, 1.);\n#if CC_RENDER_MODE == 4\nvec2 vertIdx = vec2(a_texCoord.x, a_texCoord.y);\n#else\nvec2 vertIdx = vec2(a_size_uv.w, a_rotation_uv.w);\n#endif\nvec4 velocity = vec4(a_dir_life.xyz, 0.);\nvec4 pos = vec4(a_position_starttime.xyz, 1.);\nvec3 size = a_size_uv.xyz;\n#if SIZE_OVER_TIME_MODULE_ENABLE\nif (u_size_mode == 1) {\nsize *= unpackCurveData(size_over_time_tex0, timeCoord0);\n} else {\nvec3 size_0 = unpackCurveData(size_over_time_tex0, timeCoord0);\nvec3 size_1 = unpackCurveData(size_over_time_tex0, timeCoord1);\nfloat factor_s = pseudoRandom(a_rndSeed + 39825.);\nsize *= mix(size_0, size_1, factor_s);\n}\n#endif\nvec3 compScale = scale.xyz * size;\n#if FORCE_OVER_TIME_MODULE_ENABLE\nvec3 forceAnim = vec3(0.);\nif (u_force_mode == 1) {\nforceAnim = unpackCurveData(force_over_time_tex0, timeCoord0);\n} else {\nvec3 force_0 = unpackCurveData(force_over_time_tex0, timeCoord0);\nvec3 force_1 = unpackCurveData(force_over_time_tex0, timeCoord1);\nfloat factor_f =  pseudoRandom(a_rndSeed + 212165.);\nforceAnim = mix(force_0, force_1, factor_f);\n}\nvec4 forceTrack = vec4(forceAnim, 0.);\nif (u_force_space == 0) {\nforceTrack = rotateQuat(forceTrack, u_worldRot);\n}\nvelocity.xyz += forceTrack.xyz;\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\nfloat speedModifier0 = 1.;\nfloat speedModifier1 = 1.;\nvec3 velocityAnim = vec3(0.);\nif (u_velocity_mode == 1) {\nvelocityAnim = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n} else {\nvec3 vectory_0 = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\nvec3 vectory_1 = unpackCurveData(velocity_over_time_tex0, timeCoord1, speedModifier1);\nfloat factor_v = pseudoRandom(a_rndSeed + 197866.);\nvelocityAnim = mix(vectory_0, vectory_1, factor_v);\nspeedModifier0 = mix(speedModifier0, speedModifier1, factor_v);\n}\nvec4 velocityTrack = vec4(velocityAnim, 0.);\nif (u_velocity_space == 0) {\nvelocityTrack = rotateQuat(velocityTrack, u_worldRot);\n}\nvelocity.xyz += velocityTrack.xyz;\nvelocity.xyz *= speedModifier0;\n#endif\npos.xyz += velocity.xyz * normalizedTime * a_dir_life.w;\n#if !CC_USE_WORLD_SPACE\npos = cc_matWorld * pos;\n#if CC_RENDER_MODE == 1\nvelocity = rotateQuat(velocity, u_worldRot);\n#endif\n#endif\nvec3 rotation = a_rotation_uv.xyz;\n#if ROTATION_OVER_TIME_MODULE_ENABLE\nif (u_rotation_mode == 1) {\nrotation += unpackCurveData(rotation_over_time_tex0, timeCoord0) * normalizedTime * a_dir_life.w;\n} else {\nvec3 rotation_0 = unpackCurveData(rotation_over_time_tex0, timeCoord0);\nvec3 rotation_1 = unpackCurveData(rotation_over_time_tex0, timeCoord1);\nfloat factor_r = pseudoRandom(a_rndSeed + 125292.);\nrotation += mix(rotation_0, rotation_1, factor_r) * normalizedTime * a_dir_life.w;\n}\n#endif\n#if COLOR_OVER_TIME_MODULE_ENABLE\nif (u_color_mode == 1) {\ncolor = a_color * texture2D(color_over_time_tex0, timeCoord0);\n} else {\nvec4 color_0 = texture2D(color_over_time_tex0, timeCoord0);\nvec4 color_1 = texture2D(color_over_time_tex0, timeCoord1);\nfloat factor_c = pseudoRandom(a_rndSeed + 91041.);\ncolor = a_color * mix(color_0, color_1, factor_c);\n}\n#else\ncolor = a_color;\n#endif\n#if CC_RENDER_MODE != 4\nvec2 cornerOffset = vec2((vertIdx - 0.5));\n#if CC_RENDER_MODE == 0\nvec3 rotEuler = rotation.xyz;\n#elif CC_RENDER_MODE == 1\nvec3 rotEuler = vec3(0.);\n#else\nvec3 rotEuler = vec3(0., 0., rotation.z);\n#endif\ncomputeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, cc_matViewInv\n#endif\n#if CC_RENDER_MODE == 1\n, cc_cameraPos.xyz\n, velocity\n, frameTile_velLenScale.z\n, frameTile_velLenScale.w\n, a_size_uv.w\n#endif\n);\n#else\nmat4 xformNoScale = matrixFromRT(quaternionFromEuler(rotation), pos.xyz);\nmat4 xform = matFromRTS(quaternionFromEuler(rotation), pos.xyz, compScale);\npos = xform * vec4(a_texCoord3, 1);\nvec4 normal = xformNoScale * vec4(a_normal, 0);\ncolor *= a_color1;\n#endif\npos = cc_matViewProj * pos;\nfloat frameIndex = 0.;\n#if TEXTURE_ANIMATION_MODULE_ENABLE\nfloat startFrame = 0.;\nvec3 frameInfo = vec3(0.);\nif (int(u_anim_info.x) == 1) {\nframeInfo = unpackCurveData(texture_animation_tex0, timeCoord0);\n} else {\nvec3 frameInfo0 = unpackCurveData(texture_animation_tex0, timeCoord0);\nvec3 frameInfo1 = unpackCurveData(texture_animation_tex0, timeCoord1);\nfloat factor_t = pseudoRandom(a_rndSeed + 90794.);\nframeInfo = mix(frameInfo0, frameInfo1, factor_t);\n}\nstartFrame = frameInfo.x / u_anim_info.y;\nframeIndex = repeat(u_anim_info.z * (frameInfo.y + startFrame), 1.);\n#endif\nuv = computeUV(frameIndex, vertIdx, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\nreturn pos;\n}\nvoid main() { gl_Position = gpvs_main(); }",
              "frag": "\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\nreturn CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"
            }], [{
              "vert": "\nprecision mediump float;\nuniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\nuniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\nvarying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\nhighp vec4 pos = vec4(a_position, 1);\nvec4 velocity = vec4(a_texCoord1.xyz, 0);\n#if !CC_USE_WORLD_SPACE\npos = cc_matWorld * pos;\nvelocity = cc_matWorld * velocity;\n#endif\nfloat vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\nvec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\npos.xyz += camUp * vertOffset;\npos = cc_matViewProj * pos;\nuv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\ncolor = a_color;\n#if CC_DRAW_WIRE_FRAME\nvBarycentric = a_texCoord2;\n#endif\nreturn pos;\n}\nvoid main() { gl_Position = vs_main(); }",
              "frag": "\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nvarying vec2 uv;\nvarying vec4 color;\n#if CC_DRAW_WIRE_FRAME\nvarying vec3 vBarycentric;\n#endif\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\nif (any(lessThan(vBarycentric, vec3(0.02)))) {\ncol = vec4(0., 1., 1., 1.);\n}\n#endif\nreturn CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"
            }], [{
              "vert": "\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\nmat3 m = mat3(xAxis,yAxis,zAxis);\nfloat trace = m[0][0] + m[1][1] + m[2][2];\nvec4 quat;\nif (trace > 0.) {\nfloat s = 0.5 / sqrt(trace + 1.0);\nquat.w = 0.25 / s;\nquat.x = (m[2][1] - m[1][2]) * s;\nquat.y = (m[0][2] - m[2][0]) * s;\nquat.z = (m[1][0] - m[0][1]) * s;\n} else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\nfloat s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\nquat.w = (m[2][1] - m[1][2]) / s;\nquat.x = 0.25 * s;\nquat.y = (m[0][1] + m[1][0]) / s;\nquat.z = (m[0][2] + m[2][0]) / s;\n} else if (m[1][1] > m[2][2]) {\nfloat s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\nquat.w = (m[0][2] - m[2][0]) / s;\nquat.x = (m[0][1] + m[1][0]) / s;\nquat.y = 0.25 * s;\nquat.z = (m[1][2] + m[2][1]) / s;\n} else {\nfloat s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\nquat.w = (m[1][0] - m[0][1]) / s;\nquat.x = (m[0][2] + m[2][0]) / s;\nquat.y = (m[1][2] + m[2][1]) / s;\nquat.z = 0.25 * s;\n}\nfloat len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\nif (len > 0.) {\nlen = 1. / sqrt(len);\nquat.x = quat.x * len;\nquat.y = quat.y * len;\nquat.z = quat.z * len;\nquat.w = quat.w * len;\n}\nreturn quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\nfloat x = angle.x / 2.;\nfloat y = angle.y / 2.;\nfloat z = angle.z / 2.;\nfloat sx = sin(x);\nfloat cx = cos(x);\nfloat sy = sin(y);\nfloat cy = cos(y);\nfloat sz = sin(z);\nfloat cz = cos(z);\nvec4 quat = vec4(0);\nquat.x = sx * cy * cz + cx * sy * sz;\nquat.y = cx * sy * cz + sx * cy * sz;\nquat.z = cx * cy * sz - sx * sy * cz;\nquat.w = cx * cy * cz - sx * sy * sz;\nreturn quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\nfloat x2 = q.x + q.x;\nfloat y2 = q.y + q.y;\nfloat z2 = q.z + q.z;\nfloat xx = q.x * x2;\nfloat xy = q.x * y2;\nfloat xz = q.x * z2;\nfloat yy = q.y * y2;\nfloat yz = q.y * z2;\nfloat zz = q.z * z2;\nfloat wx = q.w * x2;\nfloat wy = q.w * y2;\nfloat wz = q.w * z2;\nreturn mat4(\n1. - (yy + zz), xy + wz, xz - wy, 0,\nxy - wz, 1. - (xx + zz), yz + wx, 0,\nxz + wy, yz - wx, 1. - (xx + yy), 0,\np.x, p.y, p.z, 1\n);\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\nfloat x = q.x, y = q.y, z = q.z, w = q.w;\nfloat x2 = x + x;\nfloat y2 = y + y;\nfloat z2 = z + z;\nfloat xx = x * x2;\nfloat xy = x * y2;\nfloat xz = x * z2;\nfloat yy = y * y2;\nfloat yz = y * z2;\nfloat zz = z * z2;\nfloat wx = w * x2;\nfloat wy = w * y2;\nfloat wz = w * z2;\nfloat sx = s.x;\nfloat sy = s.y;\nfloat sz = s.z;\nreturn mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n(xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n(xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\nt.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\nvec4 quat;\nquat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\nquat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\nquat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\nquat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\nreturn quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\nfloat ix = q.w * v.x + q.y * v.z - q.z * v.y;\nfloat iy = q.w * v.y + q.z * v.x - q.x * v.z;\nfloat iz = q.w * v.z + q.x * v.y - q.y * v.x;\nfloat iw = -q.x * v.x - q.y * v.y - q.z * v.z;\nv.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\nv.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\nv.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\nvec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\nvec4 rotQuat = quatMultiply(viewQuat, q);\nrotateVecFromQuat(pos, rotQuat);\nreturn pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\nfloat xOS = cos(angle) * corner.x - sin(angle) * corner.y;\nfloat yOS = sin(angle) * corner.x + cos(angle) * corner.y;\ncorner.x = xOS;\ncorner.y = yOS;\n}\nuniform vec4 mainTiling_Offset;\nuniform vec4 frameTile_velLenScale;\nuniform vec4 scale;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matViewInv;\nuniform highp mat4 cc_matViewProj;\nuniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n, vec3 eye\n, vec4 velocity\n, float velocityScale\n, float lengthScale\n, float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\nvec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\nvec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\nvec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\nvec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\npos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = vec3(1, 0, 0);\nvec3 camY = vec3(0, 0, -1);\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\nvec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\nrotateCorner(viewSpaceVert, q.z);\nvec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\nvec3 camY = vec3(0, 1, 0);\nvec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\npos.xyz += offset;\n#else\npos.x += vertOffset.x;\npos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\nvec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\naniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\nvertIndex.y = 1. - vertIndex.y;\n#endif\nreturn (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\nattribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\nattribute vec3 a_texCoord3;\nattribute vec3 a_normal;\nattribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\nvec3 compScale = scale.xyz * a_texCoord1;\nvec4 pos = vec4(a_position, 1);\n#if CC_RENDER_MODE == 1\nvec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n#if !CC_USE_WORLD_SPACE\npos = cc_matWorld * pos;\n#if CC_RENDER_MODE == 1\nvelocity = cc_matWorld * velocity;\n#endif\n#endif\n#if CC_RENDER_MODE != 4\nvec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n#if CC_RENDER_MODE == 0\nvec3 rotEuler = a_texCoord2;\n#elif CC_RENDER_MODE == 1\nvec3 rotEuler = vec3(0.);\n#else\nvec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n#endif\ncomputeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, cc_matViewInv\n#endif\n#if CC_RENDER_MODE == 1\n, cc_cameraPos.xyz\n, velocity\n, frameTile_velLenScale.z\n, frameTile_velLenScale.w\n, a_texCoord.x\n#endif\n);\ncolor = a_color;\n#else\nmat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\nmat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\npos = xform * vec4(a_texCoord3, 1);\nvec4 normal = xformNoScale * vec4(a_normal, 0);\ncolor = a_color * a_color1;\n#endif\nuv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\npos = cc_matViewProj * pos;\nreturn pos;\n}\nvoid main() { gl_Position = lpvs_main(); }",
              "frag": "\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nuniform vec4 tintColor;\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\nreturn CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"
            }], [{
              "vert": "\nprecision highp float;\nuniform highp mat4 cc_matViewProj;\n#if USE_LOCAL\nuniform highp mat4 cc_matWorld;\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 v_light;\nvarying vec2 uv0;\n#if TWO_COLORED\nattribute vec4 a_color2;\nvarying vec4 v_dark;\n#endif\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\n#if USE_LOCAL\npos = cc_matWorld * pos;\n#endif\npos = cc_matViewProj * pos;\nuv0 = a_texCoord;\nv_light = a_color;\n#if TWO_COLORED\nv_dark = a_color2;\n#endif\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\nuniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n#if USE_ALPHA_TEST\nif (color.a < alphaThreshold) discard;\n#endif\n}\nvoid ALPHA_TEST (in float alpha) {\n#if USE_ALPHA_TEST\nif (alpha < alphaThreshold) discard;\n#endif\n}\nvarying vec4 v_light;\n#if TWO_COLORED\nvarying vec4 v_dark;\n#endif\nvarying vec2 uv0;\nuniform sampler2D cc_spriteTexture;\nvec4 frag () {\nvec4 o = vec4(1, 1, 1, 1);\n#if TWO_COLORED\nvec4 texColor = vec4(1, 1, 1, 1);\ntexColor *= texture2D(cc_spriteTexture, uv0);\no.a = texColor.a * v_light.a;\no.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n#else\no *= texture2D(cc_spriteTexture, uv0);\no *= v_light;\n#endif\nALPHA_TEST(o);\nreturn o;\n}\nvoid main() { gl_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\nuniform highp mat4 cc_matViewProj;\nuniform highp vec4 cc_cameraPos;\n#if USE_LOCAL\nuniform highp mat4 cc_matWorld;\n#endif\n#if SAMPLE_FROM_RT\n#endif\nattribute vec3 a_position;\nattribute vec2 a_texCoord;\nattribute vec4 a_color;\nvarying vec4 color;\nvarying vec2 uv0;\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\n#if USE_LOCAL\npos = cc_matWorld * pos;\n#endif\n#if USE_PIXEL_ALIGNMENT\npos = cc_matView * pos;\npos.xyz = floor(pos.xyz);\npos = cc_matProj * pos;\n#else\npos = cc_matViewProj * pos;\n#endif\nuv0 = a_texCoord;\n#if SAMPLE_FROM_RT\nuv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n#endif\ncolor = a_color;\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\nreturn vec4(texture2D(tex, uv).rgb, texture2D(tex, uv + vec2(0.0, 0.5)).r);\n#else\nreturn texture2D(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\nuniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n#if USE_ALPHA_TEST\nif (color.a < alphaThreshold) discard;\n#endif\n}\nvoid ALPHA_TEST (in float alpha) {\n#if USE_ALPHA_TEST\nif (alpha < alphaThreshold) discard;\n#endif\n}\nvarying vec4 color;\n#if USE_TEXTURE\nvarying vec2 uv0;\nuniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\nvec4 o = vec4(1, 1, 1, 1);\n#if USE_TEXTURE\no *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n#if IS_GRAY\nfloat gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\no.r = o.g = o.b = gray;\n#endif\n#endif\no *= color;\nALPHA_TEST(o);\nreturn o;\n}\nvoid main() { gl_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\nattribute float a_vertexId;\nint getVertexId() {\nreturn int(a_vertexId);\n}\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\nreturn texture2D(tex, uv);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture2D(tex, x)),\ndecode32(texture2D(tex, y)),\ndecode32(texture2D(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nuniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nuniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nuniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nattribute highp vec4 a_jointAnimInfo;\n#endif\nuniform highp vec4 cc_jointTextureInfo;\nuniform highp vec4 cc_jointAnimInfo;\nuniform highp sampler2D cc_jointTexture;\n#else\nuniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_fogBase;\nuniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\nattribute vec4 a_matWorld0;\nattribute vec4 a_matWorld1;\nattribute vec4 a_matWorld2;\n#if USE_LIGHTMAP\nattribute vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nattribute float a_dyn_batch_id;\nuniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\nuniform highp vec4 cc_lightingMapUVParam;\n#endif\nuniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nvarying float v_fog_factor;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\nuniform sampler2D cc_shadowMap;\nuniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\nattribute vec4 a_color;\nvarying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\nattribute vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nvarying vec3 v_luv;\nvoid CCLightingMapCaclUV()\n{\n#if !USE_INSTANCING\nv_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\nv_luv.z = cc_lightingMapUVParam.z;\n#else\nv_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\nv_luv.z = a_lightingMapUVParam.z;\n#endif\n}\n#endif\nvoid main () {\nStandardVertInput In;\nIn.position = vec4(a_position, 1.0);\nIn.normal = a_normal;\nIn.tangent = a_tangent;\n#if CC_USE_MORPH\napplyMorph(In);\n#endif\n#if CC_USE_SKINNING\nCCSkin(In);\n#endif\nmat4 matWorld, matWorldIT;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\nmatWorldIT = matWorld;\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\nmatWorldIT = matWorld;\n#else\nmatWorld = cc_matWorld;\nmatWorldIT = cc_matWorldIT;\n#endif\nvec4 pos = matWorld * In.position;\nv_position = pos.xyz;\nv_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n#if USE_NORMAL_MAP\nv_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\nv_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n#endif\nv_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n#if SAMPLE_FROM_RT\nv_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n#endif\n#if HAS_SECOND_UV\nv_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#if SAMPLE_FROM_RT\nv_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n#endif\n#endif\n#if USE_VERTEX_COLOR\nv_color = a_color;\n#endif\n#if CC_USE_FOG == 0\nv_fog_factor = LinearFog(pos);\n#elif CC_USE_FOG == 1\nv_fog_factor = ExpFog(pos);\n#elif CC_USE_FOG == 2\nv_fog_factor = ExpSquaredFog(pos);\n#elif CC_USE_FOG == 3\nv_fog_factor = LayeredFog(pos);\n#else\nv_fog_factor = 1.0;\n#endif\nv_shadowPos = cc_matLightViewProj * pos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nCCLightingMapCaclUV();\n#endif\ngl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}",
              "frag": "\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitDir;\nuniform mediump vec4 cc_mainLitColor;\nuniform mediump vec4 cc_ambientSky;\nuniform mediump vec4 cc_ambientGround;\nuniform mediump vec4 cc_fogColor;\nuniform vec4 albedo;\nuniform vec4 albedoScaleAndCutoff;\nuniform vec4 pbrParams;\nuniform vec4 emissive;\nuniform vec4 emissiveScaleParam;\nvarying float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\nuniform lowp vec4 cc_shadowNFLSInfo;\nuniform lowp vec4 cc_shadowWHPBInfo;\nuniform lowp vec4 cc_shadowLPNNInfo;\nuniform lowp vec4 cc_shadowColor;\n#if CC_RECEIVE_SHADOW\nuniform sampler2D cc_shadowMap;\nuniform sampler2D cc_spotLightingMap;\nfloat CCGetLinearDepth (vec3 worldPos) {\nvec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\nfloat dist = length(viewStartPos.xyz);\nreturn cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n}\nfloat CCGetShadowFactorX1 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetShadowFactorX5 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetShadowFactorX9 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetShadowFactorX25 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\nfloat CCGetDirLightShadowFactorX1 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nfloat depth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetDirLightShadowFactorX5 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetDirLightShadowFactorX9 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetDirLightShadowFactorX25 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat depth = 0.0;\nfloat shadow = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\n#endif\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n#ifdef GL_EXT_shader_texture_lod\nreturn texture2DLodEXT(tex, coord, lod);\n#else\nreturn texture2D(tex, coord, lod);\n#endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n#ifdef GL_EXT_shader_texture_lod\nreturn textureCubeLodEXT(tex, coord, lod);\n#else\nreturn textureCube(tex, coord, lod);\n#endif\n}\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\nvec3 NxH = cross(N, H);\nfloat OneMinusNoHSqr = dot(NxH, NxH);\nfloat a = roughness * roughness;\nfloat n = NoH * a;\nfloat p = a / (OneMinusNoHSqr + n * n);\nreturn p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\nreturn (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\nconst vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\nconst vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\nvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\nAB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\nreturn specular * AB.x + AB.y;\n}\nstruct StandardSurface {\nvec4 albedo;\nvec3 position;\nvec3 normal;\nvec3 emissive;\nvec3 lightmap;\nfloat lightmap_test;\nfloat roughness;\nfloat metallic;\nfloat occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 L = normalize(-cc_mainLitDir.xyz);\nvec3 H = normalize(L + V);\nfloat NH = max(dot(N, H), 0.0);\nfloat NL = max(dot(N, L), 0.001);\nvec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\nvec3 diffuseContrib = diffuse;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nif (s.lightmap_test > 0.0001) {\nfinalColor = s.lightmap.rgb;\n}\n#else\ndiffuseContrib /= 3.14159265359;\n#endif\nvec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\nfinalColor *= (diffuseContrib + specularContrib);\nfloat fAmb = 0.5 - N.y * 0.5;\nvec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\nfinalColor += (ambDiff.rgb * diffuse);\n#if CC_USE_IBL\nvec3 R = normalize(reflect(-V, N));\nvec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n#if CC_USE_IBL == 2\nvec3 env = unpackRGBE(envmap);\n#else\nvec3 env = SRGBToLinear(envmap.rgb);\n#endif\nfinalColor += env * cc_ambientSky.w * specular;\n#endif\nfinalColor = finalColor * s.occlusion;\n#if CC_USE_HDR\ns.emissive *= cc_exposure.w;\n#endif\nfinalColor += s.emissive;\n#if CC_RECEIVE_SHADOW\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25(pos);\nelse if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9(pos);\nelse if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5(pos);\nelse shadowAttenuation = CCGetShadowFactorX1(pos);\nvec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\nif (cc_shadowNFLSInfo.w > 0.000001) {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n} else {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n}\n}\n#endif\nreturn vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nvarying vec3 v_luv;\nuniform sampler2D cc_lightingMap;\nvec3 UnpackLightingmap(vec4 color) {\nvec3 c;\nfloat e = 1.0 + color.a * (8.0 - 1.0);\nc.r = color.r * e;\nc.g = color.g * e;\nc.b = color.b * e;\nreturn c;\n}\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec3 v_normal;\n#if USE_VERTEX_COLOR\nvarying vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\nuniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\nvarying vec3 v_tangent;\nvarying vec3 v_bitangent;\nuniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\nuniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\nuniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\nuniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\nuniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\nvec4 baseColor = albedo;\n#if USE_VERTEX_COLOR\nbaseColor *= v_color;\n#endif\n#if USE_ALBEDO_MAP\nvec4 texColor = texture2D(albedoMap, ALBEDO_UV);\ntexColor.rgb = SRGBToLinear(texColor.rgb);\nbaseColor *= texColor;\n#endif\ns.albedo = baseColor;\ns.albedo.rgb *= albedoScaleAndCutoff.xyz;\n#if USE_ALPHA_TEST\nif (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nvec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\ns.lightmap = UnpackLightingmap(lightColor);\ns.lightmap_test = v_luv.z;\n#endif\ns.normal = v_normal;\n#if USE_NORMAL_MAP\nvec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\ns.normal =\n(nmmp.x * pbrParams.w) * normalize(v_tangent) +\n(nmmp.y * pbrParams.w) * normalize(v_bitangent) +\nnmmp.z * normalize(s.normal);\n#endif\ns.position = v_position;\nvec4 pbr = pbrParams;\n#if USE_PBR_MAP\nvec4 res = texture2D(pbrMap, PBR_UV);\npbr.x *= res.r;\npbr.y *= res.g;\npbr.z *= res.b;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\nvec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\npbr.z *= metallicRoughness.b;\npbr.y *= metallicRoughness.g;\n#endif\n#if USE_OCCLUSION_MAP\npbr.x *= texture2D(occlusionMap, PBR_UV).r;\n#endif\ns.occlusion = clamp(pbr.x, 0.0, 0.96);\ns.roughness = clamp(pbr.y, 0.04, 1.0);\ns.metallic = pbr.z;\ns.emissive = emissive.rgb * emissiveScaleParam.xyz;\n#if USE_EMISSIVE_MAP\ns.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n#endif\n}\n#if CC_FORWARD_ADD\n#if CC_PIPELINE_TYPE == 0\n# define LIGHTS_PER_PASS 1\n#else\n# define LIGHTS_PER_PASS 10\n#endif\nuniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\nuniform vec4 cc_lightColor[LIGHTS_PER_PASS];\nuniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\nuniform vec4 cc_lightDir[LIGHTS_PER_PASS];\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\nfloat factor = distSqr * invSqrAttRadius;\nfloat smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\nreturn smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\nfloat attenuation = 1.0 / max(distSqr, 0.01*0.01);\nattenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\nreturn attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\nfloat cd = dot(litDir, L);\nfloat attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\nreturn (attenuation * attenuation);\n}\nvec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 diffuseContrib = diffuse / 3.14159265359;\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 finalColor = vec3(0.0);\nint numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\nfor (int i = 0; i < LIGHTS_PER_PASS; i++) {\nif (i >= numLights) break;\nvec3 SLU = cc_lightPos[i].xyz - s.position;\nvec3 SL = normalize(SLU);\nvec3 SH = normalize(SL + V);\nfloat SNL = max(dot(N, SL), 0.001);\nfloat SNH = max(dot(N, SH), 0.0);\nfloat distSqr = dot(SLU, SLU);\nfloat litRadius = cc_lightSizeRangeAngle[i].x;\nfloat litRadiusSqr = litRadius * litRadius;\nfloat illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\nfloat attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\nattRadiusSqrInv *= attRadiusSqrInv;\nfloat att = GetDistAtt(distSqr, attRadiusSqrInv);\nvec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\nif (cc_lightPos[i].w > 0.0) {\nfloat cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\nfloat cosOuter = cc_lightSizeRangeAngle[i].z;\nfloat litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\nfloat litAngleOffset = -cosOuter * litAngleScale;\natt *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n}\nvec3 lightColor = cc_lightColor[i].rgb;\n#if CC_RECEIVE_SHADOW\nif (cc_lightPos[i].w > 0.0) {\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25(pos, s.position);\nelse if (pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9(pos, s.position);\nelse if (pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5(pos, s.position);\nelse shadowAttenuation = CCGetDirLightShadowFactorX1(pos, s.position);\nlightColor *= 1.0 - shadowAttenuation;\n}\n}\n#endif\nfinalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n}\nfinalColor = finalColor * s.occlusion;\nreturn vec4(finalColor, 0.0);\n}\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingAdditive(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\ngl_FragData[0] = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 0\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingBase(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\ngl_FragData[0] = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 1\nvoid main () {\nStandardSurface s; surf(s);\ngl_FragData[0] = s.albedo;\ngl_FragData[1] = vec4(s.position, s.roughness);\ngl_FragData[2] = vec4(s.normal, s.metallic);\ngl_FragData[3] = vec4(s.emissive, s.occlusion);\n}\n#endif"
            }, {
              "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\nattribute float a_vertexId;\nint getVertexId() {\nreturn int(a_vertexId);\n}\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\nreturn texture2D(tex, uv);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture2D(tex, x)),\ndecode32(texture2D(tex, y)),\ndecode32(texture2D(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nuniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nuniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nuniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nattribute highp vec4 a_jointAnimInfo;\n#endif\nuniform highp vec4 cc_jointTextureInfo;\nuniform highp vec4 cc_jointAnimInfo;\nuniform highp sampler2D cc_jointTexture;\n#else\nuniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\nattribute vec4 a_matWorld0;\nattribute vec4 a_matWorld1;\nattribute vec4 a_matWorld2;\n#if USE_LIGHTMAP\nattribute vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nattribute float a_dyn_batch_id;\nuniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matWorldIT;\n#endif\nuniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || USE_LIGHTMAP\nattribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\nStandardVertInput In;\nIn.position = vec4(a_position, 1.0);\nIn.normal = a_normal;\nIn.tangent = a_tangent;\n#if CC_USE_MORPH\napplyMorph(In);\n#endif\n#if CC_USE_SKINNING\nCCSkin(In);\n#endif\nmat4 matWorld, matWorldIT;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\nmatWorldIT = matWorld;\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\nmatWorldIT = matWorld;\n#else\nmatWorld = cc_matWorld;\nmatWorldIT = cc_matWorldIT;\n#endif\nv_worldPos = matWorld * In.position;\nvec4 clipPos = cc_matLightViewProj * v_worldPos;\nv_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n#if HAS_SECOND_UV\nv_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\nv_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\nreturn clipPos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nuniform vec4 albedo;\nuniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\nvec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\nret = fract(ret);\nret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\nreturn ret;\n}\nuniform highp mat4 cc_matLightView;\nuniform lowp vec4 cc_shadowNFLSInfo;\nuniform lowp vec4 cc_shadowLPNNInfo;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\nuniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\nvec4 baseColor = albedo;\n#if USE_ALBEDO_MAP\nbaseColor *= texture2D(albedoMap, ALBEDO_UV);\n#endif\n#if USE_ALPHA_TEST\nif (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n#endif\nif(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\nif (cc_shadowNFLSInfo.z > 0.000001) {\nvec4 viewStartPos = cc_matLightView * v_worldPos;\nfloat dist = length(viewStartPos.xyz);\nfloat linearDepth = cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\nreturn vec4(linearDepth, 1.0, 1.0, 1.0);\n}\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nreturn packDepthToRGBA(v_clip_depth);\n}\nreturn vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nuniform highp mat4 cc_matViewProj;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_fogBase;\nuniform mediump vec4 cc_fogAdd;\nuniform highp mat4 cc_matWorld;\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nvarying float v_fog_factor;\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\nuniform sampler2D cc_shadowMap;\nuniform sampler2D cc_spotLightingMap;\n#endif\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nvarying highp vec3 v_position;\nvarying mediump vec3 v_normal;\n#if USE_NORMALMAP\nvarying mediump vec3 v_tangent;\nvarying mediump vec3 v_binormal;\n#endif\nvarying mediump vec2 uvw;\nvarying mediump vec2 uv0;\nvarying mediump vec2 uv1;\nvarying mediump vec2 uv2;\nvarying mediump vec2 uv3;\nvarying mediump vec3 luv;\nvarying mediump vec3 diffuse;\nuniform vec4 UVScale;\nuniform vec4 lightMapUVParam;\nvoid main () {\nvec3 worldPos;\nworldPos.x = cc_matWorld[3][0] + a_position.x;\nworldPos.y = cc_matWorld[3][1] + a_position.y;\nworldPos.z = cc_matWorld[3][2] + a_position.z;\nvec4 pos = vec4(worldPos, 1.0);\npos = cc_matViewProj * pos;\nuvw = a_texCoord;\nuv0 = a_position.xz * UVScale.x;\nuv1 = a_position.xz * UVScale.y;\nuv2 = a_position.xz * UVScale.z;\nuv3 = a_position.xz * UVScale.w;\n#if USE_LIGHTMAP\nluv.xy = lightMapUVParam.xy + a_texCoord * lightMapUVParam.zw;\nluv.z = lightMapUVParam.z;\n#endif\nv_position = worldPos;\nv_normal = a_normal;\n#if CC_USE_FOG == 0\nv_fog_factor = LinearFog(vec4(worldPos, 1.0));\n#elif CC_USE_FOG == 1\nv_fog_factor = ExpFog(vec4(worldPos, 1.0));\n#elif CC_USE_FOG == 2\nv_fog_factor = ExpSquaredFog(vec4(worldPos, 1.0));\n#elif CC_USE_FOG == 3\nv_fog_factor = LayeredFog(vec4(worldPos, 1.0));\n#else\nv_fog_factor = 1.0;\n#endif\n#if USE_NORMALMAP\nv_tangent = vec3(1.0, 0.0, 0.0);\nv_binormal = vec3(0.0, 0.0, 1.0);\nv_binormal = cross(v_tangent, a_normal);\nv_tangent = cross(a_normal, v_binormal);\n#endif\nv_shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\ngl_Position = pos;\n}",
              "frag": "\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitDir;\nuniform mediump vec4 cc_mainLitColor;\nuniform mediump vec4 cc_ambientSky;\nuniform mediump vec4 cc_ambientGround;\nuniform mediump vec4 cc_fogColor;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\nuniform lowp vec4 cc_shadowNFLSInfo;\nuniform lowp vec4 cc_shadowWHPBInfo;\nuniform lowp vec4 cc_shadowLPNNInfo;\nuniform lowp vec4 cc_shadowColor;\n#if CC_RECEIVE_SHADOW\nuniform sampler2D cc_shadowMap;\nuniform sampler2D cc_spotLightingMap;\nfloat CCGetLinearDepth (vec3 worldPos) {\nvec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\nfloat dist = length(viewStartPos.xyz);\nreturn cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n}\nfloat CCGetShadowFactorX1 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetShadowFactorX5 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetShadowFactorX9 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetShadowFactorX25 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\nfloat CCGetDirLightShadowFactorX1 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nfloat depth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetDirLightShadowFactorX5 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetDirLightShadowFactorX9 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetDirLightShadowFactorX25 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat depth = 0.0;\nfloat shadow = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\n#endif\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n#ifdef GL_EXT_shader_texture_lod\nreturn texture2DLodEXT(tex, coord, lod);\n#else\nreturn texture2D(tex, coord, lod);\n#endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n#ifdef GL_EXT_shader_texture_lod\nreturn textureCubeLodEXT(tex, coord, lod);\n#else\nreturn textureCube(tex, coord, lod);\n#endif\n}\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\nvec3 NxH = cross(N, H);\nfloat OneMinusNoHSqr = dot(NxH, NxH);\nfloat a = roughness * roughness;\nfloat n = NoH * a;\nfloat p = a / (OneMinusNoHSqr + n * n);\nreturn p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\nreturn (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\nconst vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\nconst vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\nvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\nAB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\nreturn specular * AB.x + AB.y;\n}\nstruct StandardSurface {\nvec4 albedo;\nvec3 position;\nvec3 normal;\nvec3 emissive;\nvec3 lightmap;\nfloat lightmap_test;\nfloat roughness;\nfloat metallic;\nfloat occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 L = normalize(-cc_mainLitDir.xyz);\nvec3 H = normalize(L + V);\nfloat NH = max(dot(N, H), 0.0);\nfloat NL = max(dot(N, L), 0.001);\nvec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\nvec3 diffuseContrib = diffuse;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nif (s.lightmap_test > 0.0001) {\nfinalColor = s.lightmap.rgb;\n}\n#else\ndiffuseContrib /= 3.14159265359;\n#endif\nvec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\nfinalColor *= (diffuseContrib + specularContrib);\nfloat fAmb = 0.5 - N.y * 0.5;\nvec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\nfinalColor += (ambDiff.rgb * diffuse);\n#if CC_USE_IBL\nvec3 R = normalize(reflect(-V, N));\nvec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n#if CC_USE_IBL == 2\nvec3 env = unpackRGBE(envmap);\n#else\nvec3 env = SRGBToLinear(envmap.rgb);\n#endif\nfinalColor += env * cc_ambientSky.w * specular;\n#endif\nfinalColor = finalColor * s.occlusion;\n#if CC_USE_HDR\ns.emissive *= cc_exposure.w;\n#endif\nfinalColor += s.emissive;\n#if CC_RECEIVE_SHADOW\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25(pos);\nelse if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9(pos);\nelse if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5(pos);\nelse shadowAttenuation = CCGetShadowFactorX1(pos);\nvec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\nif (cc_shadowNFLSInfo.w > 0.000001) {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n} else {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n}\n}\n#endif\nreturn vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nvarying float v_fog_factor;\nvarying highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nvarying vec3 v_luv;\nuniform sampler2D cc_lightingMap;\nvec3 UnpackLightingmap(vec4 color) {\nvec3 c;\nfloat e = 1.0 + color.a * (8.0 - 1.0);\nc.r = color.r * e;\nc.g = color.g * e;\nc.b = color.b * e;\nreturn c;\n}\n#endif\nvarying highp vec3 v_position;\nvarying mediump vec3 v_normal;\n#if USE_NORMALMAP\nvarying mediump vec3 v_tangent;\nvarying mediump vec3 v_binormal;\n#endif\nvarying mediump vec2 uvw;\nvarying mediump vec2 uv0;\nvarying mediump vec2 uv1;\nvarying mediump vec2 uv2;\nvarying mediump vec2 uv3;\nvarying mediump vec3 diffuse;\nvarying mediump vec3 luv;\nuniform vec4 metallic;\nuniform vec4 roughness;\nuniform sampler2D weightMap;\nuniform sampler2D detailMap0;\nuniform sampler2D detailMap1;\nuniform sampler2D detailMap2;\nuniform sampler2D detailMap3;\nuniform sampler2D normalMap0;\nuniform sampler2D normalMap1;\nuniform sampler2D normalMap2;\nuniform sampler2D normalMap3;\nuniform sampler2D lightMap;\nvoid surf (out StandardSurface s) {\n#if LAYERS > 1\nvec4 w = texture2D(weightMap, uvw);\n#endif\nvec4 baseColor = vec4(0, 0, 0, 0);\n#if LAYERS == 1\nbaseColor = texture2D(detailMap0, uv0);\n#elif LAYERS == 2\nbaseColor += texture2D(detailMap0, uv0) * w.r;\nbaseColor += texture2D(detailMap1, uv1) * w.g;\n#elif LAYERS == 3\nbaseColor += texture2D(detailMap0, uv0) * w.r;\nbaseColor += texture2D(detailMap1, uv1) * w.g;\nbaseColor += texture2D(detailMap2, uv2) * w.b;\n#elif LAYERS == 4\nbaseColor += texture2D(detailMap0, uv0) * w.r;\nbaseColor += texture2D(detailMap1, uv1) * w.g;\nbaseColor += texture2D(detailMap2, uv2) * w.b;\nbaseColor += texture2D(detailMap3, uv3) * w.a;\n#else\nbaseColor = texture2D(detailMap0, uv0);\n#endif\ns.position = v_position;\n#if USE_NORMALMAP\nvec4 baseNormal = vec4(0, 0, 0, 0);\n#if LAYERS == 1\nbaseNormal = texture2D(normalMap0, uv0);\n#elif LAYERS == 2\nbaseNormal += texture2D(normalMap0, uv0) * w.r;\nbaseNormal += texture2D(normalMap1, uv1) * w.g;\n#elif LAYERS == 3\nbaseNormal += texture2D(normalMap0, uv0) * w.r;\nbaseNormal += texture2D(normalMap1, uv1) * w.g;\nbaseNormal += texture2D(normalMap2, uv2) * w.b;\n#elif LAYERS == 4\nbaseNormal += texture2D(normalMap0, uv0) * w.r;\nbaseNormal += texture2D(normalMap1, uv1) * w.g;\nbaseNormal += texture2D(normalMap2, uv2) * w.b;\nbaseNormal += texture2D(normalMap3, uv3) * w.a;\n#else\nbaseNormal = texture2D(normalMap0, uv0);\n#endif\nvec3 nmmp = baseNormal.xyz - vec3(0.5);\ns.normal =\nnmmp.x * normalize(v_tangent) +\nnmmp.y * normalize(v_binormal) +\nnmmp.z * normalize(v_normal);\n#else\ns.normal = v_normal;\n#endif\ns.albedo = vec4(SRGBToLinear(baseColor.rgb), 1.0);\ns.occlusion = 1.0;\n#if USE_PBR\ns.roughness = 0.0;\n#if LAYERS == 1\ns.roughness = roughness.x;\n#elif LAYERS == 2\ns.roughness += roughness.x * w.r;\ns.roughness += roughness.y * w.g;\n#elif LAYERS == 3\ns.roughness += roughness.x * w.r;\ns.roughness += roughness.y * w.g;\ns.roughness += roughness.z * w.b;\n#elif LAYERS == 4\ns.roughness += roughness.x * w.r;\ns.roughness += roughness.y * w.g;\ns.roughness += roughness.z * w.b;\ns.roughness += roughness.w * w.a;\n#else\ns.roughness = 1.0;\n#endif\ns.metallic = 0.0;\n#if LAYERS == 1\ns.metallic = metallic.x;\n#elif LAYERS == 2\ns.metallic += metallic.x * w.r;\ns.metallic += metallic.y * w.g;\n#elif LAYERS == 3\ns.metallic += metallic.x * w.r;\ns.metallic += metallic.y * w.g;\ns.metallic += metallic.z * w.b;\n#elif LAYERS == 4\ns.metallic += metallic.x * w.r;\ns.metallic += metallic.y * w.g;\ns.metallic += metallic.z * w.b;\ns.metallic += metallic.w * w.a;\n#else\ns.metallic = 0.0;\n#endif\n#else\ns.roughness = 1.0;\ns.metallic = 0.0;\n#endif\ns.emissive = vec3(0.0, 0.0, 0.0);\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nvec4 lightColor = texture2D(lightMap, luv.xy);\ns.lightmap = UnpackLightingmap(lightColor);\ns.lightmap_test = luv.z;\n#endif\n}\n#if CC_FORWARD_ADD\n#if CC_PIPELINE_TYPE == 0\n# define LIGHTS_PER_PASS 1\n#else\n# define LIGHTS_PER_PASS 10\n#endif\nuniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\nuniform vec4 cc_lightColor[LIGHTS_PER_PASS];\nuniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\nuniform vec4 cc_lightDir[LIGHTS_PER_PASS];\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\nfloat factor = distSqr * invSqrAttRadius;\nfloat smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\nreturn smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\nfloat attenuation = 1.0 / max(distSqr, 0.01*0.01);\nattenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\nreturn attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\nfloat cd = dot(litDir, L);\nfloat attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\nreturn (attenuation * attenuation);\n}\nvec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 diffuseContrib = diffuse / 3.14159265359;\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 finalColor = vec3(0.0);\nint numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\nfor (int i = 0; i < LIGHTS_PER_PASS; i++) {\nif (i >= numLights) break;\nvec3 SLU = cc_lightPos[i].xyz - s.position;\nvec3 SL = normalize(SLU);\nvec3 SH = normalize(SL + V);\nfloat SNL = max(dot(N, SL), 0.001);\nfloat SNH = max(dot(N, SH), 0.0);\nfloat distSqr = dot(SLU, SLU);\nfloat litRadius = cc_lightSizeRangeAngle[i].x;\nfloat litRadiusSqr = litRadius * litRadius;\nfloat illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\nfloat attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\nattRadiusSqrInv *= attRadiusSqrInv;\nfloat att = GetDistAtt(distSqr, attRadiusSqrInv);\nvec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\nif (cc_lightPos[i].w > 0.0) {\nfloat cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\nfloat cosOuter = cc_lightSizeRangeAngle[i].z;\nfloat litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\nfloat litAngleOffset = -cosOuter * litAngleScale;\natt *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n}\nvec3 lightColor = cc_lightColor[i].rgb;\n#if CC_RECEIVE_SHADOW\nif (cc_lightPos[i].w > 0.0) {\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25(pos, s.position);\nelse if (pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9(pos, s.position);\nelse if (pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5(pos, s.position);\nelse shadowAttenuation = CCGetDirLightShadowFactorX1(pos, s.position);\nlightColor *= 1.0 - shadowAttenuation;\n}\n}\n#endif\nfinalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n}\nfinalColor = finalColor * s.occlusion;\nreturn vec4(finalColor, 0.0);\n}\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingAdditive(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\ngl_FragData[0] = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 0\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingBase(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\ngl_FragData[0] = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 1\nvoid main () {\nStandardSurface s; surf(s);\ngl_FragData[0] = s.albedo;\ngl_FragData[1] = vec4(s.position, s.roughness);\ngl_FragData[2] = vec4(s.normal, s.metallic);\ngl_FragData[3] = vec4(s.emissive, s.occlusion);\n}\n#endif"
            }, {
              "vert": "\nprecision highp float;\nuniform highp mat4 cc_matWorld;\nuniform highp mat4 cc_matLightViewProj;\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nvarying vec2 v_clip_depth;\nvec4 vert () {\nvec4 worldPos;\nworldPos.x = cc_matWorld[3][0] + a_position.x;\nworldPos.y = cc_matWorld[3][1] + a_position.y;\nworldPos.z = cc_matWorld[3][2] + a_position.z;\nworldPos.w = 1.0;\nvec4 clipPos = cc_matLightViewProj * worldPos;\nv_clip_depth = clipPos.zw;\nreturn clipPos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nvec4 packDepthToRGBA (float depth) {\nvec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\nret = fract(ret);\nret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\nreturn ret;\n}\nvarying vec2 v_clip_depth;\nvec4 frag () {\nreturn packDepthToRGBA(v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5);\n}\nvoid main() { gl_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\nattribute float a_vertexId;\nint getVertexId() {\nreturn int(a_vertexId);\n}\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\nreturn texture2D(tex, uv);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture2D(tex, x)),\ndecode32(texture2D(tex, y)),\ndecode32(texture2D(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nuniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nuniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nuniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nattribute highp vec4 a_jointAnimInfo;\n#endif\nuniform highp vec4 cc_jointTextureInfo;\nuniform highp vec4 cc_jointAnimInfo;\nuniform highp sampler2D cc_jointTexture;\n#else\nuniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_fogBase;\nuniform mediump vec4 cc_fogAdd;\n#if USE_INSTANCING\nattribute vec4 a_matWorld0;\nattribute vec4 a_matWorld1;\nattribute vec4 a_matWorld2;\n#if USE_LIGHTMAP\nattribute vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nattribute float a_dyn_batch_id;\nuniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\n#endif\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nvarying float v_fog_factor;\n#if USE_VERTEX_COLOR\nattribute lowp vec4 a_color;\nvarying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\nvarying vec2 v_uv;\nuniform vec4 tilingOffset;\n#endif\nvec4 vert () {\nvec4 position;\nposition = vec4(a_position, 1.0);\n#if CC_USE_MORPH\napplyMorph(position);\n#endif\n#if CC_USE_SKINNING\nCCSkin(position);\n#endif\nmat4 matWorld;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\n#else\nmatWorld = cc_matWorld;\n#endif\n#if USE_TEXTURE\nv_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n#if SAMPLE_FROM_RT\nv_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n#endif\n#endif\n#if USE_VERTEX_COLOR\nv_color = a_color;\n#endif\n#if CC_USE_FOG == 0\nv_fog_factor = LinearFog(matWorld * position);\n#elif CC_USE_FOG == 1\nv_fog_factor = ExpFog(matWorld * position);\n#elif CC_USE_FOG == 2\nv_fog_factor = ExpSquaredFog(matWorld * position);\n#elif CC_USE_FOG == 3\nv_fog_factor = LayeredFog(matWorld * position);\n#else\nv_fog_factor = 1.0;\n#endif\nreturn cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_fogColor;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nvarying float v_fog_factor;\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\nvarying vec2 v_uv;\nuniform sampler2D mainTexture;\n#endif\nuniform vec4 mainColor;\nuniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\nvarying lowp vec4 v_color;\n#endif\nvec4 frag () {\nvec4 o = mainColor;\no.rgb *= colorScaleAndCutoff.xyz;\n#if USE_VERTEX_COLOR\no *= v_color;\n#endif\n#if USE_TEXTURE\no *= texture2D(mainTexture, v_uv);\n#endif\n#if USE_ALPHA_TEST\nif (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n#endif\no = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, o.rgb, v_fog_factor), o.a);\nreturn CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\nuniform highp vec4 cc_cameraPos;\nvarying vec2 v_uv;\nvoid main () {\nvec4 position;\nposition = vec4(a_position, 1.0);\nposition.xy = cc_cameraPos.w == 0.0 ? vec2(position.xy.x, -position.xy.y) : position.xy;\ngl_Position = vec4(position.x, position.y, 1.0, 1.0);\nv_uv = a_texCoord;\n}",
              "frag": "\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp vec4 cc_cameraPos;\nuniform mediump vec4 cc_exposure;\nuniform mediump vec4 cc_mainLitDir;\nuniform mediump vec4 cc_mainLitColor;\nuniform mediump vec4 cc_ambientSky;\nuniform mediump vec4 cc_ambientGround;\nuniform mediump vec4 cc_fogColor;\nuniform mediump vec4 cc_fogBase;\nuniform mediump vec4 cc_fogAdd;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\nuniform highp mat4 cc_matLightViewProj;\nuniform lowp vec4 cc_shadowNFLSInfo;\nuniform lowp vec4 cc_shadowWHPBInfo;\nuniform lowp vec4 cc_shadowLPNNInfo;\nuniform lowp vec4 cc_shadowColor;\n#if CC_RECEIVE_SHADOW\nuniform sampler2D cc_shadowMap;\nuniform sampler2D cc_spotLightingMap;\nfloat CCGetLinearDepth (vec3 worldPos) {\nvec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\nfloat dist = length(viewStartPos.xyz);\nreturn cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n}\nfloat CCGetShadowFactorX1 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetShadowFactorX5 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetShadowFactorX9 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetShadowFactorX25 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture2D(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\nfloat CCGetDirLightShadowFactorX1 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nfloat depth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetDirLightShadowFactorX5 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture2D(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetDirLightShadowFactorX9 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetDirLightShadowFactorX25 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat depth = 0.0;\nfloat shadow = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture2D(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\n#endif\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n#ifdef GL_EXT_shader_texture_lod\nreturn texture2DLodEXT(tex, coord, lod);\n#else\nreturn texture2D(tex, coord, lod);\n#endif\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n#ifdef GL_EXT_shader_texture_lod\nreturn textureCubeLodEXT(tex, coord, lod);\n#else\nreturn textureCube(tex, coord, lod);\n#endif\n}\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\nvec3 NxH = cross(N, H);\nfloat OneMinusNoHSqr = dot(NxH, NxH);\nfloat a = roughness * roughness;\nfloat n = NoH * a;\nfloat p = a / (OneMinusNoHSqr + n * n);\nreturn p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\nreturn (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\nconst vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\nconst vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\nvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\nAB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\nreturn specular * AB.x + AB.y;\n}\nstruct StandardSurface {\nvec4 albedo;\nvec3 position;\nvec3 normal;\nvec3 emissive;\nvec3 lightmap;\nfloat lightmap_test;\nfloat roughness;\nfloat metallic;\nfloat occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 L = normalize(-cc_mainLitDir.xyz);\nvec3 H = normalize(L + V);\nfloat NH = max(dot(N, H), 0.0);\nfloat NL = max(dot(N, L), 0.001);\nvec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\nvec3 diffuseContrib = diffuse;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nif (s.lightmap_test > 0.0001) {\nfinalColor = s.lightmap.rgb;\n}\n#else\ndiffuseContrib /= 3.14159265359;\n#endif\nvec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\nfinalColor *= (diffuseContrib + specularContrib);\nfloat fAmb = 0.5 - N.y * 0.5;\nvec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\nfinalColor += (ambDiff.rgb * diffuse);\n#if CC_USE_IBL\nvec3 R = normalize(reflect(-V, N));\nvec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n#if CC_USE_IBL == 2\nvec3 env = unpackRGBE(envmap);\n#else\nvec3 env = SRGBToLinear(envmap.rgb);\n#endif\nfinalColor += env * cc_ambientSky.w * specular;\n#endif\nfinalColor = finalColor * s.occlusion;\n#if CC_USE_HDR\ns.emissive *= cc_exposure.w;\n#endif\nfinalColor += s.emissive;\n#if CC_RECEIVE_SHADOW\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25(pos);\nelse if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9(pos);\nelse if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5(pos);\nelse shadowAttenuation = CCGetShadowFactorX1(pos);\nvec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\nif (cc_shadowNFLSInfo.w > 0.000001) {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n} else {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n}\n}\n#endif\nreturn vec4(finalColor, s.albedo.a);\n}\n#if CC_PIPELINE_TYPE == 0\n# define LIGHTS_PER_PASS 1\n#else\n# define LIGHTS_PER_PASS 10\n#endif\nuniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\nuniform vec4 cc_lightColor[LIGHTS_PER_PASS];\nuniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\nuniform vec4 cc_lightDir[LIGHTS_PER_PASS];\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\nfloat factor = distSqr * invSqrAttRadius;\nfloat smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\nreturn smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\nfloat attenuation = 1.0 / max(distSqr, 0.01*0.01);\nattenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\nreturn attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\nfloat cd = dot(litDir, L);\nfloat attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\nreturn (attenuation * attenuation);\n}\nvec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 diffuseContrib = diffuse / 3.14159265359;\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 finalColor = vec3(0.0);\nint numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\nfor (int i = 0; i < LIGHTS_PER_PASS; i++) {\nif (i >= numLights) break;\nvec3 SLU = cc_lightPos[i].xyz - s.position;\nvec3 SL = normalize(SLU);\nvec3 SH = normalize(SL + V);\nfloat SNL = max(dot(N, SL), 0.001);\nfloat SNH = max(dot(N, SH), 0.0);\nfloat distSqr = dot(SLU, SLU);\nfloat litRadius = cc_lightSizeRangeAngle[i].x;\nfloat litRadiusSqr = litRadius * litRadius;\nfloat illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\nfloat attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\nattRadiusSqrInv *= attRadiusSqrInv;\nfloat att = GetDistAtt(distSqr, attRadiusSqrInv);\nvec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\nif (cc_lightPos[i].w > 0.0) {\nfloat cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\nfloat cosOuter = cc_lightSizeRangeAngle[i].z;\nfloat litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\nfloat litAngleOffset = -cosOuter * litAngleScale;\natt *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n}\nvec3 lightColor = cc_lightColor[i].rgb;\n#if CC_RECEIVE_SHADOW\nif (cc_lightPos[i].w > 0.0) {\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25(pos, s.position);\nelse if (pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9(pos, s.position);\nelse if (pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5(pos, s.position);\nelse shadowAttenuation = CCGetDirLightShadowFactorX1(pos, s.position);\nlightColor *= 1.0 - shadowAttenuation;\n}\n}\n#endif\nfinalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n}\nfinalColor = finalColor * s.occlusion;\nreturn vec4(finalColor, 0.0);\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nvarying vec2 v_uv;\nuniform sampler2D cc_gbuffer_albedoMap;\nuniform sampler2D cc_gbuffer_positionMap;\nuniform sampler2D cc_gbuffer_normalMap;\nuniform sampler2D cc_gbuffer_emissiveMap;\nvoid main () {\nStandardSurface s;\nvec4 albedoMap = texture2D(cc_gbuffer_albedoMap,v_uv);\nvec4 positionMap = texture2D(cc_gbuffer_positionMap,v_uv);\nvec4 normalMap = texture2D(cc_gbuffer_normalMap,v_uv);\nvec4 emissiveMap = texture2D(cc_gbuffer_emissiveMap,v_uv);\ns.albedo = albedoMap;\ns.position = positionMap.xyz;\ns.roughness = positionMap.w;\ns.normal = normalMap.xyz;\ns.metallic = normalMap.w;\ns.emissive = emissiveMap.xyz;\ns.occlusion = emissiveMap.w;\nfloat fogFactor;\n#if CC_USE_FOG == 0\nfogFactor = LinearFog(vec4(s.position, 1));\n#elif CC_USE_FOG == 1\nfogFactor = ExpFog(vec4(s.position, 1));\n#elif CC_USE_FOG == 2\nfogFactor = ExpSquaredFog(vec4(s.position, 1));\n#elif CC_USE_FOG == 3\nfogFactor = LayeredFog(vec4(s.position, 1));\n#else\nfogFactor = 1.0;\n#endif\nvec4 shadowPos;\nshadowPos = cc_matLightViewProj * vec4(s.position, 1);\nvec4 color = CCStandardShadingBase(s, shadowPos) +\nCCStandardShadingAdditive(s, shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, fogFactor), color.a);\ngl_FragColor = CCFragOutput(color);\n}"
            }], [{
              "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\nattribute float a_vertexId;\nint getVertexId() {\nreturn int(a_vertexId);\n}\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\nreturn texture2D(tex, uv);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture2D(tex, x)),\ndecode32(texture2D(tex, y)),\ndecode32(texture2D(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nuniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nuniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nuniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nattribute highp vec4 a_jointAnimInfo;\n#endif\nuniform highp vec4 cc_jointTextureInfo;\nuniform highp vec4 cc_jointAnimInfo;\nuniform highp sampler2D cc_jointTexture;\n#else\nuniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\n#if USE_INSTANCING\nattribute vec4 a_matWorld0;\nattribute vec4 a_matWorld1;\nattribute vec4 a_matWorld2;\n#if USE_LIGHTMAP\nattribute vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nattribute float a_dyn_batch_id;\nuniform highp mat4 cc_matWorlds[10];\n#else\nuniform highp mat4 cc_matWorld;\n#endif\nuniform highp mat4 cc_matLightPlaneProj;\nvec4 vert () {\nvec4 position;\nposition = vec4(a_position, 1.0);\n#if CC_USE_MORPH\napplyMorph(position);\n#endif\n#if CC_USE_SKINNING\nCCSkin(position);\n#endif\nmat4 matWorld;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\n#else\nmatWorld = cc_matWorld;\n#endif\nposition = cc_matProj * (cc_matView * cc_matLightPlaneProj * matWorld) * position;\nposition.z -= 0.0001;\nreturn position;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nuniform lowp vec4 cc_shadowColor;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nvec4 frag () {\nreturn CCFragOutput(cc_shadowColor);\n}\nvoid main() { gl_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_MORPH\nattribute float a_vertexId;\nint getVertexId() {\nreturn int(a_vertexId);\n}\nuniform vec4 cc_displacementWeights[15];\nuniform vec4 cc_displacementTextureInfo;\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\nreturn texture2D(tex, uv);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture2D(tex, x)),\ndecode32(texture2D(tex, y)),\ndecode32(texture2D(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nuniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nuniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nuniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nattribute vec4 a_joints;\nattribute vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nattribute highp vec4 a_jointAnimInfo;\n#endif\nuniform highp vec4 cc_jointTextureInfo;\nuniform highp vec4 cc_jointAnimInfo;\nuniform highp sampler2D cc_jointTexture;\n#else\nuniform highp vec4 cc_joints[90];\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nuniform highp vec4 cc_cameraPos;\nvarying vec2 v_uv;\nvoid main () {\nStandardVertInput In;\nIn.position = vec4(a_position, 1.0);\nIn.normal = a_normal;\nIn.tangent = a_tangent;\n#if CC_USE_MORPH\napplyMorph(In);\n#endif\n#if CC_USE_SKINNING\nCCSkin(In);\n#endif\nIn.position.xy = cc_cameraPos.w == 0.0 ? vec2(In.position.xy.x, -In.position.xy.y) : In.position.xy;\ngl_Position = In.position;\ngl_Position.y = gl_Position.y;\nv_uv = a_texCoord;\n}",
              "frag": "\nprecision highp float;\nuniform mediump vec4 cc_screenSize;\nvarying vec2 v_uv;\nuniform sampler2D cc_lighting_resultMap;\nvoid texcoords(vec2 fragCoord, vec2 resolution,\nout vec2 v_rgbNW, out vec2 v_rgbNE,\nout vec2 v_rgbSW, out vec2 v_rgbSE,\nout vec2 v_rgbM) {\nvec2 inverseVP = 1.0 / resolution.xy;\nv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\nv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\nv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\nv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\nv_rgbM = vec2(fragCoord * inverseVP);\n}\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\nvec2 v_rgbNW, vec2 v_rgbNE,\nvec2 v_rgbSW, vec2 v_rgbSE,\nvec2 v_rgbM) {\nvec4 color;\nmediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\nvec3 rgbNW = texture2D(tex, v_rgbNW).xyz;\nvec3 rgbNE = texture2D(tex, v_rgbNE).xyz;\nvec3 rgbSW = texture2D(tex, v_rgbSW).xyz;\nvec3 rgbSE = texture2D(tex, v_rgbSE).xyz;\nvec4 texColor = texture2D(tex, v_rgbM);\nvec3 rgbM  = texColor.xyz;\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat lumaNW = dot(rgbNW, luma);\nfloat lumaNE = dot(rgbNE, luma);\nfloat lumaSW = dot(rgbSW, luma);\nfloat lumaSE = dot(rgbSE, luma);\nfloat lumaM  = dot(rgbM,  luma);\nfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\nfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\nmediump vec2 dir;\ndir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\ndir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\nfloat dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n(0.25 * (1.0 / 8.0)), (1.0/ 128.0));\nfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\ndir = min(vec2(8.0, 8.0),\nmax(vec2(-8.0, -8.0),\ndir * rcpDirMin)) * inverseVP;\nvec3 rgbA = 0.5 * (\ntexture2D(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\ntexture2D(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\nvec3 rgbB = rgbA * 0.5 + 0.25 * (\ntexture2D(tex, fragCoord * inverseVP + dir * -0.5).xyz +\ntexture2D(tex, fragCoord * inverseVP + dir * 0.5).xyz);\nfloat lumaB = dot(rgbB, luma);\nif ((lumaB < lumaMin) || (lumaB > lumaMax))\ncolor = vec4(rgbA, texColor.a);\nelse\ncolor = vec4(rgbB, texColor.a);\nreturn color;\n}\nvoid main () {\nmediump vec2 v_rgbNW;\nmediump vec2 v_rgbNE;\nmediump vec2 v_rgbSW;\nmediump vec2 v_rgbSE;\nmediump vec2 v_rgbM;\nvec2 resolution = cc_screenSize.xy;\nvec2 fragCoord = v_uv * resolution;\ntexcoords(fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\ngl_FragColor = fxaa(cc_lighting_resultMap, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}"
            }], [{
              "vert": "\nprecision highp float;\nuniform highp mat4 cc_matView;\nuniform highp mat4 cc_matProj;\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\nvarying mediump vec4 viewDir;\nvec4 vert () {\nviewDir = vec4(a_position, 1.0);\nmat4 matViewRotOnly = mat4(mat3(cc_matView));\nmat4 matProj = cc_matProj;\nif (matProj[3].w > 0.0) {\nvec2 scale = vec2(48.0, 24.0);\nmatProj[0].xy *= scale;\nmatProj[1].xy *= scale;\nmatProj[2].zw = vec2(-1.0);\nmatProj[3].zw = vec2(0.0);\n}\nvec4 pos = matProj * matViewRotOnly * viewDir;\npos.z = 0.99999 * pos.w;\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nuniform mediump vec4 cc_ambientSky;\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nvarying mediump vec4 viewDir;\nvec4 frag () {\n#if USE_RGBE_CUBEMAP\nvec3 c = unpackRGBE(textureCube(cc_environment, viewDir.xyz));\n#else\nvec3 c = SRGBToLinear(textureCube(cc_environment, viewDir.xyz).rgb);\n#endif\nreturn CCFragOutput(vec4(c * cc_ambientSky.w, 1.0));\n}\nvoid main() { gl_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nuniform highp mat4 cc_matViewProj;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec2 v_uv;\nuniform vec4 offset;\nuniform vec4 digits[20];\nfloat getComponent(vec4 v, float i) {\nif (i < 1.0) { return v.x; }\nelse if (i < 2.0) { return v.y; }\nelse if (i < 3.0) { return v.z; }\nelse { return v.w; }\n}\nvec4 vert () {\nvec4 position = cc_matViewProj * vec4(a_position, 1.0);\nposition.xy += offset.xy;\nv_uv = a_color.xy;\nif (a_color.z >= 0.0) {\nfloat n = getComponent(digits[int(a_color.z)], a_color.w);\nv_uv += vec2(offset.z * n, 0.0);\n}\nreturn position;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nuniform mediump vec4 cc_exposure;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nvarying vec2 v_uv;\nuniform sampler2D mainTexture;\nvec4 frag () {\nreturn CCFragOutput(texture2D(mainTexture, v_uv));\n}\nvoid main() { gl_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nattribute vec2 a_position;\nattribute vec2 a_texCoord;\nvarying vec2 v_uv;\nvarying float v_percent;\nuniform vec4 u_buffer0;\nuniform vec4 u_buffer1;\nuniform mat4 u_projection;\nvec4 vert () {\nvec2 worldPos = a_position * u_buffer1.xy + u_buffer1.zw;\nvec2 clipSpace = worldPos / u_buffer0.xy * 2.0 - 1.0;\nvec4 screenPos = u_projection * vec4(clipSpace, 0.0, 1.0);\nv_uv = a_texCoord;\nv_percent = u_buffer0.z;\nreturn screenPos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nvarying vec2 v_uv;\nvarying float v_percent;\nuniform sampler2D mainTexture;\nvec4 frag () {\nvec4 color = texture2D(mainTexture, v_uv);\nfloat precent = clamp(v_percent, 0.0, 1.0);\ncolor.xyz *= precent;\nreturn color;\n}\nvoid main() { gl_FragColor = frag(); }"
            }]];

            const glsl3 = [[{
              "vert": "\nprecision mediump float;\nlayout(std140) uniform Constants {\nvec4 mainTiling_Offset;\nvec4 frameTile_velLenScale;\nvec4 scale;\n};\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\nmat3 m = mat3(xAxis,yAxis,zAxis);\nfloat trace = m[0][0] + m[1][1] + m[2][2];\nvec4 quat;\nif (trace > 0.) {\nfloat s = 0.5 / sqrt(trace + 1.0);\nquat.w = 0.25 / s;\nquat.x = (m[2][1] - m[1][2]) * s;\nquat.y = (m[0][2] - m[2][0]) * s;\nquat.z = (m[1][0] - m[0][1]) * s;\n} else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\nfloat s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\nquat.w = (m[2][1] - m[1][2]) / s;\nquat.x = 0.25 * s;\nquat.y = (m[0][1] + m[1][0]) / s;\nquat.z = (m[0][2] + m[2][0]) / s;\n} else if (m[1][1] > m[2][2]) {\nfloat s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\nquat.w = (m[0][2] - m[2][0]) / s;\nquat.x = (m[0][1] + m[1][0]) / s;\nquat.y = 0.25 * s;\nquat.z = (m[1][2] + m[2][1]) / s;\n} else {\nfloat s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\nquat.w = (m[1][0] - m[0][1]) / s;\nquat.x = (m[0][2] + m[2][0]) / s;\nquat.y = (m[1][2] + m[2][1]) / s;\nquat.z = 0.25 * s;\n}\nfloat len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\nif (len > 0.) {\nlen = 1. / sqrt(len);\nquat.x = quat.x * len;\nquat.y = quat.y * len;\nquat.z = quat.z * len;\nquat.w = quat.w * len;\n}\nreturn quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\nfloat x = angle.x / 2.;\nfloat y = angle.y / 2.;\nfloat z = angle.z / 2.;\nfloat sx = sin(x);\nfloat cx = cos(x);\nfloat sy = sin(y);\nfloat cy = cos(y);\nfloat sz = sin(z);\nfloat cz = cos(z);\nvec4 quat = vec4(0);\nquat.x = sx * cy * cz + cx * sy * sz;\nquat.y = cx * sy * cz + sx * cy * sz;\nquat.z = cx * cy * sz - sx * sy * cz;\nquat.w = cx * cy * cz - sx * sy * sz;\nreturn quat;\n}\nvec4 quatMultiply (vec4 a, vec4 b){\nvec4 quat;\nquat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\nquat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\nquat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\nquat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\nreturn quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\nfloat ix = q.w * v.x + q.y * v.z - q.z * v.y;\nfloat iy = q.w * v.y + q.z * v.x - q.x * v.z;\nfloat iz = q.w * v.z + q.x * v.y - q.y * v.x;\nfloat iw = -q.x * v.x - q.y * v.y - q.z * v.z;\nv.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\nv.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\nv.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\nvec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\nvec4 rotQuat = quatMultiply(viewQuat, q);\nrotateVecFromQuat(pos, rotQuat);\nreturn pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\nfloat xOS = cos(angle) * corner.x - sin(angle) * corner.y;\nfloat yOS = sin(angle) * corner.x + cos(angle) * corner.y;\ncorner.x = xOS;\ncorner.y = yOS;\n}\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n, mat4 viewInv\n) {\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\nvec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\nvec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n}\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nlayout(std140) uniform builtin {\nvec4 cc_size_rotation;\n};\nvec4 vs_main() {\nvec4 pos = vec4(a_position, 1);\npos = cc_matWorld * pos;\nvec2 vertOffset = a_texCoord.xy - 0.5;\ncomputeVertPos(pos, vertOffset, quaternionFromEuler(vec3(0., 0., cc_size_rotation.z)), vec3(cc_size_rotation.xy, 0.), cc_matViewInv);\npos = cc_matViewProj * pos;\nuv = a_texCoord.xy;\ncolor = a_color;\nreturn pos;\n}\nvoid main() { gl_Position = vs_main(); }",
              "frag": "\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\nvec4 tintColor;\n};\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\nreturn CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"
            }], [{
              "vert": "\nprecision highp float;\nin vec3 a_position;\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nvec4 frag () {\nvec4 o = vec4(1.0);\nreturn o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\nin float a_dist;\nout float v_dist;\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\npos = cc_matViewProj * cc_matWorld * pos;\nv_color = a_color;\nv_dist = a_dist;\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nin vec4 v_color;\nin float v_dist;\nvec4 frag () {\nvec4 o = v_color;\nfloat aa = fwidth(v_dist);\nfloat alpha = 1. - smoothstep(-aa, 0., abs(v_dist) - 1.0);\no.rgb *= o.a;\no *= alpha;\nreturn o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\nmat3 m = mat3(xAxis,yAxis,zAxis);\nfloat trace = m[0][0] + m[1][1] + m[2][2];\nvec4 quat;\nif (trace > 0.) {\nfloat s = 0.5 / sqrt(trace + 1.0);\nquat.w = 0.25 / s;\nquat.x = (m[2][1] - m[1][2]) * s;\nquat.y = (m[0][2] - m[2][0]) * s;\nquat.z = (m[1][0] - m[0][1]) * s;\n} else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\nfloat s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\nquat.w = (m[2][1] - m[1][2]) / s;\nquat.x = 0.25 * s;\nquat.y = (m[0][1] + m[1][0]) / s;\nquat.z = (m[0][2] + m[2][0]) / s;\n} else if (m[1][1] > m[2][2]) {\nfloat s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\nquat.w = (m[0][2] - m[2][0]) / s;\nquat.x = (m[0][1] + m[1][0]) / s;\nquat.y = 0.25 * s;\nquat.z = (m[1][2] + m[2][1]) / s;\n} else {\nfloat s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\nquat.w = (m[1][0] - m[0][1]) / s;\nquat.x = (m[0][2] + m[2][0]) / s;\nquat.y = (m[1][2] + m[2][1]) / s;\nquat.z = 0.25 * s;\n}\nfloat len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\nif (len > 0.) {\nlen = 1. / sqrt(len);\nquat.x = quat.x * len;\nquat.y = quat.y * len;\nquat.z = quat.z * len;\nquat.w = quat.w * len;\n}\nreturn quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\nfloat x = angle.x / 2.;\nfloat y = angle.y / 2.;\nfloat z = angle.z / 2.;\nfloat sx = sin(x);\nfloat cx = cos(x);\nfloat sy = sin(y);\nfloat cy = cos(y);\nfloat sz = sin(z);\nfloat cz = cos(z);\nvec4 quat = vec4(0);\nquat.x = sx * cy * cz + cx * sy * sz;\nquat.y = cx * sy * cz + sx * cy * sz;\nquat.z = cx * cy * sz - sx * sy * cz;\nquat.w = cx * cy * cz - sx * sy * sz;\nreturn quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\nfloat x2 = q.x + q.x;\nfloat y2 = q.y + q.y;\nfloat z2 = q.z + q.z;\nfloat xx = q.x * x2;\nfloat xy = q.x * y2;\nfloat xz = q.x * z2;\nfloat yy = q.y * y2;\nfloat yz = q.y * z2;\nfloat zz = q.z * z2;\nfloat wx = q.w * x2;\nfloat wy = q.w * y2;\nfloat wz = q.w * z2;\nreturn mat4(\n1. - (yy + zz), xy + wz, xz - wy, 0,\nxy - wz, 1. - (xx + zz), yz + wx, 0,\nxz + wy, yz - wx, 1. - (xx + yy), 0,\np.x, p.y, p.z, 1\n);\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\nfloat x = q.x, y = q.y, z = q.z, w = q.w;\nfloat x2 = x + x;\nfloat y2 = y + y;\nfloat z2 = z + z;\nfloat xx = x * x2;\nfloat xy = x * y2;\nfloat xz = x * z2;\nfloat yy = y * y2;\nfloat yz = y * z2;\nfloat zz = z * z2;\nfloat wx = w * x2;\nfloat wy = w * y2;\nfloat wz = w * z2;\nfloat sx = s.x;\nfloat sy = s.y;\nfloat sz = s.z;\nreturn mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n(xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n(xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\nt.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\nvec4 quat;\nquat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\nquat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\nquat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\nquat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\nreturn quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\nfloat ix = q.w * v.x + q.y * v.z - q.z * v.y;\nfloat iy = q.w * v.y + q.z * v.x - q.x * v.z;\nfloat iz = q.w * v.z + q.x * v.y - q.y * v.x;\nfloat iw = -q.x * v.x - q.y * v.y - q.z * v.z;\nv.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\nv.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\nv.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\nvec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\nvec4 rotQuat = quatMultiply(viewQuat, q);\nrotateVecFromQuat(pos, rotQuat);\nreturn pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\nfloat xOS = cos(angle) * corner.x - sin(angle) * corner.y;\nfloat yOS = sin(angle) * corner.x + cos(angle) * corner.y;\ncorner.x = xOS;\ncorner.y = yOS;\n}\nlayout(std140) uniform Constants {\nvec4 mainTiling_Offset;\nvec4 frameTile_velLenScale;\nvec4 scale;\n};\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n, vec3 eye\n, vec4 velocity\n, float velocityScale\n, float lengthScale\n, float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\nvec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\nvec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\nvec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\nvec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\npos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = vec3(1, 0, 0);\nvec3 camY = vec3(0, 0, -1);\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\nvec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\nrotateCorner(viewSpaceVert, q.z);\nvec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\nvec3 camY = vec3(0, 1, 0);\nvec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\npos.xyz += offset;\n#else\npos.x += vertOffset.x;\npos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\nvec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\naniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\nvertIndex.y = 1. - vertIndex.y;\n#endif\nreturn (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(std140) uniform SampleConstants {\nvec4 u_sampleInfo;\n};\nlayout(std140) uniform TickConstants {\nvec4 u_worldRot;\nvec4 u_timeDelta;\n};\nin vec4 a_position_starttime;\nin vec4 a_size_uv;\nin vec4 a_rotation_uv;\nin vec4 a_color;\nin vec4 a_dir_life;\nin float a_rndSeed;\n#if CC_RENDER_MODE == 4\nin vec3 a_texCoord;\nin vec3 a_texCoord3;\nin vec3 a_normal;\nin vec4 a_color1;\n#endif\nvec3 unpackCurveData (sampler2D tex, vec2 coord) {\nvec4 a = texture(tex, coord);\nvec4 b = texture(tex, coord + u_sampleInfo.y);\nfloat c = fract(coord.x * u_sampleInfo.x);\nreturn mix(a.xyz, b.xyz, c);\n}\nvec3 unpackCurveData (sampler2D tex, vec2 coord, out float w) {\nvec4 a = texture(tex, coord);\nvec4 b = texture(tex, coord + u_sampleInfo.y);\nfloat c = fract(coord.x * u_sampleInfo.x);\nw = mix(a.w, b.w, c);\nreturn mix(a.xyz, b.xyz, c);\n}\nfloat pseudoRandom (float seed) {\nseed = mod(seed, 233280.);\nfloat q = (seed * 9301. + 49297.) / 233280.;\nreturn fract(q);\n}\n#if COLOR_OVER_TIME_MODULE_ENABLE\nuniform sampler2D color_over_time_tex0;\nlayout(std140) uniform ColorConstant {\nint u_color_mode;\n};\n#endif\n#if ROTATION_OVER_TIME_MODULE_ENABLE\nuniform sampler2D rotation_over_time_tex0;\nlayout(std140) uniform RotationConstant {\nint u_rotation_mode;\n};\n#endif\n#if SIZE_OVER_TIME_MODULE_ENABLE\nuniform sampler2D size_over_time_tex0;\nlayout(std140) uniform SizeConstant {\nint u_size_mode;\n};\n#endif\n#if FORCE_OVER_TIME_MODULE_ENABLE\nuniform sampler2D force_over_time_tex0;\nlayout(std140) uniform ForceConstant {\nint u_force_mode;\nint u_force_space;\n};\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\nuniform sampler2D velocity_over_time_tex0;\nlayout(std140) uniform VelocityConstant {\nint u_velocity_mode;\nint u_velocity_space;\n};\n#endif\n#if TEXTURE_ANIMATION_MODULE_ENABLE\nuniform sampler2D texture_animation_tex0;\nlayout(std140) uniform AnimationConstant {\nvec4 u_anim_info;\n};\n#endif\nfloat repeat (float t, float length) {\nreturn t - floor(t / length) * length;\n}\nvec4 rotateQuat (vec4 p, vec4 q) {\nvec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\nvec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\nreturn vec4(res.xyz, p.w);\n}\nvec4 gpvs_main () {\nfloat activeTime = u_timeDelta.x - a_position_starttime.w;\nfloat normalizedTime = clamp(activeTime / a_dir_life.w, 0.0, 1.0);\nvec2 timeCoord0 = vec2(normalizedTime, 0.);\nvec2 timeCoord1 = vec2(normalizedTime, 1.);\n#if CC_RENDER_MODE == 4\nvec2 vertIdx = vec2(a_texCoord.x, a_texCoord.y);\n#else\nvec2 vertIdx = vec2(a_size_uv.w, a_rotation_uv.w);\n#endif\nvec4 velocity = vec4(a_dir_life.xyz, 0.);\nvec4 pos = vec4(a_position_starttime.xyz, 1.);\nvec3 size = a_size_uv.xyz;\n#if SIZE_OVER_TIME_MODULE_ENABLE\nif (u_size_mode == 1) {\nsize *= unpackCurveData(size_over_time_tex0, timeCoord0);\n} else {\nvec3 size_0 = unpackCurveData(size_over_time_tex0, timeCoord0);\nvec3 size_1 = unpackCurveData(size_over_time_tex0, timeCoord1);\nfloat factor_s = pseudoRandom(a_rndSeed + 39825.);\nsize *= mix(size_0, size_1, factor_s);\n}\n#endif\nvec3 compScale = scale.xyz * size;\n#if FORCE_OVER_TIME_MODULE_ENABLE\nvec3 forceAnim = vec3(0.);\nif (u_force_mode == 1) {\nforceAnim = unpackCurveData(force_over_time_tex0, timeCoord0);\n} else {\nvec3 force_0 = unpackCurveData(force_over_time_tex0, timeCoord0);\nvec3 force_1 = unpackCurveData(force_over_time_tex0, timeCoord1);\nfloat factor_f =  pseudoRandom(a_rndSeed + 212165.);\nforceAnim = mix(force_0, force_1, factor_f);\n}\nvec4 forceTrack = vec4(forceAnim, 0.);\nif (u_force_space == 0) {\nforceTrack = rotateQuat(forceTrack, u_worldRot);\n}\nvelocity.xyz += forceTrack.xyz;\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\nfloat speedModifier0 = 1.;\nfloat speedModifier1 = 1.;\nvec3 velocityAnim = vec3(0.);\nif (u_velocity_mode == 1) {\nvelocityAnim = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n} else {\nvec3 vectory_0 = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\nvec3 vectory_1 = unpackCurveData(velocity_over_time_tex0, timeCoord1, speedModifier1);\nfloat factor_v = pseudoRandom(a_rndSeed + 197866.);\nvelocityAnim = mix(vectory_0, vectory_1, factor_v);\nspeedModifier0 = mix(speedModifier0, speedModifier1, factor_v);\n}\nvec4 velocityTrack = vec4(velocityAnim, 0.);\nif (u_velocity_space == 0) {\nvelocityTrack = rotateQuat(velocityTrack, u_worldRot);\n}\nvelocity.xyz += velocityTrack.xyz;\nvelocity.xyz *= speedModifier0;\n#endif\npos.xyz += velocity.xyz * normalizedTime * a_dir_life.w;\n#if !CC_USE_WORLD_SPACE\npos = cc_matWorld * pos;\n#if CC_RENDER_MODE == 1\nvelocity = rotateQuat(velocity, u_worldRot);\n#endif\n#endif\nvec3 rotation = a_rotation_uv.xyz;\n#if ROTATION_OVER_TIME_MODULE_ENABLE\nif (u_rotation_mode == 1) {\nrotation += unpackCurveData(rotation_over_time_tex0, timeCoord0) * normalizedTime * a_dir_life.w;\n} else {\nvec3 rotation_0 = unpackCurveData(rotation_over_time_tex0, timeCoord0);\nvec3 rotation_1 = unpackCurveData(rotation_over_time_tex0, timeCoord1);\nfloat factor_r = pseudoRandom(a_rndSeed + 125292.);\nrotation += mix(rotation_0, rotation_1, factor_r) * normalizedTime * a_dir_life.w;\n}\n#endif\n#if COLOR_OVER_TIME_MODULE_ENABLE\nif (u_color_mode == 1) {\ncolor = a_color * texture(color_over_time_tex0, timeCoord0);\n} else {\nvec4 color_0 = texture(color_over_time_tex0, timeCoord0);\nvec4 color_1 = texture(color_over_time_tex0, timeCoord1);\nfloat factor_c = pseudoRandom(a_rndSeed + 91041.);\ncolor = a_color * mix(color_0, color_1, factor_c);\n}\n#else\ncolor = a_color;\n#endif\n#if CC_RENDER_MODE != 4\nvec2 cornerOffset = vec2((vertIdx - 0.5));\n#if CC_RENDER_MODE == 0\nvec3 rotEuler = rotation.xyz;\n#elif CC_RENDER_MODE == 1\nvec3 rotEuler = vec3(0.);\n#else\nvec3 rotEuler = vec3(0., 0., rotation.z);\n#endif\ncomputeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, cc_matViewInv\n#endif\n#if CC_RENDER_MODE == 1\n, cc_cameraPos.xyz\n, velocity\n, frameTile_velLenScale.z\n, frameTile_velLenScale.w\n, a_size_uv.w\n#endif\n);\n#else\nmat4 xformNoScale = matrixFromRT(quaternionFromEuler(rotation), pos.xyz);\nmat4 xform = matFromRTS(quaternionFromEuler(rotation), pos.xyz, compScale);\npos = xform * vec4(a_texCoord3, 1);\nvec4 normal = xformNoScale * vec4(a_normal, 0);\ncolor *= a_color1;\n#endif\npos = cc_matViewProj * pos;\nfloat frameIndex = 0.;\n#if TEXTURE_ANIMATION_MODULE_ENABLE\nfloat startFrame = 0.;\nvec3 frameInfo = vec3(0.);\nif (int(u_anim_info.x) == 1) {\nframeInfo = unpackCurveData(texture_animation_tex0, timeCoord0);\n} else {\nvec3 frameInfo0 = unpackCurveData(texture_animation_tex0, timeCoord0);\nvec3 frameInfo1 = unpackCurveData(texture_animation_tex0, timeCoord1);\nfloat factor_t = pseudoRandom(a_rndSeed + 90794.);\nframeInfo = mix(frameInfo0, frameInfo1, factor_t);\n}\nstartFrame = frameInfo.x / u_anim_info.y;\nframeIndex = repeat(u_anim_info.z * (frameInfo.y + startFrame), 1.);\n#endif\nuv = computeUV(frameIndex, vertIdx, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\nreturn pos;\n}\nvoid main() { gl_Position = gpvs_main(); }",
              "frag": "\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\nvec4 tintColor;\n};\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\nreturn CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"
            }], [{
              "vert": "\nprecision mediump float;\nlayout(std140) uniform Constants {\nvec4 mainTiling_Offset;\nvec4 frameTile_velLenScale;\nvec4 scale;\n};\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\nout vec3 vBarycentric;\n#endif\nvec4 vs_main() {\nhighp vec4 pos = vec4(a_position, 1);\nvec4 velocity = vec4(a_texCoord1.xyz, 0);\n#if !CC_USE_WORLD_SPACE\npos = cc_matWorld * pos;\nvelocity = cc_matWorld * velocity;\n#endif\nfloat vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\nvec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\npos.xyz += camUp * vertOffset;\npos = cc_matViewProj * pos;\nuv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\ncolor = a_color;\n#if CC_DRAW_WIRE_FRAME\nvBarycentric = a_texCoord2;\n#endif\nreturn pos;\n}\nvoid main() { gl_Position = vs_main(); }",
              "frag": "\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nin vec2 uv;\nin vec4 color;\n#if CC_DRAW_WIRE_FRAME\nin vec3 vBarycentric;\n#endif\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\nvec4 tintColor;\n};\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\nif (any(lessThan(vBarycentric, vec3(0.02)))) {\ncol = vec4(0., 1., 1., 1.);\n}\n#endif\nreturn CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"
            }], [{
              "vert": "\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\nmat3 m = mat3(xAxis,yAxis,zAxis);\nfloat trace = m[0][0] + m[1][1] + m[2][2];\nvec4 quat;\nif (trace > 0.) {\nfloat s = 0.5 / sqrt(trace + 1.0);\nquat.w = 0.25 / s;\nquat.x = (m[2][1] - m[1][2]) * s;\nquat.y = (m[0][2] - m[2][0]) * s;\nquat.z = (m[1][0] - m[0][1]) * s;\n} else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\nfloat s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\nquat.w = (m[2][1] - m[1][2]) / s;\nquat.x = 0.25 * s;\nquat.y = (m[0][1] + m[1][0]) / s;\nquat.z = (m[0][2] + m[2][0]) / s;\n} else if (m[1][1] > m[2][2]) {\nfloat s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\nquat.w = (m[0][2] - m[2][0]) / s;\nquat.x = (m[0][1] + m[1][0]) / s;\nquat.y = 0.25 * s;\nquat.z = (m[1][2] + m[2][1]) / s;\n} else {\nfloat s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\nquat.w = (m[1][0] - m[0][1]) / s;\nquat.x = (m[0][2] + m[2][0]) / s;\nquat.y = (m[1][2] + m[2][1]) / s;\nquat.z = 0.25 * s;\n}\nfloat len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\nif (len > 0.) {\nlen = 1. / sqrt(len);\nquat.x = quat.x * len;\nquat.y = quat.y * len;\nquat.z = quat.z * len;\nquat.w = quat.w * len;\n}\nreturn quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\nfloat x = angle.x / 2.;\nfloat y = angle.y / 2.;\nfloat z = angle.z / 2.;\nfloat sx = sin(x);\nfloat cx = cos(x);\nfloat sy = sin(y);\nfloat cy = cos(y);\nfloat sz = sin(z);\nfloat cz = cos(z);\nvec4 quat = vec4(0);\nquat.x = sx * cy * cz + cx * sy * sz;\nquat.y = cx * sy * cz + sx * cy * sz;\nquat.z = cx * cy * sz - sx * sy * cz;\nquat.w = cx * cy * cz - sx * sy * sz;\nreturn quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\nfloat x2 = q.x + q.x;\nfloat y2 = q.y + q.y;\nfloat z2 = q.z + q.z;\nfloat xx = q.x * x2;\nfloat xy = q.x * y2;\nfloat xz = q.x * z2;\nfloat yy = q.y * y2;\nfloat yz = q.y * z2;\nfloat zz = q.z * z2;\nfloat wx = q.w * x2;\nfloat wy = q.w * y2;\nfloat wz = q.w * z2;\nreturn mat4(\n1. - (yy + zz), xy + wz, xz - wy, 0,\nxy - wz, 1. - (xx + zz), yz + wx, 0,\nxz + wy, yz - wx, 1. - (xx + yy), 0,\np.x, p.y, p.z, 1\n);\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\nfloat x = q.x, y = q.y, z = q.z, w = q.w;\nfloat x2 = x + x;\nfloat y2 = y + y;\nfloat z2 = z + z;\nfloat xx = x * x2;\nfloat xy = x * y2;\nfloat xz = x * z2;\nfloat yy = y * y2;\nfloat yz = y * z2;\nfloat zz = z * z2;\nfloat wx = w * x2;\nfloat wy = w * y2;\nfloat wz = w * z2;\nfloat sx = s.x;\nfloat sy = s.y;\nfloat sz = s.z;\nreturn mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n(xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n(xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\nt.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\nvec4 quat;\nquat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\nquat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\nquat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\nquat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\nreturn quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\nfloat ix = q.w * v.x + q.y * v.z - q.z * v.y;\nfloat iy = q.w * v.y + q.z * v.x - q.x * v.z;\nfloat iz = q.w * v.z + q.x * v.y - q.y * v.x;\nfloat iw = -q.x * v.x - q.y * v.y - q.z * v.z;\nv.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\nv.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\nv.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\nvec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\nvec4 rotQuat = quatMultiply(viewQuat, q);\nrotateVecFromQuat(pos, rotQuat);\nreturn pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\nfloat xOS = cos(angle) * corner.x - sin(angle) * corner.y;\nfloat yOS = sin(angle) * corner.x + cos(angle) * corner.y;\ncorner.x = xOS;\ncorner.y = yOS;\n}\nlayout(std140) uniform Constants {\nvec4 mainTiling_Offset;\nvec4 frameTile_velLenScale;\nvec4 scale;\n};\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n, vec3 eye\n, vec4 velocity\n, float velocityScale\n, float lengthScale\n, float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\nvec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\nvec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\nvec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\nvec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\npos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = vec3(1, 0, 0);\nvec3 camY = vec3(0, 0, -1);\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\nvec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\nrotateCorner(viewSpaceVert, q.z);\nvec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\nvec3 camY = vec3(0, 1, 0);\nvec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\npos.xyz += offset;\n#else\npos.x += vertOffset.x;\npos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\nvec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\naniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\nvertIndex.y = 1. - vertIndex.y;\n#endif\nreturn (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\nin vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\nin vec3 a_texCoord3;\nin vec3 a_normal;\nin vec4 a_color1;\n#endif\nvec4 lpvs_main () {\nvec3 compScale = scale.xyz * a_texCoord1;\nvec4 pos = vec4(a_position, 1);\n#if CC_RENDER_MODE == 1\nvec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n#if !CC_USE_WORLD_SPACE\npos = cc_matWorld * pos;\n#if CC_RENDER_MODE == 1\nvelocity = cc_matWorld * velocity;\n#endif\n#endif\n#if CC_RENDER_MODE != 4\nvec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n#if CC_RENDER_MODE == 0\nvec3 rotEuler = a_texCoord2;\n#elif CC_RENDER_MODE == 1\nvec3 rotEuler = vec3(0.);\n#else\nvec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n#endif\ncomputeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, cc_matViewInv\n#endif\n#if CC_RENDER_MODE == 1\n, cc_cameraPos.xyz\n, velocity\n, frameTile_velLenScale.z\n, frameTile_velLenScale.w\n, a_texCoord.x\n#endif\n);\ncolor = a_color;\n#else\nmat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\nmat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\npos = xform * vec4(a_texCoord3, 1);\nvec4 normal = xformNoScale * vec4(a_normal, 0);\ncolor = a_color * a_color1;\n#endif\nuv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\npos = cc_matViewProj * pos;\nreturn pos;\n}\nvoid main() { gl_Position = lpvs_main(); }",
              "frag": "\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\nvec4 tintColor;\n};\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\nreturn CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"
            }], [{
              "vert": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 v_light;\nout vec2 uv0;\n#if TWO_COLORED\nin vec4 a_color2;\nout vec4 v_dark;\n#endif\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\n#if USE_LOCAL\npos = cc_matWorld * pos;\n#endif\npos = cc_matViewProj * pos;\nuv0 = a_texCoord;\nv_light = a_color;\n#if TWO_COLORED\nv_dark = a_color2;\n#endif\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\nlayout(std140) uniform ALPHA_TEST_DATA {\nfloat alphaThreshold;\n};\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n#if USE_ALPHA_TEST\nif (color.a < alphaThreshold) discard;\n#endif\n}\nvoid ALPHA_TEST (in float alpha) {\n#if USE_ALPHA_TEST\nif (alpha < alphaThreshold) discard;\n#endif\n}\nin vec4 v_light;\n#if TWO_COLORED\nin vec4 v_dark;\n#endif\nin vec2 uv0;\nuniform sampler2D cc_spriteTexture;\nvec4 frag () {\nvec4 o = vec4(1, 1, 1, 1);\n#if TWO_COLORED\nvec4 texColor = vec4(1, 1, 1, 1);\ntexColor *= texture(cc_spriteTexture, uv0);\no.a = texColor.a * v_light.a;\no.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n#else\no *= texture(cc_spriteTexture, uv0);\no *= v_light;\n#endif\nALPHA_TEST(o);\nreturn o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\n#if SAMPLE_FROM_RT\n#endif\nin vec3 a_position;\nin vec2 a_texCoord;\nin vec4 a_color;\nout vec4 color;\nout vec2 uv0;\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\n#if USE_LOCAL\npos = cc_matWorld * pos;\n#endif\n#if USE_PIXEL_ALIGNMENT\npos = cc_matView * pos;\npos.xyz = floor(pos.xyz);\npos = cc_matProj * pos;\n#else\npos = cc_matViewProj * pos;\n#endif\nuv0 = a_texCoord;\n#if SAMPLE_FROM_RT\nuv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n#endif\ncolor = a_color;\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\nreturn vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\nreturn texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\nlayout(std140) uniform ALPHA_TEST_DATA {\nfloat alphaThreshold;\n};\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n#if USE_ALPHA_TEST\nif (color.a < alphaThreshold) discard;\n#endif\n}\nvoid ALPHA_TEST (in float alpha) {\n#if USE_ALPHA_TEST\nif (alpha < alphaThreshold) discard;\n#endif\n}\nin vec4 color;\n#if USE_TEXTURE\nin vec2 uv0;\nuniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\nvec4 o = vec4(1, 1, 1, 1);\n#if USE_TEXTURE\no *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n#if IS_GRAY\nfloat gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\no.r = o.g = o.b = gray;\n#endif\n#endif\no *= color;\nALPHA_TEST(o);\nreturn o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\nin float a_vertexId;\nint getVertexId() {\nreturn int(a_vertexId);\n}\nlayout(std140) uniform CCMorph {\nvec4 cc_displacementWeights[15];\nvec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\nivec2 texSize = textureSize(tex, 0);\nreturn texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture(tex, x)),\ndecode32(texture(tex, y)),\ndecode32(texture(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nuniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nuniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nuniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nin highp vec4 a_jointAnimInfo;\n#endif\nlayout(std140) uniform CCSkinningTexture {\nhighp vec4 cc_jointTextureInfo;\n};\nlayout(std140) uniform CCSkinningAnimation {\nhighp vec4 cc_jointAnimInfo;\n};\nuniform highp sampler2D cc_jointTexture;\n#else\nlayout(std140) uniform CCSkinning {\nhighp vec4 cc_joints[30 * 3];\n};\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\nin vec4 a_matWorld0;\nin vec4 a_matWorld1;\nin vec4 a_matWorld2;\n#if USE_LIGHTMAP\nin vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nin float a_dyn_batch_id;\nlayout(std140) uniform CCLocalBatched {\nhighp mat4 cc_matWorlds[10];\n};\n#else\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(std140) uniform Constants {\nvec4 tilingOffset;\nvec4 albedo;\nvec4 albedoScaleAndCutoff;\nvec4 pbrParams;\nvec4 emissive;\nvec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nout float v_fog_factor;\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\nuniform sampler2D cc_shadowMap;\nuniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\nin vec4 a_color;\nout vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\nout vec3 v_tangent;\nout vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\nin vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nout vec3 v_luv;\nvoid CCLightingMapCaclUV()\n{\n#if !USE_INSTANCING\nv_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\nv_luv.z = cc_lightingMapUVParam.z;\n#else\nv_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\nv_luv.z = a_lightingMapUVParam.z;\n#endif\n}\n#endif\nvoid main () {\nStandardVertInput In;\nIn.position = vec4(a_position, 1.0);\nIn.normal = a_normal;\nIn.tangent = a_tangent;\n#if CC_USE_MORPH\napplyMorph(In);\n#endif\n#if CC_USE_SKINNING\nCCSkin(In);\n#endif\nmat4 matWorld, matWorldIT;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\nmatWorldIT = matWorld;\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\nmatWorldIT = matWorld;\n#else\nmatWorld = cc_matWorld;\nmatWorldIT = cc_matWorldIT;\n#endif\nvec4 pos = matWorld * In.position;\nv_position = pos.xyz;\nv_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n#if USE_NORMAL_MAP\nv_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\nv_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n#endif\nv_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n#if SAMPLE_FROM_RT\nv_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n#endif\n#if HAS_SECOND_UV\nv_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#if SAMPLE_FROM_RT\nv_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n#endif\n#endif\n#if USE_VERTEX_COLOR\nv_color = a_color;\n#endif\n#if CC_USE_FOG == 0\nv_fog_factor = LinearFog(pos);\n#elif CC_USE_FOG == 1\nv_fog_factor = ExpFog(pos);\n#elif CC_USE_FOG == 2\nv_fog_factor = ExpSquaredFog(pos);\n#elif CC_USE_FOG == 3\nv_fog_factor = LayeredFog(pos);\n#else\nv_fog_factor = 1.0;\n#endif\nv_shadowPos = cc_matLightViewProj * pos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nCCLightingMapCaclUV();\n#endif\ngl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}",
              "frag": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform Constants {\nvec4 tilingOffset;\nvec4 albedo;\nvec4 albedoScaleAndCutoff;\nvec4 pbrParams;\nvec4 emissive;\nvec4 emissiveScaleParam;\n};\nin float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\nuniform sampler2D cc_shadowMap;\nuniform sampler2D cc_spotLightingMap;\nfloat CCGetLinearDepth (vec3 worldPos) {\nvec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\nfloat dist = length(viewStartPos.xyz);\nreturn cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n}\nfloat CCGetShadowFactorX1 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_shadowMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetShadowFactorX5 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetShadowFactorX9 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetShadowFactorX25 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\nfloat CCGetDirLightShadowFactorX1 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nfloat depth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetDirLightShadowFactorX5 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetDirLightShadowFactorX9 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetDirLightShadowFactorX25 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat depth = 0.0;\nfloat shadow = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\n#endif\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\nvec3 NxH = cross(N, H);\nfloat OneMinusNoHSqr = dot(NxH, NxH);\nfloat a = roughness * roughness;\nfloat n = NoH * a;\nfloat p = a / (OneMinusNoHSqr + n * n);\nreturn p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\nreturn (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\nconst vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\nconst vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\nvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\nAB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\nreturn specular * AB.x + AB.y;\n}\nstruct StandardSurface {\nvec4 albedo;\nvec3 position;\nvec3 normal;\nvec3 emissive;\nvec3 lightmap;\nfloat lightmap_test;\nfloat roughness;\nfloat metallic;\nfloat occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 L = normalize(-cc_mainLitDir.xyz);\nvec3 H = normalize(L + V);\nfloat NH = max(dot(N, H), 0.0);\nfloat NL = max(dot(N, L), 0.001);\nvec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\nvec3 diffuseContrib = diffuse;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nif (s.lightmap_test > 0.0001) {\nfinalColor = s.lightmap.rgb;\n}\n#else\ndiffuseContrib /= 3.14159265359;\n#endif\nvec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\nfinalColor *= (diffuseContrib + specularContrib);\nfloat fAmb = 0.5 - N.y * 0.5;\nvec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\nfinalColor += (ambDiff.rgb * diffuse);\n#if CC_USE_IBL\nvec3 R = normalize(reflect(-V, N));\nvec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n#if CC_USE_IBL == 2\nvec3 env = unpackRGBE(envmap);\n#else\nvec3 env = SRGBToLinear(envmap.rgb);\n#endif\nfinalColor += env * cc_ambientSky.w * specular;\n#endif\nfinalColor = finalColor * s.occlusion;\n#if CC_USE_HDR\ns.emissive *= cc_exposure.w;\n#endif\nfinalColor += s.emissive;\n#if CC_RECEIVE_SHADOW\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25(pos);\nelse if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9(pos);\nelse if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5(pos);\nelse shadowAttenuation = CCGetShadowFactorX1(pos);\nvec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\nif (cc_shadowNFLSInfo.w > 0.000001) {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n} else {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n}\n}\n#endif\nreturn vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nin vec3 v_luv;\nuniform sampler2D cc_lightingMap;\nvec3 UnpackLightingmap(vec4 color) {\nvec3 c;\nfloat e = 1.0 + color.a * (8.0 - 1.0);\nc.r = color.r * e;\nc.g = color.g * e;\nc.b = color.b * e;\nreturn c;\n}\n#endif\nin vec3 v_position;\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec3 v_normal;\n#if USE_VERTEX_COLOR\nin vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\nuniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\nin vec3 v_tangent;\nin vec3 v_bitangent;\nuniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\nuniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\nuniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\nuniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\nuniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\nvec4 baseColor = albedo;\n#if USE_VERTEX_COLOR\nbaseColor *= v_color;\n#endif\n#if USE_ALBEDO_MAP\nvec4 texColor = texture(albedoMap, ALBEDO_UV);\ntexColor.rgb = SRGBToLinear(texColor.rgb);\nbaseColor *= texColor;\n#endif\ns.albedo = baseColor;\ns.albedo.rgb *= albedoScaleAndCutoff.xyz;\n#if USE_ALPHA_TEST\nif (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nvec4 lightColor = texture(cc_lightingMap, v_luv.xy);\ns.lightmap = UnpackLightingmap(lightColor);\ns.lightmap_test = v_luv.z;\n#endif\ns.normal = v_normal;\n#if USE_NORMAL_MAP\nvec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\ns.normal =\n(nmmp.x * pbrParams.w) * normalize(v_tangent) +\n(nmmp.y * pbrParams.w) * normalize(v_bitangent) +\nnmmp.z * normalize(s.normal);\n#endif\ns.position = v_position;\nvec4 pbr = pbrParams;\n#if USE_PBR_MAP\nvec4 res = texture(pbrMap, PBR_UV);\npbr.x *= res.r;\npbr.y *= res.g;\npbr.z *= res.b;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\nvec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\npbr.z *= metallicRoughness.b;\npbr.y *= metallicRoughness.g;\n#endif\n#if USE_OCCLUSION_MAP\npbr.x *= texture(occlusionMap, PBR_UV).r;\n#endif\ns.occlusion = clamp(pbr.x, 0.0, 0.96);\ns.roughness = clamp(pbr.y, 0.04, 1.0);\ns.metallic = pbr.z;\ns.emissive = emissive.rgb * emissiveScaleParam.xyz;\n#if USE_EMISSIVE_MAP\ns.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n#endif\n}\n#if CC_FORWARD_ADD\n#if CC_PIPELINE_TYPE == 0\n# define LIGHTS_PER_PASS 1\n#else\n# define LIGHTS_PER_PASS 10\n#endif\nlayout(std140) uniform CCForwardLight {\nhighp vec4 cc_lightPos[LIGHTS_PER_PASS];\nvec4 cc_lightColor[LIGHTS_PER_PASS];\nvec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\nvec4 cc_lightDir[LIGHTS_PER_PASS];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\nfloat factor = distSqr * invSqrAttRadius;\nfloat smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\nreturn smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\nfloat attenuation = 1.0 / max(distSqr, 0.01*0.01);\nattenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\nreturn attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\nfloat cd = dot(litDir, L);\nfloat attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\nreturn (attenuation * attenuation);\n}\nvec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 diffuseContrib = diffuse / 3.14159265359;\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 finalColor = vec3(0.0);\nint numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\nfor (int i = 0; i < LIGHTS_PER_PASS; i++) {\nif (i >= numLights) break;\nvec3 SLU = cc_lightPos[i].xyz - s.position;\nvec3 SL = normalize(SLU);\nvec3 SH = normalize(SL + V);\nfloat SNL = max(dot(N, SL), 0.001);\nfloat SNH = max(dot(N, SH), 0.0);\nfloat distSqr = dot(SLU, SLU);\nfloat litRadius = cc_lightSizeRangeAngle[i].x;\nfloat litRadiusSqr = litRadius * litRadius;\nfloat illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\nfloat attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\nattRadiusSqrInv *= attRadiusSqrInv;\nfloat att = GetDistAtt(distSqr, attRadiusSqrInv);\nvec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\nif (cc_lightPos[i].w > 0.0) {\nfloat cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\nfloat cosOuter = cc_lightSizeRangeAngle[i].z;\nfloat litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\nfloat litAngleOffset = -cosOuter * litAngleScale;\natt *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n}\nvec3 lightColor = cc_lightColor[i].rgb;\n#if CC_RECEIVE_SHADOW\nif (cc_lightPos[i].w > 0.0) {\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25(pos, s.position);\nelse if (pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9(pos, s.position);\nelse if (pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5(pos, s.position);\nelse shadowAttenuation = CCGetDirLightShadowFactorX1(pos, s.position);\nlightColor *= 1.0 - shadowAttenuation;\n}\n}\n#endif\nfinalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n}\nfinalColor = finalColor * s.occlusion;\nreturn vec4(finalColor, 0.0);\n}\nlayout(location = 0) out vec4 fragColorX;\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingAdditive(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\nfragColorX = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 0\nlayout(location = 0) out vec4 fragColorX;\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingBase(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\nfragColorX = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 1\nlayout(location = 0) out vec4 fragColor0;\nlayout(location = 1) out vec4 fragColor1;\nlayout(location = 2) out vec4 fragColor2;\nlayout(location = 3) out vec4 fragColor3;\nvoid main () {\nStandardSurface s; surf(s);\nfragColor0 = s.albedo;\nfragColor1 = vec4(s.position, s.roughness);\nfragColor2 = vec4(s.normal, s.metallic);\nfragColor3 = vec4(s.emissive, s.occlusion);\n}\n#endif"
            }, {
              "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\nin float a_vertexId;\nint getVertexId() {\nreturn int(a_vertexId);\n}\nlayout(std140) uniform CCMorph {\nvec4 cc_displacementWeights[15];\nvec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\nivec2 texSize = textureSize(tex, 0);\nreturn texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture(tex, x)),\ndecode32(texture(tex, y)),\ndecode32(texture(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nuniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nuniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nuniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nin highp vec4 a_jointAnimInfo;\n#endif\nlayout(std140) uniform CCSkinningTexture {\nhighp vec4 cc_jointTextureInfo;\n};\nlayout(std140) uniform CCSkinningAnimation {\nhighp vec4 cc_jointAnimInfo;\n};\nuniform highp sampler2D cc_jointTexture;\n#else\nlayout(std140) uniform CCSkinning {\nhighp vec4 cc_joints[30 * 3];\n};\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\nin vec4 a_matWorld0;\nin vec4 a_matWorld1;\nin vec4 a_matWorld2;\n#if USE_LIGHTMAP\nin vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nin float a_dyn_batch_id;\nlayout(std140) uniform CCLocalBatched {\nhighp mat4 cc_matWorlds[10];\n};\n#else\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(std140) uniform Constants {\nvec4 tilingOffset;\nvec4 albedo;\nvec4 albedoScaleAndCutoff;\nvec4 pbrParams;\nvec4 emissive;\nvec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\nin vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\nStandardVertInput In;\nIn.position = vec4(a_position, 1.0);\nIn.normal = a_normal;\nIn.tangent = a_tangent;\n#if CC_USE_MORPH\napplyMorph(In);\n#endif\n#if CC_USE_SKINNING\nCCSkin(In);\n#endif\nmat4 matWorld, matWorldIT;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\nmatWorldIT = matWorld;\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\nmatWorldIT = matWorld;\n#else\nmatWorld = cc_matWorld;\nmatWorldIT = cc_matWorldIT;\n#endif\nv_worldPos = matWorld * In.position;\nvec4 clipPos = cc_matLightViewProj * v_worldPos;\nv_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n#if HAS_SECOND_UV\nv_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\nv_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\nreturn clipPos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nlayout(std140) uniform Constants {\nvec4 tilingOffset;\nvec4 albedo;\nvec4 albedoScaleAndCutoff;\nvec4 pbrParams;\nvec4 emissive;\nvec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\nvec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\nret = fract(ret);\nret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\nreturn ret;\n}\nlayout(std140) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\nuniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\nvec4 baseColor = albedo;\n#if USE_ALBEDO_MAP\nbaseColor *= texture(albedoMap, ALBEDO_UV);\n#endif\n#if USE_ALPHA_TEST\nif (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n#endif\nif(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\nif (cc_shadowNFLSInfo.z > 0.000001) {\nvec4 viewStartPos = cc_matLightView * v_worldPos;\nfloat dist = length(viewStartPos.xyz);\nfloat linearDepth = cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\nreturn vec4(linearDepth, 1.0, 1.0, 1.0);\n}\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nreturn packDepthToRGBA(v_clip_depth);\n}\nreturn vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nout float v_fog_factor;\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\nuniform sampler2D cc_shadowMap;\nuniform sampler2D cc_spotLightingMap;\n#endif\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nout highp vec3 v_position;\nout mediump vec3 v_normal;\n#if USE_NORMALMAP\nout mediump vec3 v_tangent;\nout mediump vec3 v_binormal;\n#endif\nout mediump vec2 uvw;\nout mediump vec2 uv0;\nout mediump vec2 uv1;\nout mediump vec2 uv2;\nout mediump vec2 uv3;\nout mediump vec3 luv;\nout mediump vec3 diffuse;\nlayout(std140) uniform TexCoords {\nvec4 UVScale;\nvec4 lightMapUVParam;\n};\nvoid main () {\nvec3 worldPos;\nworldPos.x = cc_matWorld[3][0] + a_position.x;\nworldPos.y = cc_matWorld[3][1] + a_position.y;\nworldPos.z = cc_matWorld[3][2] + a_position.z;\nvec4 pos = vec4(worldPos, 1.0);\npos = cc_matViewProj * pos;\nuvw = a_texCoord;\nuv0 = a_position.xz * UVScale.x;\nuv1 = a_position.xz * UVScale.y;\nuv2 = a_position.xz * UVScale.z;\nuv3 = a_position.xz * UVScale.w;\n#if USE_LIGHTMAP\nluv.xy = lightMapUVParam.xy + a_texCoord * lightMapUVParam.zw;\nluv.z = lightMapUVParam.z;\n#endif\nv_position = worldPos;\nv_normal = a_normal;\n#if CC_USE_FOG == 0\nv_fog_factor = LinearFog(vec4(worldPos, 1.0));\n#elif CC_USE_FOG == 1\nv_fog_factor = ExpFog(vec4(worldPos, 1.0));\n#elif CC_USE_FOG == 2\nv_fog_factor = ExpSquaredFog(vec4(worldPos, 1.0));\n#elif CC_USE_FOG == 3\nv_fog_factor = LayeredFog(vec4(worldPos, 1.0));\n#else\nv_fog_factor = 1.0;\n#endif\n#if USE_NORMALMAP\nv_tangent = vec3(1.0, 0.0, 0.0);\nv_binormal = vec3(0.0, 0.0, 1.0);\nv_binormal = cross(v_tangent, a_normal);\nv_tangent = cross(a_normal, v_binormal);\n#endif\nv_shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\ngl_Position = pos;\n}",
              "frag": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\nuniform sampler2D cc_shadowMap;\nuniform sampler2D cc_spotLightingMap;\nfloat CCGetLinearDepth (vec3 worldPos) {\nvec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\nfloat dist = length(viewStartPos.xyz);\nreturn cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n}\nfloat CCGetShadowFactorX1 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_shadowMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetShadowFactorX5 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetShadowFactorX9 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetShadowFactorX25 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\nfloat CCGetDirLightShadowFactorX1 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nfloat depth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetDirLightShadowFactorX5 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetDirLightShadowFactorX9 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetDirLightShadowFactorX25 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat depth = 0.0;\nfloat shadow = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\n#endif\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\nvec3 NxH = cross(N, H);\nfloat OneMinusNoHSqr = dot(NxH, NxH);\nfloat a = roughness * roughness;\nfloat n = NoH * a;\nfloat p = a / (OneMinusNoHSqr + n * n);\nreturn p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\nreturn (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\nconst vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\nconst vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\nvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\nAB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\nreturn specular * AB.x + AB.y;\n}\nstruct StandardSurface {\nvec4 albedo;\nvec3 position;\nvec3 normal;\nvec3 emissive;\nvec3 lightmap;\nfloat lightmap_test;\nfloat roughness;\nfloat metallic;\nfloat occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 L = normalize(-cc_mainLitDir.xyz);\nvec3 H = normalize(L + V);\nfloat NH = max(dot(N, H), 0.0);\nfloat NL = max(dot(N, L), 0.001);\nvec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\nvec3 diffuseContrib = diffuse;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nif (s.lightmap_test > 0.0001) {\nfinalColor = s.lightmap.rgb;\n}\n#else\ndiffuseContrib /= 3.14159265359;\n#endif\nvec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\nfinalColor *= (diffuseContrib + specularContrib);\nfloat fAmb = 0.5 - N.y * 0.5;\nvec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\nfinalColor += (ambDiff.rgb * diffuse);\n#if CC_USE_IBL\nvec3 R = normalize(reflect(-V, N));\nvec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n#if CC_USE_IBL == 2\nvec3 env = unpackRGBE(envmap);\n#else\nvec3 env = SRGBToLinear(envmap.rgb);\n#endif\nfinalColor += env * cc_ambientSky.w * specular;\n#endif\nfinalColor = finalColor * s.occlusion;\n#if CC_USE_HDR\ns.emissive *= cc_exposure.w;\n#endif\nfinalColor += s.emissive;\n#if CC_RECEIVE_SHADOW\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25(pos);\nelse if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9(pos);\nelse if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5(pos);\nelse shadowAttenuation = CCGetShadowFactorX1(pos);\nvec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\nif (cc_shadowNFLSInfo.w > 0.000001) {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n} else {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n}\n}\n#endif\nreturn vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nin float v_fog_factor;\nin highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nin vec3 v_luv;\nuniform sampler2D cc_lightingMap;\nvec3 UnpackLightingmap(vec4 color) {\nvec3 c;\nfloat e = 1.0 + color.a * (8.0 - 1.0);\nc.r = color.r * e;\nc.g = color.g * e;\nc.b = color.b * e;\nreturn c;\n}\n#endif\nin highp vec3 v_position;\nin mediump vec3 v_normal;\n#if USE_NORMALMAP\nin mediump vec3 v_tangent;\nin mediump vec3 v_binormal;\n#endif\nin mediump vec2 uvw;\nin mediump vec2 uv0;\nin mediump vec2 uv1;\nin mediump vec2 uv2;\nin mediump vec2 uv3;\nin mediump vec3 diffuse;\nin mediump vec3 luv;\nlayout(std140) uniform PbrParams {\nvec4 metallic;\nvec4 roughness;\n};\nuniform sampler2D weightMap;\nuniform sampler2D detailMap0;\nuniform sampler2D detailMap1;\nuniform sampler2D detailMap2;\nuniform sampler2D detailMap3;\nuniform sampler2D normalMap0;\nuniform sampler2D normalMap1;\nuniform sampler2D normalMap2;\nuniform sampler2D normalMap3;\nuniform sampler2D lightMap;\nvoid surf (out StandardSurface s) {\n#if LAYERS > 1\nvec4 w = texture(weightMap, uvw);\n#endif\nvec4 baseColor = vec4(0, 0, 0, 0);\n#if LAYERS == 1\nbaseColor = texture(detailMap0, uv0);\n#elif LAYERS == 2\nbaseColor += texture(detailMap0, uv0) * w.r;\nbaseColor += texture(detailMap1, uv1) * w.g;\n#elif LAYERS == 3\nbaseColor += texture(detailMap0, uv0) * w.r;\nbaseColor += texture(detailMap1, uv1) * w.g;\nbaseColor += texture(detailMap2, uv2) * w.b;\n#elif LAYERS == 4\nbaseColor += texture(detailMap0, uv0) * w.r;\nbaseColor += texture(detailMap1, uv1) * w.g;\nbaseColor += texture(detailMap2, uv2) * w.b;\nbaseColor += texture(detailMap3, uv3) * w.a;\n#else\nbaseColor = texture(detailMap0, uv0);\n#endif\ns.position = v_position;\n#if USE_NORMALMAP\nvec4 baseNormal = vec4(0, 0, 0, 0);\n#if LAYERS == 1\nbaseNormal = texture(normalMap0, uv0);\n#elif LAYERS == 2\nbaseNormal += texture(normalMap0, uv0) * w.r;\nbaseNormal += texture(normalMap1, uv1) * w.g;\n#elif LAYERS == 3\nbaseNormal += texture(normalMap0, uv0) * w.r;\nbaseNormal += texture(normalMap1, uv1) * w.g;\nbaseNormal += texture(normalMap2, uv2) * w.b;\n#elif LAYERS == 4\nbaseNormal += texture(normalMap0, uv0) * w.r;\nbaseNormal += texture(normalMap1, uv1) * w.g;\nbaseNormal += texture(normalMap2, uv2) * w.b;\nbaseNormal += texture(normalMap3, uv3) * w.a;\n#else\nbaseNormal = texture(normalMap0, uv0);\n#endif\nvec3 nmmp = baseNormal.xyz - vec3(0.5);\ns.normal =\nnmmp.x * normalize(v_tangent) +\nnmmp.y * normalize(v_binormal) +\nnmmp.z * normalize(v_normal);\n#else\ns.normal = v_normal;\n#endif\ns.albedo = vec4(SRGBToLinear(baseColor.rgb), 1.0);\ns.occlusion = 1.0;\n#if USE_PBR\ns.roughness = 0.0;\n#if LAYERS == 1\ns.roughness = roughness.x;\n#elif LAYERS == 2\ns.roughness += roughness.x * w.r;\ns.roughness += roughness.y * w.g;\n#elif LAYERS == 3\ns.roughness += roughness.x * w.r;\ns.roughness += roughness.y * w.g;\ns.roughness += roughness.z * w.b;\n#elif LAYERS == 4\ns.roughness += roughness.x * w.r;\ns.roughness += roughness.y * w.g;\ns.roughness += roughness.z * w.b;\ns.roughness += roughness.w * w.a;\n#else\ns.roughness = 1.0;\n#endif\ns.metallic = 0.0;\n#if LAYERS == 1\ns.metallic = metallic.x;\n#elif LAYERS == 2\ns.metallic += metallic.x * w.r;\ns.metallic += metallic.y * w.g;\n#elif LAYERS == 3\ns.metallic += metallic.x * w.r;\ns.metallic += metallic.y * w.g;\ns.metallic += metallic.z * w.b;\n#elif LAYERS == 4\ns.metallic += metallic.x * w.r;\ns.metallic += metallic.y * w.g;\ns.metallic += metallic.z * w.b;\ns.metallic += metallic.w * w.a;\n#else\ns.metallic = 0.0;\n#endif\n#else\ns.roughness = 1.0;\ns.metallic = 0.0;\n#endif\ns.emissive = vec3(0.0, 0.0, 0.0);\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nvec4 lightColor = texture(lightMap, luv.xy);\ns.lightmap = UnpackLightingmap(lightColor);\ns.lightmap_test = luv.z;\n#endif\n}\n#if CC_FORWARD_ADD\n#if CC_PIPELINE_TYPE == 0\n# define LIGHTS_PER_PASS 1\n#else\n# define LIGHTS_PER_PASS 10\n#endif\nlayout(std140) uniform CCForwardLight {\nhighp vec4 cc_lightPos[LIGHTS_PER_PASS];\nvec4 cc_lightColor[LIGHTS_PER_PASS];\nvec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\nvec4 cc_lightDir[LIGHTS_PER_PASS];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\nfloat factor = distSqr * invSqrAttRadius;\nfloat smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\nreturn smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\nfloat attenuation = 1.0 / max(distSqr, 0.01*0.01);\nattenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\nreturn attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\nfloat cd = dot(litDir, L);\nfloat attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\nreturn (attenuation * attenuation);\n}\nvec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 diffuseContrib = diffuse / 3.14159265359;\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 finalColor = vec3(0.0);\nint numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\nfor (int i = 0; i < LIGHTS_PER_PASS; i++) {\nif (i >= numLights) break;\nvec3 SLU = cc_lightPos[i].xyz - s.position;\nvec3 SL = normalize(SLU);\nvec3 SH = normalize(SL + V);\nfloat SNL = max(dot(N, SL), 0.001);\nfloat SNH = max(dot(N, SH), 0.0);\nfloat distSqr = dot(SLU, SLU);\nfloat litRadius = cc_lightSizeRangeAngle[i].x;\nfloat litRadiusSqr = litRadius * litRadius;\nfloat illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\nfloat attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\nattRadiusSqrInv *= attRadiusSqrInv;\nfloat att = GetDistAtt(distSqr, attRadiusSqrInv);\nvec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\nif (cc_lightPos[i].w > 0.0) {\nfloat cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\nfloat cosOuter = cc_lightSizeRangeAngle[i].z;\nfloat litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\nfloat litAngleOffset = -cosOuter * litAngleScale;\natt *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n}\nvec3 lightColor = cc_lightColor[i].rgb;\n#if CC_RECEIVE_SHADOW\nif (cc_lightPos[i].w > 0.0) {\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25(pos, s.position);\nelse if (pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9(pos, s.position);\nelse if (pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5(pos, s.position);\nelse shadowAttenuation = CCGetDirLightShadowFactorX1(pos, s.position);\nlightColor *= 1.0 - shadowAttenuation;\n}\n}\n#endif\nfinalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n}\nfinalColor = finalColor * s.occlusion;\nreturn vec4(finalColor, 0.0);\n}\nlayout(location = 0) out vec4 fragColorX;\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingAdditive(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\nfragColorX = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 0\nlayout(location = 0) out vec4 fragColorX;\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingBase(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\nfragColorX = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 1\nlayout(location = 0) out vec4 fragColor0;\nlayout(location = 1) out vec4 fragColor1;\nlayout(location = 2) out vec4 fragColor2;\nlayout(location = 3) out vec4 fragColor3;\nvoid main () {\nStandardSurface s; surf(s);\nfragColor0 = s.albedo;\nfragColor1 = vec4(s.position, s.roughness);\nfragColor2 = vec4(s.normal, s.metallic);\nfragColor3 = vec4(s.emissive, s.occlusion);\n}\n#endif"
            }, {
              "vert": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nlayout(std140) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nout vec2 v_clip_depth;\nvec4 vert () {\nvec4 worldPos;\nworldPos.x = cc_matWorld[3][0] + a_position.x;\nworldPos.y = cc_matWorld[3][1] + a_position.y;\nworldPos.z = cc_matWorld[3][2] + a_position.z;\nworldPos.w = 1.0;\nvec4 clipPos = cc_matLightViewProj * worldPos;\nv_clip_depth = clipPos.zw;\nreturn clipPos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nvec4 packDepthToRGBA (float depth) {\nvec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\nret = fract(ret);\nret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\nreturn ret;\n}\nin vec2 v_clip_depth;\nvec4 frag () {\nreturn packDepthToRGBA(v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\nin float a_vertexId;\nint getVertexId() {\nreturn int(a_vertexId);\n}\nlayout(std140) uniform CCMorph {\nvec4 cc_displacementWeights[15];\nvec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\nivec2 texSize = textureSize(tex, 0);\nreturn texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture(tex, x)),\ndecode32(texture(tex, y)),\ndecode32(texture(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nuniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nuniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nuniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nin highp vec4 a_jointAnimInfo;\n#endif\nlayout(std140) uniform CCSkinningTexture {\nhighp vec4 cc_jointTextureInfo;\n};\nlayout(std140) uniform CCSkinningAnimation {\nhighp vec4 cc_jointAnimInfo;\n};\nuniform highp sampler2D cc_jointTexture;\n#else\nlayout(std140) uniform CCSkinning {\nhighp vec4 cc_joints[30 * 3];\n};\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\nin vec4 a_matWorld0;\nin vec4 a_matWorld1;\nin vec4 a_matWorld2;\n#if USE_LIGHTMAP\nin vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nin float a_dyn_batch_id;\nlayout(std140) uniform CCLocalBatched {\nhighp mat4 cc_matWorlds[10];\n};\n#else\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nout float v_fog_factor;\n#if USE_VERTEX_COLOR\nin lowp vec4 a_color;\nout lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\nout vec2 v_uv;\nlayout(std140) uniform TexCoords {\nvec4 tilingOffset;\n};\n#endif\nvec4 vert () {\nvec4 position;\nposition = vec4(a_position, 1.0);\n#if CC_USE_MORPH\napplyMorph(position);\n#endif\n#if CC_USE_SKINNING\nCCSkin(position);\n#endif\nmat4 matWorld;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\n#else\nmatWorld = cc_matWorld;\n#endif\n#if USE_TEXTURE\nv_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n#if SAMPLE_FROM_RT\nv_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n#endif\n#endif\n#if USE_VERTEX_COLOR\nv_color = a_color;\n#endif\n#if CC_USE_FOG == 0\nv_fog_factor = LinearFog(matWorld * position);\n#elif CC_USE_FOG == 1\nv_fog_factor = ExpFog(matWorld * position);\n#elif CC_USE_FOG == 2\nv_fog_factor = ExpSquaredFog(matWorld * position);\n#elif CC_USE_FOG == 3\nv_fog_factor = LayeredFog(matWorld * position);\n#else\nv_fog_factor = 1.0;\n#endif\nreturn cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nin float v_fog_factor;\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\nin vec2 v_uv;\nuniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\nvec4 mainColor;\nvec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\nin lowp vec4 v_color;\n#endif\nvec4 frag () {\nvec4 o = mainColor;\no.rgb *= colorScaleAndCutoff.xyz;\n#if USE_VERTEX_COLOR\no *= v_color;\n#endif\n#if USE_TEXTURE\no *= texture(mainTexture, v_uv);\n#endif\n#if USE_ALPHA_TEST\nif (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n#endif\no = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, o.rgb, v_fog_factor), o.a);\nreturn CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nout vec2 v_uv;\nvoid main () {\nvec4 position;\nposition = vec4(a_position, 1.0);\nposition.xy = cc_cameraPos.w == 0.0 ? vec2(position.xy.x, -position.xy.y) : position.xy;\ngl_Position = vec4(position.x, position.y, 1.0, 1.0);\nv_uv = a_texCoord;\n}",
              "frag": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\nuniform sampler2D cc_shadowMap;\nuniform sampler2D cc_spotLightingMap;\nfloat CCGetLinearDepth (vec3 worldPos) {\nvec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\nfloat dist = length(viewStartPos.xyz);\nreturn cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n}\nfloat CCGetShadowFactorX1 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_shadowMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetShadowFactorX5 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetShadowFactorX9 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetShadowFactorX25 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\nfloat CCGetDirLightShadowFactorX1 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nfloat depth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetDirLightShadowFactorX5 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetDirLightShadowFactorX9 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetDirLightShadowFactorX25 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat depth = 0.0;\nfloat shadow = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\n#endif\n#if CC_USE_IBL\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\nvec3 NxH = cross(N, H);\nfloat OneMinusNoHSqr = dot(NxH, NxH);\nfloat a = roughness * roughness;\nfloat n = NoH * a;\nfloat p = a / (OneMinusNoHSqr + n * n);\nreturn p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\nreturn (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\nconst vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\nconst vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\nvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\nAB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\nreturn specular * AB.x + AB.y;\n}\nstruct StandardSurface {\nvec4 albedo;\nvec3 position;\nvec3 normal;\nvec3 emissive;\nvec3 lightmap;\nfloat lightmap_test;\nfloat roughness;\nfloat metallic;\nfloat occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 L = normalize(-cc_mainLitDir.xyz);\nvec3 H = normalize(L + V);\nfloat NH = max(dot(N, H), 0.0);\nfloat NL = max(dot(N, L), 0.001);\nvec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\nvec3 diffuseContrib = diffuse;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nif (s.lightmap_test > 0.0001) {\nfinalColor = s.lightmap.rgb;\n}\n#else\ndiffuseContrib /= 3.14159265359;\n#endif\nvec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\nfinalColor *= (diffuseContrib + specularContrib);\nfloat fAmb = 0.5 - N.y * 0.5;\nvec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\nfinalColor += (ambDiff.rgb * diffuse);\n#if CC_USE_IBL\nvec3 R = normalize(reflect(-V, N));\nvec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n#if CC_USE_IBL == 2\nvec3 env = unpackRGBE(envmap);\n#else\nvec3 env = SRGBToLinear(envmap.rgb);\n#endif\nfinalColor += env * cc_ambientSky.w * specular;\n#endif\nfinalColor = finalColor * s.occlusion;\n#if CC_USE_HDR\ns.emissive *= cc_exposure.w;\n#endif\nfinalColor += s.emissive;\n#if CC_RECEIVE_SHADOW\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25(pos);\nelse if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9(pos);\nelse if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5(pos);\nelse shadowAttenuation = CCGetShadowFactorX1(pos);\nvec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\nif (cc_shadowNFLSInfo.w > 0.000001) {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n} else {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n}\n}\n#endif\nreturn vec4(finalColor, s.albedo.a);\n}\n#if CC_PIPELINE_TYPE == 0\n# define LIGHTS_PER_PASS 1\n#else\n# define LIGHTS_PER_PASS 10\n#endif\nlayout(std140) uniform CCForwardLight {\nhighp vec4 cc_lightPos[LIGHTS_PER_PASS];\nvec4 cc_lightColor[LIGHTS_PER_PASS];\nvec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\nvec4 cc_lightDir[LIGHTS_PER_PASS];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\nfloat factor = distSqr * invSqrAttRadius;\nfloat smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\nreturn smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\nfloat attenuation = 1.0 / max(distSqr, 0.01*0.01);\nattenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\nreturn attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\nfloat cd = dot(litDir, L);\nfloat attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\nreturn (attenuation * attenuation);\n}\nvec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 diffuseContrib = diffuse / 3.14159265359;\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 finalColor = vec3(0.0);\nint numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\nfor (int i = 0; i < LIGHTS_PER_PASS; i++) {\nif (i >= numLights) break;\nvec3 SLU = cc_lightPos[i].xyz - s.position;\nvec3 SL = normalize(SLU);\nvec3 SH = normalize(SL + V);\nfloat SNL = max(dot(N, SL), 0.001);\nfloat SNH = max(dot(N, SH), 0.0);\nfloat distSqr = dot(SLU, SLU);\nfloat litRadius = cc_lightSizeRangeAngle[i].x;\nfloat litRadiusSqr = litRadius * litRadius;\nfloat illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\nfloat attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\nattRadiusSqrInv *= attRadiusSqrInv;\nfloat att = GetDistAtt(distSqr, attRadiusSqrInv);\nvec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\nif (cc_lightPos[i].w > 0.0) {\nfloat cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\nfloat cosOuter = cc_lightSizeRangeAngle[i].z;\nfloat litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\nfloat litAngleOffset = -cosOuter * litAngleScale;\natt *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n}\nvec3 lightColor = cc_lightColor[i].rgb;\n#if CC_RECEIVE_SHADOW\nif (cc_lightPos[i].w > 0.0) {\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25(pos, s.position);\nelse if (pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9(pos, s.position);\nelse if (pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5(pos, s.position);\nelse shadowAttenuation = CCGetDirLightShadowFactorX1(pos, s.position);\nlightColor *= 1.0 - shadowAttenuation;\n}\n}\n#endif\nfinalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n}\nfinalColor = finalColor * s.occlusion;\nreturn vec4(finalColor, 0.0);\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nin vec2 v_uv;\nuniform sampler2D cc_gbuffer_albedoMap;\nuniform sampler2D cc_gbuffer_positionMap;\nuniform sampler2D cc_gbuffer_normalMap;\nuniform sampler2D cc_gbuffer_emissiveMap;\nlayout(location = 0) out vec4 fragColor;\nvoid main () {\nStandardSurface s;\nvec4 albedoMap = texture(cc_gbuffer_albedoMap,v_uv);\nvec4 positionMap = texture(cc_gbuffer_positionMap,v_uv);\nvec4 normalMap = texture(cc_gbuffer_normalMap,v_uv);\nvec4 emissiveMap = texture(cc_gbuffer_emissiveMap,v_uv);\ns.albedo = albedoMap;\ns.position = positionMap.xyz;\ns.roughness = positionMap.w;\ns.normal = normalMap.xyz;\ns.metallic = normalMap.w;\ns.emissive = emissiveMap.xyz;\ns.occlusion = emissiveMap.w;\nfloat fogFactor;\n#if CC_USE_FOG == 0\nfogFactor = LinearFog(vec4(s.position, 1));\n#elif CC_USE_FOG == 1\nfogFactor = ExpFog(vec4(s.position, 1));\n#elif CC_USE_FOG == 2\nfogFactor = ExpSquaredFog(vec4(s.position, 1));\n#elif CC_USE_FOG == 3\nfogFactor = LayeredFog(vec4(s.position, 1));\n#else\nfogFactor = 1.0;\n#endif\nvec4 shadowPos;\nshadowPos = cc_matLightViewProj * vec4(s.position, 1);\nvec4 color = CCStandardShadingBase(s, shadowPos) +\nCCStandardShadingAdditive(s, shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, fogFactor), color.a);\nfragColor = CCFragOutput(color);\n}"
            }], [{
              "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\nin float a_vertexId;\nint getVertexId() {\nreturn int(a_vertexId);\n}\nlayout(std140) uniform CCMorph {\nvec4 cc_displacementWeights[15];\nvec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\nivec2 texSize = textureSize(tex, 0);\nreturn texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture(tex, x)),\ndecode32(texture(tex, y)),\ndecode32(texture(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nuniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nuniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nuniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nin highp vec4 a_jointAnimInfo;\n#endif\nlayout(std140) uniform CCSkinningTexture {\nhighp vec4 cc_jointTextureInfo;\n};\nlayout(std140) uniform CCSkinningAnimation {\nhighp vec4 cc_jointAnimInfo;\n};\nuniform highp sampler2D cc_jointTexture;\n#else\nlayout(std140) uniform CCSkinning {\nhighp vec4 cc_joints[30 * 3];\n};\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\nin vec4 a_matWorld0;\nin vec4 a_matWorld1;\nin vec4 a_matWorld2;\n#if USE_LIGHTMAP\nin vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nin float a_dyn_batch_id;\nlayout(std140) uniform CCLocalBatched {\nhighp mat4 cc_matWorlds[10];\n};\n#else\nlayout(std140) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(std140) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\nvec4 vert () {\nvec4 position;\nposition = vec4(a_position, 1.0);\n#if CC_USE_MORPH\napplyMorph(position);\n#endif\n#if CC_USE_SKINNING\nCCSkin(position);\n#endif\nmat4 matWorld;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\n#else\nmatWorld = cc_matWorld;\n#endif\nposition = cc_matProj * (cc_matView * cc_matLightPlaneProj * matWorld) * position;\nposition.z -= 0.0001;\nreturn position;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nlayout(std140) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nvec4 frag () {\nreturn CCFragOutput(cc_shadowColor);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_MORPH\nin float a_vertexId;\nint getVertexId() {\nreturn int(a_vertexId);\n}\nlayout(std140) uniform CCMorph {\nvec4 cc_displacementWeights[15];\nvec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\nivec2 texSize = textureSize(tex, 0);\nreturn texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture(tex, x)),\ndecode32(texture(tex, y)),\ndecode32(texture(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nuniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nuniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nuniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nin vec4 a_joints;\nin vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nin highp vec4 a_jointAnimInfo;\n#endif\nlayout(std140) uniform CCSkinningTexture {\nhighp vec4 cc_jointTextureInfo;\n};\nlayout(std140) uniform CCSkinningAnimation {\nhighp vec4 cc_jointAnimInfo;\n};\nuniform highp sampler2D cc_jointTexture;\n#else\nlayout(std140) uniform CCSkinning {\nhighp vec4 cc_joints[30 * 3];\n};\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nout vec2 v_uv;\nvoid main () {\nStandardVertInput In;\nIn.position = vec4(a_position, 1.0);\nIn.normal = a_normal;\nIn.tangent = a_tangent;\n#if CC_USE_MORPH\napplyMorph(In);\n#endif\n#if CC_USE_SKINNING\nCCSkin(In);\n#endif\nIn.position.xy = cc_cameraPos.w == 0.0 ? vec2(In.position.xy.x, -In.position.xy.y) : In.position.xy;\ngl_Position = In.position;\ngl_Position.y = gl_Position.y;\nv_uv = a_texCoord;\n}",
              "frag": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nin vec2 v_uv;\nuniform sampler2D cc_lighting_resultMap;\nlayout(location = 0) out vec4 fragColor;\nvoid texcoords(vec2 fragCoord, vec2 resolution,\nout vec2 v_rgbNW, out vec2 v_rgbNE,\nout vec2 v_rgbSW, out vec2 v_rgbSE,\nout vec2 v_rgbM) {\nvec2 inverseVP = 1.0 / resolution.xy;\nv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\nv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\nv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\nv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\nv_rgbM = vec2(fragCoord * inverseVP);\n}\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\nvec2 v_rgbNW, vec2 v_rgbNE,\nvec2 v_rgbSW, vec2 v_rgbSE,\nvec2 v_rgbM) {\nvec4 color;\nmediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\nvec3 rgbNW = texture(tex, v_rgbNW).xyz;\nvec3 rgbNE = texture(tex, v_rgbNE).xyz;\nvec3 rgbSW = texture(tex, v_rgbSW).xyz;\nvec3 rgbSE = texture(tex, v_rgbSE).xyz;\nvec4 texColor = texture(tex, v_rgbM);\nvec3 rgbM  = texColor.xyz;\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat lumaNW = dot(rgbNW, luma);\nfloat lumaNE = dot(rgbNE, luma);\nfloat lumaSW = dot(rgbSW, luma);\nfloat lumaSE = dot(rgbSE, luma);\nfloat lumaM  = dot(rgbM,  luma);\nfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\nfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\nmediump vec2 dir;\ndir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\ndir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\nfloat dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n(0.25 * (1.0 / 8.0)), (1.0/ 128.0));\nfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\ndir = min(vec2(8.0, 8.0),\nmax(vec2(-8.0, -8.0),\ndir * rcpDirMin)) * inverseVP;\nvec3 rgbA = 0.5 * (\ntexture(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\ntexture(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\nvec3 rgbB = rgbA * 0.5 + 0.25 * (\ntexture(tex, fragCoord * inverseVP + dir * -0.5).xyz +\ntexture(tex, fragCoord * inverseVP + dir * 0.5).xyz);\nfloat lumaB = dot(rgbB, luma);\nif ((lumaB < lumaMin) || (lumaB > lumaMax))\ncolor = vec4(rgbA, texColor.a);\nelse\ncolor = vec4(rgbB, texColor.a);\nreturn color;\n}\nvoid main () {\nmediump vec2 v_rgbNW;\nmediump vec2 v_rgbNE;\nmediump vec2 v_rgbSW;\nmediump vec2 v_rgbSE;\nmediump vec2 v_rgbM;\nvec2 resolution = cc_screenSize.xy;\nvec2 fragCoord = v_uv * resolution;\ntexcoords(fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\nfragColor = fxaa(cc_lighting_resultMap, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}"
            }], [{
              "vert": "\nprecision highp float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\nout mediump vec4 viewDir;\nvec4 vert () {\nviewDir = vec4(a_position, 1.0);\nmat4 matViewRotOnly = mat4(mat3(cc_matView));\nmat4 matProj = cc_matProj;\nif (matProj[3].w > 0.0) {\nvec2 scale = vec2(48.0, 24.0);\nmatProj[0].xy *= scale;\nmatProj[1].xy *= scale;\nmatProj[2].zw = vec2(-1.0);\nmatProj[3].zw = vec2(0.0);\n}\nvec4 pos = matProj * matViewRotOnly * viewDir;\npos.z = 0.99999 * pos.w;\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nuniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nin mediump vec4 viewDir;\nvec4 frag () {\n#if USE_RGBE_CUBEMAP\nvec3 c = unpackRGBE(texture(cc_environment, viewDir.xyz));\n#else\nvec3 c = SRGBToLinear(texture(cc_environment, viewDir.xyz).rgb);\n#endif\nreturn CCFragOutput(vec4(c * cc_ambientSky.w, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec2 v_uv;\nlayout(std140) uniform Constants {\nvec4 offset;\n};\nlayout(std140) uniform PerFrameInfo {\nvec4 digits[8 * 10 / 4];\n};\nfloat getComponent(vec4 v, float i) {\nif (i < 1.0) { return v.x; }\nelse if (i < 2.0) { return v.y; }\nelse if (i < 3.0) { return v.z; }\nelse { return v.w; }\n}\nvec4 vert () {\nvec4 position = cc_matViewProj * vec4(a_position, 1.0);\nposition.xy += offset.xy;\nv_uv = a_color.xy;\nif (a_color.z >= 0.0) {\nfloat n = getComponent(digits[int(a_color.z)], a_color.w);\nv_uv += vec2(offset.z * n, 0.0);\n}\nreturn position;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nin vec2 v_uv;\nuniform sampler2D mainTexture;\nvec4 frag () {\nreturn CCFragOutput(texture(mainTexture, v_uv));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nin vec2 a_position;\nin vec2 a_texCoord;\nout vec2 v_uv;\nout float v_percent;\nlayout(std140) uniform Constant {\nvec4 u_buffer0;\nvec4 u_buffer1;\nmat4 u_projection;\n};\nvec4 vert () {\nvec2 worldPos = a_position * u_buffer1.xy + u_buffer1.zw;\nvec2 clipSpace = worldPos / u_buffer0.xy * 2.0 - 1.0;\nvec4 screenPos = u_projection * vec4(clipSpace, 0.0, 1.0);\nv_uv = a_texCoord;\nv_percent = u_buffer0.z;\nreturn screenPos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nin vec2 v_uv;\nin float v_percent;\nuniform sampler2D mainTexture;\nvec4 frag () {\nvec4 color = texture(mainTexture, v_uv);\nfloat precent = clamp(v_percent, 0.0, 1.0);\ncolor.xyz *= precent;\nreturn color;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }]];

            const glsl4 = [[{
              "vert": "\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\nvec4 mainTiling_Offset;\nvec4 frameTile_velLenScale;\nvec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\nmat3 m = mat3(xAxis,yAxis,zAxis);\nfloat trace = m[0][0] + m[1][1] + m[2][2];\nvec4 quat;\nif (trace > 0.) {\nfloat s = 0.5 / sqrt(trace + 1.0);\nquat.w = 0.25 / s;\nquat.x = (m[2][1] - m[1][2]) * s;\nquat.y = (m[0][2] - m[2][0]) * s;\nquat.z = (m[1][0] - m[0][1]) * s;\n} else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\nfloat s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\nquat.w = (m[2][1] - m[1][2]) / s;\nquat.x = 0.25 * s;\nquat.y = (m[0][1] + m[1][0]) / s;\nquat.z = (m[0][2] + m[2][0]) / s;\n} else if (m[1][1] > m[2][2]) {\nfloat s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\nquat.w = (m[0][2] - m[2][0]) / s;\nquat.x = (m[0][1] + m[1][0]) / s;\nquat.y = 0.25 * s;\nquat.z = (m[1][2] + m[2][1]) / s;\n} else {\nfloat s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\nquat.w = (m[1][0] - m[0][1]) / s;\nquat.x = (m[0][2] + m[2][0]) / s;\nquat.y = (m[1][2] + m[2][1]) / s;\nquat.z = 0.25 * s;\n}\nfloat len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\nif (len > 0.) {\nlen = 1. / sqrt(len);\nquat.x = quat.x * len;\nquat.y = quat.y * len;\nquat.z = quat.z * len;\nquat.w = quat.w * len;\n}\nreturn quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\nfloat x = angle.x / 2.;\nfloat y = angle.y / 2.;\nfloat z = angle.z / 2.;\nfloat sx = sin(x);\nfloat cx = cos(x);\nfloat sy = sin(y);\nfloat cy = cos(y);\nfloat sz = sin(z);\nfloat cz = cos(z);\nvec4 quat = vec4(0);\nquat.x = sx * cy * cz + cx * sy * sz;\nquat.y = cx * sy * cz + sx * cy * sz;\nquat.z = cx * cy * sz - sx * sy * cz;\nquat.w = cx * cy * cz - sx * sy * sz;\nreturn quat;\n}\nvec4 quatMultiply (vec4 a, vec4 b){\nvec4 quat;\nquat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\nquat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\nquat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\nquat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\nreturn quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\nfloat ix = q.w * v.x + q.y * v.z - q.z * v.y;\nfloat iy = q.w * v.y + q.z * v.x - q.x * v.z;\nfloat iz = q.w * v.z + q.x * v.y - q.y * v.x;\nfloat iw = -q.x * v.x - q.y * v.y - q.z * v.z;\nv.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\nv.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\nv.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\nvec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\nvec4 rotQuat = quatMultiply(viewQuat, q);\nrotateVecFromQuat(pos, rotQuat);\nreturn pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\nfloat xOS = cos(angle) * corner.x - sin(angle) * corner.y;\nfloat yOS = sin(angle) * corner.x + cos(angle) * corner.y;\ncorner.x = xOS;\ncorner.y = yOS;\n}\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n, mat4 viewInv\n) {\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\nvec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\nvec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(set = 1, binding = 1) uniform builtin {\nvec4 cc_size_rotation;\n};\nvec4 vs_main() {\nvec4 pos = vec4(a_position, 1);\npos = cc_matWorld * pos;\nvec2 vertOffset = a_texCoord.xy - 0.5;\ncomputeVertPos(pos, vertOffset, quaternionFromEuler(vec3(0., 0., cc_size_rotation.z)), vec3(cc_size_rotation.xy, 0.), cc_matViewInv);\npos = cc_matViewProj * pos;\nuv = a_texCoord.xy;\ncolor = a_color;\nreturn pos;\n}\nvoid main() { gl_Position = vs_main(); }",
              "frag": "\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 3) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 2) uniform FragConstants {\nvec4 tintColor;\n};\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\nreturn CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"
            }], [{
              "vert": "\nprecision highp float;\nlayout(location = 0) in vec3 a_position;\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nvec4 frag () {\nvec4 o = vec4(1.0);\nreturn o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_color;\nlayout(location = 0) out vec4 v_color;\nlayout(location = 2) in float a_dist;\nlayout(location = 1) out float v_dist;\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\npos = cc_matViewProj * cc_matWorld * pos;\nv_color = a_color;\nv_dist = a_dist;\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nlayout(location = 0) in vec4 v_color;\nlayout(location = 1) in float v_dist;\nvec4 frag () {\nvec4 o = v_color;\nfloat aa = fwidth(v_dist);\nfloat alpha = 1. - smoothstep(-aa, 0., abs(v_dist) - 1.0);\no.rgb *= o.a;\no *= alpha;\nreturn o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\nmat3 m = mat3(xAxis,yAxis,zAxis);\nfloat trace = m[0][0] + m[1][1] + m[2][2];\nvec4 quat;\nif (trace > 0.) {\nfloat s = 0.5 / sqrt(trace + 1.0);\nquat.w = 0.25 / s;\nquat.x = (m[2][1] - m[1][2]) * s;\nquat.y = (m[0][2] - m[2][0]) * s;\nquat.z = (m[1][0] - m[0][1]) * s;\n} else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\nfloat s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\nquat.w = (m[2][1] - m[1][2]) / s;\nquat.x = 0.25 * s;\nquat.y = (m[0][1] + m[1][0]) / s;\nquat.z = (m[0][2] + m[2][0]) / s;\n} else if (m[1][1] > m[2][2]) {\nfloat s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\nquat.w = (m[0][2] - m[2][0]) / s;\nquat.x = (m[0][1] + m[1][0]) / s;\nquat.y = 0.25 * s;\nquat.z = (m[1][2] + m[2][1]) / s;\n} else {\nfloat s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\nquat.w = (m[1][0] - m[0][1]) / s;\nquat.x = (m[0][2] + m[2][0]) / s;\nquat.y = (m[1][2] + m[2][1]) / s;\nquat.z = 0.25 * s;\n}\nfloat len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\nif (len > 0.) {\nlen = 1. / sqrt(len);\nquat.x = quat.x * len;\nquat.y = quat.y * len;\nquat.z = quat.z * len;\nquat.w = quat.w * len;\n}\nreturn quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\nfloat x = angle.x / 2.;\nfloat y = angle.y / 2.;\nfloat z = angle.z / 2.;\nfloat sx = sin(x);\nfloat cx = cos(x);\nfloat sy = sin(y);\nfloat cy = cos(y);\nfloat sz = sin(z);\nfloat cz = cos(z);\nvec4 quat = vec4(0);\nquat.x = sx * cy * cz + cx * sy * sz;\nquat.y = cx * sy * cz + sx * cy * sz;\nquat.z = cx * cy * sz - sx * sy * cz;\nquat.w = cx * cy * cz - sx * sy * sz;\nreturn quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\nfloat x2 = q.x + q.x;\nfloat y2 = q.y + q.y;\nfloat z2 = q.z + q.z;\nfloat xx = q.x * x2;\nfloat xy = q.x * y2;\nfloat xz = q.x * z2;\nfloat yy = q.y * y2;\nfloat yz = q.y * z2;\nfloat zz = q.z * z2;\nfloat wx = q.w * x2;\nfloat wy = q.w * y2;\nfloat wz = q.w * z2;\nreturn mat4(\n1. - (yy + zz), xy + wz, xz - wy, 0,\nxy - wz, 1. - (xx + zz), yz + wx, 0,\nxz + wy, yz - wx, 1. - (xx + yy), 0,\np.x, p.y, p.z, 1\n);\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\nfloat x = q.x, y = q.y, z = q.z, w = q.w;\nfloat x2 = x + x;\nfloat y2 = y + y;\nfloat z2 = z + z;\nfloat xx = x * x2;\nfloat xy = x * y2;\nfloat xz = x * z2;\nfloat yy = y * y2;\nfloat yz = y * z2;\nfloat zz = z * z2;\nfloat wx = w * x2;\nfloat wy = w * y2;\nfloat wz = w * z2;\nfloat sx = s.x;\nfloat sy = s.y;\nfloat sz = s.z;\nreturn mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n(xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n(xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\nt.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\nvec4 quat;\nquat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\nquat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\nquat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\nquat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\nreturn quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\nfloat ix = q.w * v.x + q.y * v.z - q.z * v.y;\nfloat iy = q.w * v.y + q.z * v.x - q.x * v.z;\nfloat iz = q.w * v.z + q.x * v.y - q.y * v.x;\nfloat iw = -q.x * v.x - q.y * v.y - q.z * v.z;\nv.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\nv.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\nv.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\nvec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\nvec4 rotQuat = quatMultiply(viewQuat, q);\nrotateVecFromQuat(pos, rotQuat);\nreturn pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\nfloat xOS = cos(angle) * corner.x - sin(angle) * corner.y;\nfloat yOS = sin(angle) * corner.x + cos(angle) * corner.y;\ncorner.x = xOS;\ncorner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\nvec4 mainTiling_Offset;\nvec4 frameTile_velLenScale;\nvec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n, vec3 eye\n, vec4 velocity\n, float velocityScale\n, float lengthScale\n, float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\nvec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\nvec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\nvec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\nvec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\npos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = vec3(1, 0, 0);\nvec3 camY = vec3(0, 0, -1);\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\nvec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\nrotateCorner(viewSpaceVert, q.z);\nvec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\nvec3 camY = vec3(0, 1, 0);\nvec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\npos.xyz += offset;\n#else\npos.x += vertOffset.x;\npos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\nvec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\naniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\nvertIndex.y = 1. - vertIndex.y;\n#endif\nreturn (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(set = 1, binding = 1) uniform SampleConstants {\nvec4 u_sampleInfo;\n};\nlayout(set = 1, binding = 2) uniform TickConstants {\nvec4 u_worldRot;\nvec4 u_timeDelta;\n};\nlayout(location = 0) in vec4 a_position_starttime;\nlayout(location = 1) in vec4 a_size_uv;\nlayout(location = 2) in vec4 a_rotation_uv;\nlayout(location = 3) in vec4 a_color;\nlayout(location = 4) in vec4 a_dir_life;\nlayout(location = 5) in float a_rndSeed;\n#if CC_RENDER_MODE == 4\nlayout(location = 6) in vec3 a_texCoord;\nlayout(location = 7) in vec3 a_texCoord3;\nlayout(location = 8) in vec3 a_normal;\nlayout(location = 9) in vec4 a_color1;\n#endif\nvec3 unpackCurveData (sampler2D tex, vec2 coord) {\nvec4 a = texture(tex, coord);\nvec4 b = texture(tex, coord + u_sampleInfo.y);\nfloat c = fract(coord.x * u_sampleInfo.x);\nreturn mix(a.xyz, b.xyz, c);\n}\nvec3 unpackCurveData (sampler2D tex, vec2 coord, out float w) {\nvec4 a = texture(tex, coord);\nvec4 b = texture(tex, coord + u_sampleInfo.y);\nfloat c = fract(coord.x * u_sampleInfo.x);\nw = mix(a.w, b.w, c);\nreturn mix(a.xyz, b.xyz, c);\n}\nfloat pseudoRandom (float seed) {\nseed = mod(seed, 233280.);\nfloat q = (seed * 9301. + 49297.) / 233280.;\nreturn fract(q);\n}\n#if COLOR_OVER_TIME_MODULE_ENABLE\nlayout(set = 1, binding = 10) uniform sampler2D color_over_time_tex0;\nlayout(set = 1, binding = 3) uniform ColorConstant {\nint u_color_mode;\n};\n#endif\n#if ROTATION_OVER_TIME_MODULE_ENABLE\nlayout(set = 1, binding = 11) uniform sampler2D rotation_over_time_tex0;\nlayout(set = 1, binding = 4) uniform RotationConstant {\nint u_rotation_mode;\n};\n#endif\n#if SIZE_OVER_TIME_MODULE_ENABLE\nlayout(set = 1, binding = 12) uniform sampler2D size_over_time_tex0;\nlayout(set = 1, binding = 5) uniform SizeConstant {\nint u_size_mode;\n};\n#endif\n#if FORCE_OVER_TIME_MODULE_ENABLE\nlayout(set = 1, binding = 13) uniform sampler2D force_over_time_tex0;\nlayout(set = 1, binding = 6) uniform ForceConstant {\nint u_force_mode;\nint u_force_space;\n};\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\nlayout(set = 1, binding = 14) uniform sampler2D velocity_over_time_tex0;\nlayout(set = 1, binding = 7) uniform VelocityConstant {\nint u_velocity_mode;\nint u_velocity_space;\n};\n#endif\n#if TEXTURE_ANIMATION_MODULE_ENABLE\nlayout(set = 1, binding = 15) uniform sampler2D texture_animation_tex0;\nlayout(set = 1, binding = 8) uniform AnimationConstant {\nvec4 u_anim_info;\n};\n#endif\nfloat repeat (float t, float length) {\nreturn t - floor(t / length) * length;\n}\nvec4 rotateQuat (vec4 p, vec4 q) {\nvec3 iv = cross(q.xyz, p.xyz) + q.w * p.xyz;\nvec3 res = p.xyz + 2.0 * cross(q.xyz, iv);\nreturn vec4(res.xyz, p.w);\n}\nvec4 gpvs_main () {\nfloat activeTime = u_timeDelta.x - a_position_starttime.w;\nfloat normalizedTime = clamp(activeTime / a_dir_life.w, 0.0, 1.0);\nvec2 timeCoord0 = vec2(normalizedTime, 0.);\nvec2 timeCoord1 = vec2(normalizedTime, 1.);\n#if CC_RENDER_MODE == 4\nvec2 vertIdx = vec2(a_texCoord.x, a_texCoord.y);\n#else\nvec2 vertIdx = vec2(a_size_uv.w, a_rotation_uv.w);\n#endif\nvec4 velocity = vec4(a_dir_life.xyz, 0.);\nvec4 pos = vec4(a_position_starttime.xyz, 1.);\nvec3 size = a_size_uv.xyz;\n#if SIZE_OVER_TIME_MODULE_ENABLE\nif (u_size_mode == 1) {\nsize *= unpackCurveData(size_over_time_tex0, timeCoord0);\n} else {\nvec3 size_0 = unpackCurveData(size_over_time_tex0, timeCoord0);\nvec3 size_1 = unpackCurveData(size_over_time_tex0, timeCoord1);\nfloat factor_s = pseudoRandom(a_rndSeed + 39825.);\nsize *= mix(size_0, size_1, factor_s);\n}\n#endif\nvec3 compScale = scale.xyz * size;\n#if FORCE_OVER_TIME_MODULE_ENABLE\nvec3 forceAnim = vec3(0.);\nif (u_force_mode == 1) {\nforceAnim = unpackCurveData(force_over_time_tex0, timeCoord0);\n} else {\nvec3 force_0 = unpackCurveData(force_over_time_tex0, timeCoord0);\nvec3 force_1 = unpackCurveData(force_over_time_tex0, timeCoord1);\nfloat factor_f =  pseudoRandom(a_rndSeed + 212165.);\nforceAnim = mix(force_0, force_1, factor_f);\n}\nvec4 forceTrack = vec4(forceAnim, 0.);\nif (u_force_space == 0) {\nforceTrack = rotateQuat(forceTrack, u_worldRot);\n}\nvelocity.xyz += forceTrack.xyz;\n#endif\n#if VELOCITY_OVER_TIME_MODULE_ENABLE\nfloat speedModifier0 = 1.;\nfloat speedModifier1 = 1.;\nvec3 velocityAnim = vec3(0.);\nif (u_velocity_mode == 1) {\nvelocityAnim = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\n} else {\nvec3 vectory_0 = unpackCurveData(velocity_over_time_tex0, timeCoord0, speedModifier0);\nvec3 vectory_1 = unpackCurveData(velocity_over_time_tex0, timeCoord1, speedModifier1);\nfloat factor_v = pseudoRandom(a_rndSeed + 197866.);\nvelocityAnim = mix(vectory_0, vectory_1, factor_v);\nspeedModifier0 = mix(speedModifier0, speedModifier1, factor_v);\n}\nvec4 velocityTrack = vec4(velocityAnim, 0.);\nif (u_velocity_space == 0) {\nvelocityTrack = rotateQuat(velocityTrack, u_worldRot);\n}\nvelocity.xyz += velocityTrack.xyz;\nvelocity.xyz *= speedModifier0;\n#endif\npos.xyz += velocity.xyz * normalizedTime * a_dir_life.w;\n#if !CC_USE_WORLD_SPACE\npos = cc_matWorld * pos;\n#if CC_RENDER_MODE == 1\nvelocity = rotateQuat(velocity, u_worldRot);\n#endif\n#endif\nvec3 rotation = a_rotation_uv.xyz;\n#if ROTATION_OVER_TIME_MODULE_ENABLE\nif (u_rotation_mode == 1) {\nrotation += unpackCurveData(rotation_over_time_tex0, timeCoord0) * normalizedTime * a_dir_life.w;\n} else {\nvec3 rotation_0 = unpackCurveData(rotation_over_time_tex0, timeCoord0);\nvec3 rotation_1 = unpackCurveData(rotation_over_time_tex0, timeCoord1);\nfloat factor_r = pseudoRandom(a_rndSeed + 125292.);\nrotation += mix(rotation_0, rotation_1, factor_r) * normalizedTime * a_dir_life.w;\n}\n#endif\n#if COLOR_OVER_TIME_MODULE_ENABLE\nif (u_color_mode == 1) {\ncolor = a_color * texture(color_over_time_tex0, timeCoord0);\n} else {\nvec4 color_0 = texture(color_over_time_tex0, timeCoord0);\nvec4 color_1 = texture(color_over_time_tex0, timeCoord1);\nfloat factor_c = pseudoRandom(a_rndSeed + 91041.);\ncolor = a_color * mix(color_0, color_1, factor_c);\n}\n#else\ncolor = a_color;\n#endif\n#if CC_RENDER_MODE != 4\nvec2 cornerOffset = vec2((vertIdx - 0.5));\n#if CC_RENDER_MODE == 0\nvec3 rotEuler = rotation.xyz;\n#elif CC_RENDER_MODE == 1\nvec3 rotEuler = vec3(0.);\n#else\nvec3 rotEuler = vec3(0., 0., rotation.z);\n#endif\ncomputeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, cc_matViewInv\n#endif\n#if CC_RENDER_MODE == 1\n, cc_cameraPos.xyz\n, velocity\n, frameTile_velLenScale.z\n, frameTile_velLenScale.w\n, a_size_uv.w\n#endif\n);\n#else\nmat4 xformNoScale = matrixFromRT(quaternionFromEuler(rotation), pos.xyz);\nmat4 xform = matFromRTS(quaternionFromEuler(rotation), pos.xyz, compScale);\npos = xform * vec4(a_texCoord3, 1);\nvec4 normal = xformNoScale * vec4(a_normal, 0);\ncolor *= a_color1;\n#endif\npos = cc_matViewProj * pos;\nfloat frameIndex = 0.;\n#if TEXTURE_ANIMATION_MODULE_ENABLE\nfloat startFrame = 0.;\nvec3 frameInfo = vec3(0.);\nif (int(u_anim_info.x) == 1) {\nframeInfo = unpackCurveData(texture_animation_tex0, timeCoord0);\n} else {\nvec3 frameInfo0 = unpackCurveData(texture_animation_tex0, timeCoord0);\nvec3 frameInfo1 = unpackCurveData(texture_animation_tex0, timeCoord1);\nfloat factor_t = pseudoRandom(a_rndSeed + 90794.);\nframeInfo = mix(frameInfo0, frameInfo1, factor_t);\n}\nstartFrame = frameInfo.x / u_anim_info.y;\nframeIndex = repeat(u_anim_info.z * (frameInfo.y + startFrame), 1.);\n#endif\nuv = computeUV(frameIndex, vertIdx, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\nreturn pos;\n}\nvoid main() { gl_Position = gpvs_main(); }",
              "frag": "\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 16) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 9) uniform FragConstants {\nvec4 tintColor;\n};\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\nreturn CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"
            }], [{
              "vert": "\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\nvec4 mainTiling_Offset;\nvec4 frameTile_velLenScale;\nvec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\nlayout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\nhighp vec4 pos = vec4(a_position, 1);\nvec4 velocity = vec4(a_texCoord1.xyz, 0);\n#if !CC_USE_WORLD_SPACE\npos = cc_matWorld * pos;\nvelocity = cc_matWorld * velocity;\n#endif\nfloat vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\nvec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\npos.xyz += camUp * vertOffset;\npos = cc_matViewProj * pos;\nuv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\ncolor = a_color;\n#if CC_DRAW_WIRE_FRAME\nvBarycentric = a_texCoord2;\n#endif\nreturn pos;\n}\nvoid main() { gl_Position = vs_main(); }",
              "frag": "\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\n#if CC_DRAW_WIRE_FRAME\nlayout(location = 2) in vec3 vBarycentric;\n#endif\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\nvec4 tintColor;\n};\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\nif (any(lessThan(vBarycentric, vec3(0.02)))) {\ncol = vec4(0., 1., 1., 1.);\n}\n#endif\nreturn CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"
            }], [{
              "vert": "\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\nmat3 m = mat3(xAxis,yAxis,zAxis);\nfloat trace = m[0][0] + m[1][1] + m[2][2];\nvec4 quat;\nif (trace > 0.) {\nfloat s = 0.5 / sqrt(trace + 1.0);\nquat.w = 0.25 / s;\nquat.x = (m[2][1] - m[1][2]) * s;\nquat.y = (m[0][2] - m[2][0]) * s;\nquat.z = (m[1][0] - m[0][1]) * s;\n} else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\nfloat s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\nquat.w = (m[2][1] - m[1][2]) / s;\nquat.x = 0.25 * s;\nquat.y = (m[0][1] + m[1][0]) / s;\nquat.z = (m[0][2] + m[2][0]) / s;\n} else if (m[1][1] > m[2][2]) {\nfloat s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\nquat.w = (m[0][2] - m[2][0]) / s;\nquat.x = (m[0][1] + m[1][0]) / s;\nquat.y = 0.25 * s;\nquat.z = (m[1][2] + m[2][1]) / s;\n} else {\nfloat s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\nquat.w = (m[1][0] - m[0][1]) / s;\nquat.x = (m[0][2] + m[2][0]) / s;\nquat.y = (m[1][2] + m[2][1]) / s;\nquat.z = 0.25 * s;\n}\nfloat len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\nif (len > 0.) {\nlen = 1. / sqrt(len);\nquat.x = quat.x * len;\nquat.y = quat.y * len;\nquat.z = quat.z * len;\nquat.w = quat.w * len;\n}\nreturn quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\nfloat x = angle.x / 2.;\nfloat y = angle.y / 2.;\nfloat z = angle.z / 2.;\nfloat sx = sin(x);\nfloat cx = cos(x);\nfloat sy = sin(y);\nfloat cy = cos(y);\nfloat sz = sin(z);\nfloat cz = cos(z);\nvec4 quat = vec4(0);\nquat.x = sx * cy * cz + cx * sy * sz;\nquat.y = cx * sy * cz + sx * cy * sz;\nquat.z = cx * cy * sz - sx * sy * cz;\nquat.w = cx * cy * cz - sx * sy * sz;\nreturn quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\nfloat x2 = q.x + q.x;\nfloat y2 = q.y + q.y;\nfloat z2 = q.z + q.z;\nfloat xx = q.x * x2;\nfloat xy = q.x * y2;\nfloat xz = q.x * z2;\nfloat yy = q.y * y2;\nfloat yz = q.y * z2;\nfloat zz = q.z * z2;\nfloat wx = q.w * x2;\nfloat wy = q.w * y2;\nfloat wz = q.w * z2;\nreturn mat4(\n1. - (yy + zz), xy + wz, xz - wy, 0,\nxy - wz, 1. - (xx + zz), yz + wx, 0,\nxz + wy, yz - wx, 1. - (xx + yy), 0,\np.x, p.y, p.z, 1\n);\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\nfloat x = q.x, y = q.y, z = q.z, w = q.w;\nfloat x2 = x + x;\nfloat y2 = y + y;\nfloat z2 = z + z;\nfloat xx = x * x2;\nfloat xy = x * y2;\nfloat xz = x * z2;\nfloat yy = y * y2;\nfloat yz = y * z2;\nfloat zz = z * z2;\nfloat wx = w * x2;\nfloat wy = w * y2;\nfloat wz = w * z2;\nfloat sx = s.x;\nfloat sy = s.y;\nfloat sz = s.z;\nreturn mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n(xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n(xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\nt.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\nvec4 quat;\nquat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\nquat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\nquat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\nquat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\nreturn quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\nfloat ix = q.w * v.x + q.y * v.z - q.z * v.y;\nfloat iy = q.w * v.y + q.z * v.x - q.x * v.z;\nfloat iz = q.w * v.z + q.x * v.y - q.y * v.x;\nfloat iw = -q.x * v.x - q.y * v.y - q.z * v.z;\nv.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\nv.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\nv.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\nvec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\nvec4 rotQuat = quatMultiply(viewQuat, q);\nrotateVecFromQuat(pos, rotQuat);\nreturn pos;\n}\nvoid rotateCorner (inout vec2 corner, float angle){\nfloat xOS = cos(angle) * corner.x - sin(angle) * corner.y;\nfloat yOS = sin(angle) * corner.x + cos(angle) * corner.y;\ncorner.x = xOS;\ncorner.y = yOS;\n}\nlayout(set = 1, binding = 0) uniform Constants {\nvec4 mainTiling_Offset;\nvec4 frameTile_velLenScale;\nvec4 scale;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n, vec3 eye\n, vec4 velocity\n, float velocityScale\n, float lengthScale\n, float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\nvec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\nvec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\nvec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\nvec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\npos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\nvec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\nvec3 camX = vec3(1, 0, 0);\nvec3 camY = vec3(0, 0, -1);\npos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\nvec2 viewSpaceVert = vec2(vertOffset.x * s.x, vertOffset.y * s.y);\nrotateCorner(viewSpaceVert, q.z);\nvec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\nvec3 camY = vec3(0, 1, 0);\nvec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\npos.xyz += offset;\n#else\npos.x += vertOffset.x;\npos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\nvec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\naniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\nvertIndex.y = 1. - vertIndex.y;\n#endif\nreturn (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\nlayout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\nlayout(location = 6) in vec3 a_texCoord3;\nlayout(location = 7) in vec3 a_normal;\nlayout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\nvec3 compScale = scale.xyz * a_texCoord1;\nvec4 pos = vec4(a_position, 1);\n#if CC_RENDER_MODE == 1\nvec4 velocity = vec4(a_color1.xyz, 0);\n#endif\n#if !CC_USE_WORLD_SPACE\npos = cc_matWorld * pos;\n#if CC_RENDER_MODE == 1\nvelocity = cc_matWorld * velocity;\n#endif\n#endif\n#if CC_RENDER_MODE != 4\nvec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n#if CC_RENDER_MODE == 0\nvec3 rotEuler = a_texCoord2;\n#elif CC_RENDER_MODE == 1\nvec3 rotEuler = vec3(0.);\n#else\nvec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n#endif\ncomputeVertPos(pos, cornerOffset, quaternionFromEuler(rotEuler), compScale\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n, cc_matViewInv\n#endif\n#if CC_RENDER_MODE == 1\n, cc_cameraPos.xyz\n, velocity\n, frameTile_velLenScale.z\n, frameTile_velLenScale.w\n, a_texCoord.x\n#endif\n);\ncolor = a_color;\n#else\nmat4 xformNoScale = matrixFromRT(quaternionFromEuler(a_texCoord2), pos.xyz);\nmat4 xform = matFromRTS(quaternionFromEuler(a_texCoord2), pos.xyz, compScale);\npos = xform * vec4(a_texCoord3, 1);\nvec4 normal = xformNoScale * vec4(a_normal, 0);\ncolor = a_color * a_color1;\n#endif\nuv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\npos = cc_matViewProj * pos;\nreturn pos;\n}\nvoid main() { gl_Position = lpvs_main(); }",
              "frag": "\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\nvec4 tintColor;\n};\nvec4 add () {\nvec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\nreturn CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"
            }], [{
              "vert": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 v_light;\nlayout(location = 1) out vec2 uv0;\n#if TWO_COLORED\nlayout(location = 3) in vec4 a_color2;\nlayout(location = 2) out vec4 v_dark;\n#endif\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\n#if USE_LOCAL\npos = cc_matWorld * pos;\n#endif\npos = cc_matViewProj * pos;\nuv0 = a_texCoord;\nv_light = a_color;\n#if TWO_COLORED\nv_dark = a_color2;\n#endif\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\nlayout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\nfloat alphaThreshold;\n};\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n#if USE_ALPHA_TEST\nif (color.a < alphaThreshold) discard;\n#endif\n}\nvoid ALPHA_TEST (in float alpha) {\n#if USE_ALPHA_TEST\nif (alpha < alphaThreshold) discard;\n#endif\n}\nlayout(location = 0) in vec4 v_light;\n#if TWO_COLORED\nlayout(location = 2) in vec4 v_dark;\n#endif\nlayout(location = 1) in vec2 uv0;\nlayout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;\nvec4 frag () {\nvec4 o = vec4(1, 1, 1, 1);\n#if TWO_COLORED\nvec4 texColor = vec4(1, 1, 1, 1);\ntexColor *= texture(cc_spriteTexture, uv0);\no.a = texColor.a * v_light.a;\no.rgb = ((texColor.a - 1.0) * v_dark.a + 1.0 - texColor.rgb) * v_dark.rgb + texColor.rgb * v_light.rgb;\n#else\no *= texture(cc_spriteTexture, uv0);\no *= v_light;\n#endif\nALPHA_TEST(o);\nreturn o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\n#if USE_LOCAL\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\n#if SAMPLE_FROM_RT\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 2) in vec4 a_color;\nlayout(location = 0) out vec4 color;\nlayout(location = 1) out vec2 uv0;\nvec4 vert () {\nvec4 pos = vec4(a_position, 1);\n#if USE_LOCAL\npos = cc_matWorld * pos;\n#endif\n#if USE_PIXEL_ALIGNMENT\npos = cc_matView * pos;\npos.xyz = floor(pos.xyz);\npos = cc_matProj * pos;\n#else\npos = cc_matViewProj * pos;\n#endif\nuv0 = a_texCoord;\n#if SAMPLE_FROM_RT\nuv0 = cc_cameraPos.w > 1.0 ? vec2(uv0.x, 1.0 - uv0.y) : uv0;\n#endif\ncolor = a_color;\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nvec4 CCSampleWithAlphaSeparated(sampler2D tex, vec2 uv) {\n#if CC_USE_EMBEDDED_ALPHA\nreturn vec4(texture(tex, uv).rgb, texture(tex, uv + vec2(0.0, 0.5)).r);\n#else\nreturn texture(tex, uv);\n#endif\n}\n#if USE_ALPHA_TEST\nlayout(set = 1, binding = 0) uniform ALPHA_TEST_DATA {\nfloat alphaThreshold;\n};\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n#if USE_ALPHA_TEST\nif (color.a < alphaThreshold) discard;\n#endif\n}\nvoid ALPHA_TEST (in float alpha) {\n#if USE_ALPHA_TEST\nif (alpha < alphaThreshold) discard;\n#endif\n}\nlayout(location = 0) in vec4 color;\n#if USE_TEXTURE\nlayout(location = 1) in vec2 uv0;\nlayout(set = 2, binding = 10) uniform sampler2D cc_spriteTexture;\n#endif\nvec4 frag () {\nvec4 o = vec4(1, 1, 1, 1);\n#if USE_TEXTURE\no *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);\n#if IS_GRAY\nfloat gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;\no.r = o.g = o.b = gray;\n#endif\n#endif\no *= color;\nALPHA_TEST(o);\nreturn o;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\nint getVertexId() {\nreturn gl_VertexIndex;\n}\nlayout(set = 2, binding = 4) uniform CCMorph {\nvec4 cc_displacementWeights[15];\nvec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\nivec2 texSize = textureSize(tex, 0);\nreturn texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture(tex, x)),\ndecode32(texture(tex, y)),\ndecode32(texture(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nlayout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nlayout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nlayout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nlayout(location = 4) in u32vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nlayout(location = 7) in highp vec4 a_jointAnimInfo;\n#endif\nlayout(set = 2, binding = 3) uniform CCSkinningTexture {\nhighp vec4 cc_jointTextureInfo;\n};\nlayout(set = 2, binding = 2) uniform CCSkinningAnimation {\nhighp vec4 cc_jointAnimInfo;\n};\nlayout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n#else\nlayout(set = 2, binding = 3) uniform CCSkinning {\nhighp vec4 cc_joints[30 * 3];\n};\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\nlayout(location = 8) in vec4 a_matWorld0;\nlayout(location = 9) in vec4 a_matWorld1;\nlayout(location = 10) in vec4 a_matWorld2;\n#if USE_LIGHTMAP\nlayout(location = 11) in vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nlayout(location = 12) in float a_dyn_batch_id;\nlayout(set = 2, binding = 0) uniform CCLocalBatched {\nhighp mat4 cc_matWorlds[10];\n};\n#else\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\nvec4 tilingOffset;\nvec4 albedo;\nvec4 albedoScaleAndCutoff;\nvec4 pbrParams;\nvec4 emissive;\nvec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nlayout(location = 0) out float v_fog_factor;\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\nlayout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\nlayout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\n#if USE_VERTEX_COLOR\nlayout(location = 13) in vec4 a_color;\nlayout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\nlayout(location = 7) out vec3 v_tangent;\nlayout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || USE_LIGHTMAP\nlayout(location = 14) in vec2 a_texCoord1;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nlayout(location = 9) out vec3 v_luv;\nvoid CCLightingMapCaclUV()\n{\n#if !USE_INSTANCING\nv_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.zw;\nv_luv.z = cc_lightingMapUVParam.z;\n#else\nv_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.zw;\nv_luv.z = a_lightingMapUVParam.z;\n#endif\n}\n#endif\nvoid main () {\nStandardVertInput In;\nIn.position = vec4(a_position, 1.0);\nIn.normal = a_normal;\nIn.tangent = a_tangent;\n#if CC_USE_MORPH\napplyMorph(In);\n#endif\n#if CC_USE_SKINNING\nCCSkin(In);\n#endif\nmat4 matWorld, matWorldIT;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\nmatWorldIT = matWorld;\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\nmatWorldIT = matWorld;\n#else\nmatWorld = cc_matWorld;\nmatWorldIT = cc_matWorldIT;\n#endif\nvec4 pos = matWorld * In.position;\nv_position = pos.xyz;\nv_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n#if USE_NORMAL_MAP\nv_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\nv_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n#endif\nv_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n#if SAMPLE_FROM_RT\nv_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n#endif\n#if HAS_SECOND_UV\nv_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#if SAMPLE_FROM_RT\nv_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n#endif\n#endif\n#if USE_VERTEX_COLOR\nv_color = a_color;\n#endif\n#if CC_USE_FOG == 0\nv_fog_factor = LinearFog(pos);\n#elif CC_USE_FOG == 1\nv_fog_factor = ExpFog(pos);\n#elif CC_USE_FOG == 2\nv_fog_factor = ExpSquaredFog(pos);\n#elif CC_USE_FOG == 3\nv_fog_factor = LayeredFog(pos);\n#else\nv_fog_factor = 1.0;\n#endif\nv_shadowPos = cc_matLightViewProj * pos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nCCLightingMapCaclUV();\n#endif\ngl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}",
              "frag": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(set = 1, binding = 0) uniform Constants {\nvec4 tilingOffset;\nvec4 albedo;\nvec4 albedoScaleAndCutoff;\nvec4 pbrParams;\nvec4 emissive;\nvec4 emissiveScaleParam;\n};\nlayout(location = 0) in float v_fog_factor;\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\nlayout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\nlayout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\nfloat CCGetLinearDepth (vec3 worldPos) {\nvec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\nfloat dist = length(viewStartPos.xyz);\nreturn cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n}\nfloat CCGetShadowFactorX1 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_shadowMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetShadowFactorX5 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetShadowFactorX9 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetShadowFactorX25 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\nfloat CCGetDirLightShadowFactorX1 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nfloat depth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetDirLightShadowFactorX5 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetDirLightShadowFactorX9 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetDirLightShadowFactorX25 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat depth = 0.0;\nfloat shadow = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\n#endif\n#if CC_USE_IBL\nlayout(set = 0, binding = 4) uniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\nvec3 NxH = cross(N, H);\nfloat OneMinusNoHSqr = dot(NxH, NxH);\nfloat a = roughness * roughness;\nfloat n = NoH * a;\nfloat p = a / (OneMinusNoHSqr + n * n);\nreturn p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\nreturn (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\nconst vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\nconst vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\nvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\nAB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\nreturn specular * AB.x + AB.y;\n}\nstruct StandardSurface {\nvec4 albedo;\nvec3 position;\nvec3 normal;\nvec3 emissive;\nvec3 lightmap;\nfloat lightmap_test;\nfloat roughness;\nfloat metallic;\nfloat occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 L = normalize(-cc_mainLitDir.xyz);\nvec3 H = normalize(L + V);\nfloat NH = max(dot(N, H), 0.0);\nfloat NL = max(dot(N, L), 0.001);\nvec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\nvec3 diffuseContrib = diffuse;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nif (s.lightmap_test > 0.0001) {\nfinalColor = s.lightmap.rgb;\n}\n#else\ndiffuseContrib /= 3.14159265359;\n#endif\nvec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\nfinalColor *= (diffuseContrib + specularContrib);\nfloat fAmb = 0.5 - N.y * 0.5;\nvec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\nfinalColor += (ambDiff.rgb * diffuse);\n#if CC_USE_IBL\nvec3 R = normalize(reflect(-V, N));\nvec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n#if CC_USE_IBL == 2\nvec3 env = unpackRGBE(envmap);\n#else\nvec3 env = SRGBToLinear(envmap.rgb);\n#endif\nfinalColor += env * cc_ambientSky.w * specular;\n#endif\nfinalColor = finalColor * s.occlusion;\n#if CC_USE_HDR\ns.emissive *= cc_exposure.w;\n#endif\nfinalColor += s.emissive;\n#if CC_RECEIVE_SHADOW\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25(pos);\nelse if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9(pos);\nelse if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5(pos);\nelse shadowAttenuation = CCGetShadowFactorX1(pos);\nvec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\nif (cc_shadowNFLSInfo.w > 0.000001) {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n} else {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n}\n}\n#endif\nreturn vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nlayout(location = 9) in vec3 v_luv;\nlayout(set = 2, binding = 9) uniform sampler2D cc_lightingMap;\nvec3 UnpackLightingmap(vec4 color) {\nvec3 c;\nfloat e = 1.0 + color.a * (8.0 - 1.0);\nc.r = color.r * e;\nc.g = color.g * e;\nc.b = color.b * e;\nreturn c;\n}\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\nlayout(location = 6) in vec2 v_uv1;\nlayout(location = 4) in vec3 v_normal;\n#if USE_VERTEX_COLOR\nlayout(location = 2) in vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\nlayout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\nlayout(location = 7) in vec3 v_tangent;\nlayout(location = 8) in vec3 v_bitangent;\nlayout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\nlayout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\nlayout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\nlayout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\nlayout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\nvec4 baseColor = albedo;\n#if USE_VERTEX_COLOR\nbaseColor *= v_color;\n#endif\n#if USE_ALBEDO_MAP\nvec4 texColor = texture(albedoMap, ALBEDO_UV);\ntexColor.rgb = SRGBToLinear(texColor.rgb);\nbaseColor *= texColor;\n#endif\ns.albedo = baseColor;\ns.albedo.rgb *= albedoScaleAndCutoff.xyz;\n#if USE_ALPHA_TEST\nif (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n#endif\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nvec4 lightColor = texture(cc_lightingMap, v_luv.xy);\ns.lightmap = UnpackLightingmap(lightColor);\ns.lightmap_test = v_luv.z;\n#endif\ns.normal = v_normal;\n#if USE_NORMAL_MAP\nvec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\ns.normal =\n(nmmp.x * pbrParams.w) * normalize(v_tangent) +\n(nmmp.y * pbrParams.w) * normalize(v_bitangent) +\nnmmp.z * normalize(s.normal);\n#endif\ns.position = v_position;\nvec4 pbr = pbrParams;\n#if USE_PBR_MAP\nvec4 res = texture(pbrMap, PBR_UV);\npbr.x *= res.r;\npbr.y *= res.g;\npbr.z *= res.b;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\nvec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\npbr.z *= metallicRoughness.b;\npbr.y *= metallicRoughness.g;\n#endif\n#if USE_OCCLUSION_MAP\npbr.x *= texture(occlusionMap, PBR_UV).r;\n#endif\ns.occlusion = clamp(pbr.x, 0.0, 0.96);\ns.roughness = clamp(pbr.y, 0.04, 1.0);\ns.metallic = pbr.z;\ns.emissive = emissive.rgb * emissiveScaleParam.xyz;\n#if USE_EMISSIVE_MAP\ns.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n#endif\n}\n#if CC_FORWARD_ADD\n#if CC_PIPELINE_TYPE == 0\n# define LIGHTS_PER_PASS 1\n#else\n# define LIGHTS_PER_PASS 10\n#endif\nlayout(set = 2, binding = 1) uniform CCForwardLight {\nhighp vec4 cc_lightPos[LIGHTS_PER_PASS];\nvec4 cc_lightColor[LIGHTS_PER_PASS];\nvec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\nvec4 cc_lightDir[LIGHTS_PER_PASS];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\nfloat factor = distSqr * invSqrAttRadius;\nfloat smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\nreturn smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\nfloat attenuation = 1.0 / max(distSqr, 0.01*0.01);\nattenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\nreturn attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\nfloat cd = dot(litDir, L);\nfloat attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\nreturn (attenuation * attenuation);\n}\nvec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 diffuseContrib = diffuse / 3.14159265359;\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 finalColor = vec3(0.0);\nint numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\nfor (int i = 0; i < LIGHTS_PER_PASS; i++) {\nif (i >= numLights) break;\nvec3 SLU = cc_lightPos[i].xyz - s.position;\nvec3 SL = normalize(SLU);\nvec3 SH = normalize(SL + V);\nfloat SNL = max(dot(N, SL), 0.001);\nfloat SNH = max(dot(N, SH), 0.0);\nfloat distSqr = dot(SLU, SLU);\nfloat litRadius = cc_lightSizeRangeAngle[i].x;\nfloat litRadiusSqr = litRadius * litRadius;\nfloat illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\nfloat attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\nattRadiusSqrInv *= attRadiusSqrInv;\nfloat att = GetDistAtt(distSqr, attRadiusSqrInv);\nvec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\nif (cc_lightPos[i].w > 0.0) {\nfloat cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\nfloat cosOuter = cc_lightSizeRangeAngle[i].z;\nfloat litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\nfloat litAngleOffset = -cosOuter * litAngleScale;\natt *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n}\nvec3 lightColor = cc_lightColor[i].rgb;\n#if CC_RECEIVE_SHADOW\nif (cc_lightPos[i].w > 0.0) {\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25(pos, s.position);\nelse if (pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9(pos, s.position);\nelse if (pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5(pos, s.position);\nelse shadowAttenuation = CCGetDirLightShadowFactorX1(pos, s.position);\nlightColor *= 1.0 - shadowAttenuation;\n}\n}\n#endif\nfinalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n}\nfinalColor = finalColor * s.occlusion;\nreturn vec4(finalColor, 0.0);\n}\nlayout(location = 0) out vec4 fragColorX;\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingAdditive(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\nfragColorX = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 0\nlayout(location = 0) out vec4 fragColorX;\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingBase(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\nfragColorX = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 1\nlayout(location = 0) out vec4 fragColor0;\nlayout(location = 1) out vec4 fragColor1;\nlayout(location = 2) out vec4 fragColor2;\nlayout(location = 3) out vec4 fragColor3;\nvoid main () {\nStandardSurface s; surf(s);\nfragColor0 = s.albedo;\nfragColor1 = vec4(s.position, s.roughness);\nfragColor2 = vec4(s.normal, s.metallic);\nfragColor3 = vec4(s.emissive, s.occlusion);\n}\n#endif"
            }, {
              "vert": "#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\nint getVertexId() {\nreturn gl_VertexIndex;\n}\nlayout(set = 2, binding = 4) uniform CCMorph {\nvec4 cc_displacementWeights[15];\nvec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\nivec2 texSize = textureSize(tex, 0);\nreturn texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture(tex, x)),\ndecode32(texture(tex, y)),\ndecode32(texture(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nlayout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nlayout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nlayout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nlayout(location = 4) in u32vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nlayout(location = 7) in highp vec4 a_jointAnimInfo;\n#endif\nlayout(set = 2, binding = 3) uniform CCSkinningTexture {\nhighp vec4 cc_jointTextureInfo;\n};\nlayout(set = 2, binding = 2) uniform CCSkinningAnimation {\nhighp vec4 cc_jointAnimInfo;\n};\nlayout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n#else\nlayout(set = 2, binding = 3) uniform CCSkinning {\nhighp vec4 cc_joints[30 * 3];\n};\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\n#if USE_INSTANCING\nlayout(location = 8) in vec4 a_matWorld0;\nlayout(location = 9) in vec4 a_matWorld1;\nlayout(location = 10) in vec4 a_matWorld2;\n#if USE_LIGHTMAP\nlayout(location = 11) in vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nlayout(location = 12) in float a_dyn_batch_id;\nlayout(set = 2, binding = 0) uniform CCLocalBatched {\nhighp mat4 cc_matWorlds[10];\n};\n#else\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(set = 1, binding = 0) uniform Constants {\nvec4 tilingOffset;\nvec4 albedo;\nvec4 albedoScaleAndCutoff;\nvec4 pbrParams;\nvec4 emissive;\nvec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if HAS_SECOND_UV || USE_LIGHTMAP\nlayout(location = 13) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\nStandardVertInput In;\nIn.position = vec4(a_position, 1.0);\nIn.normal = a_normal;\nIn.tangent = a_tangent;\n#if CC_USE_MORPH\napplyMorph(In);\n#endif\n#if CC_USE_SKINNING\nCCSkin(In);\n#endif\nmat4 matWorld, matWorldIT;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\nmatWorldIT = matWorld;\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\nmatWorldIT = matWorld;\n#else\nmatWorld = cc_matWorld;\nmatWorldIT = cc_matWorldIT;\n#endif\nv_worldPos = matWorld * In.position;\nvec4 clipPos = cc_matLightViewProj * v_worldPos;\nv_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n#if HAS_SECOND_UV\nv_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n#endif\nv_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\nreturn clipPos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\nvec4 tilingOffset;\nvec4 albedo;\nvec4 albedoScaleAndCutoff;\nvec4 pbrParams;\nvec4 emissive;\nvec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\nvec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\nret = fract(ret);\nret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\nreturn ret;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\nlayout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\nvec4 baseColor = albedo;\n#if USE_ALBEDO_MAP\nbaseColor *= texture(albedoMap, ALBEDO_UV);\n#endif\n#if USE_ALPHA_TEST\nif (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n#endif\nif(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\nif (cc_shadowNFLSInfo.z > 0.000001) {\nvec4 viewStartPos = cc_matLightView * v_worldPos;\nfloat dist = length(viewStartPos.xyz);\nfloat linearDepth = cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\nreturn vec4(linearDepth, 1.0, 1.0, 1.0);\n}\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nreturn packDepthToRGBA(v_clip_depth);\n}\nreturn vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nlayout(location = 0) out float v_fog_factor;\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\nlayout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\nlayout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 2) out highp vec3 v_position;\nlayout(location = 3) out mediump vec3 v_normal;\n#if USE_NORMALMAP\nlayout(location = 4) out mediump vec3 v_tangent;\nlayout(location = 5) out mediump vec3 v_binormal;\n#endif\nlayout(location = 6) out mediump vec2 uvw;\nlayout(location = 7) out mediump vec2 uv0;\nlayout(location = 8) out mediump vec2 uv1;\nlayout(location = 9) out mediump vec2 uv2;\nlayout(location = 10) out mediump vec2 uv3;\nlayout(location = 11) out mediump vec3 luv;\nlayout(location = 12) out mediump vec3 diffuse;\nlayout(set = 1, binding = 0) uniform TexCoords {\nvec4 UVScale;\nvec4 lightMapUVParam;\n};\nvoid main () {\nvec3 worldPos;\nworldPos.x = cc_matWorld[3][0] + a_position.x;\nworldPos.y = cc_matWorld[3][1] + a_position.y;\nworldPos.z = cc_matWorld[3][2] + a_position.z;\nvec4 pos = vec4(worldPos, 1.0);\npos = cc_matViewProj * pos;\nuvw = a_texCoord;\nuv0 = a_position.xz * UVScale.x;\nuv1 = a_position.xz * UVScale.y;\nuv2 = a_position.xz * UVScale.z;\nuv3 = a_position.xz * UVScale.w;\n#if USE_LIGHTMAP\nluv.xy = lightMapUVParam.xy + a_texCoord * lightMapUVParam.zw;\nluv.z = lightMapUVParam.z;\n#endif\nv_position = worldPos;\nv_normal = a_normal;\n#if CC_USE_FOG == 0\nv_fog_factor = LinearFog(vec4(worldPos, 1.0));\n#elif CC_USE_FOG == 1\nv_fog_factor = ExpFog(vec4(worldPos, 1.0));\n#elif CC_USE_FOG == 2\nv_fog_factor = ExpSquaredFog(vec4(worldPos, 1.0));\n#elif CC_USE_FOG == 3\nv_fog_factor = LayeredFog(vec4(worldPos, 1.0));\n#else\nv_fog_factor = 1.0;\n#endif\n#if USE_NORMALMAP\nv_tangent = vec3(1.0, 0.0, 0.0);\nv_binormal = vec3(0.0, 0.0, 1.0);\nv_binormal = cross(v_tangent, a_normal);\nv_tangent = cross(a_normal, v_binormal);\n#endif\nv_shadowPos = cc_matLightViewProj * vec4(worldPos, 1.0);\ngl_Position = pos;\n}",
              "frag": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\nlayout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\nlayout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\nfloat CCGetLinearDepth (vec3 worldPos) {\nvec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\nfloat dist = length(viewStartPos.xyz);\nreturn cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n}\nfloat CCGetShadowFactorX1 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_shadowMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetShadowFactorX5 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetShadowFactorX9 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetShadowFactorX25 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\nfloat CCGetDirLightShadowFactorX1 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nfloat depth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetDirLightShadowFactorX5 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetDirLightShadowFactorX9 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetDirLightShadowFactorX25 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat depth = 0.0;\nfloat shadow = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\n#endif\n#if CC_USE_IBL\nlayout(set = 0, binding = 4) uniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\nvec3 NxH = cross(N, H);\nfloat OneMinusNoHSqr = dot(NxH, NxH);\nfloat a = roughness * roughness;\nfloat n = NoH * a;\nfloat p = a / (OneMinusNoHSqr + n * n);\nreturn p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\nreturn (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\nconst vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\nconst vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\nvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\nAB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\nreturn specular * AB.x + AB.y;\n}\nstruct StandardSurface {\nvec4 albedo;\nvec3 position;\nvec3 normal;\nvec3 emissive;\nvec3 lightmap;\nfloat lightmap_test;\nfloat roughness;\nfloat metallic;\nfloat occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 L = normalize(-cc_mainLitDir.xyz);\nvec3 H = normalize(L + V);\nfloat NH = max(dot(N, H), 0.0);\nfloat NL = max(dot(N, L), 0.001);\nvec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\nvec3 diffuseContrib = diffuse;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nif (s.lightmap_test > 0.0001) {\nfinalColor = s.lightmap.rgb;\n}\n#else\ndiffuseContrib /= 3.14159265359;\n#endif\nvec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\nfinalColor *= (diffuseContrib + specularContrib);\nfloat fAmb = 0.5 - N.y * 0.5;\nvec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\nfinalColor += (ambDiff.rgb * diffuse);\n#if CC_USE_IBL\nvec3 R = normalize(reflect(-V, N));\nvec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n#if CC_USE_IBL == 2\nvec3 env = unpackRGBE(envmap);\n#else\nvec3 env = SRGBToLinear(envmap.rgb);\n#endif\nfinalColor += env * cc_ambientSky.w * specular;\n#endif\nfinalColor = finalColor * s.occlusion;\n#if CC_USE_HDR\ns.emissive *= cc_exposure.w;\n#endif\nfinalColor += s.emissive;\n#if CC_RECEIVE_SHADOW\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25(pos);\nelse if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9(pos);\nelse if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5(pos);\nelse shadowAttenuation = CCGetShadowFactorX1(pos);\nvec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\nif (cc_shadowNFLSInfo.w > 0.000001) {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n} else {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n}\n}\n#endif\nreturn vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nlayout(location = 0) in float v_fog_factor;\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nlayout(location = 13) in vec3 v_luv;\nlayout(set = 2, binding = 9) uniform sampler2D cc_lightingMap;\nvec3 UnpackLightingmap(vec4 color) {\nvec3 c;\nfloat e = 1.0 + color.a * (8.0 - 1.0);\nc.r = color.r * e;\nc.g = color.g * e;\nc.b = color.b * e;\nreturn c;\n}\n#endif\nlayout(location = 2) in highp vec3 v_position;\nlayout(location = 3) in mediump vec3 v_normal;\n#if USE_NORMALMAP\nlayout(location = 4) in mediump vec3 v_tangent;\nlayout(location = 5) in mediump vec3 v_binormal;\n#endif\nlayout(location = 6) in mediump vec2 uvw;\nlayout(location = 7) in mediump vec2 uv0;\nlayout(location = 8) in mediump vec2 uv1;\nlayout(location = 9) in mediump vec2 uv2;\nlayout(location = 10) in mediump vec2 uv3;\nlayout(location = 12) in mediump vec3 diffuse;\nlayout(location = 11) in mediump vec3 luv;\nlayout(set = 1, binding = 1) uniform PbrParams {\nvec4 metallic;\nvec4 roughness;\n};\nlayout(set = 1, binding = 2) uniform sampler2D weightMap;\nlayout(set = 1, binding = 3) uniform sampler2D detailMap0;\nlayout(set = 1, binding = 4) uniform sampler2D detailMap1;\nlayout(set = 1, binding = 5) uniform sampler2D detailMap2;\nlayout(set = 1, binding = 6) uniform sampler2D detailMap3;\nlayout(set = 1, binding = 7) uniform sampler2D normalMap0;\nlayout(set = 1, binding = 8) uniform sampler2D normalMap1;\nlayout(set = 1, binding = 9) uniform sampler2D normalMap2;\nlayout(set = 1, binding = 10) uniform sampler2D normalMap3;\nlayout(set = 1, binding = 11) uniform sampler2D lightMap;\nvoid surf (out StandardSurface s) {\n#if LAYERS > 1\nvec4 w = texture(weightMap, uvw);\n#endif\nvec4 baseColor = vec4(0, 0, 0, 0);\n#if LAYERS == 1\nbaseColor = texture(detailMap0, uv0);\n#elif LAYERS == 2\nbaseColor += texture(detailMap0, uv0) * w.r;\nbaseColor += texture(detailMap1, uv1) * w.g;\n#elif LAYERS == 3\nbaseColor += texture(detailMap0, uv0) * w.r;\nbaseColor += texture(detailMap1, uv1) * w.g;\nbaseColor += texture(detailMap2, uv2) * w.b;\n#elif LAYERS == 4\nbaseColor += texture(detailMap0, uv0) * w.r;\nbaseColor += texture(detailMap1, uv1) * w.g;\nbaseColor += texture(detailMap2, uv2) * w.b;\nbaseColor += texture(detailMap3, uv3) * w.a;\n#else\nbaseColor = texture(detailMap0, uv0);\n#endif\ns.position = v_position;\n#if USE_NORMALMAP\nvec4 baseNormal = vec4(0, 0, 0, 0);\n#if LAYERS == 1\nbaseNormal = texture(normalMap0, uv0);\n#elif LAYERS == 2\nbaseNormal += texture(normalMap0, uv0) * w.r;\nbaseNormal += texture(normalMap1, uv1) * w.g;\n#elif LAYERS == 3\nbaseNormal += texture(normalMap0, uv0) * w.r;\nbaseNormal += texture(normalMap1, uv1) * w.g;\nbaseNormal += texture(normalMap2, uv2) * w.b;\n#elif LAYERS == 4\nbaseNormal += texture(normalMap0, uv0) * w.r;\nbaseNormal += texture(normalMap1, uv1) * w.g;\nbaseNormal += texture(normalMap2, uv2) * w.b;\nbaseNormal += texture(normalMap3, uv3) * w.a;\n#else\nbaseNormal = texture(normalMap0, uv0);\n#endif\nvec3 nmmp = baseNormal.xyz - vec3(0.5);\ns.normal =\nnmmp.x * normalize(v_tangent) +\nnmmp.y * normalize(v_binormal) +\nnmmp.z * normalize(v_normal);\n#else\ns.normal = v_normal;\n#endif\ns.albedo = vec4(SRGBToLinear(baseColor.rgb), 1.0);\ns.occlusion = 1.0;\n#if USE_PBR\ns.roughness = 0.0;\n#if LAYERS == 1\ns.roughness = roughness.x;\n#elif LAYERS == 2\ns.roughness += roughness.x * w.r;\ns.roughness += roughness.y * w.g;\n#elif LAYERS == 3\ns.roughness += roughness.x * w.r;\ns.roughness += roughness.y * w.g;\ns.roughness += roughness.z * w.b;\n#elif LAYERS == 4\ns.roughness += roughness.x * w.r;\ns.roughness += roughness.y * w.g;\ns.roughness += roughness.z * w.b;\ns.roughness += roughness.w * w.a;\n#else\ns.roughness = 1.0;\n#endif\ns.metallic = 0.0;\n#if LAYERS == 1\ns.metallic = metallic.x;\n#elif LAYERS == 2\ns.metallic += metallic.x * w.r;\ns.metallic += metallic.y * w.g;\n#elif LAYERS == 3\ns.metallic += metallic.x * w.r;\ns.metallic += metallic.y * w.g;\ns.metallic += metallic.z * w.b;\n#elif LAYERS == 4\ns.metallic += metallic.x * w.r;\ns.metallic += metallic.y * w.g;\ns.metallic += metallic.z * w.b;\ns.metallic += metallic.w * w.a;\n#else\ns.metallic = 0.0;\n#endif\n#else\ns.roughness = 1.0;\ns.metallic = 0.0;\n#endif\ns.emissive = vec3(0.0, 0.0, 0.0);\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nvec4 lightColor = texture(lightMap, luv.xy);\ns.lightmap = UnpackLightingmap(lightColor);\ns.lightmap_test = luv.z;\n#endif\n}\n#if CC_FORWARD_ADD\n#if CC_PIPELINE_TYPE == 0\n# define LIGHTS_PER_PASS 1\n#else\n# define LIGHTS_PER_PASS 10\n#endif\nlayout(set = 2, binding = 1) uniform CCForwardLight {\nhighp vec4 cc_lightPos[LIGHTS_PER_PASS];\nvec4 cc_lightColor[LIGHTS_PER_PASS];\nvec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\nvec4 cc_lightDir[LIGHTS_PER_PASS];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\nfloat factor = distSqr * invSqrAttRadius;\nfloat smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\nreturn smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\nfloat attenuation = 1.0 / max(distSqr, 0.01*0.01);\nattenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\nreturn attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\nfloat cd = dot(litDir, L);\nfloat attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\nreturn (attenuation * attenuation);\n}\nvec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 diffuseContrib = diffuse / 3.14159265359;\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 finalColor = vec3(0.0);\nint numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\nfor (int i = 0; i < LIGHTS_PER_PASS; i++) {\nif (i >= numLights) break;\nvec3 SLU = cc_lightPos[i].xyz - s.position;\nvec3 SL = normalize(SLU);\nvec3 SH = normalize(SL + V);\nfloat SNL = max(dot(N, SL), 0.001);\nfloat SNH = max(dot(N, SH), 0.0);\nfloat distSqr = dot(SLU, SLU);\nfloat litRadius = cc_lightSizeRangeAngle[i].x;\nfloat litRadiusSqr = litRadius * litRadius;\nfloat illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\nfloat attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\nattRadiusSqrInv *= attRadiusSqrInv;\nfloat att = GetDistAtt(distSqr, attRadiusSqrInv);\nvec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\nif (cc_lightPos[i].w > 0.0) {\nfloat cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\nfloat cosOuter = cc_lightSizeRangeAngle[i].z;\nfloat litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\nfloat litAngleOffset = -cosOuter * litAngleScale;\natt *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n}\nvec3 lightColor = cc_lightColor[i].rgb;\n#if CC_RECEIVE_SHADOW\nif (cc_lightPos[i].w > 0.0) {\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25(pos, s.position);\nelse if (pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9(pos, s.position);\nelse if (pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5(pos, s.position);\nelse shadowAttenuation = CCGetDirLightShadowFactorX1(pos, s.position);\nlightColor *= 1.0 - shadowAttenuation;\n}\n}\n#endif\nfinalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n}\nfinalColor = finalColor * s.occlusion;\nreturn vec4(finalColor, 0.0);\n}\nlayout(location = 0) out vec4 fragColorX;\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingAdditive(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\nfragColorX = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 0\nlayout(location = 0) out vec4 fragColorX;\nvoid main () {\nStandardSurface s; surf(s);\nvec4 color = CCStandardShadingBase(s, v_shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, v_fog_factor), color.a);\nfragColorX = CCFragOutput(color);\n}\n#elif CC_PIPELINE_TYPE == 1\nlayout(location = 0) out vec4 fragColor0;\nlayout(location = 1) out vec4 fragColor1;\nlayout(location = 2) out vec4 fragColor2;\nlayout(location = 3) out vec4 fragColor3;\nvoid main () {\nStandardSurface s; surf(s);\nfragColor0 = s.albedo;\nfragColor1 = vec4(s.position, s.roughness);\nfragColor2 = vec4(s.normal, s.metallic);\nfragColor3 = vec4(s.emissive, s.occlusion);\n}\n#endif"
            }, {
              "vert": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 0) out vec2 v_clip_depth;\nvec4 vert () {\nvec4 worldPos;\nworldPos.x = cc_matWorld[3][0] + a_position.x;\nworldPos.y = cc_matWorld[3][1] + a_position.y;\nworldPos.z = cc_matWorld[3][2] + a_position.z;\nworldPos.w = 1.0;\nvec4 clipPos = cc_matLightViewProj * worldPos;\nv_clip_depth = clipPos.zw;\nreturn clipPos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nvec4 packDepthToRGBA (float depth) {\nvec4 ret = vec4(1.0, 255.0, 65025.0, 160581375.0) * depth;\nret = fract(ret);\nret -= ret.yzww * vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 0.0);\nreturn ret;\n}\nlayout(location = 0) in vec2 v_clip_depth;\nvec4 frag () {\nreturn packDepthToRGBA(v_clip_depth.x / v_clip_depth.y * 0.5 + 0.5);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\nint getVertexId() {\nreturn gl_VertexIndex;\n}\nlayout(set = 2, binding = 4) uniform CCMorph {\nvec4 cc_displacementWeights[15];\nvec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\nivec2 texSize = textureSize(tex, 0);\nreturn texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture(tex, x)),\ndecode32(texture(tex, y)),\ndecode32(texture(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nlayout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nlayout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nlayout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nlayout(location = 4) in u32vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nlayout(location = 7) in highp vec4 a_jointAnimInfo;\n#endif\nlayout(set = 2, binding = 3) uniform CCSkinningTexture {\nhighp vec4 cc_jointTextureInfo;\n};\nlayout(set = 2, binding = 2) uniform CCSkinningAnimation {\nhighp vec4 cc_jointAnimInfo;\n};\nlayout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n#else\nlayout(set = 2, binding = 3) uniform CCSkinning {\nhighp vec4 cc_joints[30 * 3];\n};\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\nlayout(location = 8) in vec4 a_matWorld0;\nlayout(location = 9) in vec4 a_matWorld1;\nlayout(location = 10) in vec4 a_matWorld2;\n#if USE_LIGHTMAP\nlayout(location = 11) in vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nlayout(location = 12) in float a_dyn_batch_id;\nlayout(set = 2, binding = 0) uniform CCLocalBatched {\nhighp mat4 cc_matWorlds[10];\n};\n#else\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nlayout(location = 0) out float v_fog_factor;\n#if USE_VERTEX_COLOR\nlayout(location = 13) in lowp vec4 a_color;\nlayout(location = 1) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\nlayout(location = 2) out vec2 v_uv;\nlayout(set = 1, binding = 0) uniform TexCoords {\nvec4 tilingOffset;\n};\n#endif\nvec4 vert () {\nvec4 position;\nposition = vec4(a_position, 1.0);\n#if CC_USE_MORPH\napplyMorph(position);\n#endif\n#if CC_USE_SKINNING\nCCSkin(position);\n#endif\nmat4 matWorld;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\n#else\nmatWorld = cc_matWorld;\n#endif\n#if USE_TEXTURE\nv_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n#if SAMPLE_FROM_RT\nv_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n#endif\n#endif\n#if USE_VERTEX_COLOR\nv_color = a_color;\n#endif\n#if CC_USE_FOG == 0\nv_fog_factor = LinearFog(matWorld * position);\n#elif CC_USE_FOG == 1\nv_fog_factor = ExpFog(matWorld * position);\n#elif CC_USE_FOG == 2\nv_fog_factor = ExpSquaredFog(matWorld * position);\n#elif CC_USE_FOG == 3\nv_fog_factor = LayeredFog(matWorld * position);\n#else\nv_fog_factor = 1.0;\n#endif\nreturn cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nlayout(location = 0) in float v_fog_factor;\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\nlayout(location = 2) in vec2 v_uv;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\n#endif\nlayout(set = 1, binding = 1) uniform Constant {\nvec4 mainColor;\nvec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\nlayout(location = 1) in lowp vec4 v_color;\n#endif\nvec4 frag () {\nvec4 o = mainColor;\no.rgb *= colorScaleAndCutoff.xyz;\n#if USE_VERTEX_COLOR\no *= v_color;\n#endif\n#if USE_TEXTURE\no *= texture(mainTexture, v_uv);\n#endif\n#if USE_ALPHA_TEST\nif (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n#endif\no = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, o.rgb, v_fog_factor), o.a);\nreturn CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision highp float;\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(location = 0) out vec2 v_uv;\nvoid main () {\nvec4 position;\nposition = vec4(a_position, 1.0);\nposition.xy = cc_cameraPos.w == 0.0 ? vec2(position.xy.x, -position.xy.y) : position.xy;\ngl_Position = vec4(position.x, position.y, 1.0, 1.0);\nv_uv = a_texCoord;\n}",
              "frag": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\n#if CC_RECEIVE_SHADOW\nlayout(set = 0, binding = 3) uniform sampler2D cc_shadowMap;\nlayout(set = 0, binding = 5) uniform sampler2D cc_spotLightingMap;\nfloat CCGetLinearDepth (vec3 worldPos) {\nvec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\nfloat dist = length(viewStartPos.xyz);\nreturn cc_shadowNFLSInfo.x + (-dist / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x));\n}\nfloat CCGetShadowFactorX1 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_shadowMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, clipPos.z- cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetShadowFactorX5 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_shadowMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetShadowFactorX9 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetShadowFactorX25 (vec4 shadowPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_shadowMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\nfloat CCGetDirLightShadowFactorX1 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat shadow = 0.0;\nfloat closestDepth = 0.0;\nfloat depth = 0.0;\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nif (cc_shadowLPNNInfo.y > 0.000001) {\nclosestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\n} else {\nclosestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n}\nshadow = step(closestDepth, depth - cc_shadowWHPBInfo.w);\nreturn shadow;\n}\nfloat CCGetDirLightShadowFactorX5 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = dot(texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n} else {\nfloat closestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x - offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y - offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\nclosestDepth = texture(cc_spotLightingMap, vec2(clipPos.x + offsetx, clipPos.y + offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\nreturn shadow / 5.0;\n}\nfloat CCGetDirLightShadowFactorX9 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat shadow = 0.0;\nfloat depth = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -1; i <= 1; i++) {\nfor (int j = -1; j <= 1; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, depth - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 9.0;\n}\nfloat CCGetDirLightShadowFactorX25 (vec4 shadowPos, vec3 worldPos) {\nvec3 clipPos = shadowPos.xyz / shadowPos.w * 0.5 + 0.5;\nif (clipPos.x < 0.0 || clipPos.x > 1.0 ||\nclipPos.y < 0.0 || clipPos.y > 1.0 ||\nclipPos.z <-1.0 || clipPos.z > 1.0) { return 0.0; }\nfloat offsetx = 1.0 / cc_shadowWHPBInfo.x;\nfloat offsety = 1.0 / cc_shadowWHPBInfo.y;\nfloat depth = 0.0;\nfloat shadow = 0.0;\nif (cc_shadowNFLSInfo.z > 0.000001) {\ndepth = CCGetLinearDepth(worldPos);\n} else {\ndepth = clipPos.z;\n}\nclipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\nif (cc_shadowLPNNInfo.y > 0.000001) {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 160581375.0));\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n} else {\nfor (int i = -2; i <= 2; i++) {\nfor (int j = -2; j <= 2; j++) {\nfloat closestDepth = texture(cc_spotLightingMap, clipPos.xy + vec2(i, j) * vec2(offsetx, offsety)).x;\nshadow += step(closestDepth, clipPos.z - cc_shadowWHPBInfo.w);\n}\n}\n}\nreturn shadow / 25.0;\n}\n#endif\n#if CC_USE_IBL\nlayout(set = 0, binding = 4) uniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\nvec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\nreturn textureLod(tex, coord, lod);\n}\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\nvec3 NxH = cross(N, H);\nfloat OneMinusNoHSqr = dot(NxH, NxH);\nfloat a = roughness * roughness;\nfloat n = NoH * a;\nfloat p = a / (OneMinusNoHSqr + n * n);\nreturn p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\nreturn (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\nconst vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\nconst vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\nvec4 r = roughness * c0 + c1;\nfloat a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\nvec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\nAB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\nreturn specular * AB.x + AB.y;\n}\nstruct StandardSurface {\nvec4 albedo;\nvec3 position;\nvec3 normal;\nvec3 emissive;\nvec3 lightmap;\nfloat lightmap_test;\nfloat roughness;\nfloat metallic;\nfloat occlusion;\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 L = normalize(-cc_mainLitDir.xyz);\nvec3 H = normalize(L + V);\nfloat NH = max(dot(N, H), 0.0);\nfloat NL = max(dot(N, L), 0.001);\nvec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\nvec3 diffuseContrib = diffuse;\n#if USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\nif (s.lightmap_test > 0.0001) {\nfinalColor = s.lightmap.rgb;\n}\n#else\ndiffuseContrib /= 3.14159265359;\n#endif\nvec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\nfinalColor *= (diffuseContrib + specularContrib);\nfloat fAmb = 0.5 - N.y * 0.5;\nvec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb) * cc_ambientSky.w;\nfinalColor += (ambDiff.rgb * diffuse);\n#if CC_USE_IBL\nvec3 R = normalize(reflect(-V, N));\nvec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n#if CC_USE_IBL == 2\nvec3 env = unpackRGBE(envmap);\n#else\nvec3 env = SRGBToLinear(envmap.rgb);\n#endif\nfinalColor += env * cc_ambientSky.w * specular;\n#endif\nfinalColor = finalColor * s.occlusion;\n#if CC_USE_HDR\ns.emissive *= cc_exposure.w;\n#endif\nfinalColor += s.emissive;\n#if CC_RECEIVE_SHADOW\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, L.xyz), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetShadowFactorX25(pos);\nelse if (pcf > 2.0) shadowAttenuation = CCGetShadowFactorX9(pos);\nelse if (pcf > 1.0) shadowAttenuation = CCGetShadowFactorX5(pos);\nelse shadowAttenuation = CCGetShadowFactorX1(pos);\nvec3 shadowColor = cc_shadowColor.rgb * cc_shadowColor.a + finalColor.rgb * (1.0 - cc_shadowColor.a);\nif (cc_shadowNFLSInfo.w > 0.000001) {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation + finalColor.rgb * (1.0 - shadowAttenuation);\n} else {\nfinalColor.rgb = shadowColor.rgb * shadowAttenuation * NL + finalColor.rgb * (1.0 - shadowAttenuation * NL);\n}\n}\n#endif\nreturn vec4(finalColor, s.albedo.a);\n}\n#if CC_PIPELINE_TYPE == 0\n# define LIGHTS_PER_PASS 1\n#else\n# define LIGHTS_PER_PASS 10\n#endif\nlayout(set = 2, binding = 1) uniform CCForwardLight {\nhighp vec4 cc_lightPos[LIGHTS_PER_PASS];\nvec4 cc_lightColor[LIGHTS_PER_PASS];\nvec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\nvec4 cc_lightDir[LIGHTS_PER_PASS];\n};\nfloat SmoothDistAtt (float distSqr, float invSqrAttRadius) {\nfloat factor = distSqr * invSqrAttRadius;\nfloat smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\nreturn smoothFactor * smoothFactor;\n}\nfloat GetDistAtt (float distSqr, float invSqrAttRadius) {\nfloat attenuation = 1.0 / max(distSqr, 0.01*0.01);\nattenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\nreturn attenuation;\n}\nfloat GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\nfloat cd = dot(litDir, L);\nfloat attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\nreturn (attenuation * attenuation);\n}\nvec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\nvec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\nvec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\nvec3 diffuseContrib = diffuse / 3.14159265359;\nvec3 N = normalize(s.normal);\nvec3 V = normalize(cc_cameraPos.xyz - s.position);\nfloat NV = max(abs(dot(N, V)), 0.001);\nspecular = BRDFApprox(specular, s.roughness, NV);\nvec3 finalColor = vec3(0.0);\nint numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\nfor (int i = 0; i < LIGHTS_PER_PASS; i++) {\nif (i >= numLights) break;\nvec3 SLU = cc_lightPos[i].xyz - s.position;\nvec3 SL = normalize(SLU);\nvec3 SH = normalize(SL + V);\nfloat SNL = max(dot(N, SL), 0.001);\nfloat SNH = max(dot(N, SH), 0.0);\nfloat distSqr = dot(SLU, SLU);\nfloat litRadius = cc_lightSizeRangeAngle[i].x;\nfloat litRadiusSqr = litRadius * litRadius;\nfloat illum = 3.14159265359 * (litRadiusSqr / max(litRadiusSqr , distSqr));\nfloat attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\nattRadiusSqrInv *= attRadiusSqrInv;\nfloat att = GetDistAtt(distSqr, attRadiusSqrInv);\nvec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\nif (cc_lightPos[i].w > 0.0) {\nfloat cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\nfloat cosOuter = cc_lightSizeRangeAngle[i].z;\nfloat litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\nfloat litAngleOffset = -cosOuter * litAngleScale;\natt *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n}\nvec3 lightColor = cc_lightColor[i].rgb;\n#if CC_RECEIVE_SHADOW\nif (cc_lightPos[i].w > 0.0) {\n{\nfloat pcf = cc_shadowWHPBInfo.z + 0.001;\nfloat shadowAttenuation = 0.0;\nfloat cosAngle = clamp(1.0 - dot(N, normalize(cc_lightPos[i].xyz - s.position.xyz)), 0.0, 1.0);\nvec3 projWorldPos = shadowPos.xyz + cosAngle * cc_shadowLPNNInfo.z * N;\nvec4 pos = vec4(projWorldPos.xyz, shadowPos.w);\nif (pcf > 3.0) shadowAttenuation = CCGetDirLightShadowFactorX25(pos, s.position);\nelse if (pcf > 2.0) shadowAttenuation = CCGetDirLightShadowFactorX9(pos, s.position);\nelse if (pcf > 1.0) shadowAttenuation = CCGetDirLightShadowFactorX5(pos, s.position);\nelse shadowAttenuation = CCGetDirLightShadowFactorX1(pos, s.position);\nlightColor *= 1.0 - shadowAttenuation;\n}\n}\n#endif\nfinalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n}\nfinalColor = finalColor * s.occlusion;\nreturn vec4(finalColor, 0.0);\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nfloat LinearFog(vec4 pos) {\nvec4 wPos = pos;\nfloat cam_dis = distance(cc_cameraPos, wPos);\nfloat fogStart = cc_fogBase.x;\nfloat fogEnd = cc_fogBase.y;\nreturn clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * fogDensity);\nreturn f;\n}\nfloat ExpSquaredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat fogDensity = cc_fogBase.z;\nfloat cam_dis = distance(cc_cameraPos, wPos) / fogAtten * 4.;\nfloat f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\nreturn f;\n}\nfloat LayeredFog(vec4 pos) {\nvec4 wPos = pos;\nfloat fogAtten = cc_fogAdd.z;\nfloat _FogTop = cc_fogAdd.x;\nfloat _FogRange = cc_fogAdd.y;\nvec3 camWorldProj = cc_cameraPos.xyz;\ncamWorldProj.y = 0.;\nvec3 worldPosProj = wPos.xyz;\nworldPosProj.y = 0.;\nfloat fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\nfloat fDeltaY, fDensityIntegral;\nif (cc_cameraPos.y > _FogTop) {\nif (wPos.y < _FogTop) {\nfDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\nfDensityIntegral = fDeltaY * fDeltaY * 0.5;\n} else {\nfDeltaY = 0.;\nfDensityIntegral = 0.;\n}\n} else {\nif (wPos.y < _FogTop) {\nfloat fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfloat fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\nfDeltaY = abs(fDeltaA - fDeltaB);\nfDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n} else {\nfDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\nfDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n}\n}\nfloat fDensity;\nif (fDeltaY != 0.) {\nfDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n} else {\nfDensity = 0.;\n}\nfloat f = exp(-fDensity);\nreturn f;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout (set = 0, binding = 6) uniform sampler2D cc_gbuffer_albedoMap;\nlayout (set = 0, binding = 7) uniform sampler2D cc_gbuffer_positionMap;\nlayout (set = 0, binding = 8) uniform sampler2D cc_gbuffer_normalMap;\nlayout (set = 0, binding = 9) uniform sampler2D cc_gbuffer_emissiveMap;\nlayout(location = 0) out vec4 fragColor;\nvoid main () {\nStandardSurface s;\nvec4 albedoMap = texture(cc_gbuffer_albedoMap,v_uv);\nvec4 positionMap = texture(cc_gbuffer_positionMap,v_uv);\nvec4 normalMap = texture(cc_gbuffer_normalMap,v_uv);\nvec4 emissiveMap = texture(cc_gbuffer_emissiveMap,v_uv);\ns.albedo = albedoMap;\ns.position = positionMap.xyz;\ns.roughness = positionMap.w;\ns.normal = normalMap.xyz;\ns.metallic = normalMap.w;\ns.emissive = emissiveMap.xyz;\ns.occlusion = emissiveMap.w;\nfloat fogFactor;\n#if CC_USE_FOG == 0\nfogFactor = LinearFog(vec4(s.position, 1));\n#elif CC_USE_FOG == 1\nfogFactor = ExpFog(vec4(s.position, 1));\n#elif CC_USE_FOG == 2\nfogFactor = ExpSquaredFog(vec4(s.position, 1));\n#elif CC_USE_FOG == 3\nfogFactor = LayeredFog(vec4(s.position, 1));\n#else\nfogFactor = 1.0;\n#endif\nvec4 shadowPos;\nshadowPos = cc_matLightViewProj * vec4(s.position, 1);\nvec4 color = CCStandardShadingBase(s, shadowPos) +\nCCStandardShadingAdditive(s, shadowPos);\ncolor = vec4(mix(CC_FORWARD_ADD > 0 ? vec3(0.0) : cc_fogColor.rgb, color.rgb, fogFactor), color.a);\nfragColor = CCFragOutput(color);\n}"
            }], [{
              "vert": "#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\nint getVertexId() {\nreturn gl_VertexIndex;\n}\nlayout(set = 2, binding = 4) uniform CCMorph {\nvec4 cc_displacementWeights[15];\nvec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\nivec2 texSize = textureSize(tex, 0);\nreturn texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture(tex, x)),\ndecode32(texture(tex, y)),\ndecode32(texture(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nlayout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nlayout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nlayout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nlayout(location = 4) in u32vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nlayout(location = 7) in highp vec4 a_jointAnimInfo;\n#endif\nlayout(set = 2, binding = 3) uniform CCSkinningTexture {\nhighp vec4 cc_jointTextureInfo;\n};\nlayout(set = 2, binding = 2) uniform CCSkinningAnimation {\nhighp vec4 cc_jointAnimInfo;\n};\nlayout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n#else\nlayout(set = 2, binding = 3) uniform CCSkinning {\nhighp vec4 cc_joints[30 * 3];\n};\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\n#if USE_INSTANCING\nlayout(location = 8) in vec4 a_matWorld0;\nlayout(location = 9) in vec4 a_matWorld1;\nlayout(location = 10) in vec4 a_matWorld2;\n#if USE_LIGHTMAP\nlayout(location = 11) in vec4 a_lightingMapUVParam;\n#endif\n#elif USE_BATCHING\nlayout(location = 12) in float a_dyn_batch_id;\nlayout(set = 2, binding = 0) uniform CCLocalBatched {\nhighp mat4 cc_matWorlds[10];\n};\n#else\nlayout(set = 2, binding = 0) uniform CCLocal {\nhighp mat4 cc_matWorld;\nhighp mat4 cc_matWorldIT;\nhighp vec4 cc_lightingMapUVParam;\n};\n#endif\nlayout(set = 0, binding = 2) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\nvec4 vert () {\nvec4 position;\nposition = vec4(a_position, 1.0);\n#if CC_USE_MORPH\napplyMorph(position);\n#endif\n#if CC_USE_SKINNING\nCCSkin(position);\n#endif\nmat4 matWorld;\n#if USE_INSTANCING\nmatWorld = mat4(\nvec4(a_matWorld0.xyz, 0.0),\nvec4(a_matWorld1.xyz, 0.0),\nvec4(a_matWorld2.xyz, 0.0),\nvec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n);\n#elif USE_BATCHING\nmatWorld = cc_matWorlds[int(a_dyn_batch_id)];\n#else\nmatWorld = cc_matWorld;\n#endif\nposition = cc_matProj * (cc_matView * cc_matLightPlaneProj * matWorld) * position;\nposition.z -= 0.0001;\nreturn position;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nlayout(set = 0, binding = 2) uniform CCShadow {\nhighp mat4 cc_matLightPlaneProj;\nhighp mat4 cc_matLightView;\nhighp mat4 cc_matLightViewProj;\nlowp  vec4 cc_shadowNFLSInfo;\nlowp  vec4 cc_shadowWHPBInfo;\nlowp  vec4 cc_shadowLPNNInfo;\nlowp  vec4 cc_shadowColor;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nvec4 frag () {\nreturn CCFragOutput(cc_shadowColor);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\nhighp float decode32 (highp vec4 rgba) {\nrgba = rgba * 255.0;\nhighp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\nhighp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\nhighp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\nreturn Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_MORPH\nint getVertexId() {\nreturn gl_VertexIndex;\n}\nlayout(set = 2, binding = 4) uniform CCMorph {\nvec4 cc_displacementWeights[15];\nvec4 cc_displacementTextureInfo;\n};\nvec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\nfloat pixelIndexF = float(pixelIndex);\nfloat x = mod(pixelIndexF, textureResolution.x);\nfloat y = floor(pixelIndexF / textureResolution.x);\nreturn vec2(x, y);\n}\nvec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\nreturn (vec2(location.x, location.y) + .5) / textureResolution;\n}\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\nivec2 texSize = textureSize(tex, 0);\nreturn texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n}\n#else\nvec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\nint pixelIndex = elementIndex * 4;\nvec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\nvec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\nvec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\nreturn vec4(\ndecode32(texture(tex, x)),\ndecode32(texture(tex, y)),\ndecode32(texture(tex, z)),\n1.0\n);\n}\n#endif\nfloat getDisplacementWeight(int index) {\nint quot = index / 4;\nint remainder = index - quot * 4;\nif (remainder == 0) {\nreturn cc_displacementWeights[quot].x;\n} else if (remainder == 1) {\nreturn cc_displacementWeights[quot].y;\n} else if (remainder == 2) {\nreturn cc_displacementWeights[quot].z;\n} else {\nreturn cc_displacementWeights[quot].w;\n}\n}\nvec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n#if CC_MORPH_PRECOMPUTED\nreturn fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n#else\nvec3 result = vec3(0, 0, 0);\nint nVertices = int(cc_displacementTextureInfo.z);\nfor (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\nresult += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n}\nreturn result;\n#endif\n}\n#if CC_MORPH_TARGET_HAS_POSITION\nlayout(set = 2, binding = 6) uniform sampler2D cc_PositionDisplacements;\nvec3 getPositionDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nlayout(set = 2, binding = 7) uniform sampler2D cc_NormalDisplacements;\nvec3 getNormalDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n}\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nlayout(set = 2, binding = 8) uniform sampler2D cc_TangentDisplacements;\nvec3 getTangentDisplacement(int vertexId) {\nreturn getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n}\n#endif\nvoid applyMorph (inout StandardVertInput attr) {\nint vertexId = getVertexId();\n#if CC_MORPH_TARGET_HAS_POSITION\nattr.position.xyz = attr.position.xyz + getPositionDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_NORMAL\nattr.normal.xyz = attr.normal.xyz + getNormalDisplacement(vertexId);\n#endif\n#if CC_MORPH_TARGET_HAS_TANGENT\nattr.tangent.xyz = attr.tangent.xyz + getTangentDisplacement(vertexId);\n#endif\n}\nvoid applyMorph (inout vec4 position) {\n#if CC_MORPH_TARGET_HAS_POSITION\nposition.xyz = position.xyz + getPositionDisplacement(getVertexId());\n#endif\n}\n#endif\n#if CC_USE_SKINNING\nlayout(location = 4) in u32vec4 a_joints;\nlayout(location = 5) in vec4 a_weights;\n#if CC_USE_BAKED_ANIMATION\n#if USE_INSTANCING\nlayout(location = 7) in highp vec4 a_jointAnimInfo;\n#endif\nlayout(set = 2, binding = 3) uniform CCSkinningTexture {\nhighp vec4 cc_jointTextureInfo;\n};\nlayout(set = 2, binding = 2) uniform CCSkinningAnimation {\nhighp vec4 cc_jointAnimInfo;\n};\nlayout(set = 2, binding = 5) uniform highp sampler2D cc_jointTexture;\n#else\nlayout(set = 2, binding = 3) uniform CCSkinning {\nhighp vec4 cc_joints[30 * 3];\n};\n#endif\n#if CC_USE_BAKED_ANIMATION\n#if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 3.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 3.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\nvec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\nvec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#else\nmat4 getJointMatrix (float i) {\n#if USE_INSTANCING\nhighp float j = 12.0 * (a_jointAnimInfo.x * a_jointAnimInfo.y + i) + a_jointAnimInfo.z;\n#else\nhighp float j = 12.0 * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + i) + cc_jointTextureInfo.z;\n#endif\nhighp float invSize = cc_jointTextureInfo.w;\nhighp float y = floor(j * invSize);\nhighp float x = floor(j - y * cc_jointTextureInfo.x);\ny = (y + 0.5) * invSize;\nvec4 v1 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n);\nvec4 v2 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n);\nvec4 v3 = vec4(\ndecode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\ndecode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n);\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\n#else\nmat4 getJointMatrix (float i) {\nint idx = int(i);\nvec4 v1 = cc_joints[idx * 3];\nvec4 v2 = cc_joints[idx * 3 + 1];\nvec4 v3 = cc_joints[idx * 3 + 2];\nreturn mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n}\n#endif\nmat4 skinMatrix () {\nvec4 joints = vec4(a_joints);\nreturn getJointMatrix(joints.x) * a_weights.x\n+ getJointMatrix(joints.y) * a_weights.y\n+ getJointMatrix(joints.z) * a_weights.z\n+ getJointMatrix(joints.w) * a_weights.w;\n}\nvoid CCSkin (inout vec4 position) {\nmat4 m = skinMatrix();\nposition = m * position;\n}\nvoid CCSkin (inout StandardVertInput attr) {\nmat4 m = skinMatrix();\nattr.position = m * attr.position;\nattr.normal = (m * vec4(attr.normal, 0.0)).xyz;\nattr.tangent.xyz = (m * vec4(attr.tangent.xyz, 0.0)).xyz;\n}\n#endif\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(location = 0) out vec2 v_uv;\nvoid main () {\nStandardVertInput In;\nIn.position = vec4(a_position, 1.0);\nIn.normal = a_normal;\nIn.tangent = a_tangent;\n#if CC_USE_MORPH\napplyMorph(In);\n#endif\n#if CC_USE_SKINNING\nCCSkin(In);\n#endif\nIn.position.xy = cc_cameraPos.w == 0.0 ? vec2(In.position.xy.x, -In.position.xy.y) : In.position.xy;\ngl_Position = In.position;\ngl_Position.y = gl_Position.y;\nv_uv = a_texCoord;\n}",
              "frag": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(location = 0) in vec2 v_uv;\nlayout (set = 0, binding = 10) uniform sampler2D cc_lighting_resultMap;\nlayout(location = 0) out vec4 fragColor;\nvoid texcoords(vec2 fragCoord, vec2 resolution,\nout vec2 v_rgbNW, out vec2 v_rgbNE,\nout vec2 v_rgbSW, out vec2 v_rgbSE,\nout vec2 v_rgbM) {\nvec2 inverseVP = 1.0 / resolution.xy;\nv_rgbNW = (fragCoord + vec2(-1.0, -1.0)) * inverseVP;\nv_rgbNE = (fragCoord + vec2(1.0, -1.0)) * inverseVP;\nv_rgbSW = (fragCoord + vec2(-1.0, 1.0)) * inverseVP;\nv_rgbSE = (fragCoord + vec2(1.0, 1.0)) * inverseVP;\nv_rgbM = vec2(fragCoord * inverseVP);\n}\nvec4 fxaa(sampler2D tex, vec2 fragCoord, vec2 resolution,\nvec2 v_rgbNW, vec2 v_rgbNE,\nvec2 v_rgbSW, vec2 v_rgbSE,\nvec2 v_rgbM) {\nvec4 color;\nmediump vec2 inverseVP = vec2(1.0 / resolution.x, 1.0 / resolution.y);\nvec3 rgbNW = texture(tex, v_rgbNW).xyz;\nvec3 rgbNE = texture(tex, v_rgbNE).xyz;\nvec3 rgbSW = texture(tex, v_rgbSW).xyz;\nvec3 rgbSE = texture(tex, v_rgbSE).xyz;\nvec4 texColor = texture(tex, v_rgbM);\nvec3 rgbM  = texColor.xyz;\nvec3 luma = vec3(0.299, 0.587, 0.114);\nfloat lumaNW = dot(rgbNW, luma);\nfloat lumaNE = dot(rgbNE, luma);\nfloat lumaSW = dot(rgbSW, luma);\nfloat lumaSE = dot(rgbSE, luma);\nfloat lumaM  = dot(rgbM,  luma);\nfloat lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));\nfloat lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));\nmediump vec2 dir;\ndir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));\ndir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));\nfloat dirReduce = max((lumaNW + lumaNE + lumaSW + lumaSE) *\n(0.25 * (1.0 / 8.0)), (1.0/ 128.0));\nfloat rcpDirMin = 1.0 / (min(abs(dir.x), abs(dir.y)) + dirReduce);\ndir = min(vec2(8.0, 8.0),\nmax(vec2(-8.0, -8.0),\ndir * rcpDirMin)) * inverseVP;\nvec3 rgbA = 0.5 * (\ntexture(tex, fragCoord * inverseVP + dir * (1.0 / 3.0 - 0.5)).xyz +\ntexture(tex, fragCoord * inverseVP + dir * (2.0 / 3.0 - 0.5)).xyz);\nvec3 rgbB = rgbA * 0.5 + 0.25 * (\ntexture(tex, fragCoord * inverseVP + dir * -0.5).xyz +\ntexture(tex, fragCoord * inverseVP + dir * 0.5).xyz);\nfloat lumaB = dot(rgbB, luma);\nif ((lumaB < lumaMin) || (lumaB > lumaMax))\ncolor = vec4(rgbA, texColor.a);\nelse\ncolor = vec4(rgbB, texColor.a);\nreturn color;\n}\nvoid main () {\nmediump vec2 v_rgbNW;\nmediump vec2 v_rgbNE;\nmediump vec2 v_rgbSW;\nmediump vec2 v_rgbSE;\nmediump vec2 v_rgbM;\nvec2 resolution = cc_screenSize.xy;\nvec2 fragCoord = v_uv * resolution;\ntexcoords(fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\nfragColor = fxaa(cc_lighting_resultMap, fragCoord, resolution, v_rgbNW, v_rgbNE, v_rgbSW, v_rgbSE, v_rgbM);\n}"
            }], [{
              "vert": "\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nstruct StandardVertInput {\nhighp vec4 position;\nvec3 normal;\nvec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\nlayout(location = 0) out mediump vec4 viewDir;\nvec4 vert () {\nviewDir = vec4(a_position, 1.0);\nmat4 matViewRotOnly = mat4(mat3(cc_matView));\nmat4 matProj = cc_matProj;\nif (matProj[3].w > 0.0) {\nvec2 scale = vec2(48.0, 24.0);\nmatProj[0].xy *= scale;\nmatProj[1].xy *= scale;\nmatProj[2].zw = vec2(-1.0);\nmatProj[3].zw = vec2(0.0);\n}\nvec4 pos = matProj * matViewRotOnly * viewDir;\npos.z = 0.99999 * pos.w;\nreturn pos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(set = 0, binding = 4) uniform samplerCube cc_environment;\nvec3 unpackRGBE (vec4 rgbe) {\nreturn rgbe.rgb * pow(2.0, rgbe.a * 255.0 - 128.0);\n}\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec3 ACESToneMap (vec3 color) {\ncolor = min(color, vec3(8.0));\nconst float A = 2.51;\nconst float B = 0.03;\nconst float C = 2.43;\nconst float D = 0.59;\nconst float E = 0.14;\nreturn (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n#if !CC_USE_HDR\ncolor.rgb = sqrt(ACESToneMap(color.rgb));\n#endif\nreturn color;\n}\nlayout(location = 0) in mediump vec4 viewDir;\nvec4 frag () {\n#if USE_RGBE_CUBEMAP\nvec3 c = unpackRGBE(texture(cc_environment, viewDir.xyz));\n#else\nvec3 c = SRGBToLinear(texture(cc_environment, viewDir.xyz).rgb);\n#endif\nreturn CCFragOutput(vec4(c * cc_ambientSky.w, 1.0));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_color;\nlayout(location = 0) out vec2 v_uv;\nlayout(set = 1, binding = 0) uniform Constants {\nvec4 offset;\n};\nlayout(set = 1, binding = 1) uniform PerFrameInfo {\nvec4 digits[8 * 10 / 4];\n};\nfloat getComponent(vec4 v, float i) {\nif (i < 1.0) { return v.x; }\nelse if (i < 2.0) { return v.y; }\nelse if (i < 3.0) { return v.z; }\nelse { return v.w; }\n}\nvec4 vert () {\nvec4 position = cc_matViewProj * vec4(a_position, 1.0);\nposition.xy += offset.xy;\nv_uv = a_color.xy;\nif (a_color.z >= 0.0) {\nfloat n = getComponent(digits[int(a_color.z)], a_color.w);\nv_uv += vec2(offset.z * n, 0.0);\n}\nreturn position;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\nhighp   vec4 cc_time;\nmediump vec4 cc_screenSize;\nmediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\nhighp   mat4 cc_matView;\nhighp   mat4 cc_matViewInv;\nhighp   mat4 cc_matProj;\nhighp   mat4 cc_matProjInv;\nhighp   mat4 cc_matViewProj;\nhighp   mat4 cc_matViewProjInv;\nhighp   vec4 cc_cameraPos;\nmediump vec4 cc_screenScale;\nmediump vec4 cc_exposure;\nmediump vec4 cc_mainLitDir;\nmediump vec4 cc_mainLitColor;\nmediump vec4 cc_ambientSky;\nmediump vec4 cc_ambientGround;\nmediump vec4 cc_fogColor;\nmediump vec4 cc_fogBase;\nmediump vec4 cc_fogAdd;\n};\nvec3 SRGBToLinear (vec3 gamma) {\nreturn gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n#if CC_USE_HDR\ncolor.rgb = mix(color.rgb, SRGBToLinear(color.rgb) * cc_exposure.w, vec3(cc_exposure.z));\n#endif\nreturn color;\n}\nlayout(location = 0) in vec2 v_uv;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nvec4 frag () {\nreturn CCFragOutput(texture(mainTexture, v_uv));\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }], [{
              "vert": "\nprecision mediump float;\nlayout(location = 0) in vec2 a_position;\nlayout(location = 1) in vec2 a_texCoord;\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out float v_percent;\nlayout(set = 1, binding = 0) uniform Constant {\nvec4 u_buffer0;\nvec4 u_buffer1;\nmat4 u_projection;\n};\nvec4 vert () {\nvec2 worldPos = a_position * u_buffer1.xy + u_buffer1.zw;\nvec2 clipSpace = worldPos / u_buffer0.xy * 2.0 - 1.0;\nvec4 screenPos = u_projection * vec4(clipSpace, 0.0, 1.0);\nv_uv = a_texCoord;\nv_percent = u_buffer0.z;\nreturn screenPos;\n}\nvoid main() { gl_Position = vert(); }",
              "frag": "\nprecision mediump float;\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in float v_percent;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 frag () {\nvec4 color = texture(mainTexture, v_uv);\nfloat precent = clamp(v_percent, 0.0, 1.0);\ncolor.xyz *= precent;\nreturn color;\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"
            }]];

            const assembly = (() => {
              {
                return {
                  glsl1,
                  glsl3,
                  glsl4
                };
              }
            })();

            class BuiltinResMgr {
              constructor() {
                this._device = null;
                this._resources = {};
              }

              initBuiltinRes(device) {
                this._device = device;
                const resources = this._resources;
                const canvas = document.createElement('canvas');
                const context = canvas.getContext('2d');
                const imgAsset = new ImageAsset(canvas);
                const l = canvas.width = canvas.height = 2;
                context.fillStyle = '#000';
                context.fillRect(0, 0, l, l);
                const blackTexture = new Texture2D();
                blackTexture._uuid = 'black-texture';
                blackTexture.image = imgAsset;
                resources[blackTexture._uuid] = blackTexture;
                context.fillStyle = 'rgba(0,0,0,0)';
                context.fillRect(0, 0, l, l);
                const emptyTexture = new Texture2D();
                emptyTexture._uuid = 'empty-texture';
                emptyTexture.image = imgAsset;
                resources[emptyTexture._uuid] = emptyTexture;
                const blackCubeTexture = new TextureCube();
                blackCubeTexture._uuid = 'black-cube-texture';
                blackCubeTexture.setMipFilter(TextureCube.Filter.NEAREST);
                blackCubeTexture.image = {
                  front: new ImageAsset(canvas),
                  back: new ImageAsset(canvas),
                  left: new ImageAsset(canvas),
                  right: new ImageAsset(canvas),
                  top: new ImageAsset(canvas),
                  bottom: new ImageAsset(canvas)
                };
                resources[blackCubeTexture._uuid] = blackCubeTexture;
                context.fillStyle = '#777';
                context.fillRect(0, 0, l, l);
                const greyTexture = new Texture2D();
                greyTexture._uuid = 'grey-texture';
                greyTexture.image = imgAsset;
                resources[greyTexture._uuid] = greyTexture;
                context.fillStyle = '#fff';
                context.fillRect(0, 0, l, l);
                const whiteTexture = new Texture2D();
                whiteTexture._uuid = 'white-texture';
                whiteTexture.image = imgAsset;
                resources[whiteTexture._uuid] = whiteTexture;
                const whiteCubeTexture = new TextureCube();
                whiteCubeTexture._uuid = 'white-cube-texture';
                whiteCubeTexture.setMipFilter(TextureCube.Filter.NEAREST);
                whiteCubeTexture.image = {
                  front: new ImageAsset(canvas),
                  back: new ImageAsset(canvas),
                  left: new ImageAsset(canvas),
                  right: new ImageAsset(canvas),
                  top: new ImageAsset(canvas),
                  bottom: new ImageAsset(canvas)
                };
                resources[whiteCubeTexture._uuid] = whiteCubeTexture;
                context.fillStyle = '#7f7fff';
                context.fillRect(0, 0, l, l);
                const normalTexture = new Texture2D();
                normalTexture._uuid = 'normal-texture';
                normalTexture.image = imgAsset;
                resources[normalTexture._uuid] = normalTexture;
                canvas.width = canvas.height = 16;
                context.fillStyle = '#ddd';
                context.fillRect(0, 0, 16, 16);
                context.fillStyle = '#555';
                context.fillRect(0, 0, 8, 8);
                context.fillStyle = '#555';
                context.fillRect(8, 8, 8, 8);
                const defaultTexture = new Texture2D();
                defaultTexture._uuid = 'default-texture';
                defaultTexture.image = imgAsset;
                resources[defaultTexture._uuid] = defaultTexture;
                const defaultCubeTexture = new TextureCube();
                defaultCubeTexture.setMipFilter(TextureCube.Filter.NEAREST);
                defaultCubeTexture._uuid = 'default-cube-texture';
                defaultCubeTexture.image = {
                  front: new ImageAsset(canvas),
                  back: new ImageAsset(canvas),
                  left: new ImageAsset(canvas),
                  right: new ImageAsset(canvas),
                  top: new ImageAsset(canvas),
                  bottom: new ImageAsset(canvas)
                };
                resources[defaultCubeTexture._uuid] = defaultCubeTexture;

                if (legacyCC.SpriteFrame) {
                  const spriteFrame = new legacyCC.SpriteFrame();
                  const texture = imgAsset._texture;
                  spriteFrame.texture = texture;
                  spriteFrame._uuid = 'default-spriteframe';
                  resources[spriteFrame._uuid] = spriteFrame;
                }

                const shaderVersionKey = getDeviceShaderVersion(device);

                if (!shaderVersionKey) {
                  return Promise.reject(Error('Failed to initialize builtin shaders: unknown device.'));
                }

                const shaderSources = assembly[shaderVersionKey];

                if (!shaderSources) {
                  return Promise.reject(Error(`Current device is requiring builtin shaders of version ${shaderVersionKey} ` + `but shaders of that version are not assembled in this build.`));
                }

                return Promise.resolve().then(() => {
                  effects.forEach((e, effectIndex) => {
                    const effect = Object.assign(new legacyCC.EffectAsset(), e);
                    effect.shaders.forEach((shaderInfo, shaderIndex) => {
                      const shaderSource = shaderSources[effectIndex][shaderIndex];

                      if (shaderSource) {
                        shaderInfo[shaderVersionKey] = shaderSource;
                      }
                    });
                    effect.hideInEditor = true;
                    effect.onLoaded();
                  });

                  this._initMaterials();
                });
              }

              get(uuid) {
                return this._resources[uuid];
              }

              _initMaterials() {
                const resources = this._resources;
                const materialsToBeCompiled = [];
                const standardMtl = new legacyCC.Material();
                standardMtl._uuid = 'standard-material';
                standardMtl.initialize({
                  effectName: 'standard'
                });
                resources[standardMtl._uuid] = standardMtl;
                materialsToBeCompiled.push(standardMtl);
                const missingEfxMtl = new legacyCC.Material();
                missingEfxMtl._uuid = 'missing-effect-material';
                missingEfxMtl.initialize({
                  effectName: 'unlit',
                  defines: {
                    USE_COLOR: true
                  }
                });
                missingEfxMtl.setProperty('mainColor', legacyCC.color('#ffff00'));
                resources[missingEfxMtl._uuid] = missingEfxMtl;
                materialsToBeCompiled.push(missingEfxMtl);
                const missingMtl = new legacyCC.Material();
                missingMtl._uuid = 'missing-material';
                missingMtl.initialize({
                  effectName: 'unlit',
                  defines: {
                    USE_COLOR: true
                  }
                });
                missingMtl.setProperty('mainColor', legacyCC.color('#ff00ff'));
                resources[missingMtl._uuid] = missingMtl;
                materialsToBeCompiled.push(missingMtl);
                const clearStencilMtl = new legacyCC.Material();
                clearStencilMtl._uuid = 'default-clear-stencil';
                clearStencilMtl.initialize({
                  defines: {
                    USE_TEXTURE: false
                  },
                  effectName: 'clear-stencil'
                });
                resources[clearStencilMtl._uuid] = clearStencilMtl;
                materialsToBeCompiled.push(clearStencilMtl);
                const spriteMtl = new legacyCC.Material();
                spriteMtl._uuid = 'ui-base-material';
                spriteMtl.initialize({
                  defines: {
                    USE_TEXTURE: false
                  },
                  effectName: 'sprite'
                });
                resources[spriteMtl._uuid] = spriteMtl;
                materialsToBeCompiled.push(spriteMtl);
                const spriteColorMtl = new legacyCC.Material();
                spriteColorMtl._uuid = 'ui-sprite-material';
                spriteColorMtl.initialize({
                  defines: {
                    USE_TEXTURE: true,
                    CC_USE_EMBEDDED_ALPHA: false,
                    IS_GRAY: false
                  },
                  effectName: 'sprite'
                });
                resources[spriteColorMtl._uuid] = spriteColorMtl;
                materialsToBeCompiled.push(spriteColorMtl);
                const alphaTestMaskMtl = new legacyCC.Material();
                alphaTestMaskMtl._uuid = 'ui-alpha-test-material';
                alphaTestMaskMtl.initialize({
                  defines: {
                    USE_TEXTURE: true,
                    USE_ALPHA_TEST: true,
                    CC_USE_EMBEDDED_ALPHA: false,
                    IS_GRAY: false
                  },
                  effectName: 'sprite'
                });
                resources[alphaTestMaskMtl._uuid] = alphaTestMaskMtl;
                materialsToBeCompiled.push(alphaTestMaskMtl);
                const spriteGrayMtl = new legacyCC.Material();
                spriteGrayMtl._uuid = 'ui-sprite-gray-material';
                spriteGrayMtl.initialize({
                  defines: {
                    USE_TEXTURE: true,
                    CC_USE_EMBEDDED_ALPHA: false,
                    IS_GRAY: true
                  },
                  effectName: 'sprite'
                });
                resources[spriteGrayMtl._uuid] = spriteGrayMtl;
                materialsToBeCompiled.push(spriteGrayMtl);
                const spriteAlphaMtl = new legacyCC.Material();
                spriteAlphaMtl._uuid = 'ui-sprite-alpha-sep-material';
                spriteAlphaMtl.initialize({
                  defines: {
                    USE_TEXTURE: true,
                    CC_USE_EMBEDDED_ALPHA: true,
                    IS_GRAY: false
                  },
                  effectName: 'sprite'
                });
                resources[spriteAlphaMtl._uuid] = spriteAlphaMtl;
                materialsToBeCompiled.push(spriteAlphaMtl);
                const spriteAlphaGrayMtl = new legacyCC.Material();
                spriteAlphaGrayMtl._uuid = 'ui-sprite-gray-alpha-sep-material';
                spriteAlphaGrayMtl.initialize({
                  defines: {
                    USE_TEXTURE: true,
                    CC_USE_EMBEDDED_ALPHA: true,
                    IS_GRAY: true
                  },
                  effectName: 'sprite'
                });
                resources[spriteAlphaGrayMtl._uuid] = spriteAlphaGrayMtl;
                materialsToBeCompiled.push(spriteAlphaGrayMtl);
                const defaultGraphicsMtl = new legacyCC.Material();
                defaultGraphicsMtl._uuid = 'ui-graphics-material';
                defaultGraphicsMtl.initialize({
                  effectName: 'graphics'
                });
                resources[defaultGraphicsMtl._uuid] = defaultGraphicsMtl;
                materialsToBeCompiled.push(defaultGraphicsMtl);
                const defaultParticleMtl = new legacyCC.Material();
                defaultParticleMtl._uuid = 'default-particle-material';
                defaultParticleMtl.initialize({
                  effectName: 'particle'
                });
                resources[defaultParticleMtl._uuid] = defaultParticleMtl;
                materialsToBeCompiled.push(defaultParticleMtl);
                const defaultParticleGPUMtl = new legacyCC.Material();
                defaultParticleGPUMtl._uuid = 'default-particle-gpu-material';
                defaultParticleGPUMtl.initialize({
                  effectName: 'particle-gpu'
                });
                resources[defaultParticleGPUMtl._uuid] = defaultParticleGPUMtl;
                materialsToBeCompiled.push(defaultParticleGPUMtl);
                const defaultTrailMtl = new legacyCC.Material();
                defaultTrailMtl._uuid = 'default-trail-material';
                defaultTrailMtl.initialize({
                  effectName: 'particle-trail'
                });
                resources[defaultTrailMtl._uuid] = defaultTrailMtl;
                materialsToBeCompiled.push(defaultTrailMtl);
                const defaultBillboardMtl = new legacyCC.Material();
                defaultBillboardMtl._uuid = 'default-billboard-material';
                defaultBillboardMtl.initialize({
                  effectName: 'billboard'
                });
                resources[defaultBillboardMtl._uuid] = defaultBillboardMtl;
                materialsToBeCompiled.push(defaultBillboardMtl);
                const spineTwoColorMtl = new legacyCC.Material();
                spineTwoColorMtl._uuid = 'default-spine-material';
                spineTwoColorMtl.initialize({
                  defines: {
                    USE_TEXTURE: true,
                    CC_USE_EMBEDDED_ALPHA: false,
                    IS_GRAY: false
                  },
                  effectName: 'spine'
                });
                resources[spineTwoColorMtl._uuid] = spineTwoColorMtl;
                materialsToBeCompiled.push(spineTwoColorMtl);
                const builtinDeferredMtl = new legacyCC.Material();
                builtinDeferredMtl._uuid = 'builtin-deferred-material';
                builtinDeferredMtl.initialize({
                  effectName: 'deferred-lighting'
                });
                resources[builtinDeferredMtl._uuid] = builtinDeferredMtl;
                materialsToBeCompiled.push(builtinDeferredMtl);
                const builtinPostProcessMtl = new legacyCC.Material();
                builtinPostProcessMtl._uuid = 'builtin-post-process-material';
                builtinPostProcessMtl.initialize({
                  effectName: 'post-process'
                });
                resources[builtinPostProcessMtl._uuid] = builtinPostProcessMtl;
                materialsToBeCompiled.push(builtinPostProcessMtl);
                legacyCC.game.on(legacyCC.Game.EVENT_RENDERER_INITED, () => {
                  for (let i = 0; i < materialsToBeCompiled.length; ++i) {
                    const mat = materialsToBeCompiled[i];

                    for (let j = 0; j < mat.passes.length; ++j) {
                      mat.passes[j].tryCompile();
                    }
                  }
                });
              }

            }

            const builtinResMgr = exports('b$', legacyCC.builtinResMgr = new BuiltinResMgr());

            const getPhaseID = (() => {
              const phases = new Map();
              let phaseNum = 0;
              return phaseName => {
                if (typeof phaseName === 'number') {
                  return phaseName;
                }

                if (!phases.has(phaseName)) {
                  phases.set(phaseName, 1 << phaseNum);
                  phaseNum++;
                }

                return phases.get(phaseName);
              };
            })();

            const _bufferInfo = new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE);

            const _bufferViewInfo = new BufferViewInfo(null);

            const _dsInfo = new DescriptorSetInfo(null);

            let BatchingSchemes;

            (function (BatchingSchemes) {
              BatchingSchemes[BatchingSchemes["INSTANCING"] = 1] = "INSTANCING";
              BatchingSchemes[BatchingSchemes["VB_MERGING"] = 2] = "VB_MERGING";
            })(BatchingSchemes || (BatchingSchemes = {}));

            class Pass {
              static fillPipelineInfo(pass, info) {
                const hPass = pass.handle;

                if (info.priority !== undefined) {
                  PassPool.set(hPass, PassView.PRIORITY, info.priority);
                }

                if (info.primitive !== undefined) {
                  PassPool.set(hPass, PassView.PRIMITIVE, info.primitive);
                }

                if (info.stage !== undefined) {
                  PassPool.set(hPass, PassView.STAGE, info.stage);
                }

                if (info.dynamicStates !== undefined) {
                  PassPool.set(hPass, PassView.DYNAMIC_STATES, info.dynamicStates);
                }

                if (info.phase !== undefined) {
                  PassPool.set(hPass, PassView.PHASE, getPhaseID(info.phase));
                }

                const bs = pass._bs;

                if (info.blendState) {
                  const bsInfo = info.blendState;
                  const {
                    targets
                  } = bsInfo;

                  if (targets) {
                    targets.forEach((t, i) => {
                      bs.setTarget(i, t);
                    });
                  }

                  if (bsInfo.isA2C !== undefined) {
                    bs.isA2C = bsInfo.isA2C;
                  }

                  if (bsInfo.isIndepend !== undefined) {
                    bs.isIndepend = bsInfo.isIndepend;
                  }

                  if (bsInfo.blendColor !== undefined) {
                    bs.blendColor = bsInfo.blendColor;
                  }
                }

                pass._rs.assign(info.rasterizerState);

                pass._dss.assign(info.depthStencilState);
              }

              static getPassHash(pass, hShader) {
                const hPass = pass.handle;
                let res = `${hShader},${PassPool.get(hPass, PassView.PRIMITIVE)},${PassPool.get(hPass, PassView.DYNAMIC_STATES)}`;
                res += serializeBlendState(pass._bs);
                res += serializeDepthStencilState(pass._dss);
                res += serializeRasterizerState(pass._rs);
                return murmurhash2_32_gc(res, 666);
              }

              constructor(root) {
                this._rootBuffer = null;
                this._rootBufferDirty = false;
                this._buffers = [];
                this._descriptorSet = null;
                this._passIndex = 0;
                this._propertyIndex = 0;
                this._programName = '';
                this._dynamics = {};
                this._propertyHandleMap = {};
                this._rootBlock = null;
                this._blocks = [];
                this._shaderInfo = null;
                this._defines = {};
                this._properties = {};
                this._root = void 0;
                this._device = void 0;
                this._hShaderDefault = NULL_HANDLE;
                this._handle = NULL_HANDLE;
                this._bs = new BlendState$1();
                this._dss = new DepthStencilState$1();
                this._rs = new RasterizerState$1();
                this._root = root;
                this._device = root.device;
              }

              initialize(info) {
                this._doInit(info);

                this.resetUBOs();
                this.resetTextures();
                this.tryCompile();
              }

              getHandle(name, offset = 0, targetType = Type.UNKNOWN) {
                let handle = this._propertyHandleMap[name];

                if (!handle) {
                  return 0;
                }

                if (targetType) {
                  handle = customizeType(handle, targetType);
                } else if (offset) {
                  handle = customizeType(handle, getTypeFromHandle(handle) - offset);
                }

                return handle + offset;
              }

              getBinding(name) {
                const handle = this.getHandle(name);

                if (!handle) {
                  return -1;
                }

                return Pass.getBindingFromHandle(handle);
              }

              setUniform(handle, value) {
                const binding = Pass.getBindingFromHandle(handle);
                const type = Pass.getTypeFromHandle(handle);
                const ofs = Pass.getOffsetFromHandle(handle);
                const block = this._blocks[binding];
                type2writer[type](block, value, ofs);
                this._rootBufferDirty = true;
              }

              getUniform(handle, out) {
                const binding = Pass.getBindingFromHandle(handle);
                const type = Pass.getTypeFromHandle(handle);
                const ofs = Pass.getOffsetFromHandle(handle);
                const block = this._blocks[binding];
                return type2reader[type](block, out, ofs);
              }

              setUniformArray(handle, value) {
                const binding = Pass.getBindingFromHandle(handle);
                const type = Pass.getTypeFromHandle(handle);
                const stride = GetTypeSize(type) >> 2;
                const block = this._blocks[binding];
                let ofs = Pass.getOffsetFromHandle(handle);

                for (let i = 0; i < value.length; i++, ofs += stride) {
                  if (value[i] === null) {
                    continue;
                  }

                  type2writer[type](block, value[i], ofs);
                }

                this._rootBufferDirty = true;
              }

              bindTexture(binding, value, index) {
                this._descriptorSet.bindTexture(binding, value, index || 0);
              }

              bindSampler(binding, value, index) {
                this._descriptorSet.bindSampler(binding, value, index || 0);
              }

              setDynamicState(state, value) {
                const ds = this._dynamics[state];

                if (ds && ds.value === value) {
                  return;
                }

                ds.value = value;
                ds.dirty = true;
              }

              overridePipelineStates(original, overrides) {
                console.warn('base pass cannot override states, please use pass instance instead.');
              }

              update() {
                if (this._rootBufferDirty && this._rootBuffer) {
                  this._rootBuffer.update(this._rootBlock);

                  this._rootBufferDirty = false;
                }

                this._descriptorSet.update();
              }

              destroy() {
                for (let i = 0; i < this._shaderInfo.blocks.length; i++) {
                  const u = this._shaderInfo.blocks[i];

                  this._buffers[u.binding].destroy();
                }

                this._buffers = [];

                if (this._rootBuffer) {
                  this._rootBuffer.destroy();

                  this._rootBlock = null;
                }

                this._descriptorSet = null;

                this._rs.destroy();

                this._dss.destroy();

                this._bs.destroy();

                if (this._handle) {
                  DSPool.free(PassPool.get(this._handle, PassView.DESCRIPTOR_SET));
                  PassPool.free(this._handle);
                  this._handle = NULL_HANDLE;
                }
              }

              resetUniform(name) {
                const handle = this.getHandle(name);

                if (!handle) {
                  return;
                }

                const type = Pass.getTypeFromHandle(handle);
                const binding = Pass.getBindingFromHandle(handle);
                const ofs = Pass.getOffsetFromHandle(handle);
                const block = this._blocks[binding];
                const info = this._properties[name];
                const value = info && info.value || getDefaultFromType(type);
                type2writer[type](block, value, ofs);
                this._rootBufferDirty = true;
              }

              resetTexture(name, index) {
                const handle = this.getHandle(name);

                if (!handle) {
                  return;
                }

                const type = Pass.getTypeFromHandle(handle);
                const binding = Pass.getBindingFromHandle(handle);
                const info = this._properties[name];
                const value = info && info.value;
                const texName = value ? `${value}-texture` : getDefaultFromType(type);
                const textureBase = builtinResMgr.get(texName);
                const texture = textureBase && textureBase.getGFXTexture();
                const samplerHash = info && info.samplerHash !== undefined ? info.samplerHash : textureBase && textureBase.getSamplerHash();
                const sampler = samplerLib.getSampler(this._device, samplerHash);

                this._descriptorSet.bindSampler(binding, sampler, index);

                this._descriptorSet.bindTexture(binding, texture, index);
              }

              resetUBOs() {
                for (let i = 0; i < this._shaderInfo.blocks.length; i++) {
                  const u = this._shaderInfo.blocks[i];
                  const block = this._blocks[u.binding];
                  let ofs = 0;

                  for (let j = 0; j < u.members.length; j++) {
                    const cur = u.members[j];
                    const info = this._properties[cur.name];
                    const givenDefault = info && info.value;
                    const value = givenDefault || getDefaultFromType(cur.type);
                    const size = (GetTypeSize(cur.type) >> 2) * cur.count;

                    for (let k = 0; k + value.length <= size; k += value.length) {
                      block.set(value, ofs + k);
                    }

                    ofs += size;
                  }
                }

                this._rootBufferDirty = true;
              }

              resetTextures() {
                for (let i = 0; i < this._shaderInfo.samplerTextures.length; i++) {
                  const u = this._shaderInfo.samplerTextures[i];

                  for (let j = 0; j < u.count; j++) {
                    this.resetTexture(u.name, j);
                  }
                }
              }

              tryCompile() {
                const {
                  pipeline
                } = this._root;

                if (!pipeline) {
                  return false;
                }

                this._syncBatchingScheme();

                this._hShaderDefault = programLib.getGFXShader(this._device, this._programName, this._defines, pipeline);

                if (!this._hShaderDefault) {
                  console.warn(`create shader ${this._programName} failed`);
                  return false;
                }

                PassPool.set(this._handle, PassView.PIPELINE_LAYOUT, programLib.getTemplateInfo(this._programName).hPipelineLayout);
                PassPool.set(this._handle, PassView.HASH, Pass.getPassHash(this, this._hShaderDefault));
                return true;
              }

              getShaderVariant(patches = null) {
                if (!this._hShaderDefault && !this.tryCompile()) {
                  console.warn('pass resources incomplete');
                  return NULL_HANDLE;
                }

                if (!patches) {
                  return this._hShaderDefault;
                }

                const {
                  pipeline
                } = this._root;

                for (let i = 0; i < patches.length; i++) {
                  const patch = patches[i];
                  this._defines[patch.name] = patch.value;
                }

                const hShader = programLib.getGFXShader(this._device, this._programName, this._defines, pipeline);

                for (let i = 0; i < patches.length; i++) {
                  const patch = patches[i];
                  delete this._defines[patch.name];
                }

                return hShader;
              }

              beginChangeStatesSilently() {}

              endChangeStatesSilently() {}

              _doInit(info, copyDefines = false) {
                const handle = this._handle = PassPool.alloc();
                PassPool.set(handle, PassView.PRIORITY, RenderPriority.DEFAULT);
                PassPool.set(handle, PassView.STAGE, RenderPassStage.DEFAULT);
                PassPool.set(handle, PassView.PHASE, getPhaseID('default'));
                PassPool.set(handle, PassView.PRIMITIVE, PrimitiveMode.TRIANGLE_LIST);
                PassPool.set(handle, PassView.RASTERIZER_STATE, this._rs.handle);
                PassPool.set(handle, PassView.DEPTH_STENCIL_STATE, this._dss.handle);
                PassPool.set(handle, PassView.BLEND_STATE, this._bs.handle);
                this._passIndex = info.passIndex;
                this._propertyIndex = info.propertyIndex !== undefined ? info.propertyIndex : info.passIndex;
                this._programName = info.program;
                this._defines = copyDefines ? { ...info.defines
                } : info.defines;
                this._shaderInfo = programLib.getTemplate(info.program);
                this._properties = info.properties || this._properties;
                const device = this._device;
                Pass.fillPipelineInfo(this, info);

                if (info.stateOverrides) {
                  Pass.fillPipelineInfo(this, info.stateOverrides);
                }

                _dsInfo.layout = programLib.getDescriptorSetLayout(this._device, info.program);
                const dsHandle = DSPool.alloc(this._device, _dsInfo);
                PassPool.set(this._handle, PassView.DESCRIPTOR_SET, dsHandle);
                this._descriptorSet = DSPool.get(dsHandle);
                const blocks = this._shaderInfo.blocks;
                const tmplInfo = programLib.getTemplateInfo(info.program);
                const {
                  blockSizes,
                  handleMap
                } = tmplInfo;
                const alignment = device.capabilities.uboOffsetAlignment;
                const startOffsets = [];
                let lastSize = 0;
                let lastOffset = 0;

                for (let i = 0; i < blocks.length; i++) {
                  const size = blockSizes[i];
                  startOffsets.push(lastOffset);
                  lastOffset += Math.ceil(size / alignment) * alignment;
                  lastSize = size;
                }

                const totalSize = startOffsets[startOffsets.length - 1] + lastSize;

                if (totalSize) {
                  _bufferInfo.size = Math.ceil(totalSize / 16) * 16;
                  this._rootBuffer = device.createBuffer(_bufferInfo);
                  this._rootBlock = new ArrayBuffer(totalSize);
                }

                for (let i = 0, count = 0; i < blocks.length; i++) {
                  const {
                    binding
                  } = blocks[i];
                  const size = blockSizes[i];
                  _bufferViewInfo.buffer = this._rootBuffer;
                  _bufferViewInfo.offset = startOffsets[count++];
                  _bufferViewInfo.range = Math.ceil(size / 16) * 16;
                  const bufferView = this._buffers[binding] = device.createBuffer(_bufferViewInfo);
                  this._blocks[binding] = new Float32Array(this._rootBlock, _bufferViewInfo.offset, size / Float32Array.BYTES_PER_ELEMENT);

                  this._descriptorSet.bindBuffer(binding, bufferView);
                }

                const directHandleMap = this._propertyHandleMap = handleMap;
                const indirectHandleMap = {};

                for (const name in this._properties) {
                  const prop = this._properties[name];

                  if (!prop.handleInfo) {
                    continue;
                  }

                  indirectHandleMap[name] = this.getHandle.apply(this, prop.handleInfo);
                }

                Object.assign(directHandleMap, indirectHandleMap);
              }

              _syncBatchingScheme() {
                if (this._defines.USE_INSTANCING) {
                  if (this._device.hasFeature(Feature.INSTANCED_ARRAYS)) {
                    PassPool.set(this._handle, PassView.BATCHING_SCHEME, BatchingSchemes.INSTANCING);
                  } else {
                    this._defines.USE_INSTANCING = false;
                    PassPool.set(this._handle, PassView.BATCHING_SCHEME, 0);
                  }
                } else if (this._defines.USE_BATCHING) {
                  PassPool.set(this._handle, PassView.BATCHING_SCHEME, BatchingSchemes.VB_MERGING);
                } else {
                  PassPool.set(this._handle, PassView.BATCHING_SCHEME, 0);
                }
              }

              _destroyHandle() {
                if (this._handle) {
                  PassPool.free(this._handle);
                  this._handle = NULL_HANDLE;
                }
              }

              _initPassFromTarget(target, dss, bs, hashFactor) {
                PassPool.set(this.handle, PassView.PRIORITY, target.priority);
                PassPool.set(this.handle, PassView.STAGE, target.stage);
                PassPool.set(this.handle, PassView.PHASE, target.phase);
                PassPool.set(this.handle, PassView.BATCHING_SCHEME, target.batchingScheme);
                PassPool.set(this.handle, PassView.PRIMITIVE, target.primitive);
                PassPool.set(this.handle, PassView.DYNAMIC_STATES, target.dynamicStates);
                this._descriptorSet = target.descriptorSet;
                PassPool.set(this.handle, PassView.DESCRIPTOR_SET, PassPool.get(target.handle, PassView.DESCRIPTOR_SET));
                this._bs = bs;
                PassPool.set(this.handle, PassView.BLEND_STATE, bs.handle);
                this._rs = target.rasterizerState;
                PassPool.set(this.handle, PassView.RASTERIZER_STATE, PassPool.get(target.handle, PassView.RASTERIZER_STATE));
                this._dss = dss;
                PassPool.set(this.handle, PassView.DEPTH_STENCIL_STATE, dss.handle);
                this._passIndex = target.passIndex;
                this._propertyIndex = target.propertyIndex;
                this._programName = target.program;
                this._defines = target.defines;
                this._shaderInfo = target._shaderInfo;
                this._properties = target._properties;
                this._blocks = target._blocks;
                this._dynamics = target._dynamics;
                this._hShaderDefault = target._hShaderDefault;
                PassPool.set(this._handle, PassView.PIPELINE_LAYOUT, programLib.getTemplateInfo(this._programName).hPipelineLayout);
                const hash = PassPool.get(target.handle, PassView.HASH);
                PassPool.set(this._handle, PassView.HASH, hash ^ hashFactor);
              }

              get root() {
                return this._root;
              }

              get device() {
                return this._device;
              }

              get shaderInfo() {
                return this._shaderInfo;
              }

              get localSetLayout() {
                return programLib.getDescriptorSetLayout(this._device, this._programName, true);
              }

              get program() {
                return this._programName;
              }

              get properties() {
                return this._properties;
              }

              get defines() {
                return this._defines;
              }

              get passIndex() {
                return this._passIndex;
              }

              get propertyIndex() {
                return this._propertyIndex;
              }

              get dynamics() {
                return this._dynamics;
              }

              get blocks() {
                return this._blocks;
              }

              get handle() {
                return this._handle;
              }

              get priority() {
                return PassPool.get(this._handle, PassView.PRIORITY);
              }

              get primitive() {
                return PassPool.get(this._handle, PassView.PRIMITIVE);
              }

              get stage() {
                return PassPool.get(this._handle, PassView.STAGE);
              }

              get phase() {
                return PassPool.get(this._handle, PassView.PHASE);
              }

              get rasterizerState() {
                return this._rs;
              }

              get depthStencilState() {
                return this._dss;
              }

              get blendState() {
                return this._bs;
              }

              get dynamicStates() {
                return PassPool.get(this._handle, PassView.DYNAMIC_STATES);
              }

              get batchingScheme() {
                return PassPool.get(this._handle, PassView.BATCHING_SCHEME);
              }

              get descriptorSet() {
                return this._descriptorSet;
              }

              get hash() {
                return PassPool.get(this._handle, PassView.HASH);
              }

              get rootBufferDirty() {
                return this._rootBufferDirty;
              }

            } exports('db', Pass);
            Pass.PropertyType = PropertyType;
            Pass.getPropertyTypeFromHandle = getPropertyTypeFromHandle;
            Pass.getTypeFromHandle = getTypeFromHandle;
            Pass.getBindingFromHandle = getBindingFromHandle;
            Pass.getOffsetFromHandle = getOffsetFromHandle;

            function serializeBlendState(bs) {
              let res = `,bs,${bs.isA2C}`;

              for (const t of bs.targets) {
                res += `,bt,${t.blend},${t.blendEq},${t.blendAlphaEq},${t.blendColorMask}`;
                res += `,${t.blendSrc},${t.blendDst},${t.blendSrcAlpha},${t.blendDstAlpha}`;
              }

              return res;
            }

            function serializeRasterizerState(rs) {
              return `,rs,${rs.cullMode},${rs.depthBias},${rs.isFrontFaceCCW}`;
            }

            function serializeDepthStencilState(dss) {
              let res = `,dss,${dss.depthTest},${dss.depthWrite},${dss.depthFunc}`;
              res += `,${dss.stencilTestFront},${dss.stencilFuncFront},${dss.stencilRefFront},${dss.stencilReadMaskFront}`;
              res += `,${dss.stencilFailOpFront},${dss.stencilZFailOpFront},${dss.stencilPassOpFront},${dss.stencilWriteMaskFront}`;
              res += `,${dss.stencilTestBack},${dss.stencilFuncBack},${dss.stencilRefBack},${dss.stencilReadMaskBack}`;
              res += `,${dss.stencilFailOpBack},${dss.stencilZFailOpBack},${dss.stencilPassOpBack},${dss.stencilWriteMaskBack}`;
              return res;
            }

            removeProperty(RenderScene.prototype, 'RenderScene.prototype', [{
              name: 'raycastUI2DNode'
            }, {
              name: 'raycastUINode'
            }]);
            removeProperty(RenderScene.prototype, 'RenderScene.prototype', [{
              name: 'raycastAll',
              suggest: 'using intersect.rayModel in geometry'
            }, {
              name: 'raycastAllModels',
              suggest: 'using intersect.rayModel in geometry'
            }, {
              name: 'raycastSingleModel',
              suggest: 'using intersect.rayModel in geometry'
            }, {
              name: 'raycastAllCanvas',
              suggest: 'using intersect.rayAABB in geometry'
            }, {
              name: 'rayResultCanvas'
            }, {
              name: 'rayResultModels'
            }, {
              name: 'rayResultAll'
            }, {
              name: 'rayResultSingleModel'
            }]);
            const CameraVisFlags = {};
            removeProperty(CameraVisFlags, 'CameraVisFlags', [{
              name: 'GENERAL'
            }]);
            replaceProperty(CameraVisFlags, 'CameraVisFlags', [{
              name: 'PROFILER',
              newName: 'PROFILER',
              target: Layers.BitMask,
              targetName: 'PROFILER'
            }, {
              name: 'GIZMOS',
              newName: 'GIZMOS',
              target: Layers.BitMask,
              targetName: 'GIZMOS'
            }, {
              name: 'EDITOR',
              newName: 'EDITOR',
              target: Layers.BitMask,
              targetName: 'EDITOR'
            }, {
              name: 'UI',
              newName: 'UI',
              target: Layers.BitMask,
              targetName: 'UI_3D'
            }, {
              name: 'UI2D',
              newName: 'UI2D',
              target: Layers.BitMask,
              targetName: 'UI_2D'
            }]);
            legacyCC.CameraVisFlags = CameraVisFlags;
            const VisibilityFlags = {};
            removeProperty(VisibilityFlags, 'VisibilityFlags', [{
              name: 'GENERAL'
            }]);
            replaceProperty(VisibilityFlags, 'VisibilityFlags', [{
              name: 'ALWALS',
              newName: 'ALWALS',
              target: Layers.Enum,
              targetName: 'ALWALS'
            }, {
              name: 'PROFILER',
              newName: 'PROFILER',
              target: Layers.Enum,
              targetName: 'PROFILER'
            }, {
              name: 'GIZMOS',
              newName: 'GIZMOS',
              target: Layers.Enum,
              targetName: 'GIZMOS'
            }, {
              name: 'EDITOR',
              newName: 'EDITOR',
              target: Layers.Enum,
              targetName: 'EDITOR'
            }, {
              name: 'UI',
              newName: 'UI',
              target: Layers.Enum,
              targetName: 'UI_3D'
            }, {
              name: 'UI2D',
              newName: 'UI2D',
              target: Layers.Enum,
              targetName: 'UI_2D'
            }]);
            legacyCC.VisibilityFlags = VisibilityFlags;
            replaceProperty(Pass.prototype, 'Pass.prototype', [{
              name: 'getBindingTypeFromHandle',
              newName: 'getDescriptorTypeFromHandle'
            }]);
            removeProperty(Camera.prototype, 'Camera.prototype', [{
              name: 'getSplitFrustum'
            }]);

            function ColorTemperatureToRGB(rgb, kelvin) {
              if (kelvin < 1000.0) {
                kelvin = 1000.0;
              } else if (kelvin > 15000.0) {
                kelvin = 15000.0;
              }

              const kSqr = kelvin * kelvin;
              const u = (0.860117757 + 1.54118254e-4 * kelvin + 1.28641212e-7 * kSqr) / (1.0 + 8.42420235e-4 * kelvin + 7.08145163e-7 * kSqr);
              const v = (0.317398726 + 4.22806245e-5 * kelvin + 4.20481691e-8 * kSqr) / (1.0 - 2.89741816e-5 * kelvin + 1.61456053e-7 * kSqr);
              const d = 2.0 * u - 8.0 * v + 4.0;
              const x = 3.0 * u / d;
              const y = 2.0 * v / d;
              const z = 1.0 - x - y;
              const X = 1.0 / y * x;
              const Z = 1.0 / y * z;
              rgb.x = 3.2404542 * X + -1.5371385 + -0.4985314 * Z;
              rgb.y = -0.9692660 * X + 1.8760108 + 0.0415560 * Z;
              rgb.z = 0.0556434 * X + -0.2040259 + 1.0572252 * Z;
            }
            let LightType;

            (function (LightType) {
              LightType[LightType["DIRECTIONAL"] = 0] = "DIRECTIONAL";
              LightType[LightType["SPHERE"] = 1] = "SPHERE";
              LightType[LightType["SPOT"] = 2] = "SPOT";
              LightType[LightType["UNKNOWN"] = 3] = "UNKNOWN";
            })(LightType || (LightType = exports('c5', {})));

            const nt2lm = exports('cd', size => 4 * Math.PI * Math.PI * size * size);
            class Light {
              constructor() {
                this._baked = false;
                this._color = new Vec3(1, 1, 1);
                this._colorTemp = 6550.0;
                this._colorTempRGB = new Vec3(1, 1, 1);
                this._scene = null;
                this._node = null;
                this._name = null;
                this._handle = NULL_HANDLE;
              }

              get baked() {
                return this._baked;
              }

              set baked(val) {
                this._baked = val;
              }

              set color(color) {
                this._color.set(color);

                LightPool.setVec3(this._handle, LightView.COLOR, color);
              }

              get color() {
                return this._color;
              }

              set useColorTemperature(enable) {
                LightPool.set(this._handle, LightView.USE_COLOR_TEMPERATURE, enable ? 1 : 0);
              }

              get useColorTemperature() {
                return LightPool.get(this._handle, LightView.USE_COLOR_TEMPERATURE) === 1;
              }

              set colorTemperature(val) {
                this._colorTemp = val;
                ColorTemperatureToRGB(this._colorTempRGB, this._colorTemp);
                LightPool.setVec3(this._handle, LightView.COLOR_TEMPERATURE_RGB, this._colorTempRGB);
              }

              get colorTemperature() {
                return this._colorTemp;
              }

              get colorTemperatureRGB() {
                return this._colorTempRGB;
              }

              set node(n) {
                this._node = n;

                if (this._node) {
                  this._node.hasChangedFlags |= TransformBit.ROTATION;
                  LightPool.set(this._handle, LightView.NODE, this._node.handle);
                }
              }

              get node() {
                return this._node;
              }

              get type() {
                return LightPool.get(this._handle, LightView.TYPE);
              }

              get name() {
                return this._name;
              }

              set name(n) {
                this._name = n;
              }

              get scene() {
                return this._scene;
              }

              get handle() {
                return this._handle;
              }

              initialize() {
                this._handle = LightPool.alloc();
                LightPool.setVec3(this._handle, LightView.COLOR, this._color);
                LightPool.setVec3(this._handle, LightView.COLOR_TEMPERATURE_RGB, this._colorTempRGB);
                LightPool.set(this._handle, LightView.TYPE, LightType.UNKNOWN);
              }

              attachToScene(scene) {
                this._scene = scene;
              }

              detachFromScene() {
                this._scene = null;
              }

              destroy() {
                this._name = null;
                this._node = null;

                if (this._handle) {
                  LightPool.free(this._handle);
                  this._handle = NULL_HANDLE;
                }
              }

              update() {}

            } exports('c9', Light);

            const _forward = new Vec3(0, 0, -1);

            const _v3 = new Vec3();

            class DirectionalLight extends Light {
              set direction(dir) {
                Vec3.normalize(this._dir, dir);
                LightPool.setVec3(this._handle, LightView.DIRECTION, this._dir);
              }

              get direction() {
                return this._dir;
              }

              set illuminance(illum) {
                LightPool.set(this._handle, LightView.ILLUMINANCE, illum);
              }

              get illuminance() {
                return LightPool.get(this._handle, LightView.ILLUMINANCE);
              }

              constructor() {
                super();
                this._dir = new Vec3(1.0, -1.0, -1.0);
              }

              initialize() {
                super.initialize();
                LightPool.set(this._handle, LightView.ILLUMINANCE, Ambient.SUN_ILLUM);
                LightPool.setVec3(this._handle, LightView.DIRECTION, this._dir);
                LightPool.set(this._handle, LightView.TYPE, LightType.DIRECTIONAL);
              }

              update() {
                if (this._node && this._node.hasChangedFlags) {
                  this.direction = Vec3.transformQuat(_v3, _forward, this._node.worldRotation);
                }
              }

            } exports('cc', DirectionalLight);

            function deepFlatten(strList, array) {
              for (const item of array) {
                if (Array.isArray(item)) {
                  deepFlatten(strList, item);
                } else {
                    strList.push(item);
                  }
              }
            }

            function flattenCodeArray(array) {
              const separator =  '';
              const strList = [];
              deepFlatten(strList, array);
              return strList.join(separator);
            }

            const Destroyed$1 = CCObject.Flags.Destroyed;
            const PersistentMask$1 = CCObject.Flags.PersistentMask;
            const DEFAULT = `${DELIMETER}default`;
            const IDENTIFIER_RE$1 = CCClass.IDENTIFIER_RE;
            const VAR = 'var ';
            const LOCAL_OBJ = 'o';
            const LOCAL_TEMP_OBJ = 't';
            const LOCAL_ARRAY = 'a';
            const LINE_INDEX_OF_NEW_OBJ = 0;
            const DEFAULT_MODULE_CACHE = {
              'cc.ClickEvent': false,
              'cc.PrefabInfo': false
            };
            const escapeForJS$1 = CCClass.escapeForJS;

            class Declaration {
              constructor(varName, expression) {
                this.varName = void 0;
                this.expression = void 0;
                this.varName = varName;
                this.expression = expression;
              }

              toString() {
                return `${VAR + this.varName}=${this.expression};`;
              }

            }

            function mergeDeclaration(statement, expression) {
              if (expression instanceof Declaration) {
                return new Declaration(expression.varName, statement + expression.expression);
              } else {
                return statement + expression;
              }
            }

            function writeAssignment(codeArray, statement, expression) {
              if (Array.isArray(expression)) {
                expression[0] = mergeDeclaration(statement, expression[0]);
                codeArray.push(expression);
              } else {
                codeArray.push(`${mergeDeclaration(statement, expression)};`);
              }
            }

            class Assignments {
              constructor(targetExpression) {
                this._exps = void 0;
                this._targetExp = void 0;
                this._exps = [];
                this._targetExp = targetExpression;
              }

              append(key, expression) {
                this._exps.push([key, expression]);
              }

              writeCode(codeArray) {
                let targetVar;

                if (this._exps.length > 1) {
                  codeArray.push(`${LOCAL_TEMP_OBJ}=${this._targetExp};`);
                  targetVar = LOCAL_TEMP_OBJ;
                } else if (this._exps.length === 1) {
                  targetVar = this._targetExp;
                } else {
                  return;
                }

                for (let i = 0; i < this._exps.length; i++) {
                  const pair = this._exps[i];
                  writeAssignment(codeArray, `${targetVar + getPropAccessor(pair[0])}=`, pair[1]);
                }
              }

            }

            Assignments.pool = void 0;
            Assignments.pool = new Pool(obj => {
              obj._exps.length = 0;
              obj._targetExp = null;
            }, 1);

            Assignments.pool.get = function (targetExpression) {
              const cache = this._get() || new Assignments();
              cache._targetExp = targetExpression;
              return cache;
            };

            function getPropAccessor(key) {
              return IDENTIFIER_RE$1.test(key) ? `.${key}` : `[${escapeForJS$1(key)}]`;
            }

            class Parser {
              constructor(obj, parent) {
                this.parent = void 0;
                this.objsToClear_iN$t = void 0;
                this.codeArray = void 0;
                this.objs = void 0;
                this.funcs = void 0;
                this.funcModuleCache = void 0;
                this.globalVariables = void 0;
                this.globalVariableId = void 0;
                this.localVariableId = void 0;
                this.result = void 0;
                this.parent = parent;
                this.objsToClear_iN$t = [];
                this.codeArray = [];
                this.objs = [];
                this.funcs = [];
                this.funcModuleCache = createMap();
                mixin(this.funcModuleCache, DEFAULT_MODULE_CACHE);
                this.globalVariables = [];
                this.globalVariableId = 0;
                this.localVariableId = 0;
                this.codeArray.push(`${VAR + LOCAL_OBJ},${LOCAL_TEMP_OBJ};`, 'if(R){', `${LOCAL_OBJ}=R;`, '}else{', `${LOCAL_OBJ}=R=new ${this.getFuncModule(obj.constructor, true)}();`, '}');
                obj._iN$t = {
                  globalVar: 'R'
                };
                this.objsToClear_iN$t.push(obj);
                this.enumerateObject(this.codeArray, obj);
                let globalVariablesDeclaration;

                if (this.globalVariables.length > 0) {
                  globalVariablesDeclaration = `${VAR + this.globalVariables.join(',')};`;
                }

                const code = flattenCodeArray(['return (function(R){', globalVariablesDeclaration || [], this.codeArray, 'return o;', '})']);
                this.result = Function('O', 'F', code)(this.objs, this.funcs);

                for (let i = 0, len = this.objsToClear_iN$t.length; i < len; ++i) {
                  this.objsToClear_iN$t[i]._iN$t = null;
                }

                this.objsToClear_iN$t.length = 0;
              }

              getFuncModule(func, usedInNew) {
                const clsName = getClassName(func);

                if (clsName) {
                  const cache = this.funcModuleCache[clsName];

                  if (cache) {
                    return cache;
                  } else if (cache === undefined) {
                    let clsNameIsModule = clsName.indexOf('.') !== -1;

                    if (clsNameIsModule) {
                      try {
                        clsNameIsModule = func === Function(`return ${clsName}`)();

                        if (clsNameIsModule) {
                          this.funcModuleCache[clsName] = clsName;
                          return clsName;
                        }
                      } catch (e) {}
                    }
                  }
                }

                let index = this.funcs.indexOf(func);

                if (index < 0) {
                  index = this.funcs.length;
                  this.funcs.push(func);
                }

                let res = `F[${index}]`;

                if (usedInNew) {
                  res = `(${res})`;
                }

                this.funcModuleCache[clsName] = res;
                return res;
              }

              getObjRef(obj) {
                let index = this.objs.indexOf(obj);

                if (index < 0) {
                  index = this.objs.length;
                  this.objs.push(obj);
                }

                return `O[${index}]`;
              }

              setValueType(codeArray, defaultValue, srcValue, targetExpression) {
                const assignments = Assignments.pool.get(targetExpression);
                let fastDefinedProps = defaultValue.constructor.__props__;

                if (!fastDefinedProps) {
                  fastDefinedProps = Object.keys(defaultValue);
                }

                for (let i = 0; i < fastDefinedProps.length; i++) {
                  const propName = fastDefinedProps[i];
                  const prop = srcValue[propName];

                  if (defaultValue[propName] === prop) {
                    continue;
                  }

                  const expression = this.enumerateField(srcValue, propName, prop);
                  assignments.append(propName, expression);
                }

                assignments.writeCode(codeArray);
                Assignments.pool.put(assignments);
              }

              enumerateCCClass(codeArray, obj, klass) {
                const props = klass.__values__;
                const attrs = getClassAttrs(klass);

                for (let p = 0; p < props.length; p++) {
                  const key = props[p];
                  const val = obj[key];
                  let defaultValue = attrs[key + DEFAULT];

                  if (equalsToDefault(defaultValue, val)) {
                    continue;
                  }

                  if (typeof val === 'object' && val instanceof legacyCC.ValueType) {
                    defaultValue = CCClass.getDefault(defaultValue);

                    if (defaultValue && defaultValue.constructor === val.constructor) {
                      const targetExpression = LOCAL_OBJ + getPropAccessor(key);
                      this.setValueType(codeArray, defaultValue, val, targetExpression);
                      continue;
                    }
                  }

                  this.setObjProp(codeArray, obj, key, val);
                }
              }

              instantiateArray(value) {
                if (value.length === 0) {
                  return '[]';
                }

                const arrayVar = LOCAL_ARRAY + ++this.localVariableId;
                const declaration = new Declaration(arrayVar, `new Array(${value.length})`);
                const codeArray = [declaration];
                value._iN$t = {
                  globalVar: '',
                  source: codeArray
                };
                this.objsToClear_iN$t.push(value);

                for (let i = 0; i < value.length; ++i) {
                  const statement = `${arrayVar}[${i}]=`;
                  const expression = this.enumerateField(value, i, value[i]);
                  writeAssignment(codeArray, statement, expression);
                }

                return codeArray;
              }

              instantiateTypedArray(value) {
                const type = value.constructor.name;

                if (value.length === 0) {
                  return `new ${type}`;
                }

                const arrayVar = LOCAL_ARRAY + ++this.localVariableId;
                const declaration = new Declaration(arrayVar, `new ${type}(${value.length})`);
                const codeArray = [declaration];
                value._iN$t = {
                  globalVar: '',
                  source: codeArray
                };
                this.objsToClear_iN$t.push(value);

                for (let i = 0; i < value.length; ++i) {
                  if (value[i] !== 0) {
                    const statement = `${arrayVar}[${i}]=`;
                    writeAssignment(codeArray, statement, value[i]);
                  }
                }

                return codeArray;
              }

              enumerateField(obj, key, value) {
                if (typeof value === 'object' && value) {
                  const _iN$t = value._iN$t;

                  if (_iN$t) {
                    let globalVar = _iN$t.globalVar;

                    if (!globalVar) {
                      globalVar = _iN$t.globalVar = `v${++this.globalVariableId}`;
                      this.globalVariables.push(globalVar);
                      const line = _iN$t.source[LINE_INDEX_OF_NEW_OBJ];
                      _iN$t.source[LINE_INDEX_OF_NEW_OBJ] = mergeDeclaration(`${globalVar}=`, line);
                    }

                    return globalVar;
                  } else if (ArrayBuffer.isView(value)) {
                    return this.instantiateTypedArray(value);
                  } else if (Array.isArray(value)) {
                    return this.instantiateArray(value);
                  } else {
                    return this.instantiateObj(value);
                  }
                } else if (typeof value === 'function') {
                  return this.getFuncModule(value);
                } else if (typeof value === 'string') {
                  return escapeForJS$1(value);
                } else {
                  if (key === '_objFlags' && obj instanceof CCObject) {
                    value &= PersistentMask$1;
                  }

                  return value;
                }
              }

              setObjProp(codeArray, obj, key, value) {
                const statement = `${LOCAL_OBJ + getPropAccessor(key)}=`;
                const expression = this.enumerateField(obj, key, value);
                writeAssignment(codeArray, statement, expression);
              }

              enumerateObject(codeArray, obj) {
                const klass = obj.constructor;

                if (legacyCC.Class._isCCClass(klass)) {
                  this.enumerateCCClass(codeArray, obj, klass);
                } else {
                  for (const key in obj) {
                    if (!obj.hasOwnProperty(key) || key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95 && key !== '__type__') {
                      continue;
                    }

                    const value = obj[key];

                    if (typeof value === 'object' && value && value === obj._iN$t) {
                      continue;
                    }

                    this.setObjProp(codeArray, obj, key, value);
                  }
                }
              }

              instantiateObj(obj) {
                if (obj instanceof legacyCC.ValueType) {
                  return CCClass.getNewValueTypeCode(obj);
                }

                if (obj instanceof legacyCC.Asset) {
                  return this.getObjRef(obj);
                }

                if (obj._objFlags & Destroyed$1) {
                  return null;
                }

                let createCode;
                const ctor = obj.constructor;

                if (legacyCC.Class._isCCClass(ctor)) {
                  if (this.parent) {
                    if (this.parent instanceof legacyCC.Component) {
                      if (obj instanceof legacyCC._BaseNode || obj instanceof legacyCC.Component) {
                        return this.getObjRef(obj);
                      }
                    } else if (this.parent instanceof legacyCC._BaseNode) {
                      if (obj instanceof legacyCC._BaseNode) {
                        if (!obj.isChildOf(this.parent)) {
                          return this.getObjRef(obj);
                        }
                      } else if (obj instanceof legacyCC.Component) {
                        if (!obj.node.isChildOf(this.parent)) {
                          return this.getObjRef(obj);
                        }
                      }
                    }
                  }

                  createCode = new Declaration(LOCAL_OBJ, `new ${this.getFuncModule(ctor, true)}()`);
                } else if (ctor === Object) {
                  createCode = new Declaration(LOCAL_OBJ, '{}');
                } else if (!ctor) {
                  createCode = new Declaration(LOCAL_OBJ, 'Object.create(null)');
                } else {
                  return this.getObjRef(obj);
                }

                const codeArray = [createCode];
                obj._iN$t = {
                  globalVar: '',
                  source: codeArray
                };
                this.objsToClear_iN$t.push(obj);
                this.enumerateObject(codeArray, obj);
                return ['(function(){', codeArray, 'return o;})();'];
              }

            }

            function equalsToDefault(def, value) {
              if (typeof def === 'function') {
                try {
                  def = def();
                } catch (e) {
                  return false;
                }
              }

              if (def === value) {
                return true;
              }

              if (def && value && typeof def === 'object' && typeof value === 'object' && def.constructor === value.constructor) {
                if (def instanceof legacyCC.ValueType) {
                  if (def.equals(value)) {
                    return true;
                  }
                } else if (Array.isArray(def)) {
                  return def.length === 0 && value.length === 0;
                } else if (def.constructor === Object) {
                  return isEmptyObject(def) && isEmptyObject(value);
                }
              }

              return false;
            }
            function compile(node) {
              const root = node instanceof legacyCC._BaseNode && node;
              const parser = new Parser(node, root);
              return parser.result;
            }

            class NodeUIProperties {
              get uiTransformComp() {
                if (!this._uiTransformComp) {
                  this._uiTransformComp = this._node.getComponent('cc.UITransform');
                }

                return this._uiTransformComp;
              }

              set uiTransformComp(value) {
                this._uiTransformComp = value;
              }

              get uiComp() {
                return this._uiComp;
              }

              set uiComp(comp) {
                if (this._uiComp && comp) {
                  warnID(12002);
                  return;
                }

                this._uiComp = comp;
              }

              constructor(node) {
                this._uiComp = null;
                this.opacity = 1;
                this.localOpacity = 1;
                this._uiTransformComp = null;
                this._node = void 0;
                this._node = node;
              }

            }

            let SystemEventType;

            (function (SystemEventType) {
              SystemEventType["TOUCH_START"] = "touch-start";
              SystemEventType["TOUCH_MOVE"] = "touch-move";
              SystemEventType["TOUCH_END"] = "touch-end";
              SystemEventType["TOUCH_CANCEL"] = "touch-cancel";
              SystemEventType["MOUSE_DOWN"] = "mouse-down";
              SystemEventType["MOUSE_MOVE"] = "mouse-move";
              SystemEventType["MOUSE_UP"] = "mouse-up";
              SystemEventType["MOUSE_WHEEL"] = "mouse-wheel";
              SystemEventType["MOUSE_ENTER"] = "mouse-enter";
              SystemEventType["MOUSE_LEAVE"] = "mouse-leave";
              SystemEventType["KEY_DOWN"] = "keydown";
              SystemEventType["KEY_UP"] = "keyup";
              SystemEventType["DEVICEMOTION"] = "devicemotion";
              SystemEventType["TRANSFORM_CHANGED"] = "transform-changed";
              SystemEventType["SCENE_CHANGED_FOR_PERSISTS"] = "scene-changed-for-persists";
              SystemEventType["SIZE_CHANGED"] = "size-changed";
              SystemEventType["ANCHOR_CHANGED"] = "anchor-changed";
              SystemEventType["COLOR_CHANGED"] = "color-changed";
              SystemEventType["CHILD_ADDED"] = "child-added";
              SystemEventType["CHILD_REMOVED"] = "child-removed";
              SystemEventType["PARENT_CHANGED"] = "parent-changed";
              SystemEventType["NODE_DESTROYED"] = "node-destroyed";
              SystemEventType["LAYER_CHANGED"] = "layer-changed";
              SystemEventType["SIBLING_ORDER_CHANGED"] = "sibling-order-changed";
            })(SystemEventType || (SystemEventType = exports('cP', {})));

            ccenum(SystemEventType);
            legacyCC.SystemEventType = SystemEventType;

            class EventListener {
              static create(argObj) {
                assertID(argObj && argObj.event, 1900);
                const listenerType = argObj.event;
                delete argObj.event;
                let listener = null;

                if (listenerType === legacyCC.EventListener.TOUCH_ONE_BY_ONE) {
                  listener = new TouchOneByOneEventListener();
                } else if (listenerType === legacyCC.EventListener.TOUCH_ALL_AT_ONCE) {
                  listener = new TouchAllAtOnceEventListener();
                } else if (listenerType === legacyCC.EventListener.MOUSE) {
                  listener = new MouseEventListener();
                } else if (listenerType === legacyCC.EventListener.KEYBOARD) {
                  listener = new KeyboardEventListener();
                } else if (listenerType === legacyCC.EventListener.ACCELERATION) {
                  listener = new AccelerationEventListener(argObj.callback);
                  delete argObj.callback;
                }

                if (listener) {
                  for (const key of Object.keys(argObj)) {
                    listener[key] = argObj[key];
                  }
                }

                return listener;
              }

              get onEvent() {
                return this._onEvent;
              }

              constructor(type, listenerID, callback) {
                this._cameraPriority = 0;
                this.owner = null;
                this.mask = null;
                this._previousIn = false;
                this._target = null;
                this._onEvent = void 0;
                this._type = void 0;
                this._listenerID = void 0;
                this._registered = false;
                this._fixedPriority = 0;
                this._node = null;
                this._paused = true;
                this._isEnabled = true;
                this._onEvent = callback;
                this._type = type || 0;
                this._listenerID = listenerID || '';
              }

              _setPaused(paused) {
                this._paused = paused;
              }

              _isPaused() {
                return this._paused;
              }

              _setRegistered(registered) {
                this._registered = registered;
              }

              _isRegistered() {
                return this._registered;
              }

              _getType() {
                return this._type;
              }

              _getListenerID() {
                return this._listenerID;
              }

              _setFixedPriority(fixedPriority) {
                this._fixedPriority = fixedPriority;
              }

              _getFixedPriority() {
                return this._fixedPriority;
              }

              _setSceneGraphPriority(node) {
                this._target = node;
                this._node = node;
              }

              _getSceneGraphPriority() {
                return this._node;
              }

              checkAvailable() {
                return this._onEvent !== null;
              }

              clone() {
                return null;
              }

              setEnabled(enabled) {
                this._isEnabled = enabled;
              }

              isEnabled() {
                return this._isEnabled;
              }

            }
            EventListener.UNKNOWN = 0;
            EventListener.TOUCH_ONE_BY_ONE = 1;
            EventListener.TOUCH_ALL_AT_ONCE = 2;
            EventListener.KEYBOARD = 3;
            EventListener.MOUSE = 4;
            EventListener.ACCELERATION = 6;
            EventListener.CUSTOM = 8;
            EventListener.ListenerID = {
              MOUSE: '__cc_mouse',
              TOUCH_ONE_BY_ONE: '__cc_touch_one_by_one',
              TOUCH_ALL_AT_ONCE: '__cc_touch_all_at_once',
              KEYBOARD: '__cc_keyboard',
              ACCELERATION: '__cc_acceleration'
            };
            const ListenerID = EventListener.ListenerID;
            class MouseEventListener extends EventListener {
              constructor() {
                super(EventListener.MOUSE, ListenerID.MOUSE, null);
                this.onMouseDown = null;
                this.onMouseUp = null;
                this.onMouseMove = null;
                this.onMouseScroll = null;

                this._onEvent = event => this._callback(event);
              }

              _callback(event) {
                switch (event.eventType) {
                  case SystemEventType.MOUSE_DOWN:
                    if (this.onMouseDown) {
                      this.onMouseDown(event);
                    }

                    break;

                  case SystemEventType.MOUSE_UP:
                    if (this.onMouseUp) {
                      this.onMouseUp(event);
                    }

                    break;

                  case SystemEventType.MOUSE_MOVE:
                    if (this.onMouseMove) {
                      this.onMouseMove(event);
                    }

                    break;

                  case SystemEventType.MOUSE_WHEEL:
                    if (this.onMouseScroll) {
                      this.onMouseScroll(event);
                    }

                    break;
                }
              }

              clone() {
                const eventListener = new MouseEventListener();
                eventListener.onMouseDown = this.onMouseDown;
                eventListener.onMouseUp = this.onMouseUp;
                eventListener.onMouseMove = this.onMouseMove;
                eventListener.onMouseScroll = this.onMouseScroll;
                return eventListener;
              }

              checkAvailable() {
                return true;
              }

            }
            class TouchOneByOneEventListener extends EventListener {
              constructor() {
                super(EventListener.TOUCH_ONE_BY_ONE, ListenerID.TOUCH_ONE_BY_ONE, null);
                this.swallowTouches = false;
                this.onTouchBegan = null;
                this.onTouchMoved = null;
                this.onTouchEnded = null;
                this.onTouchCancelled = null;
                this._claimedTouches = [];
              }

              setSwallowTouches(needSwallow) {
                this.swallowTouches = needSwallow;
              }

              isSwallowTouches() {
                return this.swallowTouches;
              }

              clone() {
                const eventListener = new TouchOneByOneEventListener();
                eventListener.onTouchBegan = this.onTouchBegan;
                eventListener.onTouchMoved = this.onTouchMoved;
                eventListener.onTouchEnded = this.onTouchEnded;
                eventListener.onTouchCancelled = this.onTouchCancelled;
                eventListener.swallowTouches = this.swallowTouches;
                return eventListener;
              }

              checkAvailable() {
                if (!this.onTouchBegan) {
                  logID(1801);
                  return false;
                }

                return true;
              }

            }
            class TouchAllAtOnceEventListener extends EventListener {
              constructor() {
                super(EventListener.TOUCH_ALL_AT_ONCE, ListenerID.TOUCH_ALL_AT_ONCE, null);
                this.onTouchesBegan = null;
                this.onTouchesMoved = null;
                this.onTouchesEnded = null;
                this.onTouchesCancelled = null;
              }

              clone() {
                const eventListener = new TouchAllAtOnceEventListener();
                eventListener.onTouchesBegan = this.onTouchesBegan;
                eventListener.onTouchesMoved = this.onTouchesMoved;
                eventListener.onTouchesEnded = this.onTouchesEnded;
                eventListener.onTouchesCancelled = this.onTouchesCancelled;
                return eventListener;
              }

              checkAvailable() {
                if (this.onTouchesBegan === null && this.onTouchesMoved === null && this.onTouchesEnded === null && this.onTouchesCancelled === null) {
                  logID(1802);
                  return false;
                }

                return true;
              }

            }
            class AccelerationEventListener extends EventListener {
              constructor(callback) {
                super(EventListener.ACCELERATION, ListenerID.ACCELERATION, null);
                this._onAccelerationEvent = null;

                this._onEvent = event => this._callback(event);

                this._onAccelerationEvent = callback;
              }

              _callback(event) {
                if (this._onAccelerationEvent) {
                  this._onAccelerationEvent(event.acc, event);
                }
              }

              checkAvailable() {
                assertID(this._onAccelerationEvent, 1803);
                return true;
              }

              clone() {
                return new AccelerationEventListener(this._onAccelerationEvent);
              }

            }
            class KeyboardEventListener extends EventListener {
              constructor() {
                super(EventListener.KEYBOARD, ListenerID.KEYBOARD, null);
                this.onKeyPressed = null;
                this.onKeyReleased = null;

                this._onEvent = event => this._callback(event);
              }

              _callback(event) {
                if (event.isPressed) {
                  if (this.onKeyPressed) {
                    this.onKeyPressed(event.keyCode, event);
                  }
                } else if (this.onKeyReleased) {
                  this.onKeyReleased(event.keyCode, event);
                }
              }

              clone() {
                const eventListener = new KeyboardEventListener();
                eventListener.onKeyPressed = this.onKeyPressed;
                eventListener.onKeyReleased = this.onKeyReleased;
                return eventListener;
              }

              checkAvailable() {
                if (this.onKeyPressed === null && this.onKeyReleased === null) {
                  logID(1800);
                  return false;
                }

                return true;
              }

            }
            legacyCC.EventListener = EventListener;

            const ListenerID$1 = EventListener.ListenerID;

            function checkUINode(node) {
              if (node && node.getComponent('cc.UITransform')) {
                return true;
              }

              return false;
            }

            class _EventListenerVector {
              constructor() {
                this.gt0Index = 0;
                this._fixedListeners = [];
                this._sceneGraphListeners = [];
              }

              size() {
                return this._fixedListeners.length + this._sceneGraphListeners.length;
              }

              empty() {
                return this._fixedListeners.length === 0 && this._sceneGraphListeners.length === 0;
              }

              push(listener) {
                if (listener._getFixedPriority() === 0) {
                  this._sceneGraphListeners.push(listener);
                } else {
                  this._fixedListeners.push(listener);
                }
              }

              clearSceneGraphListeners() {
                this._sceneGraphListeners.length = 0;
              }

              clearFixedListeners() {
                this._fixedListeners.length = 0;
              }

              clear() {
                this._sceneGraphListeners.length = 0;
                this._fixedListeners.length = 0;
              }

              getFixedPriorityListeners() {
                return this._fixedListeners;
              }

              getSceneGraphPriorityListeners() {
                return this._sceneGraphListeners;
              }

            }

            function __getListenerID(event) {
              const eventType = Event;
              const type = event.type;

              if (type === eventType.ACCELERATION) {
                return ListenerID$1.ACCELERATION;
              }

              if (type === eventType.KEYBOARD) {
                return ListenerID$1.KEYBOARD;
              }

              if (type.startsWith(eventType.MOUSE)) {
                return ListenerID$1.MOUSE;
              }

              if (type.startsWith(eventType.TOUCH)) {
                logID(2000);
              }

              return '';
            }

            const DIRTY_NONE = 0;
            const DIRTY_FIXED_PRIORITY = 1 << 0;
            const DIRTY_SCENE_GRAPH_PRIORITY = 1 << 1;

            class EventManager {
              constructor() {
                this._listenersMap = {};
                this._priorityDirtyFlagMap = {};
                this._nodeListenersMap = {};
                this._toAddedListeners = [];
                this._toRemovedListeners = [];
                this._dirtyListeners = {};
                this._inDispatch = 0;
                this._isEnabled = false;
                this._internalCustomListenerIDs = [];
                this._currentTouch = null;
                this._currentTouchListener = null;
              }

              pauseTarget(node, recursive = false) {
                if (!(node instanceof legacyCC._BaseNode)) {
                  warnID(3506);
                  return;
                }

                const listeners = this._nodeListenersMap[node.uuid];

                if (listeners) {
                  for (let i = 0; i < listeners.length; ++i) {
                    const listener = listeners[i];

                    listener._setPaused(true);
                  }
                }

                if (recursive === true) {
                  const locChildren = node.children;

                  if (locChildren) {
                    for (let i = 0; i < locChildren.length; ++i) {
                      const locChild = locChildren[i];
                      this.pauseTarget(locChild, true);
                    }
                  }
                }
              }

              resumeTarget(node, recursive = false) {
                if (!(node instanceof legacyCC._BaseNode)) {
                  warnID(3506);
                  return;
                }

                const listeners = this._nodeListenersMap[node.uuid];

                if (listeners) {
                  for (let i = 0; i < listeners.length; ++i) {
                    const listener = listeners[i];

                    listener._setPaused(false);
                  }
                }

                this._setDirtyForNode(node);

                if (recursive === true && node.children.length > 0) {
                  const locChildren = node.children;

                  if (locChildren) {
                    for (let i = 0; i < locChildren.length; ++i) {
                      const locChild = locChildren[i];
                      this.resumeTarget(locChild, true);
                    }
                  }
                }
              }

              frameUpdateListeners() {
                const locListenersMap = this._listenersMap;
                const locPriorityDirtyFlagMap = this._priorityDirtyFlagMap;

                for (const selKey in locListenersMap) {
                  if (locListenersMap[selKey].empty()) {
                    delete locPriorityDirtyFlagMap[selKey];
                    delete locListenersMap[selKey];
                  }
                }

                const locToAddedListeners = this._toAddedListeners;

                if (locToAddedListeners.length !== 0) {
                  for (let i = 0, len = locToAddedListeners.length; i < len; i++) {
                    this._forceAddEventListener(locToAddedListeners[i]);
                  }

                  locToAddedListeners.length = 0;
                }

                if (this._toRemovedListeners.length !== 0) {
                  this._cleanToRemovedListeners();
                }
              }

              hasEventListener(listenerID) {
                return !!this._getListeners(listenerID);
              }

              addListener(listener, nodeOrPriority) {
                assertID(listener && nodeOrPriority, 3503);

                if (!(legacyCC.js.isNumber(nodeOrPriority) || nodeOrPriority instanceof legacyCC._BaseNode)) {
                  warnID(3506);
                  return null;
                }

                if (!(listener instanceof legacyCC.EventListener)) {
                  assertID(!legacyCC.js.isNumber(nodeOrPriority), 3504);
                  listener = legacyCC.EventListener.create(listener);
                } else if (listener._isRegistered()) {
                  logID(3505);
                  return null;
                }

                if (!listener.checkAvailable()) {
                  return null;
                }

                if (legacyCC.js.isNumber(nodeOrPriority)) {
                  if (nodeOrPriority === 0) {
                    logID(3500);
                    return null;
                  }

                  listener._setSceneGraphPriority(null);

                  listener._setFixedPriority(nodeOrPriority);

                  listener._setRegistered(true);

                  listener._setPaused(false);

                  this._addListener(listener);
                } else {
                  if (!checkUINode(nodeOrPriority)) {
                    logID(3512);
                    return null;
                  }

                  listener._setSceneGraphPriority(nodeOrPriority);

                  listener._setFixedPriority(0);

                  listener._setRegistered(true);

                  this._addListener(listener);
                }

                return listener;
              }

              addCustomListener(eventName, callback) {
                const listener = EventListener.create({
                  event: legacyCC.EventListener.CUSTOM,
                  eventName,
                  callback
                });
                this.addListener(listener, 1);
                return listener;
              }

              removeListener(listener) {
                if (listener == null) {
                  return;
                }

                let isFound = false;
                const locListener = this._listenersMap;

                if (listener === this._currentTouchListener) {
                  this._currentTouchListener = this._currentTouch = null;
                }

                for (const selKey in locListener) {
                  const listeners = locListener[selKey];
                  const fixedPriorityListeners = listeners.getFixedPriorityListeners();
                  const sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
                  isFound = this._removeListenerInVector(sceneGraphPriorityListeners, listener);

                  if (isFound) {
                    this._setDirty(listener._getListenerID(), DIRTY_SCENE_GRAPH_PRIORITY);
                  } else {
                    isFound = this._removeListenerInVector(fixedPriorityListeners, listener);

                    if (isFound) {
                      this._setDirty(listener._getListenerID(), DIRTY_FIXED_PRIORITY);
                    }
                  }

                  if (listeners.empty()) {
                    delete this._priorityDirtyFlagMap[listener._getListenerID()];
                    delete locListener[selKey];
                  }

                  if (isFound) {
                    break;
                  }
                }

                if (!isFound) {
                  const locToAddedListeners = this._toAddedListeners;

                  for (let i = locToAddedListeners.length - 1; i >= 0; i--) {
                    const selListener = locToAddedListeners[i];

                    if (selListener === listener) {
                      legacyCC.js.array.removeAt(locToAddedListeners, i);

                      selListener._setRegistered(false);

                      break;
                    }
                  }
                }
              }

              removeListeners(listenerType, recursive = false) {
                if (!(legacyCC.js.isNumber(listenerType) || listenerType instanceof legacyCC._BaseNode)) {
                  warnID(3506);
                  return;
                }

                if (listenerType._id !== undefined) {
                  const listeners = this._nodeListenersMap[listenerType._id];

                  if (listeners) {
                    const listenersCopy = legacyCC.js.array.copy(listeners);

                    for (let i = 0; i < listenersCopy.length; ++i) {
                      const listenerCopy = listenersCopy[i];
                      this.removeListener(listenerCopy);
                    }

                    delete this._nodeListenersMap[listenerType._id];
                  }

                  const locToAddedListeners = this._toAddedListeners;

                  for (let i = 0; i < locToAddedListeners.length;) {
                    const listener = locToAddedListeners[i];

                    if (listener._getSceneGraphPriority() === listenerType) {
                      listener._setSceneGraphPriority(null);

                      listener._setRegistered(false);

                      locToAddedListeners.splice(i, 1);
                    } else {
                      ++i;
                    }
                  }

                  if (recursive === true) {
                    const locChildren = listenerType.getChildren();

                    for (let i = 0; i < locChildren.length; ++i) {
                      const locChild = locChildren[i];
                      this.removeListeners(locChild, true);
                    }
                  }
                } else if (listenerType === legacyCC.EventListener.TOUCH_ONE_BY_ONE) {
                  this._removeListenersForListenerID(ListenerID$1.TOUCH_ONE_BY_ONE);
                } else if (listenerType === legacyCC.EventListener.TOUCH_ALL_AT_ONCE) {
                  this._removeListenersForListenerID(ListenerID$1.TOUCH_ALL_AT_ONCE);
                } else if (listenerType === legacyCC.EventListener.MOUSE) {
                  this._removeListenersForListenerID(ListenerID$1.MOUSE);
                } else if (listenerType === legacyCC.EventListener.ACCELERATION) {
                  this._removeListenersForListenerID(ListenerID$1.ACCELERATION);
                } else if (listenerType === legacyCC.EventListener.KEYBOARD) {
                  this._removeListenersForListenerID(ListenerID$1.KEYBOARD);
                } else {
                  logID(3501);
                }
              }

              removeCustomListeners(customEventName) {
                this._removeListenersForListenerID(customEventName);
              }

              removeAllListeners() {
                const locListeners = this._listenersMap;
                const locInternalCustomEventIDs = this._internalCustomListenerIDs;

                for (const selKey in locListeners) {
                  if (locInternalCustomEventIDs.indexOf(selKey) === -1) {
                    this._removeListenersForListenerID(selKey);
                  }
                }
              }

              setPriority(listener, fixedPriority) {
                if (listener == null) {
                  return;
                }

                const locListeners = this._listenersMap;

                for (const selKey in locListeners) {
                  const selListeners = locListeners[selKey];
                  const fixedPriorityListeners = selListeners.getFixedPriorityListeners();

                  if (fixedPriorityListeners) {
                    const found = fixedPriorityListeners.indexOf(listener);

                    if (found !== -1) {
                      if (listener._getSceneGraphPriority() != null) {
                        logID(3502);
                      }

                      if (listener._getFixedPriority() !== fixedPriority) {
                        listener._setFixedPriority(fixedPriority);

                        this._setDirty(listener._getListenerID(), DIRTY_FIXED_PRIORITY);
                      }

                      return;
                    }
                  }
                }
              }

              setEnabled(enabled) {
                this._isEnabled = enabled;
              }

              isEnabled() {
                return this._isEnabled;
              }

              dispatchEvent(event) {
                if (!this._isEnabled) {
                  return;
                }

                this._updateDirtyFlagForSceneGraph();

                this._inDispatch++;

                if (!event || !event.getType) {
                  errorID(3511);
                  return;
                }

                if (event.getType().startsWith(legacyCC.Event.TOUCH)) {
                  this._dispatchTouchEvent(event);

                  this._inDispatch--;
                  return;
                }

                const listenerID = __getListenerID(event);

                this._sortEventListeners(listenerID);

                const selListeners = this._listenersMap[listenerID];

                if (selListeners != null) {
                  this._dispatchEventToListeners(selListeners, this._onListenerCallback, event);

                  this._onUpdateListeners(selListeners);
                }

                this._inDispatch--;
              }

              _onListenerCallback(listener, event) {
                event.currentTarget = listener._target;
                const onEvent = listener.onEvent;

                if (onEvent) {
                  onEvent(event);
                }

                return event.isStopped();
              }

              dispatchCustomEvent(eventName, optionalUserData) {
                const ev = new legacyCC.Event.EventCustom(eventName);
                ev.setUserData(optionalUserData);
                this.dispatchEvent(ev);
              }

              _setDirtyForNode(node) {
                const selListeners = this._nodeListenersMap[node._id];

                if (selListeners !== undefined) {
                  for (let j = 0, len = selListeners.length; j < len; j++) {
                    const selListener = selListeners[j];

                    const listenerID = selListener._getListenerID();

                    if (!this._dirtyListeners[listenerID]) {
                      this._dirtyListeners[listenerID] = true;
                    }
                  }
                }

                if (node.children.length > 0) {
                  const _children = node.children;

                  for (let i = 0, len = _children ? _children.length : 0; i < len; i++) {
                    this._setDirtyForNode(_children[i]);
                  }
                }
              }

              _addListener(listener) {
                if (this._inDispatch === 0) {
                  this._forceAddEventListener(listener);
                } else {
                  this._toAddedListeners.push(listener);
                }
              }

              _forceAddEventListener(listener) {
                const listenerID = listener._getListenerID();

                let listeners = this._listenersMap[listenerID];

                if (!listeners) {
                  listeners = new _EventListenerVector();
                  this._listenersMap[listenerID] = listeners;
                }

                listeners.push(listener);

                if (listener._getFixedPriority() === 0) {
                  this._setDirty(listenerID, DIRTY_SCENE_GRAPH_PRIORITY);

                  const node = listener._getSceneGraphPriority();

                  if (node === null) {
                    logID(3507);
                  }

                  this._associateNodeAndEventListener(node, listener);

                  if (node.activeInHierarchy) {
                    this.resumeTarget(node);
                  }
                } else {
                  this._setDirty(listenerID, DIRTY_FIXED_PRIORITY);
                }
              }

              _getListeners(listenerID) {
                return this._listenersMap[listenerID];
              }

              _updateDirtyFlagForSceneGraph() {
                const locDirtyListeners = this._dirtyListeners;

                for (const selKey in locDirtyListeners) {
                  this._setDirty(selKey, DIRTY_SCENE_GRAPH_PRIORITY);

                  locDirtyListeners[selKey] = false;
                }
              }

              _removeAllListenersInVector(listenerVector) {
                if (!listenerVector) {
                  return;
                }

                let selListener;

                for (let i = listenerVector.length - 1; i >= 0; i--) {
                  selListener = listenerVector[i];

                  selListener._setRegistered(false);

                  if (selListener._getSceneGraphPriority() != null) {
                    this._dissociateNodeAndEventListener(selListener._getSceneGraphPriority(), selListener);

                    selListener._setSceneGraphPriority(null);
                  }

                  if (this._inDispatch === 0) {
                    legacyCC.js.array.removeAt(listenerVector, i);
                  }
                }
              }

              _removeListenersForListenerID(listenerID) {
                const listeners = this._listenersMap[listenerID];

                if (listeners) {
                  const fixedPriorityListeners = listeners.getFixedPriorityListeners();
                  const sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();

                  this._removeAllListenersInVector(sceneGraphPriorityListeners);

                  this._removeAllListenersInVector(fixedPriorityListeners);

                  delete this._priorityDirtyFlagMap[listenerID];

                  if (!this._inDispatch) {
                    listeners.clear();
                    delete this._listenersMap[listenerID];
                  }
                }

                const locToAddedListeners = this._toAddedListeners;

                for (let i = locToAddedListeners.length - 1; i >= 0; i--) {
                  const listener = locToAddedListeners[i];

                  if (listener && listener._getListenerID() === listenerID) {
                    legacyCC.js.array.removeAt(locToAddedListeners, i);
                  }
                }
              }

              _sortEventListeners(listenerID) {
                let dirtyFlag = DIRTY_NONE;
                const locFlagMap = this._priorityDirtyFlagMap;

                if (locFlagMap[listenerID]) {
                  dirtyFlag = locFlagMap[listenerID];
                }

                if (dirtyFlag !== DIRTY_NONE) {
                  locFlagMap[listenerID] = DIRTY_NONE;

                  if (dirtyFlag & DIRTY_FIXED_PRIORITY) {
                    this._sortListenersOfFixedPriority(listenerID);
                  }

                  if (dirtyFlag & DIRTY_SCENE_GRAPH_PRIORITY) {
                    const rootEntity = legacyCC.director.getScene();

                    if (rootEntity) {
                      this._sortListenersOfSceneGraphPriority(listenerID);
                    }
                  }
                }
              }

              _sortListenersOfSceneGraphPriority(listenerID) {
                const listeners = this._getListeners(listenerID);

                if (!listeners) {
                  return;
                }

                const sceneGraphListener = listeners.getSceneGraphPriorityListeners();

                if (!sceneGraphListener || sceneGraphListener.length === 0) {
                  return;
                }

                const eventListeners = listeners.getSceneGraphPriorityListeners();
                eventListeners.forEach(listener => {
                  const node = listener._getSceneGraphPriority();

                  const trans = node._uiProps.uiTransformComp;
                  listener._cameraPriority = trans.cameraPriority;
                });
                eventListeners.sort(this._sortEventListenersOfSceneGraphPriorityDes);
              }

              _sortEventListenersOfSceneGraphPriorityDes(l1, l2) {
                const node1 = l1._getSceneGraphPriority();

                const node2 = l2._getSceneGraphPriority();

                if (!l2 || !node2 || !node2._activeInHierarchy || !node2._uiProps.uiTransformComp) {
                  return -1;
                } else if (!l1 || !node1 || !node1._activeInHierarchy || !node1._uiProps.uiTransformComp) {
                  return 1;
                }

                let p1 = node1;
                let p2 = node2;
                let ex = false;

                if (l1._cameraPriority !== l2._cameraPriority) {
                  return l2._cameraPriority - l1._cameraPriority;
                }

                while (p1.parent._id !== p2.parent._id) {
                  p1 = p1.parent.parent === null ? (ex = true) && node2 : p1.parent;
                  p2 = p2.parent.parent === null ? (ex = true) && node1 : p2.parent;
                }

                if (p1._id === p2._id) {
                  if (p1._id === node2._id) {
                    return -1;
                  }

                  if (p1._id === node1._id) {
                    return 1;
                  }
                }

                const priority1 = p1.getSiblingIndex();
                const priority2 = p2.getSiblingIndex();
                return ex ? priority1 - priority2 : priority2 - priority1;
              }

              _sortListenersOfFixedPriority(listenerID) {
                const listeners = this._listenersMap[listenerID];

                if (!listeners) {
                  return;
                }

                const fixedListeners = listeners.getFixedPriorityListeners();

                if (!fixedListeners || fixedListeners.length === 0) {
                  return;
                }

                fixedListeners.sort(this._sortListenersOfFixedPriorityAsc);
                let index = 0;

                for (const len = fixedListeners.length; index < len;) {
                  if (fixedListeners[index]._getFixedPriority() >= 0) {
                    break;
                  }

                  ++index;
                }

                listeners.gt0Index = index;
              }

              _sortListenersOfFixedPriorityAsc(l1, l2) {
                return l1._getFixedPriority() - l2._getFixedPriority();
              }

              _onUpdateListeners(listeners) {
                const fixedPriorityListeners = listeners.getFixedPriorityListeners();
                const sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
                const toRemovedListeners = this._toRemovedListeners;

                if (sceneGraphPriorityListeners) {
                  for (let i = sceneGraphPriorityListeners.length - 1; i >= 0; i--) {
                    const selListener = sceneGraphPriorityListeners[i];

                    if (!selListener._isRegistered()) {
                      legacyCC.js.array.removeAt(sceneGraphPriorityListeners, i);
                      const idx = toRemovedListeners.indexOf(selListener);

                      if (idx !== -1) {
                        toRemovedListeners.splice(idx, 1);
                      }
                    }
                  }
                }

                if (fixedPriorityListeners) {
                  for (let i = fixedPriorityListeners.length - 1; i >= 0; i--) {
                    const selListener = fixedPriorityListeners[i];

                    if (!selListener._isRegistered()) {
                      legacyCC.js.array.removeAt(fixedPriorityListeners, i);
                      const idx = toRemovedListeners.indexOf(selListener);

                      if (idx !== -1) {
                        toRemovedListeners.splice(idx, 1);
                      }
                    }
                  }
                }

                if (sceneGraphPriorityListeners && sceneGraphPriorityListeners.length === 0) {
                  listeners.clearSceneGraphListeners();
                }

                if (fixedPriorityListeners && fixedPriorityListeners.length === 0) {
                  listeners.clearFixedListeners();
                }
              }

              _updateTouchListeners(event) {
                const locInDispatch = this._inDispatch;
                assertID(locInDispatch > 0, 3508);

                if (locInDispatch > 1) {
                  return;
                }

                let listeners;
                listeners = this._listenersMap[ListenerID$1.TOUCH_ONE_BY_ONE];

                if (listeners) {
                  this._onUpdateListeners(listeners);
                }

                listeners = this._listenersMap[ListenerID$1.TOUCH_ALL_AT_ONCE];

                if (listeners) {
                  this._onUpdateListeners(listeners);
                }

                assertID(locInDispatch === 1, 3509);
                const locToAddedListeners = this._toAddedListeners;

                if (locToAddedListeners.length !== 0) {
                  for (let i = 0, len = locToAddedListeners.length; i < len; i++) {
                    this._forceAddEventListener(locToAddedListeners[i]);
                  }

                  this._toAddedListeners.length = 0;
                }

                if (this._toRemovedListeners.length !== 0) {
                  this._cleanToRemovedListeners();
                }
              }

              _cleanToRemovedListeners() {
                const toRemovedListeners = this._toRemovedListeners;

                for (let i = 0; i < toRemovedListeners.length; ++i) {
                  const selListener = toRemovedListeners[i];

                  const listeners = this._listenersMap[selListener._getListenerID()];

                  if (!listeners) {
                    continue;
                  }

                  const fixedPriorityListeners = listeners.getFixedPriorityListeners();
                  const sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();

                  if (sceneGraphPriorityListeners) {
                    const idx = sceneGraphPriorityListeners.indexOf(selListener);

                    if (idx !== -1) {
                      sceneGraphPriorityListeners.splice(idx, 1);
                    }
                  }

                  if (fixedPriorityListeners) {
                    const idx = fixedPriorityListeners.indexOf(selListener);

                    if (idx !== -1) {
                      fixedPriorityListeners.splice(idx, 1);
                    }
                  }
                }

                toRemovedListeners.length = 0;
              }

              _onTouchEventCallback(listener, argsObj) {
                if (!listener._isRegistered()) {
                  return false;
                }

                const event = argsObj.event;
                const selTouch = event.touch;
                event.currentTarget = listener._getSceneGraphPriority();
                let isClaimed = false;
                let removedIdx = -1;
                const eventCode = event.getEventCode();

                if (eventCode === SystemEventType.TOUCH_START) {
                  if (!macro.ENABLE_MULTI_TOUCH && eventManager._currentTouch) {
                    const node = eventManager._currentTouchListener._node;

                    if (!node || node.activeInHierarchy) {
                      return false;
                    }
                  }

                  if (listener.onTouchBegan) {
                    isClaimed = listener.onTouchBegan(selTouch, event);

                    if (isClaimed && listener._isRegistered() && !listener._isPaused()) {
                      listener._claimedTouches.push(selTouch);

                      if (macro.ENABLE_MULTI_TOUCH || !eventManager._currentTouch) {
                        eventManager._currentTouch = selTouch;
                      }

                      eventManager._currentTouchListener = listener;
                    }
                  }
                } else if (listener._claimedTouches.length > 0) {
                  removedIdx = listener._claimedTouches.indexOf(selTouch);

                  if (removedIdx !== -1) {
                    isClaimed = true;

                    if (!macro.ENABLE_MULTI_TOUCH && eventManager._currentTouch && eventManager._currentTouch !== selTouch) {
                      return false;
                    }

                    if (eventCode === SystemEventType.TOUCH_MOVE && listener.onTouchMoved) {
                      listener.onTouchMoved(selTouch, event);
                    } else if (eventCode === SystemEventType.TOUCH_END) {
                      if (listener.onTouchEnded) {
                        listener.onTouchEnded(selTouch, event);
                      }

                      if (listener._isRegistered()) {
                        listener._claimedTouches.splice(removedIdx, 1);
                      }

                      if (macro.ENABLE_MULTI_TOUCH || eventManager._currentTouch === selTouch) {
                        eventManager._currentTouch = null;
                      }

                      eventManager._currentTouchListener = null;
                    } else if (eventCode === SystemEventType.TOUCH_CANCEL) {
                      if (listener.onTouchCancelled) {
                        listener.onTouchCancelled(selTouch, event);
                      }

                      if (listener._isRegistered()) {
                        listener._claimedTouches.splice(removedIdx, 1);
                      }

                      if (macro.ENABLE_MULTI_TOUCH || eventManager._currentTouch === selTouch) {
                        eventManager._currentTouch = null;
                      }

                      eventManager._currentTouchListener = null;
                    }
                  }
                }

                if (event.isStopped()) {
                  eventManager._updateTouchListeners(event);

                  return true;
                }

                if (isClaimed && listener._isRegistered() && listener.swallowTouches) {
                  if (argsObj.needsMutableSet) {
                    argsObj.touches.splice(selTouch, 1);
                  }

                  return true;
                }

                return false;
              }

              _dispatchTouchEvent(event) {
                this._sortEventListeners(ListenerID$1.TOUCH_ONE_BY_ONE);

                this._sortEventListeners(ListenerID$1.TOUCH_ALL_AT_ONCE);

                const oneByOneListeners = this._getListeners(ListenerID$1.TOUCH_ONE_BY_ONE);

                const allAtOnceListeners = this._getListeners(ListenerID$1.TOUCH_ALL_AT_ONCE);

                if (oneByOneListeners === null && allAtOnceListeners === null) {
                  return;
                }

                const originalTouches = event.getTouches();
                const mutableTouches = legacyCC.js.array.copy(originalTouches);
                const oneByOneArgsObj = {
                  event,
                  needsMutableSet: oneByOneListeners && allAtOnceListeners,
                  touches: mutableTouches,
                  selTouch: null
                };

                if (oneByOneListeners) {
                  for (let i = 0; i < originalTouches.length; ++i) {
                    const originalTouch = originalTouches[i];
                    event.touch = originalTouch;
                    event.propagationStopped = event.propagationImmediateStopped = false;

                    this._dispatchEventToListeners(oneByOneListeners, this._onTouchEventCallback, oneByOneArgsObj);
                  }
                }

                if (allAtOnceListeners && mutableTouches.length > 0) {
                  this._dispatchEventToListeners(allAtOnceListeners, this._onTouchesEventCallback, {
                    event,
                    touches: mutableTouches
                  });

                  if (event.isStopped()) {
                    return;
                  }
                }

                this._updateTouchListeners(event);
              }

              _onTouchesEventCallback(listener, callbackParams) {
                if (!listener._isRegistered()) {
                  return false;
                }

                const event = callbackParams.event;
                const touches = callbackParams.touches;
                const eventCode = event.getEventCode();
                event.currentTarget = listener._getSceneGraphPriority();

                if (eventCode === SystemEventType.TOUCH_START && listener.onTouchesBegan) {
                  listener.onTouchesBegan(touches, event);
                } else if (eventCode === SystemEventType.TOUCH_MOVE && listener.onTouchesMoved) {
                  listener.onTouchesMoved(touches, event);
                } else if (eventCode === SystemEventType.TOUCH_END && listener.onTouchesEnded) {
                  listener.onTouchesEnded(touches, event);
                } else if (eventCode === SystemEventType.TOUCH_CANCEL && listener.onTouchesCancelled) {
                  listener.onTouchesCancelled(touches, event);
                }

                if (event.isStopped()) {
                  eventManager._updateTouchListeners(event);

                  return true;
                }

                return false;
              }

              _associateNodeAndEventListener(node, listener) {
                let listeners = this._nodeListenersMap[node.uuid];

                if (!listeners) {
                  listeners = [];
                  this._nodeListenersMap[node.uuid] = listeners;
                }

                listeners.push(listener);
              }

              _dissociateNodeAndEventListener(node, listener) {
                const listeners = this._nodeListenersMap[node.uuid];

                if (listeners) {
                  legacyCC.js.array.remove(listeners, listener);

                  if (listeners.length === 0) {
                    delete this._nodeListenersMap[node.uuid];
                  }
                }
              }

              _dispatchEventToListeners(listeners, onEvent, eventOrArgs) {
                let shouldStopPropagation = false;
                const fixedPriorityListeners = listeners.getFixedPriorityListeners();
                const sceneGraphPriorityListeners = listeners.getSceneGraphPriorityListeners();
                let i = 0;

                if (fixedPriorityListeners) {
                  if (fixedPriorityListeners.length !== 0) {
                    for (; i < listeners.gt0Index; ++i) {
                      const selListener = fixedPriorityListeners[i];

                      if (selListener.isEnabled() && !selListener._isPaused() && selListener._isRegistered() && onEvent(selListener, eventOrArgs)) {
                        shouldStopPropagation = true;
                        break;
                      }
                    }
                  }
                }

                if (sceneGraphPriorityListeners && !shouldStopPropagation) {
                  for (let i = 0; i < sceneGraphPriorityListeners.length; ++i) {
                    const selListener = sceneGraphPriorityListeners[i];

                    if (selListener.isEnabled() && !selListener._isPaused() && selListener._isRegistered() && onEvent(selListener, eventOrArgs)) {
                      shouldStopPropagation = true;
                      break;
                    }
                  }
                }

                if (fixedPriorityListeners && !shouldStopPropagation) {
                  for (; i < fixedPriorityListeners.length; ++i) {
                    const selListener = fixedPriorityListeners[i];

                    if (selListener.isEnabled() && !selListener._isPaused() && selListener._isRegistered() && onEvent(selListener, eventOrArgs)) {
                      shouldStopPropagation = true;
                      break;
                    }
                  }
                }
              }

              _setDirty(listenerID, flag) {
                const locDirtyFlagMap = this._priorityDirtyFlagMap;

                if (locDirtyFlagMap[listenerID] == null) {
                  locDirtyFlagMap[listenerID] = flag;
                } else {
                  locDirtyFlagMap[listenerID] |= flag;
                }
              }

              _sortNumberAsc(a, b) {
                return a - b;
              }

              _removeListenerInCallback(listeners, callback) {
                if (listeners == null) {
                  return false;
                }

                for (let i = listeners.length - 1; i >= 0; i--) {
                  const selListener = listeners[i];

                  if (selListener._onCustomEvent === callback || selListener.onEvent === callback) {
                    selListener._setRegistered(false);

                    if (selListener._getSceneGraphPriority() != null) {
                      this._dissociateNodeAndEventListener(selListener._getSceneGraphPriority(), selListener);

                      selListener._setSceneGraphPriority(null);
                    }

                    if (this._inDispatch === 0) {
                      legacyCC.js.array.removeAt(listeners, i);
                    } else {
                      this._toRemovedListeners.push(selListener);
                    }

                    return true;
                  }
                }

                return false;
              }

              _removeListenerInVector(listeners, listener) {
                if (listeners == null) {
                  return false;
                }

                for (let i = listeners.length - 1; i >= 0; i--) {
                  const selListener = listeners[i];

                  if (selListener === listener) {
                    selListener._setRegistered(false);

                    if (selListener._getSceneGraphPriority() != null) {
                      this._dissociateNodeAndEventListener(selListener._getSceneGraphPriority(), selListener);

                      selListener._setSceneGraphPriority(null);
                    }

                    if (this._inDispatch === 0) {
                      legacyCC.js.array.removeAt(listeners, i);
                    } else {
                      this._toRemovedListeners.push(selListener);
                    }

                    return true;
                  }
                }

                return false;
              }

            }

            const eventManager = exports('f9', new EventManager());
            legacyCC.eventManager = eventManager;

            const Destroying$1 = CCObject.Flags.Destroying;

            var _dec$9, _class$9, _class2$8, _descriptor$6, _descriptor2$2, _descriptor3$2, _descriptor4$1, _descriptor5$1, _class3$5, _temp$8;
            const Destroying$2 = CCObject.Flags.Destroying;
            const DontDestroy$1 = CCObject.Flags.DontDestroy;
            const Deactivating$1 = CCObject.Flags.Deactivating;
            const TRANSFORM_ON = 1 << 0;
            const idGenerator$2 = new IDGenerator('Node');

            function getConstructor(typeOrClassName) {
              if (!typeOrClassName) {
                errorID(3804);
                return null;
              }

              if (typeof typeOrClassName === 'string') {
                return getClassByName(typeOrClassName);
              }

              return typeOrClassName;
            }

            let BaseNode = exports('fD', (_dec$9 = ccclass('cc.BaseNode'), _dec$9(_class$9 = (_class2$8 = (_temp$8 = _class3$5 = class BaseNode extends CCObject {
              get components() {
                return this._components;
              }

              get _persistNode() {
                return (this._objFlags & DontDestroy$1) > 0;
              }

              set _persistNode(value) {
                if (value) {
                  this._objFlags |= DontDestroy$1;
                } else {
                  this._objFlags &= ~DontDestroy$1;
                }
              }

              get name() {
                return this._name;
              }

              set name(value) {

                this._name = value;
              }

              get uuid() {
                return this._id;
              }

              get children() {
                return this._children;
              }

              get active() {
                return this._active;
              }

              set active(isActive) {
                if (this._active !== isActive) {
                  this._active = isActive;
                  const parent = this._parent;

                  if (parent) {
                    const couldActiveInScene = parent._activeInHierarchy;

                    if (couldActiveInScene) {
                      legacyCC.director._nodeActivator.activateNode(this, isActive);
                    }
                  }
                }
              }

              get activeInHierarchy() {
                return this._activeInHierarchy;
              }

              get parent() {
                return this._parent;
              }

              set parent(value) {
                this.setParent(value);
              }

              get scene() {
                return this._scene;
              }

              get eventProcessor() {
                return this._eventProcessor;
              }

              static _setScene(node) {
                node._updateScene();
              }

              static _findComponent(node, constructor) {
                const cls = constructor;
                const comps = node._components;

                if (cls._sealed) {
                  for (let i = 0; i < comps.length; ++i) {
                    const comp = comps[i];

                    if (comp.constructor === constructor) {
                      return comp;
                    }
                  }
                } else {
                  for (let i = 0; i < comps.length; ++i) {
                    const comp = comps[i];

                    if (comp instanceof constructor) {
                      return comp;
                    }
                  }
                }

                return null;
              }

              static _findComponents(node, constructor, components) {
                const cls = constructor;
                const comps = node._components;

                if (cls._sealed) {
                  for (let i = 0; i < comps.length; ++i) {
                    const comp = comps[i];

                    if (comp.constructor === constructor) {
                      components.push(comp);
                    }
                  }
                } else {
                  for (let i = 0; i < comps.length; ++i) {
                    const comp = comps[i];

                    if (comp instanceof constructor) {
                      components.push(comp);
                    }
                  }
                }
              }

              static _findChildComponent(children, constructor) {
                for (let i = 0; i < children.length; ++i) {
                  const node = children[i];

                  let comp = BaseNode._findComponent(node, constructor);

                  if (comp) {
                    return comp;
                  }

                  if (node._children.length > 0) {
                    comp = BaseNode._findChildComponent(node._children, constructor);

                    if (comp) {
                      return comp;
                    }
                  }
                }

                return null;
              }

              static _findChildComponents(children, constructor, components) {
                for (let i = 0; i < children.length; ++i) {
                  const node = children[i];

                  BaseNode._findComponents(node, constructor, components);

                  if (node._children.length > 0) {
                    BaseNode._findChildComponents(node._children, constructor, components);
                  }
                }
              }

              _updateScene() {
                if (this._parent == null) {
                  error('Node %s(%s) has not attached to a scene.', this.name, this.uuid);
                } else {
                  this._scene = this._parent._scene;
                }
              }

              constructor(name) {
                super(name);

                _initializerDefineProperty(this, "_parent", _descriptor$6, this);

                _initializerDefineProperty(this, "_children", _descriptor2$2, this);

                _initializerDefineProperty(this, "_active", _descriptor3$2, this);

                _initializerDefineProperty(this, "_components", _descriptor4$1, this);

                _initializerDefineProperty(this, "_prefab", _descriptor5$1, this);

                this._scene = null;
                this._activeInHierarchy = false;
                this._id = idGenerator$2.getNewId();
                this._name = void 0;
                this._eventProcessor = new legacyCC.NodeEventProcessor(this);
                this._eventMask = 0;
                this._siblingIndex = 0;
                this._originalSceneId = '';
                this._registerIfAttached =  undefined ;
                this._name = name !== undefined ? name : 'New Node';
              }

              attr(attrs) {
                mixin(this, attrs);
              }

              getParent() {
                return this._parent;
              }

              setParent(value, keepWorldTransform = false) {
                if (this._parent === value) {
                  return;
                }

                const oldParent = this._parent;
                const newParent = value;

                if ( oldParent && oldParent._objFlags & Deactivating$1) {
                  errorID(3821);
                }

                this._parent = newParent;
                this._siblingIndex = 0;

                this._onSetParent(oldParent, keepWorldTransform);

                if (this.emit) {
                  this.emit(SystemEventType.PARENT_CHANGED, oldParent);
                }

                if (oldParent) {
                  if (!(oldParent._objFlags & Destroying$2)) {
                    const removeAt = oldParent._children.indexOf(this);

                    oldParent._children.splice(removeAt, 1);

                    oldParent._updateSiblingIndex();

                    if (oldParent.emit) {
                      oldParent.emit(SystemEventType.CHILD_REMOVED, this);
                    }
                  }
                }

                if (newParent) {
                  if ( newParent._objFlags & Deactivating$1) {
                    errorID(3821);
                  }

                  newParent._children.push(this);

                  this._siblingIndex = newParent._children.length - 1;

                  if (newParent.emit) {
                    newParent.emit(SystemEventType.CHILD_ADDED, this);
                  }
                }

                this._onHierarchyChanged(oldParent);
              }

              getChildByUuid(uuid) {
                if (!uuid) {
                  log('Invalid uuid');
                  return null;
                }

                const locChildren = this._children;

                for (let i = 0, len = locChildren.length; i < len; i++) {
                  if (locChildren[i]._id === uuid) {
                    return locChildren[i];
                  }
                }

                return null;
              }

              getChildByName(name) {
                if (!name) {
                  log('Invalid name');
                  return null;
                }

                const locChildren = this._children;

                for (let i = 0, len = locChildren.length; i < len; i++) {
                  if (locChildren[i]._name === name) {
                    return locChildren[i];
                  }
                }

                return null;
              }

              getChildByPath(path) {
                const segments = path.split('/');
                let lastNode = this;

                for (let i = 0; i < segments.length; ++i) {
                  const segment = segments[i];

                  if (segment.length === 0) {
                    continue;
                  }

                  const next = lastNode.children.find(childNode => childNode.name === segment);

                  if (!next) {
                    return null;
                  }

                  lastNode = next;
                }

                return lastNode;
              }

              addChild(child) {
                child.setParent(this);
              }

              insertChild(child, siblingIndex) {
                child.parent = this;
                child.setSiblingIndex(siblingIndex);
              }

              getSiblingIndex() {
                return this._siblingIndex;
              }

              setSiblingIndex(index) {
                if (!this._parent) {
                  return;
                }

                if (this._parent._objFlags & Deactivating$1) {
                  errorID(3821);
                  return;
                }

                const siblings = this._parent._children;
                index = index !== -1 ? index : siblings.length - 1;
                const oldIndex = siblings.indexOf(this);

                if (index !== oldIndex) {
                  siblings.splice(oldIndex, 1);

                  if (index < siblings.length) {
                    siblings.splice(index, 0, this);
                  } else {
                    siblings.push(this);
                  }

                  this._parent._updateSiblingIndex();

                  if (this._onSiblingIndexChanged) {
                    this._onSiblingIndexChanged(index);
                  }
                }
              }

              walk(preFunc, postFunc) {
                let index = 1;
                let children = null;
                let curr = null;
                let i = 0;
                let stack = BaseNode._stacks[BaseNode._stackId];

                if (!stack) {
                  stack = [];

                  BaseNode._stacks.push(stack);
                }

                BaseNode._stackId++;
                stack.length = 0;
                stack[0] = this;
                let parent = null;
                let afterChildren = false;

                while (index) {
                  index--;
                  curr = stack[index];

                  if (!curr) {
                    continue;
                  }

                  if (!afterChildren && preFunc) {
                    preFunc(curr);
                  } else if (afterChildren && postFunc) {
                    postFunc(curr);
                  }

                  stack[index] = null;

                  if (afterChildren) {
                    if (parent === this._parent) break;
                    afterChildren = false;
                  } else {
                    if (curr._children.length > 0) {
                      parent = curr;
                      children = curr._children;
                      i = 0;
                      stack[index] = children[i];
                      index++;
                    } else {
                      stack[index] = curr;
                      index++;
                      afterChildren = true;
                    }

                    continue;
                  }

                  if (children) {
                    i++;

                    if (children[i]) {
                      stack[index] = children[i];
                      index++;
                    } else if (parent) {
                      stack[index] = parent;
                      index++;
                      afterChildren = true;

                      if (parent._parent) {
                        children = parent._parent._children;
                        i = children.indexOf(parent);
                        parent = parent._parent;
                      } else {
                        parent = null;
                        children = null;
                      }

                      if (i < 0) {
                        break;
                      }
                    }
                  }
                }

                stack.length = 0;
                BaseNode._stackId--;
              }

              removeFromParent() {
                if (this._parent) {
                  this._parent.removeChild(this);
                }
              }

              removeChild(child) {
                if (this._children.indexOf(child) > -1) {
                  child.parent = null;
                }
              }

              removeAllChildren() {
                const children = this._children;

                for (let i = children.length - 1; i >= 0; i--) {
                  const node = children[i];

                  if (node) {
                    node.parent = null;
                  }
                }

                this._children.length = 0;
              }

              isChildOf(parent) {
                let child = this;

                do {
                  if (child === parent) {
                    return true;
                  }

                  child = child._parent;
                } while (child);

                return false;
              }

              getComponent(typeOrClassName) {
                const constructor = getConstructor(typeOrClassName);

                if (constructor) {
                  return BaseNode._findComponent(this, constructor);
                }

                return null;
              }

              getComponents(typeOrClassName) {
                const constructor = getConstructor(typeOrClassName);
                const components = [];

                if (constructor) {
                  BaseNode._findComponents(this, constructor, components);
                }

                return components;
              }

              getComponentInChildren(typeOrClassName) {
                const constructor = getConstructor(typeOrClassName);

                if (constructor) {
                  return BaseNode._findChildComponent(this._children, constructor);
                }

                return null;
              }

              getComponentsInChildren(typeOrClassName) {
                const constructor = getConstructor(typeOrClassName);
                const components = [];

                if (constructor) {
                  BaseNode._findComponents(this, constructor, components);

                  BaseNode._findChildComponents(this._children, constructor, components);
                }

                return components;
              }

              addComponent(typeOrClassName) {

                let constructor;

                if (typeof typeOrClassName === 'string') {
                  constructor = getClassByName(typeOrClassName);

                  if (!constructor) {
                    if (legacyCC._RF.peek()) {
                      errorID(3808, typeOrClassName);
                    }

                    throw TypeError(getError(3807, typeOrClassName));
                  }
                } else {
                  if (!typeOrClassName) {
                    throw TypeError(getError(3804));
                  }

                  constructor = typeOrClassName;
                }

                if (typeof constructor !== 'function') {
                  throw TypeError(getError(3809));
                }

                if (!isChildClassOf(constructor, legacyCC.Component)) {
                  throw TypeError(getError(3810));
                }

                const ReqComp = constructor._requireComponent;

                if (ReqComp && !this.getComponent(ReqComp)) {
                  this.addComponent(ReqComp);
                }

                const component = new constructor();
                component.node = this;

                this._components.push(component);

                if (this._activeInHierarchy) {
                  legacyCC.director._nodeActivator.activateComp(component);
                }

                return component;
              }

              removeComponent(component) {
                if (!component) {
                  errorID(3813);
                  return;
                }

                let componentInstance = null;

                if (component instanceof Component) {
                  componentInstance = component;
                } else {
                  componentInstance = this.getComponent(component);
                }

                if (componentInstance) {
                  componentInstance.destroy();
                }
              }

              on(type, callback, target, useCapture = false) {
                switch (type) {
                  case SystemEventType.TRANSFORM_CHANGED:
                    this._eventMask |= TRANSFORM_ON;
                    break;
                }

                this._eventProcessor.on(type, callback, target, useCapture);
              }

              off(type, callback, target, useCapture = false) {
                this._eventProcessor.off(type, callback, target, useCapture);

                const hasListeners = this._eventProcessor.hasEventListener(type);

                if (!hasListeners) {
                  switch (type) {
                    case SystemEventType.TRANSFORM_CHANGED:
                      this._eventMask &= ~TRANSFORM_ON;
                      break;
                  }
                }
              }

              once(type, callback, target, useCapture) {
                this._eventProcessor.once(type, callback, target, useCapture);
              }

              emit(type, arg0, arg1, arg2, arg3, arg4) {
                this._eventProcessor.emit(type, arg0, arg1, arg2, arg3, arg4);
              }

              dispatchEvent(event) {
                this._eventProcessor.dispatchEvent(event);
              }

              hasEventListener(type, callback, target) {
                return this._eventProcessor.hasEventListener(type, callback, target);
              }

              targetOff(target) {
                this._eventProcessor.targetOff(target);

                if (this._eventMask & TRANSFORM_ON && !this._eventProcessor.hasEventListener(SystemEventType.TRANSFORM_CHANGED)) {
                  this._eventMask &= ~TRANSFORM_ON;
                }
              }

              destroy() {
                if (super.destroy()) {
                  this.active = false;
                  return true;
                }

                return false;
              }

              destroyAllChildren() {
                const children = this._children;

                for (let i = 0; i < children.length; ++i) {
                  children[i].destroy();
                }
              }

              _removeComponent(component) {
                if (!component) {
                  errorID(3814);
                  return;
                }

                if (!(this._objFlags & Destroying$2)) {
                  const i = this._components.indexOf(component);

                  if (i !== -1) {
                    this._components.splice(i, 1);
                  } else if (component.node !== this) {
                    errorID(3815);
                  }
                }
              }

              _updateSiblingIndex() {
                for (let i = 0; i < this._children.length; ++i) {
                  this._children[i]._siblingIndex = i;
                }

                this.emit(SystemEventType.SIBLING_ORDER_CHANGED);
              }

              _onSetParent(oldParent, keepWorldTransform = false) {
                if (this._parent) {
                  if ((oldParent == null || oldParent._scene !== this._parent._scene) && this._parent._scene != null) {
                    this.walk(BaseNode._setScene);
                  }
                }
              }

              _onPostActivated(active) {}

              _onBatchCreated(dontSyncChildPrefab) {
                if (this._parent) {
                  this._siblingIndex = this._parent.children.indexOf(this);
                }
              }

              _onPreDestroy() {
                this._onPreDestroyBase();
              }

              _onHierarchyChanged(oldParent) {
                return this._onHierarchyChangedBase(oldParent);
              }

              _instantiate(cloned, isSyncedNode) {
                if (!cloned) {
                  cloned = legacyCC.instantiate._clone(this, this);
                }

                const newPrefabInfo = cloned._prefab;

                cloned._parent = null;

                cloned._onBatchCreated(isSyncedNode);

                return cloned;
              }

              _onHierarchyChangedBase(oldParent) {
                const newParent = this._parent;

                if (this._persistNode && !(newParent instanceof legacyCC.Scene)) {
                  legacyCC.game.removePersistRootNode(this);
                }

                const shouldActiveNow = this._active && !!(newParent && newParent._activeInHierarchy);

                if (this._activeInHierarchy !== shouldActiveNow) {
                  legacyCC.director._nodeActivator.activateNode(this, shouldActiveNow);
                }
              }

              _onPreDestroyBase() {
                this._objFlags |= Destroying$2;
                const parent = this._parent;
                const destroyByParent = !!parent && (parent._objFlags & Destroying$2) !== 0;

                if (!destroyByParent && EDITOR) {
                  this._registerIfAttached(false);
                }

                if (this._persistNode) {
                  legacyCC.game.removePersistRootNode(this);
                }

                if (!destroyByParent) {
                  if (parent) {
                    this.emit(SystemEventType.PARENT_CHANGED, this);

                    const childIndex = parent._children.indexOf(this);

                    parent._children.splice(childIndex, 1);

                    this._siblingIndex = 0;

                    parent._updateSiblingIndex();

                    if (parent.emit) {
                      parent.emit(SystemEventType.CHILD_REMOVED, this);
                    }
                  }
                }

                this.emit(SystemEventType.NODE_DESTROYED, this);

                this._eventProcessor.destroy();

                const children = this._children;

                for (let i = 0; i < children.length; ++i) {
                  children[i]._destroyImmediate();
                }

                const comps = this._components;

                for (let i = 0; i < comps.length; ++i) {
                  comps[i]._destroyImmediate();
                }

                return destroyByParent;
              }

            }, _class3$5.idGenerator = idGenerator$2, _class3$5._stacks = [[]], _class3$5._stackId = 0, _temp$8), (_applyDecoratedDescriptor(_class2$8.prototype, "_persistNode", [property], Object.getOwnPropertyDescriptor(_class2$8.prototype, "_persistNode"), _class2$8.prototype), _applyDecoratedDescriptor(_class2$8.prototype, "name", [editable], Object.getOwnPropertyDescriptor(_class2$8.prototype, "name"), _class2$8.prototype), _applyDecoratedDescriptor(_class2$8.prototype, "children", [editable], Object.getOwnPropertyDescriptor(_class2$8.prototype, "children"), _class2$8.prototype), _applyDecoratedDescriptor(_class2$8.prototype, "active", [editable], Object.getOwnPropertyDescriptor(_class2$8.prototype, "active"), _class2$8.prototype), _applyDecoratedDescriptor(_class2$8.prototype, "activeInHierarchy", [editable], Object.getOwnPropertyDescriptor(_class2$8.prototype, "activeInHierarchy"), _class2$8.prototype), _applyDecoratedDescriptor(_class2$8.prototype, "parent", [editable], Object.getOwnPropertyDescriptor(_class2$8.prototype, "parent"), _class2$8.prototype), _descriptor$6 = _applyDecoratedDescriptor(_class2$8.prototype, "_parent", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor2$2 = _applyDecoratedDescriptor(_class2$8.prototype, "_children", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor3$2 = _applyDecoratedDescriptor(_class2$8.prototype, "_active", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return true;
              }
            }), _descriptor4$1 = _applyDecoratedDescriptor(_class2$8.prototype, "_components", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor5$1 = _applyDecoratedDescriptor(_class2$8.prototype, "_prefab", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class2$8)) || _class$9));
            legacyCC._BaseNode = BaseNode;

            function createNodeWithPrefab(node) {
              const prefabInfo = node._prefab;

              if (!prefabInfo) {
                return;
              }

              const prefabInstance = prefabInfo.instance;

              if (!prefabInstance) {
                return;
              }

              if (!prefabInfo.asset) {
                {
                  errorID(3701, node.name);
                }

                prefabInfo.instance = undefined;
                return;
              }

              const _objFlags = node._objFlags;
              const _parent = node._parent;
              const _id = node._id;
              const _prefab = node._prefab;
              legacyCC.game._isCloning = true;

              {
                prefabInfo.asset._doInstantiate(node);
              }

              legacyCC.game._isCloning = false;
              node._objFlags = _objFlags;
              node._parent = _parent;
              node._id = _id;

              if (node._prefab) {
                node._prefab.instance = _prefab === null || _prefab === void 0 ? void 0 : _prefab.instance;
              }
            }
            function generateTargetMap(node, targetMap, isRoot) {
              var _node$_prefab;

              if (!targetMap) {
                return;
              }

              let curTargetMap = targetMap;
              const prefabInstance = (_node$_prefab = node._prefab) === null || _node$_prefab === void 0 ? void 0 : _node$_prefab.instance;

              if (!isRoot && prefabInstance) {
                targetMap[prefabInstance.fileId] = {};
                curTargetMap = targetMap[prefabInstance.fileId];
              }

              const prefabInfo = node._prefab;

              if (prefabInfo) {
                curTargetMap[prefabInfo.fileId] = node;
              }

              const components = node.components;

              for (let i = 0; i < components.length; i++) {
                const comp = components[i];

                if (comp.__prefab) {
                  curTargetMap[comp.__prefab.fileId] = comp;
                }
              }

              for (let i = 0; i < node.children.length; i++) {
                const childNode = node.children[i];
                generateTargetMap(childNode, curTargetMap, false);
              }
            }
            function getTarget(localID, targetMap) {
              if (!localID) {
                return null;
              }

              let target = null;
              let targetIter = targetMap;

              for (let i = 0; i < localID.length; i++) {
                if (!targetIter) {
                  return null;
                }

                targetIter = targetIter[localID[i]];
              }

              target = targetIter;
              return target;
            }
            function applyMountedChildren(node, mountedChildren, targetMap) {
              if (!mountedChildren) {
                return;
              }

              for (let i = 0; i < mountedChildren.length; i++) {
                const childInfo = mountedChildren[i];

                if (childInfo && childInfo.targetInfo) {
                  const target = getTarget(childInfo.targetInfo.localID, targetMap);

                  if (!target) {
                    continue;
                  }

                  let curTargetMap = targetMap;
                  const localID = childInfo.targetInfo.localID;

                  if (localID.length > 0) {
                    for (let i = 0; i < localID.length - 1; i++) {
                      curTargetMap = curTargetMap[localID[i]];
                    }
                  }

                  if (childInfo.nodes) {
                    for (let i = 0; i < childInfo.nodes.length; i++) {
                      const childNode = childInfo.nodes[i];

                      if (!childNode) {
                        continue;
                      }

                      target._children.push(childNode);

                      childNode._parent = target;

                      generateTargetMap(childNode, curTargetMap, false);
                      childNode._siblingIndex = target._children.length - 1;

                      childNode._onBatchCreated(false);
                    }
                  }
                }
              }
            }
            function applyMountedComponents(node, mountedComponents, targetMap) {
              if (!mountedComponents) {
                return;
              }

              for (let i = 0; i < mountedComponents.length; i++) {
                const componentsInfo = mountedComponents[i];

                if (componentsInfo && componentsInfo.targetInfo) {
                  const target = getTarget(componentsInfo.targetInfo.localID, targetMap);

                  if (!target) {
                    continue;
                  }

                  if (componentsInfo.components) {
                    for (let i = 0; i < componentsInfo.components.length; i++) {
                      const comp = componentsInfo.components[i];

                      if (!comp) {
                        continue;
                      }

                      comp.node = target;

                      target._components.push(comp);
                    }
                  }
                }
              }
            }
            function applyRemovedComponents(node, removedComponents, targetMap) {
              if (!removedComponents) {
                return;
              }

              for (let i = 0; i < removedComponents.length; i++) {
                const targetInfo = removedComponents[i];

                if (targetInfo) {
                  const target = getTarget(targetInfo.localID, targetMap);

                  if (!target || !target.node) {
                    continue;
                  }

                  const index = target.node.components.indexOf(target);

                  if (index >= 0) {
                    target.node._components.splice(index, 1);
                  }
                }
              }
            }
            function applyPropertyOverrides(node, propertyOverrides, targetMap) {
              if (propertyOverrides.length <= 0) {
                return;
              }

              let target = null;

              for (let i = 0; i < propertyOverrides.length; i++) {
                const propOverride = propertyOverrides[i];

                if (propOverride && propOverride.targetInfo) {
                  const targetInfo = propOverride.targetInfo;
                  target = getTarget(targetInfo.localID, targetMap);

                  if (!target) {
                    continue;
                  }

                  let targetPropOwner = target;
                  const propertyPath = propOverride.propertyPath.slice();

                  if (propertyPath.length > 0) {
                    const targetPropName = propertyPath.pop();

                    if (!targetPropName) {
                      continue;
                    }

                    for (let i = 0; i < propertyPath.length; i++) {
                      const propName = propertyPath[i];
                      targetPropOwner = targetPropOwner[propName];

                      if (!targetPropOwner) {
                        break;
                      }
                    }

                    if (!targetPropOwner) {
                      continue;
                    }

                    if (Array.isArray(targetPropOwner)) {
                      if (targetPropName === 'length') {
                        targetPropOwner[targetPropName] = propOverride.value;
                      } else {
                        const index = Number.parseInt(targetPropName);

                        if (Number.isInteger(index) && index < targetPropOwner.length) {
                          targetPropOwner[targetPropName] = propOverride.value;
                        }
                      }
                    } else {
                      targetPropOwner[targetPropName] = propOverride.value;
                    }
                  }
                }
              }
            }
            function applyTargetOverrides(node) {
              var _node$_prefab2;

              const targetOverrides = (_node$_prefab2 = node._prefab) === null || _node$_prefab2 === void 0 ? void 0 : _node$_prefab2.targetOverrides;

              if (targetOverrides) {
                for (let i = 0; i < targetOverrides.length; i++) {
                  var _targetOverride$targe, _targetOverride$targe2;

                  const targetOverride = targetOverrides[i];
                  let source = targetOverride.source;
                  const sourceInfo = targetOverride.sourceInfo;

                  if (sourceInfo) {
                    var _targetOverride$sourc, _targetOverride$sourc2;

                    const sourceInstance = (_targetOverride$sourc = targetOverride.source) === null || _targetOverride$sourc === void 0 ? void 0 : (_targetOverride$sourc2 = _targetOverride$sourc._prefab) === null || _targetOverride$sourc2 === void 0 ? void 0 : _targetOverride$sourc2.instance;

                    if (sourceInstance && sourceInstance.targetMap) {
                      source = getTarget(sourceInfo.localID, sourceInstance.targetMap);
                    }
                  }

                  if (!source) {
                    continue;
                  }

                  let target = null;
                  const targetInfo = targetOverride.targetInfo;

                  if (!targetInfo) {
                    continue;
                  }

                  const targetInstance = (_targetOverride$targe = targetOverride.target) === null || _targetOverride$targe === void 0 ? void 0 : (_targetOverride$targe2 = _targetOverride$targe._prefab) === null || _targetOverride$targe2 === void 0 ? void 0 : _targetOverride$targe2.instance;

                  if (!targetInstance || !targetInstance.targetMap) {
                    continue;
                  }

                  target = getTarget(targetInfo.localID, targetInstance.targetMap);

                  if (!target) {
                    continue;
                  }

                  const propertyPath = targetOverride.propertyPath.slice();
                  let targetPropOwner = source;

                  if (propertyPath.length > 0) {
                    const targetPropName = propertyPath.pop();

                    if (!targetPropName) {
                      return;
                    }

                    for (let i = 0; i < propertyPath.length; i++) {
                      const propName = propertyPath[i];
                      targetPropOwner = targetPropOwner[propName];

                      if (!targetPropOwner) {
                        break;
                      }
                    }

                    if (!targetPropOwner) {
                      continue;
                    }

                    targetPropOwner[targetPropName] = target;
                  }
                }
              }
            }

            var _dec$a, _dec2$4, _class$a, _class2$9, _descriptor$7, _descriptor2$3, _descriptor3$3, _descriptor4$2, _descriptor5$2, _class3$6, _temp$9;
            const v3_a = new Vec3();
            const q_a = new Quat();
            const q_b = new Quat();
            const array_a = new Array(10);
            const qt_1$1 = new Quat();
            const m3_1$2 = new Mat3();
            const m3_scaling = new Mat3();
            const m4_1 = new Mat4();
            const bookOfChange = new Map();
            let Node$1 = exports('cw', (_dec$a = ccclass('cc.Node'), _dec2$4 = type(Vec3), _dec$a(_class$a = (_class2$9 = (_temp$9 = _class3$6 = class Node extends BaseNode {
              constructor(name) {
                super(name);
                this._uiProps = new NodeUIProperties(this);
                this._static = false;
                this._pos = new Vec3();
                this._rot = new Quat();
                this._scale = new Vec3(1, 1, 1);
                this._mat = new Mat4();

                _initializerDefineProperty(this, "_lpos", _descriptor$7, this);

                _initializerDefineProperty(this, "_lrot", _descriptor2$3, this);

                _initializerDefineProperty(this, "_lscale", _descriptor3$3, this);

                _initializerDefineProperty(this, "_layer", _descriptor4$2, this);

                _initializerDefineProperty(this, "_euler", _descriptor5$2, this);

                this._dirtyFlags = TransformBit.NONE;
                this._eulerDirty = false;
                this._poolHandle = NULL_HANDLE;
                this._poolHandle = NodePool.alloc();
                NodePool.set(this._poolHandle, NodeView.LAYER, this._layer);
              }

              static isNode(obj) {
                return obj instanceof Node && (obj.constructor === Node || !(obj instanceof legacyCC.Scene));
              }

              destroy() {
                if (this._poolHandle) {
                  NodePool.free(this._poolHandle);
                  this._poolHandle = NULL_HANDLE;
                }

                return super.destroy();
              }

              get handle() {
                return this._poolHandle;
              }

              get position() {
                return this._lpos;
              }

              set position(val) {
                this.setPosition(val);
              }

              get worldPosition() {
                this.updateWorldTransform();
                return this._pos;
              }

              set worldPosition(val) {
                this.setWorldPosition(val);
              }

              get rotation() {
                return this._lrot;
              }

              set rotation(val) {
                this.setRotation(val);
              }

              set eulerAngles(val) {
                this.setRotationFromEuler(val.x, val.y, val.z);
              }

              get eulerAngles() {
                if (this._eulerDirty) {
                  Quat.toEuler(this._euler, this._lrot);
                  this._eulerDirty = false;
                }

                return this._euler;
              }

              get angle() {
                return this._euler.z;
              }

              set angle(val) {
                Vec3.set(this._euler, 0, 0, val);
                Quat.fromAngleZ(this._lrot, val);
                this._eulerDirty = false;
                this.invalidateChildren(TransformBit.ROTATION);

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
                }
              }

              get worldRotation() {
                this.updateWorldTransform();
                return this._rot;
              }

              set worldRotation(val) {
                this.setWorldRotation(val);
              }

              get scale() {
                return this._lscale;
              }

              set scale(val) {
                this.setScale(val);
              }

              get worldScale() {
                this.updateWorldTransform();
                return this._scale;
              }

              set worldScale(val) {
                this.setWorldScale(val);
              }

              set matrix(val) {
                Mat4.toRTS(val, this._lrot, this._lpos, this._lscale);
                this.invalidateChildren(TransformBit.TRS);
                this._eulerDirty = true;

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.TRS);
                }
              }

              get worldMatrix() {
                this.updateWorldTransform();
                return this._mat;
              }

              get forward() {
                return Vec3.transformQuat(new Vec3(), Vec3.FORWARD, this.worldRotation);
              }

              set forward(dir) {
                const len = dir.length();
                Vec3.multiplyScalar(v3_a, dir, -1 / len);
                Quat.fromViewUp(q_a, v3_a);
                this.setWorldRotation(q_a);
              }

              set layer(l) {
                this._layer = l;
                NodePool.set(this._poolHandle, NodeView.LAYER, this._layer);
                this.emit(SystemEventType.LAYER_CHANGED, this._layer);
              }

              get layer() {
                return this._layer;
              }

              get hasChangedFlags() {
                return bookOfChange.get(this) || 0;
              }

              set hasChangedFlags(val) {
                bookOfChange.set(this, val);
                NodePool.set(this._poolHandle, NodeView.FLAGS_CHANGED, val);
              }

              setParent(value, keepWorldTransform = false) {
                if (keepWorldTransform) {
                  this.updateWorldTransform();
                }

                super.setParent(value, keepWorldTransform);
              }

              _onSetParent(oldParent, keepWorldTransform) {
                super._onSetParent(oldParent, keepWorldTransform);

                if (keepWorldTransform) {
                  const parent = this._parent;

                  if (parent) {
                    parent.updateWorldTransform();
                    Mat4.multiply(m4_1, Mat4.invert(m4_1, parent._mat), this._mat);
                    Mat4.toRTS(m4_1, this._lrot, this._lpos, this._lscale);
                  } else {
                    Vec3.copy(this._lpos, this._pos);
                    Quat.copy(this._lrot, this._rot);
                    Vec3.copy(this._lscale, this._scale);
                  }

                  this._eulerDirty = true;
                }

                this.invalidateChildren(TransformBit.TRS);
              }

              _onHierarchyChanged(oldParent) {
                this.eventProcessor.reattach();

                super._onHierarchyChangedBase(oldParent);
              }

              _onBatchCreated(dontSyncChildPrefab) {
                var _this$_prefab;

                NodePool.set(this._poolHandle, NodeView.LAYER, this._layer);
                NodePool.setVec3(this._poolHandle, NodeView.WORLD_SCALE, this._scale);
                const prefabInstance = (_this$_prefab = this._prefab) === null || _this$_prefab === void 0 ? void 0 : _this$_prefab.instance;

                if (!dontSyncChildPrefab && prefabInstance) {
                  createNodeWithPrefab(this);
                }

                this.hasChangedFlags = TransformBit.TRS;
                this._dirtyFlags = TransformBit.TRS;
                const len = this._children.length;

                for (let i = 0; i < len; ++i) {
                  this._children[i]._siblingIndex = i;

                  this._children[i]._onBatchCreated(dontSyncChildPrefab);
                }

                if (!dontSyncChildPrefab && prefabInstance) {
                  const targetMap = {};
                  prefabInstance.targetMap = targetMap;
                  generateTargetMap(this, targetMap, true);
                  applyMountedChildren(this, prefabInstance.mountedChildren, targetMap);
                  applyRemovedComponents(this, prefabInstance.removedComponents, targetMap);
                  applyMountedComponents(this, prefabInstance.mountedComponents, targetMap);
                  applyPropertyOverrides(this, prefabInstance.propertyOverrides, targetMap);
                }

                applyTargetOverrides(this);
              }

              _onBeforeSerialize() {
                this.eulerAngles;
              }

              _onPostActivated(active) {
                if (active) {
                  eventManager.resumeTarget(this);
                  this.invalidateChildren(TransformBit.TRS);
                } else {
                  eventManager.pauseTarget(this);
                }
              }

              translate(trans, ns) {
                const space = ns || NodeSpace.LOCAL;

                if (space === NodeSpace.LOCAL) {
                  Vec3.transformQuat(v3_a, trans, this._lrot);
                  this._lpos.x += v3_a.x;
                  this._lpos.y += v3_a.y;
                  this._lpos.z += v3_a.z;
                } else if (space === NodeSpace.WORLD) {
                  if (this._parent) {
                    Quat.invert(q_a, this._parent.worldRotation);
                    Vec3.transformQuat(v3_a, trans, q_a);
                    const scale = this.worldScale;
                    this._lpos.x += v3_a.x / scale.x;
                    this._lpos.y += v3_a.y / scale.y;
                    this._lpos.z += v3_a.z / scale.z;
                  } else {
                    this._lpos.x += trans.x;
                    this._lpos.y += trans.y;
                    this._lpos.z += trans.z;
                  }
                }

                this.invalidateChildren(TransformBit.POSITION);

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.POSITION);
                }

                NodePool.setVec3(this._poolHandle, NodeView.WORLD_POSITION, this.worldPosition);
              }

              rotate(rot, ns) {
                const space = ns || NodeSpace.LOCAL;
                Quat.normalize(q_a, rot);

                if (space === NodeSpace.LOCAL) {
                  Quat.multiply(this._lrot, this._lrot, q_a);
                } else if (space === NodeSpace.WORLD) {
                  const worldRot = this.worldRotation;
                  Quat.multiply(q_b, q_a, worldRot);
                  Quat.invert(q_a, worldRot);
                  Quat.multiply(q_b, q_a, q_b);
                  Quat.multiply(this._lrot, this._lrot, q_b);
                }

                this._eulerDirty = true;
                this.invalidateChildren(TransformBit.ROTATION);

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
                }

                NodePool.setVec4(this._poolHandle, NodeView.WORLD_ROTATION, this.worldRotation);
              }

              lookAt(pos, up) {
                this.getWorldPosition(v3_a);
                Vec3.subtract(v3_a, v3_a, pos);
                Vec3.normalize(v3_a, v3_a);
                Quat.fromViewUp(q_a, v3_a, up);
                this.setWorldRotation(q_a);
              }

              invalidateChildren(dirtyBit) {
                const hasChanegdFlags = this.hasChangedFlags;

                if ((this._dirtyFlags & hasChanegdFlags & dirtyBit) === dirtyBit) {
                  return;
                }

                this._dirtyFlags |= dirtyBit;
                this.hasChangedFlags = hasChanegdFlags | dirtyBit;
                const newDirtyBit = dirtyBit | TransformBit.POSITION;
                const len = this._children.length;

                for (let i = 0; i < len; ++i) {
                  const child = this._children[i];

                  if (child.isValid) {
                    child.invalidateChildren(newDirtyBit);
                  }
                }
              }

              updateWorldTransform() {
                if (!this._dirtyFlags) {
                  return;
                }

                let cur = this;
                let i = 0;

                while (cur && cur._dirtyFlags) {
                  array_a[i++] = cur;
                  cur = cur._parent;
                }

                let child;
                let dirtyBits = 0;

                while (i) {
                  child = array_a[--i];
                  dirtyBits |= child._dirtyFlags;

                  if (cur) {
                    if (dirtyBits & TransformBit.POSITION) {
                      Vec3.transformMat4(child._pos, child._lpos, cur._mat);
                      child._mat.m12 = child._pos.x;
                      child._mat.m13 = child._pos.y;
                      child._mat.m14 = child._pos.z;
                      NodePool.setVec3(child._poolHandle, NodeView.WORLD_POSITION, child._pos);
                    }

                    if (dirtyBits & TransformBit.RS) {
                      Mat4.fromRTS(child._mat, child._lrot, child._lpos, child._lscale);
                      Mat4.multiply(child._mat, cur._mat, child._mat);

                      if (dirtyBits & TransformBit.ROTATION) {
                        Quat.multiply(child._rot, cur._rot, child._lrot);
                        NodePool.setVec4(child._poolHandle, NodeView.WORLD_ROTATION, child._rot);
                      }

                      Mat3.fromQuat(m3_1$2, Quat.conjugate(qt_1$1, child._rot));
                      Mat3.multiplyMat4(m3_1$2, m3_1$2, child._mat);
                      child._scale.x = m3_1$2.m00;
                      child._scale.y = m3_1$2.m04;
                      child._scale.z = m3_1$2.m08;
                      NodePool.setVec3(child._poolHandle, NodeView.WORLD_SCALE, child._scale);
                    }
                  } else {
                    if (dirtyBits & TransformBit.POSITION) {
                      Vec3.copy(child._pos, child._lpos);
                      child._mat.m12 = child._pos.x;
                      child._mat.m13 = child._pos.y;
                      child._mat.m14 = child._pos.z;
                      NodePool.setVec3(child._poolHandle, NodeView.WORLD_POSITION, child._pos);
                    }

                    if (dirtyBits & TransformBit.RS) {
                      if (dirtyBits & TransformBit.ROTATION) {
                        Quat.copy(child._rot, child._lrot);
                        NodePool.setVec4(child._poolHandle, NodeView.WORLD_ROTATION, child._rot);
                      }

                      if (dirtyBits & TransformBit.SCALE) {
                        Vec3.copy(child._scale, child._lscale);
                        NodePool.setVec3(child._poolHandle, NodeView.WORLD_SCALE, child._scale);
                        Mat4.fromRTS(child._mat, child._rot, child._pos, child._scale);
                      }
                    }
                  }

                  if (dirtyBits !== TransformBit.NONE) {
                    NodePool.setMat4(child._poolHandle, NodeView.WORLD_MATRIX, child._mat);
                  }

                  child._dirtyFlags = TransformBit.NONE;
                  cur = child;
                }
              }

              setPosition(val, y, z) {
                if (y === undefined && z === undefined) {
                  Vec3.copy(this._lpos, val);
                } else if (z === undefined) {
                  Vec3.set(this._lpos, val, y, this._lpos.z);
                } else {
                  Vec3.set(this._lpos, val, y, z);
                }

                this.invalidateChildren(TransformBit.POSITION);

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.POSITION);
                }
              }

              getPosition(out) {
                if (out) {
                  return Vec3.set(out, this._lpos.x, this._lpos.y, this._lpos.z);
                }

                return Vec3.copy(new Vec3(), this._lpos);
              }

              setRotation(val, y, z, w) {
                if (y === undefined || z === undefined || w === undefined) {
                  Quat.copy(this._lrot, val);
                } else {
                  Quat.set(this._lrot, val, y, z, w);
                }

                this._eulerDirty = true;
                this.invalidateChildren(TransformBit.ROTATION);

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
                }
              }

              setRotationFromEuler(val, y, zOpt) {
                const z = zOpt === undefined ? this._euler.z : zOpt;

                if (y === undefined) {
                  Vec3.copy(this._euler, val);
                  Quat.fromEuler(this._lrot, val.x, val.y, val.z);
                } else {
                  Vec3.set(this._euler, val, y, z);
                  Quat.fromEuler(this._lrot, val, y, z);
                }

                this._eulerDirty = false;
                this.invalidateChildren(TransformBit.ROTATION);

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
                }
              }

              getRotation(out) {
                if (out) {
                  return Quat.set(out, this._lrot.x, this._lrot.y, this._lrot.z, this._lrot.w);
                }

                return Quat.copy(new Quat(), this._lrot);
              }

              setScale(val, y, z) {
                if (y === undefined && z === undefined) {
                  Vec3.copy(this._lscale, val);
                } else if (z === undefined) {
                  Vec3.set(this._lscale, val, y, this._lscale.z);
                } else {
                  Vec3.set(this._lscale, val, y, z);
                }

                this.invalidateChildren(TransformBit.SCALE);

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.SCALE);
                }
              }

              getScale(out) {
                if (out) {
                  return Vec3.set(out, this._lscale.x, this._lscale.y, this._lscale.z);
                }

                return Vec3.copy(new Vec3(), this._lscale);
              }

              inverseTransformPoint(out, p) {
                Vec3.copy(out, p);
                let cur = this;
                let i = 0;

                while (cur._parent) {
                  array_a[i++] = cur;
                  cur = cur._parent;
                }

                while (i >= 0) {
                  Vec3.transformInverseRTS(out, out, cur._lrot, cur._lpos, cur._lscale);
                  cur = array_a[--i];
                }

                return out;
              }

              setWorldPosition(val, y, z) {
                if (y === undefined || z === undefined) {
                  Vec3.copy(this._pos, val);
                } else {
                  Vec3.set(this._pos, val, y, z);
                }

                NodePool.setVec3(this._poolHandle, NodeView.WORLD_POSITION, this._pos);
                const parent = this._parent;
                const local = this._lpos;

                if (parent) {
                  parent.updateWorldTransform();
                  Vec3.transformMat4(local, this._pos, Mat4.invert(m4_1, parent._mat));
                } else {
                  Vec3.copy(local, this._pos);
                }

                this.invalidateChildren(TransformBit.POSITION);

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.POSITION);
                }
              }

              getWorldPosition(out) {
                this.updateWorldTransform();

                if (out) {
                  return Vec3.copy(out, this._pos);
                }

                return Vec3.copy(new Vec3(), this._pos);
              }

              setWorldRotation(val, y, z, w) {
                if (y === undefined || z === undefined || w === undefined) {
                  Quat.copy(this._rot, val);
                } else {
                  Quat.set(this._rot, val, y, z, w);
                }

                NodePool.setVec4(this._poolHandle, NodeView.WORLD_ROTATION, this._rot);

                if (this._parent) {
                  this._parent.updateWorldTransform();

                  Quat.multiply(this._lrot, Quat.conjugate(this._lrot, this._parent._rot), this._rot);
                } else {
                  Quat.copy(this._lrot, this._rot);
                }

                this._eulerDirty = true;
                this.invalidateChildren(TransformBit.ROTATION);

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
                }
              }

              setWorldRotationFromEuler(x, y, z) {
                Quat.fromEuler(this._rot, x, y, z);

                if (this._parent) {
                  this._parent.updateWorldTransform();

                  Quat.multiply(this._lrot, Quat.conjugate(this._lrot, this._parent._rot), this._rot);
                } else {
                  Quat.copy(this._lrot, this._rot);
                }

                this._eulerDirty = true;
                this.invalidateChildren(TransformBit.ROTATION);

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.ROTATION);
                }
              }

              getWorldRotation(out) {
                this.updateWorldTransform();

                if (out) {
                  return Quat.copy(out, this._rot);
                }

                return Quat.copy(new Quat(), this._rot);
              }

              setWorldScale(val, y, z) {
                if (y === undefined || z === undefined) {
                  Vec3.copy(this._scale, val);
                } else {
                  Vec3.set(this._scale, val, y, z);
                }

                NodePool.setVec3(this._poolHandle, NodeView.WORLD_SCALE, this._scale);
                const parent = this._parent;

                if (parent) {
                  parent.updateWorldTransform();
                  Mat3.fromQuat(m3_1$2, Quat.conjugate(qt_1$1, parent._rot));
                  Mat3.multiplyMat4(m3_1$2, m3_1$2, parent._mat);
                  m3_scaling.m00 = this._scale.x;
                  m3_scaling.m04 = this._scale.y;
                  m3_scaling.m08 = this._scale.z;
                  Mat3.multiply(m3_1$2, m3_scaling, Mat3.invert(m3_1$2, m3_1$2));
                  this._lscale.x = Vec3.set(v3_a, m3_1$2.m00, m3_1$2.m01, m3_1$2.m02).length();
                  this._lscale.y = Vec3.set(v3_a, m3_1$2.m03, m3_1$2.m04, m3_1$2.m05).length();
                  this._lscale.z = Vec3.set(v3_a, m3_1$2.m06, m3_1$2.m07, m3_1$2.m08).length();
                } else {
                  Vec3.copy(this._lscale, this._scale);
                }

                this.invalidateChildren(TransformBit.SCALE);

                if (this._eventMask & TRANSFORM_ON) {
                  this.emit(SystemEventType.TRANSFORM_CHANGED, TransformBit.SCALE);
                }
              }

              getWorldScale(out) {
                this.updateWorldTransform();

                if (out) {
                  return Vec3.copy(out, this._scale);
                }

                return Vec3.copy(new Vec3(), this._scale);
              }

              getWorldMatrix(out) {
                this.updateWorldTransform();
                const target = out || new Mat4();
                return Mat4.copy(target, this._mat);
              }

              getWorldRS(out) {
                this.updateWorldTransform();
                const target = out || new Mat4();
                Mat4.copy(target, this._mat);
                target.m12 = 0;
                target.m13 = 0;
                target.m14 = 0;
                return target;
              }

              getWorldRT(out) {
                this.updateWorldTransform();
                const target = out || new Mat4();
                return Mat4.fromRT(target, this._rot, this._pos);
              }

              setRTS(rot, pos, scale) {
                let dirtyBit = 0;

                if (rot) {
                  dirtyBit |= TransformBit.ROTATION;

                  if (rot.w !== undefined) {
                    Quat.copy(this._lrot, rot);
                    this._eulerDirty = true;
                  } else {
                    Vec3.copy(this._euler, rot);
                    Quat.fromEuler(this._lrot, rot.x, rot.y, rot.z);
                    this._eulerDirty = false;
                  }
                }

                if (pos) {
                  Vec3.copy(this._lpos, pos);
                  dirtyBit |= TransformBit.POSITION;
                }

                if (scale) {
                  Vec3.copy(this._lscale, scale);
                  dirtyBit |= TransformBit.SCALE;
                }

                if (dirtyBit) {
                  this.invalidateChildren(dirtyBit);

                  if (this._eventMask & TRANSFORM_ON) {
                    this.emit(SystemEventType.TRANSFORM_CHANGED, dirtyBit);
                  }
                }
              }

              pauseSystemEvents(recursive) {
                eventManager.pauseTarget(this, recursive);
              }

              resumeSystemEvents(recursive) {
                eventManager.resumeTarget(this, recursive);
              }

              static clearBooks() {
                bookOfChange.forEach((v, k, m) => {
                  if (k.isValid) k.hasChangedFlags = TransformBit.NONE;
                });
                bookOfChange.clear();
              }

              syncToNativeTransform() {
                const v = this.hasChangedFlags;

                if (v) {
                  if (v & TransformBit.POSITION) {
                    NodePool.setVec3(this._poolHandle, NodeView.WORLD_POSITION, this.worldPosition);
                  }

                  if (v & TransformBit.ROTATION) {
                    NodePool.setVec3(this._poolHandle, NodeView.WORLD_ROTATION, this.worldRotation);
                  }

                  if (v & TransformBit.SCALE) {
                    NodePool.setVec3(this._poolHandle, NodeView.WORLD_SCALE, this.worldScale);
                  }
                }
              }

              syncFromNativeTransform() {
                const v = NodePool.get(this._poolHandle, NodeView.FLAGS_CHANGED);

                if (v) {
                  if (v & TransformBit.POSITION) {
                    NodePool.getVec3(this._poolHandle, NodeView.WORLD_POSITION, v3_a);
                    this.setWorldPosition(v3_a);
                  }

                  if (v & TransformBit.ROTATION) {
                    NodePool.getVec4(this._poolHandle, NodeView.WORLD_ROTATION, q_a);
                    this.setWorldRotation(q_a);
                  }

                  if (v & TransformBit.SCALE) {
                    NodePool.getVec3(this._poolHandle, NodeView.WORLD_SCALE, v3_a);
                    this.setWorldScale(v3_a);
                  }
                }
              }

            }, _class3$6.bookOfChange = bookOfChange, _class3$6.EventType = SystemEventType, _class3$6.NodeSpace = NodeSpace, _class3$6.TransformDirtyBit = TransformBit, _class3$6.TransformBit = TransformBit, _temp$9), (_descriptor$7 = _applyDecoratedDescriptor(_class2$9.prototype, "_lpos", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Vec3();
              }
            }), _descriptor2$3 = _applyDecoratedDescriptor(_class2$9.prototype, "_lrot", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Quat();
              }
            }), _descriptor3$3 = _applyDecoratedDescriptor(_class2$9.prototype, "_lscale", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Vec3(1, 1, 1);
              }
            }), _descriptor4$2 = _applyDecoratedDescriptor(_class2$9.prototype, "_layer", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Layers.Enum.DEFAULT;
              }
            }), _descriptor5$2 = _applyDecoratedDescriptor(_class2$9.prototype, "_euler", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Vec3();
              }
            }), _applyDecoratedDescriptor(_class2$9.prototype, "eulerAngles", [_dec2$4], Object.getOwnPropertyDescriptor(_class2$9.prototype, "eulerAngles"), _class2$9.prototype), _applyDecoratedDescriptor(_class2$9.prototype, "angle", [editable], Object.getOwnPropertyDescriptor(_class2$9.prototype, "angle"), _class2$9.prototype), _applyDecoratedDescriptor(_class2$9.prototype, "layer", [editable], Object.getOwnPropertyDescriptor(_class2$9.prototype, "layer"), _class2$9.prototype)), _class2$9)) || _class$a));
            legacyCC.Node = Node$1;

            var _dec$b, _class$b, _class2$a, _descriptor$8, _temp$a, _dec2$5, _dec3$2, _dec4$1, _dec5, _dec6, _class4, _class5, _descriptor2$4, _descriptor3$4, _descriptor4$3, _descriptor5$3, _descriptor6$1, _temp2, _dec7, _class7, _class8, _descriptor7$1, _temp3, _dec8, _dec9, _class10, _class11, _descriptor8$1, _descriptor9, _descriptor10, _temp4, _dec10, _dec11, _dec12, _class13, _class14, _descriptor11, _descriptor12, _temp5, _dec13, _dec14, _dec15, _class16, _class17, _descriptor13, _descriptor14, _temp6, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _class19, _class20, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _temp7, _dec22, _dec23, _dec24, _dec25, _dec26, _class22, _class23, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _temp8;

            let TargetInfo = (_dec$b = ccclass('cc.TargetInfo'), _dec$b(_class$b = (_class2$a = (_temp$a = class TargetInfo {
              constructor() {
                _initializerDefineProperty(this, "localID", _descriptor$8, this);
              }

            }, _temp$a), (_descriptor$8 = _applyDecoratedDescriptor(_class2$a.prototype, "localID", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class2$a)) || _class$b);
            let TargetOverrideInfo = (_dec2$5 = ccclass('cc.TargetOverrideInfo'), _dec3$2 = type(CCObject), _dec4$1 = type(TargetInfo), _dec5 = type(Node$1), _dec6 = type(TargetInfo), _dec2$5(_class4 = (_class5 = (_temp2 = class TargetOverrideInfo {
              constructor() {
                _initializerDefineProperty(this, "source", _descriptor2$4, this);

                _initializerDefineProperty(this, "sourceInfo", _descriptor3$4, this);

                _initializerDefineProperty(this, "propertyPath", _descriptor4$3, this);

                _initializerDefineProperty(this, "target", _descriptor5$3, this);

                _initializerDefineProperty(this, "targetInfo", _descriptor6$1, this);
              }

            }, _temp2), (_descriptor2$4 = _applyDecoratedDescriptor(_class5.prototype, "source", [serializable, _dec3$2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor3$4 = _applyDecoratedDescriptor(_class5.prototype, "sourceInfo", [serializable, _dec4$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor4$3 = _applyDecoratedDescriptor(_class5.prototype, "propertyPath", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor5$3 = _applyDecoratedDescriptor(_class5.prototype, "target", [serializable, _dec5], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor6$1 = _applyDecoratedDescriptor(_class5.prototype, "targetInfo", [serializable, _dec6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class5)) || _class4);
            let CompPrefabInfo = (_dec7 = ccclass('cc.CompPrefabInfo'), _dec7(_class7 = (_class8 = (_temp3 = class CompPrefabInfo {
              constructor() {
                _initializerDefineProperty(this, "fileId", _descriptor7$1, this);
              }

            }, _temp3), (_descriptor7$1 = _applyDecoratedDescriptor(_class8.prototype, "fileId", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            })), _class8)) || _class7);
            let PropertyOverrideInfo = (_dec8 = ccclass('CCPropertyOverrideInfo'), _dec9 = type(TargetInfo), _dec8(_class10 = (_class11 = (_temp4 = class PropertyOverrideInfo {
              constructor() {
                _initializerDefineProperty(this, "targetInfo", _descriptor8$1, this);

                _initializerDefineProperty(this, "propertyPath", _descriptor9, this);

                _initializerDefineProperty(this, "value", _descriptor10, this);
              }

              isTarget(localID, propPath) {
              }

            }, _temp4), (_descriptor8$1 = _applyDecoratedDescriptor(_class11.prototype, "targetInfo", [serializable, _dec9], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor9 = _applyDecoratedDescriptor(_class11.prototype, "propertyPath", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor10 = _applyDecoratedDescriptor(_class11.prototype, "value", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class11)) || _class10);
            let MountedChildrenInfo = (_dec10 = ccclass('cc.MountedChildrenInfo'), _dec11 = type(TargetInfo), _dec12 = type([Node$1]), _dec10(_class13 = (_class14 = (_temp5 = class MountedChildrenInfo {
              constructor() {
                _initializerDefineProperty(this, "targetInfo", _descriptor11, this);

                _initializerDefineProperty(this, "nodes", _descriptor12, this);
              }

              isTarget(localID) {
              }

            }, _temp5), (_descriptor11 = _applyDecoratedDescriptor(_class14.prototype, "targetInfo", [serializable, _dec11], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor12 = _applyDecoratedDescriptor(_class14.prototype, "nodes", [serializable, _dec12], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class14)) || _class13);
            let MountedComponentsInfo = (_dec13 = ccclass('cc.MountedComponentsInfo'), _dec14 = type(TargetInfo), _dec15 = type([Component]), _dec13(_class16 = (_class17 = (_temp6 = class MountedComponentsInfo {
              constructor() {
                _initializerDefineProperty(this, "targetInfo", _descriptor13, this);

                _initializerDefineProperty(this, "components", _descriptor14, this);
              }

              isTarget(localID) {
              }

            }, _temp6), (_descriptor13 = _applyDecoratedDescriptor(_class17.prototype, "targetInfo", [serializable, _dec14], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor14 = _applyDecoratedDescriptor(_class17.prototype, "components", [serializable, _dec15], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class17)) || _class16);
            let PrefabInstance = (_dec16 = ccclass('cc.PrefabInstance'), _dec17 = type(Node$1), _dec18 = type([MountedChildrenInfo]), _dec19 = type([MountedComponentsInfo]), _dec20 = type([PropertyOverrideInfo]), _dec21 = type([TargetInfo]), _dec16(_class19 = (_class20 = (_temp7 = class PrefabInstance {
              constructor() {
                _initializerDefineProperty(this, "fileId", _descriptor15, this);

                _initializerDefineProperty(this, "prefabRootNode", _descriptor16, this);

                _initializerDefineProperty(this, "mountedChildren", _descriptor17, this);

                _initializerDefineProperty(this, "mountedComponents", _descriptor18, this);

                _initializerDefineProperty(this, "propertyOverrides", _descriptor19, this);

                _initializerDefineProperty(this, "removedComponents", _descriptor20, this);

                this.targetMap = {};
              }

              findPropertyOverride(localID, propPath) {
              }

              removePropertyOverride(localID, propPath) {
              }

            }, _temp7), (_descriptor15 = _applyDecoratedDescriptor(_class20.prototype, "fileId", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _descriptor16 = _applyDecoratedDescriptor(_class20.prototype, "prefabRootNode", [serializable, _dec17], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor17 = _applyDecoratedDescriptor(_class20.prototype, "mountedChildren", [serializable, _dec18], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor18 = _applyDecoratedDescriptor(_class20.prototype, "mountedComponents", [serializable, _dec19], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor19 = _applyDecoratedDescriptor(_class20.prototype, "propertyOverrides", [serializable, _dec20], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor20 = _applyDecoratedDescriptor(_class20.prototype, "removedComponents", [serializable, _dec21], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class20)) || _class19);
            let PrefabInfo = (_dec22 = ccclass('cc.PrefabInfo'), _dec23 = type(Node$1), _dec24 = type(legacyCC.Prefab), _dec25 = type(PrefabInstance), _dec26 = type([TargetOverrideInfo]), _dec22(_class22 = (_class23 = (_temp8 = class PrefabInfo {
              constructor() {
                _initializerDefineProperty(this, "root", _descriptor21, this);

                _initializerDefineProperty(this, "asset", _descriptor22, this);

                _initializerDefineProperty(this, "fileId", _descriptor23, this);

                _initializerDefineProperty(this, "instance", _descriptor24, this);

                _initializerDefineProperty(this, "targetOverrides", _descriptor25, this);
              }

            }, _temp8), (_descriptor21 = _applyDecoratedDescriptor(_class23.prototype, "root", [serializable, _dec23], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor22 = _applyDecoratedDescriptor(_class23.prototype, "asset", [serializable, _dec24], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor23 = _applyDecoratedDescriptor(_class23.prototype, "fileId", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _descriptor24 = _applyDecoratedDescriptor(_class23.prototype, "instance", [serializable, _dec25], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            }), _descriptor25 = _applyDecoratedDescriptor(_class23.prototype, "targetOverrides", [serializable, _dec26], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: null
            })), _class23)) || _class22);
            legacyCC._PrefabInfo = PrefabInfo;

            var utils = /*#__PURE__*/Object.freeze({
                __proto__: null,
                TargetInfo: TargetInfo,
                TargetOverrideInfo: TargetOverrideInfo,
                CompPrefabInfo: CompPrefabInfo,
                PropertyOverrideInfo: PropertyOverrideInfo,
                MountedChildrenInfo: MountedChildrenInfo,
                MountedComponentsInfo: MountedComponentsInfo,
                PrefabInstance: PrefabInstance,
                PrefabInfo: PrefabInfo,
                createNodeWithPrefab: createNodeWithPrefab,
                generateTargetMap: generateTargetMap,
                getTarget: getTarget,
                applyMountedChildren: applyMountedChildren,
                applyMountedComponents: applyMountedComponents,
                applyRemovedComponents: applyRemovedComponents,
                applyPropertyOverrides: applyPropertyOverrides,
                applyTargetOverrides: applyTargetOverrides
            });

            var _dec$c, _class$c, _class2$b, _descriptor$9, _descriptor2$5, _class3$7, _temp$b;
            const OptimizationPolicy = Enum({
              AUTO: 0,
              SINGLE_INSTANCE: 1,
              MULTI_INSTANCE: 2
            });
            let Prefab = exports('eY', (_dec$c = ccclass('cc.Prefab'), _dec$c(_class$c = (_class2$b = (_temp$b = _class3$7 = class Prefab extends Asset {
              constructor() {
                super();

                _initializerDefineProperty(this, "data", _descriptor$9, this);

                _initializerDefineProperty(this, "optimizationPolicy", _descriptor2$5, this);

                this._createFunction = void 0;
                this._instantiatedTimes = void 0;
                this._createFunction = null;
                this._instantiatedTimes = 0;
              }

              createNode(cb) {
                const node = legacyCC.instantiate(this);
                node.name = this.name;
                cb(null, node);
              }

              compileCreateFunction() {
                this._createFunction = compile(this.data);
              }

              _doInstantiate(rootToRedirect) {
                if (!this.data._prefab) {
                  warnID(3700);
                }

                if (!this._createFunction) {
                  this.compileCreateFunction();
                }

                return this._createFunction(rootToRedirect);
              }

              _instantiate() {
                let node;
                let useJit = false;

                {
                  if (this.optimizationPolicy === OptimizationPolicy.SINGLE_INSTANCE) {
                    useJit = false;
                  } else if (this.optimizationPolicy === OptimizationPolicy.MULTI_INSTANCE) {
                    useJit = true;
                  } else {
                    useJit = this._instantiatedTimes + 1 >= Prefab.OptimizationPolicyThreshold;
                  }
                }

                if (useJit) {
                  node = this._doInstantiate();

                  this.data._instantiate(node);
                } else {
                  node = this.data._instantiate();
                }

                ++this._instantiatedTimes;
                return node;
              }

              initDefault(uuid) {
                super.initDefault(uuid);
                this.data = new Node$1();
                this.data.name = '(Missing Node)';
                const prefabInfo = new PrefabInfo();
                prefabInfo.asset = this;
                prefabInfo.root = this.data;
                this.data._prefab = prefabInfo;
              }

              validate() {
                return !!this.data;
              }

            }, _class3$7.OptimizationPolicy = OptimizationPolicy, _class3$7.OptimizationPolicyThreshold = 3, _temp$b), (_descriptor$9 = _applyDecoratedDescriptor(_class2$b.prototype, "data", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor2$5 = _applyDecoratedDescriptor(_class2$b.prototype, "optimizationPolicy", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return OptimizationPolicy.AUTO;
              }
            })), _class2$b)) || _class$c));
            js.value(Prefab, '_utils', utils);
            legacyCC.Prefab = Prefab;

            {
              obsolete(legacyCC, 'cc._Prefab', 'Prefab');
            }

            var _dec$d, _dec2$6, _dec3$3, _class$d, _class2$c, _descriptor$a, _temp$c;
            let PrefabLink = exports('eO', (_dec$d = ccclass('cc.PrefabLink'), _dec2$6 = type(Prefab), _dec3$3 = visible(), _dec$d(_class$d = (_class2$c = (_temp$c = class PrefabLink extends Component {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "prefab", _descriptor$a, this);
              }

            }, _temp$c), (_descriptor$a = _applyDecoratedDescriptor(_class2$c.prototype, "prefab", [_dec2$6, serializable, _dec3$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class2$c)) || _class$d));

            const _vec3 = new Vec3();

            function WorldNode3DToLocalNodeUI(mainCamera, wpos, uiNode, out) {
              if (!out) {
                out = new Vec3();
              }

              mainCamera.convertToUINode(wpos, uiNode, out);
              const pos = uiNode.position;
              out.add(pos);
              return out;
            }
            function WorldNode3DToWorldNodeUI(mainCamera, wpos, out) {
              if (!out) {
                out = new Vec3();
              }

              mainCamera.worldToScreen(wpos, out);
              out.x /= legacyCC.view.getScaleX();
              out.y /= legacyCC.view.getScaleY();
              return out;
            }
            const convertUtils = exports('eS', {
              WorldNode3DToLocalNodeUI,
              WorldNode3DToWorldNodeUI
            });
            legacyCC.pipelineUtils = convertUtils;
            replaceProperty(legacyCC.pipelineUtils, 'cc.pipelineUtils', [{
              name: 'WorldNode3DToLocalNodeUI',
              newName: 'convertToUINode',
              targetName: 'cc.Camera.prototype',

              customFunction(...args) {
                const camera = args[0];
                const out = args[3] || _vec3;
                camera.convertToUINode(args[1], args[2], out);
                out.add(args[2].position);
                return args[3] || out.clone();
              }

            }]);

            replaceProperty(SystemEventType, 'Node.EventType', [{
              name: 'POSITION_PART',
              newName: 'TRANSFORM_CHANGED'
            }, {
              name: 'ROTATION_PART',
              newName: 'TRANSFORM_CHANGED'
            }, {
              name: 'SCALE_PART',
              newName: 'TRANSFORM_CHANGED'
            }]);

            class AccelerometerInputSource {
              constructor() {
                this.support = void 0;
                this._intervalInSeconds = 0.2;
                this._intervalId = void 0;
                this._isEnabled = false;
                this._eventTarget = new EventTarget();
                this._didAccelerateFunc = void 0;
                const support = system.isMobile;
                this.support = support;
                this._didAccelerateFunc = this._didAccelerate.bind(this);
              }

              _didAccelerate() {
                const deviceMotionValue = jsb.device.getDeviceMotionValue();
                let x = deviceMotionValue[3] * 0.1;
                let y = deviceMotionValue[4] * 0.1;
                const z = deviceMotionValue[5] * 0.1;
                const orientation = system.getOrientation();
                const tmpX = x;

                if (orientation === Orientation.LANDSCAPE_RIGHT) {
                  x = -y;
                  y = tmpX;
                } else if (orientation === Orientation.LANDSCAPE_LEFT) {
                  x = y;
                  y = -tmpX;
                } else if (orientation === Orientation.PORTRAIT_UPSIDE_DOWN) {
                  x = -x;
                  y = -y;
                }

                if (system.os === OS.ANDROID || system.os === OS.OHOS) {
                  x = -x;
                  y = -y;
                }

                const accelerometer = {
                  type: SystemEventType.DEVICEMOTION,
                  x,
                  y,
                  z,
                  timestamp: performance.now()
                };

                this._eventTarget.emit(SystemEventType.DEVICEMOTION, accelerometer);
              }

              start() {
                if (this._intervalId) {
                  clearInterval(this._intervalId);
                }

                this._intervalId = setInterval(this._didAccelerateFunc, this._intervalInSeconds * 1000);
                jsb.device.setAccelerometerInterval(this._intervalInSeconds);
                jsb.device.setAccelerometerEnabled(true);
                this._isEnabled = true;
              }

              stop() {
                if (this._intervalId) {
                  clearInterval(this._intervalId);
                  this._intervalId = undefined;
                }

                jsb.device.setAccelerometerEnabled(false);
                this._isEnabled = false;
              }

              setInterval(intervalInMileseconds) {
                this._intervalInSeconds = intervalInMileseconds / 1000;
                jsb.device.setAccelerometerInterval(this._intervalInSeconds);

                if (this._isEnabled) {
                  jsb.device.setAccelerometerEnabled(false);
                  jsb.device.setAccelerometerEnabled(true);
                }
              }

              onChange(cb) {
                this._eventTarget.on(SystemEventType.DEVICEMOTION, cb);
              }

            }

            class InputBox {
              constructor() {
                this.support = void 0;
                this.support = true;
              }

              show() {
                throw new Error('Method not implemented.');
              }

              hide() {
                throw new Error('Method not implemented.');
              }

              onChange() {
                throw new Error('Method not implemented.');
              }

              onComplete() {
                throw new Error('Method not implemented.');
              }

              offChange() {
                throw new Error('Method not implemented.');
              }

              offComplete() {
                throw new Error('Method not implemented.');
              }

            }

            class KeyboardInputSource {
              constructor() {
                this.support = void 0;
                this._eventTarget = new EventTarget();
                this.support = !system.isMobile;

                this._registerEvent();
              }

              _registerEvent() {
                jsb.onKeyDown = this._createCallback(SystemEventType.KEY_DOWN);
                jsb.onKeyUp = this._createCallback(SystemEventType.KEY_UP);
              }

              _createCallback(eventType) {
                return event => {
                  const inputEvent = {
                    type: eventType,
                    code: event.keyCode,
                    timestamp: performance.now()
                  };

                  this._eventTarget.emit(eventType, inputEvent);
                };
              }

              onDown(cb) {
                this._eventTarget.on(SystemEventType.KEY_DOWN, cb);
              }

              onUp(cb) {
                this._eventTarget.on(SystemEventType.KEY_UP, cb);
              }

            }

            class MouseInputSource {
              constructor() {
                this.support = void 0;
                this._eventTarget = new EventTarget();
                this.support = !system.isMobile;

                this._registerEvent();
              }

              _getLocation(event) {
                return new Vec2(event.x, event.y);
              }

              _registerEvent() {
                jsb.onMouseDown = this._createCallback(SystemEventType.MOUSE_DOWN);
                jsb.onMouseMove = this._createCallback(SystemEventType.MOUSE_MOVE);
                jsb.onMouseUp = this._createCallback(SystemEventType.MOUSE_UP);

                jsb.onMouseWheel = event => {
                  const location = this._getLocation(event);

                  const viewSize = system.getViewSize();
                  const matchStandardFactor = 120;
                  const inputEvent = {
                    type: SystemEventType.MOUSE_WHEEL,
                    x: location.x,
                    y: viewSize.height - location.y,
                    button: event.button,
                    deltaX: event.wheelDeltaX * matchStandardFactor,
                    deltaY: event.wheelDeltaY * matchStandardFactor,
                    timestamp: performance.now()
                  };

                  this._eventTarget.emit(SystemEventType.MOUSE_WHEEL, inputEvent);
                };
              }

              _createCallback(eventType) {
                return event => {
                  const location = this._getLocation(event);

                  const viewSize = system.getViewSize();
                  const inputEvent = {
                    type: eventType,
                    x: location.x,
                    y: viewSize.height - location.y,
                    button: event.button,
                    timestamp: performance.now()
                  };

                  this._eventTarget.emit(eventType, inputEvent);
                };
              }

              onDown(cb) {
                this._eventTarget.on(SystemEventType.MOUSE_DOWN, cb);
              }

              onMove(cb) {
                this._eventTarget.on(SystemEventType.MOUSE_MOVE, cb);
              }

              onUp(cb) {
                this._eventTarget.on(SystemEventType.MOUSE_UP, cb);
              }

              onWheel(cb) {
                this._eventTarget.on(SystemEventType.MOUSE_WHEEL, cb);
              }

            }

            class TouchInputSource {
              constructor() {
                this.support = void 0;
                this._eventTarget = new EventTarget();
                this.support = true;

                this._registerEvent();
              }

              _registerEvent() {
                jsb.onTouchStart = this._createCallback(SystemEventType.TOUCH_START);
                jsb.onTouchMove = this._createCallback(SystemEventType.TOUCH_MOVE);
                jsb.onTouchEnd = this._createCallback(SystemEventType.TOUCH_END);
                jsb.onTouchCancel = this._createCallback(SystemEventType.TOUCH_CANCEL);
              }

              _createCallback(eventType) {
                return touchList => {
                  const touchDataList = [];
                  const length = touchList.length;
                  const viewSize = system.getViewSize();

                  for (let i = 0; i < length; ++i) {
                    const touch = touchList[i];

                    const location = this._getLocation(touch);

                    const x = location.x;
                    const y = viewSize.height - location.y;
                    const touchData = {
                      identifier: touch.identifier,
                      x,
                      y,
                      force: touch.force
                    };
                    touchDataList.push(touchData);
                  }

                  const inputEvent = {
                    type: eventType,
                    changedTouches: touchDataList,
                    timestamp: performance.now()
                  };

                  this._eventTarget.emit(eventType, inputEvent);
                };
              }

              _getLocation(event) {
                return new Vec2(event.clientX, event.clientY);
              }

              onStart(cb) {
                this._eventTarget.on(SystemEventType.TOUCH_START, cb);
              }

              onMove(cb) {
                this._eventTarget.on(SystemEventType.TOUCH_MOVE, cb);
              }

              onEnd(cb) {
                this._eventTarget.on(SystemEventType.TOUCH_END, cb);
              }

              onCancel(cb) {
                this._eventTarget.on(SystemEventType.TOUCH_CANCEL, cb);
              }

            }

            class Input {
              constructor() {
                this._touch = new TouchInputSource();
                this._mouse = new MouseInputSource();
                this._keyboard = new KeyboardInputSource();
                this._accelerometer = new AccelerometerInputSource();
                this._inputBox = new InputBox();
                this._inputEventList = [];

                this._registerEvent();
              }

              _registerEvent() {}

              _pushEvent(inputEvent) {
                this._inputEventList.push(inputEvent);
              }

              pollEvent() {
                return this._inputEventList.shift();
              }

            }
            const input = new Input();

            const _vec2 = new Vec2();

            class EventMouse extends Event {
              constructor(eventType, bubbles, prevLoc) {
                super(Event.MOUSE, bubbles);
                this.movementX = 0;
                this.movementY = 0;
                this.eventType = void 0;
                this._button = EventMouse.BUTTON_MISSING;
                this._x = 0;
                this._y = 0;
                this._prevX = 0;
                this._prevY = 0;
                this._scrollX = 0;
                this._scrollY = 0;
                this.eventType = eventType;

                if (prevLoc) {
                  this._prevX = prevLoc.x;
                  this._prevY = prevLoc.y;
                }
              }

              setScrollData(scrollX, scrollY) {
                this._scrollX = scrollX;
                this._scrollY = scrollY;
              }

              getScrollX() {
                return this._scrollX;
              }

              getScrollY() {
                return this._scrollY;
              }

              setLocation(x, y) {
                this._x = x;
                this._y = y;
              }

              getLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._x, this._y);
                return out;
              }

              getLocationInView(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._x, legacyCC.view._designResolutionSize.height - this._y);
                return out;
              }

              getUILocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._x, this._y);

                legacyCC.view._convertPointWithScale(out);

                return out;
              }

              getPreviousLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._prevX, this._prevY);
                return out;
              }

              getUIPreviousLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._prevX, this._prevY);

                legacyCC.view._convertPointWithScale(out);

                return out;
              }

              getDelta(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, this._x - this._prevX, this._y - this._prevY);
                return out;
              }

              getDeltaX() {
                return this._x - this._prevX;
              }

              getDeltaY() {
                return this._y - this._prevY;
              }

              getUIDelta(out) {
                if (!out) {
                  out = new Vec2();
                }

                Vec2.set(out, (this._x - this._prevX) / legacyCC.view.getScaleX(), (this._y - this._prevY) / legacyCC.view.getScaleY());
                return out;
              }

              getUIDeltaX() {
                return (this._x - this._prevX) / legacyCC.view.getScaleX();
              }

              getUIDeltaY() {
                return (this._y - this._prevY) / legacyCC.view.getScaleY();
              }

              setButton(button) {
                this._button = button;
              }

              getButton() {
                return this._button;
              }

              getLocationX() {
                return this._x;
              }

              getLocationY() {
                return this._y;
              }

              getUILocationX() {
                const viewport = legacyCC.view.getViewportRect();
                return (this._x - viewport.x) / legacyCC.view.getScaleX();
              }

              getUILocationY() {
                const viewport = legacyCC.view.getViewportRect();
                return (this._y - viewport.y) / legacyCC.view.getScaleY();
              }

            } exports('fc', EventMouse);
            EventMouse.BUTTON_MISSING = -1;
            EventMouse.BUTTON_LEFT = 0;
            EventMouse.BUTTON_RIGHT = 2;
            EventMouse.BUTTON_MIDDLE = 1;
            EventMouse.BUTTON_4 = 3;
            EventMouse.BUTTON_5 = 4;
            EventMouse.BUTTON_6 = 5;
            EventMouse.BUTTON_7 = 6;
            EventMouse.BUTTON_8 = 7;
            class EventTouch extends Event {
              constructor(changedTouches, bubbles, eventCode, touches) {
                super(Event.TOUCH, bubbles);
                this.touch = null;
                this.simulate = false;
                this._eventCode = void 0;
                this._touches = void 0;
                this._allTouches = void 0;
                this._eventCode = eventCode || '';
                this._touches = changedTouches || [];
                this._allTouches = touches || [];
              }

              getEventCode() {
                return this._eventCode;
              }

              getTouches() {
                return this._touches;
              }

              getAllTouches() {
                return this._allTouches;
              }

              setLocation(x, y) {
                if (this.touch) {
                  this.touch.setTouchInfo(this.touch.getID(), x, y);
                }
              }

              getLocation(out) {
                return this.touch ? this.touch.getLocation(out) : new Vec2();
              }

              getUILocation(out) {
                return this.touch ? this.touch.getUILocation(out) : new Vec2();
              }

              getLocationInView(out) {
                return this.touch ? this.touch.getLocationInView(out) : new Vec2();
              }

              getPreviousLocation(out) {
                return this.touch ? this.touch.getPreviousLocation(out) : new Vec2();
              }

              getStartLocation(out) {
                return this.touch ? this.touch.getStartLocation(out) : new Vec2();
              }

              getUIStartLocation(out) {
                return this.touch ? this.touch.getUIStartLocation(out) : new Vec2();
              }

              getID() {
                return this.touch ? this.touch.getID() : null;
              }

              getDelta(out) {
                return this.touch ? this.touch.getDelta(out) : new Vec2();
              }

              getUIDelta(out) {
                return this.touch ? this.touch.getUIDelta(out) : new Vec2();
              }

              getDeltaX() {
                return this.touch ? this.touch.getDelta(_vec2).x : 0;
              }

              getDeltaY() {
                return this.touch ? this.touch.getDelta(_vec2).y : 0;
              }

              getLocationX() {
                return this.touch ? this.touch.getLocationX() : 0;
              }

              getLocationY() {
                return this.touch ? this.touch.getLocationY() : 0;
              }

            } exports('dy', EventTouch);
            EventTouch.MAX_TOUCHES = 5;
            class EventAcceleration extends Event {
              constructor(acc, bubbles) {
                super(Event.ACCELERATION, bubbles);
                this.acc = void 0;
                this.acc = acc;
              }

            } exports('fd', EventAcceleration);
            class EventKeyboard extends Event {
              constructor(keyCode, isPressed, bubbles) {
                super(Event.KEYBOARD, bubbles);
                this.keyCode = void 0;
                this.rawEvent = void 0;
                this.isPressed = void 0;

                if (typeof keyCode === 'number') {
                  this.keyCode = keyCode;
                } else {
                  this.keyCode = keyCode.keyCode;
                  this.rawEvent = keyCode;
                }

                this.isPressed = isPressed;
              }

            } exports('fe', EventKeyboard);
            Event.EventMouse = EventMouse;
            Event.EventTouch = EventTouch;
            Event.EventAcceleration = EventAcceleration;
            Event.EventKeyboard = EventKeyboard;

            const _vec2$1 = new Vec2();

            class Touch {
              get lastModified() {
                return this._lastModified;
              }

              constructor(x, y, id = 0) {
                this._point = new Vec2();
                this._prevPoint = new Vec2();
                this._lastModified = 0;
                this._id = 0;
                this._startPoint = new Vec2();
                this._startPointCaptured = false;
                this.setTouchInfo(id, x, y);
              }

              getLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._point.x, this._point.y);
                return out;
              }

              getLocationX() {
                return this._point.x;
              }

              getLocationY() {
                return this._point.y;
              }

              getUILocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._point.x, this._point.y);

                legacyCC.view._convertPointWithScale(out);

                return out;
              }

              getUILocationX() {
                const viewport = legacyCC.view.getViewportRect();
                return (this._point.x - viewport.x) / legacyCC.view.getScaleX();
              }

              getUILocationY() {
                const viewport = legacyCC.view.getViewportRect();
                return (this._point.y - viewport.y) / legacyCC.view.getScaleY();
              }

              getPreviousLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._prevPoint.x, this._prevPoint.y);
                return out;
              }

              getUIPreviousLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._prevPoint.x, this._prevPoint.y);

                legacyCC.view._convertPointWithScale(out);

                return out;
              }

              getStartLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._startPoint.x, this._startPoint.y);
                return out;
              }

              getUIStartLocation(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._startPoint.x, this._startPoint.y);

                legacyCC.view._convertPointWithScale(out);

                return out;
              }

              getDelta(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._point);
                out.subtract(this._prevPoint);
                return out;
              }

              getUIDelta(out) {
                if (!out) {
                  out = new Vec2();
                }

                _vec2$1.set(this._point);

                _vec2$1.subtract(this._prevPoint);

                out.set(legacyCC.view.getScaleX(), legacyCC.view.getScaleY());
                Vec2.divide(out, _vec2$1, out);
                return out;
              }

              getLocationInView(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._point.x, legacyCC.view._designResolutionSize.height - this._point.y);
                return out;
              }

              getPreviousLocationInView(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._prevPoint.x, legacyCC.view._designResolutionSize.height - this._prevPoint.y);
                return out;
              }

              getStartLocationInView(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._startPoint.x, legacyCC.view._designResolutionSize.height - this._startPoint.y);
                return out;
              }

              getID() {
                return this._id;
              }

              setTouchInfo(id = 0, x, y) {
                this._prevPoint = this._point;
                this._point = new Vec2(x || 0, y || 0);
                this._id = id;

                if (!this._startPointCaptured) {
                  this._startPoint = new Vec2(this._point);
                  this._startPointCaptured = true;
                }
              }

              setPoint(x, y) {
                if (typeof x === 'object') {
                  this._point.x = x.x;
                  this._point.y = x.y;
                } else {
                  this._point.x = x || 0;
                  this._point.y = y || 0;
                }

                this._lastModified = legacyCC.director.getCurrentTime();
              }

              setPrevPoint(x, y) {
                if (typeof x === 'object') {
                  this._prevPoint = new Vec2(x.x, x.y);
                } else {
                  this._prevPoint = new Vec2(x || 0, y || 0);
                }

                this._lastModified = legacyCC.director.getCurrentTime();
              }

            } exports('ff', Touch);
            legacyCC.Touch = Touch;

            class Acceleration {
              constructor(x = 0, y = 0, z = 0, timestamp = 0) {
                this.x = void 0;
                this.y = void 0;
                this.z = void 0;
                this.timestamp = void 0;
                this.x = x;
                this.y = y;
                this.z = z;
                this.timestamp = timestamp;
              }

            }

            const TOUCH_TIMEOUT = macro.TOUCH_TIMEOUT;

            const _vec2$2 = new Vec2();

            const _preLocation = new Vec2();

            class InputManager {
              constructor() {
                this._isRegisterEvent = false;
                this._preTouchPoint = new Vec2();
                this._prevMousePoint = new Vec2();
                this._preTouchPool = [];
                this._preTouchPoolPointer = 0;
                this._touches = [];
                this._touchesIntegerDict = {};
                this._indexBitsUsed = 0;
                this._maxTouches = 8;
                this._glView = null;
              }

              handleTouchesBegin(touches) {
                const handleTouches = [];
                const locTouchIntDict = this._touchesIntegerDict;

                for (let i = 0; i < touches.length; ++i) {
                  const touch = touches[i];
                  const touchID = touch.getID();

                  if (touchID === null) {
                    continue;
                  }

                  const index = locTouchIntDict[touchID];

                  if (index === undefined) {
                    const unusedIndex = this._getUnUsedIndex();

                    if (unusedIndex === -1) {
                      logID(2300, unusedIndex);
                      continue;
                    }

                    touch.getLocation(_vec2$2);
                    const curTouch = new Touch(_vec2$2.x, _vec2$2.y, touchID);
                    this._touches[unusedIndex] = curTouch;
                    touch.getPreviousLocation(_vec2$2);
                    curTouch.setPrevPoint(_vec2$2);
                    locTouchIntDict[touchID] = unusedIndex;
                    handleTouches.push(curTouch);
                  }
                }

                if (handleTouches.length > 0) {
                  const touchEvent = new EventTouch(handleTouches, false, SystemEventType.TOUCH_START, macro.ENABLE_MULTI_TOUCH ? this._getUsefulTouches() : handleTouches);
                  eventManager.dispatchEvent(touchEvent);
                }
              }

              handleTouchesMove(touches) {
                const handleTouches = [];
                const locTouches = this._touches;

                for (let i = 0; i < touches.length; ++i) {
                  const touch = touches[i];
                  const touchID = touch.getID();

                  if (touchID === null) {
                    continue;
                  }

                  const index = this._touchesIntegerDict[touchID];

                  if (index === undefined) {
                    continue;
                  }

                  if (locTouches[index]) {
                    touch.getLocation(_vec2$2);
                    locTouches[index].setPoint(_vec2$2);
                    touch.getPreviousLocation(_vec2$2);
                    locTouches[index].setPrevPoint(_vec2$2);
                    handleTouches.push(locTouches[index]);
                  }
                }

                if (handleTouches.length > 0) {
                  const touchEvent = new EventTouch(handleTouches, false, SystemEventType.TOUCH_MOVE, macro.ENABLE_MULTI_TOUCH ? this._getUsefulTouches() : handleTouches);
                  eventManager.dispatchEvent(touchEvent);
                }
              }

              handleTouchesEnd(touches) {
                const handleTouches = this.getSetOfTouchesEndOrCancel(touches);

                if (handleTouches.length > 0) {
                  const touchEvent = new EventTouch(handleTouches, false, SystemEventType.TOUCH_END, macro.ENABLE_MULTI_TOUCH ? this._getUsefulTouches() : handleTouches);
                  eventManager.dispatchEvent(touchEvent);
                }

                this._preTouchPool.length = 0;
              }

              handleTouchesCancel(touches) {
                const handleTouches = this.getSetOfTouchesEndOrCancel(touches);

                if (handleTouches.length > 0) {
                  const touchEvent = new EventTouch(handleTouches, false, SystemEventType.TOUCH_CANCEL, macro.ENABLE_MULTI_TOUCH ? this._getUsefulTouches() : handleTouches);
                  eventManager.dispatchEvent(touchEvent);
                }

                this._preTouchPool.length = 0;
              }

              getSetOfTouchesEndOrCancel(touches) {
                const handleTouches = [];
                const locTouches = this._touches;
                const locTouchesIntDict = this._touchesIntegerDict;

                for (let i = 0; i < touches.length; ++i) {
                  const touch = touches[i];
                  const touchID = touch.getID();

                  if (touchID === null) {
                    continue;
                  }

                  const index = locTouchesIntDict[touchID];

                  if (index === undefined) {
                    continue;
                  }

                  if (locTouches[index]) {
                    touch.getLocation(_vec2$2);
                    locTouches[index].setPoint(_vec2$2);
                    touch.getPreviousLocation(_vec2$2);
                    locTouches[index].setPrevPoint(_vec2$2);
                    handleTouches.push(locTouches[index]);

                    this._removeUsedIndexBit(index);

                    delete locTouchesIntDict[touchID];
                  }
                }

                return handleTouches;
              }

              _getPreTouch(touch) {
                let preTouch = null;
                const locPreTouchPool = this._preTouchPool;
                const id = touch.getID();

                for (let i = locPreTouchPool.length - 1; i >= 0; i--) {
                  if (locPreTouchPool[i].getID() === id) {
                    preTouch = locPreTouchPool[i];
                    break;
                  }
                }

                if (!preTouch) {
                  preTouch = touch;
                }

                return preTouch;
              }

              _setPreTouch(touch) {
                let find = false;
                const locPreTouchPool = this._preTouchPool;
                const id = touch.getID();

                for (let i = locPreTouchPool.length - 1; i >= 0; i--) {
                  if (locPreTouchPool[i].getID() === id) {
                    locPreTouchPool[i] = touch;
                    find = true;
                    break;
                  }
                }

                if (!find) {
                  if (locPreTouchPool.length <= 50) {
                    locPreTouchPool.push(touch);
                  } else {
                    locPreTouchPool[this._preTouchPoolPointer] = touch;
                    this._preTouchPoolPointer = (this._preTouchPoolPointer + 1) % 50;
                  }
                }
              }

              _getViewPixelRatio() {
                return this._glView ? this._glView._devicePixelRatio : 1;
              }

              _getTouch(inputEvent) {
                const locPreTouch = this._preTouchPoint;

                const pixelRatio = this._getViewPixelRatio();

                const x = inputEvent.x * pixelRatio;
                const y = inputEvent.y * pixelRatio;
                const touch = new Touch(x, y, 0);
                touch.setPrevPoint(locPreTouch.x, locPreTouch.y);
                locPreTouch.x = x;
                locPreTouch.y = y;
                return touch;
              }

              _getMouseEvent(inputEvent) {
                const locPreMouse = this._prevMousePoint;
                const mouseEvent = new EventMouse(inputEvent.type, false, locPreMouse);

                const pixelRatio = this._getViewPixelRatio();

                locPreMouse.x = inputEvent.x * pixelRatio;
                locPreMouse.y = inputEvent.y * pixelRatio;

                if (legacyCC.GAME_VIEW) {
                  locPreMouse.x /= legacyCC.gameView.canvas.width / legacyCC.game.canvas.width;
                  locPreMouse.y /= legacyCC.gameView.canvas.height / legacyCC.game.canvas.height;
                }

                mouseEvent.setLocation(locPreMouse.x, locPreMouse.y);
                mouseEvent.setButton(inputEvent.button);

                if (inputEvent.movementX) {
                  mouseEvent.movementX = inputEvent.movementX;
                }

                if (inputEvent.movementY) {
                  mouseEvent.movementY = inputEvent.movementY;
                }

                return mouseEvent;
              }

              _getTouchList(inputEvent) {
                const touchList = [];
                const locPreTouch = this._preTouchPoint;
                const length = inputEvent.changedTouches.length;

                const pixelRatio = this._getViewPixelRatio();

                for (let i = 0; i < length; i++) {
                  const touchData = inputEvent.changedTouches[i];
                  const x = touchData.x * pixelRatio;
                  const y = touchData.y * pixelRatio;
                  const touch = new Touch(x, y, touchData.identifier);

                  this._getPreTouch(touch).getLocation(_preLocation);

                  touch.setPrevPoint(_preLocation.x, _preLocation.y);

                  this._setPreTouch(touch);

                  locPreTouch.x = x;
                  locPreTouch.y = y;
                  touchList.push(touch);

                  if (!macro.ENABLE_MULTI_TOUCH) {
                    break;
                  }
                }

                return touchList;
              }

              _getUnUsedIndex() {
                let temp = this._indexBitsUsed;
                const now = legacyCC.director.getCurrentTime();

                for (let i = 0; i < this._maxTouches; i++) {
                  if (!(temp & 0x00000001)) {
                    this._indexBitsUsed |= 1 << i;
                    return i;
                  } else {
                    const touch = this._touches[i];

                    if (now - touch.lastModified > TOUCH_TIMEOUT) {
                      this._removeUsedIndexBit(i);

                      const touchID = touch.getID();

                      if (touchID !== null) {
                        delete this._touchesIntegerDict[touchID];
                      }

                      return i;
                    }
                  }

                  temp >>= 1;
                }

                return -1;
              }

              _removeUsedIndexBit(index) {
                if (index < 0 || index >= this._maxTouches) {
                  return;
                }

                let temp = 1 << index;
                temp = ~temp;
                this._indexBitsUsed &= temp;
              }

              _getUsefulTouches() {
                const touches = [];
                const touchDict = this._touchesIntegerDict;

                for (const id in touchDict) {
                  const index = parseInt(id);
                  const usedID = touchDict[index];

                  if (usedID === undefined || usedID === null) {
                    continue;
                  }

                  const touch = this._touches[usedID];
                  touches.push(touch);
                }

                return touches;
              }

              setAccelerometerEnabled(isEnable) {
                if (isEnable) {
                  input._accelerometer.start();
                } else {
                  input._accelerometer.stop();
                }
              }

              setAccelerometerInterval(intervalInMileseconds) {
                input._accelerometer.setInterval(intervalInMileseconds);
              }

              registerSystemEvent() {
                if (this._isRegisterEvent) {
                  return;
                }

                this._glView = legacyCC.view;

                if (input._mouse.support) {
                  this._registerMouseEvents();
                }

                if (input._touch.support) {
                  this._registerTouchEvents();
                }

                if (input._keyboard.support) {
                  this._registerKeyboardEvent();
                }

                if (input._accelerometer.support) {
                  this._registerAccelerometerEvent();
                }

                this._isRegisterEvent = true;
              }

              _registerMouseEvents() {
                input._mouse.onDown(inputEvent => {
                  const mouseEvent = this._getMouseEvent(inputEvent);

                  const touch = this._getTouch(inputEvent);

                  this.handleTouchesBegin([touch]);
                  eventManager.dispatchEvent(mouseEvent);
                });

                input._mouse.onMove(inputEvent => {
                  const mouseEvent = this._getMouseEvent(inputEvent);

                  const touch = this._getTouch(inputEvent);

                  this.handleTouchesMove([touch]);
                  eventManager.dispatchEvent(mouseEvent);
                });

                input._mouse.onUp(inputEvent => {
                  const mouseEvent = this._getMouseEvent(inputEvent);

                  const touch = this._getTouch(inputEvent);

                  this.handleTouchesEnd([touch]);
                  eventManager.dispatchEvent(mouseEvent);
                });

                input._mouse.onWheel(inputEvent => {
                  const mouseEvent = this._getMouseEvent(inputEvent);

                  mouseEvent.setScrollData(inputEvent.deltaX, inputEvent.deltaY);
                  eventManager.dispatchEvent(mouseEvent);
                });
              }

              _registerTouchEvents() {
                input._touch.onStart(inputEvent => {
                  const touchList = this._getTouchList(inputEvent);

                  this.handleTouchesBegin(touchList);
                });

                input._touch.onMove(inputEvent => {
                  const touchList = this._getTouchList(inputEvent);

                  this.handleTouchesMove(touchList);
                });

                input._touch.onEnd(inputEvent => {
                  const touchList = this._getTouchList(inputEvent);

                  this.handleTouchesEnd(touchList);
                });

                input._touch.onCancel(inputEvent => {
                  const touchList = this._getTouchList(inputEvent);

                  this.handleTouchesCancel(touchList);
                });
              }

              _registerKeyboardEvent() {
                input._keyboard.onDown(inputEvent => {
                  eventManager.dispatchEvent(new EventKeyboard(inputEvent.code, true));
                });

                input._keyboard.onUp(inputEvent => {
                  eventManager.dispatchEvent(new EventKeyboard(inputEvent.code, false));
                });
              }

              _registerAccelerometerEvent() {
                input._accelerometer.onChange(inputEvent => {
                  const {
                    x,
                    y,
                    z,
                    timestamp
                  } = inputEvent;
                  eventManager.dispatchEvent(new EventAcceleration(new Acceleration(x, y, z, timestamp)));
                });
              }

            }

            const inputManager = new InputManager();
            legacyCC.internal.inputManager = inputManager;

            let keyboardListener = null;
            let accelerationListener = null;
            let touchListener = null;
            let mouseListener = null;
            class SystemEvent extends EventTarget {
              constructor() {
                super();
              }

              setAccelerometerEnabled(isEnabled) {

                if (isEnabled && window.DeviceMotionEvent && typeof DeviceMotionEvent.requestPermission === 'function') {
                  DeviceMotionEvent.requestPermission().then(response => {
                    logID(3520, response);
                    inputManager.setAccelerometerEnabled(response === 'granted');
                  }).catch(error => {
                    warnID(3521, error.message);
                    inputManager.setAccelerometerEnabled(false);
                  });
                } else {
                  inputManager.setAccelerometerEnabled(isEnabled);
                }
              }

              setAccelerometerInterval(interval) {

                inputManager.setAccelerometerInterval(interval);
              }

              on(type, callback, target, once) {

                super.on(type, callback, target, once);

                if (type === SystemEventType.KEY_DOWN || type === SystemEventType.KEY_UP) {
                  if (!keyboardListener) {
                    keyboardListener = EventListener.create({
                      event: EventListener.KEYBOARD,

                      onKeyPressed(keyCode, event) {
                        event.type = SystemEventType.KEY_DOWN;
                        systemEvent.emit(event.type, event);
                      },

                      onKeyReleased(keyCode, event) {
                        event.type = SystemEventType.KEY_UP;
                        systemEvent.emit(event.type, event);
                      }

                    });
                    eventManager.addListener(keyboardListener, 256);
                  }
                }

                if (type === SystemEventType.DEVICEMOTION) {
                  if (!accelerationListener) {
                    accelerationListener = EventListener.create({
                      event: EventListener.ACCELERATION,

                      callback(acc, event) {
                        event.type = SystemEventType.DEVICEMOTION;
                        legacyCC.systemEvent.emit(event.type, event);
                      }

                    });
                    eventManager.addListener(accelerationListener, 256);
                  }
                }

                if (type === SystemEventType.TOUCH_START || type === SystemEventType.TOUCH_MOVE || type === SystemEventType.TOUCH_END || type === SystemEventType.TOUCH_CANCEL) {
                  if (!touchListener) {
                    touchListener = EventListener.create({
                      event: EventListener.TOUCH_ONE_BY_ONE,

                      onTouchBegan(touch, event) {
                        event.type = SystemEventType.TOUCH_START;
                        legacyCC.systemEvent.emit(event.type, touch, event);
                        return true;
                      },

                      onTouchMoved(touch, event) {
                        event.type = SystemEventType.TOUCH_MOVE;
                        legacyCC.systemEvent.emit(event.type, touch, event);
                      },

                      onTouchEnded(touch, event) {
                        event.type = SystemEventType.TOUCH_END;
                        legacyCC.systemEvent.emit(event.type, touch, event);
                      },

                      onTouchCancelled(touch, event) {
                        event.type = SystemEventType.TOUCH_CANCEL;
                        legacyCC.systemEvent.emit(event.type, touch, event);
                      }

                    });
                    eventManager.addListener(touchListener, 256);
                  }
                }

                if (type === SystemEventType.MOUSE_DOWN || type === SystemEventType.MOUSE_MOVE || type === SystemEventType.MOUSE_UP || type === SystemEventType.MOUSE_WHEEL) {
                  if (!mouseListener) {
                    mouseListener = EventListener.create({
                      event: EventListener.MOUSE,

                      onMouseDown(event) {
                        event.type = SystemEventType.MOUSE_DOWN;
                        legacyCC.systemEvent.emit(event.type, event);
                      },

                      onMouseMove(event) {
                        event.type = SystemEventType.MOUSE_MOVE;
                        legacyCC.systemEvent.emit(event.type, event);
                      },

                      onMouseUp(event) {
                        event.type = SystemEventType.MOUSE_UP;
                        legacyCC.systemEvent.emit(event.type, event);
                      },

                      onMouseScroll(event) {
                        event.type = SystemEventType.MOUSE_WHEEL;
                        legacyCC.systemEvent.emit(event.type, event);
                      }

                    });
                    eventManager.addListener(mouseListener, 256);
                  }
                }

                return callback;
              }

              off(type, callback, target) {

                super.off(type, callback, target);

                if (keyboardListener && (type === SystemEventType.KEY_DOWN || type === SystemEventType.KEY_UP)) {
                  const hasKeyDownEventListener = this.hasEventListener(SystemEventType.KEY_DOWN);
                  const hasKeyUpEventListener = this.hasEventListener(SystemEventType.KEY_UP);

                  if (!hasKeyDownEventListener && !hasKeyUpEventListener) {
                    eventManager.removeListener(keyboardListener);
                    keyboardListener = null;
                  }
                }

                if (accelerationListener && type === SystemEventType.DEVICEMOTION) {
                  eventManager.removeListener(accelerationListener);
                  accelerationListener = null;
                }

                if (touchListener && (type === SystemEventType.TOUCH_START || type === SystemEventType.TOUCH_MOVE || type === SystemEventType.TOUCH_END || type === SystemEventType.TOUCH_CANCEL)) {
                  const hasTouchStart = this.hasEventListener(SystemEventType.TOUCH_START);
                  const hasTouchMove = this.hasEventListener(SystemEventType.TOUCH_MOVE);
                  const hasTouchEnd = this.hasEventListener(SystemEventType.TOUCH_END);
                  const hasTouchCancel = this.hasEventListener(SystemEventType.TOUCH_CANCEL);

                  if (!hasTouchStart && !hasTouchMove && !hasTouchEnd && !hasTouchCancel) {
                    eventManager.removeListener(touchListener);
                    touchListener = null;
                  }
                }

                if (mouseListener && (type === SystemEventType.MOUSE_DOWN || type === SystemEventType.MOUSE_MOVE || type === SystemEventType.MOUSE_UP || type === SystemEventType.MOUSE_WHEEL)) {
                  const hasMouseDown = this.hasEventListener(SystemEventType.MOUSE_DOWN);
                  const hasMouseMove = this.hasEventListener(SystemEventType.MOUSE_MOVE);
                  const hasMouseUp = this.hasEventListener(SystemEventType.MOUSE_UP);
                  const hasMouseWheel = this.hasEventListener(SystemEventType.MOUSE_WHEEL);

                  if (!hasMouseDown && !hasMouseMove && !hasMouseUp && !hasMouseWheel) {
                    eventManager.removeListener(mouseListener);
                    mouseListener = null;
                  }
                }
              }

            } exports('fa', SystemEvent);
            SystemEvent.EventType = SystemEventType;
            legacyCC.SystemEvent = SystemEvent;
            const systemEvent = exports('fb', new SystemEvent());
            legacyCC.systemEvent = systemEvent;

            const viewSize = system.getViewSize();
            const pixelRatio = system.pixelRatio;
            const sys = exports('bm', {
              NetworkType,
              Language,
              OS,
              Platform,
              BrowserType,
              isNative: system.isNative,
              isBrowser: system.isBrowser,
              isMobile: system.isMobile,
              isLittleEndian: system.isLittleEndian,
              platform: system.platform,
              language: system.language,
              languageCode: system.nativeLanguage,
              os: system.os,
              osVersion: system.osVersion,
              osMainVersion: system.osMainVersion,
              browserType: system.browserType,
              browserVersion: system.browserVersion,
              windowPixelResolution: {
                width: viewSize.width * pixelRatio,
                height: viewSize.height * pixelRatio
              },
              capabilities: {
                canvas: system.supportCapability.canvas,
                opengl: system.supportCapability.gl,
                webp: system.supportCapability.webp,
                imageBitmap: system.supportCapability.imageBitmap,
                touches: false,
                mouse: false,
                keyboard: false,
                accelerometer: false
              },
              localStorage: null,

              getNetworkType() {
                return system.networkType;
              },

              getBatteryLevel() {
                return system.getBatteryLevel();
              },

              garbageCollect() {
                system.triggerGC();
              },

              isObjectValid(obj) {
                if (obj === null || obj === undefined) {
                  return false;
                }

                return true;
              },

              dump() {
                let str = '';
                str += `isMobile : ${this.isMobile}\r\n`;
                str += `language : ${this.language}\r\n`;
                str += `browserType : ${this.browserType}\r\n`;
                str += `browserVersion : ${this.browserVersion}\r\n`;
                str += `capabilities : ${JSON.stringify(this.capabilities)}\r\n`;
                str += `os : ${this.os}\r\n`;
                str += `osVersion : ${this.osVersion}\r\n`;
                str += `platform : ${this.platform}\r\n`;
                str += `Using ${legacyCC.game.renderType === legacyCC.game.RENDER_TYPE_WEBGL ? 'WEBGL' : 'CANVAS'} renderer.\r\n`;
                log(str);
              },

              openURL(url) {
                system.openURL(url);
              },

              now() {
                return system.now();
              },

              restartVM() {
                system.restartJSVM();
              },

              getSafeAreaRect() {
                const locView = legacyCC.view;
                const edge = system.getSafeAreaEdge();
                const viewSize = system.getViewSize();
                const leftBottom = new Vec2(edge.left, viewSize.height - edge.bottom);
                const rightTop = new Vec2(viewSize.width - edge.right, edge.top);
                const relatedPos = {
                  left: 0,
                  top: 0,
                  width: viewSize.width,
                  height: viewSize.height
                };
                locView.convertToLocationInView(leftBottom.x, leftBottom.y, relatedPos, leftBottom);
                locView.convertToLocationInView(rightTop.x, rightTop.y, relatedPos, rightTop);

                locView._convertPointWithScale(leftBottom);

                locView._convertPointWithScale(rightTop);

                const x = leftBottom.x;
                const y = leftBottom.y;
                const width = rightTop.x - leftBottom.x;
                const height = rightTop.y - leftBottom.y;
                return new Rect(x, y, width, height);
              },

              __init() {
                try {
                  let localStorage = sys.localStorage = window.localStorage;
                  localStorage.setItem('storage', '');
                  localStorage.removeItem('storage');
                  localStorage = null;
                } catch (e) {
                  const warn = function () {
                    warnID(5200);
                  };

                  sys.localStorage = {
                    getItem: warn,
                    setItem: warn,
                    removeItem: warn,
                    clear: warn
                  };
                }

                const win = window;
                const nav = win.navigator;
                const doc = document;
                const docEle = doc.documentElement;
                const capabilities = sys.capabilities;

                if (docEle.ontouchstart !== undefined || doc.ontouchstart !== undefined || nav.msPointerEnabled) {
                  capabilities.touches = true;
                }

                if (docEle.onmouseup !== undefined) {
                  capabilities.mouse = true;
                }

                if (docEle.onkeyup !== undefined) {
                  capabilities.keyboard = true;
                }

                if (win.DeviceMotionEvent || win.DeviceOrientationEvent) {
                  capabilities.accelerometer = true;
                }

                sys.__isWebIOS14OrIPadOS14Env = (sys.os === OS.IOS || sys.os === OS.OSX) && system.isBrowser && /(OS 1[4-9])|(Version\/1[4-9])/.test(window.navigator.userAgent);
                system.onViewResize(() => {
                  const viewSize = system.getViewSize();
                  sys.windowPixelResolution = {
                    width: Math.round(viewSize.width * pixelRatio),
                    height: Math.round(viewSize.height * pixelRatio)
                  };
                });
              }

            });

            sys.__init();

            legacyCC.sys = sys;

            const FogType = Enum({
              LINEAR: 0,
              EXP: 1,
              EXP_SQUARED: 2,
              LAYERED: 3
            });
            const FOG_TYPE_NONE = FogType.LAYERED + 1;
            class Fog {
              set enabled(val) {
                FogPool.set(this._handle, FogView.ENABLE, val ? 1 : 0);
                if (!val) FogPool.set(this._handle, FogView.TYPE, FOG_TYPE_NONE);
                val ? this.activate() : this._updatePipeline();
              }

              get enabled() {
                return FogPool.get(this._handle, FogView.ENABLE);
              }

              set fogColor(val) {
                this._fogColor.set(val);

                Color.toArray(this._colorArray, this._fogColor);
                FogPool.setVec4(this._handle, FogView.COLOR, this._fogColor);
              }

              get fogColor() {
                return this._fogColor;
              }

              get type() {
                return FogPool.get(this._handle, FogView.TYPE);
              }

              set type(val) {
                FogPool.set(this._handle, FogView.TYPE, this.enabled ? val : FOG_TYPE_NONE);
                if (this.enabled) this._updatePipeline();
              }

              get fogDensity() {
                return FogPool.get(this._handle, FogView.DENSITY);
              }

              set fogDensity(val) {
                FogPool.set(this._handle, FogView.DENSITY, val);
              }

              get fogStart() {
                return FogPool.get(this._handle, FogView.START);
              }

              set fogStart(val) {
                FogPool.set(this._handle, FogView.START, val);
              }

              get fogEnd() {
                return FogPool.get(this._handle, FogView.END);
              }

              set fogEnd(val) {
                FogPool.set(this._handle, FogView.END, val);
              }

              get fogAtten() {
                return FogPool.get(this._handle, FogView.ATTEN);
              }

              set fogAtten(val) {
                FogPool.set(this._handle, FogView.ATTEN, val);
              }

              get fogTop() {
                return FogPool.get(this._handle, FogView.TOP);
              }

              set fogTop(val) {
                FogPool.set(this._handle, FogView.TOP, val);
              }

              get fogRange() {
                return FogPool.get(this._handle, FogView.RANGE);
              }

              set fogRange(val) {
                FogPool.set(this._handle, FogView.RANGE, val);
              }

              get colorArray() {
                return this._colorArray;
              }

              get handle() {
                return this._handle;
              }

              constructor() {
                this._fogColor = new Color('#C8C8C8');
                this._colorArray = new Float32Array([0.2, 0.2, 0.2, 1.0]);
                this._handle = NULL_HANDLE;
                this._handle = FogPool.alloc();
              }

              initialize(fogInfo) {
                FogPool.set(this._handle, FogView.ENABLE, fogInfo.enabled ? 1 : 0);
                FogPool.set(this._handle, FogView.TYPE, fogInfo.enabled ? fogInfo.type : FOG_TYPE_NONE);

                this._fogColor.set(fogInfo.fogColor);

                Color.toArray(this._colorArray, this._fogColor);
                FogPool.setVec4(this._handle, FogView.COLOR, this._fogColor);
                FogPool.set(this._handle, FogView.DENSITY, fogInfo.fogDensity);
                FogPool.set(this._handle, FogView.START, fogInfo.fogStart);
                FogPool.set(this._handle, FogView.END, fogInfo.fogEnd);
                FogPool.set(this._handle, FogView.ATTEN, fogInfo.fogAtten);
                FogPool.set(this._handle, FogView.TOP, fogInfo.fogTop);
                FogPool.set(this._handle, FogView.RANGE, fogInfo.fogRange);
              }

              activate() {
                this._updatePipeline();
              }

              _updatePipeline() {
                const root = legacyCC.director.root;
                const value = this.enabled ? this.type : FOG_TYPE_NONE;
                const pipeline = root.pipeline;

                if (pipeline.macros.CC_USE_FOG === value) {
                  return;
                }

                pipeline.macros.CC_USE_FOG = value;
                root.onGlobalPipelineStateChanged();
              }

              destroy() {
                if (this._handle) {
                  FogPool.free(this._handle);
                  this._handle = NULL_HANDLE;
                }
              }

            }
            legacyCC.Fog = Fog;

            var _dec$e, _class$e, _class2$d, _descriptor$b, _descriptor2$6, _descriptor3$5, _descriptor4$4, _class3$8, _temp$d;
            let EffectAsset = exports('eg', (_dec$e = ccclass('cc.EffectAsset'), _dec$e(_class$e = (_class2$d = (_temp$d = _class3$8 = class EffectAsset extends Asset {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "techniques", _descriptor$b, this);

                _initializerDefineProperty(this, "shaders", _descriptor2$6, this);

                _initializerDefineProperty(this, "combinations", _descriptor3$5, this);

                _initializerDefineProperty(this, "hideInEditor", _descriptor4$4, this);
              }

              static register(asset) {
                EffectAsset._effects[asset.name] = asset;
              }

              static remove(name) {
                if (EffectAsset._effects[name]) {
                  delete EffectAsset._effects[name];
                  return;
                }

                for (const n in EffectAsset._effects) {
                  if (EffectAsset._effects[n]._uuid === name) {
                    delete EffectAsset._effects[n];
                    return;
                  }
                }
              }

              static get(name) {
                if (EffectAsset._effects[name]) {
                  return EffectAsset._effects[name];
                }

                for (const n in EffectAsset._effects) {
                  if (EffectAsset._effects[n]._uuid === name) {
                    return EffectAsset._effects[n];
                  }
                }

                return null;
              }

              static getAll() {
                return EffectAsset._effects;
              }

              onLoaded() {
                programLib.register(this);
                EffectAsset.register(this);

                {
                  legacyCC.game.once(legacyCC.Game.EVENT_ENGINE_INITED, this._precompile, this);
                }
              }

              _precompile() {
                const root = legacyCC.director.root;

                for (let i = 0; i < this.shaders.length; i++) {
                  const shader = this.shaders[i];
                  const combination = this.combinations[i];

                  if (!combination) {
                    continue;
                  }

                  const defines = Object.keys(combination).reduce((out, name) => out.reduce((acc, cur) => {
                    const choices = combination[name];

                    for (let i = 0; i < choices.length; ++i) {
                      const defines = { ...cur
                      };
                      defines[name] = choices[i];
                      acc.push(defines);
                    }

                    return acc;
                  }, []), [{}]);
                  defines.forEach(defines => programLib.getGFXShader(root.device, shader.name, defines, root.pipeline));
                }
              }

              destroy() {
                EffectAsset.remove(this.name);
                return super.destroy();
              }

              initDefault(uuid) {
                super.initDefault(uuid);
                const effect = EffectAsset.get('unlit');
                this.name = 'unlit';
                this.shaders = effect.shaders;
                this.combinations = effect.combinations;
                this.techniques = effect.techniques;
              }

              validate() {
                return this.techniques.length > 0 && this.shaders.length > 0;
              }

            }, _class3$8._effects = {}, _temp$d), (_descriptor$b = _applyDecoratedDescriptor(_class2$d.prototype, "techniques", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor2$6 = _applyDecoratedDescriptor(_class2$d.prototype, "shaders", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor3$5 = _applyDecoratedDescriptor(_class2$d.prototype, "combinations", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor4$4 = _applyDecoratedDescriptor(_class2$d.prototype, "hideInEditor", [serializable, editorOnly], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            })), _class2$d)) || _class$e));
            legacyCC.EffectAsset = EffectAsset;

            var _dec$f, _dec2$7, _dec3$4, _dec4$2, _dec5$1, _class$f, _class2$e, _descriptor$c, _descriptor2$7, _temp$e;
            const idGenerator$3 = new IDGenerator('RenderTex');

            const _colorAttachment = new ColorAttachment();

            _colorAttachment.endAccesses = [AccessType.FRAGMENT_SHADER_READ_TEXTURE];

            const _depthStencilAttachment = new DepthStencilAttachment();

            const passInfo = new RenderPassInfo([_colorAttachment], _depthStencilAttachment);
            const _windowInfo = {
              width: 1,
              height: 1,
              renderPassInfo: passInfo
            };
            let RenderTexture = exports('c$', (_dec$f = ccclass('cc.RenderTexture'), _dec2$7 = rangeMin(), _dec3$4 = rangeMax(), _dec4$2 = rangeMin(), _dec5$1 = rangeMax(), _dec$f(_class$f = (_class2$e = (_temp$e = class RenderTexture extends Asset {
              constructor() {
                super();

                _initializerDefineProperty(this, "_width", _descriptor$c, this);

                _initializerDefineProperty(this, "_height", _descriptor2$7, this);

                this._textureHash = 0;
                this._id = void 0;
                this._window = null;
                this._id = idGenerator$3.getNewId();
                this._textureHash = murmurhash2_32_gc(this._id, 666);
              }

              getHash() {
                return this._textureHash;
              }

              get width() {
                return this._width;
              }

              get height() {
                return this._height;
              }

              get window() {
                return this._window;
              }

              initialize(info) {
                this._name = info.name || '';
                this._width = info.width;
                this._height = info.height;

                this._initWindow(info);
              }

              reset(info) {
                this.initialize(info);
              }

              destroy() {
                if (this._window) {
                  const root = legacyCC.director.root;
                  root.destroyWindow(this._window);
                  this._window = null;
                }

                return super.destroy();
              }

              resize(width, height) {
                this._width = width;
                this._height = height;

                if (this._window) {
                  this._window.resize(width, height);
                }

                this.emit('resize', this._window);
              }

              getGFXTexture() {
                return this._window && this._window.framebuffer.colorTextures[0];
              }

              getGFXSampler() {
                const root = legacyCC.director.root;
                return samplerLib.getSampler(root.device, defaultSamplerHash);
              }

              getSamplerHash() {
                return defaultSamplerHash;
              }

              onLoaded() {
                this._initWindow();

                this.loaded = true;
                this.emit('load');
              }

              _initWindow(info) {
                const root = legacyCC.director.root;
                _windowInfo.title = this._name;
                _windowInfo.width = this._width;
                _windowInfo.height = this._height;
                _windowInfo.renderPassInfo = info && info.passInfo ? info.passInfo : passInfo;

                if (this._window) {
                  this._window.destroy();

                  this._window.initialize(root.device, _windowInfo);
                } else {
                  this._window = root.createWindow(_windowInfo);
                }
              }

              initDefault(uuid) {
                super.initDefault(uuid);
                this._width = this._height = 1;

                this._initWindow();
              }

              validate() {
                return this.width >= 1 && this.width <= 2048 && this.height >= 1 && this.height <= 2048;
              }

            }, _temp$e), (_descriptor$c = _applyDecoratedDescriptor(_class2$e.prototype, "_width", [serializable, _dec2$7, _dec3$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1;
              }
            }), _descriptor2$7 = _applyDecoratedDescriptor(_class2$e.prototype, "_height", [serializable, _dec4$2, _dec5$1], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1;
              }
            })), _class2$e)) || _class$f));
            legacyCC.RenderTexture = RenderTexture;

            var _dec$g, _dec2$8, _class$g, _class2$f, _descriptor$d, _descriptor2$8, _descriptor3$6, _descriptor4$5, _descriptor5$4, _temp$f;
            let Material = exports('cx', (_dec$g = ccclass('cc.Material'), _dec2$8 = type(EffectAsset), _dec$g(_class$g = (_class2$f = (_temp$f = class Material extends Asset {
              static getHash(material) {
                let hash = 0;

                for (const pass of material.passes) {
                  hash ^= pass.hash;
                }

                return hash;
              }

              constructor() {
                super();

                _initializerDefineProperty(this, "_effectAsset", _descriptor$d, this);

                _initializerDefineProperty(this, "_techIdx", _descriptor2$8, this);

                _initializerDefineProperty(this, "_defines", _descriptor3$6, this);

                _initializerDefineProperty(this, "_states", _descriptor4$5, this);

                _initializerDefineProperty(this, "_props", _descriptor5$4, this);

                this._passes = [];
                this._hash = 0;
                this.loaded = false;
              }

              get effectAsset() {
                return this._effectAsset;
              }

              get effectName() {
                return this._effectAsset ? this._effectAsset.name : '';
              }

              get technique() {
                return this._techIdx;
              }

              get passes() {
                return this._passes;
              }

              get hash() {
                return this._hash;
              }

              get parent() {
                return null;
              }

              get owner() {
                return null;
              }

              initialize(info) {
                if (!this._defines) {
                  this._defines = [];
                }

                if (!this._states) {
                  this._states = [];
                }

                if (!this._props) {
                  this._props = [];
                }

                if (info.technique !== undefined) {
                  this._techIdx = info.technique;
                }

                if (info.effectAsset) {
                  this._effectAsset = info.effectAsset;
                } else if (info.effectName) {
                  this._effectAsset = EffectAsset.get(info.effectName);
                }

                if (info.defines) {
                  this._prepareInfo(info.defines, this._defines);
                }

                if (info.states) {
                  this._prepareInfo(info.states, this._states);
                }

                this._update();
              }

              reset(info) {
                this.initialize(info);
              }

              destroy() {
                this._doDestroy();

                return super.destroy();
              }

              recompileShaders(overrides, passIdx) {
                console.warn(`Shaders in material asset '${this.name}' cannot be modified at runtime, please instantiate the material first.`);
              }

              overridePipelineStates(overrides, passIdx) {
                console.warn(`Pipeline states in material asset '${this.name}' cannot be modified at runtime, please instantiate the material first.`);
              }

              onLoaded() {
                this._update();

                this.loaded = true;
                this.emit('load');
              }

              resetUniforms(clearPasses = true) {
                this._props.length = this._passes.length;

                for (let i = 0; i < this._props.length; i++) {
                  this._props[i] = {};
                }

                if (!clearPasses) {
                  return;
                }

                for (const pass of this._passes) {
                  pass.resetUBOs();
                  pass.resetTextures();
                }
              }

              setProperty(name, val, passIdx) {
                let success = false;

                if (passIdx === undefined) {
                  const passes = this._passes;
                  const len = passes.length;

                  for (let i = 0; i < len; i++) {
                    const pass = passes[i];

                    if (this._uploadProperty(pass, name, val)) {
                      this._props[pass.propertyIndex][name] = val;
                      success = true;
                    }
                  }
                } else {
                  if (passIdx >= this._passes.length) {
                    console.warn(`illegal pass index: ${passIdx}.`);
                    return;
                  }

                  const pass = this._passes[passIdx];

                  if (this._uploadProperty(pass, name, val)) {
                    this._props[pass.propertyIndex][name] = val;
                    success = true;
                  }
                }

                if (!success) {
                  console.warn(`illegal property name: ${name}.`);
                }
              }

              getProperty(name, passIdx) {
                if (passIdx === undefined) {
                  const propsArray = this._props;
                  const len = propsArray.length;

                  for (let i = 0; i < len; i++) {
                    const props = propsArray[i];

                    if (name in props) {
                      return props[name];
                    }
                  }
                } else {
                  if (passIdx >= this._props.length) {
                    console.warn(`illegal pass index: ${passIdx}.`);
                    return null;
                  }

                  const props = this._props[this._passes[passIdx].propertyIndex];

                  if (name in props) {
                    return props[name];
                  }
                }

                return null;
              }

              copy(mat) {
                this._techIdx = mat._techIdx;
                this._props.length = mat._props.length;

                for (let i = 0; i < mat._props.length; i++) {
                  this._props[i] = { ...mat._props[i]
                  };
                }

                this._defines.length = mat._defines.length;

                for (let i = 0; i < mat._defines.length; i++) {
                  this._defines[i] = { ...mat._defines[i]
                  };
                }

                this._states.length = mat._states.length;

                for (let i = 0; i < mat._states.length; i++) {
                  this._states[i] = { ...mat._states[i]
                  };
                }

                this._effectAsset = mat._effectAsset;

                this._update();
              }

              _prepareInfo(patch, cur) {
                let patchArray = patch;

                if (!Array.isArray(patchArray)) {
                  const len = this._effectAsset ? this._effectAsset.techniques[this._techIdx].passes.length : 1;
                  patchArray = Array(len).fill(patchArray);
                }

                for (let i = 0; i < patchArray.length; ++i) {
                  Object.assign(cur[i] || (cur[i] = {}), patchArray[i]);
                }
              }

              _createPasses() {
                const tech = this._effectAsset.techniques[this._techIdx || 0];

                if (!tech) {
                  return [];
                }

                const passNum = tech.passes.length;
                const passes = [];

                for (let k = 0; k < passNum; ++k) {
                  const passInfo = tech.passes[k];
                  const propIdx = passInfo.passIndex = k;
                  const defines = passInfo.defines = this._defines[propIdx] || (this._defines[propIdx] = {});
                  const states = passInfo.stateOverrides = this._states[propIdx] || (this._states[propIdx] = {});

                  if (passInfo.propertyIndex !== undefined) {
                    Object.assign(defines, this._defines[passInfo.propertyIndex]);
                    Object.assign(states, this._states[passInfo.propertyIndex]);
                  }

                  if (passInfo.embeddedMacros !== undefined) {
                    Object.assign(defines, passInfo.embeddedMacros);
                  }

                  if (passInfo.switch && !defines[passInfo.switch]) {
                    continue;
                  }

                  const pass = new Pass(legacyCC.director.root);
                  pass.initialize(passInfo);
                  passes.push(pass);
                }

                return passes;
              }

              _update(keepProps = true) {
                if (this._effectAsset) {
                  if (this._passes && this._passes.length) {
                    for (const pass of this._passes) {
                      pass.destroy();
                    }
                  }

                  this._passes = this._createPasses();
                  const totalPasses = this._effectAsset.techniques[this._techIdx].passes.length;
                  this._props.length = totalPasses;

                  if (keepProps) {
                    this._passes.forEach((pass, i) => {
                      let props = this._props[i];

                      if (!props) {
                        props = this._props[i] = {};
                      }

                      if (pass.propertyIndex !== undefined) {
                        Object.assign(props, this._props[pass.propertyIndex]);
                      }

                      for (const p in props) {
                        this._uploadProperty(pass, p, props[p]);
                      }
                    });
                  } else {
                    for (let i = 0; i < this._props.length; i++) {
                      this._props[i] = {};
                    }
                  }
                }

                this._hash = Material.getHash(this);
              }

              _uploadProperty(pass, name, val) {
                const handle = pass.getHandle(name);

                if (!handle) {
                  return false;
                }

                const propertyType = Pass.getPropertyTypeFromHandle(handle);

                if (propertyType === PropertyType.BUFFER) {
                  if (Array.isArray(val)) {
                    pass.setUniformArray(handle, val);
                  } else if (val !== null) {
                    pass.setUniform(handle, val);
                  } else {
                    pass.resetUniform(name);
                  }
                } else if (propertyType === PropertyType.TEXTURE) {
                  if (Array.isArray(val)) {
                    for (let i = 0; i < val.length; i++) {
                      this._bindTexture(pass, handle, val[i], i);
                    }
                  } else if (val) {
                    this._bindTexture(pass, handle, val);
                  } else {
                    pass.resetTexture(name);
                  }
                }

                return true;
              }

              _bindTexture(pass, handle, val, index) {
                const binding = Pass.getBindingFromHandle(handle);

                if (val instanceof Texture) {
                  pass.bindTexture(binding, val, index);
                } else if (val instanceof TextureBase || val instanceof RenderTexture) {
                  const texture = val.getGFXTexture();

                  if (!texture || !texture.width || !texture.height) {
                    return;
                  }

                  pass.bindTexture(binding, texture, index);
                  pass.bindSampler(binding, val.getGFXSampler(), index);
                }
              }

              _doDestroy() {
                if (this._passes && this._passes.length) {
                  for (const pass of this._passes) {
                    pass.destroy();
                  }
                }

                this._effectAsset = null;
                this._passes.length = 0;
                this._props.length = 0;
                this._defines.length = 0;
                this._states.length = 0;
              }

              initDefault(uuid) {
                super.initDefault(uuid);
                this.initialize({
                  effectName: 'unlit',
                  defines: {
                    USE_COLOR: true
                  }
                });
                this.setProperty('mainColor', new Color('#ff00ff'));
              }

              validate() {
                return !!this._effectAsset && !this._effectAsset.isDefault && this.passes.length > 0;
              }

            }, _temp$f), (_descriptor$d = _applyDecoratedDescriptor(_class2$f.prototype, "_effectAsset", [_dec2$8], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor2$8 = _applyDecoratedDescriptor(_class2$f.prototype, "_techIdx", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor3$6 = _applyDecoratedDescriptor(_class2$f.prototype, "_defines", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor4$5 = _applyDecoratedDescriptor(_class2$f.prototype, "_states", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor5$4 = _applyDecoratedDescriptor(_class2$f.prototype, "_props", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            })), _class2$f)) || _class$g));
            legacyCC.Material = Material;

            class PassInstance extends Pass {
              get parent() {
                return this._parent;
              }

              constructor(parent, owner) {
                super(parent.root);
                this._parent = void 0;
                this._owner = void 0;
                this._dontNotify = false;
                this._parent = parent;
                this._owner = owner;

                this._doInit(this._parent, true);

                for (let i = 0; i < this._shaderInfo.blocks.length; i++) {
                  const u = this._shaderInfo.blocks[i];
                  const block = this._blocks[u.binding];
                  const parentBlock = this._parent.blocks[u.binding];
                  block.set(parentBlock);
                }

                this._rootBufferDirty = true;
                const paren = this._parent;

                for (let i = 0; i < this._shaderInfo.samplerTextures.length; i++) {
                  const u = this._shaderInfo.samplerTextures[i];

                  for (let j = 0; j < u.count; j++) {
                    const sampler = paren._descriptorSet.getSampler(u.binding, j);

                    const texture = paren._descriptorSet.getTexture(u.binding, j);

                    this._descriptorSet.bindSampler(u.binding, sampler, j);

                    this._descriptorSet.bindTexture(u.binding, texture, j);
                  }
                }

                super.tryCompile();
              }

              overridePipelineStates(original, overrides) {
                this._bs.reset();

                this._rs.reset();

                this._dss.reset();

                Pass.fillPipelineInfo(this, original);
                Pass.fillPipelineInfo(this, overrides);

                this._onStateChange();
              }

              tryCompile(defineOverrides) {
                if (defineOverrides) {
                  if (!overrideMacros(this._defines, defineOverrides)) {
                    return false;
                  }
                }

                const res = super.tryCompile();

                this._onStateChange();

                return res;
              }

              beginChangeStatesSilently() {
                this._dontNotify = true;
              }

              endChangeStatesSilently() {
                this._dontNotify = false;
              }

              _syncBatchingScheme() {
                this._defines.USE_BATCHING = this._defines.USE_INSTANCING = false;
                PassPool.set(this._handle, PassView.BATCHING_SCHEME, 0);
              }

              _onStateChange() {
                PassPool.set(this._handle, PassView.HASH, Pass.getPassHash(this, this._hShaderDefault));

                this._owner.onPassStateChange(this._dontNotify);
              }

            }

            class MaterialInstance extends Material {
              get parent() {
                return this._parent;
              }

              get owner() {
                return this._owner;
              }

              constructor(info) {
                super();
                this._passes = [];
                this._parent = void 0;
                this._owner = void 0;
                this._subModelIdx = 0;
                this._parent = info.parent;
                this._owner = info.owner || null;
                this._subModelIdx = info.subModelIdx || 0;
                this.copy(this._parent);
              }

              recompileShaders(overrides, passIdx) {
                if (!this._passes || !this.effectAsset) {
                  return;
                }

                if (passIdx === undefined) {
                  for (const pass of this._passes) {
                    pass.tryCompile(overrides);
                  }
                } else {
                  this._passes[passIdx].tryCompile(overrides);
                }
              }

              overridePipelineStates(overrides, passIdx) {
                if (!this._passes || !this.effectAsset) {
                  return;
                }

                const passInfos = this.effectAsset.techniques[this.technique].passes;

                if (passIdx === undefined) {
                  for (let i = 0; i < this._passes.length; i++) {
                    const pass = this._passes[i];
                    const state = this._states[i] || (this._states[i] = {});

                    for (const key in overrides) {
                      state[key] = overrides[key];
                    }

                    pass.overridePipelineStates(passInfos[pass.passIndex], state);
                  }
                } else {
                  const state = this._states[passIdx] || (this._states[passIdx] = {});

                  for (const key in overrides) {
                    state[key] = overrides[key];
                  }

                  this._passes[passIdx].overridePipelineStates(passInfos[passIdx], state);
                }
              }

              destroy() {
                this._doDestroy();

                return true;
              }

              onPassStateChange(dontNotify) {
                this._hash = Material.getHash(this);

                if (!dontNotify && this._owner) {
                  this._owner._onRebuildPSO(this._subModelIdx, this);
                }
              }

              _createPasses() {
                const passes = [];
                const parentPasses = this._parent.passes;

                if (!parentPasses) {
                  return passes;
                }

                for (let k = 0; k < parentPasses.length; ++k) {
                  passes.push(new PassInstance(parentPasses[k], this));
                }

                return passes;
              }

            } exports('c_', MaterialInstance);

            let skybox_mesh = null;
            let skybox_material = null;
            class Skybox {
              get model() {
                return this._model;
              }

              get enabled() {
                return SkyboxPool.get(this._handle, SkyboxView.ENABLE);
              }

              set enabled(val) {
                if (val) this.activate();else this._updatePipeline();
                SkyboxPool.set(this._handle, SkyboxView.ENABLE, val ? 1 : 0);
              }

              get useIBL() {
                return SkyboxPool.get(this._handle, SkyboxView.USE_IBL);
              }

              set useIBL(val) {
                SkyboxPool.set(this._handle, SkyboxView.USE_IBL, val ? 1 : 0);

                this._updatePipeline();
              }

              get isRGBE() {
                return SkyboxPool.get(this._handle, SkyboxView.IS_RGBE);
              }

              set isRGBE(val) {
                if (val) {
                  if (skybox_material) {
                    skybox_material.recompileShaders({
                      USE_RGBE_CUBEMAP: val
                    });
                  }

                  if (this._model) {
                    this._model.setSubModelMaterial(0, skybox_material);
                  }
                }

                SkyboxPool.set(this._handle, SkyboxView.IS_RGBE, val ? 1 : 0);

                this._updatePipeline();
              }

              get envmap() {
                return this._envmap;
              }

              set envmap(val) {
                this._envmap = val || this._default;

                if (this._envmap) {
                  legacyCC.director.root.pipeline.pipelineSceneData.ambient.albedoArray[3] = this._envmap.mipmapLevel;

                  this._updateGlobalBinding();
                }
              }

              get handle() {
                return this._handle;
              }

              constructor() {
                this._envmap = null;
                this._globalDescriptorSet = null;
                this._model = null;
                this._default = null;
                this._handle = NULL_HANDLE;
                this._handle = SkyboxPool.alloc();
              }

              initialize(skyboxInfo) {
                SkyboxPool.set(this._handle, SkyboxView.ENABLE, skyboxInfo.enabled ? 1 : 0);
                SkyboxPool.set(this._handle, SkyboxView.USE_IBL, skyboxInfo.useIBL ? 1 : 0);
                SkyboxPool.set(this._handle, SkyboxView.IS_RGBE, skyboxInfo.isRGBE ? 1 : 0);
                this._envmap = skyboxInfo.envmap;
              }

              activate() {
                const pipeline = legacyCC.director.root.pipeline;
                const ambient = pipeline.pipelineSceneData.ambient;
                this._globalDescriptorSet = pipeline.descriptorSet;
                this._default = builtinResMgr.get('default-cube-texture');

                if (!this._model) {
                  this._model = legacyCC.director.root.createModel(legacyCC.renderer.scene.Model);

                  this._model._initLocalDescriptors = () => {};
                }

                SkyboxPool.set(this._handle, SkyboxView.MODEL, this._model.handle);

                if (!this._envmap) {
                  this._envmap = this._default;
                }

                ambient.albedoArray[3] = this._envmap.mipmapLevel;

                if (!skybox_material) {
                  const mat = new Material();
                  mat.initialize({
                    effectName: 'skybox',
                    defines: {
                      USE_RGBE_CUBEMAP: this.isRGBE
                    }
                  });
                  skybox_material = new MaterialInstance({
                    parent: mat
                  });
                } else {
                  skybox_material.recompileShaders({
                    USE_RGBE_CUBEMAP: this.isRGBE
                  });
                }

                if (this.enabled) {
                  if (!skybox_mesh) {
                    skybox_mesh = legacyCC.utils.createMesh(legacyCC.primitives.box({
                      width: 2,
                      height: 2,
                      length: 2
                    }));
                  }

                  this._model.initSubModel(0, skybox_mesh.renderingSubMeshes[0], skybox_material);
                }

                this._updateGlobalBinding();

                this._updatePipeline();
              }

              _updatePipeline() {
                const value = this.useIBL ? this.isRGBE ? 2 : 1 : 0;
                const root = legacyCC.director.root;
                const pipeline = root.pipeline;
                const current = pipeline.macros.CC_USE_IBL;

                if (current === value) {
                  return;
                }

                pipeline.macros.CC_USE_IBL = value;
                root.onGlobalPipelineStateChanged();
              }

              _updateGlobalBinding() {
                const texture = this.envmap.getGFXTexture();
                const sampler = samplerLib.getSampler(legacyCC.director._device, this.envmap.getSamplerHash());

                this._globalDescriptorSet.bindSampler(UNIFORM_ENVIRONMENT_BINDING, sampler);

                this._globalDescriptorSet.bindTexture(UNIFORM_ENVIRONMENT_BINDING, texture);
              }

              destroy() {
                if (this._handle) {
                  SkyboxPool.free(this._handle);
                  this._handle = NULL_HANDLE;
                }
              }

            }
            legacyCC.Skybox = Skybox;

            const ShadowType = Enum({
              Planar: 0,
              ShadowMap: 1
            });
            const PCFType = Enum({
              HARD: 0,
              FILTER_X5: 1,
              FILTER_X9: 2,
              FILTER_X25: 3
            });
            const SHADOW_TYPE_NONE = ShadowType.ShadowMap + 1;
            class Shadows {
              get enabled() {
                if (ShadowsPool.get(this._handle, ShadowsView.ENABLE)) {
                  return true;
                }

                return false;
              }

              set enabled(val) {
                ShadowsPool.set(this._handle, ShadowsView.ENABLE, val ? 1 : 0);
                if (!val) ShadowsPool.set(this._handle, ShadowsView.TYPE, SHADOW_TYPE_NONE);
                this.activate();
              }

              get normal() {
                return this._normal;
              }

              set normal(val) {
                Vec3.copy(this._normal, val);
                ShadowsPool.setVec3(this._handle, ShadowsView.NORMAL, this._normal);
              }

              get distance() {
                return ShadowsPool.get(this._handle, ShadowsView.DISTANCE);
              }

              set distance(val) {
                ShadowsPool.set(this._handle, ShadowsView.DISTANCE, val);
              }

              get shadowColor() {
                return this._shadowColor;
              }

              set shadowColor(color) {
                this._shadowColor = color;
                ShadowsPool.setVec4(this._handle, ShadowsView.COLOR, color);
              }

              get type() {
                return ShadowsPool.get(this._handle, ShadowsView.TYPE);
              }

              set type(val) {
                ShadowsPool.set(this._handle, ShadowsView.TYPE, this.enabled ? val : SHADOW_TYPE_NONE);
                this.activate();
              }

              get near() {
                return ShadowsPool.get(this._handle, ShadowsView.NEAR);
              }

              set near(val) {
                ShadowsPool.set(this._handle, ShadowsView.NEAR, val);
              }

              get far() {
                return ShadowsPool.get(this._handle, ShadowsView.FAR);
              }

              set far(val) {
                ShadowsPool.set(this._handle, ShadowsView.FAR, val);
              }

              get aspect() {
                return ShadowsPool.get(this._handle, ShadowsView.ASPECT);
              }

              set aspect(val) {
                ShadowsPool.set(this._handle, ShadowsView.ASPECT, val);
              }

              get orthoSize() {
                return ShadowsPool.get(this._handle, ShadowsView.ORTHO_SIZE);
              }

              set orthoSize(val) {
                ShadowsPool.set(this._handle, ShadowsView.ORTHO_SIZE, val);
              }

              get size() {
                return this._size;
              }

              set size(val) {
                this._size = val;
                ShadowsPool.setVec2(this._handle, ShadowsView.SIZE, this._size);
              }

              get pcf() {
                return ShadowsPool.get(this._handle, ShadowsView.PCF_TYPE);
              }

              set pcf(val) {
                ShadowsPool.set(this._handle, ShadowsView.PCF_TYPE, val);
              }

              get shadowMapDirty() {
                if (ShadowsPool.get(this._handle, ShadowsView.SHADOW_MAP_DIRTY)) {
                  return true;
                }

                return false;
              }

              set shadowMapDirty(val) {
                ShadowsPool.set(this._handle, ShadowsView.SHADOW_MAP_DIRTY, val ? 1 : 0);
              }

              get bias() {
                return ShadowsPool.get(this._handle, ShadowsView.BIAS);
              }

              set bias(val) {
                ShadowsPool.set(this._handle, ShadowsView.BIAS, val);
              }

              get packing() {
                if (ShadowsPool.get(this._handle, ShadowsView.PACKING)) {
                  return true;
                }

                return false;
              }

              set packing(val) {
                ShadowsPool.set(this._handle, ShadowsView.PACKING, val ? 1 : 0);
              }

              get linear() {
                if (ShadowsPool.get(this._handle, ShadowsView.LINEAR)) {
                  return true;
                }

                return false;
              }

              set linear(val) {
                ShadowsPool.set(this._handle, ShadowsView.LINEAR, val ? 1 : 0);
              }

              get selfShadow() {
                if (ShadowsPool.get(this._handle, ShadowsView.SELF_SHADOW)) {
                  return true;
                }

                return false;
              }

              set selfShadow(val) {
                ShadowsPool.set(this._handle, ShadowsView.SELF_SHADOW, val ? 1 : 0);
              }

              get normalBias() {
                return ShadowsPool.get(this._handle, ShadowsView.NORMAL_BIAS);
              }

              set normalBias(val) {
                ShadowsPool.set(this._handle, ShadowsView.NORMAL_BIAS, val);
              }

              get autoAdapt() {
                if (ShadowsPool.get(this._handle, ShadowsView.AUTO_ADAPT)) {
                  return true;
                }

                return false;
              }

              set autoAdapt(val) {
                ShadowsPool.set(this._handle, ShadowsView.AUTO_ADAPT, val ? 1 : 0);
              }

              get matLight() {
                return this._matLight;
              }

              get material() {
                return this._material;
              }

              get instancingMaterial() {
                return this._instancingMaterial;
              }

              get handle() {
                return this._handle;
              }

              constructor() {
                this.sphere = new Sphere(0.0, 0.0, 0.0, 0.01);
                this.maxReceived = 4;
                this._normal = new Vec3(0, 1, 0);
                this._shadowColor = new Color(0, 0, 0, 76);
                this._matLight = new Mat4();
                this._material = null;
                this._instancingMaterial = null;
                this._size = new Vec2(512, 512);
                this._handle = NULL_HANDLE;
                this._handle = ShadowsPool.alloc();
              }

              getPlanarShader(patches) {
                if (!this._material) {
                  this._material = new Material();

                  this._material.initialize({
                    effectName: 'planar-shadow'
                  });

                  ShadowsPool.set(this._handle, ShadowsView.PLANAR_PASS, this._material.passes[0].handle);
                }

                return this._material.passes[0].getShaderVariant(patches);
              }

              getPlanarInstanceShader(patches) {
                if (!this._instancingMaterial) {
                  this._instancingMaterial = new Material();

                  this._instancingMaterial.initialize({
                    effectName: 'planar-shadow',
                    defines: {
                      USE_INSTANCING: true
                    }
                  });

                  ShadowsPool.set(this._handle, ShadowsView.INSTANCE_PASS, this._instancingMaterial.passes[0].handle);
                }

                return this._instancingMaterial.passes[0].getShaderVariant(patches);
              }

              initialize(shadowsInfo) {
                ShadowsPool.set(this._handle, ShadowsView.TYPE, shadowsInfo.enabled ? shadowsInfo.type : SHADOW_TYPE_NONE);
                ShadowsPool.set(this._handle, ShadowsView.NEAR, shadowsInfo.near);
                ShadowsPool.set(this._handle, ShadowsView.FAR, shadowsInfo.far);
                ShadowsPool.set(this._handle, ShadowsView.ASPECT, shadowsInfo.aspect);
                ShadowsPool.set(this._handle, ShadowsView.ORTHO_SIZE, shadowsInfo.orthoSize);
                this._size = shadowsInfo.shadowMapSize;
                ShadowsPool.setVec2(this._handle, ShadowsView.SIZE, this._size);
                ShadowsPool.set(this._handle, ShadowsView.PCF_TYPE, shadowsInfo.pcf);
                Vec3.copy(this._normal, shadowsInfo.normal);
                ShadowsPool.setVec3(this._handle, ShadowsView.NORMAL, this._normal);
                ShadowsPool.set(this._handle, ShadowsView.DISTANCE, shadowsInfo.distance);

                this._shadowColor.set(shadowsInfo.shadowColor);

                ShadowsPool.setVec4(this._handle, ShadowsView.COLOR, this._shadowColor);
                ShadowsPool.set(this._handle, ShadowsView.BIAS, shadowsInfo.bias);
                ShadowsPool.set(this._handle, ShadowsView.PACKING, shadowsInfo.packing ? 1 : 0);
                ShadowsPool.set(this._handle, ShadowsView.LINEAR, shadowsInfo.linear ? 1 : 0);
                ShadowsPool.set(this._handle, ShadowsView.SELF_SHADOW, shadowsInfo.selfShadow ? 1 : 0);
                ShadowsPool.set(this._handle, ShadowsView.NORMAL_BIAS, shadowsInfo.normalBias);
                ShadowsPool.set(this._handle, ShadowsView.ENABLE, shadowsInfo.enabled ? 1 : 0);
                this.maxReceived = shadowsInfo.maxReceived;
                ShadowsPool.set(this._handle, ShadowsView.AUTO_ADAPT, shadowsInfo.autoAdapt ? 1 : 0);
              }

              activate() {
                if (this.enabled) {
                  if (this.type === ShadowType.ShadowMap) {
                    this._updatePipeline();
                  } else {
                    this._updatePlanarInfo();
                  }
                } else {
                  const root = legacyCC.director.root;
                  const pipeline = root.pipeline;
                  pipeline.macros.CC_RECEIVE_SHADOW = 0;
                  root.onGlobalPipelineStateChanged();
                }
              }

              _updatePlanarInfo() {
                if (!this._material) {
                  this._material = new Material();

                  this._material.initialize({
                    effectName: 'planar-shadow'
                  });

                  ShadowsPool.set(this._handle, ShadowsView.PLANAR_PASS, this._material.passes[0].handle);
                }

                if (!this._instancingMaterial) {
                  this._instancingMaterial = new Material();

                  this._instancingMaterial.initialize({
                    effectName: 'planar-shadow',
                    defines: {
                      USE_INSTANCING: true
                    }
                  });

                  ShadowsPool.set(this._handle, ShadowsView.INSTANCE_PASS, this._instancingMaterial.passes[0].handle);
                }

                const root = legacyCC.director.root;
                const pipeline = root.pipeline;
                pipeline.macros.CC_RECEIVE_SHADOW = 0;
                root.onGlobalPipelineStateChanged();
              }

              _updatePipeline() {
                const root = legacyCC.director.root;
                const pipeline = root.pipeline;
                pipeline.macros.CC_RECEIVE_SHADOW = 1;
                root.onGlobalPipelineStateChanged();
              }

              destroy() {
                if (this._material) {
                  this._material.destroy();
                }

                if (this._instancingMaterial) {
                  this._instancingMaterial.destroy();
                }

                if (this._handle) {
                  ShadowsPool.free(this._handle);
                  this._handle = NULL_HANDLE;
                }

                this.sphere.destroy();
              }

            }
            Shadows.MAX_FAR = 2000.0;
            Shadows.COEFFICIENT_OF_EXPANSION = 2.0 * Math.sqrt(3.0);
            legacyCC.Shadows = Shadows;

            class PipelineSceneData {
              get handle() {
                return this._handle;
              }

              get isHDR() {
                return PipelineSceneDataPool.get(this._handle, PipelineSceneDataView.IS_HDR);
              }

              set isHDR(val) {
                PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.IS_HDR, val ? 1 : 0);
              }

              get shadingScale() {
                return PipelineSceneDataPool.get(this._handle, PipelineSceneDataView.SHADING_SCALE);
              }

              set shadingScale(val) {
                PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.SHADING_SCALE, val);
              }

              get fpScale() {
                return PipelineSceneDataPool.get(this._handle, PipelineSceneDataView.FP_SCALE);
              }

              set fpScale(val) {
                PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.FP_SCALE, val);
              }

              constructor() {
                this.fog = new Fog();
                this.ambient = new Ambient();
                this.skybox = new Skybox();
                this.shadows = new Shadows();
                this.renderObjects = [];
                this.shadowObjects = [];
                this.shadowFrameBufferMap = new Map();
                this._handle = PipelineSceneDataPool.alloc();
                PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.AMBIENT, this.ambient.handle);
                PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.SKYBOX, this.skybox.handle);
                PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.FOG, this.fog.handle);
                PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.SHADOW, this.shadows.handle);
                PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.IS_HDR, 0);
                PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.SHADING_SCALE, 1.0);
                PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.FP_SCALE, 1.0 / 1024.0);
              }

              get deferredLightPassHandle() {
                return PipelineSceneDataPool.get(this._handle, PipelineSceneDataView.DEFERRED_LIGHT_PASS);
              }

              get deferredLightPassShaderHandle() {
                return PipelineSceneDataPool.get(this._handle, PipelineSceneDataView.DEFERRED_LIGHT_PASS_SHADER);
              }

              get deferredPostPassHandle() {
                return PipelineSceneDataPool.get(this._handle, PipelineSceneDataView.DEFERRED_POST_PASS);
              }

              get deferredPostPassShaderHandle() {
                return PipelineSceneDataPool.get(this._handle, PipelineSceneDataView.DEFERRED_POST_PASS_SHADER);
              }

              initDeferredPassInfo() {
                const builinDeferred = builtinResMgr.get('builtin-deferred-material');

                if (builinDeferred) {
                  const passLit = builinDeferred.passes[0];
                  passLit.beginChangeStatesSilently();
                  passLit.tryCompile();
                  passLit.endChangeStatesSilently();
                }

                const builtinPostProcess = builtinResMgr.get('builtin-post-process-material');

                if (builtinPostProcess) {
                  const passPost = builtinPostProcess.passes[0];
                  passPost.beginChangeStatesSilently();
                  passPost.tryCompile();
                  passPost.endChangeStatesSilently();
                }

                if (builinDeferred) {
                  const passLit = builinDeferred.passes[0];
                  PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.DEFERRED_LIGHT_PASS, passLit.handle);
                  PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.DEFERRED_LIGHT_PASS_SHADER, passLit.getShaderVariant());
                }

                if (builtinPostProcess) {
                  const passPost = builtinPostProcess.passes[0];
                  PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.DEFERRED_POST_PASS, passPost.handle);
                  PipelineSceneDataPool.set(this._handle, PipelineSceneDataView.DEFERRED_POST_PASS_SHADER, passPost.getShaderVariant());
                }
              }

              activate(device, pipeline) {
                this._device = device;
                this._pipeline = pipeline;
                this.initDeferredPassInfo();
                return true;
              }

              destroy() {
                this.ambient.destroy();
                this.skybox.destroy();
                this.fog.destroy();
                this.shadows.destroy();

                if (this._handle) {
                  PipelineSceneDataPool.free(this._handle);
                }
              }

            }

            nr.getPhaseID = getPhaseID;
            const RenderPipeline = exports('fg', nr.RenderPipeline);
            const RenderFlow = exports('fh', nr.RenderFlow);
            const RenderStage = exports('fi', nr.RenderStage);
            const InstancedBuffer = exports('fj', nr.InstancedBuffer);
            const PipelineStateManager = exports('fk', nr.PipelineStateManager);
            let instancedBufferProto = nr.InstancedBuffer;
            let oldGetFunc = instancedBufferProto.get;

            instancedBufferProto.get = function (pass) {
              return oldGetFunc.call(this, pass.handle);
            };

            let getOrCreatePipelineState = nr.PipelineStateManager.getOrCreatePipelineState;

            nr.PipelineStateManager.getOrCreatePipelineState = function (device, pass, shader, renderPass, ia) {
              return getOrCreatePipelineState.call(this, pass.handle, shader, renderPass, ia);
            };

            function createDefaultPipeline() {
              const pipeline = new ForwardPipeline();
              pipeline.init();
              return pipeline;
            }
            class ForwardPipeline extends nr.ForwardPipeline {
              constructor() {
                super();
                this.pipelineSceneData = new PipelineSceneData();
                this._tag = 0;
                this._flows = [];
                this.renderTextures = [];
                this.materials = [];
              }

              init() {
                this.setPipelineSharedSceneData(this.pipelineSceneData.handle);

                for (let i = 0; i < this._flows.length; i++) {
                  this._flows[i].init();
                }

                const info = new nr.RenderPipelineInfo(this._tag, this._flows);
                this.initialize(info);
              }

              activate() {
                return super.activate() && this.pipelineSceneData.activate(legacyCC.director.root.device, this);
              }

              render(cameras) {
                let handles = [];

                for (let i = 0, len = cameras.length; i < len; ++i) {
                  handles.push(cameras[i].handle);
                }

                super.render(handles);
              }

              destroy() {
                this.pipelineSceneData.destroy();
                super.destroy();
              }

            } exports('fm', ForwardPipeline);
            ForwardPipeline.prototype.onAfterDeserialize_JSB = ForwardPipeline.prototype.init;
            class ForwardFlow extends nr.ForwardFlow {
              constructor() {
                super();
                this._name = 0;
                this._priority = 0;
                this._tag = 0;
                this._stages = [];
              }

              init() {
                for (let i = 0; i < this._stages.length; i++) {
                  this._stages[i].init();
                }

                const info = new nr.RenderFlowInfo(this._name, this._priority, this._tag, this._stages);
                this.initialize(info);
              }

            } exports('fn', ForwardFlow);
            class ShadowFlow extends nr.ShadowFlow {
              constructor() {
                super();
                this._name = 0;
                this._priority = 0;
                this._tag = 0;
                this._stages = [];
              }

              init() {
                for (let i = 0; i < this._stages.length; i++) {
                  this._stages[i].init();
                }

                const info = new nr.RenderFlowInfo(this._name, this._priority, this._tag, this._stages);
                this.initialize(info);
              }

            } exports('fo', ShadowFlow);
            class ForwardStage extends nr.ForwardStage {
              constructor() {
                super();
                this._name = 0;
                this._priority = 0;
                this._tag = 0;
                this.renderQueues = [];
              }

              init() {
                const queues = [];

                for (let i = 0; i < this.renderQueues.length; i++) {
                  queues.push(this.renderQueues[i].init());
                }

                const info = new nr.RenderStageInfo(this._name, this._priority, this._tag, queues);
                this.initialize(info);
              }

            } exports('fp', ForwardStage);
            class ShadowStage extends nr.ShadowStage {
              constructor() {
                super();
                this._name = 0;
                this._priority = 0;
                this._tag = 0;
              }

              init() {
                const info = new nr.RenderStageInfo(this._name, this._priority, this._tag, []);
                this.initialize(info);
              }

            } exports('fq', ShadowStage);
            class RenderQueueDesc {
              constructor() {
                this.isTransparent = false;
                this.sortMode = 0;
                this.stages = [];
                this.isTransparent = false;
                this.sortMode = 0;
                this.stages = [];
              }

              init() {
                return new nr.RenderQueueDesc(this.isTransparent, this.sortMode, this.stages);
              }

            } exports('fr', RenderQueueDesc);
            class DeferredPipeline extends nr.DeferredPipeline {
              constructor() {
                super();
                this.pipelineSceneData = new PipelineSceneData();
                this._tag = 0;
                this._flows = [];
                this.renderTextures = [];
                this.materials = [];
              }

              init() {
                this.setPipelineSharedSceneData(this.pipelineSceneData.handle);

                for (let i = 0; i < this._flows.length; i++) {
                  this._flows[i].init();
                }

                let info = new nr.RenderPipelineInfo(this._tag, this._flows);
                this.initialize(info);
              }

              activate() {
                return super.activate() && this.pipelineSceneData.activate(legacyCC.director.root.device, this);
              }

              render(cameras) {
                let handles = [];

                for (let i = 0, len = cameras.length; i < len; ++i) {
                  handles.push(cameras[i].handle);
                }

                super.render(handles);
              }

              destroy() {
                this.fog.destroy();
                this.ambient.destroy();
                this.skybox.destroy();
                this.shadows.destroy();
                this.pipelineSceneData.destroy();
                super.destroy();
              }

            } exports('fs', DeferredPipeline);
            DeferredPipeline.prototype.onAfterDeserialize_JSB = DeferredPipeline.prototype.init;
            class GbufferFlow extends nr.GbufferFlow {
              constructor() {
                super();
                this._name = 0;
                this._priority = 0;
                this._tag = 0;
                this._stages = [];
              }

              init() {
                for (let i = 0; i < this._stages.length; i++) {
                  this._stages[i].init();
                }

                let info = new nr.RenderFlowInfo(this._name, this._priority, this._tag, this._stages);
                this.initialize(info);
              }

            } exports('ft', GbufferFlow);
            class GbufferStage extends nr.GbufferStage {
              constructor() {
                super();
                this._name = 0;
                this._priority = 0;
                this._tag = 0;
                this.renderQueues = [];
              }

              init() {
                const queues = [];

                for (let i = 0; i < this.renderQueues.length; i++) {
                  queues.push(this.renderQueues[i].init());
                }

                let info = new nr.RenderStageInfo(this._name, this._priority, this._tag, queues);
                this.initialize(info);
              }

            } exports('fu', GbufferStage);

            class LightingFlow extends nr.LightingFlow {
              constructor() {
                super();
                this._name = 0;
                this._priority = 0;
                this._tag = 0;
                this._stages = [];
              }

              init() {
                for (let i = 0; i < this._stages.length; i++) {
                  this._stages[i].init();
                }

                let info = new nr.RenderFlowInfo(this._name, this._priority, this._tag, this._stages);
                this.initialize(info);
              }

            }

            class LightingStage extends nr.LightingStage {
              constructor() {
                super();
                this._name = 0;
                this._priority = 0;
                this._tag = 0;
                this.renderQueues = [];
              }

              init() {
                const queues = [];

                for (let i = 0; i < this.renderQueues.length; i++) {
                  queues.push(this.renderQueues[i].init());
                }

                let info = new nr.RenderStageInfo(this._name, this._priority, this._tag, queues);
                this.initialize(info);
              }

            } exports('fv', LightingStage);
            class PostprocessStage extends nr.PostprocessStage {
              constructor() {
                super();
                this._name = 0;
                this._priority = 0;
                this._tag = 0;
                this.renderQueues = [];
              }

              init() {
                const queues = [];

                for (let i = 0; i < this.renderQueues.length; i++) {
                  queues.push(this.renderQueues[i].init());
                }

                let info = new nr.RenderStageInfo(this._name, this._priority, this._tag, queues);
                this.initialize(info);
              }

            } exports('fw', PostprocessStage);
            setClassName('DeferredPipeline', DeferredPipeline);
            setClassName('GbufferFlow', GbufferFlow);
            setClassName('GbufferStage', GbufferStage);
            setClassName('LightingFlow', LightingFlow);
            setClassName('LightingStage', LightingStage);
            setClassName('PostprocessStage', PostprocessStage);
            setClassName('ForwardPipeline', ForwardPipeline);
            setClassName('ForwardFlow', ForwardFlow);
            setClassName('ShadowFlow', ShadowFlow);
            setClassName('ForwardStage', ForwardStage);
            setClassName('ShadowStage', ShadowStage);
            setClassName('RenderQueueDesc', RenderQueueDesc);

            class Game extends EventTarget {
              constructor(...args) {
                super(...args);
                this.frame = null;
                this.container = null;
                this.canvas = null;
                this.renderType = -1;
                this.eventTargetOn = super.on;
                this.eventTargetOnce = super.once;
                this.config = {};
                this.onStart = null;
                this.collisionMatrix = [];
                this.groupList = [];
                this._persistRootNodes = {};
                this._paused = true;
                this._configLoaded = false;
                this._isCloning = false;
                this._inited = false;
                this._engineInited = false;
                this._rendererInitialized = false;
                this._gfxDevice = null;
                this._intervalId = null;
              }

              get inited() {
                return this._inited;
              }

              get frameTime() {
                return this._frameTime;
              }

              setFrameRate(frameRate) {
                const config = this.config;

                if (typeof frameRate !== 'number') {
                  frameRate = parseInt(frameRate, 10);

                  if (Number.isNaN(frameRate)) {
                    frameRate = 60;
                  }
                }

                config.frameRate = frameRate;
                this._paused = true;

                this._setAnimFrame();

                this._runMainLoop();
              }

              getFrameRate() {
                return this.config.frameRate || 0;
              }

              step() {
                legacyCC.director.mainLoop();
              }

              pause() {
                if (this._paused) {
                  return;
                }

                this._paused = true;

                if (this._intervalId) {
                  window.cAF(this._intervalId);
                  this._intervalId = 0;
                }
              }

              resume() {
                if (!this._paused) {
                  return;
                }

                this._runMainLoop();
              }

              isPaused() {
                return this._paused;
              }

              restart() {
                const afterDrawPromise = new Promise(resolve => legacyCC.director.once(legacyCC.Director.EVENT_AFTER_DRAW, () => resolve()));
                return afterDrawPromise.then(() => {
                  for (const id in this._persistRootNodes) {
                    this.removePersistRootNode(this._persistRootNodes[id]);
                  }

                  legacyCC.director.getScene().destroy();

                  legacyCC.Object._deferredDestroy();

                  legacyCC.director.reset();
                  this.pause();
                  return this._setRenderPipelineNShowSplash().then(() => {
                    this.resume();

                    this._safeEmit(Game.EVENT_RESTART);
                  });
                });
              }

              end() {
                if (this._gfxDevice) {
                  this._gfxDevice.destroy();

                  this._gfxDevice = null;
                }

                window.close();
              }

              on(type, callback, target, once) {
                if (this._engineInited && type === Game.EVENT_ENGINE_INITED) {
                  return callback.call(target);
                }

                return this.eventTargetOn(type, callback, target, once);
              }

              once(type, callback, target) {
                if (this._engineInited && type === Game.EVENT_ENGINE_INITED) {
                  return callback.call(target);
                }

                return this.eventTargetOnce(type, callback, target);
              }

              init(config) {
                this._initConfig(config);

                if (this.config.assetOptions) {
                  legacyCC.assetManager.init(this.config.assetOptions);
                }

                return this._initEngine().then(() => {
                  {
                    this._initEvents();
                  }

                  if (legacyCC.director.root.dataPoolManager) {
                    legacyCC.director.root.dataPoolManager.jointTexturePool.registerCustomTextureLayouts(config.customJointTextureLayouts);
                  }

                  return this._engineInited;
                });
              }

              run(configOrCallback, onStart) {
                let initPromise;

                if (typeof configOrCallback !== 'function' && configOrCallback) {
                  initPromise = this.init(configOrCallback);
                  this.onStart = onStart !== null && onStart !== void 0 ? onStart : null;
                } else {
                  this.onStart = configOrCallback !== null && configOrCallback !== void 0 ? configOrCallback : null;
                }

                return Promise.resolve(initPromise).then(() => {
                  if ( game.config.registerSystemEvent) {
                    inputManager.registerSystemEvent();
                  }

                  return this._setRenderPipelineNShowSplash();
                });
              }

              addPersistRootNode(node) {
                if (!legacyCC.Node.isNode(node) || !node.uuid) {
                  warnID(3800);
                  return;
                }

                const id = node.uuid;

                if (!this._persistRootNodes[id]) {
                  const scene = legacyCC.director._scene;

                  if (legacyCC.isValid(scene)) {
                    if (!node.parent) {
                      node.parent = scene;
                    } else if (!(node.parent instanceof legacyCC.Scene)) {
                      warnID(3801);
                      return;
                    } else if (node.parent !== scene) {
                      warnID(3802);
                      return;
                    } else {
                      node._originalSceneId = scene.uuid;
                    }
                  }

                  this._persistRootNodes[id] = node;
                  node._persistNode = true;

                  legacyCC.assetManager._releaseManager._addPersistNodeRef(node);
                }
              }

              removePersistRootNode(node) {
                const id = node.uuid || '';

                if (node === this._persistRootNodes[id]) {
                  delete this._persistRootNodes[id];
                  node._persistNode = false;
                  node._originalSceneId = '';

                  legacyCC.assetManager._releaseManager._removePersistNodeRef(node);
                }
              }

              isPersistRootNode(node) {
                return !!node._persistNode;
              }

              _initEngine() {
                this._initDevice();

                return Promise.resolve(legacyCC.director._init()).then(() => {
                  log(`Cocos Creator v${engineVersion}`);
                  this.emit(Game.EVENT_ENGINE_INITED);
                  this._engineInited = true;
                  legacyCC.internal.dynamicAtlasManager.enabled = !macro.CLEANUP_IMAGE_CACHE;
                });
              }

              _setAnimFrame() {
                this._lastTime = performance.now();
                const frameRate = this.config.frameRate;
                this._frameTime = 1000 / frameRate;

                {
                  jsb.setPreferredFramesPerSecond(frameRate);
                  window.rAF = window.requestAnimationFrame;
                  window.cAF = window.cancelAnimationFrame;
                }
              }

              _stTimeWithRAF(callback) {
                const currTime = performance.now();
                const elapseTime = Math.max(0, currTime - game._lastTime);
                const timeToCall = Math.max(0, game._frameTime - elapseTime);
                const id = window.setTimeout(() => {
                  window.requestAnimationFrame(callback);
                }, timeToCall);
                game._lastTime = currTime + timeToCall;
                return id;
              }

              _stTime(callback) {
                const currTime = performance.now();
                const elapseTime = Math.max(0, currTime - game._lastTime);
                const timeToCall = Math.max(0, game._frameTime - elapseTime);
                const id = window.setTimeout(callback, timeToCall);
                game._lastTime = currTime + timeToCall;
                return id;
              }

              _ctTime(id) {
                window.clearTimeout(id);
              }

              _runMainLoop() {
                if (!this._inited || EDITOR ) {
                  return;
                }

                const config = this.config;
                const director = legacyCC.director;
                const frameRate = config.frameRate;
                setDisplayStats(!!config.showFPS);
                director.startAnimation();
                let callback;

                {
                  callback = time => {
                    this._intervalId = window.rAF(callback);
                    director.mainLoop(time);
                  };
                }

                if (this._intervalId) {
                  window.cAF(this._intervalId);
                  this._intervalId = 0;
                }

                this._intervalId = window.rAF(callback);
                this._paused = false;
              }

              _initConfig(config) {
                if (typeof config.debugMode !== 'number') {
                  config.debugMode = DebugMode.NONE;
                }

                config.exposeClassName = !!config.exposeClassName;

                if (typeof config.frameRate !== 'number') {
                  config.frameRate = 60;
                }

                const renderMode = config.renderMode;

                if (typeof renderMode !== 'number' || renderMode > 2 || renderMode < 0) {
                  config.renderMode = 0;
                }

                if (typeof config.registerSystemEvent !== 'boolean') {
                  config.registerSystemEvent = true;
                }

                config.showFPS = !!config.showFPS;
                this.collisionMatrix = config.collisionMatrix || [];
                this.groupList = config.groupList || [];

                _resetDebugSetting(config.debugMode);

                this.config = config;
                this._configLoaded = true;

                this._setAnimFrame();
              }

              _determineRenderType() {
                const config = this.config;
                const userRenderMode = parseInt(config.renderMode, 10);
                this.renderType = Game.RENDER_TYPE_CANVAS;
                let supportRender = false;

                if (userRenderMode === 0) {
                  if (legacyCC.sys.capabilities.opengl) {
                    this.renderType = Game.RENDER_TYPE_WEBGL;
                    supportRender = true;
                  } else if (legacyCC.sys.capabilities.canvas) {
                    this.renderType = Game.RENDER_TYPE_CANVAS;
                    supportRender = true;
                  }
                } else if (userRenderMode === 1 && legacyCC.sys.capabilities.canvas) {
                  this.renderType = Game.RENDER_TYPE_CANVAS;
                  supportRender = true;
                } else if (userRenderMode === 2 && legacyCC.sys.capabilities.opengl) {
                  this.renderType = Game.RENDER_TYPE_WEBGL;
                  supportRender = true;
                }

                if (!supportRender) {
                  throw new Error(getError(3820, userRenderMode));
                }
              }

              _initDevice() {
                if (this._rendererInitialized) {
                  return;
                }

                this.canvas = this.config.adapter.canvas;
                this.frame = this.config.adapter.frame;
                this.container = this.config.adapter.container;

                this._determineRenderType();

                if (this.renderType === Game.RENDER_TYPE_WEBGL) {
                  const ctors = [];

                  if ( window.gfx) {
                    this._gfxDevice = gfx.deviceInstance;
                  } else {
                    let useWebGL2 = !!window.WebGL2RenderingContext;
                    const userAgent = window.navigator.userAgent.toLowerCase();

                    if (userAgent.indexOf('safari') !== -1 && userAgent.indexOf('chrome') === -1 || system.browserType === BrowserType.UC) {
                        useWebGL2 = false;
                      }

                    if (useWebGL2 && legacyCC.WebGL2Device) {
                      ctors.push(legacyCC.WebGL2Device);
                    }

                    if (legacyCC.WebGLDevice) {
                      ctors.push(legacyCC.WebGLDevice);
                    }

                    const opts = new DeviceInfo(this.canvas,  macro.ENABLE_WEBGL_ANTIALIAS, false, window.devicePixelRatio, sys.windowPixelResolution.width, sys.windowPixelResolution.height, bindingMappingInfo);

                    for (let i = 0; i < ctors.length; i++) {
                      this._gfxDevice = new ctors[i]();

                      if (this._gfxDevice.initialize(opts)) {
                        break;
                      }
                    }
                  }
                }

                if (!this._gfxDevice) {
                  error('can not support canvas rendering in 3D');
                  this.renderType = Game.RENDER_TYPE_CANVAS;
                  return;
                }

                this.canvas.oncontextmenu = () => false;
              }

              _initEvents() {
                system.onShow(this._onShow.bind(this));
                system.onHide(this._onHide.bind(this));
              }

              _onHide() {
                this.emit(Game.EVENT_HIDE);
                this.pause();
              }

              _onShow() {
                this.emit(Game.EVENT_SHOW);
                this.resume();
              }

              _setRenderPipelineNShowSplash() {
                return Promise.resolve(this._setupRenderPipeline()).then(() => Promise.resolve(this._showSplashScreen()).then(() => {
                  this._inited = true;

                  this._setAnimFrame();

                  this._runMainLoop();

                  this._safeEmit(Game.EVENT_GAME_INITED);

                  if (this.onStart) {
                    this.onStart();
                  }
                }));
              }

              _setupRenderPipeline() {
                const {
                  renderPipeline
                } = this.config;

                if (!renderPipeline) {
                  return this._setRenderPipeline();
                }

                return new Promise((resolve, reject) => {
                  legacyCC.assetManager.loadAny(renderPipeline, (err, asset) => err || !(asset instanceof RenderPipeline) ? reject(err) : resolve(asset));
                }).then(asset => {
                  this._setRenderPipeline(asset);
                }).catch(reason => {
                  warn(reason);
                  warn(`Failed load render pipeline: ${renderPipeline}, engine failed to initialize, will fallback to default pipeline`);

                  this._setRenderPipeline();
                });
              }

              _showSplashScreen() {
                if ( legacyCC.internal.SplashScreen) {
                  const splashScreen = legacyCC.internal.SplashScreen.instance;
                  splashScreen.main(legacyCC.director.root);
                  return new Promise(resolve => {
                    splashScreen.setOnFinish(() => resolve());
                    splashScreen.loadFinish = true;
                  });
                }

                return null;
              }

              _setRenderPipeline(rppl) {
                if (!legacyCC.director.root.setRenderPipeline(rppl)) {
                  this._setRenderPipeline();
                }

                this._rendererInitialized = true;

                this._safeEmit(Game.EVENT_RENDERER_INITED);
              }

              _safeEmit(event) {
                {
                  this.emit(event);
                }
              }

            } exports('cX', Game);
            Game.EVENT_HIDE = 'game_on_hide';
            Game.EVENT_SHOW = 'game_on_show';
            Game.EVENT_LOW_MEMORY = 'game_on_low_memory';
            Game.EVENT_GAME_INITED = 'game_inited';
            Game.EVENT_ENGINE_INITED = 'engine_inited';
            Game.EVENT_RENDERER_INITED = 'renderer_inited';
            Game.EVENT_RESTART = 'game_on_restart';
            Game.RENDER_TYPE_CANVAS = 0;
            Game.RENDER_TYPE_WEBGL = 1;
            Game.RENDER_TYPE_OPENGL = 2;
            legacyCC.Game = Game;
            const game = exports('d2', legacyCC.game = new Game());

            const visibleRect = exports('d1', {
              topLeft: legacyCC.v2(0, 0),
              topRight: legacyCC.v2(0, 0),
              top: legacyCC.v2(0, 0),
              bottomLeft: legacyCC.v2(0, 0),
              bottomRight: legacyCC.v2(0, 0),
              bottom: legacyCC.v2(0, 0),
              center: legacyCC.v2(0, 0),
              left: legacyCC.v2(0, 0),
              right: legacyCC.v2(0, 0),
              width: 0,
              height: 0,

              init(visibleRect_) {
                const w = this.width = visibleRect_.width;
                const h = this.height = visibleRect_.height;
                const l = visibleRect_.x;
                const b = visibleRect_.y;
                const t = b + h;
                const r = l + w;
                this.topLeft.x = l;
                this.topLeft.y = t;
                this.topRight.x = r;
                this.topRight.y = t;
                this.top.x = l + w / 2;
                this.top.y = t;
                this.bottomLeft.x = l;
                this.bottomLeft.y = b;
                this.bottomRight.x = r;
                this.bottomRight.y = b;
                this.bottom.x = l + w / 2;
                this.bottom.y = b;
                this.center.x = l + w / 2;
                this.center.y = b + h / 2;
                this.left.x = l;
                this.left.y = b + h / 2;
                this.right.x = r;
                this.right.y = b + h / 2;
              }

            });
            legacyCC.visibleRect = visibleRect;

            class BrowserGetter {
              constructor() {
                this.html = void 0;
                this.meta = {
                  width: 'device-width'
                };
                this.adaptationType = legacyCC.sys.browserType;
              }

              init() {
                {
                  this.html = document.getElementsByTagName('html')[0];
                }
              }

              availWidth(frame) {
                if (legacyCC.sys.isMobile || !frame || frame === this.html) {
                  return window.innerWidth;
                } else {
                  return frame.clientWidth;
                }
              }

              availHeight(frame) {
                if (legacyCC.sys.isMobile || !frame || frame === this.html) {
                  return window.innerHeight;
                } else {
                  return frame.clientHeight;
                }
              }

            }

            const __BrowserGetter = new BrowserGetter();

            if (system.os === OS.IOS) {
              __BrowserGetter.adaptationType = BrowserType.SAFARI;
            }

            switch (__BrowserGetter.adaptationType) {
              case BrowserType.SAFARI:
                {
                  __BrowserGetter.meta['minimal-ui'] = 'true';

                  __BrowserGetter.availWidth = frame => frame.clientWidth;

                  __BrowserGetter.availHeight = frame => frame.clientHeight;

                  break;
                }

              case BrowserType.SOUGOU:
                {
                  __BrowserGetter.availWidth = frame => frame.clientWidth;

                  __BrowserGetter.availHeight = frame => frame.clientHeight;

                  break;
                }

              case BrowserType.UC:
                {
                  __BrowserGetter.availWidth = frame => frame.clientWidth;

                  __BrowserGetter.availHeight = frame => frame.clientHeight;

                  break;
                }
            }

            class View extends EventTarget {
              constructor() {
                super();
                this._resizeWithBrowserSize = void 0;
                this._designResolutionSize = void 0;
                this._originalDesignResolutionSize = void 0;
                this._frameSize = void 0;
                this._scaleX = void 0;
                this._scaleY = void 0;
                this._viewportRect = void 0;
                this._visibleRect = void 0;
                this._autoFullScreen = void 0;
                this._devicePixelRatio = void 0;
                this._maxPixelRatio = void 0;
                this._retinaEnabled = void 0;
                this._resizeCallback = void 0;
                this._resizing = void 0;
                this._orientationChanging = void 0;
                this._isRotated = void 0;
                this._orientation = void 0;
                this._isAdjustViewport = void 0;
                this._resolutionPolicy = void 0;
                this._rpExactFit = void 0;
                this._rpShowAll = void 0;
                this._rpNoBorder = void 0;
                this._rpFixedHeight = void 0;
                this._rpFixedWidth = void 0;
                const _strategyer = ContainerStrategy;
                const _strategy = ContentStrategy;
                this._frameSize = new Size(0, 0);
                this._designResolutionSize = new Size(0, 0);
                this._originalDesignResolutionSize = new Size(0, 0);
                this._scaleX = 1;
                this._scaleY = 1;
                this._viewportRect = new Rect(0, 0, 0, 0);
                this._visibleRect = new Rect(0, 0, 0, 0);
                this._autoFullScreen = false;
                this._devicePixelRatio = 1;

                {
                  this._maxPixelRatio = 4;
                }

                this._retinaEnabled = false;
                this._resizeCallback = null;
                this._resizing = false;
                this._resizeWithBrowserSize = false;
                this._orientationChanging = true;
                this._isRotated = false;
                this._orientation = legacyCC.macro.ORIENTATION_AUTO;
                this._isAdjustViewport = true;
                this._rpExactFit = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.EXACT_FIT);
                this._rpShowAll = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.SHOW_ALL);
                this._rpNoBorder = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.NO_BORDER);
                this._rpFixedHeight = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_HEIGHT);
                this._rpFixedWidth = new ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_WIDTH);
                this._resolutionPolicy = this._rpShowAll;
                legacyCC.game.once(legacyCC.Game.EVENT_ENGINE_INITED, this.init, this);
              }

              init() {
                __BrowserGetter.init();

                this._initFrameSize();

                const w = legacyCC.game.canvas.width;
                const h = legacyCC.game.canvas.height;
                this._designResolutionSize.width = w;
                this._designResolutionSize.height = h;
                this._originalDesignResolutionSize.width = w;
                this._originalDesignResolutionSize.height = h;
                this._viewportRect.width = w;
                this._viewportRect.height = h;
                this._visibleRect.width = w;
                this._visibleRect.height = h;
                legacyCC.winSize.width = this._visibleRect.width;
                legacyCC.winSize.height = this._visibleRect.height;

                if (legacyCC.visibleRect) {
                  legacyCC.visibleRect.init(this._visibleRect);
                }
              }

              resizeWithBrowserSize(enabled) {
                if (enabled) {
                  if (!this._resizeWithBrowserSize) {
                    this._resizeWithBrowserSize = true;
                    system.onViewResize(this._resizeEvent);
                    system.onOrientationChange(this._orientationChange);
                  }
                } else if (this._resizeWithBrowserSize) {
                  this._resizeWithBrowserSize = false;
                  system.offViewResize(this._resizeEvent);
                  system.offOrientationChange(this._orientationChange);
                }
              }

              setResizeCallback(callback) {
                if (typeof callback === 'function' || callback == null) {
                  this._resizeCallback = callback;
                }
              }

              setOrientation(orientation) {
                orientation &= legacyCC.macro.ORIENTATION_AUTO;

                if (orientation && this._orientation !== orientation) {
                  this._orientation = orientation;
                }
              }

              adjustViewportMeta(enabled) {
                this._isAdjustViewport = enabled;
              }

              enableRetina(enabled) {
                this._retinaEnabled = !!enabled;
              }

              isRetinaEnabled() {
                return this._retinaEnabled;
              }

              enableAutoFullScreen(enabled) {
                if (enabled && enabled !== this._autoFullScreen && legacyCC.sys.isMobile && system.browserType !== BrowserType.WECHAT) {
                  this._autoFullScreen = true;
                  legacyCC.screen.autoFullScreen(legacyCC.game.frame);
                } else {
                  this._autoFullScreen = false;
                }
              }

              isAutoFullScreenEnabled() {
                return this._autoFullScreen;
              }

              setCanvasSize(width, height) {
                const canvas = legacyCC.game.canvas;
                const container = legacyCC.game.container;
                this._devicePixelRatio = window.devicePixelRatio;
                canvas.width = sys.windowPixelResolution.width;
                canvas.height = sys.windowPixelResolution.height;
                canvas.style.width = `${width}px`;
                canvas.style.height = `${height}px`;
                container.style.width = `${width}px`;
                container.style.height = `${height}px`;

                this._resizeEvent();
              }

              getCanvasSize() {
                return new Size(legacyCC.game.canvas.width, legacyCC.game.canvas.height);
              }

              getFrameSize() {
                return new Size(this._frameSize.width, this._frameSize.height);
              }

              setFrameSize(width, height) {
                this._frameSize.width = width;
                this._frameSize.height = height;
                legacyCC.game.frame.style.width = `${width}px`;
                legacyCC.game.frame.style.height = `${height}px`;

                this._resizeEvent();
              }

              getVisibleSize() {
                return new Size(this._visibleRect.width, this._visibleRect.height);
              }

              getVisibleSizeInPixel() {
                return new Size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
              }

              getVisibleOrigin() {
                return new Vec2(this._visibleRect.x, this._visibleRect.y);
              }

              getVisibleOriginInPixel() {
                return new Vec2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
              }

              getResolutionPolicy() {
                return this._resolutionPolicy;
              }

              setResolutionPolicy(resolutionPolicy) {
                if (resolutionPolicy instanceof ResolutionPolicy) {
                  this._resolutionPolicy = resolutionPolicy;
                } else {
                  const _locPolicy = ResolutionPolicy;

                  if (resolutionPolicy === _locPolicy.EXACT_FIT) {
                    this._resolutionPolicy = this._rpExactFit;
                  }

                  if (resolutionPolicy === _locPolicy.SHOW_ALL) {
                    this._resolutionPolicy = this._rpShowAll;
                  }

                  if (resolutionPolicy === _locPolicy.NO_BORDER) {
                    this._resolutionPolicy = this._rpNoBorder;
                  }

                  if (resolutionPolicy === _locPolicy.FIXED_HEIGHT) {
                    this._resolutionPolicy = this._rpFixedHeight;
                  }

                  if (resolutionPolicy === _locPolicy.FIXED_WIDTH) {
                    this._resolutionPolicy = this._rpFixedWidth;
                  }
                }
              }

              setDesignResolutionSize(width, height, resolutionPolicy) {
                if (!(width > 0 && height > 0)) {
                  errorID(2200);
                  return;
                }

                this.setResolutionPolicy(resolutionPolicy);
                const policy = this._resolutionPolicy;

                if (policy) {
                  policy.preApply(this);
                }

                if (legacyCC.sys.isMobile) {
                  this._adjustViewportMeta();
                }

                this._orientationChanging = true;

                if (!this._resizing) {
                  this._initFrameSize();
                }

                if (!policy) {
                  logID(2201);
                  return;
                }

                this._originalDesignResolutionSize.width = this._designResolutionSize.width = width;
                this._originalDesignResolutionSize.height = this._designResolutionSize.height = height;
                const result = policy.apply(this, this._designResolutionSize);

                if (result.scale && result.scale.length === 2) {
                  this._scaleX = result.scale[0];
                  this._scaleY = result.scale[1];
                }

                if (result.viewport) {
                  const vp = this._viewportRect;
                  const vb = this._visibleRect;
                  const rv = result.viewport;
                  vp.x = rv.x;
                  vp.y = rv.y;
                  vp.width = rv.width;
                  vp.height = rv.height;
                  vb.x = 0;
                  vb.y = 0;
                  vb.width = rv.width / this._scaleX;
                  vb.height = rv.height / this._scaleY;
                }

                policy.postApply(this);
                legacyCC.winSize.width = this._visibleRect.width;
                legacyCC.winSize.height = this._visibleRect.height;

                if (visibleRect) {
                  visibleRect.init(this._visibleRect);
                }

                this.emit('design-resolution-changed');
              }

              getDesignResolutionSize() {
                return new Size(this._designResolutionSize.width, this._designResolutionSize.height);
              }

              setRealPixelResolution(width, height, resolutionPolicy) {

                this.setDesignResolutionSize(width, height, resolutionPolicy);
              }

              getViewportRect() {
                return this._viewportRect;
              }

              getScaleX() {
                return this._scaleX;
              }

              getScaleY() {
                return this._scaleY;
              }

              getDevicePixelRatio() {
                return this._devicePixelRatio;
              }

              convertToLocationInView(tx, ty, relatedPos, out) {
                const result = out || new Vec2();
                const x = this._devicePixelRatio * (tx - relatedPos.left);
                const y = this._devicePixelRatio * (relatedPos.top + relatedPos.height - ty);

                if (this._isRotated) {
                  result.x = legacyCC.game.canvas.width - y;
                  result.y = x;
                } else {
                  result.x = x;
                  result.y = y;
                }

                if (legacyCC.GAME_VIEW) {
                  result.x /= legacyCC.gameView.canvas.width / legacyCC.game.canvas.width;
                  result.y /= legacyCC.gameView.canvas.height / legacyCC.game.canvas.height;
                }

                return result;
              }

              _convertPointWithScale(point) {
                const viewport = this._viewportRect;
                point.x = (point.x - viewport.x) / this._scaleX;
                point.y = (point.y - viewport.y) / this._scaleY;
              }

              _resizeEvent() {
                const _view = legacyCC.view;
                const prevFrameW = _view._frameSize.width;
                const prevFrameH = _view._frameSize.height;
                const prevRotated = _view._isRotated;

                if (legacyCC.sys.isMobile) {
                  const containerStyle = legacyCC.game.container.style;
                  const margin = containerStyle.margin;
                  containerStyle.margin = '0';
                  containerStyle.display = 'none';

                  _view._initFrameSize();

                  containerStyle.margin = margin;
                  containerStyle.display = 'block';
                } else {
                  _view._initFrameSize();
                }

                const width = _view._originalDesignResolutionSize.width;
                const height = _view._originalDesignResolutionSize.height;
                _view._resizing = true;

                if (width > 0) {
                  _view.setDesignResolutionSize(width, height, _view._resolutionPolicy);
                }

                _view._resizing = false;

                _view.emit('canvas-resize');

                if (_view._resizeCallback) {
                  _view._resizeCallback.call();
                }
              }

              _orientationChange() {
                legacyCC.view._orientationChanging = true;

                legacyCC.view._resizeEvent();
              }

              _initFrameSize() {
                const locFrameSize = this._frameSize;

                const w = __BrowserGetter.availWidth(legacyCC.game.frame);

                const h = __BrowserGetter.availHeight(legacyCC.game.frame);

                const isLandscape = w >= h;

                if ( !legacyCC.sys.isMobile || isLandscape && this._orientation & legacyCC.macro.ORIENTATION_LANDSCAPE || !isLandscape && this._orientation & legacyCC.macro.ORIENTATION_PORTRAIT) {
                  locFrameSize.width = w;
                  locFrameSize.height = h;
                  legacyCC.game.container.style['-webkit-transform'] = 'rotate(0deg)';
                  legacyCC.game.container.style.transform = 'rotate(0deg)';
                  this._isRotated = false;
                } else {
                  locFrameSize.width = h;
                  locFrameSize.height = w;
                  legacyCC.game.container.style['-webkit-transform'] = 'rotate(90deg)';
                  legacyCC.game.container.style.transform = 'rotate(90deg)';
                  legacyCC.game.container.style['-webkit-transform-origin'] = '0px 0px 0px';
                  legacyCC.game.container.style.transformOrigin = '0px 0px 0px';
                  this._isRotated = true;
                  legacyCC.game.canvas.style['-webkit-transform'] = 'translateZ(0px)';
                  legacyCC.game.canvas.style.transform = 'translateZ(0px)';
                }

                if (this._orientationChanging) {
                  setTimeout(() => {
                    legacyCC.view._orientationChanging = false;
                  }, 1000);
                }
              }

              _adjustSizeKeepCanvasSize() {
                const designWidth = this._originalDesignResolutionSize.width;
                const designHeight = this._originalDesignResolutionSize.height;

                if (designWidth > 0) {
                  this.setDesignResolutionSize(designWidth, designHeight, this._resolutionPolicy);
                }
              }

              _setViewportMeta(metas, overwrite) {
                let vp = document.getElementById('cocosMetaElement');

                if (vp && overwrite) {
                  document.head.removeChild(vp);
                }

                const elems = document.getElementsByName('viewport');
                const currentVP = elems ? elems[0] : null;
                let content;
                let key;
                let pattern;
                content = currentVP ? currentVP.content : '';
                vp = vp || document.createElement('meta');
                vp.id = 'cocosMetaElement';
                vp.name = 'viewport';
                vp.content = '';

                for (key in metas) {
                  if (content.indexOf(key) === -1) {
                    content += `,${key}=${metas[key]}`;
                  } else if (overwrite) {
                    pattern = new RegExp(`${key}\s*=\s*[^,]+`);
                    content = content.replace(pattern, `${key}=${metas[key]}`);
                  }
                }

                if (/^,/.test(content)) {
                  content = content.substr(1);
                }

                vp.content = content;

                if (currentVP) {
                  currentVP.content = content;
                }

                document.head.appendChild(vp);
              }

              _adjustViewportMeta() {
                if (this._isAdjustViewport && !JSB && !RUNTIME_BASED && !MINIGAME) {
                  this._setViewportMeta(__BrowserGetter.meta, false);

                  this._isAdjustViewport = false;
                }
              }

              _convertMouseToLocation(in_out_point, relatedPos) {
                in_out_point.x = this._devicePixelRatio * (in_out_point.x - relatedPos.left);
                in_out_point.y = this._devicePixelRatio * (relatedPos.top + relatedPos.height - in_out_point.y);

                if (legacyCC.GAME_VIEW) {
                  in_out_point.x /= legacyCC.gameView.canvas.width / legacyCC.game.canvas.width;
                  in_out_point.y /= legacyCC.gameView.canvas.height / legacyCC.game.canvas.height;
                }
              }

              _convertTouchWidthScale(selTouch) {
                const viewport = this._viewportRect;
                const scaleX = this._scaleX;
                const scaleY = this._scaleY;
                selTouch._point.x = (selTouch._point.x - viewport.x) / scaleX;
                selTouch._point.y = (selTouch._point.y - viewport.y) / scaleY;
                selTouch._prevPoint.x = (selTouch._prevPoint.x - viewport.x) / scaleX;
                selTouch._prevPoint.y = (selTouch._prevPoint.y - viewport.y) / scaleY;
              }

              _convertTouchesWithScale(touches) {
                const viewport = this._viewportRect;
                const scaleX = this._scaleX;
                const scaleY = this._scaleY;
                let selPoint;
                let selPrePoint;

                for (let i = 0; i < touches.length; i++) {
                  const selTouch = touches[i];
                  selPoint = selTouch._point;
                  selPrePoint = selTouch._prevPoint;
                  selPoint.x = (selPoint.x - viewport.x) / scaleX;
                  selPoint.y = (selPoint.y - viewport.y) / scaleY;
                  selPrePoint.x = (selPrePoint.x - viewport.x) / scaleX;
                  selPrePoint.y = (selPrePoint.y - viewport.y) / scaleY;
                }
              }

            } exports('dD', View);
            View.instance = void 0;

            class ContainerStrategy {
              constructor() {
                this.name = 'ContainerStrategy';
              }

              preApply(_view) {}

              apply(_view, designedResolution) {}

              postApply(_view) {}

              _setupContainer(_view, w, h) {
                const locCanvas = legacyCC.game.canvas;
                const locContainer = legacyCC.game.container;

                if (system.os === OS.ANDROID || system.os === OS.OHOS) {
                  document.body.style.width = `${_view._isRotated ? h : w}px`;
                  document.body.style.height = `${_view._isRotated ? w : h}px`;
                }

                locContainer.style.width = locCanvas.style.width = `${w}px`;
                locContainer.style.height = locCanvas.style.height = `${h}px`;
                _view._devicePixelRatio = 1;

                if (_view.isRetinaEnabled()) {
                  _view._devicePixelRatio = Math.min(_view._maxPixelRatio, window.devicePixelRatio || 1);
                }

                {
                  locCanvas.width = sys.windowPixelResolution.width;
                  locCanvas.height = sys.windowPixelResolution.height;
                }
              }

              _fixContainer() {
                document.body.insertBefore(legacyCC.game.container, document.body.firstChild);
                const bs = document.body.style;
                bs.width = `${window.innerWidth}px`;
                bs.height = `${window.innerHeight}px`;
                bs.overflow = 'hidden';
                const contStyle = legacyCC.game.container.style;
                contStyle.position = 'fixed';
                contStyle.left = contStyle.top = '0px';
                document.body.scrollTop = 0;
              }

            }

            ContainerStrategy.EQUAL_TO_FRAME = void 0;
            ContainerStrategy.PROPORTION_TO_FRAME = void 0;

            class ContentStrategy {
              constructor() {
                this.name = 'ContentStrategy';
                this._result = void 0;
                this._result = {
                  scale: [1, 1],
                  viewport: null
                };
              }

              preApply(_view) {}

              apply(_view, designedResolution) {
                return {
                  scale: [1, 1]
                };
              }

              postApply(_view) {}

              _buildResult(containerW, containerH, contentW, contentH, scaleX, scaleY) {
                if (Math.abs(containerW - contentW) < 2) {
                  contentW = containerW;
                }

                if (Math.abs(containerH - contentH) < 2) {
                  contentH = containerH;
                }

                const viewport = new Rect(Math.round((containerW - contentW) / 2), Math.round((containerH - contentH) / 2), contentW, contentH);
                this._result.scale = [scaleX, scaleY];
                this._result.viewport = viewport;
                return this._result;
              }

            }

            ContentStrategy.EXACT_FIT = void 0;
            ContentStrategy.SHOW_ALL = void 0;
            ContentStrategy.NO_BORDER = void 0;
            ContentStrategy.FIXED_HEIGHT = void 0;
            ContentStrategy.FIXED_WIDTH = void 0;

            (() => {
              class EqualToFrame extends ContainerStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'EqualToFrame';
                }

                apply(_view) {
                  const frameH = _view._frameSize.height;
                  const containerStyle = legacyCC.game.container.style;

                  this._setupContainer(_view, _view._frameSize.width, _view._frameSize.height);

                  if (_view._isRotated) {
                    containerStyle.margin = `0 0 0 ${frameH}px`;
                  } else {
                    containerStyle.margin = '0px';
                  }

                  containerStyle.padding = '0px';
                }

              }

              class ProportionalToFrame extends ContainerStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'ProportionalToFrame';
                }

                apply(_view, designedResolution) {
                  const frameW = _view._frameSize.width;
                  const frameH = _view._frameSize.height;
                  const containerStyle = legacyCC.game.container.style;
                  const designW = designedResolution.width;
                  const designH = designedResolution.height;
                  const scaleX = frameW / designW;
                  const scaleY = frameH / designH;
                  let containerW;
                  let containerH;

                  if (scaleX < scaleY) {
                    containerW = frameW;
                    containerH = designH * scaleX;
                  } else {
                    containerW = designW * scaleY;
                    containerH = frameH;
                  }

                  const offx = Math.round((frameW - containerW) / 2);
                  const offy = Math.round((frameH - containerH) / 2);
                  containerW = frameW - 2 * offx;
                  containerH = frameH - 2 * offy;

                  this._setupContainer(_view, containerW, containerH);

                  {
                    if (_view._isRotated) {
                      containerStyle.margin = `0 0 0 ${frameH}px`;
                    } else {
                      containerStyle.margin = '0px';
                    }

                    containerStyle.paddingLeft = `${offx}px`;
                    containerStyle.paddingRight = `${offx}px`;
                    containerStyle.paddingTop = `${offy}px`;
                    containerStyle.paddingBottom = `${offy}px`;
                  }
                }

              }

              const _global = typeof window === 'undefined' ? global : window;

              const globalAdapter = _global.__globalAdapter;

              if (globalAdapter) {
                if (globalAdapter.adaptContainerStrategy) {
                  globalAdapter.adaptContainerStrategy(ContainerStrategy.prototype);
                }

                if (globalAdapter.adaptView) {
                  globalAdapter.adaptView(View.prototype);
                }
              }

              ContainerStrategy.EQUAL_TO_FRAME = new EqualToFrame();
              ContainerStrategy.PROPORTION_TO_FRAME = new ProportionalToFrame();

              class ExactFit extends ContentStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'ExactFit';
                }

                apply(_view, designedResolution) {
                  const containerW = legacyCC.game.canvas.width;
                  const containerH = legacyCC.game.canvas.height;
                  const scaleX = containerW / designedResolution.width;
                  const scaleY = containerH / designedResolution.height;
                  return this._buildResult(containerW, containerH, containerW, containerH, scaleX, scaleY);
                }

              }

              class ShowAll extends ContentStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'ShowAll';
                }

                apply(_view, designedResolution) {
                  const containerW = legacyCC.game.canvas.width;
                  const containerH = legacyCC.game.canvas.height;
                  const designW = designedResolution.width;
                  const designH = designedResolution.height;
                  const scaleX = containerW / designW;
                  const scaleY = containerH / designH;
                  let scale = 0;
                  let contentW;
                  let contentH;

                  if (scaleX < scaleY) {
                    scale = scaleX;
                    contentW = containerW;
                    contentH = designH * scale;
                  } else {
                    scale = scaleY;
                    contentW = designW * scale;
                    contentH = containerH;
                  }

                  return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }

              }

              class NoBorder extends ContentStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'NoBorder';
                }

                apply(_view, designedResolution) {
                  const containerW = legacyCC.game.canvas.width;
                  const containerH = legacyCC.game.canvas.height;
                  const designW = designedResolution.width;
                  const designH = designedResolution.height;
                  const scaleX = containerW / designW;
                  const scaleY = containerH / designH;
                  let scale;
                  let contentW;
                  let contentH;

                  if (scaleX < scaleY) {
                    scale = scaleY;
                    contentW = designW * scale;
                    contentH = containerH;
                  } else {
                    scale = scaleX;
                    contentW = containerW;
                    contentH = designH * scale;
                  }

                  return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }

              }

              class FixedHeight extends ContentStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'FixedHeight';
                }

                apply(_view, designedResolution) {
                  const containerW = legacyCC.game.canvas.width;
                  const containerH = legacyCC.game.canvas.height;
                  const designH = designedResolution.height;
                  const scale = containerH / designH;
                  const contentW = containerW;
                  const contentH = containerH;
                  return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }

              }

              class FixedWidth extends ContentStrategy {
                constructor(...args) {
                  super(...args);
                  this.name = 'FixedWidth';
                }

                apply(_view, designedResolution) {
                  const containerW = legacyCC.game.canvas.width;
                  const containerH = legacyCC.game.canvas.height;
                  const designW = designedResolution.width;
                  const scale = containerW / designW;
                  const contentW = containerW;
                  const contentH = containerH;
                  return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }

              }

              ContentStrategy.EXACT_FIT = new ExactFit();
              ContentStrategy.SHOW_ALL = new ShowAll();
              ContentStrategy.NO_BORDER = new NoBorder();
              ContentStrategy.FIXED_HEIGHT = new FixedHeight();
              ContentStrategy.FIXED_WIDTH = new FixedWidth();
            })();

            class ResolutionPolicy {
              constructor(containerStg, contentStg) {
                this.name = 'ResolutionPolicy';
                this._containerStrategy = void 0;
                this._contentStrategy = void 0;
                this._containerStrategy = null;
                this._contentStrategy = null;
                this.setContainerStrategy(containerStg);
                this.setContentStrategy(contentStg);
              }

              get canvasSize() {
                return new Vec2(legacyCC.game.canvas.width, legacyCC.game.canvas.height);
              }

              preApply(_view) {
                this._containerStrategy.preApply(_view);

                this._contentStrategy.preApply(_view);
              }

              apply(_view, designedResolution) {
                this._containerStrategy.apply(_view, designedResolution);

                return this._contentStrategy.apply(_view, designedResolution);
              }

              postApply(_view) {
                this._containerStrategy.postApply(_view);

                this._contentStrategy.postApply(_view);
              }

              setContainerStrategy(containerStg) {
                if (containerStg instanceof ContainerStrategy) {
                  this._containerStrategy = containerStg;
                }
              }

              setContentStrategy(contentStg) {
                if (contentStg instanceof ContentStrategy) {
                  this._contentStrategy = contentStg;
                }
              }

            } exports('f8', ResolutionPolicy);
            ResolutionPolicy.EXACT_FIT = 0;
            ResolutionPolicy.NO_BORDER = 1;
            ResolutionPolicy.SHOW_ALL = 2;
            ResolutionPolicy.FIXED_HEIGHT = 3;
            ResolutionPolicy.FIXED_WIDTH = 4;
            ResolutionPolicy.UNKNOWN = 5;
            ResolutionPolicy.ContainerStrategy = ContainerStrategy;
            ResolutionPolicy.ContentStrategy = ContentStrategy;
            legacyCC.ResolutionPolicy = ResolutionPolicy;
            const view = exports('d3', View.instance = legacyCC.view = new View());
            legacyCC.winSize = new Size();

            removeProperty(View.prototype, 'View.prototype', [{
              name: 'isAntiAliasEnabled',
              suggest: 'The API of Texture2d have been largely modified, no alternative'
            }, {
              name: 'enableAntiAlias',
              suggest: 'The API of Texture2d have been largely modified, no alternative'
            }]);
            replaceProperty(EventMouse, 'EventMouse', ['DOWN', 'UP', 'MOVE'].map(item => ({
              name: item,
              newName: `MOUSE_${item}`,
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            })));
            replaceProperty(EventMouse, 'EventMouse', [{
              name: 'SCROLL',
              newName: 'MOUSE_WHEEL',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            replaceProperty(EventTouch, 'EventTouch', [{
              name: 'BEGAN',
              newName: 'TOUCH_START',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            replaceProperty(EventTouch, 'EventTouch', [{
              name: 'MOVED',
              newName: 'TOUCH_MOVE',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            replaceProperty(EventTouch, 'EventTouch', [{
              name: 'ENDED',
              newName: 'TOUCH_END',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            replaceProperty(EventTouch, 'EventTouch', [{
              name: 'CANCELLED',
              newName: 'TOUCH_CANCEL',
              target: SystemEvent.EventType,
              targetName: 'SystemEvent.EventType'
            }]);
            replaceProperty(sys, 'sys', ['UNKNOWN', 'ENGLISH', 'CHINESE', 'FRENCH', 'ITALIAN', 'GERMAN', 'SPANISH', 'DUTCH', 'RUSSIAN', 'KOREAN', 'JAPANESE', 'HUNGARIAN', 'PORTUGUESE', 'ARABIC', 'NORWEGIAN', 'POLISH', 'TURKISH', 'UKRAINIAN', 'ROMANIAN', 'BULGARIAN'].map(item => ({
              name: `LANGUAGE_${item}`,
              newName: item,
              target: sys.Language,
              targetName: 'sys.Language'
            })));
            replaceProperty(sys, 'sys', ['UNKNOWN', 'IOS', 'ANDROID', 'WINDOWS', 'LINUX', 'OSX'].map(item => ({
              name: `OS_${item}`,
              newName: item,
              target: sys.OS,
              targetName: 'sys.OS'
            })));
            replaceProperty(sys, 'sys', ['UNKNOWN', 'WECHAT', 'ANDROID', 'IE', 'EDGE', 'QQ', 'MOBILE_QQ', 'UC', 'UCBS', 'BAIDU_APP', 'BAIDU', 'MAXTHON', 'OPERA', 'OUPENG', 'MIUI', 'FIREFOX', 'SAFARI', 'CHROME', 'LIEBAO', 'QZONE', 'SOUGOU', 'HUAWEI'].map(item => ({
              name: `BROWSER_TYPE_${item}`,
              newName: item,
              target: sys.BrowserType,
              targetName: 'sys.BrowserType'
            })));
            replaceProperty(sys, 'sys', [{
              name: 'BROWSER_TYPE_360',
              newName: 'BROWSER_360',
              target: sys.BrowserType,
              targetName: 'sys.BrowserType'
            }]);
            replaceProperty(sys, 'sys', ['UNKNOWN', 'EDITOR_PAGE', 'EDITOR_CORE', 'MOBILE_BROWSER', 'DESKTOP_BROWSER', 'WIN32', 'MACOS', 'IOS', 'ANDROID', 'OHOS', 'WECHAT_GAME', 'BAIDU_MINI_GAME', 'XIAOMI_QUICK_GAME', 'ALIPAY_MINI_GAME', 'BYTEDANCE_MINI_GAME', 'OPPO_MINI_GAME', 'VIVO_MINI_GAME', 'HUAWEI_QUICK_GAME', 'COCOSPLAY', 'LINKSURE_MINI_GAME', 'QTT_MINI_GAME'].map(item => ({
              name: item,
              target: sys.Platform,
              targetName: 'sys.Platform'
            })));
            replaceProperty(sys, 'sys', [{
              name: 'IPHONE',
              newName: 'IOS',
              target: sys.Platform,
              targetName: 'sys.Platform'
            }, {
              name: 'IPAD',
              newName: 'IOS',
              target: sys.Platform,
              targetName: 'sys.Platform'
            }]);
            removeProperty(sys, 'sys', ['LINUX', 'BLACKBERRY', 'NACL', 'EMSCRIPTEN', 'TIZEN', 'WINRT', 'WP8', 'QQ_PLAY', 'FB_PLAYABLE_ADS'].map(item => ({
              name: item
            })));

            const screen = exports('dt', {
              _supportsFullScreen: false,
              _onfullscreenchange: null,
              _onfullscreenerror: null,
              _preOnFullScreenError: null,
              _preOnTouch: null,
              _touchEvent: '',
              _fn: null,
              _fnMap: [['requestFullscreen', 'exitFullscreen', 'fullscreenchange', 'fullscreenEnabled', 'fullscreenElement'], ['requestFullScreen', 'exitFullScreen', 'fullScreenchange', 'fullScreenEnabled', 'fullScreenElement'], ['webkitRequestFullScreen', 'webkitCancelFullScreen', 'webkitfullscreenchange', 'webkitIsFullScreen', 'webkitCurrentFullScreenElement'], ['mozRequestFullScreen', 'mozCancelFullScreen', 'mozfullscreenchange', 'mozFullScreen', 'mozFullScreenElement'], ['msRequestFullscreen', 'msExitFullscreen', 'MSFullscreenChange', 'msFullscreenEnabled', 'msFullscreenElement']],

              init() {
                this._fn = {};
                let i;
                let l;
                let val;
                const map = this._fnMap;
                let valL;

                for (i = 0, l = map.length; i < l; i++) {
                  val = map[i];

                  if (val && typeof document[val[1]] !== 'undefined') {
                    for (i = 0, valL = val.length; i < valL; i++) {
                      this._fn[map[0][i]] = val[i];
                    }

                    break;
                  }
                }

                this._supportsFullScreen = this._fn.requestFullscreen !== undefined;
                this._touchEvent = 'ontouchstart' in window ? 'touchstart' : 'mousedown';
              },

              get supportsFullScreen() {
                return this._supportsFullScreen;
              },

              fullScreen() {
                if (!this._supportsFullScreen) {
                  return false;
                } else if (document[this._fn.fullscreenElement] === undefined || document[this._fn.fullscreenElement] === null) {
                  return false;
                } else {
                  return true;
                }
              },

              requestFullScreen(element, onFullScreenChange, onFullScreenError) {
                if (!this._supportsFullScreen) {
                  return;
                }

                element = element || document.documentElement;

                if (onFullScreenChange) {
                  const eventName = this._fn.fullscreenchange;

                  if (this._onfullscreenchange) {
                    document.removeEventListener(eventName, this._onfullscreenchange);
                  }

                  this._onfullscreenchange = onFullScreenChange;
                  document.addEventListener(eventName, onFullScreenChange, false);
                }

                if (onFullScreenError) {
                  const eventName = this._fn.fullscreenerror;

                  if (this._onfullscreenerror) {
                    document.removeEventListener(eventName, this._onfullscreenerror);
                  }

                  this._onfullscreenerror = onFullScreenError;
                  document.addEventListener(eventName, onFullScreenError, {
                    once: true
                  });
                }

                const requestPromise = element[this._fn.requestFullscreen]();

                if (window.Promise && requestPromise instanceof Promise) {
                  requestPromise.catch(err => {});
                }

                return requestPromise;
              },

              exitFullScreen() {
                let requestPromise;

                if (this.fullScreen()) {
                  requestPromise = document[this._fn.exitFullscreen]();
                  requestPromise.catch(err => {});
                }

                return requestPromise;
              },

              autoFullScreen(element, onFullScreenChange) {
                element = element || document.body;

                this._ensureFullScreen(element, onFullScreenChange);

                this.requestFullScreen(element, onFullScreenChange);
              },

              disableAutoFullScreen(element) {
                if (this._preOnTouch) {
                  const touchTarget = legacyCC.game.canvas || element;
                  const touchEventName = this._touchEvent;
                  touchTarget.removeEventListener(touchEventName, this._preOnTouch);
                  this._preOnTouch = null;
                }
              },

              _ensureFullScreen(element, onFullScreenChange) {
                const touchTarget = legacyCC.game.canvas || element;
                const fullScreenErrorEventName = this._fn.fullscreenerror;
                const touchEventName = this._touchEvent;

                const onFullScreenError = () => {
                  this._preOnFullScreenError = null;

                  const onTouch = () => {
                    this._preOnTouch = null;
                    this.requestFullScreen(element, onFullScreenChange);
                  };

                  if (this._preOnTouch) {
                    touchTarget.removeEventListener(touchEventName, this._preOnTouch);
                  }

                  this._preOnTouch = onTouch;
                  touchTarget.addEventListener(touchEventName, this._preOnTouch, {
                    once: true
                  });
                };

                if (this._preOnFullScreenError) {
                  element.removeEventListener(fullScreenErrorEventName, this._preOnFullScreenError);
                }

                this._preOnFullScreenError = onFullScreenError;
                element.addEventListener(fullScreenErrorEventName, onFullScreenError, {
                  once: true
                });
              }

            });
            screen.init();
            legacyCC.screen = screen;

            const _dsInfo$1 = new DescriptorSetInfo(null);

            const MAX_PASS_COUNT = 8;
            class SubModel {
              constructor() {
                this._device = null;
                this._passes = null;
                this._subMesh = null;
                this._patches = null;
                this._handle = NULL_HANDLE;
                this._priority = RenderPriority.DEFAULT;
                this._inputAssembler = null;
                this._descriptorSet = null;
              }

              set passes(passes) {
                const passLengh = passes.length;

                if (passLengh > MAX_PASS_COUNT) {
                  errorID(12004, MAX_PASS_COUNT);
                  return;
                }

                this._passes = passes;

                this._flushPassInfo();

                if (this._descriptorSet) {
                  DSPool.free(SubModelPool.get(this._handle, SubModelView.DESCRIPTOR_SET));
                  _dsInfo$1.layout = passes[0].localSetLayout;
                  const dsHandle = DSPool.alloc(this._device, _dsInfo$1);
                  SubModelPool.set(this._handle, SubModelView.DESCRIPTOR_SET, dsHandle);
                  this._descriptorSet = DSPool.get(dsHandle);
                }
              }

              get passes() {
                return this._passes;
              }

              set subMesh(subMesh) {
                this._subMesh = subMesh;

                this._inputAssembler.destroy();

                this._inputAssembler.initialize(subMesh.iaInfo);

                if (this._passes[0].batchingScheme === BatchingSchemes.VB_MERGING) {
                  this._subMesh.genFlatBuffers();
                }

                SubModelPool.set(this._handle, SubModelView.SUB_MESH, subMesh.handle);
              }

              get subMesh() {
                return this._subMesh;
              }

              set priority(val) {
                this._priority = val;
                SubModelPool.set(this._handle, SubModelView.PRIORITY, val);
              }

              get priority() {
                return this._priority;
              }

              get handle() {
                return this._handle;
              }

              get inputAssembler() {
                return this._inputAssembler;
              }

              get descriptorSet() {
                return this._descriptorSet;
              }

              get patches() {
                return this._patches;
              }

              get planarShaderHandle() {
                return SubModelPool.get(this._handle, SubModelView.PLANAR_SHADER);
              }

              get planarInstanceShaderHandle() {
                return SubModelPool.get(this._handle, SubModelView.PLANAR_INSTANCE_SHADER);
              }

              initialize(subMesh, passes, patches = null) {
                this._device = legacyCC.director.root.device;
                this._subMesh = subMesh;
                this._patches = patches;
                this._passes = passes;
                this._handle = SubModelPool.alloc();

                this._flushPassInfo();

                if (passes[0].batchingScheme === BatchingSchemes.VB_MERGING) {
                  this._subMesh.genFlatBuffers();
                }

                _dsInfo$1.layout = passes[0].localSetLayout;
                const dsHandle = DSPool.alloc(this._device, _dsInfo$1);
                const iaHandle = IAPool.alloc(this._device, subMesh.iaInfo);
                SubModelPool.set(this._handle, SubModelView.PRIORITY, RenderPriority.DEFAULT);
                SubModelPool.set(this._handle, SubModelView.INPUT_ASSEMBLER, iaHandle);
                SubModelPool.set(this._handle, SubModelView.DESCRIPTOR_SET, dsHandle);
                SubModelPool.set(this._handle, SubModelView.SUB_MESH, subMesh.handle);
                this._inputAssembler = IAPool.get(iaHandle);
                this._descriptorSet = DSPool.get(dsHandle);
              }

              initPlanarShadowShader() {
                const pipeline = legacyCC.director.root.pipeline;
                const shadowInfo = pipeline.pipelineSceneData.shadows;
                const shaderHandle = shadowInfo.getPlanarShader(this._patches);
                SubModelPool.set(this._handle, SubModelView.PLANAR_SHADER, shaderHandle);
              }

              initPlanarShadowInstanceShader() {
                const pipeline = legacyCC.director.root.pipeline;
                const shadowInfo = pipeline.pipelineSceneData.shadows;
                const shaderHandle = shadowInfo.getPlanarInstanceShader(this._patches);
                SubModelPool.set(this._handle, SubModelView.PLANAR_INSTANCE_SHADER, shaderHandle);
              }

              destroy() {
                DSPool.free(SubModelPool.get(this._handle, SubModelView.DESCRIPTOR_SET));
                IAPool.free(SubModelPool.get(this._handle, SubModelView.INPUT_ASSEMBLER));
                SubModelPool.free(this._handle);
                this._descriptorSet = null;
                this._inputAssembler = null;
                this._priority = RenderPriority.DEFAULT;
                this._handle = NULL_HANDLE;
                this._patches = null;
                this._subMesh = null;
                this._passes = null;
              }

              update() {
                for (let i = 0; i < this._passes.length; ++i) {
                  const pass = this._passes[i];
                  pass.update();
                }

                this._descriptorSet.update();
              }

              onPipelineStateChanged() {
                const passes = this._passes;

                if (!passes) {
                  return;
                }

                for (let i = 0; i < passes.length; i++) {
                  const pass = passes[i];
                  pass.beginChangeStatesSilently();
                  pass.tryCompile();
                  pass.endChangeStatesSilently();
                }

                this._flushPassInfo();
              }

              onMacroPatchesStateChanged(patches) {
                this._patches = patches;
                const passes = this._passes;

                if (!passes) {
                  return;
                }

                for (let i = 0; i < passes.length; i++) {
                  const pass = passes[i];
                  pass.beginChangeStatesSilently();
                  pass.tryCompile();
                  pass.endChangeStatesSilently();
                }

                this._flushPassInfo();
              }

              _flushPassInfo() {
                const passes = this._passes;

                if (!passes) {
                  return;
                }

                SubModelPool.set(this._handle, SubModelView.PASS_COUNT, passes.length);
                let passOffset = SubModelView.PASS_0;
                let shaderOffset = SubModelView.SHADER_0;

                for (let i = 0; i < passes.length; i++, passOffset++, shaderOffset++) {
                  SubModelPool.set(this._handle, passOffset, passes[i].handle);
                  SubModelPool.set(this._handle, shaderOffset, passes[i].getShaderVariant(this._patches));
                }
              }

            }

            const INITIAL_CAPACITY = 32;
            const MAX_CAPACITY = 1024;
            class InstancedBuffer$1 {
              static get(pass, extraKey = 0) {
                const buffers = InstancedBuffer$1._buffers;
                if (!buffers.has(pass)) buffers.set(pass, {});
                const record = buffers.get(pass);
                return record[extraKey] || (record[extraKey] = new InstancedBuffer$1(pass));
              }

              constructor(pass) {
                this.instances = [];
                this.pass = void 0;
                this.hasPendingModels = false;
                this.dynamicOffsets = [];
                this._device = void 0;
                this._device = pass.device;
                this.pass = pass;
              }

              destroy() {
                for (let i = 0; i < this.instances.length; ++i) {
                  const instance = this.instances[i];
                  instance.vb.destroy();
                  instance.ia.destroy();
                }

                this.instances.length = 0;
              }

              merge(subModel, attrs, passIdx, hShaderImplant = null) {
                const stride = attrs.buffer.length;

                if (!stride) {
                  return;
                }

                const sourceIA = subModel.inputAssembler;
                const lightingMap = subModel.descriptorSet.getTexture(UNIFORM_LIGHTMAP_TEXTURE_BINDING);
                let hShader = hShaderImplant;

                if (!hShader) {
                  hShader = SubModelPool.get(subModel.handle, SubModelView.SHADER_0 + passIdx);
                }

                const hDescriptorSet = SubModelPool.get(subModel.handle, SubModelView.DESCRIPTOR_SET);

                for (let i = 0; i < this.instances.length; ++i) {
                  const instance = this.instances[i];

                  if (instance.ia.indexBuffer !== sourceIA.indexBuffer || instance.count >= MAX_CAPACITY) {
                    continue;
                  }

                  if (instance.lightingMap !== lightingMap) {
                    continue;
                  }

                  if (instance.stride !== stride) {
                    return;
                  }

                  if (instance.count >= instance.capacity) {
                    instance.capacity <<= 1;
                    const newSize = instance.stride * instance.capacity;
                    const oldData = instance.data;
                    instance.data = new Uint8Array(newSize);
                    instance.data.set(oldData);
                    instance.vb.resize(newSize);
                  }

                  if (instance.hShader !== hShader) {
                    instance.hShader = hShader;
                  }

                  if (instance.hDescriptorSet !== hDescriptorSet) {
                    instance.hDescriptorSet = hDescriptorSet;
                  }

                  instance.data.set(attrs.buffer, instance.stride * instance.count++);
                  this.hasPendingModels = true;
                  return;
                }

                const vb = this._device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, stride * INITIAL_CAPACITY, stride));

                const data = new Uint8Array(stride * INITIAL_CAPACITY);
                const vertexBuffers = sourceIA.vertexBuffers.slice();
                const attributes = sourceIA.attributes.slice();
                const indexBuffer = sourceIA.indexBuffer;

                for (let i = 0; i < attrs.attributes.length; i++) {
                  const attr = attrs.attributes[i];
                  const newAttr = new Attribute$1(attr.name, attr.format, attr.isNormalized, vertexBuffers.length, true);
                  attributes.push(newAttr);
                }

                data.set(attrs.buffer);
                vertexBuffers.push(vb);
                const iaInfo = new InputAssemblerInfo(attributes, vertexBuffers, indexBuffer);

                const ia = this._device.createInputAssembler(iaInfo);

                this.instances.push({
                  count: 1,
                  capacity: INITIAL_CAPACITY,
                  vb,
                  data,
                  ia,
                  stride,
                  hShader,
                  hDescriptorSet,
                  lightingMap
                });
                this.hasPendingModels = true;
              }

              uploadBuffers(cmdBuff) {
                for (let i = 0; i < this.instances.length; ++i) {
                  const instance = this.instances[i];

                  if (!instance.count) {
                    continue;
                  }

                  instance.ia.instanceCount = instance.count;
                  cmdBuff.updateBuffer(instance.vb, instance.data);
                }
              }

              clear() {
                for (let i = 0; i < this.instances.length; ++i) {
                  const instance = this.instances[i];
                  instance.count = 0;
                }

                this.hasPendingModels = false;
              }

            }
            InstancedBuffer$1._buffers = new Map();

            const AttrPool = new ObjectPool(PoolType.ATTRIBUTE, (_, obj) => obj || new Attribute$1());
            const m4_1$1 = new Mat4();

            const _subModelPool = new Pool$1(() => new SubModel(), 32);

            const shadowMapPatches = [{
              name: 'CC_RECEIVE_SHADOW',
              value: true
            }];
            let ModelType;

            (function (ModelType) {
              ModelType[ModelType["DEFAULT"] = 0] = "DEFAULT";
              ModelType[ModelType["SKINNING"] = 1] = "SKINNING";
              ModelType[ModelType["BAKED_SKINNING"] = 2] = "BAKED_SKINNING";
              ModelType[ModelType["BATCH_2D"] = 3] = "BATCH_2D";
              ModelType[ModelType["PARTICLE_BATCH"] = 4] = "PARTICLE_BATCH";
              ModelType[ModelType["LINE"] = 5] = "LINE";
            })(ModelType || (ModelType = exports('cm', {})));

            function uploadMat4AsVec4x3(mat, v1, v2, v3) {
              v1[0] = mat.m00;
              v1[1] = mat.m01;
              v1[2] = mat.m02;
              v1[3] = mat.m12;
              v2[0] = mat.m04;
              v2[1] = mat.m05;
              v2[2] = mat.m06;
              v2[3] = mat.m13;
              v3[0] = mat.m08;
              v3[1] = mat.m09;
              v3[2] = mat.m10;
              v3[3] = mat.m14;
            }

            const lightmapSamplerHash = genSamplerHash([Filter.LINEAR, Filter.LINEAR, Filter.NONE, Address.CLAMP, Address.CLAMP, Address.CLAMP]);
            const lightmapSamplerWithMipHash = genSamplerHash([Filter.LINEAR, Filter.LINEAR, Filter.LINEAR, Address.CLAMP, Address.CLAMP, Address.CLAMP]);
            class Model {
              get subModels() {
                return this._subModels;
              }

              get inited() {
                return this._inited;
              }

              get worldBounds() {
                return this._worldBounds;
              }

              get modelBounds() {
                return this._modelBounds;
              }

              get localBuffer() {
                return this._localBuffer;
              }

              get updateStamp() {
                return this._updateStamp;
              }

              get isInstancingEnabled() {
                return this._instMatWorldIdx >= 0;
              }

              get receiveShadow() {
                if (ModelPool.get(this._handle, ModelView.RECEIVE_SHADOW)) {
                  return true;
                }

                return false;
              }

              set receiveShadow(val) {
                ModelPool.set(this._handle, ModelView.RECEIVE_SHADOW, val ? 1 : 0);
                this.onMacroPatchesStateChanged();
              }

              get castShadow() {
                if (ModelPool.get(this._handle, ModelView.CAST_SHADOW)) {
                  return true;
                }

                return false;
              }

              set castShadow(val) {
                ModelPool.set(this._handle, ModelView.CAST_SHADOW, val ? 1 : 0);
              }

              get handle() {
                return this._handle;
              }

              get node() {
                return this._node;
              }

              set node(n) {
                this._node = n;
                ModelPool.set(this._handle, ModelView.NODE, n.handle);
              }

              get transform() {
                return this._transform;
              }

              set transform(n) {
                this._transform = n;
                ModelPool.set(this._handle, ModelView.TRANSFORM, n.handle);
              }

              get visFlags() {
                return ModelPool.get(this._handle, ModelView.VIS_FLAGS);
              }

              set visFlags(val) {
                ModelPool.set(this._handle, ModelView.VIS_FLAGS, val);
              }

              get enabled() {
                if (ModelPool.get(this._handle, ModelView.ENABLED)) {
                  return true;
                }

                return false;
              }

              set enabled(val) {
                ModelPool.set(this._handle, ModelView.ENABLED, val ? 1 : 0);
              }

              constructor() {
                this.type = ModelType.DEFAULT;
                this.scene = null;
                this.isDynamicBatching = false;
                this.instancedAttributes = {
                  buffer: null,
                  views: [],
                  attributes: []
                };
                this._worldBounds = null;
                this._modelBounds = null;
                this._subModels = [];
                this._node = null;
                this._transform = null;
                this._device = void 0;
                this._inited = false;
                this._descriptorSetCount = 1;
                this._updateStamp = -1;
                this._transformUpdated = true;
                this._handle = NULL_HANDLE;
                this._hWorldBounds = NULL_HANDLE;
                this._localData = new Float32Array(UBOLocal.COUNT);
                this._localBuffer = null;
                this._instMatWorldIdx = -1;
                this._lightmap = null;
                this._lightmapUVParam = new Vec4();
                this._device = legacyCC.director.root.device;
              }

              initialize() {
                if (!this._inited) {
                  this._handle = ModelPool.alloc();
                  const hSubModelArray = SubModelArrayPool.alloc();
                  const hInstancedAttrArray = AttributeArrayPool.alloc();
                  ModelPool.set(this._handle, ModelView.INSTANCED_ATTR_ARRAY, hInstancedAttrArray);
                  ModelPool.set(this._handle, ModelView.SUB_MODEL_ARRAY, hSubModelArray);
                  ModelPool.set(this._handle, ModelView.VIS_FLAGS, Layers.Enum.NONE);
                  ModelPool.set(this._handle, ModelView.ENABLED, 1);
                  ModelPool.set(this._handle, ModelView.RECEIVE_SHADOW, 1);
                  ModelPool.set(this._handle, ModelView.CAST_SHADOW, 0);
                  this._inited = true;
                }
              }

              destroy() {
                const subModels = this._subModels;

                for (let i = 0; i < subModels.length; i++) {
                  const subModel = this._subModels[i];
                  subModel.destroy();

                  _subModelPool.free(subModel);
                }

                if (this._localBuffer) {
                  this._localBuffer.destroy();

                  this._localBuffer = null;
                }

                this._worldBounds = null;
                this._modelBounds = null;
                this._subModels.length = 0;
                this._inited = false;
                this._transformUpdated = true;
                this._transform = null;
                this._node = null;
                this.isDynamicBatching = false;

                if (this._handle) {
                  const hSubModelArray = ModelPool.get(this._handle, ModelView.SUB_MODEL_ARRAY);
                  if (hSubModelArray) SubModelArrayPool.free(hSubModelArray);
                  const hOldBuffer = ModelPool.get(this._handle, ModelView.INSTANCED_BUFFER);
                  if (hOldBuffer) RawBufferPool.free(hOldBuffer);
                  const hAttrArray = ModelPool.get(this._handle, ModelView.INSTANCED_ATTR_ARRAY);
                  if (hAttrArray) freeHandleArray(hAttrArray, AttributeArrayPool, AttrPool);
                  ModelPool.free(this._handle);
                  this._handle = NULL_HANDLE;
                }

                if (this._hWorldBounds) {
                  AABBPool.free(this._hWorldBounds);
                  this._hWorldBounds = NULL_HANDLE;
                }
              }

              attachToScene(scene) {
                this.scene = scene;
              }

              detachFromScene() {
                this.scene = null;
              }

              updateTransform(stamp) {
                const node = this.transform;

                if (node.hasChangedFlags || node._dirtyFlags) {
                  node.updateWorldTransform();
                  this._transformUpdated = true;
                  const worldBounds = this._worldBounds;

                  if (this._modelBounds && worldBounds) {
                    this._modelBounds.transform(node._mat, node._pos, node._rot, node._scale, worldBounds);

                    AABBPool.setVec3(this._hWorldBounds, AABBView.CENTER, worldBounds.center);
                    AABBPool.setVec3(this._hWorldBounds, AABBView.HALF_EXTENSION, worldBounds.halfExtents);
                  }
                }
              }

              updateWorldBound() {
                const node = this.transform;

                if (node !== null) {
                  node.updateWorldTransform();
                  this._transformUpdated = true;
                  const worldBounds = this._worldBounds;

                  if (this._modelBounds && worldBounds) {
                    this._modelBounds.transform(node._mat, node._pos, node._rot, node._scale, worldBounds);

                    AABBPool.setVec3(this._hWorldBounds, AABBView.CENTER, worldBounds.center);
                    AABBPool.setVec3(this._hWorldBounds, AABBView.HALF_EXTENSION, worldBounds.halfExtents);
                  }
                }
              }

              updateUBOs(stamp) {
                const subModels = this._subModels;

                for (let i = 0; i < subModels.length; i++) {
                  subModels[i].update();
                }

                this._updateStamp = stamp;

                if (!this._transformUpdated) {
                  return;
                }

                this._transformUpdated = false;
                const worldMatrix = this.transform._mat;
                const idx = this._instMatWorldIdx;

                if (idx >= 0) {
                  const attrs = this.instancedAttributes.views;
                  uploadMat4AsVec4x3(worldMatrix, attrs[idx], attrs[idx + 1], attrs[idx + 2]);
                } else if (this._localBuffer) {
                  Mat4.toArray(this._localData, worldMatrix, UBOLocal.MAT_WORLD_OFFSET);
                  Mat4.inverseTranspose(m4_1$1, worldMatrix);
                  Mat4.toArray(this._localData, m4_1$1, UBOLocal.MAT_WORLD_IT_OFFSET);

                  this._localBuffer.update(this._localData);
                }
              }

              createBoundingShape(minPos, maxPos) {
                if (!minPos || !maxPos) {
                  return;
                }

                this._modelBounds = AABB.fromPoints(AABB.create(), minPos, maxPos);
                this._worldBounds = AABB.clone(this._modelBounds);

                if (this._hWorldBounds === NULL_HANDLE) {
                  this._hWorldBounds = AABBPool.alloc();
                  ModelPool.set(this._handle, ModelView.WORLD_BOUNDS, this._hWorldBounds);
                }

                AABBPool.setVec3(this._hWorldBounds, AABBView.CENTER, this._worldBounds.center);
                AABBPool.setVec3(this._hWorldBounds, AABBView.HALF_EXTENSION, this._worldBounds.halfExtents);
              }

              initSubModel(idx, subMeshData, mat) {
                this.initialize();
                let isNewSubModel = false;

                if (this._subModels[idx] == null) {
                  this._subModels[idx] = _subModelPool.alloc();
                  isNewSubModel = true;
                } else {
                  this._subModels[idx].destroy();
                }

                this._subModels[idx].initialize(subMeshData, mat.passes, this.getMacroPatches(idx));

                this._subModels[idx].initPlanarShadowShader();

                this._subModels[idx].initPlanarShadowInstanceShader();

                this._updateAttributesAndBinding(idx);

                if (isNewSubModel) {
                  const hSubModelArray = ModelPool.get(this._handle, ModelView.SUB_MODEL_ARRAY);
                  SubModelArrayPool.assign(hSubModelArray, idx, this._subModels[idx].handle);
                }
              }

              setSubModelMesh(idx, subMesh) {
                if (!this._subModels[idx]) {
                  return;
                }

                this._subModels[idx].subMesh = subMesh;
              }

              setSubModelMaterial(idx, mat) {
                if (!this._subModels[idx]) {
                  return;
                }

                this._subModels[idx].passes = mat.passes;

                this._updateAttributesAndBinding(idx);
              }

              onGlobalPipelineStateChanged() {
                const subModels = this._subModels;

                for (let i = 0; i < subModels.length; i++) {
                  subModels[i].onPipelineStateChanged();
                }
              }

              onMacroPatchesStateChanged() {
                const subModels = this._subModels;

                for (let i = 0; i < subModels.length; i++) {
                  subModels[i].onMacroPatchesStateChanged(this.getMacroPatches(i));
                }
              }

              updateLightingmap(texture, uvParam) {
                Vec4.toArray(this._localData, uvParam, UBOLocal.LIGHTINGMAP_UVPARAM);
                this._lightmap = texture;
                this._lightmapUVParam = uvParam;

                if (texture === null) {
                  texture = builtinResMgr.get('empty-texture');
                }

                const gfxTexture = texture.getGFXTexture();

                if (gfxTexture) {
                  const sampler = samplerLib.getSampler(this._device, texture.mipmaps.length > 1 ? lightmapSamplerWithMipHash : lightmapSamplerHash);
                  const subModels = this._subModels;

                  for (let i = 0; i < subModels.length; i++) {
                    const {
                      descriptorSet
                    } = subModels[i];
                    descriptorSet.bindTexture(UNIFORM_LIGHTMAP_TEXTURE_BINDING, gfxTexture);
                    descriptorSet.bindSampler(UNIFORM_LIGHTMAP_TEXTURE_BINDING, sampler);
                    descriptorSet.update();
                  }
                }
              }

              getMacroPatches(subModelIndex) {
                return this.receiveShadow ? shadowMapPatches : null;
              }

              _updateAttributesAndBinding(subModelIndex) {
                const subModel = this._subModels[subModelIndex];

                if (!subModel) {
                  return;
                }

                this._initLocalDescriptors(subModelIndex);

                this._updateLocalDescriptors(subModelIndex, subModel.descriptorSet);

                const shader = ShaderPool.get(SubModelPool.get(subModel.handle, SubModelView.SHADER_0));

                this._updateInstancedAttributes(shader.attributes, subModel.passes[0]);
              }

              _getInstancedAttributeIndex(name) {
                const {
                  attributes
                } = this.instancedAttributes;

                for (let i = 0; i < attributes.length; i++) {
                  if (attributes[i].name === name) {
                    return i;
                  }
                }

                return -1;
              }

              _updateInstancedAttributes(attributes, pass) {
                if (!pass.device.hasFeature(Feature.INSTANCED_ARRAYS)) {
                  return;
                }

                const hOldBuffer = ModelPool.get(this._handle, ModelView.INSTANCED_BUFFER);
                if (hOldBuffer) RawBufferPool.free(hOldBuffer);
                const hAttrArray = ModelPool.get(this._handle, ModelView.INSTANCED_ATTR_ARRAY);
                if (hAttrArray) freeHandleArray(hAttrArray, AttributeArrayPool, AttrPool, false);
                let size = 0;

                for (let j = 0; j < attributes.length; j++) {
                  const attribute = attributes[j];

                  if (!attribute.isInstanced) {
                    continue;
                  }

                  size += FormatInfos[attribute.format].size;
                }

                const hBuffer = RawBufferPool.alloc(size);
                const buffer = RawBufferPool.getBuffer(hBuffer);
                ModelPool.set(this._handle, ModelView.INSTANCED_BUFFER, hBuffer);
                const attrs = this.instancedAttributes;
                attrs.buffer = new Uint8Array(buffer);
                attrs.views.length = attrs.attributes.length = 0;
                let offset = 0;

                for (let j = 0; j < attributes.length; j++) {
                  const attribute = attributes[j];

                  if (!attribute.isInstanced) {
                    continue;
                  }

                  const hAttr = AttrPool.alloc();
                  const attr = AttrPool.get(hAttr);
                  attr.format = attribute.format;
                  attr.name = attribute.name;
                  attr.isNormalized = attribute.isNormalized;
                  attr.location = attribute.location;
                  attrs.attributes.push(attr);
                  AttributeArrayPool.push(hAttrArray, hAttr);
                  const info = FormatInfos[attribute.format];
                  attrs.views.push(new (getTypedArrayConstructor(info))(buffer, offset, info.count));
                  offset += info.size;
                }

                if (pass.batchingScheme === BatchingSchemes.INSTANCING) {
                  InstancedBuffer$1.get(pass).destroy();
                }

                this._instMatWorldIdx = this._getInstancedAttributeIndex(INST_MAT_WORLD);
                this._transformUpdated = true;
              }

              _initLocalDescriptors(subModelIndex) {
                if (!this._localBuffer) {
                  this._localBuffer = this._device.createBuffer(new BufferInfo(BufferUsageBit.UNIFORM | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, UBOLocal.SIZE, UBOLocal.SIZE));
                }
              }

              _updateLocalDescriptors(subModelIndex, descriptorSet) {
                if (this._localBuffer) descriptorSet.bindBuffer(UBOLocal.BINDING, this._localBuffer);
              }

            } exports('bM', Model);

            class SphereLight extends Light {
              get position() {
                return this._pos;
              }

              set size(size) {
                LightPool.set(this._handle, LightView.SIZE, size);
              }

              get size() {
                return LightPool.get(this._handle, LightView.SIZE);
              }

              set range(range) {
                LightPool.set(this._handle, LightView.RANGE, range);
                this._needUpdate = true;
              }

              get range() {
                return LightPool.get(this._handle, LightView.RANGE);
              }

              set luminance(lum) {
                LightPool.set(this._handle, LightView.ILLUMINANCE, lum);
              }

              get luminance() {
                return LightPool.get(this._handle, LightView.ILLUMINANCE);
              }

              get aabb() {
                return this._aabb;
              }

              constructor() {
                super();
                this._needUpdate = false;
                this._pos = void 0;
                this._aabb = void 0;
                this._hAABB = NULL_HANDLE;
                this._aabb = AABB.create();
                this._pos = new Vec3();
              }

              initialize() {
                super.initialize();
                this._hAABB = AABBPool.alloc();
                const size = 0.15;
                LightPool.set(this._handle, LightView.TYPE, LightType.SPHERE);
                LightPool.set(this._handle, LightView.SIZE, size);
                LightPool.set(this._handle, LightView.RANGE, 1.0);
                LightPool.set(this._handle, LightView.AABB, this._hAABB);
                LightPool.set(this._handle, LightView.ILLUMINANCE, 1700 / nt2lm(size));
              }

              update() {
                if (this._node && (this._node.hasChangedFlags || this._needUpdate)) {
                  this._node.getWorldPosition(this._pos);

                  const range = LightPool.get(this._handle, LightView.RANGE);
                  AABB.set(this._aabb, this._pos.x, this._pos.y, this._pos.z, range, range, range);
                  this._needUpdate = false;
                  LightPool.setVec3(this._handle, LightView.POSITION, this._pos);
                  AABBPool.setVec3(this._hAABB, AABBView.CENTER, this._aabb.center);
                  AABBPool.setVec3(this._hAABB, AABBView.HALF_EXTENSION, this._aabb.halfExtents);
                }
              }

              destroy() {
                if (this._hAABB) {
                  AABBPool.free(this._hAABB);
                  this._hAABB = NULL_HANDLE;
                }

                return super.destroy();
              }

            } exports('ce', SphereLight);

            const _forward$1 = new Vec3(0, 0, -1);

            const _qt = new Quat();

            const _matView = new Mat4();

            const _matProj = new Mat4();

            const _matViewProj = new Mat4();

            const _matViewProjInv = new Mat4();

            class SpotLight extends Light {
              get position() {
                return this._pos;
              }

              set size(size) {
                LightPool.set(this._handle, LightView.SIZE, size);
              }

              get size() {
                return LightPool.get(this._handle, LightView.SIZE);
              }

              set range(range) {
                this._range = range;
                LightPool.set(this._handle, LightView.RANGE, range);
                this._needUpdate = true;
              }

              get range() {
                return LightPool.get(this._handle, LightView.RANGE);
              }

              set luminance(lum) {
                LightPool.set(this._handle, LightView.ILLUMINANCE, lum);
              }

              get luminance() {
                return LightPool.get(this._handle, LightView.ILLUMINANCE);
              }

              get direction() {
                return this._dir;
              }

              get spotAngle() {
                return LightPool.get(this._handle, LightView.SPOT_ANGLE);
              }

              set spotAngle(val) {
                this._angle = val;
                LightPool.set(this._handle, LightView.SPOT_ANGLE, Math.cos(val * 0.5));
                this._needUpdate = true;
              }

              set aspect(val) {
                LightPool.set(this._handle, LightView.ASPECT, val);
                this._needUpdate = true;
              }

              get aspect() {
                return LightPool.get(this._handle, LightView.ASPECT);
              }

              get aabb() {
                return this._aabb;
              }

              get frustum() {
                return this._frustum;
              }

              constructor() {
                super();
                this._dir = new Vec3(1.0, -1.0, -1.0);
                this._range = 5.0;
                this._spotAngle = Math.cos(Math.PI / 6);
                this._pos = void 0;
                this._aabb = void 0;
                this._frustum = void 0;
                this._angle = 0;
                this._needUpdate = false;
                this._hAABB = NULL_HANDLE;
                this._hFrustum = NULL_HANDLE;
                this._aabb = AABB.create();
                this._frustum = Frustum.create();
                this._pos = new Vec3();
              }

              initialize() {
                super.initialize();
                this._hAABB = AABBPool.alloc();
                this._hFrustum = FrustumPool.alloc();
                const size = 0.15;
                LightPool.set(this._handle, LightView.TYPE, LightType.SPOT);
                LightPool.set(this._handle, LightView.SIZE, size);
                LightPool.set(this._handle, LightView.AABB, this._hAABB);
                LightPool.set(this._handle, LightView.ILLUMINANCE, 1700 / nt2lm(size));
                LightPool.set(this._handle, LightView.RANGE, Math.cos(Math.PI / 6));
                LightPool.set(this._handle, LightView.ASPECT, 1.0);
                LightPool.setVec3(this._handle, LightView.DIRECTION, this._dir);
                LightPool.set(this._handle, LightView.FRUSTUM, this._hFrustum);
              }

              update() {
                if (this._node && (this._node.hasChangedFlags || this._needUpdate)) {
                  this._node.getWorldPosition(this._pos);

                  Vec3.transformQuat(this._dir, _forward$1, this._node.getWorldRotation(_qt));
                  Vec3.normalize(this._dir, this._dir);
                  LightPool.setVec3(this._handle, LightView.DIRECTION, this._dir);
                  AABB.set(this._aabb, this._pos.x, this._pos.y, this._pos.z, this._range, this._range, this._range);

                  this._node.getWorldRT(_matView);

                  Mat4.invert(_matView, _matView);
                  Mat4.perspective(_matProj, this._angle, 1.0, 0.001, this._range);
                  Mat4.multiply(_matViewProj, _matProj, _matView);

                  this._frustum.update(_matViewProj, _matViewProjInv);

                  this._needUpdate = false;
                  LightPool.setVec3(this._handle, LightView.POSITION, this._pos);
                  AABBPool.setVec3(this._hAABB, AABBView.CENTER, this._aabb.center);
                  AABBPool.setVec3(this._hAABB, AABBView.HALF_EXTENSION, this._aabb.halfExtents);
                  recordFrustumToSharedMemory(this._hFrustum, this._frustum);
                }
              }

              destroy() {
                if (this._hAABB) {
                  AABBPool.free(this._hAABB);
                  this._hAABB = NULL_HANDLE;
                }

                if (this._hFrustum) {
                  FrustumPool.free(this._hFrustum);
                  this._hFrustum = NULL_HANDLE;
                }

                return super.destroy();
              }

            } exports('cg', SpotLight);

            var index = /*#__PURE__*/Object.freeze({
                __proto__: null,
                Ambient: Ambient,
                get CameraFOVAxis () { return CameraFOVAxis; },
                get CameraProjection () { return CameraProjection; },
                get CameraAperture () { return CameraAperture; },
                get CameraISO () { return CameraISO; },
                get CameraShutter () { return CameraShutter; },
                SKYBOX_FLAG: SKYBOX_FLAG,
                Camera: Camera,
                CameraVisFlags: CameraVisFlags,
                VisibilityFlags: VisibilityFlags,
                DirectionalLight: DirectionalLight,
                ColorTemperatureToRGB: ColorTemperatureToRGB,
                get LightType () { return LightType; },
                nt2lm: nt2lm,
                Light: Light,
                get ModelType () { return ModelType; },
                Model: Model,
                ShadowType: ShadowType,
                PCFType: PCFType,
                Shadows: Shadows,
                RenderScene: RenderScene,
                Skybox: Skybox,
                SphereLight: SphereLight,
                SpotLight: SpotLight,
                SubModel: SubModel
            });

            function createIA(device, data) {
              if (!data.positions) {
                console.error('The data must have positions field');
                return null;
              }

              const verts = [];
              const vcount = data.positions.length / 3;

              for (let i = 0; i < vcount; ++i) {
                verts.push(data.positions[3 * i], data.positions[3 * i + 1], data.positions[3 * i + 2]);

                if (data.normals) {
                  verts.push(data.normals[3 * i], data.normals[3 * i + 1], data.normals[3 * i + 2]);
                }

                if (data.uvs) {
                  verts.push(data.uvs[2 * i], data.uvs[2 * i + 1]);
                }

                if (data.colors) {
                  verts.push(data.colors[3 * i], data.colors[3 * i + 1], data.colors[3 * i + 2]);
                }
              }

              const vfmt = [];
              vfmt.push(new Attribute$1(AttributeName.ATTR_POSITION, Format.RGB32F));

              if (data.normals) {
                vfmt.push(new Attribute$1(AttributeName.ATTR_NORMAL, Format.RGB32F));
              }

              if (data.uvs) {
                vfmt.push(new Attribute$1(AttributeName.ATTR_TEX_COORD, Format.RG32F));
              }

              if (data.colors) {
                vfmt.push(new Attribute$1(AttributeName.ATTR_COLOR, Format.RGB32F));
              }

              const vb = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, verts.length * 4, verts.length * 4 / vcount));
              vb.update(new Float32Array(verts));
              let ib = null;

              if (data.indices) {
                ib = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, data.indices.length * 2, 2));
                ib.update(new Uint16Array(data.indices));
              }

              return device.createInputAssembler(new InputAssemblerInfo(vfmt, [vb], ib));
            }

            let RenderQueue;

            (function (RenderQueue) {
              RenderQueue[RenderQueue["OPAQUE"] = 0] = "OPAQUE";
              RenderQueue[RenderQueue["TRANSPARENT"] = 1] = "TRANSPARENT";
              RenderQueue[RenderQueue["OVERLAY"] = 2] = "OVERLAY";
            })(RenderQueue || (RenderQueue = {}));

            let PassStage;

            (function (PassStage) {
              PassStage[PassStage["DEFAULT"] = 1] = "DEFAULT";
              PassStage[PassStage["FORWARD"] = 2] = "FORWARD";
              PassStage[PassStage["SHADOWCAST"] = 4] = "SHADOWCAST";
            })(PassStage || (PassStage = {}));

            function nearestPOT(num) {
              --num;
              num |= num >> 16;
              num |= num >> 8;
              num |= num >> 4;
              num |= num >> 2;
              num |= num >> 1;
              ++num;
              return num;
            }

            function roundUp(n, alignment) {
              return Math.ceil(n / alignment) * alignment;
            }

            class TextureBufferPool {
              constructor(device) {
                this._device = void 0;
                this._format = Format.UNKNOWN;
                this._formatSize = 0;
                this._chunks = [];
                this._chunkCount = 0;
                this._handles = [];
                this._region0 = new BufferTextureCopy();
                this._region1 = new BufferTextureCopy();
                this._region2 = new BufferTextureCopy();
                this._roundUpFn = null;
                this._bufferViewCtor = Uint8Array;
                this._channels = 4;
                this._alignment = 1;
                this._device = device;
              }

              initialize(info) {
                const formatInfo = FormatInfos[info.format];
                this._format = info.format;
                this._formatSize = formatInfo.size;
                this._channels = formatInfo.count;
                this._bufferViewCtor = getTypedArrayConstructor(formatInfo);
                this._roundUpFn = info.roundUpFn || null;
                this._alignment = info.alignment || 1;

                if (info.inOrderFree) {
                  this.alloc = this._McDonaldAlloc;
                }
              }

              destroy() {
                for (let i = 0; i < this._chunkCount; ++i) {
                  const chunk = this._chunks[i];
                  chunk.texture.destroy();
                }

                this._chunks.length = 0;
                this._handles.length = 0;
              }

              alloc(size, chunkIdx) {
                size = roundUp(size, this._alignment);
                let index = -1;
                let start = -1;

                if (chunkIdx !== undefined) {
                  index = chunkIdx;
                  start = this._findAvailableSpace(size, index);
                }

                if (start < 0) {
                  for (let i = 0; i < this._chunkCount; ++i) {
                    index = i;
                    start = this._findAvailableSpace(size, index);

                    if (start >= 0) {
                      break;
                    }
                  }
                }

                if (start >= 0) {
                  const chunk = this._chunks[index];
                  chunk.start += size;
                  const handle = {
                    chunkIdx: index,
                    start,
                    end: start + size,
                    texture: chunk.texture
                  };

                  this._handles.push(handle);

                  return handle;
                }

                const targetSize = Math.sqrt(size / this._formatSize);
                const texLength = this._roundUpFn && this._roundUpFn(targetSize, this._formatSize) || Math.max(1024, nearestPOT(targetSize));

                const newChunk = this._chunks[this.createChunk(texLength)];

                newChunk.start += size;
                const texHandle = {
                  chunkIdx: this._chunkCount - 1,
                  start: 0,
                  end: size,
                  texture: newChunk.texture
                };

                this._handles.push(texHandle);

                return texHandle;
              }

              free(handle) {
                for (let i = 0; i < this._handles.length; ++i) {
                  if (this._handles[i] === handle) {
                    this._chunks[handle.chunkIdx].end = handle.end;

                    this._handles.splice(i, 1);

                    return;
                  }
                }
              }

              createChunk(length) {
                const texSize = length * length * this._formatSize;
                console.info(`TextureBufferPool: Allocate chunk ${this._chunkCount}, size: ${texSize}, format: ${this._format}`);

                const texture = this._device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, this._format, length, length, TextureFlagBit.IMMUTABLE));

                const chunk = {
                  texture,
                  size: texSize,
                  start: 0,
                  end: texSize
                };
                this._chunks[this._chunkCount] = chunk;
                return this._chunkCount++;
              }

              update(handle, buffer) {
                const buffers = [];
                const regions = [];
                const start = handle.start / this._formatSize;
                let remainSize = buffer.byteLength / this._formatSize;
                let offsetX = start % handle.texture.width;
                let offsetY = Math.floor(start / handle.texture.width);
                let copySize = Math.min(handle.texture.width - offsetX, remainSize);
                let begin = 0;

                if (offsetX > 0) {
                  this._region0.texOffset.x = offsetX;
                  this._region0.texOffset.y = offsetY;
                  this._region0.texExtent.width = copySize;
                  this._region0.texExtent.height = 1;
                  buffers.push(new this._bufferViewCtor(buffer, begin * this._formatSize, copySize * this._channels));
                  regions.push(this._region0);
                  offsetX = 0;
                  offsetY += 1;
                  remainSize -= copySize;
                  begin += copySize;
                }

                if (remainSize > 0) {
                  this._region1.texOffset.x = offsetX;
                  this._region1.texOffset.y = offsetY;

                  if (remainSize > handle.texture.width) {
                    this._region1.texExtent.width = handle.texture.width;
                    this._region1.texExtent.height = Math.floor(remainSize / handle.texture.width);
                    copySize = this._region1.texExtent.width * this._region1.texExtent.height;
                  } else {
                    copySize = remainSize;
                    this._region1.texExtent.width = copySize;
                    this._region1.texExtent.height = 1;
                  }

                  buffers.push(new this._bufferViewCtor(buffer, begin * this._formatSize, copySize * this._channels));
                  regions.push(this._region1);
                  offsetX = 0;
                  offsetY += this._region1.texExtent.height;
                  remainSize -= copySize;
                  begin += copySize;
                }

                if (remainSize > 0) {
                  this._region2.texOffset.x = offsetX;
                  this._region2.texOffset.y = offsetY;
                  this._region2.texExtent.width = remainSize;
                  this._region2.texExtent.height = 1;
                  buffers.push(new this._bufferViewCtor(buffer, begin * this._formatSize, remainSize * this._channels));
                  regions.push(this._region2);
                }

                this._device.copyBuffersToTexture(buffers, handle.texture, regions);
              }

              _findAvailableSpace(size, chunkIdx) {
                const chunk = this._chunks[chunkIdx];
                let isFound = false;
                let start = chunk.start;

                if (start + size <= chunk.size) {
                  isFound = true;
                } else {
                  start = 0;

                  const handles = this._handles.filter(h => h.chunkIdx === chunkIdx).sort((a, b) => a.start - b.start);

                  for (let i = 0; i < handles.length; i++) {
                    const handle = handles[i];

                    if (start + size <= handle.start) {
                      isFound = true;
                      break;
                    }

                    start = handle.end;
                  }

                  if (!isFound && start + size <= chunk.size) {
                    isFound = true;
                  }
                }

                return isFound ? start : -1;
              }

              _McDonaldAlloc(size) {
                size = roundUp(size, this._alignment);

                for (let i = 0; i < this._chunkCount; ++i) {
                  const chunk = this._chunks[i];
                  let isFound = false;
                  let start = chunk.start;

                  if (start + size <= chunk.end) {
                    isFound = true;
                  } else if (start > chunk.end) {
                    if (start + size <= chunk.size) {
                      isFound = true;
                    } else if (size <= chunk.end) {
                      chunk.start = start = 0;
                      isFound = true;
                    }
                  } else if (start === chunk.end) {
                    chunk.start = start = 0;
                    chunk.end = chunk.size;

                    if (size <= chunk.end) {
                      isFound = true;
                    }
                  }

                  if (isFound) {
                    chunk.start += size;
                    const handle = {
                      chunkIdx: i,
                      start,
                      end: start + size,
                      texture: chunk.texture
                    };

                    this._handles.push(handle);

                    return handle;
                  }
                }

                const targetSize = Math.sqrt(size / this._formatSize);
                const texLength = this._roundUpFn && this._roundUpFn(targetSize, this._formatSize) || Math.max(1024, nearestPOT(targetSize));

                const newChunk = this._chunks[this.createChunk(texLength)];

                newChunk.start += size;
                const texHandle = {
                  chunkIdx: this._chunkCount,
                  start: 0,
                  end: size,
                  texture: newChunk.texture
                };

                this._handles.push(texHandle);

                return texHandle;
              }

            } exports('ci', TextureBufferPool);

            const addStage = config.addStage;

            var renderer = /*#__PURE__*/Object.freeze({
                __proto__: null,
                addStage: addStage,
                scene: index,
                createIA: createIA,
                get RenderQueue () { return RenderQueue; },
                get PassStage () { return PassStage; },
                get PropertyType () { return PropertyType; },
                genHandle: genHandle,
                getPropertyTypeFromHandle: getPropertyTypeFromHandle,
                getTypeFromHandle: getTypeFromHandle,
                getSetIndexFromHandle: getSetIndexFromHandle,
                getBindingFromHandle: getBindingFromHandle,
                getOffsetFromHandle: getOffsetFromHandle,
                customizeType: customizeType,
                type2reader: type2reader,
                type2writer: type2writer,
                getDefaultFromType: getDefaultFromType,
                overrideMacros: overrideMacros,
                get BatchingSchemes () { return BatchingSchemes; },
                Pass: Pass,
                getDeviceShaderVersion: getDeviceShaderVersion,
                programLib: programLib,
                get SamplerInfoIndex () { return SamplerInfoIndex; },
                defaultSamplerHash: defaultSamplerHash,
                genSamplerHash: genSamplerHash,
                samplerLib: samplerLib,
                nearestPOT: nearestPOT,
                TextureBufferPool: TextureBufferPool,
                MaterialInstance: MaterialInstance,
                PassInstance: PassInstance,
                ObjectPool: ObjectPool,
                freeHandleArray: freeHandleArray,
                get PoolType () { return PoolType; },
                NULL_HANDLE: NULL_HANDLE,
                ShaderPool: ShaderPool,
                DSPool: DSPool,
                IAPool: IAPool,
                PipelineLayoutPool: PipelineLayoutPool,
                FramebufferPool: FramebufferPool,
                SubModelArrayPool: SubModelArrayPool,
                ModelArrayPool: ModelArrayPool,
                AttributeArrayPool: AttributeArrayPool,
                FlatBufferArrayPool: FlatBufferArrayPool,
                LightArrayPool: LightArrayPool,
                BlendTargetArrayPool: BlendTargetArrayPool,
                UIBatchArrayPool: UIBatchArrayPool,
                RawBufferPool: RawBufferPool,
                RawObjectPool: RawObjectPool,
                get PassView () { return PassView; },
                PassPool: PassPool,
                get SubModelView () { return SubModelView; },
                SubModelPool: SubModelPool,
                get ModelView () { return ModelView; },
                ModelPool: ModelPool,
                get BatchView2D () { return BatchView2D; },
                BatchPool2D: BatchPool2D,
                get AABBView () { return AABBView; },
                AABBPool: AABBPool,
                get SceneView () { return SceneView; },
                ScenePool: ScenePool,
                get CameraView () { return CameraView; },
                CameraPool: CameraPool,
                get NodeView () { return NodeView; },
                NodePool: NodePool,
                get RootView () { return RootView; },
                RootPool: RootPool,
                get RenderWindowView () { return RenderWindowView; },
                RenderWindowPool: RenderWindowPool,
                get FrustumView () { return FrustumView; },
                FrustumPool: FrustumPool,
                get AmbientView () { return AmbientView; },
                AmbientPool: AmbientPool,
                get SkyboxView () { return SkyboxView; },
                SkyboxPool: SkyboxPool,
                get FogView () { return FogView; },
                FogPool: FogPool,
                get ShadowsView () { return ShadowsView; },
                ShadowsPool: ShadowsPool,
                get PipelineSceneDataView () { return PipelineSceneDataView; },
                PipelineSceneDataPool: PipelineSceneDataPool,
                get LightView () { return LightView; },
                LightPool: LightPool,
                get SphereView () { return SphereView; },
                SpherePool: SpherePool,
                get FlatBufferView () { return FlatBufferView; },
                FlatBufferPool: FlatBufferPool,
                get SubMeshView () { return SubMeshView; },
                SubMeshPool: SubMeshPool,
                get RasterizerStateView () { return RasterizerStateView; },
                RasterizerStatePool: RasterizerStatePool,
                get DepthStencilStateView () { return DepthStencilStateView; },
                DepthStencilStatePool: DepthStencilStatePool,
                get BlendTargetView () { return BlendTargetView; },
                BlendTargetPool: BlendTargetPool,
                get BlendStateView () { return BlendStateView; },
                BlendStatePool: BlendStatePool
            });
            exports('ep', renderer);

            function constant() {
              return 0;
            }
            function linear(k) {
              return k;
            }
            function quadIn(k) {
              return k * k;
            }
            function quadOut(k) {
              return k * (2 - k);
            }
            function quadInOut(k) {
              k *= 2;

              if (k < 1) {
                return 0.5 * k * k;
              }

              return -0.5 * (--k * (k - 2) - 1);
            }
            function cubicIn(k) {
              return k * k * k;
            }
            function cubicOut(k) {
              return --k * k * k + 1;
            }
            function cubicInOut(k) {
              k *= 2;

              if (k < 1) {
                return 0.5 * k * k * k;
              }

              return 0.5 * ((k -= 2) * k * k + 2);
            }
            function quartIn(k) {
              return k * k * k * k;
            }
            function quartOut(k) {
              return 1 - --k * k * k * k;
            }
            function quartInOut(k) {
              k *= 2;

              if (k < 1) {
                return 0.5 * k * k * k * k;
              }

              return -0.5 * ((k -= 2) * k * k * k - 2);
            }
            function quintIn(k) {
              return k * k * k * k * k;
            }
            function quintOut(k) {
              return --k * k * k * k * k + 1;
            }
            function quintInOut(k) {
              k *= 2;

              if (k < 1) {
                return 0.5 * k * k * k * k * k;
              }

              return 0.5 * ((k -= 2) * k * k * k * k + 2);
            }
            function sineIn(k) {
              if (k === 1) {
                return 1;
              }

              return 1 - Math.cos(k * Math.PI / 2);
            }
            function sineOut(k) {
              return Math.sin(k * Math.PI / 2);
            }
            function sineInOut(k) {
              return 0.5 * (1 - Math.cos(Math.PI * k));
            }
            function expoIn(k) {
              return k === 0 ? 0 : Math.pow(1024, k - 1);
            }
            function expoOut(k) {
              return k === 1 ? 1 : 1 - Math.pow(2, -10 * k);
            }
            function expoInOut(k) {
              if (k === 0) {
                return 0;
              }

              if (k === 1) {
                return 1;
              }

              k *= 2;

              if (k < 1) {
                return 0.5 * Math.pow(1024, k - 1);
              }

              return 0.5 * (-Math.pow(2, -10 * (k - 1)) + 2);
            }
            function circIn(k) {
              return 1 - Math.sqrt(1 - k * k);
            }
            function circOut(k) {
              return Math.sqrt(1 - --k * k);
            }
            function circInOut(k) {
              k *= 2;

              if (k < 1) {
                return -0.5 * (Math.sqrt(1 - k * k) - 1);
              }

              return 0.5 * (Math.sqrt(1 - (k -= 2) * k) + 1);
            }
            function elasticIn(k) {
              let s;
              let a = 0.1;
              const p = 0.4;

              if (k === 0) {
                return 0;
              }

              if (k === 1) {
                return 1;
              }

              if (!a || a < 1) {
                a = 1;
                s = p / 4;
              } else {
                s = p * Math.asin(1 / a) / (2 * Math.PI);
              }

              return -(a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
            }
            function elasticOut(k) {
              let s;
              let a = 0.1;
              const p = 0.4;

              if (k === 0) {
                return 0;
              }

              if (k === 1) {
                return 1;
              }

              if (!a || a < 1) {
                a = 1;
                s = p / 4;
              } else {
                s = p * Math.asin(1 / a) / (2 * Math.PI);
              }

              return a * Math.pow(2, -10 * k) * Math.sin((k - s) * (2 * Math.PI) / p) + 1;
            }
            function elasticInOut(k) {
              let s;
              let a = 0.1;
              const p = 0.4;

              if (k === 0) {
                return 0;
              }

              if (k === 1) {
                return 1;
              }

              if (!a || a < 1) {
                a = 1;
                s = p / 4;
              } else {
                s = p * Math.asin(1 / a) / (2 * Math.PI);
              }

              k *= 2;

              if (k < 1) {
                return -0.5 * (a * Math.pow(2, 10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p));
              }

              return a * Math.pow(2, -10 * (k -= 1)) * Math.sin((k - s) * (2 * Math.PI) / p) * 0.5 + 1;
            }
            function backIn(k) {
              if (k === 1) {
                return 1;
              }

              const s = 1.70158;
              return k * k * ((s + 1) * k - s);
            }
            function backOut(k) {
              if (k === 0) {
                return 0;
              }

              const s = 1.70158;
              return --k * k * ((s + 1) * k + s) + 1;
            }
            function backInOut(k) {
              const s = 1.70158 * 1.525;
              k *= 2;

              if (k < 1) {
                return 0.5 * (k * k * ((s + 1) * k - s));
              }

              return 0.5 * ((k -= 2) * k * ((s + 1) * k + s) + 2);
            }
            function bounceIn(k) {
              return 1 - bounceOut(1 - k);
            }
            function bounceOut(k) {
              if (k < 1 / 2.75) {
                return 7.5625 * k * k;
              } else if (k < 2 / 2.75) {
                return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
              } else if (k < 2.5 / 2.75) {
                return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
              } else {
                return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
              }
            }
            function bounceInOut(k) {
              if (k < 0.5) {
                return bounceIn(k * 2) * 0.5;
              }

              return bounceOut(k * 2 - 1) * 0.5 + 0.5;
            }
            function smooth(k) {
              if (k <= 0) {
                return 0;
              }

              if (k >= 1) {
                return 1;
              }

              return k * k * (3 - 2 * k);
            }
            function fade(k) {
              if (k <= 0) {
                return 0;
              }

              if (k >= 1) {
                return 1;
              }

              return k * k * k * (k * (k * 6 - 15) + 10);
            }
            const quadOutIn = _makeOutIn(quadIn, quadOut);
            const cubicOutIn = _makeOutIn(cubicIn, cubicOut);
            const quartOutIn = _makeOutIn(quartIn, quartOut);
            const quintOutIn = _makeOutIn(quintIn, quintOut);
            const sineOutIn = _makeOutIn(sineIn, sineOut);
            const expoOutIn = _makeOutIn(expoIn, expoOut);
            const circOutIn = _makeOutIn(circIn, circOut);
            const elasticOutIn = _makeOutIn(elasticIn, elasticOut);
            const backOutIn = _makeOutIn(backIn, backOut);
            const bounceOutIn = _makeOutIn(bounceIn, bounceOut);

            function _makeOutIn(fnIn, fnOut) {
              return k => {
                if (k < 0.5) {
                  return fnOut(k * 2) / 2;
                }

                return fnIn(2 * k - 1) / 2 + 0.5;
              };
            }

            var easing = /*#__PURE__*/Object.freeze({
                __proto__: null,
                constant: constant,
                linear: linear,
                quadIn: quadIn,
                quadOut: quadOut,
                quadInOut: quadInOut,
                cubicIn: cubicIn,
                cubicOut: cubicOut,
                cubicInOut: cubicInOut,
                quartIn: quartIn,
                quartOut: quartOut,
                quartInOut: quartInOut,
                quintIn: quintIn,
                quintOut: quintOut,
                quintInOut: quintInOut,
                sineIn: sineIn,
                sineOut: sineOut,
                sineInOut: sineInOut,
                expoIn: expoIn,
                expoOut: expoOut,
                expoInOut: expoInOut,
                circIn: circIn,
                circOut: circOut,
                circInOut: circInOut,
                elasticIn: elasticIn,
                elasticOut: elasticOut,
                elasticInOut: elasticInOut,
                backIn: backIn,
                backOut: backOut,
                backInOut: backInOut,
                bounceIn: bounceIn,
                bounceOut: bounceOut,
                bounceInOut: bounceInOut,
                smooth: smooth,
                fade: fade,
                quadOutIn: quadOutIn,
                cubicOutIn: cubicOutIn,
                quartOutIn: quartOutIn,
                quintOutIn: quintOutIn,
                sineOutIn: sineOutIn,
                expoOutIn: expoOutIn,
                circOutIn: circOutIn,
                elasticOutIn: elasticOutIn,
                backOutIn: backOutIn,
                bounceOutIn: bounceOutIn
            });
            exports('ee', easing);

            const v2_0 = new Vec2();
            class SplashScreen {
              set splashFinish(v) {
                this._splashFinish = v;

                this._tryToStart();
              }

              set loadFinish(v) {
                this._loadFinish = v;

                this._tryToStart();
              }

              main(root) {
                if (root == null) {
                  error('RENDER ROOT IS NULL.');
                  return;
                }

                if (window._CCSettings && window._CCSettings.splashScreen) {
                  const setting = this.settings = window._CCSettings.splashScreen;
                  setting.totalTime = this.settings.totalTime != null ? this.settings.totalTime : 3000;
                  setting.base64src = this.settings.base64src || '';
                  setting.effect = this.settings.effect || 'FADE-INOUT';
                  setting.clearColor = this.settings.clearColor || new Color$1(0.88, 0.88, 0.88, 1);
                  setting.displayRatio = this.settings.displayRatio != null ? this.settings.displayRatio : 0.4;
                  setting.displayWatermark = this.settings.displayWatermark != null ? this.settings.displayWatermark : true;
                } else {
                  this.settings = {
                    totalTime: 3000,
                    base64src: '',
                    effect: 'FADE-INOUT',
                    clearColor: new Color$1(0.88, 0.88, 0.88, 1),
                    displayRatio: 0.4,
                    displayWatermark: true
                  };
                }

                if (this.settings.base64src === '' || this.settings.totalTime <= 0) {
                  if (this.callBack) {
                    this.callBack();
                  }

                  this.callBack = null;
                  this.settings = null;
                  this._directCall = true;
                } else {
                  legacyCC.view.enableRetina(true);
                  legacyCC.view.resizeWithBrowserSize(true);
                  const designRes = window._CCSettings.designResolution;

                  if (designRes) {
                    legacyCC.view.setDesignResolutionSize(designRes.width, designRes.height, designRes.policy);
                  } else {
                    legacyCC.view.setDesignResolutionSize(960, 640, 4);
                  }

                  this.root = root;
                  this.device = root.device;
                  legacyCC.game.once(legacyCC.Game.EVENT_GAME_INITED, () => {
                    legacyCC.director._lateUpdate = performance.now();
                  }, legacyCC.director);
                  this.callBack = null;
                  this.cancelAnimate = false;
                  this.startTime = -1;
                  this.preInit();
                  this.logoImage = new Image();
                  this.logoImage.onload = this.init.bind(this);
                  this.logoImage.src = this.settings.base64src;
                }
              }

              setOnFinish(cb) {
                if (this._directCall) {
                  if (cb) {
                    SplashScreen._ins = undefined;
                    cb();
                    return;
                  }
                }

                this.callBack = cb;
              }

              _tryToStart() {
                if (this._splashFinish && this._loadFinish) {
                  if (this.callBack) {
                    this.callBack();
                    this.hide();
                    legacyCC.game.resume();
                  }
                }
              }

              preInit() {
                const clearColor = this.settings.clearColor;
                this.clearColors = [new Color$1(clearColor.x, clearColor.y, clearColor.z, clearColor.w)];
                const device = this.device;
                this.renderArea = new Rect$1(0, 0, device.width, device.height);
                this.framebuffer = this.root.mainWindow.framebuffer;
                this.cmdBuff = device.commandBuffer;
                const verts = new Float32Array([0.5, 0.5, 1, 0, -0.5, 0.5, 0, 0, 0.5, -0.5, 1, 1, -0.5, -0.5, 0, 1]);
                const vbStride = Float32Array.BYTES_PER_ELEMENT * 4;
                const vbSize = vbStride * 4;
                this.vertexBuffers = device.createBuffer(new BufferInfo(BufferUsageBit.VERTEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, vbSize, vbStride));
                this.vertexBuffers.update(verts);
                const indices = new Uint16Array([0, 1, 2, 1, 3, 2]);
                const ibStride = Uint16Array.BYTES_PER_ELEMENT;
                const ibSize = ibStride * 6;
                this.indicesBuffers = device.createBuffer(new BufferInfo(BufferUsageBit.INDEX | BufferUsageBit.TRANSFER_DST, MemoryUsageBit.HOST | MemoryUsageBit.DEVICE, ibSize, ibStride));
                this.indicesBuffers.update(indices);
                const attributes = [new Attribute$1('a_position', Format.RG32F), new Attribute$1('a_texCoord', Format.RG32F)];
                const IAInfo = new InputAssemblerInfo(attributes, [this.vertexBuffers], this.indicesBuffers);
                this.quadAssmebler = device.createInputAssembler(IAInfo);
                this.projection = new Mat4();
                Mat4.ortho(this.projection, -1, 1, -1, 1, -1, 1, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY, device.surfaceTransform);
              }

              init() {
                this.initLogo();
                if (this.settings.displayWatermark) this.initWarterMark();

                const animate = time => {
                  if (this.cancelAnimate) return;
                  const settings = this.settings;
                  const device = this.device;
                  Mat4.ortho(this.projection, -1, 1, -1, 1, -1, 1, device.capabilities.clipSpaceMinZ, device.capabilities.clipSpaceSignY, device.surfaceTransform);
                  const dw = device.width;
                  const dh = device.height;
                  const refW = dw < dh ? dw : dh;
                  if (this.startTime < 0) this.startTime = time;
                  const elapsedTime = time - this.startTime;
                  const percent = clamp01(elapsedTime / settings.totalTime);
                  let u_p = cubicOut(percent);
                  if (settings.effect === 'NONE') u_p = 1.0;
                  const logoTW = this.logoTexture.width;
                  const logoTH = this.logoTexture.height;
                  const logoW = refW * settings.displayRatio;
                  let scaleX = logoW * logoTW / logoTH;
                  let scaleY = logoW;

                  if (device.surfaceTransform === SurfaceTransform.ROTATE_90 || device.surfaceTransform === SurfaceTransform.ROTATE_270) {
                    scaleX = logoW * dw / dh;
                    scaleY = logoW * logoTH / logoTW * dh / dw;
                  }

                  this.logoMat.setProperty('resolution', v2_0.set(dw, dh), 0);
                  this.logoMat.setProperty('scale', v2_0.set(scaleX, scaleY), 0);
                  this.logoMat.setProperty('translate', v2_0.set(dw * 0.5, dh * 0.5), 0);
                  this.logoMat.setProperty('precent', u_p);
                  this.logoMat.setProperty('u_projection', this.projection);
                  this.logoMat.passes[0].update();

                  if (settings.displayWatermark && this.watermarkMat) {
                    const wartermarkW = refW * 0.5;
                    const wartermarkTW = this.watermarkTexture.width;
                    const wartermarkTH = this.watermarkTexture.height;
                    let scaleX = wartermarkW;
                    let scaleY = wartermarkW * wartermarkTH / wartermarkTW;

                    if (device.surfaceTransform === SurfaceTransform.ROTATE_90 || device.surfaceTransform === SurfaceTransform.ROTATE_270) {
                      scaleX = wartermarkW * 0.5;
                      scaleY = wartermarkW * dw / dh * 0.5;
                    }

                    this.watermarkMat.setProperty('resolution', v2_0.set(dw, dh), 0);
                    this.watermarkMat.setProperty('scale', v2_0.set(scaleX, scaleY), 0);
                    this.watermarkMat.setProperty('translate', v2_0.set(dw * 0.5, dh * 0.1), 0);
                    this.watermarkMat.setProperty('precent', u_p);
                    this.watermarkMat.setProperty('u_projection', this.projection);
                    this.watermarkMat.passes[0].update();
                  }

                  this.frame();
                  if (elapsedTime > settings.totalTime) this.splashFinish = true;
                  requestAnimationFrame(animate);
                };

                legacyCC.game.pause();
                this.handle = requestAnimationFrame(animate);
              }

              hide() {
                cancelAnimationFrame(this.handle);
                this.cancelAnimate = true;
                setTimeout(this.destroy.bind(this));
              }

              initLogo() {
                const device = this.device;
                this.logoMat = new Material();
                this.logoMat.initialize({
                  effectName: 'splash-screen'
                });
                const samplerInfo = new SamplerInfo();
                samplerInfo.addressU = Address.CLAMP;
                samplerInfo.addressV = Address.CLAMP;
                samplerInfo.addressW = Address.CLAMP;
                this.sampler = device.createSampler(samplerInfo);
                this.logoTexture = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, this.logoImage.width, this.logoImage.height));
                const pass = this.logoMat.passes[0];
                const binding = pass.getBinding('mainTexture');
                pass.bindTexture(binding, this.logoTexture);
                this.shader = ShaderPool.get(pass.getShaderVariant());
                const descriptorSet = DSPool.get(PassPool.get(pass.handle, PassView.DESCRIPTOR_SET));
                descriptorSet.bindSampler(binding, this.sampler);
                descriptorSet.update();
                const region = new BufferTextureCopy();
                region.texExtent.width = this.logoImage.width;
                region.texExtent.height = this.logoImage.height;
                region.texExtent.depth = 1;
                device.copyTexImagesToTexture([this.logoImage], this.logoTexture, [region]);
              }

              initWarterMark() {
                const wartemarkImg = document.createElement('canvas');
                wartemarkImg.width = 330;
                wartemarkImg.height = 30;
                wartemarkImg.style.width = `${wartemarkImg.width}`;
                wartemarkImg.style.height = `${wartemarkImg.height}`;
                const ctx = wartemarkImg.getContext('2d');
                ctx.font = `${18}px Arial`;
                ctx.textBaseline = 'top';
                ctx.textAlign = 'left';
                ctx.fillStyle = '`#424242`';
                const text = 'Powered by Cocos Creator';
                const textMetrics = ctx.measureText(text);
                ctx.fillText(text, (330 - textMetrics.width) / 2, 6);
                const region = new BufferTextureCopy();
                region.texExtent.width = wartemarkImg.width;
                region.texExtent.height = wartemarkImg.height;
                region.texExtent.depth = 1;
                this.watermarkTexture = this.device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.SAMPLED | TextureUsageBit.TRANSFER_DST, Format.RGBA8, wartemarkImg.width, wartemarkImg.height));
                this.device.copyTexImagesToTexture([wartemarkImg], this.watermarkTexture, [region]);
                this.watermarkMat = new Material();
                this.watermarkMat.initialize({
                  effectName: 'splash-screen'
                });
                const pass = this.watermarkMat.passes[0];
                const binding = pass.getBinding('mainTexture');
                pass.bindTexture(binding, this.watermarkTexture);
                DSPool.get(PassPool.get(pass.handle, PassView.DESCRIPTOR_SET)).update();
              }

              frame() {
                const device = this.device;
                device.acquire();
                const cmdBuff = this.cmdBuff;
                const framebuffer = this.framebuffer;
                const renderArea = this.renderArea;

                {
                  renderArea.width = device.nativeWidth;
                  renderArea.height = device.nativeHeight;
                }

                cmdBuff.begin();
                cmdBuff.beginRenderPass(framebuffer.renderPass, framebuffer, renderArea, this.clearColors, 1.0, 0);
                const logoPass = this.logoMat.passes[0];
                const logoPso = PipelineStateManager.getOrCreatePipelineState(device, logoPass, this.shader, framebuffer.renderPass, this.quadAssmebler);
                cmdBuff.bindPipelineState(logoPso);
                cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, logoPass.descriptorSet);
                cmdBuff.bindInputAssembler(this.quadAssmebler);
                cmdBuff.draw(this.quadAssmebler);

                if (this.settings.displayWatermark && this.watermarkMat) {
                  const wartermarkPass = this.watermarkMat.passes[0];
                  const watermarkPso = PipelineStateManager.getOrCreatePipelineState(device, wartermarkPass, this.shader, framebuffer.renderPass, this.quadAssmebler);
                  cmdBuff.bindPipelineState(watermarkPso);
                  cmdBuff.bindDescriptorSet(SetIndex.MATERIAL, wartermarkPass.descriptorSet);
                  cmdBuff.bindInputAssembler(this.quadAssmebler);
                  cmdBuff.draw(this.quadAssmebler);
                }

                cmdBuff.endRenderPass();
                cmdBuff.end();
                device.flushCommands([cmdBuff]);
                device.queue.submit([cmdBuff]);
                device.present();
              }

              destroy() {
                this.callBack = null;
                this.root = null;
                this.device = null;
                this.clearColors = null;
                if (this.logoImage.destroy) this.logoImage.destroy();
                this.logoImage = null;
                this.framebuffer = null;
                this.renderArea = null;
                this.cmdBuff = null;
                this.shader = null;
                this.logoMat.destroy();
                this.logoMat = null;
                this.logoTexture.destroy();
                this.logoTexture = null;
                this.quadAssmebler.destroy();
                this.quadAssmebler = null;
                this.vertexBuffers.destroy();
                this.vertexBuffers = null;
                this.indicesBuffers.destroy();
                this.indicesBuffers = null;
                this.sampler.destroy();
                this.sampler = null;

                if (this.watermarkTexture) {
                  this.watermarkMat.destroy();
                  this.watermarkMat = null;
                  this.watermarkTexture.destroy();
                  this.watermarkTexture = null;
                }

                this.settings = null;
                SplashScreen._ins = undefined;
              }

              static get instance() {
                if (!SplashScreen._ins) {
                  SplashScreen._ins = new SplashScreen();
                }

                return SplashScreen._ins;
              }

              constructor() {
                this.handle = 0;
                this.callBack = null;
                this.cancelAnimate = false;
                this.startTime = -1;
                this._splashFinish = false;
                this._loadFinish = false;
                this._directCall = false;
              }

            }
            SplashScreen._ins = void 0;
            legacyCC.internal.SplashScreen = SplashScreen;

            class System$1 {
              constructor() {
                this._id = '';
                this._priority = 0;
                this._executeInEditMode = false;
              }

              set priority(value) {
                this._priority = value;
              }

              get priority() {
                return this._priority;
              }

              set id(id) {
                this._id = id;
              }

              get id() {
                return this._id;
              }

              static sortByPriority(a, b) {
                if (a._priority < b._priority) {
                  return 1;
                } else if (a._priority > b.priority) {
                  return -1;
                } else {
                  return 0;
                }
              }

              init() {}

              update(dt) {}

              postUpdate(dt) {}

            } exports('dU', System$1);

            const MAX_POOL_SIZE = 20;
            const idGenerator$4 = new IDGenerator('Scheduler');

            class ListEntry {
              constructor(target, priority, paused, markedForDeletion) {
                this.target = void 0;
                this.priority = void 0;
                this.paused = void 0;
                this.markedForDeletion = void 0;
                this.target = target;
                this.priority = priority;
                this.paused = paused;
                this.markedForDeletion = markedForDeletion;
              }

            }

            ListEntry.get = (target, priority, paused, markedForDeletion) => {
              let result = ListEntry._listEntries.pop();

              if (result) {
                result.target = target;
                result.priority = priority;
                result.paused = paused;
                result.markedForDeletion = markedForDeletion;
              } else {
                result = new ListEntry(target, priority, paused, markedForDeletion);
              }

              return result;
            };

            ListEntry.put = entry => {
              if (ListEntry._listEntries.length < MAX_POOL_SIZE) {
                entry.target = null;

                ListEntry._listEntries.push(entry);
              }
            };

            ListEntry._listEntries = [];

            class HashUpdateEntry {
              constructor(list, entry, target, callback) {
                this.list = void 0;
                this.entry = void 0;
                this.target = void 0;
                this.callback = void 0;
                this.list = list;
                this.entry = entry;
                this.target = target;
                this.callback = callback;
              }

            }

            HashUpdateEntry.get = (list, entry, target, callback) => {
              let result = HashUpdateEntry._hashUpdateEntries.pop();

              if (result) {
                result.list = list;
                result.entry = entry;
                result.target = target;
                result.callback = callback;
              } else {
                result = new HashUpdateEntry(list, entry, target, callback);
              }

              return result;
            };

            HashUpdateEntry.put = entry => {
              if (HashUpdateEntry._hashUpdateEntries.length < MAX_POOL_SIZE) {
                entry.list = entry.entry = entry.target = entry.callback = null;

                HashUpdateEntry._hashUpdateEntries.push(entry);
              }
            };

            HashUpdateEntry._hashUpdateEntries = [];

            class HashTimerEntry {
              constructor(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) {
                this.timers = void 0;
                this.target = void 0;
                this.timerIndex = void 0;
                this.currentTimer = void 0;
                this.currentTimerSalvaged = void 0;
                this.paused = void 0;
                this.timers = timers;
                this.target = target;
                this.timerIndex = timerIndex;
                this.currentTimer = currentTimer;
                this.currentTimerSalvaged = currentTimerSalvaged;
                this.paused = paused;
              }

            }

            HashTimerEntry.get = (timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) => {
              let result = HashTimerEntry._hashTimerEntries.pop();

              if (result) {
                result.timers = timers;
                result.target = target;
                result.timerIndex = timerIndex;
                result.currentTimer = currentTimer;
                result.currentTimerSalvaged = currentTimerSalvaged;
                result.paused = paused;
              } else {
                result = new HashTimerEntry(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused);
              }

              return result;
            };

            HashTimerEntry.put = entry => {
              if (HashTimerEntry._hashTimerEntries.length < MAX_POOL_SIZE) {
                entry.timers = entry.target = entry.currentTimer = null;

                HashTimerEntry._hashTimerEntries.push(entry);
              }
            };

            HashTimerEntry._hashTimerEntries = [];

            class CallbackTimer {
              constructor() {
                this._lock = void 0;
                this._scheduler = void 0;
                this._elapsed = void 0;
                this._runForever = void 0;
                this._useDelay = void 0;
                this._timesExecuted = void 0;
                this._repeat = void 0;
                this._delay = void 0;
                this._interval = void 0;
                this._target = void 0;
                this._callback = void 0;
                this._lock = false;
                this._scheduler = null;
                this._elapsed = -1;
                this._runForever = false;
                this._useDelay = false;
                this._timesExecuted = 0;
                this._repeat = 0;
                this._delay = 0;
                this._interval = 0;
                this._target = null;
                this._callback = null;
              }

              initWithCallback(scheduler, callback, target, seconds, repeat, delay) {
                this._lock = false;
                this._scheduler = scheduler;
                this._target = target;
                this._callback = callback;
                this._elapsed = -1;
                this._interval = seconds;
                this._delay = delay;
                this._useDelay = this._delay > 0;
                this._repeat = repeat;
                this._runForever = this._repeat === legacyCC.macro.REPEAT_FOREVER;
                return true;
              }

              getInterval() {
                return this._interval;
              }

              setInterval(interval) {
                this._interval = interval;
              }

              update(dt) {
                if (this._elapsed === -1) {
                  this._elapsed = 0;
                  this._timesExecuted = 0;
                } else {
                  this._elapsed += dt;

                  if (this._runForever && !this._useDelay) {
                    if (this._elapsed >= this._interval) {
                      this.trigger();
                      this._elapsed = 0;
                    }
                  } else {
                    if (this._useDelay) {
                      if (this._elapsed >= this._delay) {
                        this.trigger();
                        this._elapsed -= this._delay;
                        this._timesExecuted += 1;
                        this._useDelay = false;
                      }
                    } else if (this._elapsed >= this._interval) {
                      this.trigger();
                      this._elapsed = 0;
                      this._timesExecuted += 1;
                    }

                    if (this._callback && !this._runForever && this._timesExecuted > this._repeat) {
                      this.cancel();
                    }
                  }
                }
              }

              getCallback() {
                return this._callback;
              }

              trigger() {
                if (this._target && this._callback) {
                  this._lock = true;

                  this._callback.call(this._target, this._elapsed);

                  this._lock = false;
                }
              }

              cancel() {
                this._scheduler.unschedule(this._callback, this._target);
              }

            }

            CallbackTimer._timers = [];

            CallbackTimer.get = () => CallbackTimer._timers.pop() || new CallbackTimer();

            CallbackTimer.put = timer => {
              if (CallbackTimer._timers.length < MAX_POOL_SIZE && !timer._lock) {
                timer._scheduler = timer._target = timer._callback = null;

                CallbackTimer._timers.push(timer);
              }
            };

            class Scheduler extends System$1 {
              static enableForTarget(target) {
                let found = false;

                if (target.uuid) {
                  found = true;
                } else if (target.id) {
                  found = true;
                }

                if (!found) {
                  if (target.__instanceId) {
                    warnID(1513);
                  } else {
                    target.id = idGenerator$4.getNewId();
                  }
                }
              }

              constructor() {
                super();
                this._timeScale = void 0;
                this._updatesNegList = void 0;
                this._updates0List = void 0;
                this._updatesPosList = void 0;
                this._hashForUpdates = void 0;
                this._hashForTimers = void 0;
                this._currentTarget = void 0;
                this._currentTargetSalvaged = void 0;
                this._updateHashLocked = void 0;
                this._arrayForTimers = void 0;
                this._timeScale = 1.0;
                this._updatesNegList = [];
                this._updates0List = [];
                this._updatesPosList = [];
                this._hashForUpdates = createMap(true);
                this._hashForTimers = createMap(true);
                this._currentTarget = null;
                this._currentTargetSalvaged = false;
                this._updateHashLocked = false;
                this._arrayForTimers = [];
              }

              setTimeScale(timeScale) {
                this._timeScale = timeScale;
              }

              getTimeScale() {
                return this._timeScale;
              }

              update(dt) {
                this._updateHashLocked = true;

                if (this._timeScale !== 1) {
                  dt *= this._timeScale;
                }

                let i;
                let list;
                let len;
                let entry;

                for (i = 0, list = this._updatesNegList, len = list.length; i < len; i++) {
                  entry = list[i];

                  if (!entry.paused && !entry.markedForDeletion) {
                    entry.target.update(dt);
                  }
                }

                for (i = 0, list = this._updates0List, len = list.length; i < len; i++) {
                  entry = list[i];

                  if (!entry.paused && !entry.markedForDeletion) {
                    entry.target.update(dt);
                  }
                }

                for (i = 0, list = this._updatesPosList, len = list.length; i < len; i++) {
                  entry = list[i];

                  if (!entry.paused && !entry.markedForDeletion) {
                    entry.target.update(dt);
                  }
                }

                let elt;
                const arr = this._arrayForTimers;

                for (i = 0; i < arr.length; i++) {
                  elt = arr[i];
                  this._currentTarget = elt;
                  this._currentTargetSalvaged = false;

                  if (!elt.paused) {
                    for (elt.timerIndex = 0; elt.timerIndex < elt.timers.length; ++elt.timerIndex) {
                      elt.currentTimer = elt.timers[elt.timerIndex];
                      elt.currentTimerSalvaged = false;
                      elt.currentTimer.update(dt);
                      elt.currentTimer = null;
                    }
                  }

                  if (this._currentTargetSalvaged && this._currentTarget.timers.length === 0) {
                    this._removeHashElement(this._currentTarget);

                    --i;
                  }
                }

                for (i = 0, list = this._updatesNegList; i < list.length;) {
                  entry = list[i];

                  if (entry.markedForDeletion) {
                    this._removeUpdateFromHash(entry);
                  } else {
                    i++;
                  }
                }

                for (i = 0, list = this._updates0List; i < list.length;) {
                  entry = list[i];

                  if (entry.markedForDeletion) {
                    this._removeUpdateFromHash(entry);
                  } else {
                    i++;
                  }
                }

                for (i = 0, list = this._updatesPosList; i < list.length;) {
                  entry = list[i];

                  if (entry.markedForDeletion) {
                    this._removeUpdateFromHash(entry);
                  } else {
                    i++;
                  }
                }

                this._updateHashLocked = false;
                this._currentTarget = null;
              }

              schedule(callback, target, interval, repeat, delay, paused) {
                if (typeof callback !== 'function') {
                  const tmp = callback;
                  callback = target;
                  target = tmp;
                }

                if (arguments.length === 3 || arguments.length === 4 || arguments.length === 5) {
                  paused = !!repeat;
                  repeat = legacyCC.macro.REPEAT_FOREVER;
                  delay = 0;
                }

                assertID(target, 1502);
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                let element = this._hashForTimers[targetId];

                if (!element) {
                  element = HashTimerEntry.get(null, target, 0, null, null, paused);

                  this._arrayForTimers.push(element);

                  this._hashForTimers[targetId] = element;
                } else if (element.paused !== paused) {
                  warnID(1511);
                }

                let timer;
                let i;

                if (element.timers == null) {
                  element.timers = [];
                } else {
                  for (i = 0; i < element.timers.length; ++i) {
                    timer = element.timers[i];

                    if (timer && callback === timer._callback) {
                      logID(1507, timer.getInterval(), interval);
                      timer._interval = interval;
                      return;
                    }
                  }
                }

                timer = CallbackTimer.get();
                timer.initWithCallback(this, callback, target, interval, repeat, delay);
                element.timers.push(timer);

                if (this._currentTarget === element && this._currentTargetSalvaged) {
                  this._currentTargetSalvaged = false;
                }
              }

              scheduleUpdate(target, priority, paused) {
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const hashElement = this._hashForUpdates[targetId];

                if (hashElement && hashElement.entry) {
                  if (hashElement.entry.priority !== priority) {
                    if (this._updateHashLocked) {
                      logID(1506);
                      hashElement.entry.markedForDeletion = false;
                      hashElement.entry.paused = paused;
                      return;
                    } else {
                      this.unscheduleUpdate(target);
                    }
                  } else {
                    hashElement.entry.markedForDeletion = false;
                    hashElement.entry.paused = paused;
                    return;
                  }
                }

                const listElement = ListEntry.get(target, priority, paused, false);
                let ppList;

                if (priority === 0) {
                  ppList = this._updates0List;

                  this._appendIn(ppList, listElement);
                } else {
                  ppList = priority < 0 ? this._updatesNegList : this._updatesPosList;

                  this._priorityIn(ppList, listElement, priority);
                }

                this._hashForUpdates[targetId] = HashUpdateEntry.get(ppList, listElement, target, null);
              }

              unschedule(callback, target) {
                if (!target || !callback) {
                  return;
                }

                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const self = this;
                const element = self._hashForTimers[targetId];

                if (element) {
                  const timers = element.timers;

                  for (let i = 0, li = timers.length; i < li; i++) {
                    const timer = timers[i];

                    if (callback === timer._callback) {
                      if (timer === element.currentTimer && !element.currentTimerSalvaged) {
                        element.currentTimerSalvaged = true;
                      }

                      timers.splice(i, 1);
                      CallbackTimer.put(timer);

                      if (element.timerIndex >= i) {
                        element.timerIndex--;
                      }

                      if (timers.length === 0) {
                        if (self._currentTarget === element) {
                          self._currentTargetSalvaged = true;
                        } else {
                          self._removeHashElement(element);
                        }
                      }

                      return;
                    }
                  }
                }
              }

              unscheduleUpdate(target) {
                if (!target) {
                  return;
                }

                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const element = this._hashForUpdates[targetId];

                if (element) {
                  if (this._updateHashLocked) {
                    element.entry.markedForDeletion = true;
                  } else {
                    this._removeUpdateFromHash(element.entry);
                  }
                }
              }

              unscheduleAllForTarget(target) {
                if (!target) {
                  return;
                }

                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const element = this._hashForTimers[targetId];

                if (element) {
                  const timers = element.timers;

                  if (timers.indexOf(element.currentTimer) > -1 && !element.currentTimerSalvaged) {
                    element.currentTimerSalvaged = true;
                  }

                  for (let i = 0, l = timers.length; i < l; i++) {
                    CallbackTimer.put(timers[i]);
                  }

                  timers.length = 0;

                  if (this._currentTarget === element) {
                    this._currentTargetSalvaged = true;
                  } else {
                    this._removeHashElement(element);
                  }
                }

                this.unscheduleUpdate(target);
              }

              unscheduleAll() {
                this.unscheduleAllWithMinPriority(legacyCC.Scheduler.PRIORITY_SYSTEM);
              }

              unscheduleAllWithMinPriority(minPriority) {
                let i;
                let element;
                const arr = this._arrayForTimers;

                for (i = arr.length - 1; i >= 0; i--) {
                  element = arr[i];
                  this.unscheduleAllForTarget(element.target);
                }

                let entry;
                let temp_length = 0;

                if (minPriority < 0) {
                  for (i = 0; i < this._updatesNegList.length;) {
                    temp_length = this._updatesNegList.length;
                    entry = this._updatesNegList[i];

                    if (entry && entry.priority >= minPriority) {
                      this.unscheduleUpdate(entry.target);
                    }

                    if (temp_length === this._updatesNegList.length) {
                      i++;
                    }
                  }
                }

                if (minPriority <= 0) {
                  for (i = 0; i < this._updates0List.length;) {
                    temp_length = this._updates0List.length;
                    entry = this._updates0List[i];

                    if (entry) {
                      this.unscheduleUpdate(entry.target);
                    }

                    if (temp_length === this._updates0List.length) {
                      i++;
                    }
                  }
                }

                for (i = 0; i < this._updatesPosList.length;) {
                  temp_length = this._updatesPosList.length;
                  entry = this._updatesPosList[i];

                  if (entry && entry.priority >= minPriority) {
                    this.unscheduleUpdate(entry.target);
                  }

                  if (temp_length === this._updatesPosList.length) {
                    i++;
                  }
                }
              }

              isScheduled(callback, target) {
                assertID(callback, 1508);
                assertID(target, 1509);
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const element = this._hashForTimers[targetId];

                if (!element) {
                  return false;
                }

                if (element.timers == null) {
                  return false;
                } else {
                  const timers = element.timers;

                  for (let i = 0; i < timers.length; ++i) {
                    const timer = timers[i];

                    if (callback === timer._callback) {
                      return true;
                    }
                  }

                  return false;
                }
              }

              pauseAllTargets() {
                return this.pauseAllTargetsWithMinPriority(legacyCC.Scheduler.PRIORITY_SYSTEM);
              }

              pauseAllTargetsWithMinPriority(minPriority) {
                const idsWithSelectors = [];
                const self = this;
                let element;
                const locArrayForTimers = self._arrayForTimers;
                let i;
                let li;

                for (i = 0, li = locArrayForTimers.length; i < li; i++) {
                  element = locArrayForTimers[i];

                  if (element) {
                    element.paused = true;
                    idsWithSelectors.push(element.target);
                  }
                }

                let entry;

                if (minPriority < 0) {
                  for (i = 0; i < this._updatesNegList.length; i++) {
                    entry = this._updatesNegList[i];

                    if (entry) {
                      if (entry.priority >= minPriority) {
                        entry.paused = true;
                        idsWithSelectors.push(entry.target);
                      }
                    }
                  }
                }

                if (minPriority <= 0) {
                  for (i = 0; i < this._updates0List.length; i++) {
                    entry = this._updates0List[i];

                    if (entry) {
                      entry.paused = true;
                      idsWithSelectors.push(entry.target);
                    }
                  }
                }

                for (i = 0; i < this._updatesPosList.length; i++) {
                  entry = this._updatesPosList[i];

                  if (entry) {
                    if (entry.priority >= minPriority) {
                      entry.paused = true;
                      idsWithSelectors.push(entry.target);
                    }
                  }
                }

                return idsWithSelectors;
              }

              resumeTargets(targetsToResume) {
                if (!targetsToResume) {
                  return;
                }

                for (let i = 0; i < targetsToResume.length; i++) {
                  this.resumeTarget(targetsToResume[i]);
                }
              }

              pauseTarget(target) {
                assertID(target, 1503);
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const self = this;
                const element = self._hashForTimers[targetId];

                if (element) {
                  element.paused = true;
                }

                const elementUpdate = self._hashForUpdates[targetId];

                if (elementUpdate) {
                  elementUpdate.entry.paused = true;
                }
              }

              resumeTarget(target) {
                assertID(target, 1504);
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return;
                }

                const self = this;
                const element = self._hashForTimers[targetId];

                if (element) {
                  element.paused = false;
                }

                const elementUpdate = self._hashForUpdates[targetId];

                if (elementUpdate) {
                  elementUpdate.entry.paused = false;
                }
              }

              isTargetPaused(target) {
                assertID(target, 1505);
                const targetId = target.uuid || target.id;

                if (!targetId) {
                  errorID(1510);
                  return false;
                }

                const element = this._hashForTimers[targetId];

                if (element) {
                  return element.paused;
                }

                const elementUpdate = this._hashForUpdates[targetId];

                if (elementUpdate) {
                  return elementUpdate.entry.paused;
                }

                return false;
              }

              _removeHashElement(element) {
                const targetId = element.target.uuid || element.target.id;
                delete this._hashForTimers[targetId];
                const arr = this._arrayForTimers;

                for (let i = 0, l = arr.length; i < l; i++) {
                  if (arr[i] === element) {
                    arr.splice(i, 1);
                    break;
                  }
                }

                HashTimerEntry.put(element);
              }

              _removeUpdateFromHash(entry) {
                const targetId = entry.target.uuid || entry.target.id;
                const self = this;
                const element = self._hashForUpdates[targetId];

                if (element) {
                  const list = element.list;
                  const listEntry = element.entry;

                  for (let i = 0, l = list.length; i < l; i++) {
                    if (list[i] === listEntry) {
                      list.splice(i, 1);
                      break;
                    }
                  }

                  delete self._hashForUpdates[targetId];
                  ListEntry.put(listEntry);
                  HashUpdateEntry.put(element);
                }
              }

              _priorityIn(ppList, listElement, priority) {
                for (let i = 0; i < ppList.length; i++) {
                  if (priority < ppList[i].priority) {
                    ppList.splice(i, 0, listElement);
                    return;
                  }
                }

                ppList.push(listElement);
              }

              _appendIn(ppList, listElement) {
                ppList.push(listElement);
              }

            } exports('en', Scheduler);
            Scheduler.PRIORITY_SYSTEM = 1 << 31;
            Scheduler.PRIORITY_NON_SYSTEM = Scheduler.PRIORITY_SYSTEM + 1;
            Scheduler.ID = 'scheduler';
            legacyCC.Scheduler = Scheduler;

            class RenderWindow {
              get width() {
                return this._width;
              }

              get height() {
                return this._height;
              }

              get framebuffer() {
                return FramebufferPool.get(RenderWindowPool.get(this._poolHandle, RenderWindowView.FRAMEBUFFER));
              }

              get shouldSyncSizeWithSwapchain() {
                return this._shouldSyncSizeWithSwapchain;
              }

              get hasOnScreenAttachments() {
                return RenderWindowPool.get(this._poolHandle, RenderWindowView.HAS_ON_SCREEN_ATTACHMENTS) === 1;
              }

              get hasOffScreenAttachments() {
                return RenderWindowPool.get(this._poolHandle, RenderWindowView.HAS_OFF_SCREEN_ATTACHMENTS) === 1;
              }

              get handle() {
                return this._poolHandle;
              }

              get cameras() {
                return this._cameras;
              }

              static registerCreateFunc(root) {
                root._createWindowFun = _root => new RenderWindow(_root);
              }

              constructor(root) {
                this._title = '';
                this._width = 1;
                this._height = 1;
                this._nativeWidth = 1;
                this._nativeHeight = 1;
                this._renderPass = null;
                this._colorTextures = [];
                this._depthStencilTexture = null;
                this._swapchainBufferIndices = 0;
                this._shouldSyncSizeWithSwapchain = false;
                this._poolHandle = NULL_HANDLE;
                this._cameras = [];
              }

              initialize(device, info) {
                this._poolHandle = RenderWindowPool.alloc();

                if (info.title !== undefined) {
                  this._title = info.title;
                }

                if (info.swapchainBufferIndices !== undefined) {
                  this._swapchainBufferIndices = info.swapchainBufferIndices;
                }

                if (info.shouldSyncSizeWithSwapchain !== undefined) {
                  this._shouldSyncSizeWithSwapchain = info.shouldSyncSizeWithSwapchain;
                }

                this._width = info.width;
                this._height = info.height;
                this._nativeWidth = this._width;
                this._nativeHeight = this._height;
                const {
                  colorAttachments,
                  depthStencilAttachment
                } = info.renderPassInfo;

                for (let i = 0; i < colorAttachments.length; i++) {
                  if (colorAttachments[i].format === Format.UNKNOWN) {
                    colorAttachments[i].format = device.colorFormat;
                  }
                }

                if (depthStencilAttachment && depthStencilAttachment.format === Format.UNKNOWN) {
                  depthStencilAttachment.format = device.depthStencilFormat;
                }

                this._renderPass = device.createRenderPass(info.renderPassInfo);

                for (let i = 0; i < colorAttachments.length; i++) {
                  let colorTex = null;

                  if (!(this._swapchainBufferIndices & 1 << i)) {
                    colorTex = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.COLOR_ATTACHMENT | TextureUsageBit.SAMPLED, colorAttachments[i].format, this._width, this._height));
                    RenderWindowPool.set(this._poolHandle, RenderWindowView.HAS_OFF_SCREEN_ATTACHMENTS, 1);
                  } else {
                    RenderWindowPool.set(this._poolHandle, RenderWindowView.HAS_ON_SCREEN_ATTACHMENTS, 1);
                  }

                  this._colorTextures.push(colorTex);
                }

                if (depthStencilAttachment) {
                  if (this._swapchainBufferIndices >= 0) {
                    this._depthStencilTexture = device.createTexture(new TextureInfo(TextureType.TEX2D, TextureUsageBit.DEPTH_STENCIL_ATTACHMENT | TextureUsageBit.SAMPLED, depthStencilAttachment.format, this._width, this._height));
                    RenderWindowPool.set(this._poolHandle, RenderWindowView.HAS_OFF_SCREEN_ATTACHMENTS, 1);
                  } else {
                    RenderWindowPool.set(this._poolHandle, RenderWindowView.HAS_ON_SCREEN_ATTACHMENTS, 1);
                  }
                }

                const hFBO = FramebufferPool.alloc(device, new FramebufferInfo(this._renderPass, this._colorTextures, this._depthStencilTexture));
                RenderWindowPool.set(this._poolHandle, RenderWindowView.FRAMEBUFFER, hFBO);
                return true;
              }

              destroy() {
                this.clearCameras();

                if (this._depthStencilTexture) {
                  this._depthStencilTexture.destroy();

                  this._depthStencilTexture = null;
                }

                for (let i = 0; i < this._colorTextures.length; i++) {
                  const colorTexture = this._colorTextures[i];

                  if (colorTexture) {
                    colorTexture.destroy();
                  }
                }

                this._colorTextures.length = 0;

                if (this._poolHandle) {
                  FramebufferPool.get(RenderWindowPool.get(this._poolHandle, RenderWindowView.FRAMEBUFFER)).destroy();
                  this._poolHandle = NULL_HANDLE;
                }
              }

              resize(width, height) {
                this._width = width;
                this._height = height;

                if (width > this._nativeWidth || height > this._nativeHeight) {
                  this._nativeWidth = width;
                  this._nativeHeight = height;
                  let needRebuild = false;

                  if (this._depthStencilTexture) {
                    this._depthStencilTexture.resize(width, height);

                    needRebuild = true;
                  }

                  for (let i = 0; i < this._colorTextures.length; i++) {
                    const colorTex = this._colorTextures[i];

                    if (colorTex) {
                      colorTex.resize(width, height);
                      needRebuild = true;
                    }
                  }

                  const framebuffer = FramebufferPool.get(RenderWindowPool.get(this._poolHandle, RenderWindowView.FRAMEBUFFER));

                  if (needRebuild && framebuffer) {
                    framebuffer.destroy();
                    framebuffer.initialize(new FramebufferInfo(this._renderPass, this._colorTextures, this._depthStencilTexture));
                  }
                }

                for (const camera of this._cameras) {
                  if (camera.isWindowSize) {
                    camera.resize(width, height);
                  }
                }
              }

              extractRenderCameras(cameras) {
                for (let j = 0; j < this._cameras.length; j++) {
                  const camera = this._cameras[j];

                  if (camera.enabled) {
                    camera.update();
                    cameras.push(camera);
                  }
                }
              }

              attachCamera(camera) {
                for (let i = 0; i < this._cameras.length; i++) {
                  if (this._cameras[i] === camera) {
                    return;
                  }
                }

                this._cameras.push(camera);

                this.sortCameras();
              }

              detachCamera(camera) {
                for (let i = 0; i < this._cameras.length; ++i) {
                  if (this._cameras[i] === camera) {
                    this._cameras.splice(i, 1);

                    return;
                  }
                }
              }

              clearCameras() {
                this._cameras.length = 0;
              }

              sortCameras() {
                this._cameras.sort((a, b) => a.priority - b.priority);
              }

            }

            class Root {
              get device() {
                return this._device;
              }

              get mainWindow() {
                return this._mainWindow;
              }

              set curWindow(window) {
                this._curWindow = window;
              }

              get curWindow() {
                return this._curWindow;
              }

              set tempWindow(window) {
                this._tempWindow = window;
              }

              get tempWindow() {
                return this._tempWindow;
              }

              get windows() {
                return this._windows;
              }

              get pipeline() {
                return this._pipeline;
              }

              get batcher2D() {
                return this._batcher;
              }

              get scenes() {
                return this._scenes;
              }

              get cumulativeTime() {
                return RootPool.get(this._poolHandle, RootView.CUMULATIVE_TIME);
              }

              get frameTime() {
                return RootPool.get(this._poolHandle, RootView.FRAME_TIME);
              }

              get frameCount() {
                return this._frameCount;
              }

              get fps() {
                return this._fps;
              }

              set fixedFPS(fps) {
                if (fps > 0) {
                  this._fixedFPS = fps;
                  this._fixedFPSFrameTime = 1000.0 / fps;
                } else {
                  this._fixedFPSFrameTime = 0;
                }
              }

              get fixedFPS() {
                return this._fixedFPS;
              }

              get dataPoolManager() {
                return this._dataPoolMgr;
              }

              get handle() {
                return this._poolHandle;
              }

              get useDeferredPipeline() {
                return this._useDeferredPipeline;
              }

              constructor(device) {
                this._createSceneFun = null;
                this._createWindowFun = null;
                this._device = void 0;
                this._windows = [];
                this._mainWindow = null;
                this._curWindow = null;
                this._tempWindow = null;
                this._pipeline = null;
                this._batcher = null;
                this._dataPoolMgr = void 0;
                this._scenes = [];
                this._modelPools = new Map();
                this._cameraPool = null;
                this._lightPools = new Map();
                this._fpsTime = 0;
                this._frameCount = 0;
                this._fps = 0;
                this._fixedFPS = 0;
                this._fixedFPSFrameTime = 0;
                this._poolHandle = NULL_HANDLE;
                this._useDeferredPipeline = false;
                this._device = device;
                this._dataPoolMgr = legacyCC.internal.DataPoolManager && new legacyCC.internal.DataPoolManager(device);
                RenderScene.registerCreateFunc(this);
                RenderWindow.registerCreateFunc(this);
                this._cameraPool = new Pool$1(() => new Camera(this._device), 4);
              }

              initialize(info) {
                this._poolHandle = RootPool.alloc();
                const colorAttachment = new ColorAttachment();
                const depthStencilAttachment = new DepthStencilAttachment();
                depthStencilAttachment.depthStoreOp = StoreOp.DISCARD;
                depthStencilAttachment.stencilStoreOp = StoreOp.DISCARD;
                const renderPassInfo = new RenderPassInfo([colorAttachment], depthStencilAttachment);
                this._mainWindow = this.createWindow({
                  title: 'rootMainWindow',
                  width: this._device.width,
                  height: this._device.height,
                  renderPassInfo,
                  swapchainBufferIndices: -1
                });
                this._curWindow = this._mainWindow;
                return Promise.resolve(builtinResMgr.initBuiltinRes(this._device)).then(() => {
                  legacyCC.view.on('design-resolution-changed', () => {
                    const width = legacyCC.game.canvas.width;
                    const height = legacyCC.game.canvas.height;
                    this.resize(width, height);
                  }, this);
                });
              }

              destroy() {
                this.destroyScenes();

                if (this._pipeline) {
                  this._pipeline.destroy();

                  this._pipeline = null;
                }

                if (this._batcher) {
                  this._batcher.destroy();

                  this._batcher = null;
                }

                this._curWindow = null;
                this._mainWindow = null;
                this.dataPoolManager.clear();

                if (this._poolHandle) {
                  RootPool.free(this._poolHandle);
                  this._poolHandle = NULL_HANDLE;
                }
              }

              resize(width, height) {
                this._device.resize(width, height);

                this._mainWindow.resize(width, height);

                for (const window of this._windows) {
                  if (window.shouldSyncSizeWithSwapchain) {
                    window.resize(width, height);
                  }
                }

                if (this._pipeline) {
                  this._pipeline.resize(width, height);
                }
              }

              setRenderPipeline(rppl) {
                if (rppl instanceof DeferredPipeline) {
                  this._useDeferredPipeline = true;
                }

                if (!rppl) {
                  rppl = createDefaultPipeline();
                }

                this._pipeline = rppl;

                if (!this._pipeline.activate()) {
                  return false;
                }

                const scene = legacyCC.director.getScene();

                if (scene) {
                  scene.globals.activate();
                }

                this.onGlobalPipelineStateChanged();

                if (!this._batcher && legacyCC.internal.Batcher2D) {
                  this._batcher = new legacyCC.internal.Batcher2D(this);

                  if (!this._batcher.initialize()) {
                    this.destroy();
                    return false;
                  }
                }

                return true;
              }

              onGlobalPipelineStateChanged() {
                for (let i = 0; i < this._scenes.length; i++) {
                  this._scenes[i].onGlobalPipelineStateChanged();
                }

                this._pipeline.pipelineSceneData.initDeferredPassInfo();
              }

              activeWindow(window) {
                this._curWindow = window;
              }

              resetCumulativeTime() {
                RootPool.set(this._poolHandle, RootView.CUMULATIVE_TIME, 0);
              }

              frameMove(deltaTime) {
                RootPool.set(this._poolHandle, RootView.FRAME_TIME, deltaTime);
                ++this._frameCount;
                RootPool.set(this._poolHandle, RootView.CUMULATIVE_TIME, RootPool.get(this._poolHandle, RootView.CUMULATIVE_TIME) + deltaTime);
                this._fpsTime += deltaTime;

                if (this._fpsTime > 1.0) {
                  this._fps = this._frameCount;
                  this._frameCount = 0;
                  this._fpsTime = 0.0;
                }

                for (let i = 0; i < this._scenes.length; ++i) {
                  this._scenes[i].removeBatches();
                }

                if (this._batcher) this._batcher.update();
                const windows = this._windows;
                const cameraList = [];

                for (let i = 0; i < windows.length; i++) {
                  const window = windows[i];
                  window.extractRenderCameras(cameraList);
                }

                if (this._pipeline && cameraList.length > 0) {
                  this._device.acquire();

                  const scenes = this._scenes;
                  const stamp = legacyCC.director.getTotalFrames();
                  if (this._batcher) this._batcher.uploadBuffers();

                  for (let i = 0; i < scenes.length; i++) {
                    scenes[i].update(stamp);
                  }

                  legacyCC.director.emit(legacyCC.Director.EVENT_BEFORE_COMMIT);
                  cameraList.sort((a, b) => a.priority - b.priority);

                  this._pipeline.render(cameraList);

                  this._device.present();
                }

                if (this._batcher) this._batcher.reset();
              }

              createWindow(info) {
                const window = this._createWindowFun(this);

                window.initialize(this.device, info);

                this._windows.push(window);

                return window;
              }

              destroyWindow(window) {
                for (let i = 0; i < this._windows.length; ++i) {
                  if (this._windows[i] === window) {
                    window.destroy();

                    this._windows.splice(i, 1);

                    return;
                  }
                }
              }

              destroyWindows() {
                for (const window of this._windows) {
                  window.destroy();
                }

                this._windows = [];
              }

              createScene(info) {
                const scene = this._createSceneFun(this);

                scene.initialize(info);

                this._scenes.push(scene);

                return scene;
              }

              destroyScene(scene) {
                for (let i = 0; i < this._scenes.length; ++i) {
                  if (this._scenes[i] === scene) {
                    scene.destroy();

                    this._scenes.splice(i, 1);

                    return;
                  }
                }
              }

              destroyScenes() {
                for (const scene of this._scenes) {
                  scene.destroy();
                }

                this._scenes = [];
              }

              createModel(ModelCtor) {
                let p = this._modelPools.get(ModelCtor);

                if (!p) {
                  this._modelPools.set(ModelCtor, new Pool$1(() => new ModelCtor(), 10));

                  p = this._modelPools.get(ModelCtor);
                }

                const model = p.alloc();
                model.initialize();
                return model;
              }

              destroyModel(m) {
                const p = this._modelPools.get(m.constructor);

                if (p) {
                  p.free(m);
                  m.destroy();

                  if (m.scene) {
                    m.scene.removeModel(m);
                  }
                } else {
                  warnID(1300, m.constructor.name);
                }
              }

              createCamera() {
                return this._cameraPool.alloc();
              }

              createLight(LightCtor) {
                let l = this._lightPools.get(LightCtor);

                if (!l) {
                  this._lightPools.set(LightCtor, new Pool$1(() => new LightCtor(), 4));

                  l = this._lightPools.get(LightCtor);
                }

                const light = l.alloc();
                light.initialize();
                return light;
              }

              destroyLight(l) {
                const p = this._lightPools.get(l.constructor);

                l.destroy();

                if (p) {
                  p.free(l);

                  if (l.scene) {
                    switch (l.type) {
                      case LightType.SPHERE:
                        l.scene.removeSphereLight(l);
                        break;

                      case LightType.SPOT:
                        l.scene.removeSpotLight(l);
                        break;
                    }
                  }
                }
              }

            }
            legacyCC.Root = Root;

            const vmath = {};
            replaceProperty(vmath, 'vmath', [{
              name: 'vec2',
              newName: 'Vec2',
              target: math,
              targetName: 'math'
            }, {
              name: 'vec3',
              newName: 'Vec3',
              target: math,
              targetName: 'math'
            }, {
              name: 'vec4',
              newName: 'Vec4',
              target: math,
              targetName: 'math'
            }, {
              name: 'quat',
              newName: 'Quat',
              target: math,
              targetName: 'math'
            }, {
              name: 'mat3',
              newName: 'Mat3',
              target: math,
              targetName: 'math'
            }, {
              name: 'mat4',
              newName: 'Mat4',
              target: math,
              targetName: 'math'
            }, {
              name: 'color4',
              newName: 'Color',
              target: math,
              targetName: 'math'
            }, {
              name: 'rect',
              newName: 'Rect',
              target: math,
              targetName: 'math'
            }, {
              name: 'approx',
              newName: 'approx',
              target: math,
              targetName: 'math'
            }, {
              name: 'EPSILON',
              newName: 'EPSILON',
              target: math,
              targetName: 'math'
            }, {
              name: 'equals',
              newName: 'equals',
              target: math,
              targetName: 'math'
            }, {
              name: 'clamp',
              newName: 'clamp',
              target: math,
              targetName: 'math'
            }, {
              name: 'clamp01',
              newName: 'clamp01',
              target: math,
              targetName: 'math'
            }, {
              name: 'lerp',
              newName: 'lerp',
              target: math,
              targetName: 'math'
            }, {
              name: 'toRadian',
              newName: 'toRadian',
              target: math,
              targetName: 'math'
            }, {
              name: 'toDegree',
              newName: 'toDegree',
              target: math,
              targetName: 'math'
            }, {
              name: 'random',
              newName: 'random',
              target: math,
              targetName: 'math'
            }, {
              name: 'randomRange',
              newName: 'randomRange',
              target: math,
              targetName: 'math'
            }, {
              name: 'randomRangeInt',
              newName: 'randomRangeInt',
              target: math,
              targetName: 'math'
            }, {
              name: 'pseudoRandom',
              newName: 'pseudoRandom',
              target: math,
              targetName: 'math'
            }, {
              name: 'pseudoRandomRangeInt',
              newName: 'pseudoRandomRangeInt',
              target: math,
              targetName: 'math'
            }, {
              name: 'nextPow2',
              newName: 'nextPow2',
              target: math,
              targetName: 'math'
            }, {
              name: 'repeat',
              newName: 'repeat',
              target: math,
              targetName: 'math'
            }, {
              name: 'pingPong',
              newName: 'pingPong',
              target: math,
              targetName: 'math'
            }, {
              name: 'inverseLerp',
              newName: 'inverseLerp',
              target: math,
              targetName: 'math'
            }]);
            legacyCC.vmath = vmath;
            replaceProperty(Scheduler.prototype, 'Scheduler.prototype', [{
              name: 'enableForTarget',
              newName: 'enableForTarget',
              target: Scheduler,
              targetName: 'Scheduler'
            }]);
            replaceProperty(EventTouch.prototype, 'EventTouch.prototype', [{
              name: 'getUILocationInView',
              newName: 'getLocationInView',
              target: EventTouch,
              targetName: 'EventTouch'
            }]);
            replaceProperty(SubModel.prototype, 'SubModel.prototype', [{
              name: 'subMeshData',
              newName: 'subMesh'
            }]);
            removeProperty(SubModel.prototype, 'SubModel.prototype', [{
              name: 'getSubModel',
              suggest: 'Use `subModels[i]` instead'
            }, {
              name: 'subModelNum',
              suggest: 'Use `subModels.length` instead'
            }]);
            replaceProperty(Root.prototype, 'Root.prototype', [{
              name: 'ui',
              newName: 'batcher2D'
            }]);

            var _decorator = /*#__PURE__*/Object.freeze({
                __proto__: null,
                ccclass: ccclass,
                property: property,
                requireComponent: requireComponent,
                executionOrder: executionOrder,
                disallowMultiple: disallowMultiple,
                executeInEditMode: executeInEditMode,
                menu: menu,
                playOnFocus: playOnFocus,
                inspector: inspector,
                icon: icon,
                help: help,
                type: type,
                integer: integer,
                float: float,
                boolean: boolean,
                string: string
            });
            exports('e2', _decorator);

            const Destroyed$2 = CCObject.Flags.Destroyed;
            const PersistentMask$2 = CCObject.Flags.PersistentMask;
            const objsToClearTmpVar = [];
            function instantiate(original, internalForce) {

              let clone;

              if (original instanceof CCObject) {
                if (original._instantiate) {
                  legacyCC.game._isCloning = true;
                  clone = original._instantiate(null, true);
                  legacyCC.game._isCloning = false;
                  return clone;
                } else if (original instanceof legacyCC.Asset) {
                  throw new TypeError(getError(6903));
                }
              }

              legacyCC.game._isCloning = true;
              clone = doInstantiate(original);
              legacyCC.game._isCloning = false;
              return clone;
            }

            function doInstantiate(obj, parent) {

              let clone;

              if (obj._iN$t) {
                clone = obj._iN$t;
              } else if (obj.constructor) {
                const klass = obj.constructor;
                clone = new klass();
              } else {
                clone = Object.create(null);
              }

              enumerateObject(obj, clone, parent);

              for (let i = 0, len = objsToClearTmpVar.length; i < len; ++i) {
                objsToClearTmpVar[i]._iN$t = null;
              }

              objsToClearTmpVar.length = 0;
              return clone;
            }

            function enumerateCCClass(klass, obj, clone, parent) {
              const props = klass.__values__;

              for (let p = 0; p < props.length; p++) {
                const key = props[p];
                const value = obj[key];

                if (typeof value === 'object' && value) {
                  const initValue = clone[key];

                  if (initValue instanceof ValueType && initValue.constructor === value.constructor) {
                    initValue.set(value);
                  } else {
                    clone[key] = value._iN$t || instantiateObj(value, parent);
                  }
                } else {
                  clone[key] = value;
                }
              }
            }

            function enumerateObject(obj, clone, parent) {
              js.value(obj, '_iN$t', clone, true);
              objsToClearTmpVar.push(obj);
              const klass = obj.constructor;

              if (legacyCC.Class._isCCClass(klass)) {
                enumerateCCClass(klass, obj, clone, parent);
              } else {
                for (const key in obj) {
                  if (!obj.hasOwnProperty(key) || key.charCodeAt(0) === 95 && key.charCodeAt(1) === 95 && key !== '__type__') {
                    continue;
                  }

                  const value = obj[key];

                  if (typeof value === 'object' && value) {
                    if (value === clone) {
                      continue;
                    }

                    clone[key] = value._iN$t || instantiateObj(value, parent);
                  } else {
                    clone[key] = value;
                  }
                }
              }

              if (obj instanceof CCObject) {
                clone._objFlags &= PersistentMask$2;
              }
            }

            function instantiateObj(obj, parent) {
              if (obj instanceof ValueType) {
                return obj.clone();
              }

              if (obj instanceof legacyCC.Asset) {
                return obj;
              }

              let clone;

              if (ArrayBuffer.isView(obj)) {
                const len = obj.length;
                clone = new obj.constructor(len);
                obj._iN$t = clone;
                objsToClearTmpVar.push(obj);

                for (let i = 0; i < len; ++i) {
                  clone[i] = obj[i];
                }

                return clone;
              }

              if (Array.isArray(obj)) {
                const len = obj.length;
                clone = new Array(len);
                obj._iN$t = clone;
                objsToClearTmpVar.push(obj);

                for (let i = 0; i < len; ++i) {
                  const value = obj[i];

                  if (typeof value === 'object' && value) {
                    clone[i] = value._iN$t || instantiateObj(value, parent);
                  } else {
                    clone[i] = value;
                  }
                }

                return clone;
              } else if (obj._objFlags & Destroyed$2) {
                return null;
              }

              const ctor = obj.constructor;

              if (legacyCC.Class._isCCClass(ctor)) {
                if (parent) {
                  if (parent instanceof legacyCC.Component) {
                    if (obj instanceof legacyCC._BaseNode || obj instanceof legacyCC.Component) {
                      return obj;
                    }
                  } else if (parent instanceof legacyCC._BaseNode) {
                    if (obj instanceof legacyCC._BaseNode) {
                      if (!obj.isChildOf(parent)) {
                        return obj;
                      }
                    } else if (obj instanceof legacyCC.Component) {
                      if (obj.node && !obj.node.isChildOf(parent)) {
                        return obj;
                      }
                    }
                  }
                }

                clone = new ctor();
              } else if (ctor === Object) {
                clone = {};
              } else if (!ctor) {
                clone = Object.create(null);
              } else {
                return obj;
              }

              enumerateObject(obj, clone, parent);
              return clone;
            }

            instantiate._clone = doInstantiate;
            legacyCC.instantiate = instantiate;

            var _dec$h, _class$h, _class2$g, _descriptor$e, _descriptor2$9, _descriptor3$7, _descriptor4$6, _class3$9, _temp$g;
            let StorageUnit;

            (function (StorageUnit) {
              StorageUnit[StorageUnit["Uint8"] = 0] = "Uint8";
              StorageUnit[StorageUnit["Uint16"] = 1] = "Uint16";
              StorageUnit[StorageUnit["Uint32"] = 2] = "Uint32";
              StorageUnit[StorageUnit["Int8"] = 3] = "Int8";
              StorageUnit[StorageUnit["Int16"] = 4] = "Int16";
              StorageUnit[StorageUnit["Int32"] = 5] = "Int32";
              StorageUnit[StorageUnit["Float32"] = 6] = "Float32";
              StorageUnit[StorageUnit["Float64"] = 7] = "Float64";
            })(StorageUnit || (StorageUnit = {}));

            let ElementType;

            (function (ElementType) {
              ElementType[ElementType["Scalar"] = 0] = "Scalar";
              ElementType[ElementType["Vec2"] = 1] = "Vec2";
              ElementType[ElementType["Vec3"] = 2] = "Vec3";
              ElementType[ElementType["Vec4"] = 3] = "Vec4";
              ElementType[ElementType["Quat"] = 4] = "Quat";
              ElementType[ElementType["Mat4"] = 5] = "Mat4";
            })(ElementType || (ElementType = {}));

            const elementTypeBits = 3;
            function combineStorageUnitElementType(unit, elementType) {
              return (elementType << elementTypeBits) + unit;
            }
            function extractStorageUnitElementType(combined) {
              return {
                storageUnit: ~(-1 << elementTypeBits) & combined,
                elementType: combined >> elementTypeBits
              };
            }
            let CompactValueTypeArray = exports('eW', (_dec$h = ccclass('cc.CompactValueTypeArray'), _dec$h(_class$h = (_class2$g = (_temp$g = _class3$9 = class CompactValueTypeArray {
              constructor() {
                _initializerDefineProperty(this, "_byteOffset", _descriptor$e, this);

                _initializerDefineProperty(this, "_unitCount", _descriptor2$9, this);

                _initializerDefineProperty(this, "_unitElement", _descriptor3$7, this);

                _initializerDefineProperty(this, "_length", _descriptor4$6, this);
              }

              static lengthFor(values, elementType, unit) {
                const elementTraits = getElementTraits(elementType);
                return elementTraits.requiredUnits * values.length * getStorageConstructor(unit).BYTES_PER_ELEMENT;
              }

              static compress(values, elementType, unit, arrayBuffer, byteOffset, presumedByteOffset) {
                const elementTraits = getElementTraits(elementType);
                const storageConstructor = getStorageConstructor(unit);
                const unitCount = elementTraits.requiredUnits * values.length;
                const storage = new storageConstructor(arrayBuffer, byteOffset, unitCount);

                for (let i = 0; i < values.length; ++i) {
                  elementTraits.compress(storage, i, values[i]);
                }

                const result = new CompactValueTypeArray();
                result._unitElement = combineStorageUnitElementType(unit, elementType);
                result._byteOffset = presumedByteOffset;
                result._unitCount = unitCount;
                result._length = values.length;
                return result;
              }

              decompress(arrayBuffer) {
                const {
                  storageUnit,
                  elementType
                } = extractStorageUnitElementType(this._unitElement);
                const elementTraits = getElementTraits(elementType);
                const storageConstructor = getStorageConstructor(storageUnit);
                const storage = new storageConstructor(arrayBuffer, this._byteOffset, this._unitCount);
                const result = new Array(this._length);

                for (let i = 0; i < this._length; ++i) {
                  result[i] = elementTraits.decompress(storage, i);
                }

                return result;
              }

            }, _class3$9.StorageUnit = StorageUnit, _class3$9.ElementType = ElementType, _temp$g), (_descriptor$e = _applyDecoratedDescriptor(_class2$g.prototype, "_byteOffset", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor2$9 = _applyDecoratedDescriptor(_class2$g.prototype, "_unitCount", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor3$7 = _applyDecoratedDescriptor(_class2$g.prototype, "_unitElement", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return combineStorageUnitElementType(StorageUnit.Uint8, ElementType.Scalar);
              }
            }), _descriptor4$6 = _applyDecoratedDescriptor(_class2$g.prototype, "_length", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            })), _class2$g)) || _class$h));

            function getElementTraits(elementType) {
              return BuiltinElementTypeTraits[elementType];
            }

            function getStorageConstructor(unit) {
              switch (unit) {
                case StorageUnit.Uint8:
                  return Uint8Array;

                case StorageUnit.Uint16:
                  return Uint16Array;

                case StorageUnit.Uint32:
                  return Uint32Array;

                case StorageUnit.Int8:
                  return Int8Array;

                case StorageUnit.Int16:
                  return Int16Array;

                case StorageUnit.Int32:
                  return Int32Array;

                case StorageUnit.Float32:
                  return Float32Array;

                case StorageUnit.Float64:
                  return Float64Array;
              }
            }

            const BuiltinElementTypeTraits = {
              [ElementType.Scalar]: {
                requiredUnits: 1,

                compress(storage, index, value) {
                  storage[index] = value;
                },

                decompress(storage, index) {
                  return storage[index];
                }

              },
              [ElementType.Vec2]: {
                requiredUnits: 2,

                compress(storage, index, value) {
                  storage[index * 2] = value.x;
                  storage[index * 2 + 1] = value.y;
                },

                decompress(storage, index) {
                  return new Vec3(storage[index * 2], storage[index * 2 + 1]);
                }

              },
              [ElementType.Vec3]: {
                requiredUnits: 3,

                compress(storage, index, value) {
                  storage[index * 3] = value.x;
                  storage[index * 3 + 1] = value.y;
                  storage[index * 3 + 2] = value.z;
                },

                decompress(storage, index) {
                  return new Vec3(storage[index * 3], storage[index * 3 + 1], storage[index * 3 + 2]);
                }

              },
              [ElementType.Vec4]: {
                requiredUnits: 4,

                compress(storage, index, value) {
                  storage[index * 4] = value.x;
                  storage[index * 4 + 1] = value.y;
                  storage[index * 4 + 2] = value.z;
                  storage[index * 4 + 3] = value.w;
                },

                decompress(storage, index) {
                  return new Vec4(storage[index * 4], storage[index * 4 + 1], storage[index * 4 + 2], storage[index * 4 + 3]);
                }

              },
              [ElementType.Quat]: {
                requiredUnits: 4,

                compress(storage, index, value) {
                  storage[index * 4] = value.x;
                  storage[index * 4 + 1] = value.y;
                  storage[index * 4 + 2] = value.z;
                  storage[index * 4 + 3] = value.w;
                },

                decompress(storage, index) {
                  return new Quat(storage[index * 4], storage[index * 4 + 1], storage[index * 4 + 2], storage[index * 4 + 3]);
                }

              },
              [ElementType.Mat4]: {
                requiredUnits: 16,

                compress(storage, index, value) {
                  Mat4.toArray(storage, value, index * 16);
                },

                decompress(storage, index) {
                  return Mat4.fromArray(new Mat4(), storage, index * 16);
                }

              }
            };

            legacyCC._decorator = _decorator;

            removeProperty(TextureBase.prototype, 'TextureBase.prototype', [{
              name: 'hasPremultipliedAlpha'
            }, {
              name: 'setPremultiplyAlpha'
            }, {
              name: 'setFlipY'
            }]);
            replaceProperty(RenderTexture.prototype, 'RenderTexture.prototype', [{
              name: 'getGFXWindow',

              customFunction() {
                return this._window;
              }

            }]);

            var _dec$i, _class$i, _class2$h, _temp$h;
            let BufferAsset = exports('eX', (_dec$i = ccclass('cc.BufferAsset'), _dec$i(_class$i = (_class2$h = (_temp$h = class BufferAsset extends Asset {
              constructor(...args) {
                super(...args);
                this._buffer = null;
              }

              get _nativeAsset() {
                return this._buffer;
              }

              set _nativeAsset(bin) {
                if (bin instanceof ArrayBuffer) {
                  this._buffer = bin;
                } else {
                  this._buffer = bin.buffer;
                }
              }

              buffer() {
                return this._buffer;
              }

              validate() {
                return !!this.buffer;
              }

            }, _temp$h), (_applyDecoratedDescriptor(_class2$h.prototype, "_nativeAsset", [override], Object.getOwnPropertyDescriptor(_class2$h.prototype, "_nativeAsset"), _class2$h.prototype)), _class2$h)) || _class$i));
            legacyCC.BufferAsset = BufferAsset;

            const _typeMap = {
              [FormatType.UNORM]: 'Uint',
              [FormatType.SNORM]: 'Int',
              [FormatType.UINT]: 'Uint',
              [FormatType.INT]: 'Int',
              [FormatType.UFLOAT]: 'Float',
              [FormatType.FLOAT]: 'Float',
              default: 'Uint'
            };

            function _getDataViewType(info) {
              const type = _typeMap[info.type] || _typeMap.default;
              const bytes = info.size / info.count * 8;
              return `${type}${bytes}`;
            }

            function writeBuffer(target, data, format = Format.R32F, offset = 0, stride = 0) {
              const info = FormatInfos[format];

              if (!stride) {
                stride = info.size;
              }

              const writer = `set${_getDataViewType(info)}`;
              const componentBytesLength = info.size / info.count;
              const nSeg = Math.floor(data.length / info.count);
              const isLittleEndian = sys.isLittleEndian;

              for (let iSeg = 0; iSeg < nSeg; ++iSeg) {
                const x = offset + stride * iSeg;

                for (let iComponent = 0; iComponent < info.count; ++iComponent) {
                  const y = x + componentBytesLength * iComponent;
                  target[writer](y, data[info.count * iSeg + iComponent], isLittleEndian);
                }
              }
            }
            function readBuffer(target, format = Format.R32F, offset = 0, length = target.byteLength - offset, stride = 0, out = []) {
              const info = FormatInfos[format];

              if (!stride) {
                stride = info.size;
              }

              const reader = `get${_getDataViewType(info)}`;
              const componentBytesLength = info.size / info.count;
              const nSeg = Math.floor(length / stride);
              const isLittleEndian = sys.isLittleEndian;

              for (let iSeg = 0; iSeg < nSeg; ++iSeg) {
                const x = offset + stride * iSeg;

                for (let iComponent = 0; iComponent < info.count; ++iComponent) {
                  const y = x + componentBytesLength * iComponent;
                  out[info.count * iSeg + iComponent] = target[reader](y, isLittleEndian);
                }
              }

              return out;
            }
            function mapBuffer(target, callback, format = Format.R32F, offset = 0, length = target.byteLength - offset, stride = 0, out) {
              if (!out) {
                out = new DataView(target.buffer.slice(target.byteOffset, target.byteOffset + target.byteLength));
              }

              const info = FormatInfos[format];

              if (!stride) {
                stride = info.size;
              }

              const writer = `set${_getDataViewType(info)}`;
              const reader = `get${_getDataViewType(info)}`;
              const componentBytesLength = info.size / info.count;
              const nSeg = Math.floor(length / stride);
              const isLittleEndian = sys.isLittleEndian;

              for (let iSeg = 0; iSeg < nSeg; ++iSeg) {
                const x = offset + stride * iSeg;

                for (let iComponent = 0; iComponent < info.count; ++iComponent) {
                  const y = x + componentBytesLength * iComponent;
                  const cur = target[reader](y, isLittleEndian);
                  out[writer](y, callback(cur, iComponent, target), isLittleEndian);
                }
              }

              return out;
            }

            const _cachedArray = new Array(16);

            let _currentHovered = null;
            let pos = new Vec2();
            const _touchEvents = [SystemEventType.TOUCH_START.toString(), SystemEventType.TOUCH_MOVE.toString(), SystemEventType.TOUCH_END.toString(), SystemEventType.TOUCH_CANCEL.toString()];
            const _mouseEvents = [SystemEventType.MOUSE_DOWN.toString(), SystemEventType.MOUSE_ENTER.toString(), SystemEventType.MOUSE_MOVE.toString(), SystemEventType.MOUSE_LEAVE.toString(), SystemEventType.MOUSE_UP.toString(), SystemEventType.MOUSE_WHEEL.toString()];

            function _touchStartHandler(touch, event) {
              const node = this.owner;

              if (!node || !node._uiProps.uiTransformComp) {
                return false;
              }

              touch.getUILocation(pos);

              if (node._uiProps.uiTransformComp.isHit(pos, this)) {
                event.type = SystemEventType.TOUCH_START.toString();
                event.touch = touch;
                event.bubbles = true;
                node.dispatchEvent(event);
                return true;
              }

              return false;
            }

            function _touchMoveHandler(touch, event) {
              const node = this.owner;

              if (!node || !node._uiProps.uiTransformComp) {
                return false;
              }

              event.type = SystemEventType.TOUCH_MOVE.toString();
              event.touch = touch;
              event.bubbles = true;
              node.dispatchEvent(event);
              return true;
            }

            function _touchEndHandler(touch, event) {
              const node = this.owner;

              if (!node || !node._uiProps.uiTransformComp) {
                return;
              }

              touch.getUILocation(pos);

              if (node._uiProps.uiTransformComp.isHit(pos, this)) {
                event.type = SystemEventType.TOUCH_END.toString();
              } else {
                event.type = SystemEventType.TOUCH_CANCEL.toString();
              }

              event.touch = touch;
              event.bubbles = true;
              node.dispatchEvent(event);
            }

            function _touchCancelHandler(touch, event) {
              const node = this.owner;

              if (!node || !node._uiProps.uiTransformComp) {
                return;
              }

              event.type = SystemEventType.TOUCH_CANCEL.toString();
              event.touch = touch;
              event.bubbles = true;
              node.dispatchEvent(event);
            }

            function _mouseDownHandler(event) {
              const node = this.owner;

              if (!node || !node._uiProps.uiTransformComp) {
                return;
              }

              pos = event.getUILocation();

              if (node._uiProps.uiTransformComp.isHit(pos, this)) {
                event.type = SystemEventType.MOUSE_DOWN.toString();
                event.bubbles = true;
                node.dispatchEvent(event);
              }
            }

            function _mouseMoveHandler(event) {
              const node = this.owner;

              if (!node || !node._uiProps.uiTransformComp) {
                return;
              }

              pos = event.getUILocation();

              const hit = node._uiProps.uiTransformComp.isHit(pos, this);

              if (hit) {
                if (!this._previousIn) {
                  if (_currentHovered && _currentHovered.eventProcessor.mouseListener) {
                    event.type = SystemEventType.MOUSE_LEAVE;

                    _currentHovered.dispatchEvent(event);

                    if (_currentHovered.eventProcessor.mouseListener) {
                      _currentHovered.eventProcessor.mouseListener._previousIn = false;
                    }
                  }

                  _currentHovered = node;
                  event.type = SystemEventType.MOUSE_ENTER.toString();
                  node.dispatchEvent(event);
                  this._previousIn = true;
                }

                event.type = SystemEventType.MOUSE_MOVE.toString();
                event.bubbles = true;
                node.dispatchEvent(event);
              } else if (this._previousIn) {
                event.type = SystemEventType.MOUSE_LEAVE.toString();
                node.dispatchEvent(event);
                this._previousIn = false;
                _currentHovered = null;
              } else {
                return;
              }

              event.propagationStopped = true;
            }

            function _mouseUpHandler(event) {
              const node = this.owner;

              if (!node || !node._uiProps.uiTransformComp) {
                return;
              }

              pos = event.getUILocation();

              if (node._uiProps.uiTransformComp.isHit(pos, this)) {
                event.type = SystemEventType.MOUSE_UP.toString();
                event.bubbles = true;
                node.dispatchEvent(event);
                event.propagationStopped = true;
              }
            }

            function _mouseWheelHandler(event) {
              const node = this.owner;

              if (!node || !node._uiProps.uiTransformComp) {
                return;
              }

              pos = event.getUILocation();

              if (node._uiProps.uiTransformComp.isHit(pos, this)) {
                event.type = SystemEventType.MOUSE_WHEEL.toString();
                event.bubbles = true;
                node.dispatchEvent(event);
                event.propagationStopped = true;
              }
            }

            function _doDispatchEvent(owner, event) {
              let target;
              let i = 0;
              event.target = owner;
              _cachedArray.length = 0;
              owner.eventProcessor.getCapturingTargets(event.type, _cachedArray);
              event.eventPhase = 1;

              for (i = _cachedArray.length - 1; i >= 0; --i) {
                target = _cachedArray[i];

                if (target.eventProcessor.capturingTargets) {
                  event.currentTarget = target;
                  target.eventProcessor.capturingTargets.emit(event.type, event, _cachedArray);

                  if (event.propagationStopped) {
                    _cachedArray.length = 0;
                    return;
                  }
                }
              }

              _cachedArray.length = 0;
              event.eventPhase = 2;
              event.currentTarget = owner;

              if (owner.eventProcessor.capturingTargets) {
                owner.eventProcessor.capturingTargets.emit(event.type, event);
              }

              if (!event.propagationImmediateStopped && owner.eventProcessor.bubblingTargets) {
                owner.eventProcessor.bubblingTargets.emit(event.type, event);
              }

              if (!event.propagationStopped && event.bubbles) {
                owner.eventProcessor.getBubblingTargets(event.type, _cachedArray);
                event.eventPhase = 3;

                for (i = 0; i < _cachedArray.length; ++i) {
                  target = _cachedArray[i];

                  if (target.eventProcessor.bubblingTargets) {
                    event.currentTarget = target;
                    target.eventProcessor.bubblingTargets.emit(event.type, event);

                    if (event.propagationStopped) {
                      _cachedArray.length = 0;
                      return;
                    }
                  }
                }
              }

              _cachedArray.length = 0;
            }

            function _searchComponentsInParent(node, ctor) {
              if (ctor) {
                let index = 0;
                let list = [];

                for (let curr = node; curr && Node$1.isNode(curr); curr = curr.parent, ++index) {
                  const comp = curr.getComponent(ctor);

                  if (comp) {
                    const next = {
                      index,
                      comp
                    };

                    if (list) {
                      list.push(next);
                    } else {
                      list = [next];
                    }
                  }
                }

                return list.length > 0 ? list : null;
              }

              return null;
            }

            function _checkListeners(node, events) {
              if (!node._persistNode) {
                if (node.eventProcessor.bubblingTargets) {
                  for (let i = 0; i < events.length; ++i) {
                    if (node.eventProcessor.bubblingTargets.hasEventListener(events[i])) {
                      return true;
                    }
                  }
                }

                if (node.eventProcessor.capturingTargets) {
                  for (let i = 0; i < events.length; ++i) {
                    if (node.eventProcessor.capturingTargets.hasEventListener(events[i])) {
                      return true;
                    }
                  }
                }

                return false;
              }

              return true;
            }

            class NodeEventProcessor {
              get node() {
                return this._node;
              }

              constructor(node) {
                this.bubblingTargets = null;
                this.capturingTargets = null;
                this.touchListener = null;
                this.mouseListener = null;
                this._node = void 0;
                this._node = node;
              }

              reattach() {
                let currMask;
                this.node.walk(node => {
                  if (!currMask) {
                    currMask = _searchComponentsInParent(node, NodeEventProcessor._comp);
                  }

                  if (node.eventProcessor.touchListener) {
                    node.eventProcessor.touchListener.mask = currMask;
                  }

                  if (node.eventProcessor.mouseListener) {
                    node.eventProcessor.mouseListener.mask = currMask;
                  }
                });
              }

              destroy() {
                if (_currentHovered === this._node) {
                  _currentHovered = null;
                }

                if (this.touchListener || this.mouseListener) {
                  eventManager.removeListeners(this._node);

                  if (this.touchListener) {
                    this.touchListener.owner = null;
                    this.touchListener.mask = null;
                    this.touchListener = null;
                  }

                  if (this.mouseListener) {
                    this.mouseListener.owner = null;
                    this.mouseListener.mask = null;
                    this.mouseListener = null;
                  }
                }

                if (this.capturingTargets) this.capturingTargets.clear();
                if (this.bubblingTargets) this.bubblingTargets.clear();
              }

              on(type, callback, target, useCapture) {
                const forDispatch = this._checknSetupSysEvent(type);

                if (forDispatch) {
                  return this._onDispatch(type, callback, target, useCapture);
                } else {
                  if (!this.bubblingTargets) {
                    this.bubblingTargets = new CallbacksInvoker();
                  }

                  return this.bubblingTargets.on(type, callback, target);
                }
              }

              once(type, callback, target, useCapture) {
                const forDispatch = this._checknSetupSysEvent(type);

                let listeners;

                if (forDispatch && useCapture) {
                  listeners = this.capturingTargets = this.capturingTargets || new CallbacksInvoker();
                } else {
                  listeners = this.bubblingTargets = this.bubblingTargets || new CallbacksInvoker();
                }

                listeners.on(type, callback, target, true);
                listeners.on(type, () => {
                  this.off(type, callback, target);
                }, undefined, true);
              }

              off(type, callback, target, useCapture) {
                const touchEvent = _touchEvents.indexOf(type) !== -1;
                const mouseEvent = !touchEvent && _mouseEvents.indexOf(type) !== -1;

                if (touchEvent || mouseEvent) {
                  this._offDispatch(type, callback, target, useCapture);

                  if (touchEvent) {
                    if (this.touchListener && !_checkListeners(this._node, _touchEvents)) {
                      eventManager.removeListener(this.touchListener);
                      this.touchListener = null;
                    }
                  } else if (mouseEvent) {
                    if (this.mouseListener && !_checkListeners(this._node, _mouseEvents)) {
                      eventManager.removeListener(this.mouseListener);
                      this.mouseListener = null;
                    }
                  }
                } else if (this.bubblingTargets) {
                  this.bubblingTargets.off(type, callback, target);
                }
              }

              emit(type, arg0, arg1, arg2, arg3, arg4) {
                if (this.bubblingTargets) {
                  this.bubblingTargets.emit(type, arg0, arg1, arg2, arg3, arg4);
                }
              }

              dispatchEvent(event) {
                _doDispatchEvent(this._node, event);

                _cachedArray.length = 0;
              }

              hasEventListener(type, callback, target) {
                let has = false;

                if (this.bubblingTargets) {
                  has = this.bubblingTargets.hasEventListener(type, callback, target);
                }

                if (!has && this.capturingTargets) {
                  has = this.capturingTargets.hasEventListener(type, callback, target);
                }

                return has;
              }

              targetOff(target) {
                if (this.capturingTargets) {
                  this.capturingTargets.removeAll(target);
                }

                if (this.bubblingTargets) {
                  this.bubblingTargets.removeAll(target);
                }

                if (this.touchListener && !_checkListeners(this.node, _touchEvents)) {
                  eventManager.removeListener(this.touchListener);
                  this.touchListener = null;
                }

                if (this.mouseListener && !_checkListeners(this.node, _mouseEvents)) {
                  eventManager.removeListener(this.mouseListener);
                  this.mouseListener = null;
                }
              }

              getCapturingTargets(type, targets) {
                let parent = this._node.parent;

                while (parent) {
                  if (parent.eventProcessor.capturingTargets && parent.eventProcessor.capturingTargets.hasEventListener(type)) {
                    targets.push(parent);
                  }

                  parent = parent.parent;
                }
              }

              getBubblingTargets(type, targets) {
                let parent = this._node.parent;

                while (parent) {
                  if (parent.eventProcessor.bubblingTargets && parent.eventProcessor.bubblingTargets.hasEventListener(type)) {
                    targets.push(parent);
                  }

                  parent = parent.parent;
                }
              }

              _checknSetupSysEvent(type) {
                let newAdded = false;
                let forDispatch = false;

                if (_touchEvents.indexOf(type) !== -1) {
                  if (!this.touchListener) {
                    this.touchListener = legacyCC.EventListener.create({
                      event: legacyCC.EventListener.TOUCH_ONE_BY_ONE,
                      swallowTouches: true,
                      owner: this._node,
                      mask: _searchComponentsInParent(this._node, NodeEventProcessor._comp),
                      onTouchBegan: _touchStartHandler,
                      onTouchMoved: _touchMoveHandler,
                      onTouchEnded: _touchEndHandler,
                      onTouchCancelled: _touchCancelHandler
                    });
                    eventManager.addListener(this.touchListener, this._node);
                    newAdded = true;
                  }

                  forDispatch = true;
                } else if (_mouseEvents.indexOf(type) !== -1) {
                  if (!this.mouseListener) {
                    this.mouseListener = legacyCC.EventListener.create({
                      event: legacyCC.EventListener.MOUSE,
                      _previousIn: false,
                      owner: this._node,
                      mask: _searchComponentsInParent(this._node, NodeEventProcessor._comp),
                      onMouseDown: _mouseDownHandler,
                      onMouseMove: _mouseMoveHandler,
                      onMouseUp: _mouseUpHandler,
                      onMouseScroll: _mouseWheelHandler
                    });
                    eventManager.addListener(this.mouseListener, this._node);
                    newAdded = true;
                  }

                  forDispatch = true;
                }

                if (newAdded && !this._node.activeInHierarchy) {
                  legacyCC.director.getScheduler().schedule(() => {
                    if (!this._node.activeInHierarchy) {
                      eventManager.pauseTarget(this._node);
                    }
                  }, this._node, 0, 0, 0, false);
                }

                return forDispatch;
              }

              _onDispatch(type, callback, target, useCapture) {
                if (typeof target === 'boolean') {
                  useCapture = target;
                  target = undefined;
                } else {
                  useCapture = !!useCapture;
                }

                if (!callback) {
                  errorID(6800);
                  return undefined;
                }

                let listeners = null;

                if (useCapture) {
                  listeners = this.capturingTargets = this.capturingTargets || new CallbacksInvoker();
                } else {
                  listeners = this.bubblingTargets = this.bubblingTargets || new CallbacksInvoker();
                }

                if (!listeners.hasEventListener(type, callback, target)) {
                  listeners.on(type, callback, target);
                }

                return callback;
              }

              _offDispatch(type, callback, target, useCapture) {
                if (typeof target === 'boolean') {
                  useCapture = target;
                  target = undefined;
                } else {
                  useCapture = !!useCapture;
                }

                if (!callback) {
                  if (this.capturingTargets) {
                    this.capturingTargets.removeAll(type);
                  }

                  if (this.bubblingTargets) {
                    this.bubblingTargets.removeAll(type);
                  }
                } else {
                  const listeners = useCapture ? this.capturingTargets : this.bubblingTargets;

                  if (listeners) {
                    listeners.off(type, callback, target);
                  }
                }
              }

            } exports('cW', NodeEventProcessor);
            NodeEventProcessor._comp = null;
            legacyCC.NodeEventProcessor = NodeEventProcessor;

            var _dec$j, _class$j;
            replaceProperty(BaseNode.prototype, 'BaseNode', [{
              name: 'childrenCount',
              newName: 'children.length',

              customGetter() {
                return this.children.length;
              }

            }]);
            replaceProperty(Node$1.prototype, 'Node', [{
              name: 'width',
              targetName: 'node.getComponent(UITransform)',

              customGetter() {
                return this._uiProps.uiTransformComp.width;
              },

              customSetter(value) {
                this._uiProps.uiTransformComp.width = value;
              }

            }, {
              name: 'height',
              targetName: 'node.getComponent(UITransform)',

              customGetter() {
                return this._uiProps.uiTransformComp.height;
              },

              customSetter(value) {
                this._uiProps.uiTransformComp.height = value;
              }

            }, {
              name: 'anchorX',
              targetName: 'node.getComponent(UITransform)',

              customGetter() {
                return this._uiProps.uiTransformComp.anchorX;
              },

              customSetter(value) {
                this._uiProps.uiTransformComp.anchorX = value;
              }

            }, {
              name: 'anchorY',
              targetName: 'node.getComponent(UITransform)',

              customGetter() {
                return this._uiProps.uiTransformComp.anchorY;
              },

              customSetter(value) {
                this._uiProps.uiTransformComp.anchorY = value;
              }

            }, {
              name: 'getAnchorPoint',
              targetName: 'node.getComponent(UITransform)',

              customFunction(out) {
                if (!out) {
                  out = new Vec2();
                }

                out.set(this._uiProps.uiTransformComp.anchorPoint);
                return out;
              }

            }, {
              name: 'setAnchorPoint',
              targetName: 'node.getComponent(UITransform)',

              customFunction(point, y) {
                this._uiProps.uiTransformComp.setAnchorPoint(point, y);
              }

            }, {
              name: 'getContentSize',
              targetName: 'node.getComponent(UITransform)',

              customFunction(out) {
                if (!out) {
                  out = new Size();
                }

                out.set(this._uiProps.uiTransformComp.contentSize);
                return out;
              }

            }, {
              name: 'setContentSize',
              targetName: 'node.getComponent(UITransform)',

              customFunction(size, height) {
                if (typeof size === 'number') {
                  this._uiProps.uiTransformComp.setContentSize(size, height);
                } else {
                  this._uiProps.uiTransformComp.setContentSize(size);
                }
              }

            }]);
            removeProperty(Node$1.prototype, 'Node.prototype', [{
              name: 'addLayer'
            }, {
              name: 'removeLayer'
            }]);
            removeProperty(Layers, 'Layers', [{
              name: 'All'
            }, {
              name: 'RaycastMask'
            }, {
              name: 'check'
            }]);
            replaceProperty(Layers, 'Layers', [{
              name: 'Default',
              newName: 'DEFAULT',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'Always',
              newName: 'ALWAYS',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'IgnoreRaycast',
              newName: 'IGNORE_RAYCAST',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'Gizmos',
              newName: 'GIZMOS',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'Editor',
              newName: 'EDITOR',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'UI',
              newName: 'UI_3D',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'UI2D',
              newName: 'UI_2D',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'SceneGizmo',
              newName: 'SCENE_GIZMO',
              target: Layers.Enum,
              targetName: 'Layers.Enum'
            }, {
              name: 'makeInclusiveMask',
              newName: 'makeMaskInclude',
              target: Layers,
              targetName: 'Layers'
            }, {
              name: 'makeExclusiveMask',
              newName: 'makeMaskExclude',
              target: Layers,
              targetName: 'Layers'
            }]);
            removeProperty(Layers.Enum, 'Layers.Enum', [{
              name: 'ALWAYS'
            }]);
            removeProperty(Layers.BitMask, 'Layers.BitMask', [{
              name: 'ALWAYS'
            }]);
            const HideInHierarchy$1 = CCObject.Flags.HideInHierarchy;
            const DontSave$1 = CCObject.Flags.DontSave;
            let PrivateNode = exports('fF', (_dec$j = ccclass('cc.PrivateNode'), _dec$j(_class$j = class PrivateNode extends Node$1 {
              constructor(name) {
                super(name);
                warnID(12003, this.name);
                this.hideFlags |= DontSave$1 | HideInHierarchy$1;
              }

            }) || _class$j));

            legacyCC.PrivateNode = PrivateNode;

            var _dec$k, _dec2$9, _class$k, _class2$i, _descriptor$f, _descriptor2$a, _descriptor3$8, _temp$i, _dec3$5, _dec4$3, _dec5$2, _class4$1, _class5$1, _descriptor4$7, _descriptor5$5, _descriptor6$2, _descriptor7$2, _temp2$1, _dec6$1, _dec7$1, _dec8$1, _dec9$1, _dec10$1, _dec11$1, _dec12$1, _dec13$1, _dec14$1, _dec15$1, _dec16$1, _dec17$1, _dec18$1, _dec19$1, _dec20$1, _dec21$1, _dec22$1, _dec23$1, _dec24$1, _dec25$1, _dec26$1, _dec27, _dec28, _dec29, _dec30, _dec31, _dec32, _dec33, _class7$1, _class8$1, _descriptor8$2, _descriptor9$1, _descriptor10$1, _descriptor11$1, _descriptor12$1, _descriptor13$1, _descriptor14$1, _descriptor15$1, _descriptor16$1, _class9, _temp3$1, _dec34, _dec35, _dec36, _dec37, _dec38, _dec39, _dec40, _dec41, _dec42, _dec43, _dec44, _dec45, _dec46, _dec47, _dec48, _dec49, _dec50, _dec51, _dec52, _dec53, _dec54, _dec55, _dec56, _dec57, _dec58, _dec59, _dec60, _dec61, _dec62, _dec63, _class10$1, _class11$1, _descriptor17$1, _descriptor18$1, _descriptor19$1, _descriptor20$1, _descriptor21$1, _descriptor22$1, _descriptor23$1, _descriptor24$1, _descriptor25$1, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _temp4$1, _dec64, _dec65, _class13$1, _class14$1, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _temp5$1;

            const _up = new Vec3(0, 1, 0);

            const _v3$1 = new Vec3();

            const _qt$1 = new Quat();

            let AmbientInfo = (_dec$k = ccclass('cc.AmbientInfo'), _dec2$9 = type(CCFloat), _dec$k(_class$k = (_class2$i = (_temp$i = class AmbientInfo {
              constructor() {
                _initializerDefineProperty(this, "_skyColor", _descriptor$f, this);

                _initializerDefineProperty(this, "_skyIllum", _descriptor2$a, this);

                _initializerDefineProperty(this, "_groundAlbedo", _descriptor3$8, this);

                this._resource = null;
              }

              set skyColor(val) {
                this._skyColor.set(val);

                if (this._resource) {
                  this._resource.skyColor = this._skyColor;
                }
              }

              get skyColor() {
                return this._skyColor;
              }

              set skyIllum(val) {
                this._skyIllum = val;

                if (this._resource) {
                  this._resource.skyIllum = this.skyIllum;
                }
              }

              get skyIllum() {
                return this._skyIllum;
              }

              set groundAlbedo(val) {
                this._groundAlbedo.set(val);

                if (this._resource) {
                  this._resource.groundAlbedo = this._groundAlbedo;
                }
              }

              get groundAlbedo() {
                return this._groundAlbedo;
              }

              activate(resource) {
                this._resource = resource;

                this._resource.initialize(this);
              }

            }, _temp$i), (_descriptor$f = _applyDecoratedDescriptor(_class2$i.prototype, "_skyColor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Color(51, 128, 204, 1.0);
              }
            }), _descriptor2$a = _applyDecoratedDescriptor(_class2$i.prototype, "_skyIllum", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Ambient.SKY_ILLUM;
              }
            }), _descriptor3$8 = _applyDecoratedDescriptor(_class2$i.prototype, "_groundAlbedo", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Color(51, 51, 51, 255);
              }
            }), _applyDecoratedDescriptor(_class2$i.prototype, "skyColor", [editable], Object.getOwnPropertyDescriptor(_class2$i.prototype, "skyColor"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "skyIllum", [editable, _dec2$9], Object.getOwnPropertyDescriptor(_class2$i.prototype, "skyIllum"), _class2$i.prototype), _applyDecoratedDescriptor(_class2$i.prototype, "groundAlbedo", [editable], Object.getOwnPropertyDescriptor(_class2$i.prototype, "groundAlbedo"), _class2$i.prototype)), _class2$i)) || _class$k);
            legacyCC.AmbientInfo = AmbientInfo;
            let SkyboxInfo = (_dec3$5 = ccclass('cc.SkyboxInfo'), _dec4$3 = type(TextureCube), _dec5$2 = type(TextureCube), _dec3$5(_class4$1 = (_class5$1 = (_temp2$1 = class SkyboxInfo {
              constructor() {
                _initializerDefineProperty(this, "_envmap", _descriptor4$7, this);

                _initializerDefineProperty(this, "_isRGBE", _descriptor5$5, this);

                _initializerDefineProperty(this, "_enabled", _descriptor6$2, this);

                _initializerDefineProperty(this, "_useIBL", _descriptor7$2, this);

                this._resource = null;
              }

              set enabled(val) {
                if (this._enabled === val) return;
                this._enabled = val;

                if (this._resource) {
                  this._resource.enabled = this._enabled;
                }
              }

              get enabled() {
                return this._enabled;
              }

              set useIBL(val) {
                this._useIBL = val;

                if (this._resource) {
                  this._resource.useIBL = this._useIBL;
                }
              }

              get useIBL() {
                return this._useIBL;
              }

              set envmap(val) {
                this._envmap = val;

                if (this._resource) {
                  this._resource.envmap = this._envmap;
                }
              }

              get envmap() {
                return this._envmap;
              }

              set isRGBE(val) {
                this._isRGBE = val;

                if (this._resource) {
                  this._resource.isRGBE = this._isRGBE;
                }
              }

              get isRGBE() {
                return this._isRGBE;
              }

              activate(resource) {
                this._resource = resource;

                this._resource.initialize(this);

                this._resource.activate();
              }

            }, _temp2$1), (_descriptor4$7 = _applyDecoratedDescriptor(_class5$1.prototype, "_envmap", [_dec4$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor5$5 = _applyDecoratedDescriptor(_class5$1.prototype, "_isRGBE", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            }), _descriptor6$2 = _applyDecoratedDescriptor(_class5$1.prototype, "_enabled", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            }), _descriptor7$2 = _applyDecoratedDescriptor(_class5$1.prototype, "_useIBL", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            }), _applyDecoratedDescriptor(_class5$1.prototype, "enabled", [editable], Object.getOwnPropertyDescriptor(_class5$1.prototype, "enabled"), _class5$1.prototype), _applyDecoratedDescriptor(_class5$1.prototype, "useIBL", [editable], Object.getOwnPropertyDescriptor(_class5$1.prototype, "useIBL"), _class5$1.prototype), _applyDecoratedDescriptor(_class5$1.prototype, "envmap", [editable, _dec5$2], Object.getOwnPropertyDescriptor(_class5$1.prototype, "envmap"), _class5$1.prototype), _applyDecoratedDescriptor(_class5$1.prototype, "isRGBE", [editable], Object.getOwnPropertyDescriptor(_class5$1.prototype, "isRGBE"), _class5$1.prototype)), _class5$1)) || _class4$1);
            legacyCC.SkyboxInfo = SkyboxInfo;
            let FogInfo = (_dec6$1 = ccclass('cc.FogInfo'), _dec7$1 = type(FogType), _dec8$1 = visible(), _dec9$1 = type(CCFloat), _dec10$1 = range(), _dec11$1 = rangeStep(), _dec12$1 = displayOrder(), _dec13$1 = visible(), _dec14$1 = type(CCFloat), _dec15$1 = rangeStep(), _dec16$1 = displayOrder(), _dec17$1 = visible(), _dec18$1 = type(CCFloat), _dec19$1 = rangeStep(), _dec20$1 = displayOrder(), _dec21$1 = visible(), _dec22$1 = type(CCFloat), _dec23$1 = rangeMin(), _dec24$1 = rangeStep(), _dec25$1 = displayOrder(), _dec26$1 = visible(), _dec27 = type(CCFloat), _dec28 = rangeStep(), _dec29 = displayOrder(), _dec30 = visible(), _dec31 = type(CCFloat), _dec32 = rangeStep(), _dec33 = displayOrder(), _dec6$1(_class7$1 = (_class8$1 = (_temp3$1 = _class9 = class FogInfo {
              constructor() {
                _initializerDefineProperty(this, "_type", _descriptor8$2, this);

                _initializerDefineProperty(this, "_fogColor", _descriptor9$1, this);

                _initializerDefineProperty(this, "_enabled", _descriptor10$1, this);

                _initializerDefineProperty(this, "_fogDensity", _descriptor11$1, this);

                _initializerDefineProperty(this, "_fogStart", _descriptor12$1, this);

                _initializerDefineProperty(this, "_fogEnd", _descriptor13$1, this);

                _initializerDefineProperty(this, "_fogAtten", _descriptor14$1, this);

                _initializerDefineProperty(this, "_fogTop", _descriptor15$1, this);

                _initializerDefineProperty(this, "_fogRange", _descriptor16$1, this);

                this._resource = null;
              }

              set enabled(val) {
                if (this._enabled === val) return;
                this._enabled = val;

                if (this._resource) {
                  this._resource.enabled = val;

                  if (val) {
                    this._resource.type = this._type;
                  }
                }
              }

              get enabled() {
                return this._enabled;
              }

              set fogColor(val) {
                this._fogColor.set(val);

                if (this._resource) {
                  this._resource.fogColor = this._fogColor;
                }
              }

              get fogColor() {
                return this._fogColor;
              }

              get type() {
                return this._type;
              }

              set type(val) {
                this._type = val;

                if (this._resource) {
                  this._resource.type = val;
                }
              }

              get fogDensity() {
                return this._fogDensity;
              }

              set fogDensity(val) {
                this._fogDensity = val;

                if (this._resource) {
                  this._resource.fogDensity = val;
                }
              }

              get fogStart() {
                return this._fogStart;
              }

              set fogStart(val) {
                this._fogStart = val;

                if (this._resource) {
                  this._resource.fogStart = val;
                }
              }

              get fogEnd() {
                return this._fogEnd;
              }

              set fogEnd(val) {
                this._fogEnd = val;

                if (this._resource) {
                  this._resource.fogEnd = val;
                }
              }

              get fogAtten() {
                return this._fogAtten;
              }

              set fogAtten(val) {
                this._fogAtten = val;

                if (this._resource) {
                  this._resource.fogAtten = val;
                }
              }

              get fogTop() {
                return this._fogTop;
              }

              set fogTop(val) {
                this._fogTop = val;

                if (this._resource) {
                  this._resource.fogTop = val;
                }
              }

              get fogRange() {
                return this._fogRange;
              }

              set fogRange(val) {
                this._fogRange = val;

                if (this._resource) {
                  this._resource.fogRange = val;
                }
              }

              activate(resource) {
                this._resource = resource;

                this._resource.initialize(this);

                this._resource.activate();
              }

            }, _class9.FogType = FogType, _temp3$1), (_descriptor8$2 = _applyDecoratedDescriptor(_class8$1.prototype, "_type", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return FogType.LINEAR;
              }
            }), _descriptor9$1 = _applyDecoratedDescriptor(_class8$1.prototype, "_fogColor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Color('#C8C8C8');
              }
            }), _descriptor10$1 = _applyDecoratedDescriptor(_class8$1.prototype, "_enabled", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            }), _descriptor11$1 = _applyDecoratedDescriptor(_class8$1.prototype, "_fogDensity", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0.3;
              }
            }), _descriptor12$1 = _applyDecoratedDescriptor(_class8$1.prototype, "_fogStart", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0.5;
              }
            }), _descriptor13$1 = _applyDecoratedDescriptor(_class8$1.prototype, "_fogEnd", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 300;
              }
            }), _descriptor14$1 = _applyDecoratedDescriptor(_class8$1.prototype, "_fogAtten", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 5;
              }
            }), _descriptor15$1 = _applyDecoratedDescriptor(_class8$1.prototype, "_fogTop", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1.5;
              }
            }), _descriptor16$1 = _applyDecoratedDescriptor(_class8$1.prototype, "_fogRange", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1.2;
              }
            }), _applyDecoratedDescriptor(_class8$1.prototype, "enabled", [editable], Object.getOwnPropertyDescriptor(_class8$1.prototype, "enabled"), _class8$1.prototype), _applyDecoratedDescriptor(_class8$1.prototype, "fogColor", [editable], Object.getOwnPropertyDescriptor(_class8$1.prototype, "fogColor"), _class8$1.prototype), _applyDecoratedDescriptor(_class8$1.prototype, "type", [editable, _dec7$1], Object.getOwnPropertyDescriptor(_class8$1.prototype, "type"), _class8$1.prototype), _applyDecoratedDescriptor(_class8$1.prototype, "fogDensity", [_dec8$1, _dec9$1, _dec10$1, _dec11$1, slide, _dec12$1], Object.getOwnPropertyDescriptor(_class8$1.prototype, "fogDensity"), _class8$1.prototype), _applyDecoratedDescriptor(_class8$1.prototype, "fogStart", [_dec13$1, _dec14$1, _dec15$1, _dec16$1], Object.getOwnPropertyDescriptor(_class8$1.prototype, "fogStart"), _class8$1.prototype), _applyDecoratedDescriptor(_class8$1.prototype, "fogEnd", [_dec17$1, _dec18$1, _dec19$1, _dec20$1], Object.getOwnPropertyDescriptor(_class8$1.prototype, "fogEnd"), _class8$1.prototype), _applyDecoratedDescriptor(_class8$1.prototype, "fogAtten", [_dec21$1, _dec22$1, _dec23$1, _dec24$1, _dec25$1], Object.getOwnPropertyDescriptor(_class8$1.prototype, "fogAtten"), _class8$1.prototype), _applyDecoratedDescriptor(_class8$1.prototype, "fogTop", [_dec26$1, _dec27, _dec28, _dec29], Object.getOwnPropertyDescriptor(_class8$1.prototype, "fogTop"), _class8$1.prototype), _applyDecoratedDescriptor(_class8$1.prototype, "fogRange", [_dec30, _dec31, _dec32, _dec33], Object.getOwnPropertyDescriptor(_class8$1.prototype, "fogRange"), _class8$1.prototype)), _class8$1)) || _class7$1);
            let ShadowsInfo = (_dec34 = ccclass('cc.ShadowsInfo'), _dec35 = type(ShadowType), _dec36 = visible(), _dec37 = type(CCFloat), _dec38 = visible(), _dec39 = type(PCFType), _dec40 = visible(), _dec41 = type(CCInteger), _dec42 = visible(), _dec43 = type(CCFloat), _dec44 = visible(), _dec45 = type(CCBoolean), _dec46 = visible(), _dec47 = type(CCBoolean), _dec48 = visible(), _dec49 = type(CCBoolean), _dec50 = visible(), _dec51 = type(CCFloat), _dec52 = visible(), _dec53 = type(CCBoolean), _dec54 = visible(), _dec55 = type(CCFloat), _dec56 = visible(), _dec57 = type(CCFloat), _dec58 = visible(), _dec59 = type(CCFloat), _dec60 = visible(), _dec61 = visible(), _dec62 = type(CCFloat), _dec63 = visible(), _dec34(_class10$1 = (_class11$1 = (_temp4$1 = class ShadowsInfo {
              constructor() {
                _initializerDefineProperty(this, "_type", _descriptor17$1, this);

                _initializerDefineProperty(this, "_enabled", _descriptor18$1, this);

                _initializerDefineProperty(this, "_normal", _descriptor19$1, this);

                _initializerDefineProperty(this, "_distance", _descriptor20$1, this);

                _initializerDefineProperty(this, "_shadowColor", _descriptor21$1, this);

                _initializerDefineProperty(this, "_autoAdapt", _descriptor22$1, this);

                _initializerDefineProperty(this, "_pcf", _descriptor23$1, this);

                _initializerDefineProperty(this, "_bias", _descriptor24$1, this);

                _initializerDefineProperty(this, "_packing", _descriptor25$1, this);

                _initializerDefineProperty(this, "_linear", _descriptor26, this);

                _initializerDefineProperty(this, "_selfShadow", _descriptor27, this);

                _initializerDefineProperty(this, "_normalBias", _descriptor28, this);

                _initializerDefineProperty(this, "_near", _descriptor29, this);

                _initializerDefineProperty(this, "_far", _descriptor30, this);

                _initializerDefineProperty(this, "_aspect", _descriptor31, this);

                _initializerDefineProperty(this, "_orthoSize", _descriptor32, this);

                _initializerDefineProperty(this, "_maxReceived", _descriptor33, this);

                _initializerDefineProperty(this, "_size", _descriptor34, this);

                this._resource = null;
              }

              set enabled(val) {
                if (this._enabled === val) return;
                this._enabled = val;

                if (this._resource) {
                  this._resource.enabled = val;

                  if (val) {
                    this._resource.type = this._type;
                  }
                }
              }

              get enabled() {
                return this._enabled;
              }

              set type(val) {
                this._type = val;

                if (this._resource) {
                  this._resource.type = val;
                }
              }

              get type() {
                return this._type;
              }

              set shadowColor(val) {
                this._shadowColor.set(val);

                if (this._resource) {
                  this._resource.shadowColor = val;
                }
              }

              get shadowColor() {
                return this._shadowColor;
              }

              set normal(val) {
                Vec3.copy(this._normal, val);

                if (this._resource) {
                  this._resource.normal = val;
                }
              }

              get normal() {
                return this._normal;
              }

              set distance(val) {
                this._distance = val;

                if (this._resource) {
                  this._resource.distance = val;
                }
              }

              get distance() {
                return this._distance;
              }

              set pcf(val) {
                this._pcf = val;

                if (this._resource) {
                  this._resource.pcf = val;
                }
              }

              get pcf() {
                return this._pcf;
              }

              set maxReceived(val) {
                this._maxReceived = val;

                if (this._resource) {
                  this._resource.maxReceived = val;
                }
              }

              get maxReceived() {
                return this._maxReceived;
              }

              set bias(val) {
                this._bias = val;

                if (this._resource) {
                  this._resource.bias = val;
                }
              }

              get bias() {
                return this._bias;
              }

              set packing(val) {
                this._packing = val;

                if (val) {
                  this._linear = this._linear ? false : this._linear;

                  if (this._resource) {
                    this._resource.linear = this._linear;
                  }
                }

                if (this._resource) {
                  this._resource.packing = val;
                  this._resource.shadowMapDirty = true;
                }
              }

              get packing() {
                return this._packing;
              }

              set linear(val) {
                this._linear = val;

                if (val) {
                  this._packing = this._packing ? false : this._packing;

                  if (this._resource) {
                    this._resource.packing = this._packing;
                  }
                }

                if (this._resource) {
                  this._resource.linear = val;
                }
              }

              get linear() {
                return this._linear;
              }

              set selfShadow(val) {
                this._selfShadow = val;

                if (this._resource) {
                  this._resource.selfShadow = val;
                }
              }

              get selfShadow() {
                return this._selfShadow;
              }

              set normalBias(val) {
                this._normalBias = val;

                if (this._resource) {
                  this._resource.normalBias = val;
                }
              }

              get normalBias() {
                return this._normalBias;
              }

              set autoAdapt(val) {
                this._autoAdapt = val;

                if (this._resource) {
                  this._resource.autoAdapt = val;
                }
              }

              get autoAdapt() {
                return this._autoAdapt;
              }

              set near(val) {
                this._near = val;

                if (this._resource) {
                  this._resource.near = val;
                }
              }

              get near() {
                return this._near;
              }

              set far(val) {
                this._far = val;

                if (this._resource) {
                  this._resource.far = val;
                }
              }

              get far() {
                return this._far;
              }

              set orthoSize(val) {
                this._orthoSize = val;

                if (this._resource) {
                  this._resource.orthoSize = val;
                }
              }

              get orthoSize() {
                return this._orthoSize;
              }

              set shadowMapSize(val) {
                this._size.set(val);

                if (this._resource) {
                  this._resource.size = val;
                  this._resource.shadowMapDirty = true;
                }
              }

              get shadowMapSize() {
                return this._size;
              }

              set aspect(val) {
                this._aspect = val;

                if (this._resource) {
                  this._resource.aspect = val;
                }
              }

              get aspect() {
                return this._aspect;
              }

              setPlaneFromNode(node) {
                node.getWorldRotation(_qt$1);
                this.normal = Vec3.transformQuat(_v3$1, _up, _qt$1);
                node.getWorldPosition(_v3$1);
                this.distance = Vec3.dot(this._normal, _v3$1);
              }

              activate(resource) {
                this._resource = resource;

                this._resource.initialize(this);

                this._resource.activate();
              }

            }, _temp4$1), (_descriptor17$1 = _applyDecoratedDescriptor(_class11$1.prototype, "_type", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return ShadowType.Planar;
              }
            }), _descriptor18$1 = _applyDecoratedDescriptor(_class11$1.prototype, "_enabled", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            }), _descriptor19$1 = _applyDecoratedDescriptor(_class11$1.prototype, "_normal", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Vec3(0, 1, 0);
              }
            }), _descriptor20$1 = _applyDecoratedDescriptor(_class11$1.prototype, "_distance", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor21$1 = _applyDecoratedDescriptor(_class11$1.prototype, "_shadowColor", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Color(0, 0, 0, 76);
              }
            }), _descriptor22$1 = _applyDecoratedDescriptor(_class11$1.prototype, "_autoAdapt", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return true;
              }
            }), _descriptor23$1 = _applyDecoratedDescriptor(_class11$1.prototype, "_pcf", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return PCFType.HARD;
              }
            }), _descriptor24$1 = _applyDecoratedDescriptor(_class11$1.prototype, "_bias", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0.00001;
              }
            }), _descriptor25$1 = _applyDecoratedDescriptor(_class11$1.prototype, "_packing", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            }), _descriptor26 = _applyDecoratedDescriptor(_class11$1.prototype, "_linear", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return true;
              }
            }), _descriptor27 = _applyDecoratedDescriptor(_class11$1.prototype, "_selfShadow", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            }), _descriptor28 = _applyDecoratedDescriptor(_class11$1.prototype, "_normalBias", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0.0;
              }
            }), _descriptor29 = _applyDecoratedDescriptor(_class11$1.prototype, "_near", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1;
              }
            }), _descriptor30 = _applyDecoratedDescriptor(_class11$1.prototype, "_far", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 30;
              }
            }), _descriptor31 = _applyDecoratedDescriptor(_class11$1.prototype, "_aspect", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1;
              }
            }), _descriptor32 = _applyDecoratedDescriptor(_class11$1.prototype, "_orthoSize", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 5;
              }
            }), _descriptor33 = _applyDecoratedDescriptor(_class11$1.prototype, "_maxReceived", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 4;
              }
            }), _descriptor34 = _applyDecoratedDescriptor(_class11$1.prototype, "_size", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Vec2(512, 512);
              }
            }), _applyDecoratedDescriptor(_class11$1.prototype, "enabled", [editable], Object.getOwnPropertyDescriptor(_class11$1.prototype, "enabled"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "type", [editable, _dec35], Object.getOwnPropertyDescriptor(_class11$1.prototype, "type"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "shadowColor", [editable], Object.getOwnPropertyDescriptor(_class11$1.prototype, "shadowColor"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "normal", [_dec36], Object.getOwnPropertyDescriptor(_class11$1.prototype, "normal"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "distance", [_dec37, _dec38], Object.getOwnPropertyDescriptor(_class11$1.prototype, "distance"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "pcf", [_dec39, _dec40], Object.getOwnPropertyDescriptor(_class11$1.prototype, "pcf"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "maxReceived", [_dec41, _dec42], Object.getOwnPropertyDescriptor(_class11$1.prototype, "maxReceived"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "bias", [_dec43, _dec44], Object.getOwnPropertyDescriptor(_class11$1.prototype, "bias"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "packing", [_dec45, _dec46], Object.getOwnPropertyDescriptor(_class11$1.prototype, "packing"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "linear", [_dec47, _dec48], Object.getOwnPropertyDescriptor(_class11$1.prototype, "linear"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "selfShadow", [_dec49, _dec50], Object.getOwnPropertyDescriptor(_class11$1.prototype, "selfShadow"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "normalBias", [_dec51, _dec52], Object.getOwnPropertyDescriptor(_class11$1.prototype, "normalBias"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "autoAdapt", [_dec53, _dec54], Object.getOwnPropertyDescriptor(_class11$1.prototype, "autoAdapt"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "near", [_dec55, _dec56], Object.getOwnPropertyDescriptor(_class11$1.prototype, "near"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "far", [_dec57, _dec58], Object.getOwnPropertyDescriptor(_class11$1.prototype, "far"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "orthoSize", [_dec59, _dec60], Object.getOwnPropertyDescriptor(_class11$1.prototype, "orthoSize"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "shadowMapSize", [_dec61], Object.getOwnPropertyDescriptor(_class11$1.prototype, "shadowMapSize"), _class11$1.prototype), _applyDecoratedDescriptor(_class11$1.prototype, "aspect", [_dec62, _dec63], Object.getOwnPropertyDescriptor(_class11$1.prototype, "aspect"), _class11$1.prototype)), _class11$1)) || _class10$1);
            legacyCC.ShadowsInfo = ShadowsInfo;
            let SceneGlobals = (_dec64 = ccclass('cc.SceneGlobals'), _dec65 = type(SkyboxInfo), _dec64(_class13$1 = (_class14$1 = (_temp5$1 = class SceneGlobals {
              constructor() {
                _initializerDefineProperty(this, "ambient", _descriptor35, this);

                _initializerDefineProperty(this, "shadows", _descriptor36, this);

                _initializerDefineProperty(this, "_skybox", _descriptor37, this);

                _initializerDefineProperty(this, "fog", _descriptor38, this);
              }

              get skybox() {
                return this._skybox;
              }

              set skybox(value) {
                this._skybox = value;
              }

              activate() {
                const sceneData = legacyCC.director.root.pipeline.pipelineSceneData;
                this.ambient.activate(sceneData.ambient);
                this.skybox.activate(sceneData.skybox);
                this.shadows.activate(sceneData.shadows);
                this.fog.activate(sceneData.fog);
              }

            }, _temp5$1), (_descriptor35 = _applyDecoratedDescriptor(_class14$1.prototype, "ambient", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new AmbientInfo();
              }
            }), _descriptor36 = _applyDecoratedDescriptor(_class14$1.prototype, "shadows", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new ShadowsInfo();
              }
            }), _descriptor37 = _applyDecoratedDescriptor(_class14$1.prototype, "_skybox", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new SkyboxInfo();
              }
            }), _descriptor38 = _applyDecoratedDescriptor(_class14$1.prototype, "fog", [editable, serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new FogInfo();
              }
            }), _applyDecoratedDescriptor(_class14$1.prototype, "skybox", [editable, _dec65], Object.getOwnPropertyDescriptor(_class14$1.prototype, "skybox"), _class14$1.prototype)), _class14$1)) || _class13$1);
            legacyCC.SceneGlobals = SceneGlobals;

            var _dec$l, _class$l, _class2$j, _descriptor$g, _descriptor2$b, _temp$j;
            let Scene = exports('dA', (_dec$l = ccclass('cc.Scene'), _dec$l(_class$l = (_class2$j = (_temp$j = class Scene extends BaseNode {
              get renderScene() {
                return this._renderScene;
              }

              get globals() {
                return this._globals;
              }

              _updateScene() {
                this._scene = this;
              }

              constructor(name) {
                super(name);

                _initializerDefineProperty(this, "autoReleaseAssets", _descriptor$g, this);

                _initializerDefineProperty(this, "_globals", _descriptor2$b, this);

                this._renderScene = null;
                this.dependAssets = null;
                this._inited = void 0;
                this._prefabSyncedInLiveReload = false;
                this._pos = Vec3.ZERO;
                this._rot = Quat.IDENTITY;
                this._scale = Vec3.ONE;
                this._mat = Mat4.IDENTITY;
                this._dirtyFlags = 0;
                this._activeInHierarchy = false;

                if (legacyCC.director && legacyCC.director.root) {
                  this._renderScene = legacyCC.director.root.createScene({});
                }

                this._inited = legacyCC.game ? !legacyCC.game._isCloning : true;
              }

              destroy() {
                const success = CCObject.prototype.destroy.call(this);

                if (success) {
                  const children = this._children;

                  for (let i = 0; i < children.length; ++i) {
                    children[i].active = false;
                  }
                }

                legacyCC.director.root.destroyScene(this._renderScene);
                this._active = false;
                this._activeInHierarchy = false;
                return success;
              }

              addComponent() {
                throw new Error(getError(3822));
              }

              _onHierarchyChanged() {}

              _onBatchCreated(dontSyncChildPrefab) {
                super._onBatchCreated(dontSyncChildPrefab);

                const len = this._children.length;

                for (let i = 0; i < len; ++i) {
                  this.children[i]._siblingIndex = i;

                  this._children[i]._onBatchCreated(dontSyncChildPrefab);
                }

                applyTargetOverrides(this);
              }

              getPosition(out) {
                return Vec3.copy(out || new Vec3(), Vec3.ZERO);
              }

              getRotation(out) {
                return Quat.copy(out || new Quat(), Quat.IDENTITY);
              }

              getScale(out) {
                return Vec3.copy(out || new Vec3(), Vec3.ONE);
              }

              getWorldPosition(out) {
                return Vec3.copy(out || new Vec3(), Vec3.ZERO);
              }

              getWorldRotation(out) {
                return Quat.copy(out || new Quat(), Quat.IDENTITY);
              }

              getWorldScale(out) {
                return Vec3.copy(out || new Vec3(), Vec3.ONE);
              }

              getWorldMatrix(out) {
                return Mat4.copy(out || new Mat4(), Mat4.IDENTITY);
              }

              getWorldRS(out) {
                return Mat4.copy(out || new Mat4(), Mat4.IDENTITY);
              }

              getWorldRT(out) {
                return Mat4.copy(out || new Mat4(), Mat4.IDENTITY);
              }

              get position() {
                return Vec3.ZERO;
              }

              get worldPosition() {
                return Vec3.ZERO;
              }

              get rotation() {
                return Quat.IDENTITY;
              }

              get worldRotation() {
                return Quat.IDENTITY;
              }

              get scale() {
                return Vec3.ONE;
              }

              get worldScale() {
                return Vec3.ONE;
              }

              get eulerAngles() {
                return Vec3.ZERO;
              }

              get worldMatrix() {
                return Mat4.IDENTITY;
              }

              updateWorldTransform() {}

              _instantiate() {}

              _load() {
                if (!this._inited) {

                  this._onBatchCreated(EDITOR );

                  this._inited = true;
                }

                this.walk(BaseNode._setScene);
              }

              _activate(active) {
                active = active !== false;

                legacyCC.director._nodeActivator.activateNode(this, active);

                this._globals.activate();
              }

            }, _temp$j), (_applyDecoratedDescriptor(_class2$j.prototype, "globals", [editable], Object.getOwnPropertyDescriptor(_class2$j.prototype, "globals"), _class2$j.prototype), _descriptor$g = _applyDecoratedDescriptor(_class2$j.prototype, "autoReleaseAssets", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            }), _descriptor2$b = _applyDecoratedDescriptor(_class2$j.prototype, "_globals", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new SceneGlobals();
              }
            })), _class2$j)) || _class$l));
            legacyCC.Scene = Scene;

            function find(path, referenceNode) {
              if (!referenceNode) {
                const scene = legacyCC.director.getScene();

                if (!scene) {

                  return null;
                }

                referenceNode = scene;
              }

              return referenceNode.getChildByPath(path);
            }
            legacyCC.find = find;

            const fastRemoveAt$2 = array.fastRemoveAt;
            const IsStartCalled$1 = CCObject.Flags.IsStartCalled;
            const IsOnEnableCalled$1 = CCObject.Flags.IsOnEnableCalled;
            const IsEditorOnEnableCalled$1 = CCObject.Flags.IsEditorOnEnableCalled;

            function sortedIndex(array, comp) {
              const order = comp.constructor._executionOrder;
              const id = comp._id;
              let l = 0;

              for (let h = array.length - 1, m = h >>> 1; l <= h; m = l + h >>> 1) {
                const test = array[m];
                const testOrder = test.constructor._executionOrder;

                if (testOrder > order) {
                  h = m - 1;
                } else if (testOrder < order) {
                  l = m + 1;
                } else {
                  const testId = test._id;

                  if (testId > id) {
                    h = m - 1;
                  } else if (testId < id) {
                    l = m + 1;
                  } else {
                    return m;
                  }
                }
              }

              return ~l;
            }

            function stableRemoveInactive(iterator, flagToClear) {
              const array = iterator.array;
              let next = iterator.i + 1;

              while (next < array.length) {
                const comp = array[next];

                if (comp.node._activeInHierarchy) {
                  ++next;
                } else {
                  iterator.removeAt(next);

                  if (flagToClear) {
                    comp._objFlags &= ~flagToClear;
                  }
                }
              }
            }

            class LifeCycleInvoker {
              constructor(invokeFunc) {
                this._zero = void 0;
                this._neg = void 0;
                this._pos = void 0;
                this._invoke = void 0;
                const Iterator = MutableForwardIterator;
                this._zero = new Iterator([]);
                this._neg = new Iterator([]);
                this._pos = new Iterator([]);

                this._invoke = invokeFunc;
              }

            }
            LifeCycleInvoker.stableRemoveInactive = stableRemoveInactive;

            function compareOrder(a, b) {
              return a.constructor._executionOrder - b.constructor._executionOrder;
            }

            class OneOffInvoker extends LifeCycleInvoker {
              add(comp) {
                const order = comp.constructor._executionOrder;
                (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).array.push(comp);
              }

              remove(comp) {
                const order = comp.constructor._executionOrder;
                (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).fastRemove(comp);
              }

              cancelInactive(flagToClear) {
                stableRemoveInactive(this._zero, flagToClear);
                stableRemoveInactive(this._neg, flagToClear);
                stableRemoveInactive(this._pos, flagToClear);
              }

              invoke() {
                const compsNeg = this._neg;

                if (compsNeg.array.length > 0) {
                  compsNeg.array.sort(compareOrder);

                  this._invoke(compsNeg);

                  compsNeg.array.length = 0;
                }

                this._invoke(this._zero);

                this._zero.array.length = 0;
                const compsPos = this._pos;

                if (compsPos.array.length > 0) {
                  compsPos.array.sort(compareOrder);

                  this._invoke(compsPos);

                  compsPos.array.length = 0;
                }
              }

            }

            class ReusableInvoker extends LifeCycleInvoker {
              add(comp) {
                const order = comp.constructor._executionOrder;

                if (order === 0) {
                  this._zero.array.push(comp);
                } else {
                  const array = order < 0 ? this._neg.array : this._pos.array;
                  const i = sortedIndex(array, comp);

                  if (i < 0) {
                    array.splice(~i, 0, comp);
                  }
                }
              }

              remove(comp) {
                const order = comp.constructor._executionOrder;

                if (order === 0) {
                  this._zero.fastRemove(comp);
                } else {
                  const iterator = order < 0 ? this._neg : this._pos;
                  const i = sortedIndex(iterator.array, comp);

                  if (i >= 0) {
                    iterator.removeAt(i);
                  }
                }
              }

              invoke(dt) {
                if (this._neg.array.length > 0) {
                  this._invoke(this._neg, dt);
                }

                this._invoke(this._zero, dt);

                if (this._pos.array.length > 0) {
                  this._invoke(this._pos, dt);
                }
              }

            }

            function createInvokeImplJit(code, useDt, ensureFlag) {
              const body = `${'var a=it.array;' + 'for(it.i=0;it.i<a.length;++it.i){' + 'var c=a[it.i];'}${code}}`;
              const fastPath = useDt ? Function('it', 'dt', body) : Function('it', body);
              const singleInvoke = Function('c', 'dt', code);
              return createInvokeImpl(singleInvoke, fastPath, ensureFlag);
            }
            function createInvokeImpl(singleInvoke, fastPath, ensureFlag) {
              return (iterator, dt) => {
                try {
                  fastPath(iterator, dt);
                } catch (e) {
                  legacyCC._throw(e);

                  const array = iterator.array;

                  if (ensureFlag) {
                    array[iterator.i]._objFlags |= ensureFlag;
                  }

                  ++iterator.i;

                  for (; iterator.i < array.length; ++iterator.i) {
                    try {
                      singleInvoke(array[iterator.i], dt);
                    } catch (e) {
                      legacyCC._throw(e);

                      if (ensureFlag) {
                        array[iterator.i]._objFlags |= ensureFlag;
                      }
                    }
                  }
                }
              };
            }
            const invokeStart =  createInvokeImplJit(`c.start();c._objFlags|=${IsStartCalled$1}`, false, IsStartCalled$1) ;
            const invokeUpdate =  createInvokeImplJit('c.update(dt)', true) ;
            const invokeLateUpdate =  createInvokeImplJit('c.lateUpdate(dt)', true) ;
            const invokeOnEnable =  iterator => {
              const compScheduler = legacyCC.director._compScheduler;
              const array = iterator.array;

              for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
                const comp = array[iterator.i];

                if (comp._enabled) {
                  comp.onEnable();
                  const deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

                  if (!deactivatedDuringOnEnable) {
                    compScheduler._onEnabled(comp);
                  }
                }
              }
            };
            class ComponentScheduler {
              constructor() {
                this._deferredComps = [];
                this.unscheduleAll();
              }

              unscheduleAll() {
                this.startInvoker = new OneOffInvoker(invokeStart);
                this.updateInvoker = new ReusableInvoker(invokeUpdate);
                this.lateUpdateInvoker = new ReusableInvoker(invokeLateUpdate);
                this._updating = false;
              }

              _onEnabled(comp) {
                legacyCC.director.getScheduler().resumeTarget(comp);
                comp._objFlags |= IsOnEnableCalled$1;

                if (this._updating) {
                  this._deferredComps.push(comp);
                } else {
                  this._scheduleImmediate(comp);
                }
              }

              _onDisabled(comp) {
                legacyCC.director.getScheduler().pauseTarget(comp);
                comp._objFlags &= ~IsOnEnableCalled$1;

                const index = this._deferredComps.indexOf(comp);

                if (index >= 0) {
                  fastRemoveAt$2(this._deferredComps, index);
                  return;
                }

                if (comp.start && !(comp._objFlags & IsStartCalled$1)) {
                  this.startInvoker.remove(comp);
                }

                if (comp.update) {
                  this.updateInvoker.remove(comp);
                }

                if (comp.lateUpdate) {
                  this.lateUpdateInvoker.remove(comp);
                }
              }

              enableComp(comp, invoker) {
                if (!(comp._objFlags & IsOnEnableCalled$1)) {
                  if (comp.onEnable) {
                    if (invoker) {
                      invoker.add(comp);
                      return;
                    } else {
                      comp.onEnable();
                      const deactivatedDuringOnEnable = !comp.node._activeInHierarchy;

                      if (deactivatedDuringOnEnable) {
                        return;
                      }
                    }
                  }

                  this._onEnabled(comp);
                }
              }

              disableComp(comp) {
                if (comp._objFlags & IsOnEnableCalled$1) {
                  if (comp.onDisable) {
                    comp.onDisable();
                  }

                  this._onDisabled(comp);
                }
              }

              startPhase() {
                this._updating = true;
                this.startInvoker.invoke();

                this._startForNewComps();
              }

              updatePhase(dt) {
                this.updateInvoker.invoke(dt);
              }

              lateUpdatePhase(dt) {
                this.lateUpdateInvoker.invoke(dt);
                this._updating = false;

                this._startForNewComps();
              }

              _startForNewComps() {
                if (this._deferredComps.length > 0) {
                  this._deferredSchedule();

                  this.startInvoker.invoke();
                }
              }

              _scheduleImmediate(comp) {
                if (typeof comp.start === 'function' && !(comp._objFlags & IsStartCalled$1)) {
                  this.startInvoker.add(comp);
                }

                if (typeof comp.update === 'function') {
                  this.updateInvoker.add(comp);
                }

                if (typeof comp.lateUpdate === 'function') {
                  this.lateUpdateInvoker.add(comp);
                }
              }

              _deferredSchedule() {
                const comps = this._deferredComps;

                for (let i = 0, len = comps.length; i < len; i++) {
                  this._scheduleImmediate(comps[i]);
                }

                comps.length = 0;
              }

            }

            const MAX_POOL_SIZE$1 = 4;
            const IsPreloadStarted$1 = CCObject.Flags.IsPreloadStarted;
            const IsOnLoadStarted$1 = CCObject.Flags.IsOnLoadStarted;
            const IsOnLoadCalled$2 = CCObject.Flags.IsOnLoadCalled;
            const Deactivating$2 = CCObject.Flags.Deactivating;

            class UnsortedInvoker extends LifeCycleInvoker {
              add(comp) {
                this._zero.array.push(comp);
              }

              remove(comp) {
                this._zero.fastRemove(comp);
              }

              cancelInactive(flagToClear) {
                LifeCycleInvoker.stableRemoveInactive(this._zero, flagToClear);
              }

              invoke() {
                this._invoke(this._zero);

                this._zero.array.length = 0;
              }

            }

            const invokePreload =  createInvokeImplJit('c.__preload();') ;
            const invokeOnLoad =  createInvokeImplJit(`c.onLoad();c._objFlags|=${IsOnLoadCalled$2}`, false, IsOnLoadCalled$2) ;
            const activateTasksPool = new Pool(MAX_POOL_SIZE$1);

            activateTasksPool.get = function getActivateTask() {
              const task = this._get() || {
                preload: new UnsortedInvoker(invokePreload),
                onLoad: new OneOffInvoker(invokeOnLoad),
                onEnable: new OneOffInvoker(invokeOnEnable)
              };
              task.preload._zero.i = -1;
              let invoker = task.onLoad;
              invoker._zero.i = -1;
              invoker._neg.i = -1;
              invoker._pos.i = -1;
              invoker = task.onEnable;
              invoker._zero.i = -1;
              invoker._neg.i = -1;
              invoker._pos.i = -1;
              return task;
            };

            function _componentCorrupted(node, comp, index) {

              if (comp) {
                node._removeComponent(comp);
              } else {
                array.removeAt(node._components, index);
              }
            }

            class NodeActivator {
              constructor() {
                this.resetComp = void 0;
                this.reset();
              }

              reset() {
                this._activatingStack = [];
              }

              activateNode(node, active) {
                if (active) {
                  const task = activateTasksPool.get();

                  this._activatingStack.push(task);

                  this._activateNodeRecursively(node, task.preload, task.onLoad, task.onEnable);

                  task.preload.invoke();
                  task.onLoad.invoke();
                  task.onEnable.invoke();

                  this._activatingStack.pop();

                  activateTasksPool.put(task);
                } else {
                  this._deactivateNodeRecursively(node);

                  const stack = this._activatingStack;

                  for (const lastTask of stack) {
                    lastTask.preload.cancelInactive(IsPreloadStarted$1);
                    lastTask.onLoad.cancelInactive(IsOnLoadStarted$1);
                    lastTask.onEnable.cancelInactive();
                  }
                }

                node.emit('active-in-hierarchy-changed', node);
              }

              activateComp(comp, preloadInvoker, onLoadInvoker, onEnableInvoker) {
                if (!isValid(comp, true)) {
                  return;
                }

                if (!(comp._objFlags & IsPreloadStarted$1)) {
                  comp._objFlags |= IsPreloadStarted$1;

                  if (comp.__preload) {
                    if (preloadInvoker) {
                      preloadInvoker.add(comp);
                    } else {
                      comp.__preload();
                    }
                  }
                }

                if (!(comp._objFlags & IsOnLoadStarted$1)) {
                  comp._objFlags |= IsOnLoadStarted$1;

                  if (comp.onLoad) {
                    if (onLoadInvoker) {
                      onLoadInvoker.add(comp);
                    } else {
                      comp.onLoad();
                      comp._objFlags |= IsOnLoadCalled$2;
                    }
                  } else {
                    comp._objFlags |= IsOnLoadCalled$2;
                  }
                }

                if (comp._enabled) {
                  const deactivatedOnLoading = !comp.node._activeInHierarchy;

                  if (deactivatedOnLoading) {
                    return;
                  }

                  legacyCC.director._compScheduler.enableComp(comp, onEnableInvoker);
                }
              }

              destroyComp(comp) {
                legacyCC.director._compScheduler.disableComp(comp);

                if (comp.onDestroy && comp._objFlags & IsOnLoadCalled$2) {
                  comp.onDestroy();
                }
              }

              _activateNodeRecursively(node, preloadInvoker, onLoadInvoker, onEnableInvoker) {
                if (node._objFlags & Deactivating$2) {
                  errorID(3816, node.name);
                  return;
                }

                node._activeInHierarchy = true;
                let originCount = node._components.length;

                for (let i = 0; i < originCount; ++i) {
                  const component = node._components[i];

                  if (component instanceof legacyCC.Component) {
                    this.activateComp(component, preloadInvoker, onLoadInvoker, onEnableInvoker);
                  } else {
                    _componentCorrupted(node, component, i);

                    --i;
                    --originCount;
                  }
                }

                node._childArrivalOrder = node._children.length;

                for (let i = 0, len = node._children.length; i < len; ++i) {
                  const child = node._children[i];

                  if (child._active) {
                    this._activateNodeRecursively(child, preloadInvoker, onLoadInvoker, onEnableInvoker);
                  }
                }

                node._onPostActivated(true);
              }

              _deactivateNodeRecursively(node) {

                node._objFlags |= Deactivating$2;
                node._activeInHierarchy = false;
                const originCount = node._components.length;

                for (let c = 0; c < originCount; ++c) {
                  const component = node._components[c];

                  if (component._enabled) {
                    legacyCC.director._compScheduler.disableComp(component);

                    if (node._activeInHierarchy) {
                      node._objFlags &= ~Deactivating$2;
                      return;
                    }
                  }
                }

                for (let i = 0, len = node._children.length; i < len; ++i) {
                  const child = node._children[i];

                  if (child._activeInHierarchy) {
                    this._deactivateNodeRecursively(child);

                    if (node._activeInHierarchy) {
                      node._objFlags &= ~Deactivating$2;
                      return;
                    }
                  }
                }

                node._onPostActivated(false);

                node._objFlags &= ~Deactivating$2;
              }

            } exports('fE', NodeActivator);

            var _dec$m, _class$m, _class2$k, _descriptor$h, _temp$k;
            let SceneAsset = exports('eZ', (_dec$m = ccclass('cc.SceneAsset'), _dec$m(_class$m = (_class2$k = (_temp$k = class SceneAsset extends Asset {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "scene", _descriptor$h, this);
              }

              initDefault(uuid) {
                super.initDefault(uuid);
                this.scene = new Scene('New Scene');
              }

              validate() {
                return !!this.scene;
              }

            }, _temp$k), (_descriptor$h = _applyDecoratedDescriptor(_class2$k.prototype, "scene", [editable, serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class2$k)) || _class$m));
            legacyCC.SceneAsset = SceneAsset;

            var _dec$n, _class$n, _class2$l, _descriptor$i, _temp$l;
            let TextAsset = exports('el', (_dec$n = ccclass('cc.TextAsset'), _dec$n(_class$n = (_class2$l = (_temp$l = class TextAsset extends Asset {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "text", _descriptor$i, this);
              }

              toString() {
                return this.text;
              }

            }, _temp$l), (_descriptor$i = _applyDecoratedDescriptor(_class2$l.prototype, "text", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            })), _class2$l)) || _class$n));
            legacyCC.TextAsset = TextAsset;

            var _dec$o, _class$o, _class2$m, _descriptor$j, _temp$m;
            let JsonAsset = exports('e_', (_dec$o = ccclass('cc.JsonAsset'), _dec$o(_class$o = (_class2$m = (_temp$m = class JsonAsset extends Asset {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "json", _descriptor$j, this);
              }

            }, _temp$m), (_descriptor$j = _applyDecoratedDescriptor(_class2$m.prototype, "json", [serializable, editable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class2$m)) || _class$o));
            legacyCC.JsonAsset = JsonAsset;

            class Director extends EventTarget {
              constructor() {
                super();
                this._compScheduler = void 0;
                this._nodeActivator = void 0;
                this._invalid = void 0;
                this._paused = void 0;
                this._purgeDirectorInNextLoop = void 0;
                this._root = void 0;
                this._loadingScene = void 0;
                this._scene = void 0;
                this._totalFrames = void 0;
                this._lastUpdate = void 0;
                this._deltaTime = void 0;
                this._startTime = void 0;
                this._scheduler = void 0;
                this._systems = void 0;
                this._invalid = false;
                this._paused = false;
                this._purgeDirectorInNextLoop = false;
                this._root = null;
                this._loadingScene = '';
                this._scene = null;
                this._totalFrames = 0;
                this._lastUpdate = 0;
                this._deltaTime = 0.0;
                this._startTime = 0.0;
                this._scheduler = new Scheduler();
                this._compScheduler = new ComponentScheduler();
                this._nodeActivator = new NodeActivator();
                this._systems = [];
                legacyCC.game.once(Game.EVENT_RENDERER_INITED, this._initOnRendererInitialized, this);
              }

              calculateDeltaTime(now) {
                if (!now) now = performance.now();
                this._deltaTime = now > this._lastUpdate ? (now - this._lastUpdate) / 1000 : 0;

                if ( this._deltaTime > 1) {
                  this._deltaTime = 1 / 60.0;
                }

                this._lastUpdate = now;
              }

              convertToGL(uiPoint) {
                const container = legacyCC.game.container;
                const view = legacyCC.view;
                const box = container.getBoundingClientRect();
                const left = box.left + window.pageXOffset - container.clientLeft;
                const top = box.top + window.pageYOffset - container.clientTop;
                const x = view._devicePixelRatio * (uiPoint.x - left);
                const y = view._devicePixelRatio * (top + box.height - uiPoint.y);
                return view._isRotated ? v2(view._viewportRect.width - y, x) : v2(x, y);
              }

              convertToUI(glPoint) {
                const container = legacyCC.game.container;
                const view = legacyCC.view;
                const box = container.getBoundingClientRect();
                const left = box.left + window.pageXOffset - container.clientLeft;
                const top = box.top + window.pageYOffset - container.clientTop;
                const uiPoint = v2(0, 0);

                if (view._isRotated) {
                  uiPoint.x = left + glPoint.y / view._devicePixelRatio;
                  uiPoint.y = top + box.height - (view._viewportRect.width - glPoint.x) / view._devicePixelRatio;
                } else {
                  uiPoint.x = left + glPoint.x * view._devicePixelRatio;
                  uiPoint.y = top + box.height - glPoint.y * view._devicePixelRatio;
                }

                return uiPoint;
              }

              end() {
                this._purgeDirectorInNextLoop = true;
              }

              getWinSize() {
                return size(legacyCC.winSize);
              }

              getWinSizeInPixels() {
                return size(legacyCC.winSize);
              }

              pause() {
                if (this._paused) {
                  return;
                }

                this._paused = true;
              }

              purgeCachedData() {
                legacyCC.assetManager.releaseAll();
              }

              purgeDirector() {
                this._scheduler.unscheduleAll();

                this._compScheduler.unscheduleAll();

                this._nodeActivator.reset();

                if (eventManager) {
                  eventManager.setEnabled(false);
                }

                {
                  if (legacyCC.isValid(this._scene)) {
                    this._scene.destroy();
                  }

                  this._scene = null;
                }

                this.stopAnimation();
                legacyCC.assetManager.releaseAll();
              }

              reset() {
                this.purgeDirector();
                this.emit(Director.EVENT_RESET);

                if (eventManager) {
                  eventManager.setEnabled(true);
                }

                this.startAnimation();
              }

              runSceneImmediate(scene, onBeforeLoadScene, onLaunched) {
                if (scene instanceof SceneAsset) scene = scene.scene;
                assertID(scene instanceof Scene, 1216);

                {
                  console.time('InitScene');
                }

                scene._load();

                {
                  console.timeEnd('InitScene');
                }

                {
                  console.time('AttachPersist');
                }

                const persistNodeList = Object.keys(legacyCC.game._persistRootNodes).map(x => legacyCC.game._persistRootNodes[x]);

                for (let i = 0; i < persistNodeList.length; i++) {
                  const node = persistNodeList[i];
                  node.emit(legacyCC.Node.SCENE_CHANGED_FOR_PERSISTS, scene.renderScene);
                  const existNode = scene.uuid === node._originalSceneId && scene.getChildByUuid(node.uuid);

                  if (existNode) {
                    const index = existNode.getSiblingIndex();

                    existNode._destroyImmediate();

                    scene.insertChild(node, index);
                  } else {
                    node.parent = scene;
                  }
                }

                {
                  console.timeEnd('AttachPersist');
                }

                const oldScene = this._scene;

                {
                  console.time('Destroy');
                }

                if (legacyCC.isValid(oldScene)) {
                  oldScene.destroy();
                }

                {
                  {
                    console.time('AutoRelease');
                  }

                  legacyCC.assetManager._releaseManager._autoRelease(oldScene, scene, legacyCC.game._persistRootNodes);

                  {
                    console.timeEnd('AutoRelease');
                  }
                }

                this._scene = null;

                CCObject._deferredDestroy();

                {
                  console.timeEnd('Destroy');
                }

                if (onBeforeLoadScene) {
                  onBeforeLoadScene();
                }

                this.emit(legacyCC.Director.EVENT_BEFORE_SCENE_LAUNCH, scene);
                this._scene = scene;

                {
                  console.time('Activate');
                }

                scene._activate();

                {
                  console.timeEnd('Activate');
                }

                if (this._root) {
                  this._root.resetCumulativeTime();
                }

                this.startAnimation();

                if (onLaunched) {
                  onLaunched(null, scene);
                }

                this.emit(legacyCC.Director.EVENT_AFTER_SCENE_LAUNCH, scene);
              }

              runScene(scene, onBeforeLoadScene, onLaunched) {
                if (scene instanceof SceneAsset) scene = scene.scene;
                assertID(scene, 1205);
                assertID(scene instanceof Scene, 1216);

                scene._load();

                this.once(legacyCC.Director.EVENT_AFTER_DRAW, () => {
                  this.runSceneImmediate(scene, onBeforeLoadScene, onLaunched);
                });
              }

              loadScene(sceneName, onLaunched, onUnloaded) {
                if (this._loadingScene) {
                  warnID(1208, sceneName, this._loadingScene);
                  return false;
                }

                const bundle = legacyCC.assetManager.bundles.find(bundle => !!bundle.getSceneInfo(sceneName));

                if (bundle) {
                  this.emit(legacyCC.Director.EVENT_BEFORE_SCENE_LOADING, sceneName);
                  this._loadingScene = sceneName;
                  console.time(`LoadScene ${sceneName}`);
                  bundle.loadScene(sceneName, (err, scene) => {
                    console.timeEnd(`LoadScene ${sceneName}`);
                    this._loadingScene = '';

                    if (err) {
                      error(err);

                      if (onLaunched) {
                        onLaunched(err);
                      }
                    } else {
                      this.runSceneImmediate(scene, onUnloaded, onLaunched);
                    }
                  });
                  return true;
                } else {
                  errorID(1209, sceneName);
                  return false;
                }
              }

              preloadScene(sceneName, onProgress, onLoaded) {
                const bundle = legacyCC.assetManager.bundles.find(bundle => !!bundle.getSceneInfo(sceneName));

                if (bundle) {
                  bundle.preloadScene(sceneName, null, onProgress, onLoaded);
                } else {
                  const err = `Can not preload the scene "${sceneName}" because it is not in the build settings.`;

                  if (onLoaded) {
                    onLoaded(new Error(err));
                  }

                  error(`preloadScene: ${err}`);
                }
              }

              resume() {
                if (!this._paused) {
                  return;
                }

                this._lastUpdate = performance.now();

                if (!this._lastUpdate) {
                  logID(1200);
                }

                this._paused = false;
                this._deltaTime = 0;
              }

              setDepthTest(value) {
                if (!legacyCC.Camera.main) {
                  return;
                }

                legacyCC.Camera.main.depth = !!value;
              }

              setClearColor(clearColor) {
                if (!legacyCC.Camera.main) {
                  return;
                }

                legacyCC.Camera.main.backgroundColor = clearColor;
              }

              get root() {
                return this._root;
              }

              getRunningScene() {
                return this._scene;
              }

              getScene() {
                return this._scene;
              }

              getAnimationInterval() {
                return 1000 / legacyCC.game.getFrameRate();
              }

              setAnimationInterval(value) {
                legacyCC.game.setFrameRate(Math.round(1000 / value));
              }

              getDeltaTime() {
                return this._deltaTime;
              }

              getTotalTime() {
                return performance.now() - this._startTime;
              }

              getCurrentTime() {
                return this._lastUpdate;
              }

              getTotalFrames() {
                return this._totalFrames;
              }

              isPaused() {
                return this._paused;
              }

              getScheduler() {
                return this._scheduler;
              }

              setScheduler(scheduler) {
                if (this._scheduler !== scheduler) {
                  this.unregisterSystem(this._scheduler);
                  this._scheduler = scheduler;
                  this.registerSystem(Scheduler.ID, scheduler, 200);
                }
              }

              registerSystem(name, sys, priority) {
                sys.id = name;
                sys.priority = priority;
                sys.init();

                this._systems.push(sys);

                this._systems.sort(System$1.sortByPriority);
              }

              unregisterSystem(sys) {
                array.fastRemove(this._systems, sys);

                this._systems.sort(System$1.sortByPriority);
              }

              getSystem(name) {
                return this._systems.find(sys => sys.id === name);
              }

              getAnimationManager() {
                return this.getSystem(legacyCC.AnimationManager.ID);
              }

              startAnimation() {
                this._invalid = false;
                this._lastUpdate = performance.now();
              }

              stopAnimation() {
                this._invalid = true;
              }

              mainLoop(time) {
                if (this._purgeDirectorInNextLoop) {
                  this._purgeDirectorInNextLoop = false;
                  this.purgeDirector();
                } else if (!this._invalid) {
                  {
                    this.calculateDeltaTime(time);
                  }

                  this.emit(Director.EVENT_BEGIN_FRAME);
                  const dt = this._deltaTime;

                  if (!this._paused) {
                    this.emit(Director.EVENT_BEFORE_UPDATE);

                    this._compScheduler.startPhase();

                    this._compScheduler.updatePhase(dt);

                    for (let i = 0; i < this._systems.length; ++i) {
                      this._systems[i].update(dt);
                    }

                    this._compScheduler.lateUpdatePhase(dt);

                    this.emit(Director.EVENT_AFTER_UPDATE);

                    CCObject._deferredDestroy();

                    for (let i = 0; i < this._systems.length; ++i) {
                      this._systems[i].postUpdate(dt);
                    }
                  }

                  this.emit(Director.EVENT_BEFORE_DRAW);

                  this._root.frameMove(this._deltaTime);

                  this.emit(Director.EVENT_AFTER_DRAW);
                  eventManager.frameUpdateListeners();
                  Node$1.clearBooks();
                  this.emit(Director.EVENT_END_FRAME);
                  this._totalFrames++;
                }
              }

              _initOnRendererInitialized() {
                this._totalFrames = 0;
                this._lastUpdate = performance.now();
                this._startTime = this._lastUpdate;
                this._paused = false;
                this._purgeDirectorInNextLoop = false;

                if (eventManager) {
                  eventManager.setEnabled(true);
                }

                this.registerSystem(Scheduler.ID, this._scheduler, 200);
                this.emit(Director.EVENT_INIT);
              }

              _init() {
                this._root = new Root(legacyCC.game._gfxDevice);
                const rootInfo = {};
                return this._root.initialize(rootInfo).catch(error => {
                  errorID(1217);
                  return Promise.reject(error);
                });
              }

            } exports('cN', Director);
            Director.EVENT_INIT = 'director_init';
            Director.EVENT_RESET = 'director_reset';
            Director.EVENT_BEFORE_SCENE_LOADING = 'director_before_scene_loading';
            Director.EVENT_BEFORE_SCENE_LAUNCH = 'director_before_scene_launch';
            Director.EVENT_AFTER_SCENE_LAUNCH = 'director_after_scene_launch';
            Director.EVENT_BEFORE_UPDATE = 'director_before_update';
            Director.EVENT_AFTER_UPDATE = 'director_after_update';
            Director.EVENT_BEFORE_DRAW = 'director_before_draw';
            Director.EVENT_AFTER_DRAW = 'director_after_draw';
            Director.EVENT_BEFORE_COMMIT = 'director_before_commit';
            Director.EVENT_BEFORE_PHYSICS = 'director_before_physics';
            Director.EVENT_AFTER_PHYSICS = 'director_after_physics';
            Director.EVENT_BEGIN_FRAME = 'director_begin_frame';
            Director.EVENT_END_FRAME = 'director_end_frame';
            Director.instance = void 0;
            legacyCC.Director = Director;
            const director = exports('cM', Director.instance = legacyCC.director = new Director());

            const isMatchByWord = (path, test) => {
              if (path.length > test.length) {
                const nextAscii = path.charCodeAt(test.length);
                return nextAscii === 47;
              }

              return true;
            };

            const processOptions = options => {

              let uuids = options.uuids;
              const paths = options.paths;
              const types = options.types;
              const bundles = options.deps;
              const realEntries = options.paths = Object.create(null);

              if (options.debug === false) {
                for (let i = 0, l = uuids.length; i < l; i++) {
                  uuids[i] = decodeUuid(uuids[i]);
                }

                for (const id in paths) {
                  const entry = paths[id];
                  const type = entry[1];
                  entry[1] = types[type];
                }
              } else {
                const out = Object.create(null);

                for (let i = 0, l = uuids.length; i < l; i++) {
                  const uuid = uuids[i];
                  uuids[i] = out[uuid] = decodeUuid(uuid);
                }

                uuids = out;
              }

              for (const id in paths) {
                const entry = paths[id];
                realEntries[uuids[id]] = entry;
              }

              const scenes = options.scenes;

              for (const name in scenes) {
                const uuid = scenes[name];
                scenes[name] = uuids[uuid];
              }

              const packs = options.packs;

              for (const packId in packs) {
                const packedIds = packs[packId];

                for (let j = 0; j < packedIds.length; ++j) {
                  packedIds[j] = uuids[packedIds[j]];
                }
              }

              const versions = options.versions;

              if (versions) {
                for (const folder in versions) {
                  const entries = versions[folder];

                  for (let i = 0; i < entries.length; i += 2) {
                    const uuid = entries[i];
                    entries[i] = uuids[uuid] || uuid;
                  }
                }
              }

              const redirect = options.redirect;

              if (redirect) {
                for (let i = 0; i < redirect.length; i += 2) {
                  redirect[i] = uuids[redirect[i]];
                  redirect[i + 1] = bundles[redirect[i + 1]];
                }
              }
            };

            class Config {
              constructor() {
                this.name = '';
                this.base = '';
                this.importBase = '';
                this.nativeBase = '';
                this.deps = null;
                this.assetInfos = new Cache();
                this.scenes = new Cache();
                this.paths = new Cache();
              }

              init(options) {
                processOptions(options);
                this.importBase = options.importBase || '';
                this.nativeBase = options.nativeBase || '';
                this.base = options.base || '';
                this.name = options.name || '';
                this.deps = options.deps || [];

                this._initUuid(options.uuids);

                this._initPath(options.paths);

                this._initScene(options.scenes);

                this._initPackage(options.packs);

                this._initVersion(options.versions);

                this._initRedirect(options.redirect);
              }

              getInfoWithPath(path, type) {
                if (!path) {
                  return null;
                }

                path = normalize(path);
                const items = this.paths.get(path);

                if (items) {
                  if (type) {
                    for (let i = 0, l = items.length; i < l; i++) {
                      const assetInfo = items[i];

                      if (js.isChildClassOf(assetInfo.ctor, type)) {
                        return assetInfo;
                      }
                    }
                  } else {
                    return items[0];
                  }
                }

                return null;
              }

              getDirWithPath(path, type, out) {
                path = normalize(path);

                if (path[path.length - 1] === '/') {
                  path = path.slice(0, -1);
                }

                const infos = out || [];
                this.paths.forEach((items, p) => {
                  if (p.startsWith(path) && isMatchByWord(p, path) || !path) {
                    for (let i = 0, l = items.length; i < l; i++) {
                      const entry = items[i];

                      if (!type || js.isChildClassOf(entry.ctor, type)) {
                        infos.push(entry);
                      }
                    }
                  }
                });
                return infos;
              }

              getAssetInfo(uuid) {
                return this.assetInfos.get(uuid) || null;
              }

              getSceneInfo(name) {
                if (!name.endsWith('.scene')) {
                  name += '.scene';
                }

                if (name[0] !== '/' && !name.startsWith('db://')) {
                  name = `/${name}`;
                }

                const info = this.scenes.find((val, key) => key.endsWith(name));
                return info;
              }

              destroy() {
                this.paths.destroy();
                this.scenes.destroy();
                this.assetInfos.destroy();
              }

              _initUuid(uuidList) {
                if (!uuidList) {
                  return;
                }

                this.assetInfos.clear();

                for (let i = 0, l = uuidList.length; i < l; i++) {
                  const uuid = uuidList[i];
                  this.assetInfos.add(uuid, {
                    uuid
                  });
                }
              }

              _initPath(pathList) {
                if (!pathList) {
                  return;
                }

                const paths = this.paths;
                paths.clear();

                for (const uuid in pathList) {
                  const info = pathList[uuid];
                  const path = info[0];
                  const type = info[1];
                  const isSubAsset = info.length === 3;
                  const assetInfo = this.assetInfos.get(uuid);
                  assetInfo.path = path;
                  assetInfo.ctor = js._getClassById(type);

                  if (paths.has(path)) {
                    if (isSubAsset) {
                      paths.get(path).push(assetInfo);
                    } else {
                      paths.get(path).splice(0, 0, assetInfo);
                    }
                  } else {
                    paths.add(path, [assetInfo]);
                  }
                }
              }

              _initScene(sceneList) {
                if (!sceneList) {
                  return;
                }

                const scenes = this.scenes;
                scenes.clear();
                const assetInfos = this.assetInfos;

                for (const sceneName in sceneList) {
                  const uuid = sceneList[sceneName];
                  const assetInfo = assetInfos.get(uuid);
                  assetInfo.url = sceneName;
                  scenes.add(sceneName, assetInfo);
                }
              }

              _initPackage(packageList) {
                if (!packageList) {
                  return;
                }

                const assetInfos = this.assetInfos;

                for (const packUuid in packageList) {
                  const uuids = packageList[packUuid];
                  const pack = {
                    uuid: packUuid,
                    packedUuids: uuids,
                    ext: '.json'
                  };
                  assetInfos.add(packUuid, pack);

                  for (let i = 0, l = uuids.length; i < l; i++) {
                    const uuid = uuids[i];
                    const assetInfo = assetInfos.get(uuid);
                    const assetPacks = assetInfo.packs;

                    if (assetPacks) {
                      if (l === 1) {
                        assetPacks.splice(0, 0, pack);
                      } else {
                        assetPacks.push(pack);
                      }
                    } else {
                      assetInfo.packs = [pack];
                    }
                  }
                }
              }

              _initVersion(versions) {
                if (!versions) {
                  return;
                }

                const assetInfos = this.assetInfos;
                let entries = versions.import;

                if (entries) {
                  for (let i = 0, l = entries.length; i < l; i += 2) {
                    const uuid = entries[i];
                    const assetInfo = assetInfos.get(uuid);
                    assetInfo.ver = entries[i + 1];
                  }
                }

                entries = versions.native;

                if (entries) {
                  for (let i = 0, l = entries.length; i < l; i += 2) {
                    const uuid = entries[i];
                    const assetInfo = assetInfos.get(uuid);
                    assetInfo.nativeVer = entries[i + 1];
                  }
                }
              }

              _initRedirect(redirect) {
                if (!redirect) {
                  return;
                }

                const assetInfos = this.assetInfos;

                for (let i = 0, l = redirect.length; i < l; i += 2) {
                  const uuid = redirect[i];
                  const assetInfo = assetInfos.get(uuid);
                  assetInfo.redirect = redirect[i + 1];
                }
              }

            }

            function visitAsset(asset, deps) {
              if (!asset._uuid) {
                return;
              }

              deps.push(asset._uuid);
            }

            function visitComponent(comp, deps) {
              const props = Object.getOwnPropertyNames(comp);

              for (let i = 0; i < props.length; i++) {
                const propName = props[i];

                if (propName === 'node' || propName === '__eventTargets') {
                  continue;
                }

                const value = comp[propName];

                if (typeof value === 'object' && value) {
                  if (Array.isArray(value)) {
                    for (let j = 0; j < value.length; j++) {
                      const val = value[j];

                      if (val instanceof Asset) {
                        visitAsset(val, deps);
                      }
                    }
                  } else if (!value.constructor || value.constructor === Object) {
                    const keys = Object.getOwnPropertyNames(value);

                    for (let j = 0; j < keys.length; j++) {
                      const val = value[keys[j]];

                      if (val instanceof Asset) {
                        visitAsset(val, deps);
                      }
                    }
                  } else if (value instanceof Asset) {
                    visitAsset(value, deps);
                  }
                }
              }
            }

            function visitNode(node, deps) {
              for (let i = 0; i < node._components.length; i++) {
                visitComponent(node._components[i], deps);
              }

              for (let i = 0; i < node._children.length; i++) {
                visitNode(node._children[i], deps);
              }
            }

            function descendOpRef(asset, refs, exclude, op) {
              exclude.push(asset._uuid);
              const depends = dependUtil.getDeps(asset._uuid);

              for (let i = 0, l = depends.length; i < l; i++) {
                const dependAsset = assets.get(depends[i]);

                if (!dependAsset) {
                  continue;
                }

                const uuid = dependAsset._uuid;

                if (!(uuid in refs)) {
                  refs[uuid] = dependAsset.refCount + op;
                } else {
                  refs[uuid] += op;
                }

                if (exclude.includes(uuid)) {
                  continue;
                }

                descendOpRef(dependAsset, refs, exclude, op);
              }
            }

            const _temp$n = [];

            function checkCircularReference(asset) {
              const refs = Object.create(null);
              refs[asset._uuid] = asset.refCount;
              descendOpRef(asset, refs, _temp$n, -1);
              _temp$n.length = 0;

              if (refs[asset._uuid] !== 0) {
                return refs[asset._uuid];
              }

              for (const uuid in refs) {
                if (refs[uuid] !== 0) {
                  descendOpRef(assets.get(uuid), refs, _temp$n, 1);
                }
              }

              _temp$n.length = 0;
              return refs[asset._uuid];
            }

            class ReleaseManager {
              constructor() {
                this._persistNodeDeps = new Cache();
                this._toDelete = new Cache();
                this._eventListener = false;
              }

              init() {
                this._persistNodeDeps.clear();

                this._toDelete.clear();
              }

              _addPersistNodeRef(node) {
                const deps = [];
                visitNode(node, deps);

                for (let i = 0, l = deps.length; i < l; i++) {
                  const dependAsset = assets.get(deps[i]);

                  if (dependAsset) {
                    dependAsset.addRef();
                  }
                }

                this._persistNodeDeps.add(node.uuid, deps);
              }

              _removePersistNodeRef(node) {
                if (!this._persistNodeDeps.has(node.uuid)) {
                  return;
                }

                const deps = this._persistNodeDeps.get(node.uuid);

                for (let i = 0, l = deps.length; i < l; i++) {
                  const dependAsset = assets.get(deps[i]);

                  if (dependAsset) {
                    dependAsset.decRef();
                  }
                }

                this._persistNodeDeps.remove(node.uuid);
              }

              _autoRelease(oldScene, newScene, persistNodes) {
                if (oldScene) {
                  const childs = dependUtil.getDeps(oldScene.uuid);

                  for (let i = 0, l = childs.length; i < l; i++) {
                    const asset = assets.get(childs[i]);

                    if (asset) {
                      asset.decRef( oldScene.autoReleaseAssets);
                    }
                  }

                  const dependencies = dependUtil._depends.get(oldScene.uuid);

                  if (dependencies && dependencies.persistDeps) {
                    const persistDeps = dependencies.persistDeps;

                    for (let i = 0, l = persistDeps.length; i < l; i++) {
                      const asset = assets.get(persistDeps[i]);

                      if (asset) {
                        asset.decRef( oldScene.autoReleaseAssets);
                      }
                    }
                  }

                  if (oldScene.uuid !== newScene.uuid) {
                    dependUtil.remove(oldScene.uuid);
                  }
                }

                const sceneDeps = dependUtil._depends.get(newScene.uuid);

                if (sceneDeps) {
                  sceneDeps.persistDeps = [];
                }

                for (const key in persistNodes) {
                  const node = persistNodes[key];

                  const deps = this._persistNodeDeps.get(node.uuid);

                  for (const dep of deps) {
                    const dependAsset = assets.get(dep);

                    if (dependAsset) {
                      dependAsset.addRef();
                    }
                  }

                  if (!sceneDeps) {
                    continue;
                  }

                  sceneDeps.persistDeps.push(...deps);
                }
              }

              tryRelease(asset, force = false) {
                if (!(asset instanceof Asset)) {
                  return;
                }

                if (force) {
                  this._free(asset, force);

                  return;
                }

                this._toDelete.add(asset._uuid, asset);

                if (!this._eventListener) {
                  this._eventListener = true;
                  callInNextTick(this._freeAssets.bind(this));
                }
              }

              _freeAssets() {
                this._eventListener = false;

                this._toDelete.forEach(asset => {
                  this._free(asset);
                });

                this._toDelete.clear();
              }

              _free(asset, force = false) {
                const uuid = asset._uuid;

                this._toDelete.remove(uuid);

                if (!isValid(asset, true)) {
                  return;
                }

                if (!force) {
                  if (asset.refCount > 0) {
                    if (checkCircularReference(asset) > 0) {
                      return;
                    }
                  }
                }

                assets.remove(uuid);
                const depends = dependUtil.getDeps(uuid);

                for (let i = 0, l = depends.length; i < l; i++) {
                  const dependAsset = assets.get(depends[i]);

                  if (dependAsset) {
                    dependAsset.decRef(false);

                    {
                      this._free(dependAsset, false);
                    }
                  }
                }

                {
                  asset.destroy();
                }

                dependUtil.remove(uuid);
              }

            }

            var releaseManager = new ReleaseManager();

            let defaultProgressCallback = null;
            function setDefaultProgressCallback(onProgress) {
              defaultProgressCallback = onProgress;
            }
            function clear$1(task, clearRef) {
              for (let i = 0, l = task.input.length; i < l; i++) {
                const item = task.input[i];

                if (clearRef) {
                  if (!item.isNative && item.content instanceof Asset) {
                    item.content.decRef(false);
                  }
                }

                item.recycle();
              }

              task.input = null;
            }
            function urlAppendTimestamp(url, append) {
              if (append) {
                if (/\?/.test(url)) {
                  return `${url}&_t=${Date.now()}`;
                }

                return `${url}?_t=${Date.now()}`;
              }

              return url;
            }
            function retry(process, times, wait, onComplete, index = 0) {
              process(index, (err, result) => {
                index++;

                if (!err || index > times) {
                  if (onComplete) {
                    onComplete(err, result);
                  }
                } else {
                  setTimeout(() => {
                    retry(process, times, wait, onComplete, index);
                  }, wait);
                }
              });
            }
            function getDepends(uuid, data, exclude, depends, config) {
              try {
                const info = dependUtil.parse(uuid, data);

                for (let i = 0, l = info.deps.length; i < l; i++) {
                  const dep = info.deps[i];

                  if (!(dep in exclude)) {
                    exclude[dep] = true;
                    depends.push({
                      uuid: dep,
                      bundle: config && config.name
                    });
                  }
                }

                if (info.nativeDep) {
                  if (config) {
                    info.nativeDep.bundle = config.name;
                  }

                  depends.push({ ...info.nativeDep
                  });
                }
              } catch (e) {
                error(e.message, e.stack);
              }
            }
            function cache(id, asset, cacheAsset) {
              if (!asset) {
                return;
              }

              cacheAsset = cacheAsset !== undefined ? cacheAsset : legacyCC.assetManager.cacheAsset;

              if (!isScene(asset) && cacheAsset && !asset.isDefault) {
                assets.add(id, asset);
              }
            }
            function setProperties(uuid, asset, assetsMap) {
              let missingAsset = false;
              const depends = asset.__depends__;

              if (depends) {

                for (let i = 0, l = depends.length; i < l; i++) {
                  const depend = depends[i];
                  const dependAsset = assetsMap[`${depend.uuid}@import`];

                  if (!dependAsset) {
                    {
                      error(`The asset ${depend.uuid} is missing!`);
                    }

                    if (depend.type && depend.type !== Asset) {
                      const placeHolder = new depend.type();
                      placeHolder.initDefault(depend.uuid);
                      depend.owner[depend.prop] = placeHolder;
                    }

                    missingAsset = true;
                  } else {
                    depend.owner[depend.prop] = dependAsset.addRef();
                  }
                }

                asset.__depends__ = null;
              }

              if (asset.__nativeDepend__) {
                if (assetsMap[`${uuid}@native`]) {
                  asset._nativeAsset = assetsMap[`${uuid}@native`];
                } else {
                  missingAsset = true;
                  console.error(`the native asset of ${uuid} is missing!`);
                }

                asset.__nativeDepend__ = false;
              }

              return missingAsset;
            }
            function gatherAsset(task) {
              const source = task.source;

              if (!task.options.__outputAsArray__ && source.length === 1) {
                task.output = source[0].content;
              } else {
                const output = task.output = [];

                for (let i = 0, l = source.length; i < l; i++) {
                  output.push(source[i].content);
                }
              }
            }
            function forEach(array, process, onComplete) {
              let count = 0;
              const errs = [];
              const length = array.length;

              if (length === 0 && onComplete) {
                onComplete(errs);
              }

              const cb = err => {
                if (err) {
                  errs.push(err);
                }

                count++;

                if (count === length) {
                  if (onComplete) {
                    onComplete(errs);
                  }
                }
              };

              for (let i = 0; i < length; i++) {
                process(array[i], cb);
              }
            }
            function parseParameters(options, onProgress, onComplete) {
              let optionsOut = options;
              let onProgressOut = onProgress;
              let onCompleteOut = onComplete;

              if (onComplete === undefined) {
                const isCallback = typeof options === 'function';

                if (onProgress) {
                  onCompleteOut = onProgress;

                  if (!isCallback) {
                    onProgressOut = null;
                  }
                } else if (onProgress === undefined && isCallback) {
                  onCompleteOut = options;
                  optionsOut = null;
                  onProgressOut = null;
                }

                if (onProgress !== undefined && isCallback) {
                  onProgressOut = options;
                  optionsOut = null;
                }
              }

              return {
                options: optionsOut || Object.create(null),
                onProgress: onProgressOut,
                onComplete: onCompleteOut
              };
            }
            function parseLoadResArgs(type, onProgress, onComplete) {
              let typeOut = type;
              let onProgressOut = onProgress;
              let onCompleteOut = onComplete;

              if (onComplete === undefined) {
                const isValidType = js.isChildClassOf(type, Asset);

                if (onProgress) {
                  onCompleteOut = onProgress;

                  if (isValidType) {
                    onProgressOut = null;
                  }
                } else if (onProgress === undefined && !isValidType) {
                  onCompleteOut = type;
                  onProgressOut = null;
                  typeOut = null;
                }

                if (onProgress !== undefined && !isValidType) {
                  onProgressOut = type;
                  typeOut = null;
                }
              }

              return {
                type: typeOut,
                onProgress: onProgressOut || defaultProgressCallback,
                onComplete: onCompleteOut
              };
            }
            function checkCircleReference(owner, uuid, map, checked = {}) {
              const item = map[uuid];

              if (!item || checked[uuid]) {
                return false;
              }

              checked[uuid] = true;
              let result = false;
              const deps = dependUtil.getDeps(uuid);

              if (deps) {
                for (let i = 0, l = deps.length; i < l; i++) {
                  const dep = deps[i];

                  if (dep === owner || checkCircleReference(owner, dep, map, checked)) {
                    result = true;
                    break;
                  }
                }
              }

              return result;
            }
            function asyncify(cb) {
              return (p1, p2) => {
                if (!cb) {
                  return;
                }

                const refs = [];

                if (Array.isArray(p2)) {
                  p2.forEach(x => x instanceof Asset && refs.push(x.addRef()));
                } else if (p2 instanceof Asset) {
                  refs.push(p2.addRef());
                }

                callInNextTick(() => {
                  refs.forEach(x => x.decRef(false));
                  cb(p1, p2);
                });
              };
            }

            class Bundle {
              constructor() {
                this._config = new Config();
              }

              get config() {
                return this._config;
              }

              get name() {
                return this._config.name;
              }

              get deps() {
                return this._config.deps;
              }

              get base() {
                return this._config.base;
              }

              getInfoWithPath(path, type) {
                return this._config.getInfoWithPath(path, type);
              }

              getDirWithPath(path, type, out) {
                return this._config.getDirWithPath(path, type, out);
              }

              getAssetInfo(uuid) {
                return this._config.getAssetInfo(uuid);
              }

              getSceneInfo(name) {
                return this._config.getSceneInfo(name);
              }

              init(options) {
                this._config.init(options);

                bundles.add(options.name, this);
              }

              load(paths, type, onProgress, onComplete) {
                const {
                  type: _type,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseLoadResArgs(type, onProgress, onComplete);
                const options = {
                  __requestType__: RequestType.PATH,
                  type: _type,
                  bundle: this.name,
                  __outputAsArray__: Array.isArray(paths)
                };
                legacyCC.assetManager.loadAny(paths, options, onProg, onComp);
              }

              preload(paths, type, onProgress, onComplete) {
                const {
                  type: _type,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseLoadResArgs(type, onProgress, onComplete);
                legacyCC.assetManager.preloadAny(paths, {
                  __requestType__: RequestType.PATH,
                  type: _type,
                  bundle: this.name
                }, onProg, onComp);
              }

              loadDir(dir, type, onProgress, onComplete) {
                const {
                  type: _type,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseLoadResArgs(type, onProgress, onComplete);
                legacyCC.assetManager.loadAny(dir, {
                  __requestType__: RequestType.DIR,
                  type: _type,
                  bundle: this.name,
                  __outputAsArray__: true
                }, onProg, onComp);
              }

              preloadDir(dir, type, onProgress, onComplete) {
                const {
                  type: _type,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseLoadResArgs(type, onProgress, onComplete);
                legacyCC.assetManager.preloadAny(dir, {
                  __requestType__: RequestType.DIR,
                  type: _type,
                  bundle: this.name
                }, onProg, onComp);
              }

              loadScene(sceneName, options, onProgress, onComplete) {
                const {
                  options: opts,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseParameters(options, onProgress, onComplete);
                opts.preset = opts.preset || 'scene';
                opts.bundle = this.name;
                legacyCC.assetManager.loadAny({
                  scene: sceneName
                }, opts, onProg, (err, sceneAsset) => {
                  if (err) {
                    error(err.message, err.stack);
                  } else if (sceneAsset instanceof SceneAsset && sceneAsset.scene) {
                    const scene = sceneAsset.scene;
                    scene._id = sceneAsset._uuid;
                    scene.name = sceneAsset.name;
                  } else {
                    err = new Error(`The asset ${sceneAsset._uuid} is not a scene`);
                  }

                  if (onComp) {
                    onComp(err, sceneAsset);
                  }
                });
              }

              preloadScene(sceneName, options, onProgress, onComplete) {
                const {
                  options: opts,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseParameters(options, onProgress, onComplete);
                opts.bundle = this.name;
                legacyCC.assetManager.preloadAny({
                  scene: sceneName
                }, opts, onProg, err => {
                  if (err) {
                    errorID(1210, sceneName, err.message);
                  }

                  if (onComp) {
                    onComp(err);
                  }
                });
              }

              get(path, type) {
                const info = this.getInfoWithPath(path, type);

                if (info) {
                  return assets.get(info.uuid) || null;
                }

                return null;
              }

              release(path, type) {
                const asset = this.get(path, type);

                if (asset) {
                  releaseManager.tryRelease(asset, true);
                }
              }

              releaseUnusedAssets() {
                assets.forEach(asset => {
                  const info = this.getAssetInfo(asset._uuid);

                  if (info && !info.redirect) {
                    releaseManager.tryRelease(asset);
                  }
                });
              }

              releaseAll() {
                assets.forEach(asset => {
                  const info = this.getAssetInfo(asset._uuid);

                  if (info && !info.redirect) {
                    releaseManager.tryRelease(asset, true);
                  }
                });
              }

              _destroy() {
                this._config.destroy();
              }

            }
            const resources = exports('fy', new Bundle());
            legacyCC.resources = resources;

            function downloadDomImage(url, options, onComplete) {
              const img = new Image();

              if (window.location.protocol !== 'file:') {
                img.crossOrigin = 'anonymous';
              }

              function loadCallback() {
                img.removeEventListener('load', loadCallback);
                img.removeEventListener('error', errorCallback);

                if (onComplete) {
                  onComplete(null, img);
                }
              }

              function errorCallback() {
                img.removeEventListener('load', loadCallback);
                img.removeEventListener('error', errorCallback);

                if (onComplete) {
                  onComplete(new Error(getError(4930, url)));
                }
              }

              img.addEventListener('load', loadCallback);
              img.addEventListener('error', errorCallback);
              img.src = url;
              return img;
            }

            function downloadFile(url, options, onProgress, onComplete) {
              const xhr = new XMLHttpRequest();
              const errInfo = `download failed: ${url}, status: `;
              xhr.open('GET', url, true);

              if (options.xhrResponseType !== undefined) {
                xhr.responseType = options.xhrResponseType;
              }

              if (options.xhrWithCredentials !== undefined) {
                xhr.withCredentials = options.xhrWithCredentials;
              }

              if (options.xhrMimeType !== undefined && xhr.overrideMimeType) {
                xhr.overrideMimeType(options.xhrMimeType);
              }

              if (options.xhrTimeout !== undefined) {
                xhr.timeout = options.xhrTimeout;
              }

              if (options.xhrHeader) {
                for (const header in options.xhrHeader) {
                  xhr.setRequestHeader(header, options.xhrHeader[header]);
                }
              }

              xhr.onload = () => {
                if (xhr.status === 200 || xhr.status === 0) {
                  if (onComplete) {
                    onComplete(null, xhr.response);
                  }
                } else if (onComplete) {
                  onComplete(new Error(`${errInfo}${xhr.status}(no response)`));
                }
              };

              if (onProgress) {
                xhr.onprogress = e => {
                  if (e.lengthComputable) {
                    onProgress(e.loaded, e.total);
                  }
                };
              }

              xhr.onerror = () => {
                if (onComplete) {
                  onComplete(new Error(`${errInfo}${xhr.status}(error)`));
                }
              };

              xhr.ontimeout = () => {
                if (onComplete) {
                  onComplete(new Error(`${errInfo}${xhr.status}(time out)`));
                }
              };

              xhr.onabort = () => {
                if (onComplete) {
                  onComplete(new Error(`${errInfo}${xhr.status}(abort)`));
                }
              };

              xhr.send(null);
              return xhr;
            }

            const downloaded = {};
            function downloadScript(url, options, onComplete) {
              if (downloaded[url]) {
                if (onComplete) {
                  onComplete(null);
                }

                return null;
              }

              const script = document.createElement('script');

              if (window.location.protocol !== 'file:') {
                script.crossOrigin = 'anonymous';
              }

              script.async = options.scriptAsyncLoading || false;
              script.src = url;

              function loadHandler() {
                script.parentNode.removeChild(script);
                script.removeEventListener('load', loadHandler, false);
                script.removeEventListener('error', errorHandler, false);
                downloaded[url] = true;

                if (onComplete) {
                  onComplete(null);
                }
              }

              function errorHandler() {
                script.parentNode.removeChild(script);
                script.removeEventListener('load', loadHandler, false);
                script.removeEventListener('error', errorHandler, false);

                if (onComplete) {
                  onComplete(new Error(getError(4928, url)));
                }
              }

              script.addEventListener('load', loadHandler, false);
              script.addEventListener('error', errorHandler, false);
              document.body.appendChild(script);
              return script;
            }

            const REGEX = /^(?:\w+:\/\/|\.+\/).+/;

            const downloadImage = (url, options, onComplete) => {
              const func = sys.capabilities.imageBitmap && legacyCC.assetManager.allowImageBitmap ? downloadBlob : downloadDomImage;
              func(url, options, onComplete);
            };

            const downloadBlob = (url, options, onComplete) => {
              options.xhrResponseType = 'blob';
              downloadFile(url, options, options.onFileProgress, onComplete);
            };

            const downloadJson = (url, options, onComplete) => {
              options.xhrResponseType = 'json';
              downloadFile(url, options, options.onFileProgress, onComplete);
            };

            const downloadArrayBuffer = (url, options, onComplete) => {
              options.xhrResponseType = 'arraybuffer';
              downloadFile(url, options, options.onFileProgress, onComplete);
            };

            const downloadText = (url, options, onComplete) => {
              options.xhrResponseType = 'text';
              downloadFile(url, options, options.onFileProgress, onComplete);
            };

            const downloadBundle = (nameOrUrl, options, onComplete) => {
              const bundleName = basename(nameOrUrl);
              let url = nameOrUrl;

              if (!REGEX.test(url)) {
                if (downloader.remoteBundles.indexOf(bundleName) !== -1) {
                  url = `${downloader.remoteServerAddress}remote/${bundleName}`;
                } else {
                  url = `assets/${bundleName}`;
                }
              }

              const version = options.version || downloader.bundleVers[bundleName];
              let count = 0;
              const config = `${url}/config.${version ? `${version}.` : ''}json`;
              let out = null;
              let error = null;
              downloadJson(config, options, (err, response) => {
                error = err;
                out = response;

                if (out) {
                  out.base = `${url}/`;
                }

                if (++count === 2) {
                  onComplete(error, out);
                }
              });
              const jspath = `${url}/index.${version ? `${version}.` : ''}js`;
              downloadScript(jspath, options, err => {
                error = err;

                if (++count === 2) {
                  onComplete(err, out);
                }
              });
            };

            class Downloader {
              constructor() {
                this.maxConcurrency = 6;
                this.maxRequestsPerFrame = 6;
                this.maxRetryCount =  3 ;
                this.appendTimeStamp = !!EDITOR;
                this.limited = !EDITOR;
                this.retryInterval = 2000;
                this.bundleVers = null;
                this.remoteBundles = [];
                this.downloadDomImage = downloadDomImage;
                this.downloadDomAudio = null;
                this.downloadFile = downloadFile;
                this.downloadScript = downloadScript;
                this._downloaders = {
                  '.png': downloadImage,
                  '.jpg': downloadImage,
                  '.bmp': downloadImage,
                  '.jpeg': downloadImage,
                  '.gif': downloadImage,
                  '.ico': downloadImage,
                  '.tiff': downloadImage,
                  '.webp': downloadImage,
                  '.image': downloadImage,
                  '.pvr': downloadArrayBuffer,
                  '.pkm': downloadArrayBuffer,
                  '.astc': downloadArrayBuffer,
                  '.txt': downloadText,
                  '.xml': downloadText,
                  '.vsh': downloadText,
                  '.fsh': downloadText,
                  '.atlas': downloadText,
                  '.tmx': downloadText,
                  '.tsx': downloadText,
                  '.json': downloadJson,
                  '.ExportJson': downloadJson,
                  '.plist': downloadText,
                  '.fnt': downloadText,
                  '.binary': downloadArrayBuffer,
                  '.bin': downloadArrayBuffer,
                  '.dbbin': downloadArrayBuffer,
                  '.skel': downloadArrayBuffer,
                  '.js': downloadScript,
                  bundle: downloadBundle,
                  default: downloadText
                };
                this._downloading = new Cache();
                this._queue = [];
                this._queueDirty = false;
                this._totalNum = 0;
                this._totalNumThisPeriod = 0;
                this._lastDate = -1;
                this._checkNextPeriod = false;
                this._remoteServerAddress = '';
                this._maxInterval = 1 / 30;
              }

              get remoteServerAddress() {
                return this._remoteServerAddress;
              }

              init(remoteServerAddress = '', bundleVers = {}, remoteBundles = []) {
                this._downloading.clear();

                this._queue.length = 0;
                this._remoteServerAddress = remoteServerAddress;
                this.bundleVers = bundleVers;
                this.remoteBundles = remoteBundles;
              }

              register(type, handler) {
                if (typeof type === 'object') {
                  mixin(this._downloaders, type);
                } else {
                  this._downloaders[type] = handler;
                }
              }

              download(id, url, type, options, onComplete) {
                const file = files.get(id);

                if (file) {
                  onComplete(null, file);
                  return;
                }

                const downloadCallbacks = this._downloading.get(id);

                if (downloadCallbacks) {
                  downloadCallbacks.push(onComplete);

                  const request = this._queue.find(x => x.id === id);

                  if (!request) {
                    return;
                  }

                  const priority = options.priority || 0;

                  if (request.priority < priority) {
                    request.priority = priority;
                    this._queueDirty = true;
                  }

                  return;
                }

                const maxRetryCount = typeof options.maxRetryCount !== 'undefined' ? options.maxRetryCount : this.maxRetryCount;
                const maxConcurrency = typeof options.maxConcurrency !== 'undefined' ? options.maxConcurrency : this.maxConcurrency;
                const maxRequestsPerFrame = typeof options.maxRequestsPerFrame !== 'undefined' ? options.maxRequestsPerFrame : this.maxRequestsPerFrame;
                const handler = this._downloaders[type] || this._downloaders.default;

                const process = (index, callback) => {
                  if (index === 0) {
                    this._downloading.add(id, [onComplete]);
                  }

                  if (!this.limited) {
                    handler(urlAppendTimestamp(url, this.appendTimeStamp), options, callback);
                    return;
                  }

                  this._updateTime();

                  const done = (err, data) => {
                    this._totalNum--;

                    this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);

                    callback(err, data);
                  };

                  if (this._totalNum < maxConcurrency && this._totalNumThisPeriod < maxRequestsPerFrame) {
                    handler(urlAppendTimestamp(url, this.appendTimeStamp), options, done);
                    this._totalNum++;
                    this._totalNumThisPeriod++;
                  } else {
                    this._queue.push({
                      id,
                      priority: options.priority || 0,
                      url,
                      options,
                      done,
                      handler
                    });

                    this._queueDirty = true;

                    if (this._totalNum < maxConcurrency) {
                      this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);
                    }
                  }
                };

                const finale = (err, result) => {
                  if (!err) {
                    files.add(id, result);
                  }

                  const callbacks = this._downloading.remove(id);

                  for (let i = 0, l = callbacks.length; i < l; i++) {
                    callbacks[i](err, result);
                  }
                };

                retry(process, maxRetryCount, this.retryInterval, finale);
              }

              loadSubpackage(name, completeCallback) {
                legacyCC.assetManager.loadBundle(name, null, completeCallback);
              }

              _updateTime() {
                const now = Date.now();
                const deltaTime = legacyCC.director.getDeltaTime();
                const interval = deltaTime > this._maxInterval ? this._maxInterval : deltaTime;

                if (now - this._lastDate > interval * 1000) {
                  this._totalNumThisPeriod = 0;
                  this._lastDate = now;
                }
              }

              _handleQueue(maxConcurrency, maxRequestsPerFrame) {
                this._checkNextPeriod = false;

                this._updateTime();

                while (this._queue.length > 0 && this._totalNum < maxConcurrency && this._totalNumThisPeriod < maxRequestsPerFrame) {
                  if (this._queueDirty) {
                    this._queue.sort((a, b) => a.priority - b.priority);

                    this._queueDirty = false;
                  }

                  const request = this._queue.pop();

                  if (!request) {
                    break;
                  }

                  this._totalNum++;
                  this._totalNumThisPeriod++;
                  request.handler(urlAppendTimestamp(request.url, this.appendTimeStamp), request.options, request.done);
                }

                this._handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame);
              }

              _handleQueueInNextFrame(maxConcurrency, maxRequestsPerFrame) {
                if (!this._checkNextPeriod && this._queue.length > 0) {
                  callInNextTick(this._handleQueue.bind(this), maxConcurrency, maxRequestsPerFrame);
                  this._checkNextPeriod = true;
                }
              }

            }
            const downloader = exports('dl', new Downloader());

            function createImageAsset(id, data, options, onComplete) {
              let out = null;
              let err = null;

              try {
                out = new ImageAsset();
                out._nativeUrl = id;
                out._nativeAsset = data;
              } catch (e) {
                err = e;
              }

              onComplete(err, out);
            }

            function createJsonAsset(id, data, options, onComplete) {
              const out = new JsonAsset();
              out.json = data;
              onComplete(null, out);
            }

            function createTextAsset(id, data, options, onComplete) {
              const out = new TextAsset();
              out.text = data;
              onComplete(null, out);
            }

            function createBufferAsset(id, data, options, onComplete) {
              const out = new BufferAsset();
              out._nativeUrl = id;
              out._nativeAsset = data;
              onComplete(null, out);
            }

            function createAsset(id, data, options, onComplete) {
              const out = new Asset();
              out._nativeUrl = id;
              out._nativeAsset = data;
              onComplete(null, out);
            }

            function createBundle(id, data, options, onComplete) {
              let bundle = bundles.get(data.name);

              if (!bundle) {
                bundle = data.name === BuiltinBundleName.RESOURCES ? resources : new Bundle();
                data.base = data.base || `${id}/`;
                bundle.init(data);
              }

              module.import(`virtual:///prerequisite-imports/${bundle.name}`).then(() => {
                onComplete(null, bundle);
              }).catch(onComplete);
            }

            class Factory {
              constructor() {
                this._creating = new Cache();
                this._producers = {
                  '.png': createImageAsset,
                  '.jpg': createImageAsset,
                  '.bmp': createImageAsset,
                  '.jpeg': createImageAsset,
                  '.gif': createImageAsset,
                  '.ico': createImageAsset,
                  '.tiff': createImageAsset,
                  '.webp': createImageAsset,
                  '.image': createImageAsset,
                  '.pvr': createImageAsset,
                  '.pkm': createImageAsset,
                  '.txt': createTextAsset,
                  '.xml': createTextAsset,
                  '.vsh': createTextAsset,
                  '.fsh': createTextAsset,
                  '.atlas': createTextAsset,
                  '.tmx': createTextAsset,
                  '.tsx': createTextAsset,
                  '.fnt': createTextAsset,
                  '.json': createJsonAsset,
                  '.ExportJson': createJsonAsset,
                  '.binary': createBufferAsset,
                  '.bin': createBufferAsset,
                  '.dbbin': createBufferAsset,
                  '.skel': createBufferAsset,
                  bundle: createBundle,
                  default: createAsset
                };
              }

              register(type, handler) {
                if (typeof type === 'object') {
                  js.mixin(this._producers, type);
                } else {
                  this._producers[type] = handler;
                }
              }

              create(id, data, type, options, onComplete) {
                const handler = this._producers[type] || this._producers.default;
                const asset = assets.get(id);

                if (!options.reloadAsset && asset) {
                  onComplete(null, asset);
                  return;
                }

                const creating = this._creating.get(id);

                if (creating) {
                  creating.push(onComplete);
                  return;
                }

                this._creating.add(id, [onComplete]);

                handler(id, data, options, (err, result) => {
                  if (!err && result instanceof Asset) {
                    result._uuid = id;
                    cache(id, result, options.cacheAsset);
                  }

                  const callbacks = this._creating.remove(id);

                  for (let i = 0, l = callbacks.length; i < l; i++) {
                    callbacks[i](err, result);
                  }
                });
              }

            }
            var factory = exports('dm', new Factory());

            class PackManager {
              constructor() {
                this._loading = new Cache();
                this._unpackers = {
                  '.json': this.unpackJson
                };
              }

              unpackJson(pack, json, options, onComplete) {
                let out = js.createMap(true);
                let err = null;

                if (Array.isArray(json)) {
                  json = unpackJSONs(json);

                  if (json.length !== pack.length) {
                    errorID(4915);
                  }

                  for (let i = 0; i < pack.length; i++) {
                    out[`${pack[i]}@import`] = json[i];
                  }
                } else {
                  const textureType = js._getClassId(Texture2D);

                  const imageAssetType = js._getClassId(ImageAsset);

                  if (json.type === textureType && json.data) {
                    const datas = json.data;

                    if (datas.length !== pack.length) {
                      errorID(4915);
                    }

                    for (let i = 0; i < pack.length; i++) {
                      out[`${pack[i]}@import`] = packCustomObjData(textureType, {
                        base: datas[i][0],
                        mipmaps: datas[i][1]
                      });
                    }
                  } else if (json.type === imageAssetType && json.data) {
                    const datas = json.data;

                    if (datas.length !== pack.length) {
                      errorID(4915);
                    }

                    for (let i = 0; i < pack.length; i++) {
                      out[`${pack[i]}@import`] = datas[i];
                    }
                  } else {
                    err = new Error('unmatched type pack!');
                    out = null;
                  }
                }

                onComplete(err, out);
              }

              init() {
                this._loading.clear();
              }

              register(type, handler) {
                if (typeof type === 'object') {
                  js.mixin(this._unpackers, type);
                } else {
                  this._unpackers[type] = handler;
                }
              }

              unpack(pack, data, type, options, onComplete) {
                if (!data) {
                  onComplete(new Error('package data is wrong!'));
                  return;
                }

                const unpacker = this._unpackers[type];
                unpacker(pack, data, options, onComplete);
              }

              load(item, options, onComplete) {
                if (item.isNative || !item.info || !item.info.packs) {
                  downloader.download(item.id, item.url, item.ext, item.options, onComplete);
                  return;
                }

                if (files.has(item.id)) {
                  onComplete(null, files.get(item.id));
                  return;
                }

                const packs = item.info.packs;
                let pack = packs.find(val => this._loading.has(val.uuid));

                if (pack) {
                  this._loading.get(pack.uuid).push({
                    onComplete,
                    id: item.id
                  });

                  return;
                }

                pack = packs[0];

                this._loading.add(pack.uuid, [{
                  onComplete,
                  id: item.id
                }]);

                const url = transform(pack.uuid, {
                  ext: pack.ext,
                  bundle: item.config.name
                });
                downloader.download(pack.uuid, url, pack.ext, item.options, (err, data) => {
                  files.remove(pack.uuid);

                  if (err) {
                    error(err.message, err.stack);
                  }

                  this.unpack(pack.packedUuids, data, pack.ext, item.options, (err2, result) => {
                    if (!err2) {
                      for (const id in result) {
                        files.add(id, result[id]);
                      }
                    }

                    const callbacks = this._loading.remove(pack.uuid);

                    for (let i = 0, l = callbacks.length; i < l; i++) {
                      const cb = callbacks[i];

                      if (err || err2) {
                        cb.onComplete(err || err2);
                        continue;
                      }

                      const unpackedData = result[cb.id];

                      if (!unpackedData) {
                        cb.onComplete(new Error('can not retrieve data from package'));
                      } else {
                        cb.onComplete(null, unpackedData);
                      }
                    }
                  });
                });
              }

            }
            var packManager = new PackManager();

            function fetch$1(task, done) {
              let firstTask = false;

              if (!task.progress) {
                task.progress = {
                  finish: 0,
                  total: task.input.length,
                  canInvoke: true
                };
                firstTask = true;
              }

              const {
                options,
                progress
              } = task;
              const depends = [];
              const total = progress.total;
              const exclude = options.__exclude__ = options.__exclude__ || Object.create(null);
              task.output = [];
              forEach(task.input, (item, cb) => {
                if (!item.isNative && assets.has(item.uuid)) {
                  const asset = assets.get(item.uuid);
                  item.content = asset.addRef();
                  task.output.push(item);

                  if (progress.canInvoke) {
                    task.dispatch('progress', ++progress.finish, progress.total, item);
                  }

                  cb();
                  return;
                }

                packManager.load(item, task.options, (err, data) => {
                  if (err) {
                    if (!task.isFinish) {
                      if (!legacyCC.assetManager.force || firstTask) {
                        error(err.message, err.stack);
                        progress.canInvoke = false;
                        done(err);
                      } else {
                        task.output.push(item);

                        if (progress.canInvoke) {
                          task.dispatch('progress', ++progress.finish, progress.total, item);
                        }
                      }
                    }
                  } else if (!task.isFinish) {
                    item.file = data;
                    task.output.push(item);

                    if (!item.isNative) {
                      exclude[item.uuid] = true;
                      getDepends(item.uuid, data, exclude, depends, item.config);
                      progress.total = total + depends.length;
                    }

                    if (progress.canInvoke) {
                      task.dispatch('progress', ++progress.finish, progress.total, item);
                    }
                  }

                  cb();
                });
              }, () => {
                if (task.isFinish) {
                  clear$1(task, true);
                  task.dispatch('error');
                  return;
                }

                if (depends.length > 0) {
                  const subTask = Task.create({
                    input: depends,
                    progress,
                    options,
                    onProgress: task.onProgress,
                    onError: Task.prototype.recycle,
                    onComplete: err => {
                      if (!err) {
                        task.output.push(...subTask.output);
                        subTask.recycle();
                      }

                      if (firstTask) {
                        decreaseRef(task);
                      }

                      done(err);
                    }
                  });
                  fetchPipeline.async(subTask);
                  return;
                }

                if (firstTask) {
                  decreaseRef(task);
                }

                done();
              });
            }

            function decreaseRef(task) {
              const output = task.output;

              for (let i = 0, l = output.length; i < l; i++) {
                if (output[i].content) {
                  output[i].content.decRef(false);
                }
              }
            }

            class SAXParser {
              constructor() {
                this._parser = null;

                if (window.DOMParser) {
                  this._parser = new DOMParser();
                }
              }

              parse(xmlTxt) {
                return this._parseXML(xmlTxt);
              }

              _parseXML(textxml) {
                if (this._parser) {
                  return this._parser.parseFromString(textxml, 'text/xml');
                }

                throw new Error('Dom parser is not supported in this platform!');
              }

            } exports('ej', SAXParser);

            class PlistParser extends SAXParser {
              parse(xmlTxt) {
                const xmlDoc = this._parseXML(xmlTxt);

                const plist = xmlDoc.documentElement;

                if (plist.tagName !== 'plist') {
                  warnID(5100);
                  return {};
                }

                let node = null;

                for (let i = 0, len = plist.childNodes.length; i < len; i++) {
                  node = plist.childNodes[i];

                  if (node.nodeType === 1) {
                    break;
                  }
                }

                return this._parseNode(node);
              }

              _parseNode(node) {
                let data = null;
                const tagName = node.tagName;

                if (tagName === 'dict') {
                  data = this._parseDict(node);
                } else if (tagName === 'array') {
                  data = this._parseArray(node);
                } else if (tagName === 'string') {
                  if (node.childNodes.length === 1) {
                    data = node.firstChild.nodeValue;
                  } else {
                    data = '';

                    for (let i = 0; i < node.childNodes.length; i++) {
                      data += node.childNodes[i].nodeValue;
                    }
                  }
                } else if (tagName === 'false') {
                  data = false;
                } else if (tagName === 'true') {
                  data = true;
                } else if (tagName === 'real') {
                  data = parseFloat(node.firstChild.nodeValue);
                } else if (tagName === 'integer') {
                  data = parseInt(node.firstChild.nodeValue, 10);
                }

                return data;
              }

              _parseArray(node) {
                const data = [];

                for (let i = 0, len = node.childNodes.length; i < len; i++) {
                  const child = node.childNodes[i];

                  if (child.nodeType !== 1) {
                    continue;
                  }

                  data.push(this._parseNode(child));
                }

                return data;
              }

              _parseDict(node) {
                const data = {};
                let key = '';

                for (let i = 0, len = node.childNodes.length; i < len; i++) {
                  const child = node.childNodes[i];

                  if (child.nodeType !== 1) {
                    continue;
                  }

                  if (child.tagName === 'key') {
                    key = child.firstChild.nodeValue;
                  } else {
                    data[key] = this._parseNode(child);
                  }
                }

                return data;
              }

            }

            const plistParser = new PlistParser();

            const PVR_HEADER_LENGTH = 13;
            const PVR_MAGIC = 0x03525650;
            const PVR_HEADER_MAGIC = 0;
            const PVR_HEADER_HEIGHT = 6;
            const PVR_HEADER_WIDTH = 7;
            const PVR_HEADER_METADATA = 12;
            const ETC_PKM_HEADER_SIZE = 16;
            const ETC_PKM_FORMAT_OFFSET = 6;
            const ETC_PKM_ENCODED_WIDTH_OFFSET = 8;
            const ETC_PKM_ENCODED_HEIGHT_OFFSET = 10;
            const ETC_PKM_WIDTH_OFFSET = 12;
            const ETC_PKM_HEIGHT_OFFSET = 14;
            const ETC1_RGB_NO_MIPMAPS = 0;
            const ETC2_RGB_NO_MIPMAPS = 1;
            const ETC2_RGBA_NO_MIPMAPS = 3;
            const ASTC_MAGIC = 0x5CA1AB13;
            const ASTC_HEADER_LENGTH = 16;
            const ASTC_HEADER_MAGIC = 4;
            const ASTC_HEADER_SIZE_X_BEGIN = 7;
            const ASTC_HEADER_SIZE_Y_BEGIN = 10;
            const ASTC_HEADER_SIZE_Z_BEGIN = 13;

            function getASTCFormat(xdim, ydim) {
              if (xdim === 4) {
                return PixelFormat.RGBA_ASTC_4x4;
              }

              if (xdim === 5) {
                if (ydim === 4) {
                  return PixelFormat.RGBA_ASTC_5x4;
                }

                return PixelFormat.RGBA_ASTC_5x5;
              }

              if (xdim === 6) {
                if (ydim === 5) {
                  return PixelFormat.RGBA_ASTC_6x5;
                }

                return PixelFormat.RGBA_ASTC_6x6;
              }

              if (xdim === 8) {
                if (ydim === 5) {
                  return PixelFormat.RGBA_ASTC_8x5;
                }

                if (ydim === 6) {
                  return PixelFormat.RGBA_ASTC_8x6;
                }

                return PixelFormat.RGBA_ASTC_8x8;
              }

              if (xdim === 10) {
                if (ydim === 5) {
                  return PixelFormat.RGBA_ASTC_10x5;
                }

                if (ydim === 6) {
                  return PixelFormat.RGBA_ASTC_10x6;
                }

                if (ydim === 8) {
                  return PixelFormat.RGBA_ASTC_10x8;
                }

                return PixelFormat.RGBA_ASTC_10x10;
              }

              if (ydim === 10) {
                return PixelFormat.RGBA_ASTC_12x10;
              }

              return PixelFormat.RGBA_ASTC_12x12;
            }

            function readBEUint16(header, offset) {
              return header[offset] << 8 | header[offset + 1];
            }

            class Parser$1 {
              constructor() {
                this._parsing = new Cache();
                this._parsers = {
                  '.png': this.parseImage,
                  '.jpg': this.parseImage,
                  '.bmp': this.parseImage,
                  '.jpeg': this.parseImage,
                  '.gif': this.parseImage,
                  '.ico': this.parseImage,
                  '.tiff': this.parseImage,
                  '.webp': this.parseImage,
                  '.image': this.parseImage,
                  '.pvr': this.parsePVRTex,
                  '.pkm': this.parsePKMTex,
                  '.astc': this.parseASTCTex,
                  '.mp3': this.parseAudio,
                  '.ogg': this.parseAudio,
                  '.wav': this.parseAudio,
                  '.m4a': this.parseAudio,
                  '.plist': this.parsePlist,
                  import: this.parseImport
                };
              }

              parseImage(file, options, onComplete) {
                if (file instanceof HTMLImageElement) {
                  onComplete(null, file);
                  return;
                }

                createImageBitmap(file, {
                  premultiplyAlpha: 'none'
                }).then(result => {
                  onComplete(null, result);
                }, err => {
                  onComplete(err, null);
                });
              }

              parseAudio(file, options, onComplete) {
                if (file instanceof ArrayBuffer) {
                  sys.__audioSupport.context.decodeAudioData(file, buffer => {
                    onComplete(null, buffer);
                  }, e => {
                    onComplete(new Error(`Error with decoding audio data${e.err}`), null);
                  });
                } else {
                  onComplete(null, file);
                }
              }

              parsePVRTex(file, options, onComplete) {
                let err = null;
                let out = null;

                try {
                  const buffer = file instanceof ArrayBuffer ? file : file.buffer;
                  const header = new Int32Array(buffer, 0, PVR_HEADER_LENGTH);

                  if (header[PVR_HEADER_MAGIC] === PVR_MAGIC) {
                    const width = header[PVR_HEADER_WIDTH];
                    const height = header[PVR_HEADER_HEIGHT];
                    const dataOffset = header[PVR_HEADER_METADATA] + 52;
                    const pvrtcData = new Uint8Array(buffer, dataOffset);
                    out = {
                      _data: pvrtcData,
                      _compressed: true,
                      width,
                      height,
                      format: 0
                    };
                  } else if (header[11] === 0x21525650) {
                    const headerLength = header[0];
                    const height = header[1];
                    const width = header[2];
                    const pvrtcData = new Uint8Array(buffer, headerLength);
                    out = {
                      _data: pvrtcData,
                      _compressed: true,
                      width,
                      height,
                      format: 0
                    };
                  } else {
                    throw new Error('Invalid magic number in PVR header');
                  }
                } catch (e) {
                  err = e;
                }

                onComplete(err, out);
              }

              parsePKMTex(file, options, onComplete) {
                let err = null;
                let out = null;

                try {
                  const buffer = file instanceof ArrayBuffer ? file : file.buffer;
                  const header = new Uint8Array(buffer);
                  const format = readBEUint16(header, ETC_PKM_FORMAT_OFFSET);

                  if (format !== ETC1_RGB_NO_MIPMAPS && format !== ETC2_RGB_NO_MIPMAPS && format !== ETC2_RGBA_NO_MIPMAPS) {
                    throw new Error('Invalid magic number in ETC header');
                  }

                  const width = readBEUint16(header, ETC_PKM_WIDTH_OFFSET);
                  const height = readBEUint16(header, ETC_PKM_HEIGHT_OFFSET);
                  const encodedWidth = readBEUint16(header, ETC_PKM_ENCODED_WIDTH_OFFSET);
                  const encodedHeight = readBEUint16(header, ETC_PKM_ENCODED_HEIGHT_OFFSET);
                  const etcData = new Uint8Array(buffer, ETC_PKM_HEADER_SIZE);
                  out = {
                    _data: etcData,
                    _compressed: true,
                    width,
                    height,
                    format: 0
                  };
                } catch (e) {
                  err = e;
                }

                onComplete(err, out);
              }

              parseASTCTex(file, options, onComplete) {
                let err = null;
                let out = null;

                try {
                  const buffer = file instanceof ArrayBuffer ? file : file.buffer;
                  const header = new Uint8Array(buffer);
                  const magicval = header[0] + (header[1] << 8) + (header[2] << 16) + (header[3] << 24);

                  if (magicval !== ASTC_MAGIC) {
                    throw new Error('Invalid magic number in ASTC header');
                  }

                  const xdim = header[ASTC_HEADER_MAGIC];
                  const ydim = header[ASTC_HEADER_MAGIC + 1];
                  const zdim = header[ASTC_HEADER_MAGIC + 2];

                  if ((xdim < 3 || xdim > 6 || ydim < 3 || ydim > 6 || zdim < 3 || zdim > 6) && (xdim < 4 || xdim === 7 || xdim === 9 || xdim === 11 || xdim > 12 || ydim < 4 || ydim === 7 || ydim === 9 || ydim === 11 || ydim > 12 || zdim !== 1)) {
                    throw new Error('Invalid block number in ASTC header');
                  }

                  const format = getASTCFormat(xdim, ydim);
                  const xsize = header[ASTC_HEADER_SIZE_X_BEGIN] + (header[ASTC_HEADER_SIZE_X_BEGIN + 1] << 8) + (header[ASTC_HEADER_SIZE_X_BEGIN + 2] << 16);
                  const ysize = header[ASTC_HEADER_SIZE_Y_BEGIN] + (header[ASTC_HEADER_SIZE_Y_BEGIN + 1] << 8) + (header[ASTC_HEADER_SIZE_Y_BEGIN + 2] << 16);
                  const zsize = header[ASTC_HEADER_SIZE_Z_BEGIN] + (header[ASTC_HEADER_SIZE_Z_BEGIN + 1] << 8) + (header[ASTC_HEADER_SIZE_Z_BEGIN + 2] << 16);
                  const astcData = new Uint8Array(buffer, ASTC_HEADER_LENGTH);
                  out = {
                    _data: astcData,
                    _compressed: true,
                    width: xsize,
                    height: ysize,
                    format
                  };
                } catch (e) {
                  err = e;
                }

                onComplete(err, out);
              }

              parsePlist(file, options, onComplete) {
                let err = null;
                const result = plistParser.parse(file);

                if (!result) {
                  err = new Error('parse failed');
                }

                onComplete(err, result);
              }

              parseImport(file, options, onComplete) {
                if (!file) {
                  onComplete(new Error(`The json file of asset ${options.__uuid__} is empty or missing`));
                  return;
                }

                let result = null;
                let err = null;

                try {
                  result = deserialize$1(file, options);
                } catch (e) {
                  err = e;
                }

                onComplete(err, result);
              }

              init() {
                this._parsing.clear();
              }

              register(type, handler) {
                if (typeof type === 'object') {
                  mixin(this._parsers, type);
                } else {
                  this._parsers[type] = handler;
                }
              }

              parse(id, file, type, options, onComplete) {
                const parsedAsset = parsed.get(id);

                if (parsedAsset) {
                  onComplete(null, parsedAsset);
                  return;
                }

                const parsing = this._parsing.get(id);

                if (parsing) {
                  parsing.push(onComplete);
                  return;
                }

                const parseHandler = this._parsers[type];

                if (!parseHandler) {
                  onComplete(null, file);
                  return;
                }

                this._parsing.add(id, [onComplete]);

                parseHandler(file, options, (err, data) => {
                  if (err) {
                    files.remove(id);
                  } else if (!isScene(data)) {
                    parsed.add(id, data);
                  }

                  const callbacks = this._parsing.remove(id);

                  for (let i = 0, l = callbacks.length; i < l; i++) {
                    callbacks[i](err, data);
                  }
                });
              }

            }
            var parser = new Parser$1();

            function load(task, done) {
              let firstTask = false;

              if (!task.progress) {
                task.progress = {
                  finish: 0,
                  total: task.input.length,
                  canInvoke: true
                };
                firstTask = true;
              }

              const {
                options,
                progress
              } = task;
              options.__exclude__ = options.__exclude__ || Object.create(null);
              task.output = [];
              forEach(task.input, (item, cb) => {
                const subTask = Task.create({
                  input: item,
                  onProgress: task.onProgress,
                  options,
                  progress,
                  onComplete: (err, result) => {
                    if (err && !task.isFinish) {
                      if (!legacyCC.assetManager.force || firstTask) {
                        {
                          error(err.message, err.stack);
                        }

                        progress.canInvoke = false;
                        done(err);
                      } else if (progress.canInvoke) {
                        task.dispatch('progress', ++progress.finish, progress.total, item);
                      }
                    }

                    task.output.push(result);
                    subTask.recycle();
                    cb(null);
                  }
                });
                loadOneAssetPipeline.async(subTask);
              }, () => {
                options.__exclude__ = null;

                if (task.isFinish) {
                  clear$1(task, true);
                  task.dispatch('error');
                  return;
                }

                gatherAsset(task);
                clear$1(task, true);
                done();
              });
            }
            const loadOneAssetPipeline = new Pipeline('loadOneAsset', [function fetch(task, done) {
              const item = task.output = task.input;
              const {
                options,
                isNative,
                uuid,
                file
              } = item;
              const {
                reloadAsset
              } = options;

              if (file || !reloadAsset && !isNative && assets.has(uuid)) {
                done();
                return;
              }

              packManager.load(item, task.options, (err, data) => {
                item.file = data;
                done(err);
              });
            }, function parse(task, done) {
              const item = task.output = task.input;
              const progress = task.progress;
              const exclude = task.options.__exclude__;
              const {
                id,
                file,
                options
              } = item;

              if (item.isNative) {
                parser.parse(id, file, item.ext, options, (err, asset) => {
                  if (err) {
                    done(err);
                    return;
                  }

                  item.content = asset;

                  if (progress.canInvoke) {
                    task.dispatch('progress', ++progress.finish, progress.total, item);
                  }

                  files.remove(id);
                  parsed.remove(id);
                  done();
                });
              } else {
                const {
                  uuid
                } = item;

                if (uuid in exclude) {
                  const {
                    finish,
                    content,
                    err,
                    callbacks
                  } = exclude[uuid];

                  if (progress.canInvoke) {
                    task.dispatch('progress', ++progress.finish, progress.total, item);
                  }

                  if (finish || checkCircleReference(uuid, uuid, exclude)) {
                    if (content) {
                      content.addRef();
                    }

                    item.content = content;
                    done(err);
                  } else {
                    callbacks.push({
                      done,
                      item
                    });
                  }
                } else if (!options.reloadAsset && assets.has(uuid)) {
                  const asset = assets.get(uuid);
                  item.content = asset.addRef();

                  if (progress.canInvoke) {
                    task.dispatch('progress', ++progress.finish, progress.total, item);
                  }

                  done();
                } else {
                  options.__uuid__ = uuid;
                  parser.parse(id, file, 'import', options, (err, asset) => {
                    if (err) {
                      done(err);
                      return;
                    }

                    loadDepends(task, asset, done);
                  });
                }
              }
            }]);

            function loadDepends(task, asset, done) {
              const {
                input: item,
                progress
              } = task;
              const {
                uuid,
                id,
                options,
                config
              } = item;
              const {
                cacheAsset
              } = options;
              const depends = [];

              if (asset.addRef) {
                asset.addRef();
              }

              getDepends(uuid, asset, Object.create(null), depends, config);

              if (progress.canInvoke) {
                task.dispatch('progress', ++progress.finish, progress.total += depends.length, item);
              }

              const repeatItem = task.options.__exclude__[uuid] = {
                content: asset,
                finish: false,
                callbacks: [{
                  done,
                  item
                }]
              };
              const subTask = Task.create({
                input: depends,
                options: task.options,
                onProgress: task.onProgress,
                onError: Task.prototype.recycle,
                progress,
                onComplete: err => {
                  if (asset.decRef) {
                    asset.decRef(false);
                  }

                  repeatItem.finish = true;
                  repeatItem.err = err;

                  if (!err) {
                    const output = Array.isArray(subTask.output) ? subTask.output : [subTask.output];
                    const map = Object.create(null);

                    for (const dependAsset of output) {
                      if (!dependAsset) {
                        continue;
                      }

                      map[dependAsset instanceof Asset ? `${dependAsset._uuid}@import` : `${uuid}@native`] = dependAsset;
                    }

                    setProperties(uuid, asset, map);

                    try {
                      if (typeof asset.onLoaded === 'function' && !asset.__onLoadedInvoked__ && !asset.__nativeDepend__) {
                        asset.onLoaded();
                        asset.__onLoadedInvoked__ = true;
                      }
                    } catch (e) {
                      error(`The asset ${uuid} is invalid for some reason, detail message: ${e.message}, stack: ${e.stack}`);
                    }

                    files.remove(id);
                    parsed.remove(id);

                    cache(uuid, asset, cacheAsset);
                    subTask.recycle();
                  }

                  const callbacks = repeatItem.callbacks;

                  for (let i = 0, l = callbacks.length; i < l; i++) {
                    const cb = callbacks[i];

                    if (asset.addRef) {
                      asset.addRef();
                    }

                    cb.item.content = asset;
                    cb.done(err);
                  }

                  callbacks.length = 0;
                }
              });
              pipeline.async(subTask);
            }

            function preprocess(task, done) {
              const options = task.options;
              const subOptions = Object.create(null);
              const leftOptions = Object.create(null);

              for (const op in options) {
                switch (op) {
                  case RequestType.PATH:
                  case RequestType.UUID:
                  case RequestType.DIR:
                  case RequestType.SCENE:
                  case RequestType.URL:
                    break;

                  case '__requestType__':
                  case '__isNative__':
                  case 'ext':
                  case 'type':
                  case '__nativeName__':
                  case 'audioLoadMode':
                  case 'bundle':
                    subOptions[op] = options[op];
                    break;

                  case '__exclude__':
                  case '__outputAsArray__':
                    leftOptions[op] = options[op];
                    break;

                  default:
                    subOptions[op] = options[op];
                    leftOptions[op] = options[op];
                    break;
                }
              }

              task.options = leftOptions;
              const subTask = Task.create({
                input: task.input,
                options: subOptions
              });
              let err = null;

              try {
                task.output = task.source = transformPipeline.sync(subTask);
              } catch (e) {
                err = e;

                for (let i = 0, l = subTask.output.length; i < l; i++) {
                  subTask.output[i].recycle();
                }
              }

              subTask.recycle();
              done(err);
            }

            class RequestItem {
              constructor() {
                this.uuid = '';
                this.url = '';
                this.ext = '.json';
                this.content = null;
                this.file = null;
                this.info = null;
                this.config = null;
                this.isNative = false;
                this.options = Object.create(null);
                this._id = '';
              }

              get id() {
                if (!this._id) {
                  this._id = `${this.uuid}@${this.isNative ? 'native' : 'import'}`;
                }

                return this._id;
              }

              static create() {
                let out;

                if (RequestItem._deadPool.length !== 0) {
                  out = RequestItem._deadPool.pop();
                } else {
                  out = new RequestItem();
                }

                return out;
              }

              recycle() {
                if (RequestItem._deadPool.length === RequestItem.MAX_DEAD_NUM) {
                  return;
                }

                this._id = '';
                this.uuid = '';
                this.url = '';
                this.ext = '.json';
                this.content = null;
                this.file = null;
                this.info = null;
                this.config = null;
                this.isNative = false;
                this.options = Object.create(null);

                RequestItem._deadPool.push(this);
              }

            }
            RequestItem.MAX_DEAD_NUM = 500;
            RequestItem._deadPool = [];

            const infos = [];
            function parse(task) {
              const options = task.options;
              const input = Array.isArray(task.input) ? task.input : [task.input];
              task.output = [];

              for (let i = 0; i < input.length; i++) {
                let item = input[i];
                let out = RequestItem.create();
                let config = null;
                let info = null;

                if (typeof item === 'string') {
                  item = Object.create(null);
                  item[options.__requestType__ || RequestType.UUID] = input[i];
                }

                if (typeof item === 'object') {
                  addon(item, options);

                  if (item.preset) {
                    addon(item, presets[item.preset]);
                  }

                  for (const key in item) {
                    switch (key) {
                      case RequestType.UUID:
                        {
                          const uuid = out.uuid = decodeUuid(item.uuid);

                          if (!item.bundle) {
                            const bundle = bundles.find(bundle => !!bundle.getAssetInfo(uuid));
                            item.bundle = bundle && bundle.name;
                          }

                          if (bundles.has(item.bundle)) {
                            config = bundles.get(item.bundle).config;
                            info = config.getAssetInfo(uuid);

                            if (info && info.redirect) {
                              if (!bundles.has(info.redirect)) {
                                throw new Error(`Please load bundle ${info.redirect} first`);
                              }

                              config = bundles.get(info.redirect).config;
                              info = config.getAssetInfo(uuid);
                            }

                            out.config = config;
                            out.info = info;
                          }

                          out.ext = item.ext || '.json';
                          break;
                        }

                      case '__requestType__':
                      case 'ext':
                      case 'bundle':
                      case 'preset':
                      case 'type':
                        break;

                      case RequestType.DIR:
                        if (bundles.has(item.bundle)) {
                          bundles.get(item.bundle).config.getDirWithPath(item.dir, item.type, infos);

                          for (const assetInfo of infos) {
                            input.push({
                              uuid: assetInfo.uuid,
                              __isNative__: false,
                              ext: '.json',
                              bundle: item.bundle
                            });
                          }

                          infos.length = 0;
                        }

                        out.recycle();
                        out = null;
                        break;

                      case RequestType.PATH:
                        if (bundles.has(item.bundle)) {
                          config = bundles.get(item.bundle).config;
                          info = config.getInfoWithPath(item.path, item.type);

                          if (info && info.redirect) {
                            if (!bundles.has(info.redirect)) {
                              throw new Error(`you need to load bundle ${info.redirect} first`);
                            }

                            config = bundles.get(info.redirect).config;
                            info = config.getAssetInfo(info.uuid);
                          }

                          if (!info) {
                            out.recycle();
                            throw new Error(`Bundle ${item.bundle} doesn't contain ${item.path}`);
                          }

                          out.config = config;
                          out.uuid = info.uuid;
                          out.info = info;
                        }

                        out.ext = item.ext || '.json';
                        break;

                      case RequestType.SCENE:
                        if (!item.bundle) {
                          const bundle = bundles.find(bundle => !!bundle.getSceneInfo(item.scene));
                          item.bundle = bundle && bundle.name;
                        }

                        if (bundles.has(item.bundle)) {
                          config = bundles.get(item.bundle).config;
                          info = config.getSceneInfo(item.scene);

                          if (info && info.redirect) {
                            if (!bundles.has(info.redirect)) {
                              throw new Error(`you need to load bundle ${info.redirect} first`);
                            }

                            config = bundles.get(info.redirect).config;
                            info = config.getAssetInfo(info.uuid);
                          }

                          if (!info) {
                            out.recycle();
                            throw new Error(`Bundle ${config.name} doesn't contain scene ${item.scene}`);
                          }

                          out.config = config;
                          out.uuid = info.uuid;
                          out.info = info;
                        }

                        break;

                      case '__isNative__':
                        out.isNative = item.__isNative__;
                        break;

                      case RequestType.URL:
                        out.url = item.url;
                        out.uuid = item.uuid || item.url;
                        out.ext = item.ext || extname(item.url);
                        out.isNative = item.__isNative__ !== undefined ? item.__isNative__ : true;
                        break;

                      default:
                        out.options[key] = item[key];
                    }

                    if (!out) {
                      break;
                    }
                  }
                }

                if (!out) {
                  continue;
                }

                task.output.push(out);

                if (!out.uuid && !out.url) {
                  throw new Error(`Can not parse this input:${JSON.stringify(item)}`);
                }
              }

              return null;
            }
            function combine(task) {
              const input = task.output = task.input;

              for (let i = 0; i < input.length; i++) {
                const item = input[i];

                if (item.url) {
                  continue;
                }

                let url = '';
                let base = '';
                const config = item.config;

                if (item.isNative) {
                  base = config && config.nativeBase ? config.base + config.nativeBase : legacyCC.assetManager.generalNativeBase;
                } else {
                  base = config && config.importBase ? config.base + config.importBase : legacyCC.assetManager.generalImportBase;
                }

                const uuid = item.uuid;
                let ver = '';

                if (item.info) {
                  if (item.isNative) {
                    ver = item.info.nativeVer ? `.${item.info.nativeVer}` : '';
                  } else {
                    ver = item.info.ver ? `.${item.info.ver}` : '';
                  }
                }

                if (item.ext === '.ttf') {
                  url = `${base}/${uuid.slice(0, 2)}/${uuid}${ver}/${item.options.__nativeName__}`;
                } else {
                  url = `${base}/${uuid.slice(0, 2)}/${uuid}${ver}${item.ext}`;
                }

                item.url = url;
              }

              return null;
            }

            class AssetManager {
              constructor() {
                this.pipeline = pipeline.append(preprocess).append(load);
                this.fetchPipeline = fetchPipeline.append(preprocess).append(fetch$1);
                this.transformPipeline = transformPipeline.append(parse).append(combine);
                this.bundles = bundles;
                this.assets = assets;
                this.generalImportBase = '';
                this.generalNativeBase = '';
                this.dependUtil = dependUtil;
                this.force =  PREVIEW;
                this.allowImageBitmap = !sys.isMobile;
                this.utils = helper;
                this.downloader = downloader;
                this.parser = parser;
                this.packManager = packManager;
                this.cacheAsset = true;
                this.cacheManager = null;
                this.presets = presets;
                this.factory = factory;
                this.preprocessPipe = preprocess;
                this.fetchPipe = fetch$1;
                this.loadPipe = load;
                this.references = references;
                this._releaseManager = releaseManager;
                this._files = files;
                this._parsed = parsed;
                this._parsePipeline =  null ;
              }

              get main() {
                return bundles.get(BuiltinBundleName.MAIN) || null;
              }

              get resources() {
                return bundles.get(BuiltinBundleName.RESOURCES) || null;
              }

              init(options = {}) {
                this._files.clear();

                this._parsed.clear();

                this._releaseManager.init();

                this.assets.clear();
                this.bundles.clear();
                this.packManager.init();
                this.downloader.init(options.server, options.bundleVers, options.remoteBundles);
                this.parser.init();
                this.dependUtil.init();
                let importBase = options.importBase || '';

                if (importBase && importBase.endsWith('/')) {
                  importBase = importBase.substr(0, importBase.length - 1);
                }

                let nativeBase = options.nativeBase || '';

                if (nativeBase && nativeBase.endsWith('/')) {
                  nativeBase = nativeBase.substr(0, nativeBase.length - 1);
                }

                this.generalImportBase = importBase;
                this.generalNativeBase = nativeBase;
              }

              getBundle(name) {
                return bundles.get(name) || null;
              }

              removeBundle(bundle) {
                bundle._destroy();

                bundles.remove(bundle.name);
              }

              loadAny(requests, options, onProgress, onComplete) {
                const {
                  options: opts,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseParameters(options, onProgress, onComplete);
                opts.preset = opts.preset || 'default';
                requests = Array.isArray(requests) ? requests.slice() : requests;
                const task = Task.create({
                  input: requests,
                  onProgress: onProg,
                  onComplete: asyncify(onComp),
                  options: opts
                });
                pipeline.async(task);
              }

              preloadAny(requests, options, onProgress, onComplete) {
                const {
                  options: opts,
                  onProgress: onProg,
                  onComplete: onComp
                } = parseParameters(options, onProgress, onComplete);
                opts.preset = opts.preset || 'preload';
                requests = Array.isArray(requests) ? requests.slice() : requests;
                const task = Task.create({
                  input: requests,
                  onProgress: onProg,
                  onComplete: asyncify(onComp),
                  options: opts
                });
                fetchPipeline.async(task);
              }

              postLoadNative(asset, options, onComplete) {
                const {
                  options: opts,
                  onComplete: onComp
                } = parseParameters(options, undefined, onComplete);

                if (!asset._native || !asset.__nativeDepend__) {
                  asyncify(onComp)(null);
                  return;
                }

                const depend = dependUtil.getNativeDep(asset._uuid);

                if (!depend) {
                  return;
                }

                if (!bundles.has(depend.bundle)) {
                  const bundle = bundles.find(b => !!b.getAssetInfo(asset._uuid));

                  if (bundle) {
                    depend.bundle = bundle.name;
                  }
                }

                this.loadAny(depend, opts, (err, native) => {
                  if (!err) {
                    if (asset.isValid && asset.__nativeDepend__) {
                      asset._nativeAsset = native;
                      asset.__nativeDepend__ = false;
                    }
                  } else {
                    error(err.message, err.stack);
                  }

                  if (onComp) {
                    onComp(err);
                  }
                });
              }

              loadRemote(url, options, onComplete) {
                const {
                  options: opts,
                  onComplete: onComp
                } = parseParameters(options, undefined, onComplete);

                if (!opts.reloadAsset && this.assets.has(url)) {
                  asyncify(onComp)(null, this.assets.get(url));
                  return;
                }

                opts.__isNative__ = true;
                opts.preset = opts.preset || 'remote';
                this.loadAny({
                  url
                }, opts, null, (err, data) => {
                  if (err) {
                    error(err.message, err.stack);

                    if (onComp) {
                      onComp(err, data);
                    }
                  } else {
                    factory.create(url, data, opts.ext || extname(url), opts, (p1, p2) => {
                      if (onComp) {
                        onComp(p1, p2);
                      }
                    });
                  }
                });
              }

              loadBundle(nameOrUrl, options, onComplete) {
                const {
                  options: opts,
                  onComplete: onComp
                } = parseParameters(options, undefined, onComplete);
                const bundleName = basename(nameOrUrl);

                if (this.bundles.has(bundleName)) {
                  asyncify(onComp)(null, this.getBundle(bundleName));
                  return;
                }

                opts.preset = opts.preset || 'bundle';
                opts.ext = 'bundle';
                opts.__isNative__ = true;
                this.loadAny({
                  url: nameOrUrl
                }, opts, null, (err, data) => {
                  if (err) {
                    error(err.message, err.stack);

                    if (onComp) {
                      onComp(err, data);
                    }
                  } else {
                    factory.create(nameOrUrl, data, 'bundle', opts, (p1, p2) => {
                      if (onComp) {
                        onComp(p1, p2);
                      }
                    });
                  }
                });
              }

              releaseAsset(asset) {
                releaseManager.tryRelease(asset, true);
              }

              releaseUnusedAssets() {
                assets.forEach(asset => {
                  releaseManager.tryRelease(asset);
                });
              }

              releaseAll() {
                assets.forEach(asset => {
                  releaseManager.tryRelease(asset, true);
                });
              }

              loadWithJson(json, options, onProgress, onComplete) {
                {
                  throw new Error('Only valid in Editor');
                }
              }

            } exports('fx', AssetManager);
            AssetManager.Pipeline = Pipeline;
            AssetManager.Task = Task;
            AssetManager.Cache = Cache;
            AssetManager.RequestItem = RequestItem;
            AssetManager.Bundle = Bundle;
            AssetManager.BuiltinBundleName = BuiltinBundleName;
            var assetManager = exports('d5', legacyCC.assetManager = new AssetManager());
            legacyCC.AssetManager = AssetManager;

            const ImageFmts = ['.png', '.jpg', '.bmp', '.jpeg', '.gif', '.ico', '.tiff', '.webp', '.image', '.pvr', '.pkm', '.astc'];
            const AudioFmts = ['.mp3', '.ogg', '.wav', '.m4a'];

            function GetTrue() {
              return true;
            }

            const md5Pipe = {
              transformURL(url) {
                const uuid = getUuidFromURL(url);

                if (!uuid) {
                  return url;
                }

                const bundle = bundles.find(b => !!b.getAssetInfo(uuid));

                if (!bundle) {
                  return url;
                }

                let hashValue = '';
                const info = bundle.getAssetInfo(uuid);

                if (url.startsWith(bundle.base + bundle.config.nativeBase)) {
                  hashValue = info.nativeVer || '';
                } else {
                  hashValue = info.ver || '';
                }

                if (!hashValue || url.indexOf(hashValue) !== -1) {
                  return url;
                }

                let hashPatchInFolder = false;

                if (extname(url) === '.ttf') {
                  hashPatchInFolder = true;
                }

                if (hashPatchInFolder) {
                  const dirname$1 = dirname(url);
                  const basename$1 = basename(url);
                  url = `${dirname$1}.${hashValue}/${basename$1}`;
                } else {
                  url = url.replace(/.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-@]{8,}).*/, (match, uuid) => `${match}.${hashValue}`);
                }

                return url;
              }

            };
            class CCLoader {
              constructor() {
                this._autoReleaseSetting = Object.create(null);
                this._parseLoadResArgs = parseLoadResArgs;
              }

              set onProgress(val) {
                setDefaultProgressCallback(val);
              }

              get _cache() {
                return assets._map;
              }

              load(res, progressCallback, completeCallback) {
                if (completeCallback === undefined) {
                  if (progressCallback !== undefined) {
                    completeCallback = progressCallback;
                    progressCallback = null;
                  }
                }

                const requests = Array.isArray(res) ? res : [res];

                for (let i = 0; i < requests.length; i++) {
                  const item = requests[i];

                  if (typeof item === 'string') {
                    requests[i] = {
                      url: item,
                      __isNative__: true
                    };
                  } else {
                    if (item.type) {
                      item.ext = `.${item.type}`;
                      item.type = undefined;
                    }

                    if (item.url) {
                      item.__isNative__ = true;
                    }
                  }
                }

                const images = [];
                const audios = [];
                assetManager.loadAny(requests, null, (finish, total, item) => {
                  if (item.content) {
                    if (ImageFmts.includes(item.ext)) {
                      images.push(item.content);
                    } else if (AudioFmts.includes(item.ext)) {
                      audios.push(item.content);
                    }
                  }

                  if (progressCallback) {
                    progressCallback(finish, total, item);
                  }
                }, (err, native) => {
                  let out = null;

                  if (!err) {
                    native = Array.isArray(native) ? native : [native];

                    for (let i = 0; i < native.length; i++) {
                      const item = native[i];

                      if (!(item instanceof Asset)) {
                        let asset = item;
                        const url = requests[i].url;

                        if (images.includes(asset)) {
                          factory.create(url, item, '.png', {}, (err, image) => {
                            asset = native[i] = image;
                          });
                        } else if (audios.includes(asset)) {
                          factory.create(url, item, '.mp3', {}, (err, audio) => {
                            asset = native[i] = audio;
                          });
                        }

                        assets.add(url, asset);
                      }
                    }

                    if (native.length > 1) {
                      const map = Object.create(null);
                      native.forEach(asset => {
                        map[asset._uuid] = asset;
                      });
                      out = {
                        isCompleted: GetTrue,
                        _map: map
                      };
                    } else {
                      out = native[0];
                    }
                  }

                  if (completeCallback) {
                    completeCallback(err, out);
                  }
                });
              }

              getXMLHttpRequest() {
                return new XMLHttpRequest();
              }

              getItem(id) {
                return assetManager.assets.has(id) ? {
                  content: assetManager.assets.get(id)
                } : null;
              }

              loadRes(url, type, progressCallback, completeCallback) {
                const {
                  type: _type,
                  onProgress,
                  onComplete
                } = this._parseLoadResArgs(type, progressCallback, completeCallback);

                const extname$1 = extname(url);

                if (extname$1 && !resources.getInfoWithPath(url, _type)) {
                  url = url.slice(0, -extname$1.length);
                }

                resources.load(url, _type, onProgress, onComplete);
              }

              loadResArray(urls, type, progressCallback, completeCallback) {
                const {
                  type: _type,
                  onProgress,
                  onComplete
                } = this._parseLoadResArgs(type, progressCallback, completeCallback);

                urls.forEach((url, i) => {
                  const extname$1 = extname(url);

                  if (extname$1 && !resources.getInfoWithPath(url, _type)) {
                    urls[i] = url.slice(0, -extname$1.length);
                  }
                });
                resources.load(urls, _type, onProgress, onComplete);
              }

              loadResDir(url, type, progressCallback, completeCallback) {
                const {
                  type: _type,
                  onProgress,
                  onComplete
                } = this._parseLoadResArgs(type, progressCallback, completeCallback);

                resources.loadDir(url, _type, onProgress, (err, out) => {
                  let urls = [];

                  if (!err) {
                    const infos = resources.getDirWithPath(url, _type);
                    urls = infos.map(info => info.path);
                  }

                  if (onComplete) {
                    onComplete(err, out, urls);
                  }
                });
              }

              getRes(url, type) {
                return assets.has(url) ? assets.get(url) : resources.get(url, type);
              }

              getResCount() {
                return assets.count;
              }

              getDependsRecursively(owner) {
                if (!owner) {
                  return [];
                }

                const uuid = typeof owner === 'string' ? owner : owner._uuid;
                return dependUtil.getDepsRecursively(uuid).concat([uuid]);
              }

              get md5Pipe() {
                return md5Pipe;
              }

              get downloader() {
                return downloader;
              }

              get loader() {
                return assetManager.parser;
              }

              addDownloadHandlers(extMap) {
                const handler = Object.create(null);

                for (const type in extMap) {
                  const func = extMap[type];

                  handler[`.${type}`] = (url, options, onComplete) => {
                    func({
                      url
                    }, onComplete);
                  };
                }

                downloader.register(handler);
              }

              addLoadHandlers(extMap) {
                const handler = Object.create(null);

                for (const type in extMap) {
                  const func = extMap[type];

                  handler[`.${type}`] = (file, options, onComplete) => {
                    func({
                      content: file
                    }, onComplete);
                  };
                }

                parser.register(handler);
              }

              release(asset) {
                if (Array.isArray(asset)) {
                  for (let i = 0; i < asset.length; i++) {
                    let key = asset[i];

                    if (typeof key === 'string') {
                      key = assets.get(key);
                    }

                    assetManager.releaseAsset(key);
                  }
                } else if (asset) {
                  if (typeof asset === 'string') {
                    asset = assets.get(asset);
                  }

                  assetManager.releaseAsset(asset);
                }
              }

              releaseAsset(asset) {
                assetManager.releaseAsset(asset);
              }

              releaseRes(res, type) {
                resources.release(res, type);
              }

              releaseAll() {
                assetManager.releaseAll();
                assets.clear();
              }

              removeItem(id) {
                return !!assets.remove(id);
              }

              setAutoRelease(asset, autoRelease) {
                if (typeof asset === 'object') {
                  asset = asset._uuid;
                }

                this._autoReleaseSetting[asset] = !!autoRelease;
              }

              setAutoReleaseRecursively(asset, autoRelease) {
                if (typeof asset === 'object') {
                  asset = asset._uuid;
                }

                autoRelease = !!autoRelease;
                this._autoReleaseSetting[asset] = autoRelease;
                const depends = dependUtil.getDepsRecursively(asset);

                for (let i = 0; i < depends.length; i++) {
                  this._autoReleaseSetting[depends[i]] = autoRelease;
                }
              }

              isAutoRelease(asset) {
                if (typeof asset === 'object') {
                  asset = asset._uuid;
                }

                return !!this._autoReleaseSetting[asset];
              }

            } exports('fz', CCLoader);
            const loader = exports('fA', new CCLoader());
            const AssetLibrary = exports('fB', {
              init(options) {
                options.importBase = options.libraryPath;
                options.nativeBase =  options.rawAssetsBase ;
                assetManager.init(options);

                if (options.rawAssets) {
                  resources.init({
                    base: '',
                    deps: [],
                    scenes: {},
                    redirect: [],
                    debug: true,
                    packs: {},
                    types: [],
                    versions: {
                      import: [],
                      native: []
                    },
                    name: BuiltinBundleName.RESOURCES,
                    importBase: options.importBase,
                    nativeBase: options.nativeBase,
                    paths: options.rawAssets.assets,
                    uuids: Object.keys(options.rawAssets.assets)
                  });
                }
              },

              loadAsset(uuid, callback, options) {
                assetManager.loadAny(uuid, callback);
              }

            });
            const url = exports('fC', {});
            replaceProperty(url, 'url', [{
              name: 'normalize',
              target: assetManager.utils,
              targetName: 'assetManager.utils',
              newName: 'normalize'
            }, {
              name: 'raw',
              targetName: 'Asset.prototype',
              newName: 'nativeUrl',
              customFunction: url => {
                if (url.startsWith('resources/')) {
                  return transform({
                    path: changeExtname(url.substr(10)),
                    bundle: BuiltinBundleName.RESOURCES,
                    __isNative__: true,
                    ext: extname(url)
                  });
                }

                return '';
              }
            }]);
            removeProperty(AssetLibrary, 'AssetLibrary', [{
              name: 'getLibUrlNoExt',
              suggest: 'AssetLibrary.getLibUrlNoExt was removed, if you want to transform url, please use cc.assetManager.utils.getUrlWithUuid instead'
            }, {
              name: 'queryAssetInfo',
              suggest: 'AssetLibrary.queryAssetInfo was removed'
            }]);
            removeProperty(loader, 'loader', [{
              name: 'releaseResDir',
              suggest: 'loader.releaseResDir was removed, please use assetManager.releaseAsset instead'
            }, {
              name: 'flowInDeps',
              suggest: 'loader.flowInDeps was removed'
            }, {
              name: 'assetLoader',
              suggest: 'cc.loader.assetLoader was removed, assetLoader and md5Pipe were merged into cc.assetManager.transformPipeline'
            }]);
            replaceProperty(legacyCC, 'cc', [{
              name: 'loader',
              newName: 'assetManager',
              logTimes: 1,
              customGetter: () => loader
            }, {
              name: 'AssetLibrary',
              newName: 'assetManager',
              logTimes: 1,
              customGetter: () => AssetLibrary
            }, {
              name: 'Pipeline',
              target: AssetManager,
              targetName: 'AssetManager',
              newName: 'Pipeline',
              logTimes: 1
            }, {
              name: 'url',
              targetName: 'assetManager',
              newName: 'utils',
              logTimes: 1,
              customGetter: () => url
            }]);
            removeProperty(legacyCC, 'cc', [{
              name: 'LoadingItems',
              suggest: getError(1400, 'cc.LoadingItems', 'cc.AssetManager.Task')
            }]);
            replaceProperty(macro, 'macro', [{
              name: 'DOWNLOAD_MAX_CONCURRENT',
              target: downloader,
              targetName: 'assetManager.downloader',
              newName: 'maxConcurrency'
            }]);
            replaceProperty(director, 'director', [{
              name: '_getSceneUuid',
              targetName: 'assetManager.main',
              newName: 'getSceneInfo',
              customFunction: sceneName => {
                if (assetManager.main) {
                  var _assetManager$main$ge;

                  return (_assetManager$main$ge = assetManager.main.getSceneInfo(sceneName)) === null || _assetManager$main$ge === void 0 ? void 0 : _assetManager$main$ge.uuid;
                }

                return '';
              }
            }]);
            replaceProperty(game, 'game', [{
              name: '_sceneInfos',
              targetName: 'assetManager.main',
              newName: 'getSceneInfo',
              customGetter: () => {
                const scenes = [];

                if (assetManager.main) {
                  assetManager.main.config.scenes.forEach(val => {
                    scenes.push(val);
                  });
                }

                return scenes;
              }
            }]);
            const _autoRelease = releaseManager._autoRelease;

            releaseManager._autoRelease = function (oldScene, newScene, persistNodes) {
              _autoRelease.call(releaseManager, oldScene, newScene, persistNodes);

              const releaseSettings = loader._autoReleaseSetting;
              const keys = Object.keys(releaseSettings);

              for (let i = 0; i < keys.length; i++) {
                const key = keys[i];

                if (releaseSettings[key] === true) {
                  const asset = assets.get(key);

                  if (asset) {
                    releaseManager.tryRelease(asset);
                  }
                }
              }
            };

            var _dec$p, _dec2$a, _dec3$6, _dec4$4, _dec5$3, _dec6$2, _class$p, _class2$n, _descriptor$k, _descriptor2$c, _descriptor3$9, _descriptor4$8, _descriptor5$6, _temp$o;
            let EventHandler = exports('dn', (_dec$p = ccclass('cc.ClickEvent'), _dec2$a = type(legacyCC.Node), _dec3$6 = tooltip(), _dec4$4 = tooltip(), _dec5$3 = tooltip(), _dec6$2 = tooltip(), _dec$p(_class$p = (_class2$n = (_temp$o = class EventHandler {
              constructor() {
                _initializerDefineProperty(this, "target", _descriptor$k, this);

                _initializerDefineProperty(this, "component", _descriptor2$c, this);

                _initializerDefineProperty(this, "_componentId", _descriptor3$9, this);

                _initializerDefineProperty(this, "handler", _descriptor4$8, this);

                _initializerDefineProperty(this, "customEventData", _descriptor5$6, this);
              }

              get _componentName() {
                this._genCompIdIfNeeded();

                return this._compId2Name(this._componentId);
              }

              set _componentName(value) {
                this._componentId = this._compName2Id(value);
              }

              static emitEvents(events, ...args) {
                for (let i = 0, l = events.length; i < l; i++) {
                  const event = events[i];

                  if (!(event instanceof EventHandler)) {
                    continue;
                  }

                  event.emit(args);
                }
              }

              emit(params) {
                const target = this.target;

                if (!legacyCC.isValid(target)) {
                  return;
                }

                this._genCompIdIfNeeded();

                const compType = legacyCC.js._getClassById(this._componentId);

                const comp = target.getComponent(compType);

                if (!legacyCC.isValid(comp)) {
                  return;
                }

                const handler = comp[this.handler];

                if (typeof handler !== 'function') {
                  return;
                }

                if (this.customEventData != null && this.customEventData !== '') {
                  params = params.slice();
                  params.push(this.customEventData);
                }

                handler.apply(comp, params);
              }

              _compName2Id(compName) {
                const comp = legacyCC.js.getClassByName(compName);
                return legacyCC.js._getClassId(comp);
              }

              _compId2Name(compId) {
                const comp = legacyCC.js._getClassById(compId);

                return legacyCC.js.getClassName(comp);
              }

              _genCompIdIfNeeded() {
                if (!this._componentId) {
                  this._componentName = this.component;
                  this.component = '';
                }
              }

            }, _temp$o), (_descriptor$k = _applyDecoratedDescriptor(_class2$n.prototype, "target", [serializable, _dec2$a, _dec3$6], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _descriptor2$c = _applyDecoratedDescriptor(_class2$n.prototype, "component", [serializable, editable, _dec4$4], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _descriptor3$9 = _applyDecoratedDescriptor(_class2$n.prototype, "_componentId", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _descriptor4$8 = _applyDecoratedDescriptor(_class2$n.prototype, "handler", [serializable, editable, _dec5$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _descriptor5$6 = _applyDecoratedDescriptor(_class2$n.prototype, "customEventData", [serializable, editable, _dec6$2], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            })), _class2$n)) || _class$p));
            legacyCC.Component.EventHandler = EventHandler;

            var _dec$q, _dec2$b, _dec3$7, _dec4$5, _dec5$4, _dec6$3, _dec7$2, _dec8$2, _dec9$2, _dec10$2, _dec11$2, _dec12$2, _dec13$2, _dec14$2, _dec15$2, _dec16$2, _dec17$2, _dec18$2, _dec19$2, _dec20$2, _dec21$2, _dec22$2, _dec23$2, _dec24$2, _dec25$2, _dec26$2, _dec27$1, _dec28$1, _dec29$1, _dec30$1, _dec31$1, _dec32$1, _dec33$1, _dec34$1, _dec35$1, _dec36$1, _dec37$1, _dec38$1, _dec39$1, _dec40$1, _dec41$1, _dec42$1, _dec43$1, _dec44$1, _dec45$1, _class$q, _class2$o, _descriptor$l, _descriptor2$d, _descriptor3$a, _descriptor4$9, _descriptor5$7, _descriptor6$3, _descriptor7$3, _descriptor8$3, _descriptor9$2, _descriptor10$2, _descriptor11$2, _descriptor12$2, _descriptor13$2, _descriptor14$2, _descriptor15$2, _descriptor16$2, _descriptor17$2, _descriptor18$2, _class3$a, _temp$p;

            const _temp_vec3_1 = new Vec3();

            const ProjectionType = Enum(CameraProjection);
            const FOVAxis = Enum(CameraFOVAxis);
            const Aperture = Enum(CameraAperture);
            const Shutter = Enum(CameraShutter);
            const ISO = Enum(CameraISO);
            const ClearFlag = Enum({
              SKYBOX: SKYBOX_FLAG | ClearFlagBit.DEPTH_STENCIL,
              SOLID_COLOR: ClearFlagBit.ALL,
              DEPTH_ONLY: ClearFlagBit.DEPTH_STENCIL,
              DONT_CLEAR: ClearFlagBit.NONE
            });
            let Camera$1 = exports('d0', (_dec$q = ccclass('cc.Camera'), _dec2$b = help(), _dec3$7 = menu(), _dec4$5 = displayOrder(), _dec5$4 = tooltip(), _dec6$3 = type(Layers.BitMask), _dec7$2 = displayOrder(), _dec8$2 = tooltip(), _dec9$2 = type(ClearFlag), _dec10$2 = displayOrder(), _dec11$2 = tooltip(), _dec12$2 = displayOrder(), _dec13$2 = tooltip(), _dec14$2 = displayOrder(), _dec15$2 = tooltip(), _dec16$2 = displayOrder(), _dec17$2 = tooltip(), _dec18$2 = type(ProjectionType), _dec19$2 = displayOrder(), _dec20$2 = tooltip(), _dec21$2 = type(FOVAxis), _dec22$2 = displayOrder(), _dec23$2 = tooltip(), _dec24$2 = displayOrder(), _dec25$2 = tooltip(), _dec26$2 = displayOrder(), _dec27$1 = tooltip(), _dec28$1 = displayOrder(), _dec29$1 = tooltip(), _dec30$1 = displayOrder(), _dec31$1 = tooltip(), _dec32$1 = type(Aperture), _dec33$1 = displayOrder(), _dec34$1 = tooltip(), _dec35$1 = type(Shutter), _dec36$1 = displayOrder(), _dec37$1 = tooltip(), _dec38$1 = type(ISO), _dec39$1 = displayOrder(), _dec40$1 = tooltip(), _dec41$1 = displayOrder(), _dec42$1 = tooltip(), _dec43$1 = type(RenderTexture), _dec44$1 = displayOrder(), _dec45$1 = tooltip(), _dec$q(_class$q = _dec2$b(_class$q = _dec3$7(_class$q = executeInEditMode(_class$q = (_class2$o = (_temp$p = _class3$a = class Camera extends Component {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "_projection", _descriptor$l, this);

                _initializerDefineProperty(this, "_priority", _descriptor2$d, this);

                _initializerDefineProperty(this, "_fov", _descriptor3$a, this);

                _initializerDefineProperty(this, "_fovAxis", _descriptor4$9, this);

                _initializerDefineProperty(this, "_orthoHeight", _descriptor5$7, this);

                _initializerDefineProperty(this, "_near", _descriptor6$3, this);

                _initializerDefineProperty(this, "_far", _descriptor7$3, this);

                _initializerDefineProperty(this, "_color", _descriptor8$3, this);

                _initializerDefineProperty(this, "_depth", _descriptor9$2, this);

                _initializerDefineProperty(this, "_stencil", _descriptor10$2, this);

                _initializerDefineProperty(this, "_clearFlags", _descriptor11$2, this);

                _initializerDefineProperty(this, "_rect", _descriptor12$2, this);

                _initializerDefineProperty(this, "_aperture", _descriptor13$2, this);

                _initializerDefineProperty(this, "_shutter", _descriptor14$2, this);

                _initializerDefineProperty(this, "_iso", _descriptor15$2, this);

                _initializerDefineProperty(this, "_screenScale", _descriptor16$2, this);

                _initializerDefineProperty(this, "_visibility", _descriptor17$2, this);

                _initializerDefineProperty(this, "_targetTexture", _descriptor18$2, this);

                this._camera = null;
                this._inEditorMode = false;
                this._flows = undefined;
              }

              get camera() {
                return this._camera;
              }

              get priority() {
                return this._priority;
              }

              set priority(val) {
                this._priority = val;

                if (this._camera) {
                  this._camera.priority = val;
                }
              }

              get visibility() {
                return this._visibility;
              }

              set visibility(val) {
                this._visibility = val;

                if (this._camera) {
                  this._camera.visibility = val;
                }
              }

              get clearFlags() {
                return this._clearFlags;
              }

              set clearFlags(val) {
                this._clearFlags = val;

                if (this._camera) {
                  this._camera.clearFlag = val;
                }
              }

              get clearColor() {
                return this._color;
              }

              set clearColor(val) {
                this._color.set(val);

                if (this._camera) {
                  this._camera.clearColor = this._color;
                }
              }

              get clearDepth() {
                return this._depth;
              }

              set clearDepth(val) {
                this._depth = val;

                if (this._camera) {
                  this._camera.clearDepth = val;
                }
              }

              get clearStencil() {
                return this._stencil;
              }

              set clearStencil(val) {
                this._stencil = val;

                if (this._camera) {
                  this._camera.clearStencil = val;
                }
              }

              get projection() {
                return this._projection;
              }

              set projection(val) {
                this._projection = val;

                if (this._camera) {
                  this._camera.projectionType = val;
                }
              }

              get fovAxis() {
                return this._fovAxis;
              }

              set fovAxis(val) {
                if (val === this._fovAxis) {
                  return;
                }

                this._fovAxis = val;

                if (this._camera) {
                  this._camera.fovAxis = val;

                  if (val === CameraFOVAxis.VERTICAL) {
                    this.fov = this._fov * this._camera.aspect;
                  } else {
                    this.fov = this._fov / this._camera.aspect;
                  }
                }
              }

              get fov() {
                return this._fov;
              }

              set fov(val) {
                this._fov = val;

                if (this._camera) {
                  this._camera.fov = toRadian(val);
                }
              }

              get orthoHeight() {
                return this._orthoHeight;
              }

              set orthoHeight(val) {
                this._orthoHeight = val;

                if (this._camera) {
                  this._camera.orthoHeight = val;
                }
              }

              get near() {
                return this._near;
              }

              set near(val) {
                this._near = val;

                if (this._camera) {
                  this._camera.nearClip = val;
                }
              }

              get far() {
                return this._far;
              }

              set far(val) {
                this._far = val;

                if (this._camera) {
                  this._camera.farClip = val;
                }
              }

              get aperture() {
                return this._aperture;
              }

              set aperture(val) {
                this._aperture = val;

                if (this._camera) {
                  this._camera.aperture = val;
                }
              }

              get shutter() {
                return this._shutter;
              }

              set shutter(val) {
                this._shutter = val;

                if (this._camera) {
                  this._camera.shutter = val;
                }
              }

              get iso() {
                return this._iso;
              }

              set iso(val) {
                this._iso = val;

                if (this._camera) {
                  this._camera.iso = val;
                }
              }

              get rect() {
                return this._rect;
              }

              set rect(val) {
                this._rect = val;

                if (this._camera) {
                  this._camera.viewport = val;
                }
              }

              get targetTexture() {
                return this._targetTexture;
              }

              set targetTexture(value) {
                if (this._targetTexture === value) {
                  return;
                }

                const old = this._targetTexture;
                this._targetTexture = value;

                this._chechTargetTextureEvent(old);

                this._updateTargetTexture();

                if (!value && this._camera) {
                  this._camera.changeTargetWindow( null);

                  this._camera.isWindowSize = true;
                }
              }

              get screenScale() {
                return this._screenScale;
              }

              set screenScale(val) {
                this._screenScale = val;

                if (this._camera) {
                  this._camera.screenScale = val;
                }
              }

              get inEditorMode() {
                return this._inEditorMode;
              }

              set inEditorMode(value) {
                this._inEditorMode = value;

                if (this._camera) {
                  this._camera.changeTargetWindow(value ? legacyCC.director.root && legacyCC.director.root.mainWindow : legacyCC.director.root && legacyCC.director.root.tempWindow);
                }
              }

              onLoad() {
                this._createCamera();
              }

              onEnable() {
                this.node.hasChangedFlags |= TransformBit.POSITION;

                if (this._camera) {
                  this._attachToScene();
                }
              }

              onDisable() {
                if (this._camera) {
                  this._detachFromScene();
                }
              }

              onDestroy() {
                if (this._camera) {
                  this._camera.destroy();

                  this._camera = null;
                }

                if (this._targetTexture) {
                  this._targetTexture.off('resize');
                }
              }

              screenPointToRay(x, y, out) {
                if (!out) {
                  out = Ray.create();
                }

                if (this._camera) {
                  this._camera.screenPointToRay(out, x, y);
                }

                return out;
              }

              worldToScreen(worldPos, out) {
                if (!out) {
                  out = new Vec3();
                }

                if (this._camera) {
                  this._camera.worldToScreen(out, worldPos);
                }

                return out;
              }

              screenToWorld(screenPos, out) {
                if (!out) {
                  out = this.node.getWorldPosition();
                }

                if (this._camera) {
                  this._camera.screenToWorld(out, screenPos);
                }

                return out;
              }

              convertToUINode(wpos, uiNode, out) {
                if (!out) {
                  out = new Vec3();
                }

                if (!this._camera) {
                  return out;
                }

                this.worldToScreen(wpos, _temp_vec3_1);
                const cmp = uiNode.getComponent('cc.UITransform');
                const designSize = view.getVisibleSize();
                const xoffset = _temp_vec3_1.x - this._camera.width * 0.5;
                const yoffset = _temp_vec3_1.y - this._camera.height * 0.5;
                _temp_vec3_1.x = xoffset / legacyCC.view.getScaleX() + designSize.width * 0.5;
                _temp_vec3_1.y = yoffset / legacyCC.view.getScaleY() + designSize.height * 0.5;

                if (cmp) {
                  cmp.convertToNodeSpaceAR(_temp_vec3_1, out);
                }

                return out;
              }

              _createCamera() {
                if (!this._camera) {
                  this._camera = legacyCC.director.root.createCamera();

                  this._camera.initialize({
                    name: this.node.name,
                    node: this.node,
                    projection: this._projection,
                    window: this._inEditorMode ? legacyCC.director.root && legacyCC.director.root.mainWindow : legacyCC.director.root && legacyCC.director.root.tempWindow,
                    priority: this._priority
                  });

                  this._camera.viewport = this._rect;
                  this._camera.fovAxis = this._fovAxis;
                  this._camera.fov = toRadian(this._fov);
                  this._camera.orthoHeight = this._orthoHeight;
                  this._camera.nearClip = this._near;
                  this._camera.farClip = this._far;
                  this._camera.clearColor = this._color;
                  this._camera.clearDepth = this._depth;
                  this._camera.clearStencil = this._stencil;
                  this._camera.clearFlag = this._clearFlags;
                  this._camera.visibility = this._visibility;
                  this._camera.aperture = this._aperture;
                  this._camera.shutter = this._shutter;
                  this._camera.iso = this._iso;
                }

                this._updateTargetTexture();
              }

              _attachToScene() {
                if (!this.node.scene || !this._camera) {
                  return;
                }

                if (this._camera && this._camera.scene) {
                  this._camera.scene.removeCamera(this._camera);
                }

                const rs = this._getRenderScene();

                rs.addCamera(this._camera);
              }

              _detachFromScene() {
                if (this._camera && this._camera.scene) {
                  this._camera.scene.removeCamera(this._camera);
                }
              }

              _chechTargetTextureEvent(old) {
                const resizeFunc = window => {
                  if (this._camera) {
                    this._camera.setFixedSize(window.width, window.height);
                  }
                };

                if (old) {
                  old.off('resize');
                }

                if (this._targetTexture) {
                  this._targetTexture.on('resize', resizeFunc, this);
                }
              }

              _updateTargetTexture() {
                if (!this._camera) {
                  return;
                }

                if (this._targetTexture) {
                  const window = this._targetTexture.window;

                  this._camera.changeTargetWindow(window);

                  this._camera.setFixedSize(window.width, window.height);
                }
              }

            }, _class3$a.ProjectionType = ProjectionType, _class3$a.FOVAxis = FOVAxis, _class3$a.ClearFlag = ClearFlag, _class3$a.Aperture = Aperture, _class3$a.Shutter = Shutter, _class3$a.ISO = ISO, _temp$p), (_descriptor$l = _applyDecoratedDescriptor(_class2$o.prototype, "_projection", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return ProjectionType.PERSPECTIVE;
              }
            }), _descriptor2$d = _applyDecoratedDescriptor(_class2$o.prototype, "_priority", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor3$a = _applyDecoratedDescriptor(_class2$o.prototype, "_fov", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 45;
              }
            }), _descriptor4$9 = _applyDecoratedDescriptor(_class2$o.prototype, "_fovAxis", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return FOVAxis.VERTICAL;
              }
            }), _descriptor5$7 = _applyDecoratedDescriptor(_class2$o.prototype, "_orthoHeight", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 10;
              }
            }), _descriptor6$3 = _applyDecoratedDescriptor(_class2$o.prototype, "_near", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1;
              }
            }), _descriptor7$3 = _applyDecoratedDescriptor(_class2$o.prototype, "_far", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1000;
              }
            }), _descriptor8$3 = _applyDecoratedDescriptor(_class2$o.prototype, "_color", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Color('#333333');
              }
            }), _descriptor9$2 = _applyDecoratedDescriptor(_class2$o.prototype, "_depth", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1;
              }
            }), _descriptor10$2 = _applyDecoratedDescriptor(_class2$o.prototype, "_stencil", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor11$2 = _applyDecoratedDescriptor(_class2$o.prototype, "_clearFlags", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return ClearFlag.SOLID_COLOR;
              }
            }), _descriptor12$2 = _applyDecoratedDescriptor(_class2$o.prototype, "_rect", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return new Rect(0, 0, 1, 1);
              }
            }), _descriptor13$2 = _applyDecoratedDescriptor(_class2$o.prototype, "_aperture", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Aperture.F16_0;
              }
            }), _descriptor14$2 = _applyDecoratedDescriptor(_class2$o.prototype, "_shutter", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Shutter.D125;
              }
            }), _descriptor15$2 = _applyDecoratedDescriptor(_class2$o.prototype, "_iso", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return ISO.ISO100;
              }
            }), _descriptor16$2 = _applyDecoratedDescriptor(_class2$o.prototype, "_screenScale", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1;
              }
            }), _descriptor17$2 = _applyDecoratedDescriptor(_class2$o.prototype, "_visibility", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return CAMERA_DEFAULT_MASK;
              }
            }), _descriptor18$2 = _applyDecoratedDescriptor(_class2$o.prototype, "_targetTexture", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            }), _applyDecoratedDescriptor(_class2$o.prototype, "priority", [_dec4$5, _dec5$4], Object.getOwnPropertyDescriptor(_class2$o.prototype, "priority"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "visibility", [_dec6$3, _dec7$2, _dec8$2], Object.getOwnPropertyDescriptor(_class2$o.prototype, "visibility"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "clearFlags", [_dec9$2, _dec10$2, _dec11$2], Object.getOwnPropertyDescriptor(_class2$o.prototype, "clearFlags"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "clearColor", [_dec12$2, _dec13$2], Object.getOwnPropertyDescriptor(_class2$o.prototype, "clearColor"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "clearDepth", [_dec14$2, _dec15$2], Object.getOwnPropertyDescriptor(_class2$o.prototype, "clearDepth"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "clearStencil", [_dec16$2, _dec17$2], Object.getOwnPropertyDescriptor(_class2$o.prototype, "clearStencil"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "projection", [_dec18$2, _dec19$2, _dec20$2], Object.getOwnPropertyDescriptor(_class2$o.prototype, "projection"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "fovAxis", [_dec21$2, _dec22$2, _dec23$2], Object.getOwnPropertyDescriptor(_class2$o.prototype, "fovAxis"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "fov", [_dec24$2, _dec25$2], Object.getOwnPropertyDescriptor(_class2$o.prototype, "fov"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "orthoHeight", [_dec26$2, _dec27$1], Object.getOwnPropertyDescriptor(_class2$o.prototype, "orthoHeight"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "near", [_dec28$1, _dec29$1], Object.getOwnPropertyDescriptor(_class2$o.prototype, "near"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "far", [_dec30$1, _dec31$1], Object.getOwnPropertyDescriptor(_class2$o.prototype, "far"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "aperture", [_dec32$1, _dec33$1, _dec34$1], Object.getOwnPropertyDescriptor(_class2$o.prototype, "aperture"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "shutter", [_dec35$1, _dec36$1, _dec37$1], Object.getOwnPropertyDescriptor(_class2$o.prototype, "shutter"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "iso", [_dec38$1, _dec39$1, _dec40$1], Object.getOwnPropertyDescriptor(_class2$o.prototype, "iso"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "rect", [_dec41$1, _dec42$1], Object.getOwnPropertyDescriptor(_class2$o.prototype, "rect"), _class2$o.prototype), _applyDecoratedDescriptor(_class2$o.prototype, "targetTexture", [_dec43$1, _dec44$1, _dec45$1], Object.getOwnPropertyDescriptor(_class2$o.prototype, "targetTexture"), _class2$o.prototype)), _class2$o)) || _class$q) || _class$q) || _class$q) || _class$q));
            legacyCC.Camera = Camera$1;

            var _dec$r, _dec2$c, _dec3$8, _dec4$6, _dec5$5, _class$r, _class2$p, _descriptor$m, _descriptor2$e, _temp$q;
            const _matInsInfo = {
              parent: null,
              owner: null,
              subModelIdx: 0
            };
            let RenderableComponent = exports('bZ', (_dec$r = ccclass('cc.RenderableComponent'), _dec2$c = type([Material]), _dec3$8 = type(Material), _dec4$6 = displayOrder(), _dec5$5 = displayName(), _dec$r(_class$r = (_class2$p = (_temp$q = class RenderableComponent extends Component {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "_materials", _descriptor$m, this);

                _initializerDefineProperty(this, "_visFlags", _descriptor2$e, this);

                this._materialInstances = [];
                this._models = [];
              }

              get visibility() {
                return this._visFlags;
              }

              set visibility(val) {
                this._visFlags = val;

                this._onVisibilityChange(val);
              }

              get sharedMaterials() {
                return  this._materials;
              }

              set sharedMaterials(val) {
                for (let i = 0; i < val.length; i++) {
                  if (val[i] !== this._materials[i]) {
                    this.setMaterial(val[i], i);
                  }
                }

                if (val.length < this._materials.length) {
                  for (let i = val.length; i < this._materials.length; i++) {
                    this.setMaterial(null, i);
                  }

                  this._materials.splice(val.length);
                }
              }

              get materials() {
                for (let i = 0; i < this._materials.length; i++) {
                  this._materialInstances[i] = this.getMaterialInstance(i);
                }

                return this._materialInstances;
              }

              set materials(val) {
                const dLen = val.length - this._materials.length;

                if (dLen > 0) {
                  this._materials.length = val.length;
                  this._materialInstances.length = val.length;
                } else if (dLen < 0) {
                  for (let i = this._materials.length - dLen; i < this._materials.length; ++i) {
                    this.setMaterialInstance(i, null);
                  }
                }

                for (let i = 0; i < this._materialInstances.length; i++) {
                  if (this._materialInstances[i] != val[i]) {
                    this.setMaterialInstance(i, val[i]);
                  }
                }
              }

              get sharedMaterial() {
                return this.getMaterial(0);
              }

              getMaterial(idx) {
                if (idx < 0 || idx >= this._materials.length) {
                  return null;
                }

                return this._materials[idx];
              }

              setMaterial(material, index) {
                if (material && material instanceof MaterialInstance) {
                  console.error('Can\'t set a material instance to a sharedMaterial slot');
                }

                this._materials[index] = material;
                const inst = this._materialInstances[index];

                if (inst) {
                  if (inst.parent !== this._materials[index]) {
                    inst.destroy();
                    this._materialInstances[index] = null;

                    this._onMaterialModified(index, this._materials[index]);
                  }
                } else {
                  this._onMaterialModified(index, this._materials[index]);
                }
              }

              get material() {
                return this.getMaterialInstance(0);
              }

              set material(val) {
                if (this._materials.length === 1 && this._materials[0] === val) {
                  return;
                }

                this.setMaterialInstance(0, val);
              }

              getMaterialInstance(idx) {
                const mat = this._materials[idx];

                if (!mat) {
                  return null;
                }

                if (!this._materialInstances[idx]) {
                  _matInsInfo.parent = this._materials[idx];
                  _matInsInfo.owner = this;
                  _matInsInfo.subModelIdx = idx;
                  const instantiated = new MaterialInstance(_matInsInfo);
                  this.setMaterialInstance(idx, instantiated);
                }

                return this._materialInstances[idx];
              }

              setMaterialInstance(index, matInst) {
                if (matInst && matInst.parent) {
                  if (matInst !== this._materialInstances[index]) {
                    this._materialInstances[index] = matInst;

                    this._onMaterialModified(index, matInst);
                  }
                } else if (matInst !== this._materials[index]) {
                  this.setMaterial(matInst, index);
                }
              }

              getRenderMaterial(index) {
                return this._materialInstances[index] || this._materials[index];
              }

              _collectModels() {
                return this._models;
              }

              _attachToScene() {}

              _detachFromScene() {}

              _onMaterialModified(index, material) {}

              _onRebuildPSO(index, material) {}

              _clearMaterials() {}

              _onVisibilityChange(val) {}

            }, _temp$q), (_descriptor$m = _applyDecoratedDescriptor(_class2$p.prototype, "_materials", [_dec2$c], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor2$e = _applyDecoratedDescriptor(_class2$p.prototype, "_visFlags", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return Layers.Enum.NONE;
              }
            }), _applyDecoratedDescriptor(_class2$p.prototype, "sharedMaterials", [_dec3$8, _dec4$6, _dec5$5], Object.getOwnPropertyDescriptor(_class2$p.prototype, "sharedMaterials"), _class2$p.prototype)), _class2$p)) || _class$r));
            legacyCC.RenderableComponent = RenderableComponent;

            replaceProperty(Camera$1, 'Camera', [{
              name: 'CameraClearFlag',
              newName: 'ClearFlag'
            }]);
            replaceProperty(Camera$1.prototype, 'Camera.prototype', [{
              name: 'color',
              newName: 'clearColor'
            }, {
              name: 'depth',
              newName: 'clearDepth'
            }, {
              name: 'stencil',
              newName: 'clearStencil'
            }]);
            legacyCC.CameraComponent = Camera$1;
            js.setClassAlias(Camera$1, 'cc.CameraComponent');

            var _dec$s, _class$s, _class2$q, _descriptor$n, _temp$r, _dec2$d, _class4$2, _class5$2, _descriptor2$f, _temp2$2;
            function isPropertyPath(path) {
              return typeof path === 'string' || typeof path === 'number';
            }
            function isCustomPath(path, constructor) {
              return path instanceof constructor;
            }
            let HierarchyPath = exports('b9', (_dec$s = ccclass('cc.animation.HierarchyPath'), _dec$s(_class$s = (_class2$q = (_temp$r = class HierarchyPath {
              constructor(path) {
                _initializerDefineProperty(this, "path", _descriptor$n, this);

                this.path = path || '';
              }

              get(target) {
                if (!(target instanceof Node$1)) {
                  warn(`Target of hierarchy path should be of type Node.`);
                  return null;
                }

                const result = target.getChildByPath(this.path);

                if (!result) {
                  warn(`Node "${target.name}" has no path "${this.path}"`);
                  return null;
                }

                return result;
              }

            }, _temp$r), (_descriptor$n = _applyDecoratedDescriptor(_class2$q.prototype, "path", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            })), _class2$q)) || _class$s));
            let ComponentPath = exports('ba', (_dec2$d = ccclass('cc.animation.ComponentPath'), _dec2$d(_class4$2 = (_class5$2 = (_temp2$2 = class ComponentPath {
              constructor(component) {
                _initializerDefineProperty(this, "component", _descriptor2$f, this);

                this.component = component || '';
              }

              get(target) {
                if (!(target instanceof Node$1)) {
                  warn(`Target of component path should be of type Node.`);
                  return null;
                }

                const result = target.getComponent(this.component);

                if (!result) {
                  warn(`Node "${target.name}" has no component "${this.component}"`);
                  return null;
                }

                return result;
              }

            }, _temp2$2), (_descriptor2$f = _applyDecoratedDescriptor(_class5$2.prototype, "component", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            })), _class5$2)) || _class4$2));
            function evaluatePath(root, ...paths) {
              let result = root;

              for (let iPath = 0; iPath < paths.length; ++iPath) {
                const path = paths[iPath];

                if (isPropertyPath(path)) {
                  if (!(path in result)) {
                    warn(`Target object has no property "${path}"`);
                    return null;
                  } else {
                    result = result[path];
                  }
                } else {
                  result = path.get(result);
                }

                if (result === null) {
                  break;
                }
              }

              return result;
            }

            var _dec$t, _class$t, _class2$r, _descriptor$o, _descriptor2$g, _descriptor3$b, _temp$s;
            let UniformProxyFactory = exports('b4', (_dec$t = ccclass('cc.animation.UniformProxyFactory'), _dec$t(_class$t = (_class2$r = (_temp$s = class UniformProxyFactory {
              constructor(uniformName, passIndex) {
                _initializerDefineProperty(this, "passIndex", _descriptor$o, this);

                _initializerDefineProperty(this, "uniformName", _descriptor2$g, this);

                _initializerDefineProperty(this, "channelIndex", _descriptor3$b, this);

                this.passIndex = passIndex || 0;
                this.uniformName = uniformName || '';
              }

              forTarget(target) {
                const pass = target.passes[this.passIndex];
                const handle = pass.getHandle(this.uniformName);

                if (!handle) {
                  throw new Error(`Material "${target.name}" has no uniform "${this.uniformName}"`);
                }

                const propertyType = Pass.getPropertyTypeFromHandle(handle);

                if (propertyType === PropertyType.BUFFER) {
                  const realHandle = this.channelIndex === undefined ? handle : pass.getHandle(this.uniformName, this.channelIndex, Type.FLOAT);

                  if (!realHandle) {
                    throw new Error(`Uniform "${this.uniformName} (in material ${target.name}) has no channel ${this.channelIndex}"`);
                  }

                  if (isUniformArray(pass, this.uniformName)) {
                    return {
                      set: value => {
                        pass.setUniformArray(realHandle, value);
                      }
                    };
                  }

                  return {
                    set: value => {
                      pass.setUniform(realHandle, value);
                    }
                  };
                }

                if (propertyType === PropertyType.TEXTURE) {
                  const binding = Pass.getBindingFromHandle(handle);
                  const prop = pass.properties[this.uniformName];
                  const texName = prop && prop.value ? `${prop.value}-texture` : getDefaultFromType(prop.type);
                  let dftTex = builtinResMgr.get(texName);

                  if (!dftTex) {
                    warn(`Illegal texture default value: ${texName}.`);
                    dftTex = builtinResMgr.get('default-texture');
                  }

                  return {
                    set: value => {
                      if (!value) {
                        value = dftTex;
                      }

                      const texture = value.getGFXTexture();

                      if (!texture || !texture.width || !texture.height) {
                        return;
                      }

                      pass.bindTexture(binding, texture);

                      if (value instanceof TextureBase) {
                        pass.bindSampler(binding, samplerLib.getSampler(legacyCC.game._gfxDevice, value.getSamplerHash()));
                      }
                    }
                  };
                }

                throw new Error(`Animations are not available for uniforms with property type ${propertyType}.`);
              }

            }, _temp$s), (_descriptor$o = _applyDecoratedDescriptor(_class2$r.prototype, "passIndex", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor2$g = _applyDecoratedDescriptor(_class2$r.prototype, "uniformName", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return '';
              }
            }), _descriptor3$b = _applyDecoratedDescriptor(_class2$r.prototype, "channelIndex", [float], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return undefined;
              }
            })), _class2$r)) || _class$t));

            function isUniformArray(pass, name) {
              for (const block of pass.shaderInfo.blocks) {
                for (const uniform of block.members) {
                  if (uniform.name === name) {
                    return uniform.count > 1;
                  }
                }
              }

              return false;
            }

            var _dec$u, _class$u, _class2$s, _descriptor$p, _temp$t, _dec2$e, _class4$3;
            let MorphWeightsValueProxy = exports('b5', (_dec$u = ccclass('cc.animation.MorphWeightsValueProxy'), _dec$u(_class$u = (_class2$s = (_temp$t = class MorphWeightsValueProxy {
              constructor() {
                _initializerDefineProperty(this, "subMeshIndex", _descriptor$p, this);
              }

              forTarget(target) {
                return {
                  set: value => {
                    target.setWeights(value, this.subMeshIndex);
                  }
                };
              }

            }, _temp$t), (_descriptor$p = _applyDecoratedDescriptor(_class2$s.prototype, "subMeshIndex", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            })), _class2$s)) || _class$u));
            let MorphWeightsAllValueProxy = exports('b6', (_dec2$e = ccclass('cc.animation.MorphWeightsAllValueProxy'), _dec2$e(_class4$3 = class MorphWeightsAllValueProxy {
              forTarget(target) {
                return {
                  set: value => {
                    var _target$mesh$struct$p, _target$mesh;

                    const nSubMeshes = (_target$mesh$struct$p = (_target$mesh = target.mesh) === null || _target$mesh === void 0 ? void 0 : _target$mesh.struct.primitives.length) !== null && _target$mesh$struct$p !== void 0 ? _target$mesh$struct$p : 0;

                    for (let iSubMesh = 0; iSubMesh < nSubMeshes; ++iSubMesh) {
                      target.setWeights(value, iSubMesh);
                    }
                  }
                };
              }

            }) || _class4$3));

            var _dec2$f, _class4$4, _class5$3, _descriptor4$a, _descriptor5$8, _descriptor6$4, _temp2$3;

            function makeCubicSplineValueConstructor(name, constructorX, scaleFx, scaleAndAdd) {
              var _dec, _class, _class2, _descriptor, _descriptor2, _descriptor3, _temp;

              let tempValue = new constructorX();
              let m0 = new constructorX();
              let m1 = new constructorX();
              let CubicSplineValueClass = (_dec = ccclass(name), _dec(_class = (_class2 = (_temp = class CubicSplineValueClass {
                constructor(dataPoint, inTangent, outTangent) {
                  _initializerDefineProperty(this, "dataPoint", _descriptor, this);

                  _initializerDefineProperty(this, "inTangent", _descriptor2, this);

                  _initializerDefineProperty(this, "outTangent", _descriptor3, this);

                  this.dataPoint = dataPoint || new constructorX();
                  this.inTangent = inTangent || new constructorX();
                  this.outTangent = outTangent || new constructorX();
                }

                lerp(to, t, dt) {
                  const p0 = this.dataPoint;
                  const p1 = to.dataPoint;
                  m0 = scaleFx(m0, this.inTangent, dt);
                  m1 = scaleFx(m1, to.outTangent, dt);
                  const t_3 = t * t * t;
                  const t_2 = t * t;
                  const f_0 = 2 * t_3 - 3 * t_2 + 1;
                  const f_1 = t_3 - 2 * t_2 + t;
                  const f_2 = -2 * t_3 + 3 * t_2;
                  const f_3 = t_3 - t_2;
                  tempValue = scaleFx(tempValue, p0, f_0);
                  tempValue = scaleAndAdd(tempValue, tempValue, m0, f_1);
                  tempValue = scaleAndAdd(tempValue, tempValue, p1, f_2);
                  tempValue = scaleAndAdd(tempValue, tempValue, m1, f_3);
                  return tempValue;
                }

                getNoLerp() {
                  return this.dataPoint;
                }

              }, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "dataPoint", [serializable], {
                configurable: true,
                enumerable: true,
                writable: true,
                initializer: function () {
                  return new constructorX();
                }
              }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "inTangent", [serializable], {
                configurable: true,
                enumerable: true,
                writable: true,
                initializer: function () {
                  return new constructorX();
                }
              }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "outTangent", [serializable], {
                configurable: true,
                enumerable: true,
                writable: true,
                initializer: function () {
                  return new constructorX();
                }
              })), _class2)) || _class);

              if (constructorX === Quat) {
                const lerp = CubicSplineValueClass.prototype.lerp;

                CubicSplineValueClass.prototype.lerp = function (to, t, dt) {
                  const result = lerp.call(this, to, t, dt);
                  Quat.normalize(result, result);
                  return result;
                };
              }

              return CubicSplineValueClass;
            }

            const CubicSplineVec2Value = exports('bc', makeCubicSplineValueConstructor('cc.CubicSplineVec2Value', Vec2, Vec2.multiplyScalar, Vec2.scaleAndAdd));
            legacyCC.CubicSplineVec2Value = CubicSplineVec2Value;
            const CubicSplineVec3Value = exports('bd', makeCubicSplineValueConstructor('cc.CubicSplineVec3Value', Vec3, Vec3.multiplyScalar, Vec3.scaleAndAdd));
            legacyCC.CubicSplineVec3Value = CubicSplineVec3Value;
            const CubicSplineVec4Value = exports('be', makeCubicSplineValueConstructor('cc.CubicSplineVec4Value', Vec4, Vec4.multiplyScalar, Vec4.scaleAndAdd));
            legacyCC.CubicSplineVec4Value = CubicSplineVec4Value;
            const CubicSplineQuatValue = exports('bf', makeCubicSplineValueConstructor('cc.CubicSplineQuatValue', Quat, Quat.multiplyScalar, Quat.scaleAndAdd));
            legacyCC.CubicSplineQuatValue = CubicSplineQuatValue;
            let CubicSplineNumberValue = exports('bg', (_dec2$f = ccclass('cc.CubicSplineNumberValue'), _dec2$f(_class4$4 = (_class5$3 = (_temp2$3 = class CubicSplineNumberValue {
              constructor(dataPoint, inTangent, outTangent) {
                _initializerDefineProperty(this, "dataPoint", _descriptor4$a, this);

                _initializerDefineProperty(this, "inTangent", _descriptor5$8, this);

                _initializerDefineProperty(this, "outTangent", _descriptor6$4, this);

                this.dataPoint = dataPoint;
                this.inTangent = inTangent;
                this.outTangent = outTangent;
              }

              lerp(to, t, dt) {
                const p0 = this.dataPoint;
                const p1 = to.dataPoint;
                const m0 = this.outTangent * dt;
                const m1 = to.inTangent * dt;
                const t_3 = t * t * t;
                const t_2 = t * t;
                const f_0 = 2 * t_3 - 3 * t_2 + 1;
                const f_1 = t_3 - 2 * t_2 + t;
                const f_2 = -2 * t_3 + 3 * t_2;
                const f_3 = t_3 - t_2;
                return p0 * f_0 + m0 * f_1 + p1 * f_2 + m1 * f_3;
              }

              getNoLerp() {
                return this.dataPoint;
              }

            }, _temp2$3), (_descriptor4$a = _applyDecoratedDescriptor(_class5$3.prototype, "dataPoint", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor5$8 = _applyDecoratedDescriptor(_class5$3.prototype, "inTangent", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor6$4 = _applyDecoratedDescriptor(_class5$3.prototype, "outTangent", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            })), _class5$3)) || _class4$4));
            legacyCC.CubicSplineNumberValue = CubicSplineNumberValue;

            function binarySearchEpsilon(array, value, EPSILON = 1e-6) {
              let low = 0;
              let high = array.length - 1;
              let middle = high >>> 1;

              for (; low <= high; middle = low + high >>> 1) {
                const test = array[middle];

                if (test > value + EPSILON) {
                  high = middle - 1;
                } else if (test < value - EPSILON) {
                  low = middle + 1;
                } else {
                  return middle;
                }
              }

              return ~low;
            }

            function bezier(C1, C2, C3, C4, t) {
              const t1 = 1 - t;
              return t1 * (t1 * (C1 + (C2 * 3 - C1) * t) + C3 * 3 * t * t) + C4 * t * t * t;
            }
            legacyCC.bezier = bezier;
            const cos = Math.cos;
            const acos = Math.acos;
            const max$2 = Math.max;
            const pi = Math.PI;
            const tau = 2 * pi;
            const sqrt = Math.sqrt;

            function crt(v) {
              if (v < 0) {
                return -Math.pow(-v, 1 / 3);
              } else {
                return Math.pow(v, 1 / 3);
              }
            }

            function cardano(curve, x) {
              const pa = x - 0;
              const pb = x - curve[0];
              const pc = x - curve[2];
              const pd = x - 1;
              const pa3 = pa * 3;
              const pb3 = pb * 3;
              const pc3 = pc * 3;
              const d = -pa + pb3 - pc3 + pd;
              const rd = 1 / d;
              const r3 = 1 / 3;
              const a = (pa3 - 6 * pb + pc3) * rd;
              const a3 = a * r3;
              const b = (-pa3 + pb3) * rd;
              const c = pa * rd;
              const p = (3 * b - a * a) * r3;
              const p3 = p * r3;
              const q = (2 * a * a * a - 9 * a * b + 27 * c) / 27;
              const q2 = q / 2;
              const discriminant = q2 * q2 + p3 * p3 * p3;
              let u1;
              let v1;
              let x1;
              let x2;
              let x3;

              if (discriminant < 0) {
                const mp3 = -p * r3;
                const mp33 = mp3 * mp3 * mp3;
                const r = sqrt(mp33);
                const t = -q / (2 * r);
                const cosphi = t < -1 ? -1 : t > 1 ? 1 : t;
                const phi = acos(cosphi);
                const crtr = crt(r);
                const t1 = 2 * crtr;
                x1 = t1 * cos(phi * r3) - a3;
                x2 = t1 * cos((phi + tau) * r3) - a3;
                x3 = t1 * cos((phi + 2 * tau) * r3) - a3;

                if (x1 >= 0 && x1 <= 1) {
                  if (x2 >= 0 && x2 <= 1) {
                    if (x3 >= 0 && x3 <= 1) {
                      return max$2(x1, x2, x3);
                    } else {
                      return max$2(x1, x2);
                    }
                  } else if (x3 >= 0 && x3 <= 1) {
                    return max$2(x1, x3);
                  } else {
                    return x1;
                  }
                } else if (x2 >= 0 && x2 <= 1) {
                  if (x3 >= 0 && x3 <= 1) {
                    return max$2(x2, x3);
                  } else {
                    return x2;
                  }
                } else {
                  return x3;
                }
              } else if (discriminant === 0) {
                u1 = q2 < 0 ? crt(-q2) : -crt(q2);
                x1 = 2 * u1 - a3;
                x2 = -u1 - a3;

                if (x1 >= 0 && x1 <= 1) {
                  if (x2 >= 0 && x2 <= 1) {
                    return max$2(x1, x2);
                  } else {
                    return x1;
                  }
                } else {
                  return x2;
                }
              } else {
                  const sd = sqrt(discriminant);
                  u1 = crt(-q2 + sd);
                  v1 = crt(q2 + sd);
                  x1 = u1 - v1 - a3;
                  return x1;
                }
            }

            function bezierByTime(controlPoints, x) {
              const percent = cardano(controlPoints, x);
              const p1y = controlPoints[1];
              const p2y = controlPoints[3];
              return ((1 - percent) * (p1y + (p2y - p1y) * percent) * 3 + percent * percent) * percent;
            }
            legacyCC.bezierByTime = bezierByTime;

            class RatioSampler {
              constructor(ratios) {
                this.ratios = void 0;
                this._findRatio = void 0;
                this.ratios = ratios;
                let currRatioDif;
                let lastRatioDif;
                let canOptimize = true;
                const EPSILON = 1e-6;

                for (let i = 1, l = ratios.length; i < l; i++) {
                  currRatioDif = ratios[i] - ratios[i - 1];

                  if (i === 1) {
                    lastRatioDif = currRatioDif;
                  } else if (Math.abs(currRatioDif - lastRatioDif) > EPSILON) {
                    canOptimize = false;
                    break;
                  }
                }

                this._findRatio = canOptimize ? quickFindIndex : binarySearchEpsilon;
              }

              sample(ratio) {
                return this._findRatio(this.ratios, ratio);
              }

            } exports('fR', RatioSampler);
            legacyCC.RatioSampler = RatioSampler;
            class AnimCurve {
              static Bezier(controlPoints) {
                return controlPoints;
              }

              constructor(propertyCurveData, duration) {
                this.types = undefined;
                this.type = null;
                this._values = [];
                this._lerp = undefined;
                this._duration = void 0;
                this._array = void 0;
                this._duration = duration;
                this._values = propertyCurveData.values;

                const getCurveType = easingMethod => {
                  if (typeof easingMethod === 'string') {
                    return easingMethod;
                  } else if (Array.isArray(easingMethod)) {
                    if (easingMethod[0] === easingMethod[1] && easingMethod[2] === easingMethod[3]) {
                      return AnimCurve.Linear;
                    } else {
                      return AnimCurve.Bezier(easingMethod);
                    }
                  } else {
                    return AnimCurve.Linear;
                  }
                };

                if (propertyCurveData.easingMethod !== undefined) {
                  this.type = getCurveType(propertyCurveData.easingMethod);
                } else if (Array.isArray(propertyCurveData.easingMethods)) {
                  this.types = propertyCurveData.easingMethods.map(getCurveType);
                } else if (propertyCurveData.easingMethods !== undefined) {
                  this.types = new Array(this._values.length).fill(null);

                  for (const index of Object.keys(propertyCurveData.easingMethods)) {
                    this.types[index] = getCurveType(propertyCurveData.easingMethods[index]);
                  }
                } else {
                  this.type = null;
                }

                const firstValue = propertyCurveData.values[0];
                const interpolate = propertyCurveData.interpolate === undefined ? true : propertyCurveData.interpolate;

                if (interpolate) {
                  this._lerp = selectLerpFx(firstValue);
                }

                if (propertyCurveData._arrayLength !== undefined) {
                  this._array = new Array(propertyCurveData._arrayLength);
                }
              }

              hasLerp() {
                return !!this._lerp;
              }

              valueAt(index) {
                if (this._array === undefined) {
                  const value = this._values[index];

                  if (value && value.getNoLerp) {
                    return value.getNoLerp();
                  } else {
                    return value;
                  }
                } else {
                  for (let i = 0; i < this._array.length; ++i) {
                    this._array[i] = this._values[this._array.length * index + i];
                  }

                  return this._array;
                }
              }

              valueBetween(ratio, from, fromRatio, to, toRatio) {
                if (this._lerp) {
                  const type = this.types ? this.types[from] : this.type;
                  const dRatio = toRatio - fromRatio;
                  let ratioBetweenFrames = (ratio - fromRatio) / dRatio;

                  if (type) {
                    ratioBetweenFrames = computeRatioByType(ratioBetweenFrames, type);
                  }

                  if (this._array === undefined) {
                    const fromVal = this._values[from];
                    const toVal = this._values[to];

                    const value = this._lerp(fromVal, toVal, ratioBetweenFrames, dRatio * this._duration);

                    return value;
                  } else {
                    for (let i = 0; i < this._array.length; ++i) {
                      const fromVal = this._values[this._array.length * from + i];
                      const toVal = this._values[this._array.length * to + i];
                      this._array[i] = this._lerp(fromVal, toVal, ratioBetweenFrames, dRatio * this._duration);
                    }

                    return this._array;
                  }
                } else if (this._array === undefined) {
                  return this.valueAt(from);
                } else {
                  for (let i = 0; i < this._array.length; ++i) {
                    this._array[i] = this._values[this._array.length * from + i];
                  }

                  return this._array;
                }
              }

              empty() {
                return this._values.length === 0;
              }

              constant() {
                return this._values.length === 1;
              }

            } exports('fS', AnimCurve);
            AnimCurve.Linear = null;
            legacyCC.AnimCurve = AnimCurve;
            class EventInfo {
              constructor() {
                this.events = [];
              }

              add(func, params) {
                this.events.push({
                  func: func || '',
                  params: params || []
                });
              }

            } exports('fT', EventInfo);
            function sampleAnimationCurve(curve, sampler, ratio) {
              let index = sampler.sample(ratio);

              if (index < 0) {
                index = ~index;

                if (index <= 0) {
                  index = 0;
                } else if (index >= sampler.ratios.length) {
                  index = sampler.ratios.length - 1;
                } else {
                  return curve.valueBetween(ratio, index - 1, sampler.ratios[index - 1], index, sampler.ratios[index]);
                }
              }

              return curve.valueAt(index);
            }
            legacyCC.sampleAnimationCurve = sampleAnimationCurve;
            function computeRatioByType(ratio, type) {
              if (typeof type === 'string') {
                const func = easing[type];

                if (func) {
                  ratio = func(ratio);
                } else {
                  errorID(3906, type);
                }
              } else if (Array.isArray(type)) {
                ratio = bezierByTime(type, ratio);
              }

              return ratio;
            }

            function quickFindIndex(ratios, ratio) {
              const length = ratios.length - 1;

              if (length === 0) {
                return 0;
              }

              const start = ratios[0];

              if (ratio < start) {
                return 0;
              }

              const end = ratios[length];

              if (ratio > end) {
                return length;
              }

              ratio = (ratio - start) / (end - start);
              const eachLength = 1 / length;
              const index = ratio / eachLength;
              const floorIndex = index | 0;
              const EPSILON = 1e-6;

              if (index - floorIndex < EPSILON) {
                return floorIndex;
              } else if (floorIndex + 1 - index < EPSILON) {
                return floorIndex + 1;
              }

              return ~(floorIndex + 1);
            }

            const selectLerpFx = (() => {
              function makeValueTypeLerpFx(constructor) {
                const tempValue = new constructor();
                return (from, to, ratio) => {
                  constructor.lerp(tempValue, from, to, ratio);
                  return tempValue;
                };
              }

              function callLerpable(from, to, t, dt) {
                return from.lerp(to, t, dt);
              }

              function makeQuatSlerpFx() {
                const tempValue = new Quat();
                return (from, to, t, dt) => Quat.slerp(tempValue, from, to, t);
              }

              return value => {
                if (value === null) {
                  return undefined;
                }

                if (typeof value === 'number') {
                  return lerp;
                } else if (typeof value === 'object' && value.constructor) {
                  if (value instanceof Quat) {
                    return makeQuatSlerpFx();
                  } else if (value instanceof ValueType) {
                    return makeValueTypeLerpFx(value.constructor);
                  } else if (value.constructor === Number) {
                    return lerp;
                  } else if (isLerpable(value)) {
                    return callLerpable;
                  }
                }

                return undefined;
              };
            })();

            class SkelAnimDataHub {
              static getOrExtract(clip) {
                let data = SkelAnimDataHub.pool.get(clip);

                if (!data || data.info.sample !== clip.sample) {
                  if (data) {
                    legacyCC.director.root.dataPoolManager.releaseAnimationClip(clip);
                  }

                  data = convertToSkeletalCurves(clip);
                  SkelAnimDataHub.pool.set(clip, data);
                }

                return data;
              }

              static destroy(clip) {
                SkelAnimDataHub.pool.delete(clip);
              }

            } exports('ck', SkelAnimDataHub);
            SkelAnimDataHub.pool = new Map();

            function convertToSkeletalCurves(clip) {
              const data = {};
              clip.curves.forEach(curve => {
                if (!curve.valueAdapter && isCustomPath(curve.modifiers[0], HierarchyPath) && isPropertyPath(curve.modifiers[1])) {
                  const {
                    path
                  } = curve.modifiers[0];
                  let cs = data[path];

                  if (!cs) {
                    cs = data[path] = {};
                  }

                  const property = curve.modifiers[1];
                  cs[property] = {
                    values: curve.data.values,
                    keys: curve.data.keys
                  };
                }
              });
              const frames = Math.ceil(clip.sample * clip.duration) + 1;

              for (const path of Object.keys(data)) {
                const props = data[path];

                if (!props) {
                  continue;
                }

                Object.defineProperty(props, 'worldMatrix', {
                  get: () => {
                    if (!props._worldMatrix) {
                      const {
                        position,
                        rotation,
                        scale
                      } = props;
                      convertToUniformSample(clip, position, frames);
                      convertToUniformSample(clip, rotation, frames);
                      convertToUniformSample(clip, scale, frames);
                      convertToWorldSpace(data, path, props);
                    }

                    return props._worldMatrix;
                  }
                });
              }

              const info = {
                frames,
                sample: clip.sample
              };
              return {
                info,
                data
              };
            }

            function convertToUniformSample(clip, curve, frames) {
              const keys = clip.keys[curve.keys];
              const values = [];

              if (!keys || keys.length === 1) {
                for (let i = 0; i < frames; i++) {
                  values[i] = curve.values[0].clone();
                }
              } else {
                const isQuat = curve.values[0] instanceof Quat;

                for (let i = 0, idx = 0; i < frames; i++) {
                  let time = i / clip.sample;

                  while (keys[idx] <= time) {
                    idx++;
                  }

                  if (idx > keys.length - 1) {
                    idx = keys.length - 1;
                    time = keys[idx];
                  } else if (idx === 0) {
                    idx = 1;
                  }

                  const from = curve.values[idx - 1].clone();
                  const denom = keys[idx] - keys[idx - 1];
                  const ratio = denom ? clamp01((time - keys[idx - 1]) / denom) : 1;

                  if (isQuat) {
                    from.slerp(curve.values[idx], ratio);
                  } else {
                    from.lerp(curve.values[idx], ratio);
                  }

                  values[i] = from;
                }
              }

              curve.values = values;
            }

            function convertToWorldSpace(convertedProps, path, props) {
              const oPos = props.position.values;
              const oRot = props.rotation.values;
              const oScale = props.scale.values;
              const matrix = oPos.map(() => new Mat4());
              const idx = path.lastIndexOf('/');
              let pMatrix = null;

              if (idx > 0) {
                const name = path.substring(0, idx);
                const data = convertedProps[name];

                if (!data) {
                  console.warn('no data for parent bone?');
                  return;
                }

                pMatrix = data.worldMatrix.values;
              }

              for (let i = 0; i < oPos.length; i++) {
                const oT = oPos[i];
                const oR = oRot[i];
                const oS = oScale[i];
                const m = matrix[i];
                Mat4.fromRTS(m, oR, oT, oS);

                if (pMatrix) {
                  Mat4.multiply(m, pMatrix[i], m);
                }
              }

              Object.keys(props).forEach(k => delete props[k]);
              props._worldMatrix = {
                keys: 0,
                interpolate: false,
                values: matrix
              };
            }

            var _dec$v, _class$v, _class2$t, _descriptor$q, _descriptor2$h, _descriptor3$c, _descriptor4$b, _descriptor5$9, _descriptor6$5, _descriptor7$4, _descriptor8$4, _descriptor9$3, _descriptor10$3, _descriptor11$3, _class3$b, _temp$u;
            let AnimationClip = exports('fW', (_dec$v = ccclass('cc.AnimationClip'), _dec$v(_class$v = (_class2$t = (_temp$u = _class3$b = class AnimationClip extends Asset {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "sample", _descriptor$q, this);

                _initializerDefineProperty(this, "speed", _descriptor2$h, this);

                _initializerDefineProperty(this, "wrapMode", _descriptor3$c, this);

                _initializerDefineProperty(this, "events", _descriptor4$b, this);

                _initializerDefineProperty(this, "enableTrsBlending", _descriptor5$9, this);

                _initializerDefineProperty(this, "_duration", _descriptor6$5, this);

                _initializerDefineProperty(this, "_keys", _descriptor7$4, this);

                _initializerDefineProperty(this, "_stepness", _descriptor8$4, this);

                _initializerDefineProperty(this, "_curves", _descriptor9$3, this);

                _initializerDefineProperty(this, "_commonTargets", _descriptor10$3, this);

                _initializerDefineProperty(this, "_hash", _descriptor11$3, this);

                this.frameRate = 0;
                this._ratioSamplers = [];
                this._runtimeCurves = void 0;
                this._runtimeEvents = void 0;
                this._data = null;
              }

              static createWithSpriteFrames(spriteFrames, sample) {
                if (!Array.isArray(spriteFrames)) {
                  errorID(3905);
                  return null;
                }

                const clip = new AnimationClip();
                clip.sample = sample || clip.sample;
                clip.duration = spriteFrames.length / clip.sample;
                const step = 1 / clip.sample;
                const keys = new Array(spriteFrames.length);
                const values = new Array(keys.length);

                for (let i = 0; i < spriteFrames.length; i++) {
                  keys[i] = i * step;
                  values[i] = spriteFrames[i];
                }

                clip.keys = [keys];
                clip.curves = [{
                  modifiers: [new ComponentPath('cc.Sprite'), 'spriteFrame'],
                  data: {
                    keys: 0,
                    values
                  }
                }];
                return clip;
              }

              get duration() {
                return this._duration;
              }

              set duration(value) {
                this._duration = value;
              }

              get keys() {
                return this._keys;
              }

              set keys(value) {
                this._keys = value;
              }

              get eventGroups() {
                if (!this._runtimeEvents) {
                  this._createRuntimeEvents();
                }

                return this._runtimeEvents.eventGroups;
              }

              get stepness() {
                return this._stepness;
              }

              set stepness(value) {
                this._stepness = value;

                this._applyStepness();
              }

              get hash() {
                if (this._hash) {
                  return this._hash;
                }

                const data = this._nativeAsset;
                const buffer = new Uint8Array(ArrayBuffer.isView(data) ? data.buffer : data);
                return this._hash = murmurhash2_32_gc(buffer, 666);
              }

              get curves() {
                return this._curves;
              }

              set curves(value) {
                this._curves = value;
                delete this._runtimeCurves;
              }

              get data() {
                return this._data;
              }

              get commonTargets() {
                return this._commonTargets;
              }

              set commonTargets(value) {
                this._commonTargets = value;
              }

              onLoaded() {
                this.frameRate = this.sample;

                this._decodeCVTAs();
              }

              getPropertyCurves() {
                if (!this._runtimeCurves) {
                  this._createPropertyCurves();
                }

                return this._runtimeCurves;
              }

              updateEventDatas() {
                delete this._runtimeEvents;
              }

              getEventGroupIndexAtRatio(ratio) {
                if (!this._runtimeEvents) {
                  this._createRuntimeEvents();
                }

                const result = binarySearchEpsilon(this._runtimeEvents.ratios, ratio);
                return result;
              }

              hasEvents() {
                return this.events.length !== 0;
              }

              destroy() {
                if (legacyCC.director.root.dataPoolManager) {
                  legacyCC.director.root.dataPoolManager.releaseAnimationClip(this);
                }

                SkelAnimDataHub.destroy(this);
                return super.destroy();
              }

              _createPropertyCurves() {
                this._ratioSamplers = this._keys.map(keys => new RatioSampler(keys.map(key => key / this._duration)));
                this._runtimeCurves = this._curves.map(targetCurve => ({
                  curve: new AnimCurve(targetCurve.data, this._duration),
                  modifiers: targetCurve.modifiers,
                  valueAdapter: targetCurve.valueAdapter,
                  sampler: this._ratioSamplers[targetCurve.data.keys],
                  commonTarget: targetCurve.commonTarget
                }));

                this._applyStepness();
              }

              _createRuntimeEvents() {

                const ratios = [];
                const eventGroups = [];
                const events = this.events.sort((a, b) => a.frame - b.frame);

                for (const eventData of events) {
                  const ratio = eventData.frame / this._duration;
                  let i = ratios.findIndex(r => r === ratio);

                  if (i < 0) {
                    i = ratios.length;
                    ratios.push(ratio);
                    eventGroups.push({
                      events: []
                    });
                  }

                  eventGroups[i].events.push({
                    functionName: eventData.func,
                    parameters: eventData.params
                  });
                }

                this._runtimeEvents = {
                  ratios,
                  eventGroups
                };
              }

              _applyStepness() {}

              _decodeCVTAs() {
                const binaryBuffer = ArrayBuffer.isView(this._nativeAsset) ? this._nativeAsset.buffer : this._nativeAsset;

                if (!binaryBuffer) {
                  return;
                }

                const maybeCompressedKeys = this._keys;

                for (let iKey = 0; iKey < maybeCompressedKeys.length; ++iKey) {
                  const keys = maybeCompressedKeys[iKey];

                  if (keys instanceof CompactValueTypeArray) {
                    maybeCompressedKeys[iKey] = keys.decompress(binaryBuffer);
                  }
                }

                for (let iCurve = 0; iCurve < this._curves.length; ++iCurve) {
                  const curve = this._curves[iCurve];

                  if (curve.data.values instanceof CompactValueTypeArray) {
                    curve.data.values = curve.data.values.decompress(binaryBuffer);
                  }
                }
              }

              validate() {
                return this.keys.length > 0 && this.curves.length > 0;
              }

            }, _class3$b.WrapMode = WrapMode, _temp$u), (_descriptor$q = _applyDecoratedDescriptor(_class2$t.prototype, "sample", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 60;
              }
            }), _descriptor2$h = _applyDecoratedDescriptor(_class2$t.prototype, "speed", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 1;
              }
            }), _descriptor3$c = _applyDecoratedDescriptor(_class2$t.prototype, "wrapMode", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return WrapMode.Normal;
              }
            }), _descriptor4$b = _applyDecoratedDescriptor(_class2$t.prototype, "events", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor5$9 = _applyDecoratedDescriptor(_class2$t.prototype, "enableTrsBlending", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            }), _descriptor6$5 = _applyDecoratedDescriptor(_class2$t.prototype, "_duration", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor7$4 = _applyDecoratedDescriptor(_class2$t.prototype, "_keys", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor8$4 = _applyDecoratedDescriptor(_class2$t.prototype, "_stepness", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            }), _descriptor9$3 = _applyDecoratedDescriptor(_class2$t.prototype, "_curves", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor10$3 = _applyDecoratedDescriptor(_class2$t.prototype, "_commonTargets", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor11$3 = _applyDecoratedDescriptor(_class2$t.prototype, "_hash", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return 0;
              }
            })), _class2$t)) || _class$v));
            legacyCC.AnimationClip = AnimationClip;

            function createBoundTarget(target, modifiers, valueAdapter) {
              const lastPath = modifiers[modifiers.length - 1];

              if (modifiers.length !== 0 && isPropertyPath(lastPath) && !valueAdapter) {
                const resultTarget = evaluatePath(target, ...modifiers.slice(0, modifiers.length - 1));

                if (resultTarget === null) {
                  return null;
                }

                return {
                  setValue: value => {
                    resultTarget[lastPath] = value;
                  },
                  getValue: () => {
                    return resultTarget[lastPath];
                  }
                };
              } else if (!valueAdapter) {
                error(`Empty animation curve.`);
                return null;
              } else {
                const resultTarget = evaluatePath(target, ...modifiers);

                if (resultTarget === null) {
                  return null;
                }

                const proxy = valueAdapter.forTarget(resultTarget);
                return {
                  setValue: value => {
                    proxy.set(value);
                  },
                  getValue: () => {
                    if (!proxy.get) {
                      error(`Target doesn't provide a get method.`);
                      return null;
                    } else {
                      return proxy.get();
                    }
                  }
                };
              }
            }
            function createBufferedTarget(target, modifiers, valueAdapter) {
              const boundTarget = createBoundTarget(target, modifiers, valueAdapter);

              if (boundTarget === null) {
                return null;
              }

              const value = boundTarget.getValue();
              const copyable = getBuiltinCopy(value);

              if (!copyable) {
                error(`Value is not copyable!`);
                return null;
              }

              const buffer = copyable.createBuffer();
              const copy = copyable.copy;
              return Object.assign(boundTarget, {
                peek: () => buffer,
                pull: () => {
                  const value = boundTarget.getValue();
                  copy(buffer, value);
                },
                push: () => {
                  boundTarget.setValue(buffer);
                }
              });
            }

            function SizeCopy(out, source) {
              return out.set(source);
            }

            const getBuiltinCopy = (() => {
              const map = new Map();
              map.set(Vec2, {
                createBuffer: () => new Vec2(),
                copy: Vec2.copy
              });
              map.set(Vec3, {
                createBuffer: () => new Vec3(),
                copy: Vec3.copy
              });
              map.set(Vec4, {
                createBuffer: () => new Vec4(),
                copy: Vec4.copy
              });
              map.set(Color, {
                createBuffer: () => new Color(),
                copy: Color.copy
              });
              map.set(Size, {
                createBuffer: () => new Size(),
                copy: SizeCopy
              });
              return value => map.get(value === null || value === void 0 ? void 0 : value.constructor);
            })();

            class Playable {
              constructor() {
                this._isPlaying = false;
                this._isPaused = false;
                this._stepOnce = false;
              }

              get isPlaying() {
                return this._isPlaying;
              }

              get isPaused() {
                return this._isPaused;
              }

              get isMotionless() {
                return !this.isPlaying || this.isPaused;
              }

              play() {
                if (this._isPlaying) {
                  if (this._isPaused) {
                    this._isPaused = false;
                    this.onResume();
                  } else {
                    this.onError(getError(3912));
                  }
                } else {
                  this._isPlaying = true;
                  this.onPlay();
                }
              }

              stop() {
                if (this._isPlaying) {
                  this._isPlaying = false;
                  this.onStop();
                  this._isPaused = false;
                }
              }

              pause() {
                if (this._isPlaying && !this._isPaused) {
                  this._isPaused = true;
                  this.onPause();
                }
              }

              resume() {
                if (this._isPlaying && this._isPaused) {
                  this._isPaused = false;
                  this.onResume();
                }
              }

              step() {
                this.pause();
                this._stepOnce = true;

                if (!this._isPlaying) {
                  this.play();
                }
              }

              update(deltaTime) {}

              onPlay() {}

              onPause() {}

              onResume() {}

              onStop() {}

              onError(message) {}

            }

            class BlendStateBuffer {
              constructor() {
                this._nodeBlendStates = new Map();
                this._states = new Set();
              }

              ref(node, property) {
                let nodeBlendState = this._nodeBlendStates.get(node);

                if (!nodeBlendState) {
                  nodeBlendState = {
                    dirty: false,
                    properties: {}
                  };

                  this._nodeBlendStates.set(node, nodeBlendState);
                }

                let propertyBlendState = nodeBlendState.properties[property];

                if (!propertyBlendState) {
                  propertyBlendState = nodeBlendState.properties[property] = new PropertyBlendState(nodeBlendState, isVec3Property(property) ? new Vec3() : new Quat());
                }

                ++propertyBlendState.refCount;
                return propertyBlendState;
              }

              deRef(node, property) {
                const nodeBlendState = this._nodeBlendStates.get(node);

                if (!nodeBlendState) {
                  return;
                }

                const propertyBlendState = nodeBlendState.properties[property];

                if (!propertyBlendState) {
                  return;
                }

                --propertyBlendState.refCount;

                if (propertyBlendState.refCount > 0) {
                  return;
                }

                delete nodeBlendState.properties[property];

                if (isEmptyNodeBlendState(nodeBlendState)) {
                  this._nodeBlendStates.delete(node);
                }
              }

              apply() {
                this._nodeBlendStates.forEach((nodeBlendState, node) => {
                  if (!nodeBlendState.dirty) {
                    return;
                  }

                  nodeBlendState.dirty = false;
                  const {
                    position,
                    scale,
                    rotation,
                    eulerAngles
                  } = nodeBlendState.properties;
                  let t;
                  let s;
                  let r;
                  let anyChanged = false;

                  if (position && position.weight !== 0) {
                    position.weight = 0;
                    t = position.value;
                    anyChanged = true;
                  }

                  if (scale && scale.weight !== 0) {
                    scale.weight = 0;
                    s = scale.value;
                    anyChanged = true;
                  }

                  if (rotation && rotation.weight !== 0) {
                    rotation.weight = 0;
                    r = rotation.value;
                    anyChanged = true;
                  }

                  if (eulerAngles && eulerAngles.weight !== 0) {
                    eulerAngles.weight = 0;
                    r = eulerAngles.value;
                    anyChanged = true;
                  }

                  if (anyChanged) {
                    node.setRTS(r, t, s);
                  }
                });

                this._states.forEach(state => {
                  state.onBlendFinished();
                });
              }

              bindState(state) {
                this._states.add(state);
              }

              unbindState(state) {
                this._states.delete(state);
              }

            }
            function createBlendStateWriter(blendState, node, property, host, constants) {
              const blendFunction = isVec3Property(property) ? additive3D : additiveQuat;
              let propertyBlendState = blendState.ref(node, property);
              let isConstCacheValid = false;
              let lastWeight = -1;
              return {
                destroy() {
                  assertIsNonNullable(propertyBlendState);

                  if (propertyBlendState) {
                    blendState.deRef(node, property);
                    propertyBlendState = null;
                  }
                },

                forTarget: () => ({
                  get: () => node[property],
                  set: value => {
                    if (!propertyBlendState || !host.enabled) {
                      return;
                    }

                    const weight = host.weight;

                    if (constants) {
                      if (weight !== 1 || weight !== lastWeight) {
                        isConstCacheValid = false;
                      } else if (isConstCacheValid) {
                        return;
                      }
                    }

                    blendFunction(value, weight, propertyBlendState);
                    propertyBlendState.weight += weight;
                    propertyBlendState.markAsDirty();
                    isConstCacheValid = true;
                    lastWeight = weight;
                  }
                })
              };
            }

            function isQuatProperty(property) {
              return property === 'rotation';
            }

            function isVec3Property(property) {
              return !isQuatProperty(property);
            }

            class PropertyBlendState {
              constructor(node, value) {
                this.weight = 0;
                this.value = void 0;
                this.refCount = 0;
                this._node = void 0;
                this._node = node;
                this.value = value;
              }

              markAsDirty() {
                this._node.dirty = true;
              }

            }

            function isEmptyNodeBlendState(nodeBlendState) {
              return !nodeBlendState.properties.position && !nodeBlendState.properties.rotation && !nodeBlendState.properties.eulerAngles && !nodeBlendState.properties.scale;
            }

            function additive3D(value, weight, propertyBlendState) {
              if (propertyBlendState.weight === 0) {
                Vec3.zero(propertyBlendState.value);
              }

              if (weight === 0) {
                return propertyBlendState.value;
              } else if (weight === 1) {
                return Vec3.copy(propertyBlendState.value, value);
              }

              return Vec3.scaleAndAdd(propertyBlendState.value, propertyBlendState.value, value, weight);
            }

            function additiveQuat(value, weight, propertyBlendState) {
              if (propertyBlendState.weight === 0) {
                Quat.identity(propertyBlendState.value);
              }

              if (weight === 0) {
                return propertyBlendState.value;
              } else if (weight === 1) {
                return Quat.copy(propertyBlendState.value, value);
              }

              const t = weight / (propertyBlendState.weight + weight);
              return Quat.slerp(propertyBlendState.value, propertyBlendState.value, value, t);
            }

            let EventType;

            (function (EventType) {
              EventType["PLAY"] = "play";
              EventType["STOP"] = "stop";
              EventType["PAUSE"] = "pause";
              EventType["RESUME"] = "resume";
              EventType["LASTFRAME"] = "lastframe";
              EventType["FINISHED"] = "finished";
            })(EventType || (EventType = {}));

            ccenum(EventType);
            class ICurveInstance {
              constructor(runtimeCurve, target, boundTarget) {
                this.commonTargetIndex = void 0;
                this._curve = void 0;
                this._boundTarget = void 0;
                this._rootTargetProperty = void 0;
                this._curveDetail = void 0;
                this._curve = runtimeCurve.curve;
                this._curveDetail = runtimeCurve;
                this._boundTarget = boundTarget;
                this._shouldLerp = runtimeCurve.curve.hasLerp();
              }

              applySample(ratio, index, inBetween, samplerResultCache, weight) {
                let value;

                if (!this._shouldLerp || !inBetween) {
                  value = this._curve.valueAt(index);
                } else {
                  value = this._curve.valueBetween(ratio, samplerResultCache.from, samplerResultCache.fromRatio, samplerResultCache.to, samplerResultCache.toRatio);
                }

                this._setValue(value, weight);
              }

              _setValue(value, weight) {
                this._boundTarget.setValue(value);
              }

              get propertyName() {
                return this._rootTargetProperty || '';
              }

              get curveDetail() {
                return this._curveDetail;
              }

            }

            function makeSamplerSharedGroup(sampler) {
              return {
                sampler,
                curves: [],
                samplerResultCache: {
                  from: 0,
                  fromRatio: 0,
                  to: 0,
                  toRatio: 0
                }
              };
            }

            const InvalidIndex = -1;
            class AnimationState extends Playable {
              get clip() {
                return this._clip;
              }

              get name() {
                return this._name;
              }

              get length() {
                return this.duration;
              }

              get wrapMode() {
                return this._wrapMode;
              }

              set wrapMode(value) {
                this._wrapMode = value;

                this.time = 0;

                if (value & WrapModeMask.Loop) {
                  this.repeatCount = Infinity;
                } else {
                  this.repeatCount = 1;
                }
              }

              get repeatCount() {
                return this._repeatCount;
              }

              set repeatCount(value) {
                this._repeatCount = value;
                const shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;
                const reverse = (this.wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse;

                if (value === Infinity && !shouldWrap && !reverse) {
                  this._process = this.simpleProcess;
                } else {
                  this._process = this.process;
                }
              }

              get delay() {
                return this._delay;
              }

              set delay(value) {
                this._delayTime = this._delay = value;
              }

              get playbackRange() {
                return this._playbackRange;
              }

              set playbackRange(value) {
                assertIsTrue(value.max > value.min);
                this._playbackRange.min = Math.max(value.min, 0);
                this._playbackRange.max = Math.min(value.max, this.duration);
                this._playbackDuration = this._playbackRange.max - this._playbackRange.min;
                this.setTime(0.0);
              }

              get current() {
                return this.getWrappedInfo(this.time).time;
              }

              get ratio() {
                return this.current / this.duration;
              }

              constructor(clip, name = '') {
                super();
                this.duration = 1;
                this.speed = 1;
                this.time = 0;
                this.weight = 0;
                this.frameRate = 0;
                this._targetNode = null;
                this._curveLoaded = false;
                this._clip = void 0;
                this._process = this.process;
                this._samplerSharedGroups = [];
                this._target = null;
                this._ignoreIndex = InvalidIndex;
                this._commonTargetStatuses = [];
                this._wrapMode = WrapMode.Normal;
                this._repeatCount = 1;
                this._delay = 0;
                this._delayTime = 0;
                this._currentFramePlayed = false;
                this._name = void 0;
                this._lastIterations = void 0;
                this._lastWrapInfo = null;
                this._lastWrapInfoEvent = null;
                this._wrappedInfo = new WrappedInfo();
                this._blendStateBuffer = null;
                this._blendStateWriters = [];
                this._allowLastFrame = false;
                this._blendStateWriterHost = {
                  weight: 0,
                  enabled: false
                };
                this._playbackRange = void 0;
                this._playbackDuration = 0;
                this._invDuration = 1.0;
                this._clip = clip;
                this._name = name || clip && clip.name;
                this._playbackRange = {
                  min: 0,
                  max: this._clip.duration
                };
                this._playbackDuration = clip.duration;

                if (!clip.duration) {
                  debug(`Clip ${clip.name} has zero duration.`);
                }
              }

              get curveLoaded() {
                return this._curveLoaded;
              }

              initialize(root, propertyCurves) {
                var _legacyCC$director$ge, _legacyCC$director$ge2;

                if (this._curveLoaded) {
                  return;
                }

                this._curveLoaded = true;

                this._destroyBlendStateWriters();

                this._samplerSharedGroups.length = 0;
                this._blendStateBuffer = (_legacyCC$director$ge = (_legacyCC$director$ge2 = legacyCC.director.getAnimationManager()) === null || _legacyCC$director$ge2 === void 0 ? void 0 : _legacyCC$director$ge2.blendState) !== null && _legacyCC$director$ge !== void 0 ? _legacyCC$director$ge : null;

                if (this._blendStateBuffer) {
                  this._blendStateBuffer.bindState(this);
                }

                this._targetNode = root;
                const clip = this._clip;
                this.duration = clip.duration;
                this._invDuration = 1.0 / this.duration;
                this.speed = clip.speed;
                this.wrapMode = clip.wrapMode;
                this.frameRate = clip.sample;
                this._playbackRange = {
                  min: 0,
                  max: clip.duration
                };
                this._playbackDuration = clip.duration;

                if ((this.wrapMode & WrapModeMask.Loop) === WrapModeMask.Loop) {
                  this.repeatCount = Infinity;
                } else {
                  this.repeatCount = 1;
                }

                const createBoundTargetOptimized = (createFn, rootTarget, path, valueAdapter, isConstant) => {
                  if (!clip.enableTrsBlending || !isTargetingTRS(path) || !this._blendStateBuffer) {
                    return createFn(rootTarget, path, valueAdapter);
                  } else {
                    const targetNode = evaluatePath(rootTarget, ...path.slice(0, path.length - 1));

                    if (targetNode !== null && targetNode instanceof Node$1) {
                      const propertyName = path[path.length - 1];
                      const blendStateWriter = createBlendStateWriter(this._blendStateBuffer, targetNode, propertyName, this._blendStateWriterHost, isConstant);

                      this._blendStateWriters.push(blendStateWriter);

                      return createFn(rootTarget, [], blendStateWriter);
                    }
                  }

                  return null;
                };

                this._commonTargetStatuses = clip.commonTargets.map((commonTarget, index) => {
                  const target = createBoundTargetOptimized(createBufferedTarget, root, commonTarget.modifiers, commonTarget.valueAdapter, false);

                  if (target === null) {
                    return null;
                  } else {
                    return {
                      target,
                      changed: false
                    };
                  }
                });

                if (!propertyCurves) {
                  propertyCurves = clip.getPropertyCurves();
                }

                for (let iPropertyCurve = 0; iPropertyCurve < propertyCurves.length; ++iPropertyCurve) {
                  const propertyCurve = propertyCurves[iPropertyCurve];

                  if (propertyCurve.curve.empty()) {
                    continue;
                  }

                  let samplerSharedGroup = this._samplerSharedGroups.find(value => value.sampler === propertyCurve.sampler);

                  if (!samplerSharedGroup) {
                    samplerSharedGroup = makeSamplerSharedGroup(propertyCurve.sampler);

                    this._samplerSharedGroups.push(samplerSharedGroup);
                  }

                  let rootTarget;

                  if (typeof propertyCurve.commonTarget === 'undefined') {
                    rootTarget = root;
                  } else {
                    const commonTargetStatus = this._commonTargetStatuses[propertyCurve.commonTarget];

                    if (!commonTargetStatus) {
                      continue;
                    }

                    rootTarget = commonTargetStatus.target.peek();
                  }

                  const boundTarget = createBoundTargetOptimized(createBoundTarget, rootTarget, propertyCurve.modifiers, propertyCurve.valueAdapter, propertyCurve.curve.constant());

                  if (boundTarget === null) ; else {
                    const curveInstance = new ICurveInstance(propertyCurve, rootTarget, boundTarget);
                    curveInstance.commonTargetIndex = propertyCurve.commonTarget;
                    samplerSharedGroup.curves.push(curveInstance);
                  }
                }
              }

              destroy() {
                this._destroyBlendStateWriters();
              }

              onBlendFinished() {
                this._blendStateWriterHost.enabled = false;
              }

              emit(...args) {
                legacyCC.director.getAnimationManager().pushDelayEvent(this._emit, this, args);
              }

              on(type, callback, target) {
                if (this._target && this._target.isValid) {
                  return this._target.on(type, callback, target);
                } else {
                  return null;
                }
              }

              once(type, callback, target) {
                if (this._target && this._target.isValid) {
                  return this._target.once(type, callback, target);
                } else {
                  return null;
                }
              }

              off(type, callback, target) {
                if (this._target && this._target.isValid) {
                  this._target.off(type, callback, target);
                }
              }

              allowLastFrameEvent(allowed) {
                this._allowLastFrame = allowed;
              }

              _setEventTarget(target) {
                this._target = target;
              }

              setTime(time) {
                this._currentFramePlayed = false;
                this.time = time || 0;

                {
                  this._lastWrapInfoEvent = null;
                  this._ignoreIndex = InvalidIndex;
                  const info = this.getWrappedInfo(time, this._wrappedInfo);
                  const direction = info.direction;

                  let frameIndex = this._clip.getEventGroupIndexAtRatio(info.ratio);

                  if (frameIndex < 0) {
                    frameIndex = ~frameIndex - 1;

                    if (direction < 0) {
                      frameIndex += 1;
                    }

                    this._ignoreIndex = frameIndex;
                  }
                }
              }

              update(delta) {
                if (this._delayTime > 0) {
                  this._delayTime -= delta;

                  if (this._delayTime > 0) {
                    return;
                  }
                }

                if (this._currentFramePlayed) {
                  this.time += delta * this.speed;
                } else {
                  this._currentFramePlayed = true;
                }

                this._process();
              }

              sample() {
                const info = this.getWrappedInfo(this.time, this._wrappedInfo);

                this._sampleCurves(info.ratio);

                {
                  this._sampleEvents(info);
                }

                return info;
              }

              onPlay() {
                this.setTime(0);
                this._delayTime = this._delay;

                this._onReplayOrResume();

                this.emit(EventType.PLAY, this);
              }

              onStop() {
                if (!this.isPaused) {
                  this._onPauseOrStop();
                }

                this.emit(EventType.STOP, this);
              }

              onResume() {
                this._onReplayOrResume();

                this.emit(EventType.RESUME, this);
              }

              onPause() {
                this._onPauseOrStop();

                this.emit(EventType.PAUSE, this);
              }

              _sampleCurves(ratio) {
                this._blendStateWriterHost.weight = this.weight;
                this._blendStateWriterHost.enabled = true;
                const commonTargetStatuses = this._commonTargetStatuses;

                for (let iCommonTarget = 0, length = commonTargetStatuses.length; iCommonTarget < length; ++iCommonTarget) {
                  const commonTargetStatus = commonTargetStatuses[iCommonTarget];

                  if (!commonTargetStatus) {
                    continue;
                  }

                  commonTargetStatus.target.pull();
                  commonTargetStatus.changed = false;
                }

                let index = 0;
                let lerpRequired = false;
                const samplerSharedGroups = this._samplerSharedGroups;

                for (let iSamplerSharedGroup = 0, szSamplerSharedGroup = samplerSharedGroups.length; iSamplerSharedGroup < szSamplerSharedGroup; ++iSamplerSharedGroup) {
                  const samplerSharedGroup = samplerSharedGroups[iSamplerSharedGroup];
                  const {
                    sampler,
                    samplerResultCache
                  } = samplerSharedGroup;
                  lerpRequired = false;

                  if (!sampler) {
                    index = 0;
                  } else {
                    index = sampler.sample(ratio);

                    if (index < 0) {
                      index = ~index;

                      if (index <= 0) {
                        index = 0;
                      } else if (index >= sampler.ratios.length) {
                        index = sampler.ratios.length - 1;
                      } else {
                        lerpRequired = true;
                        samplerResultCache.from = index - 1;
                        samplerResultCache.fromRatio = sampler.ratios[samplerResultCache.from];
                        samplerResultCache.to = index;
                        samplerResultCache.toRatio = sampler.ratios[samplerResultCache.to];
                        index = samplerResultCache.from;
                      }
                    }
                  }

                  const curves = samplerSharedGroup.curves;

                  for (let iCurveInstance = 0, szCurves = curves.length; iCurveInstance < szCurves; ++iCurveInstance) {
                    const curveInstance = curves[iCurveInstance];
                    curveInstance.applySample(ratio, index, lerpRequired, samplerResultCache, this.weight);

                    if (curveInstance.commonTargetIndex !== undefined) {
                      const commonTargetStatus = commonTargetStatuses[curveInstance.commonTargetIndex];

                      if (commonTargetStatus) {
                        commonTargetStatus.changed = true;
                      }
                    }
                  }
                }

                for (let iCommonTarget = 0, length = commonTargetStatuses.length; iCommonTarget < length; ++iCommonTarget) {
                  const commonTargetStatus = commonTargetStatuses[iCommonTarget];

                  if (!commonTargetStatus) {
                    continue;
                  }

                  if (commonTargetStatus.changed) {
                    commonTargetStatus.target.push();
                  }
                }
              }

              process() {
                const info = this.sample();

                if (this._allowLastFrame) {
                  let lastInfo;

                  if (!this._lastWrapInfo) {
                    lastInfo = this._lastWrapInfo = new WrappedInfo(info);
                  } else {
                    lastInfo = this._lastWrapInfo;
                  }

                  if (this.repeatCount > 1 && (info.iterations | 0) > (lastInfo.iterations | 0)) {
                    this.emit(EventType.LASTFRAME, this);
                  }

                  lastInfo.set(info);
                }

                if (info.stopped) {
                  this.stop();
                  this.emit(EventType.FINISHED, this);
                }
              }

              simpleProcess() {
                const playbackStart = this._playbackRange.min;
                const playbackDuration = this._playbackDuration;
                let time = this.time % playbackDuration;

                if (time < 0) {
                  time += playbackDuration;
                }

                const ratio = (playbackStart + time) * this._invDuration;

                this._sampleCurves(ratio);

                {
                  if (this._clip.hasEvents()) {
                    this._sampleEvents(this.getWrappedInfo(this.time, this._wrappedInfo));
                  }
                }

                if (this._allowLastFrame) {
                  if (this._lastIterations === undefined) {
                    this._lastIterations = ratio;
                  }

                  if (this.time > 0 && this._lastIterations > ratio || this.time < 0 && this._lastIterations < ratio) {
                    this.emit(EventType.LASTFRAME, this);
                  }

                  this._lastIterations = ratio;
                }
              }

              cache(frames) {}

              _needReverse(currentIterations) {
                const wrapMode = this.wrapMode;
                let needReverse = false;

                if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                  const isEnd = currentIterations - (currentIterations | 0) === 0;

                  if (isEnd && currentIterations > 0) {
                    currentIterations -= 1;
                  }

                  const isOddIteration = currentIterations & 1;

                  if (isOddIteration) {
                    needReverse = !needReverse;
                  }
                }

                if ((wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse) {
                  needReverse = !needReverse;
                }

                return needReverse;
              }

              getWrappedInfo(time, info) {
                info = info || new WrappedInfo();

                const playbackStart = this._getPlaybackStart();

                const playbackEnd = this._getPlaybackEnd();

                const playbackDuration = playbackEnd - playbackStart;
                let stopped = false;
                const repeatCount = this.repeatCount;
                let currentIterations = time > 0 ? time / playbackDuration : -(time / playbackDuration);

                if (currentIterations >= repeatCount) {
                  currentIterations = repeatCount;
                  stopped = true;
                  let tempRatio = repeatCount - (repeatCount | 0);

                  if (tempRatio === 0) {
                    tempRatio = 1;
                  }

                  time = tempRatio * playbackDuration * (time > 0 ? 1 : -1);
                }

                if (time > playbackDuration) {
                  const tempTime = time % playbackDuration;
                  time = tempTime === 0 ? playbackDuration : tempTime;
                } else if (time < 0) {
                  time %= playbackDuration;

                  if (time !== 0) {
                    time += playbackDuration;
                  }
                }

                let needReverse = false;
                const shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;

                if (shouldWrap) {
                  needReverse = this._needReverse(currentIterations);
                }

                let direction = needReverse ? -1 : 1;

                if (this.speed < 0) {
                  direction *= -1;
                }

                if (shouldWrap && needReverse) {
                  time = playbackDuration - time;
                }

                info.time = playbackStart + time;
                info.ratio = info.time / this.duration;
                info.direction = direction;
                info.stopped = stopped;
                info.iterations = currentIterations;
                return info;
              }

              _getPlaybackStart() {
                return this._playbackRange.min;
              }

              _getPlaybackEnd() {
                return this._playbackRange.max;
              }

              _sampleEvents(wrapInfo) {
                const length = this._clip.eventGroups.length;
                let direction = wrapInfo.direction;

                let eventIndex = this._clip.getEventGroupIndexAtRatio(wrapInfo.ratio);

                if (eventIndex < 0) {
                  eventIndex = ~eventIndex - 1;

                  if (direction < 0) {
                    eventIndex += 1;
                  }
                }

                if (this._ignoreIndex !== eventIndex) {
                  this._ignoreIndex = InvalidIndex;
                }

                wrapInfo.frameIndex = eventIndex;

                if (!this._lastWrapInfoEvent) {
                  this._fireEvent(eventIndex);

                  this._lastWrapInfoEvent = new WrappedInfo(wrapInfo);
                  return;
                }

                const wrapMode = this.wrapMode;
                const currentIterations = wrapIterations(wrapInfo.iterations);
                const lastWrappedInfo = this._lastWrapInfoEvent;
                let lastIterations = wrapIterations(lastWrappedInfo.iterations);
                let lastIndex = lastWrappedInfo.frameIndex;
                const lastDirection = lastWrappedInfo.direction;
                const iterationsChanged = lastIterations !== -1 && currentIterations !== lastIterations;

                if (lastIndex === eventIndex && iterationsChanged && length === 1) {
                  this._fireEvent(0);
                } else if (lastIndex !== eventIndex || iterationsChanged) {
                  direction = lastDirection;

                  do {
                    if (lastIndex !== eventIndex) {
                      if (direction === -1 && lastIndex === 0 && eventIndex > 0) {
                        if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                          direction *= -1;
                        } else {
                          lastIndex = length;
                        }

                        lastIterations++;
                      } else if (direction === 1 && lastIndex === length - 1 && eventIndex < length - 1) {
                        if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                          direction *= -1;
                        } else {
                          lastIndex = -1;
                        }

                        lastIterations++;
                      }

                      if (lastIndex === eventIndex) {
                        break;
                      }

                      if (lastIterations > currentIterations) {
                        break;
                      }
                    }

                    lastIndex += direction;
                    legacyCC.director.getAnimationManager().pushDelayEvent(this._fireEvent, this, [lastIndex]);
                  } while (lastIndex !== eventIndex && lastIndex > -1 && lastIndex < length);
                }

                this._lastWrapInfoEvent.set(wrapInfo);
              }

              _emit(type, state) {
                if (this._target && this._target.isValid) {
                  this._target.emit(type, type, state);
                }
              }

              _fireEvent(index) {
                if (!this._targetNode || !this._targetNode.isValid) {
                  return;
                }

                const {
                  eventGroups
                } = this._clip;

                if (index < 0 || index >= eventGroups.length || this._ignoreIndex === index) {
                  return;
                }

                const eventGroup = eventGroups[index];
                const components = this._targetNode.components;

                for (const event of eventGroup.events) {
                  const {
                    functionName
                  } = event;

                  for (const component of components) {
                    const fx = component[functionName];

                    if (typeof fx === 'function') {
                      fx.apply(component, event.parameters);
                    }
                  }
                }
              }

              _onReplayOrResume() {
                legacyCC.director.getAnimationManager().addAnimation(this);
              }

              _onPauseOrStop() {
                legacyCC.director.getAnimationManager().removeAnimation(this);
              }

              _destroyBlendStateWriters() {
                for (let iBlendStateWriter = 0; iBlendStateWriter < this._blendStateWriters.length; ++iBlendStateWriter) {
                  this._blendStateWriters[iBlendStateWriter].destroy();
                }

                this._blendStateWriters.length = 0;

                if (this._blendStateBuffer) {
                  this._blendStateBuffer.unbindState(this);

                  this._blendStateBuffer = null;
                }

                this._blendStateWriterHost.enabled = false;
              }

            } exports('cC', AnimationState);

            function isTargetingTRS(path) {
              let prs;

              if (path.length === 1 && typeof path[0] === 'string') {
                prs = path[0];
              } else if (path.length > 1) {
                for (let i = 0; i < path.length - 1; ++i) {
                  if (!(path[i] instanceof HierarchyPath)) {
                    return false;
                  }
                }

                prs = path[path.length - 1];
              }

              switch (prs) {
                case 'position':
                case 'scale':
                case 'rotation':
                case 'eulerAngles':
                  return true;

                default:
                  return false;
              }
            }

            function wrapIterations(iterations) {
              if (iterations - (iterations | 0) === 0) {
                iterations -= 1;
              }

              return iterations | 0;
            }

            legacyCC.AnimationState = AnimationState;

            class CrossFade extends Playable {
              constructor() {
                super();
                this._managedStates = [];
                this._fadings = [];
              }

              update(deltaTime) {
                if (this.isMotionless) {
                  return;
                }

                const managedStates = this._managedStates;
                const fadings = this._fadings;

                if (managedStates.length === 1 && fadings.length === 1) {
                  const state = managedStates[0].state;

                  if (state) {
                    state.weight = 1.0;
                  }
                } else {
                  this._calculateWeights(deltaTime);
                }

                for (let iManagedState = 0; iManagedState < managedStates.length; ++iManagedState) {
                  const state = managedStates[iManagedState].state;

                  if (state && state.isMotionless) {
                    state.sample();
                  }
                }
              }

              crossFade(state, duration) {
                var _target$state;

                if (this._managedStates.length === 0) {
                  duration = 0;
                }

                if (duration === 0) {
                  this.clear();
                }

                let target = this._managedStates.find(weightedState => weightedState.state === state);

                if (!target) {
                  target = {
                    state,
                    reference: 0
                  };

                  if (state) {
                    state.play();
                  }

                  this._managedStates.push(target);
                } else if ((_target$state = target.state) === null || _target$state === void 0 ? void 0 : _target$state.isMotionless) {
                  target.state.play();
                }

                ++target.reference;

                this._fadings.unshift({
                  easeDuration: duration,
                  easeTime: 0,
                  target
                });
              }

              clear() {
                for (let iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
                  const state = this._managedStates[iManagedState].state;

                  if (state) {
                    state.stop();
                  }
                }

                this._managedStates.length = 0;
                this._fadings.length = 0;
              }

              onPlay() {
                super.onPlay();
                legacyCC.director.getAnimationManager().addCrossFade(this);
              }

              onPause() {
                super.onPause();
                legacyCC.director.getAnimationManager().removeCrossFade(this);

                for (let iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
                  const state = this._managedStates[iManagedState].state;

                  if (state) {
                    state.pause();
                  }
                }
              }

              onResume() {
                super.onResume();
                legacyCC.director.getAnimationManager().addCrossFade(this);

                for (let iManagedState = 0; iManagedState < this._managedStates.length; ++iManagedState) {
                  const state = this._managedStates[iManagedState].state;

                  if (state) {
                    state.resume();
                  }
                }
              }

              onStop() {
                super.onStop();
                legacyCC.director.getAnimationManager().removeCrossFade(this);
                this.clear();
              }

              _calculateWeights(deltaTime) {
                const managedStates = this._managedStates;
                const fadings = this._fadings;

                for (let iManagedState = 0; iManagedState < managedStates.length; ++iManagedState) {
                  const state = managedStates[iManagedState].state;

                  if (state) {
                    state.weight = 0;
                  }
                }

                let absoluteWeight = 1.0;
                let deadFadingBegin = this._fadings.length;

                for (let iFading = 0; iFading < this._fadings.length; ++iFading) {
                  const fading = this._fadings[iFading];
                  fading.easeTime += deltaTime;
                  const relativeWeight = fading.easeDuration === 0 ? 1 : clamp01(fading.easeTime / fading.easeDuration);
                  const weight = relativeWeight * absoluteWeight;
                  absoluteWeight *= 1.0 - relativeWeight;

                  if (fading.target.state) {
                    fading.target.state.weight += weight;
                  }

                  if (fading.easeTime >= fading.easeDuration) {
                    deadFadingBegin = iFading + 1;
                    fading.easeTime = fading.easeDuration;
                    break;
                  }
                }

                if (deadFadingBegin !== this._fadings.length) {
                  for (let iDeadFading = deadFadingBegin; iDeadFading < this._fadings.length; ++iDeadFading) {
                    const deadFading = this._fadings[iDeadFading];
                    --deadFading.target.reference;

                    if (deadFading.target.reference <= 0) {
                      if (deadFading.target.state) {
                        deadFading.target.state.stop();
                      }

                      remove(this._managedStates, deadFading.target);
                    }
                  }

                  this._fadings.splice(deadFadingBegin);
                }
              }

            }

            var _dec$w, _dec2$g, _dec3$9, _dec4$7, _dec5$6, _dec6$4, _dec7$3, _dec8$3, _dec9$3, _dec10$3, _class$w, _class2$u, _descriptor$r, _descriptor2$i, _descriptor3$d, _class3$c, _temp$v;
            let Animation = exports('cD', (_dec$w = ccclass('cc.Animation'), _dec2$g = help(), _dec3$9 = executionOrder(99), _dec4$7 = menu(), _dec5$6 = type([AnimationClip]), _dec6$4 = tooltip(), _dec7$3 = type(AnimationClip), _dec8$3 = tooltip(), _dec9$3 = tooltip(), _dec10$3 = type([AnimationClip]), _dec$w(_class$w = _dec2$g(_class$w = _dec3$9(_class$w = executeInEditMode(_class$w = _dec4$7(_class$w = (_class2$u = (_temp$v = _class3$c = class Animation extends Eventify(Component) {
              constructor(...args) {
                super(...args);

                _initializerDefineProperty(this, "playOnLoad", _descriptor$r, this);

                this._crossFade = new CrossFade();
                this._nameToState = createMap(true);

                _initializerDefineProperty(this, "_clips", _descriptor2$i, this);

                _initializerDefineProperty(this, "_defaultClip", _descriptor3$d, this);

                this._hasBeenPlayed = false;
              }

              get clips() {
                return this._clips;
              }

              set clips(value) {
                if (this._crossFade) {
                  this._crossFade.clear();
                }

                for (const clip of this._clips) {
                  if (clip) {
                    this._removeStateOfAutomaticClip(clip);
                  }
                }

                for (const clip of value) {
                  if (clip) {
                    this.createState(clip);
                  }
                }

                const newDefaultClip = value.find(clip => equalClips(clip, this._defaultClip));

                if (newDefaultClip) {
                  this._defaultClip = newDefaultClip;
                } else {
                  this._defaultClip = null;
                }

                this._clips = value;
              }

              get defaultClip() {
                return this._defaultClip;
              }

              set defaultClip(value) {
                this._defaultClip = value;

                if (!value) {
                  return;
                }

                const isBoundedDefaultClip = this._clips.findIndex(clip => equalClips(clip, value)) >= 0;

                if (!isBoundedDefaultClip) {
                  this._clips.push(value);

                  this.createState(value);
                }
              }

              onLoad() {
                this.clips = this._clips;

                for (const stateName in this._nameToState) {
                  const state = this._nameToState[stateName];
                  state.initialize(this.node);
                }
              }

              start() {
                if ( this.playOnLoad && !this._hasBeenPlayed && this._defaultClip) {
                  this.crossFade(this._defaultClip.name, 0);
                }
              }

              onEnable() {
                this._crossFade.resume();
              }

              onDisable() {
                this._crossFade.pause();
              }

              onDestroy() {
                this._crossFade.stop();

                for (const name in this._nameToState) {
                  const state = this._nameToState[name];
                  state.destroy();
                }

                this._nameToState = createMap(true);
              }

              play(name) {
                this._hasBeenPlayed = true;

                if (!name) {
                  if (!this._defaultClip) {
                    return;
                  }

                  name = this._defaultClip.name;
                }

                this.crossFade(name, 0);
              }

              crossFade(name, duration = 0.3) {
                this._hasBeenPlayed = true;
                const state = this._nameToState[name];

                if (state) {
                  this._crossFade.play();

                  this._crossFade.crossFade(state, duration);
                }
              }

              pause() {
                this._crossFade.pause();
              }

              resume() {
                this._crossFade.resume();
              }

              stop() {
                this._crossFade.stop();
              }

              getAnimationState(name) {
                return this.getState(name);
              }

              getState(name) {
                const state = this._nameToState[name];

                if (state && !state.curveLoaded) {
                  state.initialize(this.node);
                }

                return state || null;
              }

              createState(clip, name) {
                name = name || clip.name;
                this.removeState(name);
                return this._doCreateState(clip, name);
              }

              removeState(name) {
                const state = this._nameToState[name];

                if (state) {
                  state.allowLastFrameEvent(false);
                  state.stop();
                  delete this._nameToState[name];
                }
              }

              addClip(clip, name) {
                if (!contains(this._clips, clip)) {
                  this._clips.push(clip);
                }

                return this.createState(clip, name);
              }

              removeClip(clip, force) {
                let removalState;

                for (const name in this._nameToState) {
                  const state = this._nameToState[name];
                  const stateClip = state.clip;

                  if (stateClip === clip) {
                    removalState = state;
                    break;
                  }
                }

                if (clip === this._defaultClip) {
                  if (force) {
                    this._defaultClip = null;
                  } else {
                    {
                      warnID(3902);
                    }

                    return;
                  }
                }

                if (removalState && removalState.isPlaying) {
                  if (force) {
                    removalState.stop();
                  } else {
                    {
                      warnID(3903);
                    }

                    return;
                  }
                }

                this._clips = this._clips.filter(item => item !== clip);

                if (removalState) {
                  delete this._nameToState[removalState.name];
                }
              }

              on(type, callback, thisArg, once) {
                const ret = super.on(type, callback, thisArg, once);

                if (type === EventType.LASTFRAME) {
                  this._syncAllowLastFrameEvent();
                }

                return ret;
              }

              once(type, callback, thisArg) {
                const ret = super.once(type, callback, thisArg);

                if (type === EventType.LASTFRAME) {
                  this._syncAllowLastFrameEvent();
                }

                return ret;
              }

              off(type, callback, thisArg) {
                super.off(type, callback, thisArg);

                if (type === EventType.LASTFRAME) {
                  this._syncDisallowLastFrameEvent();
                }
              }

              _createState(clip, name) {
                return new AnimationState(clip, name);
              }

              _doCreateState(clip, name) {
                const state = this._createState(clip, name);

                state._setEventTarget(this);

                state.allowLastFrameEvent(this.hasEventListener(EventType.LASTFRAME));

                if (this.node) {
                  state.initialize(this.node);
                }

                this._nameToState[state.name] = state;
                return state;
              }

              _getStateByNameOrDefaultClip(name) {
                if (!name) {
                  if (!this._defaultClip) {
                    return null;
                  }

                  name = this._defaultClip.name;
                }

                const state = this._nameToState[name];

                if (state) {
                  return state;
                }

                return null;
              }

              _removeStateOfAutomaticClip(clip) {
                for (const name in this._nameToState) {
                  const state = this._nameToState[name];

                  if (equalClips(clip, state.clip)) {
                    state.stop();
                    delete this._nameToState[name];
                  }
                }
              }

              _syncAllowLastFrameEvent() {
                if (this.hasEventListener(EventType.LASTFRAME)) {
                  for (const stateName in this._nameToState) {
                    this._nameToState[stateName].allowLastFrameEvent(true);
                  }
                }
              }

              _syncDisallowLastFrameEvent() {
                if (!this.hasEventListener(EventType.LASTFRAME)) {
                  for (const stateName in this._nameToState) {
                    this._nameToState[stateName].allowLastFrameEvent(false);
                  }
                }
              }

            }, _class3$c.EventType = EventType, _temp$v), (_applyDecoratedDescriptor(_class2$u.prototype, "clips", [_dec5$6, _dec6$4], Object.getOwnPropertyDescriptor(_class2$u.prototype, "clips"), _class2$u.prototype), _applyDecoratedDescriptor(_class2$u.prototype, "defaultClip", [_dec7$3, _dec8$3], Object.getOwnPropertyDescriptor(_class2$u.prototype, "defaultClip"), _class2$u.prototype), _descriptor$r = _applyDecoratedDescriptor(_class2$u.prototype, "playOnLoad", [serializable, _dec9$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              }
            }), _descriptor2$i = _applyDecoratedDescriptor(_class2$u.prototype, "_clips", [_dec10$3], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return [];
              }
            }), _descriptor3$d = _applyDecoratedDescriptor(_class2$u.prototype, "_defaultClip", [serializable], {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return null;
              }
            })), _class2$u)) || _class$w) || _class$w) || _class$w) || _class$w) || _class$w));

            function equalClips(clip1, clip2) {
              if (clip1 === clip2) {
                return true;
              }

              return !!clip1 && !!clip2 && clip1._uuid === clip2._uuid && clip1._uuid;
            }

            replaceProperty(Animation.prototype, 'Animation', [{
              name: 'getAnimationState',
              newName: 'getState'
            }, {
              name: 'addClip',
              newName: 'createState'
            }, {
              name: 'removeClip',
              newName: 'removeState',

              customFunction(...args) {
                const arg0 = args[0];
                return Animation.prototype.removeState.call(this, arg0.name);
              }

            }]);
            legacyCC.AnimationComponent = Animation;
            js.setClassAlias(Animation, 'cc.AnimationComponent');

            const stack = [];
            const pool = new Map();
            function getWorldMatrix(transform, stamp) {
              let i = 0;
              let res = Mat4.IDENTITY;

              while (transform) {
                if (transform.stamp === stamp || transform.stamp + 1 === stamp && !transform.node.hasChangedFlags) {
                  res = transform.world;
                  transform.stamp = stamp;
                  break;
                }

                transform.stamp = stamp;
                stack[i++] = transform;
                transform = transform.parent;
              }

              while (i > 0) {
                transform = stack[--i];
                const node = transform.node;
                Mat4.fromRTS(transform.local, node.rotation, node.position, node.scale);
                res = Mat4.multiply(transform.world, res, transform.local);
              }

              return res;
            }
            function getTransform(node, root) {
              let joint = null;
              let i = 0;

              while (node !== root) {
                const id = node.uuid;

                if (pool.has(id)) {
                  joint = pool.get(id);
                  break;
                } else {
                  joint = {
                    node,
                    local: new Mat4(),
                    world: new Mat4(),
                    stamp: -1,
                    parent: null
                  };
                  pool.set(id, joint);
                }

                stack[i++] = joint;
                node = node.parent;
                joint = null;
              }

              let child;

              while (i > 0) {
                child = stack[--i];
                child.parent = joint;
                joint = child;
              }

              return joint;
            }
            function deleteTransform(node) {
              let transform = pool.get(node.uuid) || null;

              while (transform) {
                pool.delete(transform.node.uuid);
                transform = transform.parent;
              }
            }

            var _class$x, _class2$v, _temp$w;
            let AnimationManager = exports('fX', ccclass(_class$x = (_temp$w = _class2$v = class AnimationManager extends System$1 {
              constructor(...args) {
                super(...args);
                this._anims = new MutableForwardIterator([]);
                this._delayEvents = [];
                this._blendStateBuffer = new BlendStateBuffer();
                this._crossFades = [];
                this._sockets = [];
              }

              get blendState() {
                return this._blendStateBuffer;
              }

              addCrossFade(crossFade) {
                this._crossFades.push(crossFade);
              }

              removeCrossFade(crossFade) {
                remove(this._crossFades, crossFade);
              }

              update(dt) {
                const {
                  _delayEvents,
                  _crossFades,
                  _sockets
                } = this;

                for (let i = 0, l = _crossFades.length; i < l; i++) {
                  _crossFades[i].update(dt);
                }

                const iterator = this._anims;
                const array = iterator.array;

                for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
                  const anim = array[iterator.i];

                  if (!anim.isMotionless) {
                    anim.update(dt);
                  }
                }

                this._blendStateBuffer.apply();

                const stamp = legacyCC.director.getTotalFrames();

                for (let i = 0, l = _sockets.length; i < l; i++) {
                  const {
                    target,
                    transform
                  } = _sockets[i];
                  target.matrix = getWorldMatrix(transform, stamp);
                }

                for (let i = 0, l = _delayEvents.length; i < l; i++) {
                  const event = _delayEvents[i];
                  event.fn.apply(event.thisArg, event.args);
                }

                _delayEvents.length = 0;
              }

              destruct() {}

              addAnimation(anim) {
                const index = this._anims.array.indexOf(anim);

                if (index === -1) {
                  this._anims.push(anim);
                }
              }

              removeAnimation(anim) {
                const index = this._anims.array.indexOf(anim);

                if (index >= 0) {
                  this._anims.fastRemoveAt(index);
                } else {
                  errorID(3907);
                }
              }

              pushDelayEvent(fn, thisArg, args) {
                this._delayEvents.push({
                  fn,
                  thisArg,
                  args
                });
              }

              addSockets(root, sockets) {
                for (let i = 0; i < sockets.length; ++i) {
                  const socket = sockets[i];

                  if (this._sockets.find(s => s.target === socket.target)) {
                    continue;
                  }

                  const targetNode = root.getChildByPath(socket.path);
                  const transform = socket.target && targetNode && getTransform(targetNode, root);

                  if (transform) {
                    this._sockets.push({
                      target: socket.target,
                      transform
                    });
                  }
                }
              }

              removeSockets(root, sockets) {
                for (let i = 0; i < sockets.length; ++i) {
                  const socketToRemove = sockets[i];

                  for (let j = 0; j < this._sockets.length; ++j) {
                    const socket = this._sockets[j];

                    if (socket.target === socketToRemove.target) {
                      deleteTransform(socket.transform.node);
                      this._sockets[j] = this._sockets[this._sockets.length - 1];
                      this._sockets.length--;
                      break;
                    }
                  }
                }
              }

            }, _class2$v.ID = 'animation', _temp$w)) || _class$x);
            director.on(Director.EVENT_INIT, () => {
              const animationManager = new AnimationManager();
              director.registerSystem(AnimationManager.ID, animationManager, Scheduler.PRIORITY_SYSTEM);
            });
            legacyCC.AnimationManager = AnimationManager;

            const m4_1$2 = new Mat4();
            function getPathFromRoot(target, root) {
              let node = target;
              let path = '';

              while (node !== null && node !== root) {
                path = `${node.name}/${path}`;
                node = node.parent;
              }

              return path.slice(0, -1);
            }
            function getWorldTransformUntilRoot(target, root, outMatrix) {
              Mat4.identity(outMatrix);

              while (target !== root) {
                Mat4.fromRTS(m4_1$2, target.rotation, target.position, target.scale);
                Mat4.multiply(outMatrix, m4_1$2, outMatrix);
                target = target.parent;
              }

              return outMatrix;
            }

            var _dec$x, _class$y, _dec2$h, _class2$w, _dec3$a, _class3$d, _dec4$8, _class4$5;
            legacyCC.easing = easing;
            let HierachyModifier = exports('fI', (_dec$x = ccclass('cc.HierachyModifier'), _dec$x(_class$y = class HierachyModifier extends HierarchyPath {}) || _class$y));
            legacyCC.HierachyModifier = HierachyModifier;
            let ComponentModifier = exports('fJ', (_dec2$h = ccclass('cc.ComponentModifier'), _dec2$h(_class2$w = class ComponentModifier extends ComponentPath {}) || _class2$w));
            legacyCC.ComponentModifier = ComponentModifier;
            let CurveValueAdapter = exports('fK', (_dec3$a = ccclass('cc.CurveValueAdapter'), _dec3$a(_class3$d = class CurveValueAdapter {
              forTarget(target) {
                return {
                  set: () => {}
                };
              }

            }) || _class3$d));
            legacyCC.CurveValueAdapter = CurveValueAdapter;
            let UniformCurveValueAdapter = exports('fL', (_dec4$8 = ccclass('cc.UniformCurveValueAdapter'), _dec4$8(_class4$5 = class UniformCurveValueAdapter extends UniformProxyFactory {}) || _class4$5));
            legacyCC.UniformCurveValueAdapter = UniformCurveValueAdapter;
            function isPropertyModifier(path) {
              return typeof path === 'string';
            }
            legacyCC.isPropertyModifier = isPropertyModifier;
            function isElementModifier(path) {
              return typeof path === 'number';
            }
            legacyCC.isElementModifier = isElementModifier;
            function isCustomTargetModifier(path, constructor) {
              return path instanceof constructor;
            }
            legacyCC.isCustomTargetModifier = isCustomTargetModifier;

            legacyCC.math = math;
            legacyCC.geometry = geometry;

            class NodePool$1 {
              constructor(poolHandlerComp) {
                this.poolHandlerComp = void 0;
                this._pool = void 0;
                this.poolHandlerComp = poolHandlerComp;
                this._pool = [];
              }

              size() {
                return this._pool.length;
              }

              clear() {
                const count = this._pool.length;

                for (let i = 0; i < count; ++i) {
                  this._pool[i].destroy();
                }

                this._pool.length = 0;
              }

              put(obj) {
                if (obj && this._pool.indexOf(obj) === -1) {
                  obj.removeFromParent();
                  const handler = this.poolHandlerComp ? obj.getComponent(this.poolHandlerComp) : null;

                  if (handler && handler.unuse) {
                    handler.unuse();
                  }

                  this._pool.push(obj);
                }
              }

              get(...args) {
                const last = this._pool.length - 1;

                if (last < 0) {
                  return null;
                } else {
                  const obj = this._pool[last];
                  this._pool.length = last;
                  const handler = this.poolHandlerComp ? obj.getComponent(this.poolHandlerComp) : null;

                  if (handler && handler.reuse) {
                    handler.reuse(arguments);
                  }

                  return obj;
                }
              }

            } exports('fZ', NodePool$1);
            legacyCC.NodePool = NodePool$1;

            legacyCC.renderer = renderer;

            var commonjsGlobal = exports('d$', typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {});

            function unwrapExports (x) {
            	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
            }

            function createCommonjsModule(fn, module) {
            	return module = { exports: {} }, fn(module, module.exports), module.exports;
            }

            var ammo = createCommonjsModule(function (module, exports) {
            // This is ammo.js, a port of Bullet Physics to JavaScript. zlib licensed.
              
            var Ammo = (function() {
              var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
              return (
            function(Ammo) {
              Ammo = Ammo || {};

            var b;b||(b=typeof Ammo !== 'undefined' ? Ammo : {});var aa={},ba;for(ba in b)b.hasOwnProperty(ba)&&(aa[ba]=b[ba]);var ca=!1,da=!1,ea=!1,fa=!1,ha=!1;ca="object"===typeof window;da="function"===typeof importScripts;ea=(fa="object"===typeof process&&"object"===typeof process.versions&&"string"===typeof process.versions.node)&&!ca&&!da;ha=!ca&&!ea&&!da;var ia="",ja,ka;
            if(ea)ia=__dirname+"/",ja=function(a,c){var d;return (d=la(a))?c?d:d.toString():console.error("shell read",a,d)},ka=function(a){a=ja(a,!0);a.buffer||(a=new Uint8Array(a));assert(a.buffer);return a},1<process.argv.length&&process.argv[1].replace(/\\/g,"/"),process.argv.slice(2),process.on("uncaughtException",function(a){throw a;}),process.on("unhandledRejection",ma),b.inspect=function(){return "[Emscripten Module object]"};else if(ha)"undefined"!=typeof read&&(ja=function(a){var c=la(a);return c?na(c):
            read(a)}),ka=function(a){var c;if(c=la(a))return c;if("function"===typeof readbuffer)return new Uint8Array(readbuffer(a));c=read(a,"binary");assert("object"===typeof c);return c},"undefined"!==typeof print&&("undefined"===typeof console&&(console={}),console.log=print,console.warn=console.error="undefined"!==typeof printErr?printErr:print);else if(ca||da)da?ia=self.location.href:document.currentScript&&(ia=document.currentScript.src),_scriptDir&&(ia=_scriptDir),ia=0!==ia.indexOf("blob:")?ia.substr(0,
            ia.lastIndexOf("/")+1):"",ja=function(a){try{var c=new XMLHttpRequest;c.open("GET",a,!1);c.send(null);return c.responseText}catch(d){if(a=la(a))return na(a);throw d;}},da&&(ka=function(a){try{var c=new XMLHttpRequest;c.open("GET",a,!1);c.responseType="arraybuffer";c.send(null);return new Uint8Array(c.response)}catch(d){if(a=la(a))return a;throw d;}});var oa=b.print||console.log.bind(console),pa=b.printErr||console.warn.bind(console);for(ba in aa)aa.hasOwnProperty(ba)&&(b[ba]=aa[ba]);aa=null;var qa;
            b.wasmBinary&&(qa=b.wasmBinary);function ra(){return {buffer:new ArrayBuffer(sa/65536*65536),grow:function(a){return ta(a)}}}function ua(){return {exports:(
            // EMSCRIPTEN_START_ASM
            function a(/** @suppress {uselessCode} */asmLibraryArg,wasmMemory,wasmTable){var scratchBuffer=new ArrayBuffer(8);var b=new Int32Array(scratchBuffer);var c=new Float32Array(scratchBuffer);var d=new Float64Array(scratchBuffer);function e(index){return b[index]}function f(index,value){b[index]=value;}function g(){return d[0]}function h(value){d[0]=value;}function i(low,high){b[0]=low;b[1]=high;}function j(value){c[0]=value;}function k(){return c[0]}function l(global,env,buffer){var m=env.memory;var n=wasmTable;var o=new global.Int8Array(buffer);var p=new global.Int16Array(buffer);var q=new global.Int32Array(buffer);var r=new global.Uint8Array(buffer);var s=new global.Uint16Array(buffer);var t=new global.Uint32Array(buffer);var u=new global.Float32Array(buffer);var v=new global.Float64Array(buffer);var w=global.Math.imul;var x=global.Math.fround;var y=global.Math.abs;var z=global.Math.clz32;var A=global.Math.min;var B=global.Math.max;var C=global.Math.floor;var D=global.Math.ceil;var E=global.Math.sqrt;var F=env.abort;var G=global.NaN;var H=global.Infinity;var I=env.a;var J=env.b;var K=env.c;var L=env.d;var M=env.e;var N=env.f;var O=env.g;var P=5270112;var Q=0;
            // EMSCRIPTEN_START_FUNCS
            function Ol(a,b,c,d,g,h,i,l){var m=x(0),n=0,p=0,s=x(0),t=x(0),v=0,z=0,A=x(0),B=0,C=x(0),D=x(0),F=x(0),G=x(0),H=0,I=x(0),J=x(0),K=x(0),L=x(0),M=0,N=x(0),O=x(0),Q=0,R=0,S=0,T=x(0),U=x(0),V=x(0),W=x(0),X=x(0),Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=x(0),da=x(0),ea=x(0),fa=0,ga=x(0),ha=x(0),ia=x(0),ja=x(0),ka=x(0),la=x(0);n=P-48|0;P=n;fa=r[a+180|0];ga=u[a+880>>2];ha=u[a+944>>2];ia=u[a+876>>2];ja=u[a+940>>2];ka=u[a+872>>2];la=u[a+936>>2];m=x(i+l);C=m>x(0)?x(l/m):x(.5);G=x(x(1)-C);z=q[b+24>>2];N=u[a+920>>2];J=u[a+904>>2];K=u[a+856>>2];Y=q[a+856>>2];T=u[a+840>>2];Z=q[a+840>>2];V=u[a+888>>2];U=u[a+824>>2];_=q[a+824>>2];H=r[a+49|0];a:{if(H){t=x(x(C*U)+x(G*V));s=x(x(C*T)+x(G*J));F=x(x(C*K)+x(G*N));m=x(x(1)/x(E(x(x(x(t*t)+x(s*s))+x(F*F)))));s=x(s*m);A=x(t*m);I=x(F*m);b:{if(!!(x(y(I))>x(.7071067690849304))){m=x(x(I*I)+x(s*s));L=x(x(1)/x(E(m)));m=x(m*L);t=x(L*x(-I));F=x(A*t);O=x(s*L);L=x(O*x(-A));break b}t=x(x(A*A)+x(s*s));m=x(x(1)/x(E(t)));F=x(t*m);D=x(m*x(-s));L=x(I*D);t=x(A*m);m=x(t*x(-I));}Z=(j(s),e(0));_=(j(A),e(0));u[n+40>>2]=O;u[n+36>>2]=t;u[n+24>>2]=F;u[n+20>>2]=L;u[n+16>>2]=m;u[n+32>>2]=D;p=(j(D),e(0));Y=(j(I),e(0));break a}p=q[a+828>>2];v=q[a+844>>2];B=q[a+860>>2];q[n+44>>2]=0;q[n+40>>2]=B;q[n+36>>2]=v;q[n+32>>2]=p;v=q[a+832>>2];B=q[a+848>>2];R=q[a+864>>2];q[n+28>>2]=0;q[n+24>>2]=R;q[n+20>>2]=B;q[n+16>>2]=v;}v=q[b+12>>2];q[v>>2]=p;q[v+4>>2]=q[n+36>>2];q[v+8>>2]=q[n+40>>2];B=z<<2;q[B+v>>2]=q[n+16>>2];R=B+4|0;q[R+v>>2]=q[n+20>>2];M=B+8|0;q[M+v>>2]=q[n+24>>2];p=q[b+20>>2];t=u[n+32>>2];X=x(-t);u[p>>2]=X;s=u[n+36>>2];u[p+4>>2]=-s;F=u[n+40>>2];u[p+8>>2]=-F;L=u[n+16>>2];u[p+B>>2]=-L;O=u[n+20>>2];u[p+R>>2]=-O;A=u[n+24>>2];u[p+M>>2]=-A;m=u[a+280>>2];R=q[b+28>>2];M=R;S=q[a+300>>2];if(!(S&128)){m=x(m*u[b+4>>2]);}m=x(m*u[b>>2]);D=x(x(T*N)-x(K*J));I=x(x(K*V)-x(U*N));N=x(x(U*J)-x(T*V));u[M>>2]=m*x(x(x(D*t)+x(I*s))+x(N*F));u[B+R>>2]=m*x(x(x(D*L)+x(I*O))+x(N*A));if(S&64){B=q[b+32>>2];q[B>>2]=q[a+292>>2];q[B+(z<<2)>>2]=q[a+292>>2];}ba=i<x(1.1920928955078125e-7)|l<x(1.1920928955078125e-7);i=u[d+56>>2];l=u[d+52>>2];m=u[c+56>>2];I=u[c+52>>2];D=u[d+48>>2];N=u[c+48>>2];q[n+8>>2]=0;q[n+12>>2]=0;q[n>>2]=0;q[n+4>>2]=0;R=w(z,3);c=z<<1;c:{if(H){L=u[a+1032>>2];O=u[a+1080>>2];t=u[a+944>>2];s=u[a+936>>2];F=u[a+940>>2];A=u[a+880>>2];T=u[a+872>>2];V=u[a+876>>2];q[n+44>>2]=0;U=x(s-D);D=(f(0,_),k());X=x(F-l);J=(f(0,Z),k());l=x(t-i);K=(f(0,Y),k());i=x(x(x(U*D)+x(X*J))+x(l*K));s=x(i*K);N=x(T-N);t=x(V-I);A=x(A-m);m=x(x(x(N*D)+x(t*J))+x(A*K));F=x(m*K);I=x(l-s);T=x(A-F);l=x(x(C*I)+x(G*T));u[n+40>>2]=l;V=x(i*J);X=x(X-V);ca=x(m*J);da=x(t-ca);t=x(x(C*X)+x(G*da));u[n+36>>2]=t;W=U;U=x(i*D);ea=x(W-U);m=x(m*D);W=x(N-m);A=x(x(C*ea)+x(G*W));u[n+32>>2]=A;i=x(O-L);s=x(x(F+x(i*K))-s);L=x(I-x(G*s));F=x(x(ca+x(i*J))-V);I=x(X-x(G*F));m=x(x(m+x(i*D))-U);i=x(ea-x(G*m));N=x(T+x(C*s));F=x(da+x(C*F));O=x(W+x(C*m));m=x(x(l*l)+x(x(A*A)+x(t*t)));d:{if(!!(m>x(1.1920928955078125e-7))){W=l;l=x(x(1)/x(E(m)));m=x(W*l);u[n+40>>2]=m;s=x(t*l);u[n+36>>2]=s;t=x(A*l);u[n+32>>2]=t;H=(j(m),e(0));z=(j(s),e(0));break d}t=u[a+828>>2];d=q[a+828>>2];s=u[a+844>>2];z=q[a+844>>2];m=u[a+860>>2];H=q[a+860>>2];q[n+44>>2]=0;q[n+40>>2]=H;q[n+36>>2]=z;q[n+32>>2]=d;}u[n+8>>2]=x(O*s)-x(F*t);q[n+28>>2]=0;u[n+4>>2]=x(N*t)-x(O*m);u[n>>2]=x(F*m)-x(N*s);l=x(x(s*D)-x(t*J));u[n+24>>2]=l;A=x(x(t*K)-x(m*D));u[n+20>>2]=A;u[n+16>>2]=x(m*J)-x(s*K);B=c<<2;d=B+v|0;q[d+8>>2]=q[n+8>>2];v=q[n+4>>2];q[d>>2]=q[n>>2];q[d+4>>2]=v;u[p+B>>2]=-x(x(I*m)-x(L*s));M=(c|1)<<2;u[M+p>>2]=-x(x(L*t)-x(i*m));S=c+2<<2;u[S+p>>2]=-x(x(i*s)-x(I*t));q[n+12>>2]=0;t=x(x(F*l)-x(N*A));u[n>>2]=t;m=u[n+16>>2];J=x(x(O*A)-x(F*m));u[n+8>>2]=J;K=x(x(N*m)-x(O*l));u[n+4>>2]=K;s=x(x(I*l)-x(L*A));D=x(x(i*A)-x(I*m));m=x(x(L*m)-x(i*l));if(!(!ba|!r[a+297|0])){u[n+8>>2]=C*J;u[n+4>>2]=C*K;u[n>>2]=C*t;D=x(G*D);s=x(G*s);m=x(G*m);}p=q[n+4>>2];v=R<<2;d=v+q[b+12>>2]|0;q[d>>2]=q[n>>2];q[d+4>>2]=p;q[d+8>>2]=q[n+8>>2];d=q[b+20>>2];Q=v+4|0;u[d+Q>>2]=-m;u[d+v>>2]=-s;$=v+8|0;u[$+d>>2]=-D;p=q[b+8>>2];q[B+p>>2]=q[n+32>>2];q[p+M>>2]=z;q[p+S>>2]=H;d=q[n+16>>2];u[p+$>>2]=l;u[p+Q>>2]=A;q[p+v>>2]=d;d=q[b+16>>2];u[B+d>>2]=-u[n+32>>2];s=(f(0,z),k());u[d+M>>2]=-s;T=(f(0,H),k());u[d+S>>2]=-T;t=u[n+16>>2];u[d+Q>>2]=-A;u[d+v>>2]=-t;B=d+$|0;D=x(0);J=x(0);K=x(0);m=x(-l);break c}z=c<<2;J=x(l-I);K=x(i-m);i=x(x(J*F)-x(K*s));u[z+v>>2]=C*i;H=z|4;D=x(D-N);l=x(x(K*t)-x(D*F));u[H+v>>2]=C*l;M=z+8|0;m=x(x(D*s)-x(J*t));u[M+v>>2]=C*m;u[p+z>>2]=G*i;u[p+H>>2]=G*l;u[p+M>>2]=G*m;B=R<<2;S=B+8|0;i=x(x(D*O)-x(J*L));u[S+v>>2]=C*i;Q=B+4|0;l=x(x(K*L)-x(D*A));u[Q+v>>2]=C*l;m=x(x(J*A)-x(K*O));u[v+B>>2]=C*m;u[p+S>>2]=G*i;u[p+Q>>2]=G*l;u[p+B>>2]=G*m;p=q[b+8>>2];u[z+p>>2]=t;u[p+H>>2]=s;u[p+M>>2]=F;u[p+S>>2]=A;u[p+Q>>2]=O;u[p+B>>2]=L;d=q[b+16>>2];u[z+d>>2]=X;s=u[n+36>>2];u[d+H>>2]=-s;T=u[n+40>>2];u[d+M>>2]=-T;t=u[n+16>>2];u[d+B>>2]=-t;A=u[n+20>>2];u[d+Q>>2]=-A;B=d+S|0;i=x(0);I=x(0);L=x(0);O=x(0);F=x(0);N=x(0);l=u[n+24>>2];m=x(-l);}u[B>>2]=m;m=u[a+264>>2];B=q[b+28>>2];c=c<<2;v=B+c|0;M=q[a+300>>2];if(!(M&32)){m=x(m*u[b+4>>2]);}m=x(m*u[b>>2]);V=x(la-ka);U=x(ja-ia);W=x(x(V*u[n+32>>2])+x(U*s));s=x(ha-ga);u[v>>2]=m*x(W+x(s*T));v=R<<2;u[v+B>>2]=m*x(x(x(V*t)+x(U*A))+x(s*l));if(M&16){aa=c;c=q[b+32>>2];q[aa+c>>2]=q[a+276>>2];q[c+v>>2]=q[a+276>>2];}A=fa?x(1):x(-1);e:{f:{g:{if(r[a+296|0]){m=x(A*u[a+1032>>2]);R=m>x(0)?2:1;S=r[a+1096|0]!=0;c=1;break g}if(!r[a+1096|0]){break f}m=x(0);S=1;R=0;c=0;}v=q[b+24>>2];Q=v<<4;q[Q+p>>2]=_;v=v<<2;$=v|1;z=$<<2;q[z+p>>2]=Z;aa=p;H=v|2;p=H<<2;q[aa+p>>2]=Y;l=(f(0,_),k());u[d+Q>>2]=-l;t=(f(0,Z),k());u[d+z>>2]=-t;s=(f(0,Y),k());u[d+p>>2]=-s;h:{i:{if(r[a+49|0]){if(ba){break h}q[n+12>>2]=0;C=x(x(O*t)-x(F*l));u[n+8>>2]=C;G=x(x(N*l)-x(O*s));u[n+4>>2]=G;D=x(x(F*s)-x(N*t));u[n>>2]=D;d=q[b+12>>2];z=v<<2;u[d+z>>2]=D;Q=$<<2;u[Q+d>>2]=G;u[d+(H<<2)>>2]=C;p=q[b+20>>2];u[z+p>>2]=-x(x(I*s)-x(L*t));u[p+Q>>2]=-x(x(L*l)-x(i*s));i=x(-x(x(i*t)-x(I*l)));break i}d=q[b+12>>2];Q=v<<2;i=x(x(J*s)-x(K*t));u[d+Q>>2]=C*i;F=x(x(K*l)-x(D*s));u[d+z>>2]=C*F;W=C;C=x(x(D*t)-x(J*l));u[d+p>>2]=W*C;p=q[b+20>>2];u[Q+p>>2]=G*i;u[p+z>>2]=G*F;i=x(G*C);}u[(H<<2)+p>>2]=i;}C=u[a+188>>2];G=u[a+184>>2];d=v<<2;q[d+B>>2]=0;H=q[b+36>>2];q[d+H>>2]=0;z=q[b+40>>2];q[d+z>>2]=0;i=u[(M&512?a+232|0:b+4|0)>>2];p=G!=C;if(((p|c^1)&S)==1){if(M&1){q[q[b+32>>2]+(v<<2)>>2]=q[a+212>>2];}C=jb(u[a+1080>>2],u[a+184>>2],u[a+188>>2],u[a+1100>>2],x(i*u[b>>2]));B=q[b+28>>2];d=v<<2;z=B+d|0;u[z>>2]=u[z>>2]-x(x(A*C)*u[a+1100>>2]);H=q[b+36>>2];z=d+H|0;u[z>>2]=u[z>>2]-x(u[a+1104>>2]/u[b>>2]);z=q[b+40>>2];d=d+z|0;u[d>>2]=x(u[a+1104>>2]/u[b>>2])+u[d>>2];}d=5;if(!c){break e}M=v<<2;c=M+B|0;u[c>>2]=u[c>>2]+x(m*x(i*u[b>>2]));if(o[a+301|0]&1){q[M+q[b+32>>2]>>2]=q[a+244>>2];}aa=(v<<2)+z|0;j:{k:{if(!p){q[(v<<2)+H>>2]=-8388609;break k}p=(v<<2)+H|0;if((R|0)==1){q[p>>2]=-8388609;i=x(0);break j}q[p>>2]=0;}i=x(3.4028234663852886e+38);}u[aa>>2]=i;i=x(x(1)-u[a+240>>2]);l:{if(i==x(0)|i!=i){break l}m=x(y(i));i=x(A*x(x(x(x(u[g>>2]*l)+x(u[g+4>>2]*t))+x(u[g+8>>2]*s))-x(x(x(u[h>>2]*l)+x(u[h+4>>2]*t))+x(u[h+8>>2]*s))));if((R|0)==1){if(!(i<x(0))){break l}i=x(i*x(-m));if(!(i>u[c>>2])){break l}u[c>>2]=i;break l}if(!(i>x(0))){break l}i=x(i*x(-m));if(!(i<u[c>>2])){break l}u[c>>2]=i;}u[c>>2]=u[a+232>>2]*u[c>>2];break e}d=4;}m:{n:{if(r[a+297|0]){D=u[a+1088>>2];g=D>x(0)?1:2;z=r[a+1112|0]!=0;c=1;break n}if(!r[a+1112|0]){break m}D=x(0);z=1;g=0;c=0;}p=q[b+12>>2];d=w(q[b+24>>2],d);h=d<<2;q[p+h>>2]=_;v=h+8|0;q[v+p>>2]=Y;H=h+4|0;q[H+p>>2]=Z;p=q[b+20>>2];s=(f(0,Y),k());u[p+v>>2]=-s;C=(f(0,Z),k());u[p+H>>2]=-C;G=(f(0,_),k());u[h+p>>2]=-G;h=q[a+300>>2];F=u[(h&2048?a+248|0:b+4|0)>>2];l=u[a+192>>2];i=u[a+196>>2];if(!(!z|c&l==i)){m=i;t=l;if(h&4){q[q[b+32>>2]+(d<<2)>>2]=q[a+228>>2];t=u[a+192>>2];m=u[a+196>>2];}m=jb(u[a+1084>>2],t,m,u[a+1116>>2],x(F*u[b>>2]));B=q[b+28>>2];h=d<<2;u[B+h>>2]=m*u[a+1116>>2];u[h+q[b+36>>2]>>2]=x(-u[a+1120>>2])/u[b>>2];u[h+q[b+40>>2]>>2]=u[a+1120>>2]/u[b>>2];}if(!c){break m}h=d<<2;c=h+B|0;u[c>>2]=u[c>>2]+x(D*x(F*u[b>>2]));if(r[a+301|0]&4){q[h+q[b+32>>2]>>2]=q[a+260>>2];}o:{if(l==i){q[q[b+36>>2]+(d<<2)>>2]=-8388609;i=x(3.4028234663852886e+38);break o}h=q[b+36>>2]+(d<<2)|0;if((g|0)==1){q[h>>2]=0;i=x(3.4028234663852886e+38);break o}q[h>>2]=-8388609;i=x(0);}u[q[b+40>>2]+(d<<2)>>2]=i;i=x(x(1)-u[a+256>>2]);p:{if(i==x(0)|i!=i){break p}l=x(y(i));b=q[a+28>>2];i=x(x(x(u[b+388>>2]*G)+x(u[b+392>>2]*C))+x(u[b+396>>2]*s));b=q[a+32>>2];i=x(i-x(x(x(u[b+388>>2]*G)+x(u[b+392>>2]*C))+x(u[b+396>>2]*s)));if((g|0)==1){if(!(i<x(0))){break p}i=x(i*x(-l));if(!(i>u[c>>2])){break p}u[c>>2]=i;break p}if(!(i>x(0))){break p}i=x(i*x(-l));if(!(i<u[c>>2])){break p}u[c>>2]=i;}u[c>>2]=u[a+248>>2]*u[c>>2];}P=n+48|0;}function Pl(a,b){a=a|0;b=b|0;var c=0,d=0;c=a;d=b;b=q[a+28>>2];a=q[a+32>>2];Ol(c,d,b+4|0,a+4|0,b+372|0,a+372|0,u[b+404>>2],u[a+404>>2]);}function Ql(a){var b=x(0),e=x(0),f=x(0),g=x(0),h=x(0);o[a+297|0]=0;q[a+1088>>2]=0;f=u[a+192>>2];g=u[a+196>>2];a:{if(!(f<=g)){break a}b=u[a+892>>2];e=u[a+908>>2];h=u[a+924>>2];e=$(x(x(x(u[a+832>>2]*b)+x(u[a+848>>2]*e))+x(u[a+864>>2]*h)),x(x(x(u[a+828>>2]*b)+x(u[a+844>>2]*e))+x(u[a+860>>2]*h)));b:{if(f>=g){break b}if(!!(e<f)){b=ea(x(f-e),x(6.2831854820251465));c:{if(!!(b<x(-3.1415927410125732))){b=x(b+x(6.2831854820251465));break c}if(!(b>x(3.1415927410125732))){break c}b=x(b+x(-6.2831854820251465));}h=x(y(b));b=ea(x(g-e),x(6.2831854820251465));d:{if(!!(b<x(-3.1415927410125732))){b=x(b+x(6.2831854820251465));break d}if(!(b>x(3.1415927410125732))){break d}b=x(b+x(-6.2831854820251465));}e=h<x(y(b))?e:x(e+x(6.2831854820251465));break b}if(!(e>g)){break b}b=ea(x(e-g),x(6.2831854820251465));e:{if(!!(b<x(-3.1415927410125732))){b=x(b+x(6.2831854820251465));break e}if(!(b>x(3.1415927410125732))){break e}b=x(b+x(-6.2831854820251465));}h=x(y(b));b=ea(x(e-f),x(6.2831854820251465));f:{if(!!(b<x(-3.1415927410125732))){b=x(b+x(6.2831854820251465));break f}if(!(b>x(3.1415927410125732))){break f}b=x(b+x(-6.2831854820251465));}e=x(y(b))<h?x(e+x(-6.2831854820251465)):e;}u[a+1084>>2]=e;if(!!(e<f)){o[a+297|0]=1;u[a+1088>>2]=e-f;return}if(!(e>g)){break a}o[a+297|0]=1;u[a+1088>>2]=e-g;}}function Rl(a,i){a=a|0;i=i|0;var j=x(0),k=x(0),l=x(0);if(r[a+48|0]){q[i>>2]=0;q[i+4>>2]=0;return}q[i>>2]=4;q[i+4>>2]=2;xd(a,q[a+28>>2]+4|0,q[a+32>>2]+4|0);Ql(a);o[a+296|0]=0;k=u[a+1032>>2];q[a+1080>>2]=q[a+1032>>2];a:{b:{c:{l=u[a+184>>2];j=u[a+188>>2];if(!!(l<=j)){if(j<k){break c}j=l;if(j>k){break c}}q[a+1032>>2]=0;if(r[a+1096|0]){break b}break a}o[a+296|0]=1;u[a+1032>>2]=k-j;}q[i>>2]=q[i>>2]+1;q[i+4>>2]=q[i+4>>2]+ -1;}if(!(r[a+1112|0]?0:!r[a+297|0])){q[i>>2]=q[i>>2]+1;q[i+4>>2]=q[i+4>>2]+ -1;}}function Sl(a){var i=0,o=0;i=P-16|0;P=i;q[i+12>>2]=a;a=P-16|0;q[a+12>>2]=q[i+12>>2];o=P-16|0;q[o+12>>2]=q[q[a+12>>2]+4>>2];P=i+16|0;return q[o+12>>2]==31}function Tl(a,r,w,y){var E=0,P=x(0),ma=x(0),na=x(0),oa=x(0),pa=x(0),qa=x(0),ra=x(0),sa=x(0),ta=x(0),ua=x(0),va=x(0),wa=x(0),xa=x(0),ya=x(0),za=x(0),Aa=x(0),Ba=x(0),Ca=x(0),Da=x(0),Ea=x(0),Fa=x(0),Ga=0,Ha=0,Ia=x(0),Ja=x(0),Ka=x(0);Oa(a,7,zd(),r);o[a+48|0]=0;q[a>>2]=3680;E=q[w+12>>2];q[a+124>>2]=q[w+8>>2];q[a+128>>2]=E;E=q[w+4>>2];q[a+116>>2]=q[w>>2];q[a+120>>2]=E;E=q[w+28>>2];q[a+140>>2]=q[w+24>>2];q[a+144>>2]=E;E=q[w+20>>2];q[a+132>>2]=q[w+16>>2];q[a+136>>2]=E;E=q[w+36>>2];q[a+148>>2]=q[w+32>>2];q[a+152>>2]=E;E=q[w+44>>2];q[a+156>>2]=q[w+40>>2];q[a+160>>2]=E;E=q[w+56>>2];Ga=q[w+60>>2];Ha=q[w+52>>2];w=q[w+48>>2];o[a+180|0]=y;q[a+164>>2]=w;q[a+168>>2]=Ha;q[a+172>>2]=E;q[a+176>>2]=Ga;Ia=u[r+52>>2];Ja=u[r+56>>2];Ka=u[r+60>>2];ua=u[a+172>>2];va=u[a+164>>2];wa=u[a+168>>2];P=u[r+12>>2];ma=u[r+4>>2];na=u[r+8>>2];oa=u[r+28>>2];pa=u[r+20>>2];qa=u[r+24>>2];xa=u[a+132>>2];ya=u[a+148>>2];za=u[a+152>>2];Aa=u[a+120>>2];Ba=u[a+136>>2];ra=u[r+44>>2];Ca=u[a+156>>2];sa=u[r+36>>2];Da=u[a+124>>2];ta=u[r+40>>2];Ea=u[a+140>>2];Fa=u[a+116>>2];q[a+288>>2]=1065353216;q[a+292>>2]=0;q[a+280>>2]=1065353216;q[a+284>>2]=1060320051;q[a+272>>2]=1065353216;q[a+276>>2]=0;q[a+264>>2]=1065353216;q[a+268>>2]=1060320051;q[a+224>>2]=0;q[a+228>>2]=0;q[a+216>>2]=1065353216;q[a+220>>2]=1060320051;q[a+208>>2]=0;q[a+212>>2]=0;q[a+200>>2]=1065353216;q[a+204>>2]=1060320051;q[a+192>>2]=0;q[a+196>>2]=0;q[a+184>>2]=1065353216;q[a+188>>2]=-1082130432;q[a+112>>2]=0;q[a+96>>2]=0;q[a+80>>2]=0;q[a- -64>>2]=0;u[a+92>>2]=x(x(Da*sa)+x(Ea*ta))+x(Ca*ra);u[a+88>>2]=x(x(Aa*sa)+x(Ba*ta))+x(za*ra);u[a+84>>2]=x(x(Fa*sa)+x(xa*ta))+x(ya*ra);u[a+76>>2]=x(x(Da*pa)+x(Ea*qa))+x(Ca*oa);u[a+72>>2]=x(x(Aa*pa)+x(Ba*qa))+x(za*oa);u[a+68>>2]=x(x(Fa*pa)+x(xa*qa))+x(ya*oa);u[a+60>>2]=x(x(ma*Da)+x(na*Ea))+x(P*Ca);u[a+56>>2]=x(x(ma*Aa)+x(na*Ba))+x(P*za);u[a+52>>2]=x(x(Fa*ma)+x(xa*na))+x(ya*P);u[a+108>>2]=Ka+x(x(x(sa*va)+x(ta*wa))+x(ra*ua));u[a+104>>2]=Ja+x(x(x(pa*va)+x(qa*wa))+x(oa*ua));u[a+100>>2]=Ia+x(x(x(ma*va)+x(na*wa))+x(P*ua));q[a+1124>>2]=0;q[a+1116>>2]=0;q[a+1120>>2]=0;o[a+1096|0]=0;q[a+256>>2]=1065353216;q[a+260>>2]=0;q[a+248>>2]=1065353216;q[a+252>>2]=1060320051;q[a+240>>2]=1065353216;q[a+244>>2]=0;q[a+232>>2]=1065353216;q[a+236>>2]=1060320051;q[a+1100>>2]=0;q[a+1104>>2]=0;q[a+300>>2]=0;r=a+1105|0;o[r|0]=0;o[r+1|0]=0;o[r+2|0]=0;o[r+3|0]=0;o[r+4|0]=0;o[r+5|0]=0;o[r+6|0]=0;o[r+7|0]=0;o[a+49|0]=1;xd(a,q[a+28>>2]+4|0,q[a+32>>2]+4|0);}function Ul(a,r,u,w,x,y){Oa(a,7,r,u);o[a+48|0]=0;q[a>>2]=3680;r=q[w+12>>2];q[a+60>>2]=q[w+8>>2];q[a+64>>2]=r;r=q[w+4>>2];q[a+52>>2]=q[w>>2];q[a+56>>2]=r;r=q[w+28>>2];q[a+76>>2]=q[w+24>>2];q[a+80>>2]=r;r=q[w+20>>2];q[a+68>>2]=q[w+16>>2];q[a+72>>2]=r;r=q[w+44>>2];q[a+92>>2]=q[w+40>>2];q[a+96>>2]=r;r=q[w+36>>2];q[a+84>>2]=q[w+32>>2];q[a+88>>2]=r;r=q[w+60>>2];q[a+108>>2]=q[w+56>>2];q[a+112>>2]=r;r=q[w+52>>2];q[a+100>>2]=q[w+48>>2];q[a+104>>2]=r;r=q[x+12>>2];q[a+124>>2]=q[x+8>>2];q[a+128>>2]=r;r=q[x+4>>2];q[a+116>>2]=q[x>>2];q[a+120>>2]=r;r=q[x+28>>2];q[a+140>>2]=q[x+24>>2];q[a+144>>2]=r;r=q[x+20>>2];q[a+132>>2]=q[x+16>>2];q[a+136>>2]=r;r=q[x+44>>2];q[a+156>>2]=q[x+40>>2];q[a+160>>2]=r;r=q[x+36>>2];q[a+148>>2]=q[x+32>>2];q[a+152>>2]=r;r=q[x+60>>2];q[a+172>>2]=q[x+56>>2];q[a+176>>2]=r;r=q[x+52>>2];q[a+164>>2]=q[x+48>>2];q[a+168>>2]=r;q[a+288>>2]=1065353216;q[a+292>>2]=0;q[a+280>>2]=1065353216;q[a+284>>2]=1060320051;q[a+272>>2]=1065353216;q[a+276>>2]=0;q[a+264>>2]=1065353216;q[a+268>>2]=1060320051;q[a+224>>2]=0;q[a+228>>2]=0;q[a+216>>2]=1065353216;q[a+220>>2]=1060320051;q[a+208>>2]=0;q[a+212>>2]=0;q[a+200>>2]=1065353216;q[a+204>>2]=1060320051;q[a+192>>2]=0;q[a+196>>2]=0;q[a+184>>2]=1065353216;q[a+188>>2]=-1082130432;o[a+180|0]=y;q[a+1124>>2]=0;q[a+1116>>2]=0;q[a+1120>>2]=0;o[a+1096|0]=0;q[a+256>>2]=1065353216;q[a+260>>2]=0;q[a+248>>2]=1065353216;q[a+252>>2]=1060320051;q[a+240>>2]=1065353216;q[a+244>>2]=0;q[a+232>>2]=1065353216;q[a+236>>2]=1060320051;q[a+300>>2]=0;r=a+1105|0;o[r|0]=0;o[r+1|0]=0;o[r+2|0]=0;o[r+3|0]=0;o[r+4|0]=0;o[r+5|0]=0;o[r+6|0]=0;o[r+7|0]=0;q[a+1100>>2]=0;q[a+1104>>2]=0;o[a+49|0]=1;xd(a,q[a+28>>2]+4|0,q[a+32>>2]+4|0);}function Vl(a,q){var r=x(0),w=x(0),y=x(0);w=u[a+4>>2];a:{if(!(w>x(0))){break a}y=u[a>>2];r=ea(x(u[q>>2]-y),x(6.2831854820251465));b:{if(!!(r<x(-3.1415927410125732))){r=x(r+x(6.2831854820251465));break b}if(!(r>x(3.1415927410125732))){break b}r=x(r+x(-6.2831854820251465));}if(r<=w?!(r<x(-w)):0){break a}if(!!(r>x(0))){r=ea(x(w+y),x(6.2831854820251465));if(!!(r<x(-3.1415927410125732))){u[q>>2]=r+x(6.2831854820251465);return}u[q>>2]=r>x(3.1415927410125732)^1?r:x(r+x(-6.2831854820251465));return}r=ea(x(y-w),x(6.2831854820251465));c:{if(!!(r<x(-3.1415927410125732))){r=x(r+x(6.2831854820251465));break c}if(!(r>x(3.1415927410125732))){break c}r=x(r+x(-6.2831854820251465));}u[q>>2]=r;}}function Wl(a,q,La,Ma,Na,Oa){La=x(x(La-q)*x(.5));u[a+4>>2]=La;q=ea(x(La+q),x(6.2831854820251465));a:{if(!!(q<x(-3.1415927410125732))){q=x(q+x(6.2831854820251465));break a}if(!(q>x(3.1415927410125732))){break a}q=x(q+x(-6.2831854820251465));}u[a+16>>2]=Oa;u[a+12>>2]=Na;u[a+8>>2]=Ma;u[a>>2]=q;}function Xl(a){a=a|0;q[5608]=2012;a=q[5747];if(a){if(r[22992]){if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}q[5747]=0;}o[22992]=1;q[5745]=0;q[5746]=0;q[5747]=0;hb(22432);}function Yl(a){a=a|0;return q[a+332>>2]}function Zl(a,u,x){a=a|0;u=u|0;x=x|0;Va(a,u,x);q[u+52>>2]=q[a+300>>2];q[u+56>>2]=q[a+304>>2];q[u+60>>2]=q[a+308>>2];q[u+64>>2]=q[a+312>>2];q[u+68>>2]=q[a+316>>2];q[u+72>>2]=q[a+320>>2];q[u+76>>2]=q[a+324>>2];q[u+80>>2]=q[a+328>>2];return 3488}function _l(a,q,La){a=a|0;q=q|0;La=La|0;var Ma=x(0);Ma=x(3.4028234663852886e+38);a:{if((La|0)!=-1){break a}q=q+ -1|0;if(q>>>0>3){break a}b:{switch(q-2|0){default:return x(u[a+336>>2]);case 0:case 1:break b}}Ma=u[a+340>>2];}return x(Ma)}function $l(a,La,Na,Oa){a=a|0;La=La|0;Na=x(Na);Oa=Oa|0;a:{if((Oa|0)!=-1){break a}La=La+ -1|0;if(La>>>0>3){break a}b:{switch(La-2|0){default:u[a+336>>2]=Na;q[a+332>>2]=q[a+332>>2]|1;return;case 0:case 1:break b}}u[a+340>>2]=Na;q[a+332>>2]=q[a+332>>2]|2;}}function am(a,La,Na,Oa){var Pa=0,Qa=x(0),Ra=x(0),Sa=0,Ta=0,Ua=x(0),Va=x(0),Wa=x(0),Xa=0,Ya=0,Za=0,_a=x(0),$a=x(0),ab=x(0),bb=x(0),cb=x(0),db=x(0),eb=x(0),fb=0,gb=0;Ta=q[La+8>>2];q[Ta>>2]=1065353216;Ya=q[La+24>>2];Xa=Ya<<2;fb=Xa+4|0;q[Ta+fb>>2]=1065353216;Za=Ya<<3;gb=Za+8|0;q[Ta+gb>>2]=1065353216;Ua=u[Na+20>>2];_a=u[Na+24>>2];Va=u[Na+36>>2];Qa=u[a+304>>2];$a=u[Na+40>>2];Ra=u[a+308>>2];ab=u[Na+8>>2];bb=u[Na>>2];cb=u[Na+4>>2];db=u[Na+16>>2];eb=u[Na+32>>2];Wa=u[a+300>>2];Ta=P-16|0;q[Ta+12>>2]=0;Va=x(x(x(Wa*eb)+x(Qa*Va))+x(Ra*$a));u[Ta+8>>2]=Va;Ua=x(x(x(Wa*db)+x(Qa*Ua))+x(Ra*_a));u[Ta+4>>2]=Ua;Qa=x(x(x(bb*Wa)+x(cb*Qa))+x(ab*Ra));u[Ta>>2]=Qa;Pa=q[La+12>>2];q[Pa+12>>2]=0;u[Pa+8>>2]=-Ua;u[Pa+4>>2]=Va;q[Pa>>2]=0;Sa=Pa+Xa|0;q[Sa+12>>2]=0;u[Sa+8>>2]=Qa;q[Sa+4>>2]=0;u[Sa>>2]=-Va;Pa=Pa+Za|0;q[Pa+8>>2]=0;q[Pa+12>>2]=0;u[Pa+4>>2]=-Qa;u[Pa>>2]=Ua;Pa=q[La+16>>2];q[Pa>>2]=-1082130432;q[Pa+fb>>2]=-1082130432;q[Pa+gb>>2]=-1082130432;Ua=u[Oa+36>>2];_a=u[Oa+40>>2];Va=u[Oa+20>>2];Qa=u[a+320>>2];$a=u[Oa+24>>2];Ra=u[a+324>>2];ab=u[Oa+8>>2];bb=u[Oa>>2];cb=u[Oa+4>>2];db=u[Oa+32>>2];eb=u[Oa+16>>2];Wa=u[a+316>>2];Pa=q[La+20>>2];q[Pa+12>>2]=0;q[Pa>>2]=0;Va=x(x(x(Wa*eb)+x(Qa*Va))+x(Ra*$a));u[Pa+8>>2]=Va;Ua=x(x(x(Wa*db)+x(Qa*Ua))+x(Ra*_a));u[Pa+4>>2]=-Ua;Sa=Pa+Xa|0;q[Sa+12>>2]=0;Qa=x(x(x(bb*Wa)+x(cb*Qa))+x(ab*Ra));u[Sa+8>>2]=-Qa;q[Sa+4>>2]=0;u[Sa>>2]=Ua;Pa=Pa+Za|0;q[Pa+8>>2]=0;q[Pa+12>>2]=0;u[Pa+4>>2]=Qa;u[Pa>>2]=-Va;Pa=q[La+28>>2];Sa=q[a+332>>2];Ra=x(u[(Sa&1?a+336|0:La+4|0)>>2]*u[La>>2]);u[Pa>>2]=Ra*x(x(x(Qa+u[Oa+48>>2])-u[Ta>>2])-u[Na+48>>2]);u[Pa+Xa>>2]=Ra*x(x(x(Va+u[Oa+52>>2])-u[Ta+4>>2])-u[Na+52>>2]);u[Pa+Za>>2]=Ra*x(x(x(Ua+u[Oa+56>>2])-u[Ta+8>>2])-u[Na+56>>2]);Na=Ya<<1;if(Sa&2){Oa=q[La+32>>2];q[Oa>>2]=q[a+340>>2];q[Oa+Xa>>2]=q[a+340>>2];q[Oa+(Na<<2)>>2]=q[a+340>>2];}Ra=u[a+356>>2];Wa=x(-Ra);Qa=Ra;if(!!(Ra>x(0))){u[q[La+36>>2]>>2]=Wa;u[q[La+40>>2]>>2]=Ra;Qa=u[a+356>>2];}if(!!(Qa>x(0))){Oa=Ya<<2;u[Oa+q[La+36>>2]>>2]=Wa;u[Oa+q[La+40>>2]>>2]=Ra;Qa=u[a+356>>2];}if(!!(Qa>x(0))){Na=Na<<2;u[Na+q[La+36>>2]>>2]=Wa;u[Na+q[La+40>>2]>>2]=Ra;}q[La+48>>2]=q[a+352>>2];}function bm(a,u){a=a|0;u=u|0;am(a,u,q[a+28>>2]+4|0,q[a+32>>2]+4|0);}function cm(a,u){a=a|0;u=u|0;a=r[a+344|0]?0:3;q[u+4>>2]=a;q[u>>2]=a;}function dm(a){a=a|0;var La=0,Na=0,Oa=0,hb=x(0),ib=x(0),jb=x(0),kb=0,lb=x(0),mb=x(0),nb=x(0),ob=0,pb=x(0),qb=x(0),rb=x(0),sb=x(0),tb=x(0),ub=x(0),vb=x(0),wb=x(0),xb=x(0),yb=0;La=P-144|0;P=La;q[a+36>>2]=0;q[La+136>>2]=0;q[La+140>>2]=0;q[La+128>>2]=0;q[La+132>>2]=0;while(1){yb=(La+128|0)+(ob<<2)|0;q[yb>>2]=1065353216;Oa=q[a+28>>2];q[La+80>>2]=q[Oa+4>>2];q[La+84>>2]=q[Oa+20>>2];Na=q[Oa+36>>2];q[La+92>>2]=0;q[La+88>>2]=Na;q[La+96>>2]=q[Oa+8>>2];q[La+100>>2]=q[Oa+24>>2];Na=q[Oa+40>>2];q[La+108>>2]=0;q[La+104>>2]=Na;q[La+112>>2]=q[Oa+12>>2];q[La+116>>2]=q[Oa+28>>2];Na=q[Oa+44>>2];q[La+124>>2]=0;q[La+120>>2]=Na;Na=q[a+32>>2];q[La+32>>2]=q[Na+4>>2];q[La+36>>2]=q[Na+20>>2];kb=q[Na+36>>2];q[La+44>>2]=0;q[La+40>>2]=kb;q[La+48>>2]=q[Na+8>>2];q[La+52>>2]=q[Na+24>>2];kb=q[Na+40>>2];q[La+60>>2]=0;q[La+56>>2]=kb;q[La+64>>2]=q[Na+12>>2];q[La+68>>2]=q[Na+28>>2];kb=q[Na+44>>2];q[La+76>>2]=0;q[La+72>>2]=kb;lb=u[Oa+52>>2];pb=u[Oa+12>>2];qb=u[Oa+4>>2];rb=u[Oa+8>>2];mb=u[Oa+56>>2];sb=u[Oa+28>>2];tb=u[Oa+20>>2];ub=u[Oa+24>>2];nb=u[Oa+60>>2];vb=u[Oa+44>>2];wb=u[Oa+36>>2];xb=u[Oa+40>>2];hb=u[a+308>>2];ib=u[a+300>>2];jb=u[a+304>>2];q[La+28>>2]=0;u[La+24>>2]=x(nb+x(x(x(ib*wb)+x(jb*xb))+x(hb*vb)))-nb;u[La+20>>2]=x(mb+x(x(x(ib*tb)+x(jb*ub))+x(hb*sb)))-mb;u[La+16>>2]=x(lb+x(x(x(ib*qb)+x(jb*rb))+x(hb*pb)))-lb;lb=u[Na+52>>2];pb=u[Na+12>>2];qb=u[Na+4>>2];rb=u[Na+8>>2];mb=u[Na+56>>2];sb=u[Na+28>>2];tb=u[Na+20>>2];ub=u[Na+24>>2];nb=u[Na+60>>2];vb=u[Na+44>>2];wb=u[Na+36>>2];xb=u[Na+40>>2];hb=u[a+324>>2];ib=u[a+316>>2];jb=u[a+320>>2];q[La+12>>2]=0;u[La+8>>2]=x(nb+x(x(x(ib*wb)+x(jb*xb))+x(hb*vb)))-nb;u[La+4>>2]=x(mb+x(x(x(ib*tb)+x(jb*ub))+x(hb*sb)))-mb;u[La>>2]=x(lb+x(x(x(ib*qb)+x(jb*rb))+x(hb*pb)))-lb;rc((w(ob,84)+a|0)+48|0,La+80|0,La+32|0,La+16|0,La,La+128|0,Oa+456|0,u[Oa+404>>2],Na+456|0,u[Na+404>>2]);q[yb>>2]=0;ob=ob+1|0;if((ob|0)!=3){continue}break}P=La+144|0;}function em(a,zb,Ab){var Bb=0,Cb=x(0),Db=x(0),Eb=x(0),Fb=x(0),Gb=x(0),Hb=x(0),Ib=x(0),Jb=x(0),Kb=x(0),Lb=x(0),Mb=x(0),Nb=x(0),Ob=x(0),Pb=x(0),Qb=x(0);Ad(a,3,zb);q[a>>2]=3400;Bb=q[Ab+4>>2];q[a+300>>2]=q[Ab>>2];q[a+304>>2]=Bb;Bb=q[Ab+12>>2];q[a+308>>2]=q[Ab+8>>2];q[a+312>>2]=Bb;Fb=u[zb+52>>2];Gb=u[zb+4>>2];Hb=u[zb+8>>2];Ib=u[zb+12>>2];Jb=u[zb+56>>2];Kb=u[zb+20>>2];Lb=u[zb+24>>2];Mb=u[zb+28>>2];Nb=u[zb+60>>2];Ob=u[zb+36>>2];Pb=u[zb+40>>2];Cb=u[Ab+8>>2];Qb=u[zb+44>>2];Db=u[Ab>>2];Eb=u[Ab+4>>2];q[a+356>>2]=0;q[a+348>>2]=1050253722;q[a+352>>2]=1065353216;o[a+344|0]=0;q[a+328>>2]=0;q[a+332>>2]=0;u[a+324>>2]=Nb+x(x(x(Db*Ob)+x(Eb*Pb))+x(Cb*Qb));u[a+320>>2]=Jb+x(x(x(Db*Kb)+x(Eb*Lb))+x(Cb*Mb));u[a+316>>2]=Fb+x(x(x(Db*Gb)+x(Eb*Hb))+x(Cb*Ib));}function fm(a,u,x,zb,Ab){Oa(a,3,u,x);q[a>>2]=3400;u=q[zb+4>>2];q[a+300>>2]=q[zb>>2];q[a+304>>2]=u;u=q[zb+12>>2];q[a+308>>2]=q[zb+8>>2];q[a+312>>2]=u;u=q[Ab+4>>2];q[a+316>>2]=q[Ab>>2];q[a+320>>2]=u;u=q[Ab+12>>2];q[a+324>>2]=q[Ab+8>>2];q[a+328>>2]=u;q[a+356>>2]=0;q[a+348>>2]=1050253722;q[a+352>>2]=1065353216;o[a+344|0]=0;q[a+332>>2]=0;}function gm(a,q,zb){a=a|0;q=q|0;zb=zb|0;var Ab=x(0);if(zb>>>0<=2){q=q+ -1|0;if(q>>>0>3){return x(x(0))}a:{switch(q-1|0){case 0:return x(u[((zb<<2)+a|0)+728>>2]);case 2:return x(u[((zb<<2)+a|0)+744>>2]);default:return x(u[((zb<<2)+a|0)+760>>2]);case 1:break a}}return x(u[((zb<<2)+a|0)+776>>2])}zb=zb+ -3|0;b:{if(zb>>>0>2){break b}q=q+ -1|0;if(q>>>0>3){break b}c:{switch(q-1|0){case 0:return x(u[(w(zb,88)+a|0)+980>>2]);case 2:return x(u[(w(zb,88)+a|0)+984>>2]);default:return x(u[(w(zb,88)+a|0)+988>>2]);case 1:break c}}Ab=u[(w(zb,88)+a|0)+992>>2];}return x(Ab)}function hm(a,zb,Rb,Sb){a=a|0;zb=zb|0;Rb=x(Rb);Sb=Sb|0;var Tb=0;a:{if(Sb>>>0<=2){zb=zb+ -1|0;if(zb>>>0>3){break a}b:{switch(zb-1|0){case 0:zb=Sb<<2;u[(zb+a|0)+728>>2]=Rb;q[a+1456>>2]=q[a+1456>>2]|2<<zb;return;case 2:zb=Sb<<2;u[(zb+a|0)+744>>2]=Rb;q[a+1456>>2]=q[a+1456>>2]|1<<zb;return;default:zb=Sb<<2;u[(zb+a|0)+760>>2]=Rb;q[a+1456>>2]=q[a+1456>>2]|8<<zb;return;case 1:break b}}zb=Sb<<2;u[(zb+a|0)+776>>2]=Rb;q[a+1456>>2]=q[a+1456>>2]|4<<zb;return}Tb=Sb+ -3|0;if(Tb>>>0>2){break a}zb=zb+ -1|0;if(zb>>>0>3){break a}c:{switch(zb-1|0){case 0:u[(w(Tb,88)+a|0)+980>>2]=Rb;q[a+1456>>2]=q[a+1456>>2]|2<<(Sb<<2);return;case 2:u[(w(Tb,88)+a|0)+984>>2]=Rb;q[a+1456>>2]=q[a+1456>>2]|1<<(Sb<<2);return;default:u[(w(Tb,88)+a|0)+988>>2]=Rb;q[a+1456>>2]=q[a+1456>>2]|8<<(Sb<<2);return;case 1:break c}}u[(w(Tb,88)+a|0)+992>>2]=Rb;q[a+1456>>2]=q[a+1456>>2]|4<<(Sb<<2);}}function im(a,x,zb,Rb,Sb,Ub,Vb,Wb,Xb){var Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0;Yb=P-112|0;P=Yb;q[Yb+100>>2]=0;q[Yb+104>>2]=0;q[Yb+108>>2]=0;q[Yb+92>>2]=0;q[Yb+96>>2]=0;o[Yb+88|0]=0;q[Yb+84>>2]=0;o[Yb+80|0]=0;q[Yb+76>>2]=0;o[Yb+72|0]=0;q[Yb+68>>2]=0;o[Yb+64|0]=0;q[Yb+56>>2]=0;q[Yb+60>>2]=1036831949;o[Yb+52|0]=0;q[Yb+48>>2]=0;q[Yb+40>>2]=0;q[Yb+44>>2]=1063675494;q[Yb+32>>2]=0;q[Yb+36>>2]=1045220557;q[Yb+24>>2]=1065353216;q[Yb+28>>2]=-1082130432;ec=x+4|0;fc=a+680|0;while(1){$b=bc+fc|0;ac=r[$b+112|0];dc=bc<<2;Zb=dc+fc|0;gc=q[Zb+276>>2];a:{b:{if(gc){break b}_b=ac;ac=1;if(_b){break b}ac=0;if(!r[(a+bc|0)+798|0]){break a}}_b=q[Zb+32>>2];q[Yb+108>>2]=gc;q[Yb+32>>2]=_b;q[Yb+104>>2]=q[Zb+260>>2];q[Yb+96>>2]=q[Zb+228>>2];_b=q[Zb+244>>2];o[Yb+52|0]=ac;q[Yb+100>>2]=_b;o[Yb+64|0]=r[$b+115|0];q[Yb+68>>2]=q[Zb+124>>2];o[Yb+72|0]=r[$b+118|0];q[Yb+76>>2]=q[Zb+140>>2];o[Yb+80|0]=r[$b+156|0];q[Yb+84>>2]=q[Zb+160>>2];o[Yb+88|0]=r[$b+176|0];q[Yb+92>>2]=q[Zb+180>>2];q[Yb+28>>2]=q[Zb+16>>2];q[Yb+24>>2]=q[Zb>>2];q[Yb+60>>2]=q[Zb+212>>2];q[Yb+56>>2]=q[Zb+196>>2];_b=a+dc|0;q[Yb+8>>2]=q[_b+1236>>2];q[Yb+12>>2]=q[_b+1252>>2];ac=q[_b+1268>>2];q[Yb+20>>2]=0;q[Yb+16>>2]=ac;ac=Yb;Zb=q[a+1456>>2]>>dc;$b=_b+744|0;c:{if(Zb&1){break c}$b=q[x+32>>2];}q[ac+40>>2]=q[$b>>2];q[Yb+36>>2]=q[(Zb&2?_b+728|0:ec)>>2];q[Yb+48>>2]=q[(Zb&4?_b+776|0:q[x+32>>2])>>2];q[Yb+44>>2]=q[(Zb&8?_b+760|0:ec)>>2];ac=1;$b=((bc+2&255)>>>0)%3|0;_b=w(((bc+1&255)>>>0)%3|0,88)+a|0;Zb=q[_b+1052>>2]+ -1|0;d:{if(Zb>>>0<=3){e:{switch(Zb-2|0){case 0:cc=+u[_b+1040>>2];ac=cc<-.001|cc>.001;break d;case 1:break e;default:break d}}if(+u[_b+1040>>2]<-.001){break d}ac=+u[_b+1044>>2]>.001;break d}ac=0;}Zb=1;_b=w($b,88)+a|0;$b=q[_b+1052>>2]+ -1|0;f:{if($b>>>0>3){break f}g:{h:{switch($b-2|0){case 0:cc=+u[_b+1040>>2];if(cc<-.001|cc>.001){break g}break f;case 1:break h;default:break g}}if(+u[_b+1040>>2]<-.001){break g}if(!(+u[_b+1044>>2]>.001)){break f}}Zb=0;}zb=Af(a,Yb+24|0,Rb,Sb,Ub,Vb,Wb,Xb,x,zb,Yb+8|0,0,ac?Zb:1)+zb|0;}bc=bc+1|0;if((bc|0)!=3){continue}break}P=Yb+112|0;}function jm(a,u,x,zb,Rb,Sb,Ub,Vb){var Wb=0,Xb=0,hc=0,ic=0,jc=0,kc=0,lc=0,mc=0;Wb=P-32|0;P=Wb;q[Wb+24>>2]=q[835];Xb=q[834];q[Wb+16>>2]=q[833];q[Wb+20>>2]=Xb;Xb=q[a+1232>>2];if(Xb>>>0<=5){a:{b:{c:{switch(Xb-1|0){default:q[Wb+16>>2]=0;ic=2;hc=0;break b;case 0:q[Wb+16>>2]=0;ic=1;Xb=2;break a;case 1:hc=1;q[Wb+16>>2]=1;ic=2;Xb=0;break a;case 2:hc=1;q[Wb+16>>2]=1;Xb=2;break a;case 3:hc=2;q[Wb+16>>2]=2;ic=1;Xb=0;break a;case 4:break c}}q[Wb+16>>2]=2;hc=2;}Xb=1;}q[Wb+24>>2]=ic;q[Wb+20>>2]=Xb;}ic=0;while(1){Xb=w(hc,88)+a|0;if(!(r[Xb+1016|0]?0:!(q[Xb+1052>>2]|r[Xb+996|0]))){jc=(hc<<4)+a|0;kc=jc+1388|0;mc=q[kc+4>>2];q[Wb+8>>2]=q[kc>>2];q[Wb+12>>2]=mc;jc=jc+1380|0;kc=q[jc+4>>2];q[Wb>>2]=q[jc>>2];q[Wb+4>>2]=kc;hc=q[a+1456>>2]>>(hc<<2)+12;if(!(hc&1)){q[Xb+984>>2]=q[q[u+32>>2]>>2];}if(!(hc&2)){q[Xb+980>>2]=q[u+4>>2];}if(!(hc&4)){q[Xb+992>>2]=q[q[u+32>>2]>>2];}if(!(hc&8)){q[Xb+988>>2]=q[u+4>>2];}lc=Af(a,Xb+968|0,x,zb,Rb,Sb,Ub,Vb,u,lc,Wb,1,0)+lc|0;}ic=ic+1|0;if((ic|0)!=3){hc=q[(Wb+16|0)+(ic<<2)>>2];continue}break}P=Wb+32|0;return lc}function km(a,u){a=a|0;u=u|0;var x=0,zb=0,Rb=0,Sb=0,Ub=0,Vb=0;x=a;zb=u;u=q[a+28>>2];Rb=u+4|0;a=q[a+32>>2];Sb=a+4|0;Ub=u+372|0;Vb=a+372|0;u=u+388|0;a=a+388|0;im(x,zb,jm(x,zb,Rb,Sb,Ub,Vb,u,a),Rb,Sb,Ub,Vb,u,a);}function lm(a,u){a=a|0;u=u|0;var nc=0,oc=0,pc=0;Bf(a,q[a+28>>2]+4|0,q[a+32>>2]+4|0);q[u>>2]=0;q[u+4>>2]=0;a:{b:{c:{nc=q[a+956>>2];if(nc>>>0>4){break c}oc=2;switch(nc-1|0){case 3:break b;case 0:case 1:case 2:break c;default:break a}}oc=1;}q[u>>2]=oc;nc=oc;}if(r[a+792|0]){nc=nc+1|0;q[u>>2]=nc;}if(r[a+798|0]){nc=nc+1|0;q[u>>2]=nc;}pc=u;d:{e:{f:{oc=q[a+960>>2];if(oc>>>0>4){break f}g:{switch(oc-1|0){case 0:case 1:case 2:break f;case 3:break g;default:break d}}nc=nc+2|0;break e}nc=nc+1|0;}q[pc>>2]=nc;}if(r[a+793|0]){nc=nc+1|0;q[u>>2]=nc;}if(r[a+799|0]){nc=nc+1|0;q[u>>2]=nc;}pc=u;h:{i:{j:{oc=q[a+964>>2];if(oc>>>0>4){break j}k:{switch(oc-1|0){case 0:case 1:case 2:break j;case 3:break k;default:break h}}nc=nc+2|0;break i}nc=nc+1|0;}q[pc>>2]=nc;}if(r[a+794|0]){nc=nc+1|0;q[u>>2]=nc;}if(r[a+800|0]){q[u>>2]=nc+1;}Bd(a,0);l:{m:{n:{oc=q[a+1052>>2];if(oc>>>0>4){break n}nc=2;switch(oc-1|0){case 3:break m;case 0:case 1:case 2:break n;default:break l}}nc=1;}q[u>>2]=q[u>>2]+nc;}if(r[a+996|0]){q[u>>2]=q[u>>2]+1;}if(r[a+1016|0]){q[u>>2]=q[u>>2]+1;}Bd(a,1);o:{p:{q:{oc=q[a+1140>>2];if(oc>>>0>4){break q}nc=2;switch(oc-1|0){case 3:break p;case 0:case 1:case 2:break q;default:break o}}nc=1;}q[u>>2]=q[u>>2]+nc;}if(r[a+1084|0]){q[u>>2]=q[u>>2]+1;}if(r[a+1104|0]){q[u>>2]=q[u>>2]+1;}nc=2;Bd(a,2);r:{s:{t:{oc=q[a+1228>>2];if(oc>>>0>4){break t}switch(oc-1|0){case 3:break s;case 0:case 1:case 2:break t;default:break r}}nc=1;}q[u>>2]=q[u>>2]+nc;}if(r[a+1172|0]){q[u>>2]=q[u>>2]+1;}if(r[a+1192|0]){q[u>>2]=q[u>>2]+1;}}function mm(a){var qc=x(0),rc=x(0),sc=x(0),tc=x(0),uc=0,vc=x(0),wc=x(0),xc=x(0),yc=x(0),zc=x(0),Ac=x(0),Bc=x(0),Cc=0,Dc=x(0),Ec=x(0),Fc=x(0),Gc=x(0),Hc=x(0);q[a+1440>>2]=0;wc=u[a+1256>>2];xc=u[a+1276>>2];yc=u[a+1260>>2];zc=u[a+1272>>2];Gc=x(x(wc*xc)-x(yc*zc));rc=u[a+1236>>2];sc=u[a+1240>>2];Ac=u[a+1268>>2];Bc=u[a+1252>>2];Hc=x(x(yc*Ac)-x(xc*Bc));vc=x(x(zc*Bc)-x(wc*Ac));tc=u[a+1244>>2];qc=x(x(1)/x(x(x(Gc*rc)+x(sc*Hc))+x(vc*tc)));Dc=x(u[a+1356>>2]-u[a+1292>>2]);Ec=x(u[a+1348>>2]-u[a+1284>>2]);Fc=x(u[a+1352>>2]-u[a+1288>>2]);vc=x(x(Dc*x(x(x(wc*rc)-x(Bc*sc))*qc))+x(x(Ec*x(vc*qc))+x(Fc*x(x(x(Ac*sc)-x(zc*rc))*qc))));u[a+1436>>2]=vc;rc=x(x(Dc*x(x(x(Bc*tc)-x(yc*rc))*qc))+x(x(Ec*x(Hc*qc))+x(Fc*x(x(x(xc*rc)-x(Ac*tc))*qc))));u[a+1432>>2]=rc;qc=x(x(Dc*x(x(x(yc*sc)-x(wc*tc))*qc))+x(x(Ec*x(Gc*qc))+x(Fc*x(x(x(zc*tc)-x(xc*sc))*qc))));u[a+1428>>2]=qc;u[a+940>>2]=qc;sc=u[a+680>>2];tc=u[a+696>>2];a:{if(!!(sc>tc)){q[a+908>>2]=0;break a}u[a+908>>2]=qc-sc;uc=3;if(sc==tc){break a}u[a+924>>2]=qc-tc;uc=4;}u[a+944>>2]=rc;q[a+956>>2]=uc;qc=u[a+684>>2];sc=u[a+700>>2];b:{if(!(qc>sc)){u[a+912>>2]=rc-qc;uc=3;if(qc==sc){break b}u[a+928>>2]=rc-sc;uc=4;break b}q[a+912>>2]=0;uc=0;}u[a+948>>2]=vc;q[a+960>>2]=uc;uc=a;qc=u[a+688>>2];rc=u[a+704>>2];c:{if(!(qc>rc)){u[a+916>>2]=vc-qc;Cc=3;if(qc==rc){break c}u[a+932>>2]=vc-rc;Cc=4;break c}q[a+916>>2]=0;Cc=0;}q[uc+964>>2]=Cc;}function nm(a){var Ic=x(0),Jc=x(0),Kc=x(0),Lc=x(0),Mc=x(0),Nc=x(0),Oc=x(0),Pc=x(0),Qc=x(0),Rc=x(0),Sc=x(0),Tc=0,Uc=x(0),Vc=x(0),Wc=0,Xc=x(0),Yc=x(0),Zc=x(0),_c=x(0),$c=x(0),ad=x(0),bd=x(0),cd=x(0),dd=x(0),ed=x(0),fd=x(0),gd=0;Tc=P-48|0;P=Tc;Sc=u[a+1332>>2];Xc=u[a+1300>>2];Yc=u[a+1316>>2];Zc=u[a+1336>>2];_c=u[a+1304>>2];$c=u[a+1320>>2];ad=u[a+1340>>2];bd=u[a+1308>>2];cd=u[a+1324>>2];Oc=u[a+1244>>2];Pc=u[a+1256>>2];Kc=u[a+1272>>2];Mc=u[a+1240>>2];Lc=u[a+1268>>2];Rc=u[a+1260>>2];Nc=u[a+1252>>2];Qc=u[a+1276>>2];Ic=u[a+1236>>2];q[Tc+44>>2]=0;q[Tc+28>>2]=0;fd=x(x(Pc*Qc)-x(Rc*Kc));Uc=x(x(Rc*Lc)-x(Qc*Nc));Vc=x(x(Kc*Nc)-x(Pc*Lc));Jc=x(x(1)/x(x(x(Ic*fd)+x(Mc*Uc))+x(Vc*Oc)));Vc=x(Vc*Jc);dd=x(x(x(Lc*Mc)-x(Kc*Ic))*Jc);ed=x(x(x(Pc*Ic)-x(Nc*Mc))*Jc);u[Tc+40>>2]=x(x(bd*Vc)+x(cd*dd))+x(ad*ed);u[Tc+36>>2]=x(x(_c*Vc)+x(dd*$c))+x(ed*Zc);Uc=x(Uc*Jc);Lc=x(x(x(Qc*Ic)-x(Lc*Oc))*Jc);Ic=x(x(x(Nc*Oc)-x(Rc*Ic))*Jc);u[Tc+24>>2]=x(x(bd*Uc)+x(cd*Lc))+x(ad*Ic);u[Tc+20>>2]=x(x(_c*Uc)+x(Lc*$c))+x(Ic*Zc);q[Tc+12>>2]=0;u[Tc+32>>2]=x(Sc*ed)+x(x(Xc*Vc)+x(Yc*dd));u[Tc+16>>2]=x(Sc*Ic)+x(x(Xc*Uc)+x(Yc*Lc));Ic=x(fd*Jc);Kc=x(x(x(Kc*Oc)-x(Qc*Mc))*Jc);Jc=x(x(x(Rc*Mc)-x(Pc*Oc))*Jc);u[Tc+8>>2]=x(x(bd*Ic)+x(cd*Kc))+x(ad*Jc);u[Tc+4>>2]=x(x(Ic*_c)+x(Kc*$c))+x(Jc*Zc);u[Tc>>2]=x(Sc*Jc)+x(x(Xc*Ic)+x(Yc*Kc));gd=a;a:{b:{c:{d:{e:{f:{g:{h:{Wc=q[a+1232>>2];if(Wc>>>0<=5){i:{j:{switch(Wc-1|0){default:Ff(Tc,a+1364|0);break i;case 0:sm(Tc,a+1364|0);break i;case 1:rm(Tc,a+1364|0);break i;case 2:qm(Tc,a+1364|0);break i;case 3:pm(Tc,a+1364|0);break i;case 4:break j}}om(Tc,a+1364|0);}Wc=q[a+1232>>2];}if(Wc>>>0<=5){switch(Wc-1|0){case 4:break c;case 3:break d;case 2:break e;case 1:break f;case 0:break g;default:break h}}Oc=u[a+1420>>2];Mc=u[a+1416>>2];Ic=u[a+1412>>2];Pc=u[a+1404>>2];Kc=u[a+1400>>2];Lc=u[a+1396>>2];Rc=u[a+1388>>2];Nc=u[a+1384>>2];Jc=u[a+1380>>2];break a}q[a+1408>>2]=0;q[a+1424>>2]=0;q[a+1392>>2]=0;Jc=u[a+1332>>2];Qc=u[a+1260>>2];Ic=u[a+1316>>2];Sc=u[a+1276>>2];Lc=x(x(Jc*Qc)-x(Ic*Sc));u[a+1396>>2]=Lc;Nc=u[a+1244>>2];Mc=u[a+1300>>2];Pc=x(x(Ic*Nc)-x(Qc*Mc));u[a+1404>>2]=Pc;Kc=x(x(Mc*Sc)-x(Jc*Nc));u[a+1400>>2]=Kc;Oc=x(x(Mc*Kc)-x(Ic*Lc));u[a+1420>>2]=Oc;Mc=x(x(Jc*Lc)-x(Mc*Pc));u[a+1416>>2]=Mc;Ic=x(x(Ic*Pc)-x(Jc*Kc));u[a+1412>>2]=Ic;Rc=x(x(Qc*Lc)-x(Nc*Kc));u[a+1388>>2]=Rc;Nc=x(x(Nc*Pc)-x(Sc*Lc));u[a+1384>>2]=Nc;Jc=x(x(Sc*Kc)-x(Qc*Pc));break b}q[a+1424>>2]=0;q[a+1408>>2]=0;q[a+1392>>2]=0;Jc=u[a+1316>>2];Qc=u[a+1272>>2];Lc=u[a+1332>>2];Sc=u[a+1256>>2];Ic=x(x(Jc*Qc)-x(Lc*Sc));u[a+1412>>2]=Ic;Kc=u[a+1300>>2];Nc=u[a+1240>>2];Oc=x(x(Sc*Kc)-x(Jc*Nc));u[a+1420>>2]=Oc;Mc=x(x(Lc*Nc)-x(Kc*Qc));u[a+1416>>2]=Mc;Pc=x(x(Jc*Ic)-x(Kc*Mc));u[a+1404>>2]=Pc;Kc=x(x(Kc*Oc)-x(Lc*Ic));u[a+1400>>2]=Kc;Lc=x(x(Lc*Mc)-x(Jc*Oc));u[a+1396>>2]=Lc;Rc=x(x(Nc*Mc)-x(Sc*Ic));u[a+1388>>2]=Rc;Nc=x(x(Qc*Ic)-x(Nc*Oc));u[a+1384>>2]=Nc;Jc=x(x(Sc*Oc)-x(Qc*Mc));break b}q[a+1424>>2]=0;q[a+1408>>2]=0;q[a+1392>>2]=0;Mc=u[a+1304>>2];Lc=u[a+1260>>2];Ic=u[a+1320>>2];Kc=u[a+1244>>2];Rc=x(x(Mc*Lc)-x(Ic*Kc));u[a+1388>>2]=Rc;Pc=u[a+1336>>2];Qc=u[a+1276>>2];Nc=x(x(Kc*Pc)-x(Mc*Qc));u[a+1384>>2]=Nc;Jc=x(x(Ic*Qc)-x(Pc*Lc));u[a+1380>>2]=Jc;Oc=x(x(Ic*Jc)-x(Mc*Nc));u[a+1420>>2]=Oc;Mc=x(x(Mc*Rc)-x(Pc*Jc));u[a+1416>>2]=Mc;Ic=x(x(Pc*Nc)-x(Ic*Rc));u[a+1412>>2]=Ic;Pc=x(x(Kc*Nc)-x(Lc*Jc));u[a+1404>>2]=Pc;Kc=x(x(Qc*Jc)-x(Kc*Rc));u[a+1400>>2]=Kc;Lc=x(x(Lc*Rc)-x(Qc*Nc));u[a+1396>>2]=Lc;break a}q[a+1424>>2]=0;q[a+1408>>2]=0;q[a+1392>>2]=0;Jc=u[a+1252>>2];Qc=u[a+1336>>2];Lc=u[a+1268>>2];Sc=u[a+1320>>2];Ic=x(x(Jc*Qc)-x(Lc*Sc));u[a+1412>>2]=Ic;Kc=u[a+1236>>2];Nc=u[a+1304>>2];Oc=x(x(Sc*Kc)-x(Jc*Nc));u[a+1420>>2]=Oc;Mc=x(x(Lc*Nc)-x(Kc*Qc));u[a+1416>>2]=Mc;Pc=x(x(Jc*Ic)-x(Kc*Mc));u[a+1404>>2]=Pc;Kc=x(x(Kc*Oc)-x(Lc*Ic));u[a+1400>>2]=Kc;Lc=x(x(Lc*Mc)-x(Jc*Oc));u[a+1396>>2]=Lc;Rc=x(x(Nc*Mc)-x(Sc*Ic));u[a+1388>>2]=Rc;Nc=x(x(Qc*Ic)-x(Nc*Oc));u[a+1384>>2]=Nc;Jc=x(x(Sc*Oc)-x(Qc*Mc));break b}q[a+1424>>2]=0;q[a+1408>>2]=0;q[a+1392>>2]=0;Mc=u[a+1240>>2];Lc=u[a+1324>>2];Ic=u[a+1256>>2];Kc=u[a+1308>>2];Rc=x(x(Mc*Lc)-x(Ic*Kc));u[a+1388>>2]=Rc;Pc=u[a+1272>>2];Qc=u[a+1340>>2];Nc=x(x(Kc*Pc)-x(Mc*Qc));u[a+1384>>2]=Nc;Jc=x(x(Ic*Qc)-x(Pc*Lc));u[a+1380>>2]=Jc;Oc=x(x(Ic*Jc)-x(Mc*Nc));u[a+1420>>2]=Oc;Mc=x(x(Mc*Rc)-x(Pc*Jc));u[a+1416>>2]=Mc;Ic=x(x(Pc*Nc)-x(Ic*Rc));u[a+1412>>2]=Ic;Pc=x(x(Kc*Nc)-x(Lc*Jc));u[a+1404>>2]=Pc;Kc=x(x(Qc*Jc)-x(Kc*Rc));u[a+1400>>2]=Kc;Lc=x(x(Lc*Rc)-x(Qc*Nc));u[a+1396>>2]=Lc;break a}q[a+1408>>2]=0;q[a+1424>>2]=0;q[a+1392>>2]=0;Jc=u[a+1268>>2];Qc=u[a+1324>>2];Ic=u[a+1252>>2];Sc=u[a+1340>>2];Lc=x(x(Jc*Qc)-x(Ic*Sc));u[a+1396>>2]=Lc;Nc=u[a+1308>>2];Mc=u[a+1236>>2];Pc=x(x(Ic*Nc)-x(Qc*Mc));u[a+1404>>2]=Pc;Kc=x(x(Mc*Sc)-x(Jc*Nc));u[a+1400>>2]=Kc;Oc=x(x(Mc*Kc)-x(Ic*Lc));u[a+1420>>2]=Oc;Mc=x(x(Jc*Lc)-x(Mc*Pc));u[a+1416>>2]=Mc;Ic=x(x(Ic*Pc)-x(Jc*Kc));u[a+1412>>2]=Ic;Rc=x(x(Qc*Lc)-x(Nc*Kc));u[a+1388>>2]=Rc;Nc=x(x(Nc*Pc)-x(Sc*Lc));u[a+1384>>2]=Nc;Jc=x(x(Sc*Kc)-x(Qc*Pc));}u[gd+1380>>2]=Jc;}Qc=Oc;Oc=x(x(1)/x(E(x(x(x(Ic*Ic)+x(Mc*Mc))+x(Oc*Oc)))));u[a+1420>>2]=Qc*Oc;u[a+1416>>2]=Mc*Oc;u[a+1412>>2]=Ic*Oc;Oc=x(x(1)/x(E(x(x(x(Lc*Lc)+x(Kc*Kc))+x(Pc*Pc)))));u[a+1404>>2]=Pc*Oc;u[a+1400>>2]=Kc*Oc;u[a+1396>>2]=Lc*Oc;Oc=x(x(1)/x(E(x(x(x(Jc*Jc)+x(Nc*Nc))+x(Rc*Rc)))));u[a+1388>>2]=Rc*Oc;u[a+1384>>2]=Nc*Oc;u[a+1380>>2]=Jc*Oc;P=Tc+48|0;}function om(a,hd){var id=x(0),jd=0;jd=hd;id=u[a+8>>2];a:{if(!!(id<x(1))){if(!!(id>x(-1))){u[hd>>2]=$(u[a+24>>2],u[a+40>>2]);u[hd+4>>2]=Bb(x(A(x(B(x(-u[a+8>>2]),x(-1))),x(1))));u[hd+8>>2]=$(u[a+4>>2],u[a>>2]);return}q[hd>>2]=0;q[hd+4>>2]=1070141403;id=x(-$(u[a+16>>2],u[a+32>>2]));break a}q[hd>>2]=0;q[hd+4>>2]=-1077342245;id=$(x(-u[a+16>>2]),x(-u[a+32>>2]));}u[jd+8>>2]=id;}function pm(a,hd){var kd=x(0),ld=0;ld=hd;kd=u[a+24>>2];a:{if(!!(kd<x(1))){if(!!(kd>x(-1))){u[hd>>2]=Bb(x(A(x(B(kd,x(-1))),x(1))));u[hd+4>>2]=$(x(-u[a+8>>2]),u[a+40>>2]);u[hd+8>>2]=$(x(-u[a+16>>2]),u[a+20>>2]);return}q[hd>>2]=-1077342245;q[hd+4>>2]=0;kd=x(-$(u[a+32>>2],u[a>>2]));break a}q[hd>>2]=1070141403;q[hd+4>>2]=0;kd=$(u[a+32>>2],u[a>>2]);}u[ld+8>>2]=kd;}function qm(a,hd){var md=x(0);md=u[a+4>>2];if(!!(md<x(1))){if(!!(md>x(-1))){u[hd>>2]=$(x(-u[a+36>>2]),u[a+20>>2]);u[hd+4>>2]=$(x(-u[a+8>>2]),u[a>>2]);u[hd+8>>2]=Bb(x(A(x(B(u[a+4>>2],x(-1))),x(1))));return}q[hd>>2]=0;u[hd+4>>2]=-$(u[a+24>>2],u[a+40>>2]);u[hd+8>>2]=-1.5707963705062866;return}q[hd>>2]=0;u[hd+4>>2]=$(u[a+24>>2],u[a+40>>2]);u[hd+8>>2]=1.5707963705062866;}function rm(a,hd){var nd=x(0);nd=u[a+36>>2];a:{if(!!(nd<x(1))){if(!!(nd>x(-1))){u[hd>>2]=Bb(x(A(x(B(x(-nd),x(-1))),x(1))));u[hd+4>>2]=$(u[a+32>>2],u[a+40>>2]);u[hd+8>>2]=$(u[a+4>>2],u[a+20>>2]);return}q[hd>>2]=1070141403;u[hd+4>>2]=-$(x(-u[a+16>>2]),u[a>>2]);break a}q[hd>>2]=-1077342245;u[hd+4>>2]=$(x(-u[a+16>>2]),u[a>>2]);}u[hd+8>>2]=0;}function sm(a,hd){var od=x(0),pd=x(0);od=u[a+16>>2];if(!!(od<x(1))){if(!!(od>x(-1))){u[hd>>2]=$(u[a+24>>2],u[a+20>>2]);u[hd+4>>2]=$(u[a+32>>2],u[a>>2]);u[hd+8>>2]=Bb(x(A(x(B(x(-u[a+16>>2]),x(-1))),x(1))));return}od=u[a+40>>2];pd=u[a+8>>2];q[hd+4>>2]=0;u[hd>>2]=-$(x(-pd),od);u[hd+8>>2]=1.5707963705062866;return}od=u[a+40>>2];pd=u[a+8>>2];q[hd+4>>2]=0;u[hd>>2]=$(x(-pd),od);u[hd+8>>2]=-1.5707963705062866;}function tm(a,u,hd,qd,rd){Oa(a,12,u,hd);q[a>>2]=3288;u=q[qd+12>>2];q[a+56>>2]=q[qd+8>>2];q[a+60>>2]=u;u=q[qd+4>>2];q[a+48>>2]=q[qd>>2];q[a+52>>2]=u;u=q[qd+28>>2];q[a+72>>2]=q[qd+24>>2];q[a+76>>2]=u;hd=q[qd+20>>2];u=a- -64|0;q[u>>2]=q[qd+16>>2];q[u+4>>2]=hd;u=q[qd+44>>2];q[a+88>>2]=q[qd+40>>2];q[a+92>>2]=u;u=q[qd+36>>2];q[a+80>>2]=q[qd+32>>2];q[a+84>>2]=u;u=q[qd+60>>2];q[a+104>>2]=q[qd+56>>2];q[a+108>>2]=u;u=q[qd+52>>2];q[a+96>>2]=q[qd+48>>2];q[a+100>>2]=u;u=q[rd+12>>2];q[a+120>>2]=q[rd+8>>2];q[a+124>>2]=u;u=q[rd+4>>2];q[a+112>>2]=q[rd>>2];q[a+116>>2]=u;u=q[rd+20>>2];q[a+128>>2]=q[rd+16>>2];q[a+132>>2]=u;u=q[rd+28>>2];q[a+136>>2]=q[rd+24>>2];q[a+140>>2]=u;u=q[rd+36>>2];q[a+144>>2]=q[rd+32>>2];q[a+148>>2]=u;u=q[rd+44>>2];q[a+152>>2]=q[rd+40>>2];q[a+156>>2]=u;u=q[rd+52>>2];q[a+160>>2]=q[rd+48>>2];q[a+164>>2]=u;u=q[rd+60>>2];q[a+168>>2]=q[rd+56>>2];q[a+172>>2]=u;q[a+680>>2]=0;q[a+684>>2]=0;q[a+688>>2]=0;q[a+692>>2]=0;q[a+696>>2]=0;q[a+700>>2]=0;q[a+704>>2]=0;q[a+708>>2]=0;q[a+712>>2]=0;q[a+716>>2]=0;q[a+720>>2]=0;q[a+724>>2]=0;q[a+736>>2]=1045220557;q[a+728>>2]=1045220557;q[a+732>>2]=1045220557;q[a+756>>2]=0;q[a+748>>2]=0;q[a+752>>2]=0;q[a+740>>2]=0;q[a+744>>2]=0;q[a+768>>2]=1063675494;q[a+760>>2]=1063675494;q[a+764>>2]=1063675494;q[a+812>>2]=0;q[a+804>>2]=0;q[a+808>>2]=0;q[a+828>>2]=0;q[a+820>>2]=0;q[a+824>>2]=0;o[a+838|0]=0;o[a+836|0]=0;o[a+837|0]=0;q[a+848>>2]=0;q[a+840>>2]=0;q[a+844>>2]=0;o[a+858|0]=0;o[a+856|0]=0;o[a+857|0]=0;q[a+868>>2]=0;q[a+860>>2]=0;q[a+864>>2]=0;q[a+884>>2]=0;q[a+876>>2]=0;q[a+880>>2]=0;q[a+900>>2]=0;q[a+892>>2]=0;q[a+896>>2]=0;o[a+793|0]=0;o[a+794|0]=0;o[a+795|0]=0;o[a+796|0]=0;o[a+797|0]=0;o[a+798|0]=0;o[a+799|0]=0;o[a+800|0]=0;q[a+788>>2]=0;q[a+792>>2]=0;q[a+780>>2]=0;q[a+784>>2]=0;q[a+772>>2]=0;q[a+776>>2]=0;q[a+964>>2]=0;q[a+956>>2]=0;q[a+960>>2]=0;q[a+948>>2]=0;q[a+952>>2]=0;q[a+940>>2]=0;q[a+944>>2]=0;q[a+932>>2]=0;q[a+936>>2]=0;q[a+924>>2]=0;q[a+928>>2]=0;q[a+916>>2]=0;q[a+920>>2]=0;q[a+908>>2]=0;q[a+912>>2]=0;o[a+1032|0]=0;q[a+1028>>2]=0;o[a+1024|0]=0;q[a+1020>>2]=0;o[a+1016|0]=0;q[a+1012>>2]=0;o[a+1008|0]=0;q[a+1e3>>2]=0;q[a+1004>>2]=1036831949;o[a+996|0]=0;q[a+992>>2]=0;q[a+984>>2]=0;q[a+988>>2]=1063675494;q[a+976>>2]=0;q[a+980>>2]=1045220557;q[a+968>>2]=1065353216;q[a+972>>2]=-1082130432;q[a+1052>>2]=0;u=a+1044|0;q[u>>2]=0;q[u+4>>2]=0;u=a+1036|0;q[u>>2]=0;q[u+4>>2]=0;o[a+1120|0]=0;q[a+1116>>2]=0;o[a+1112|0]=0;q[a+1108>>2]=0;o[a+1104|0]=0;q[a+1100>>2]=0;o[a+1096|0]=0;u=a+1088|0;q[u>>2]=0;q[u+4>>2]=1036831949;o[a+1084|0]=0;q[a+1080>>2]=0;u=a+1072|0;q[u>>2]=0;q[u+4>>2]=1063675494;u=a+1064|0;q[u>>2]=0;q[u+4>>2]=1045220557;u=a+1056|0;q[u>>2]=1065353216;q[u+4>>2]=-1082130432;q[a+1140>>2]=0;u=a+1132|0;q[u>>2]=0;q[u+4>>2]=0;u=a+1124|0;q[u>>2]=0;q[u+4>>2]=0;o[a+1208|0]=0;q[a+1204>>2]=0;o[a+1200|0]=0;q[a+1196>>2]=0;o[a+1192|0]=0;q[a+1188>>2]=0;o[a+1184|0]=0;u=a+1176|0;q[u>>2]=0;q[u+4>>2]=1036831949;o[a+1172|0]=0;q[a+1168>>2]=0;u=a+1160|0;q[u>>2]=0;q[u+4>>2]=1063675494;u=a+1152|0;q[u>>2]=0;q[u+4>>2]=1045220557;u=a+1144|0;q[u>>2]=1065353216;q[u+4>>2]=-1082130432;q[a+1228>>2]=0;u=a+1220|0;q[u>>2]=0;q[u+4>>2]=0;u=a+1212|0;q[u>>2]=0;q[u+4>>2]=0;q[a+1456>>2]=0;q[a+1232>>2]=0;Bf(a,q[a+28>>2]+4|0,q[a+32>>2]+4|0);}function um(a,u,hd){a=a|0;u=u|0;hd=hd|0;Va(a,u,hd);q[u+52>>2]=q[a+48>>2];q[u+56>>2]=q[a+52>>2];q[u+60>>2]=q[a+56>>2];q[u+64>>2]=q[a+60>>2];q[u+68>>2]=q[a- -64>>2];q[u+72>>2]=q[a+68>>2];q[u+76>>2]=q[a+72>>2];q[u+80>>2]=q[a+76>>2];q[u+84>>2]=q[a+80>>2];q[u+88>>2]=q[a+84>>2];q[u+92>>2]=q[a+88>>2];q[u+96>>2]=q[a+92>>2];q[u+100>>2]=q[a+96>>2];q[u+104>>2]=q[a+100>>2];q[u+108>>2]=q[a+104>>2];q[u+112>>2]=q[a+108>>2];q[u+116>>2]=q[a+112>>2];q[u+120>>2]=q[a+116>>2];q[u+124>>2]=q[a+120>>2];q[u+128>>2]=q[a+124>>2];q[u+132>>2]=q[a+128>>2];q[u+136>>2]=q[a+132>>2];q[u+140>>2]=q[a+136>>2];q[u+144>>2]=q[a+140>>2];q[u+148>>2]=q[a+144>>2];q[u+152>>2]=q[a+148>>2];q[u+156>>2]=q[a+152>>2];q[u+160>>2]=q[a+156>>2];q[u+164>>2]=q[a+160>>2];q[u+168>>2]=q[a+164>>2];q[u+172>>2]=q[a+168>>2];q[u+176>>2]=q[a+172>>2];q[u+228>>2]=q[a+868>>2];q[u+212>>2]=q[a+872>>2];q[u+196>>2]=q[a+680>>2];q[u+180>>2]=q[a+696>>2];q[u+232>>2]=q[a+932>>2];q[u+216>>2]=q[a+936>>2];q[u+200>>2]=q[a+684>>2];q[u+184>>2]=q[a+700>>2];q[u+236>>2]=q[a+996>>2];q[u+220>>2]=q[a+1e3>>2];q[u+204>>2]=q[a+688>>2];q[u+188>>2]=q[a+704>>2];q[u+244>>2]=r[a+1300|0];q[u+248>>2]=r[a+1301|0];q[u+276>>2]=q[a+1316>>2];q[u+324>>2]=q[a+1364>>2];q[u+252>>2]=r[a+1309|0];q[u+300>>2]=q[a+1340>>2];q[u+280>>2]=q[a+1320>>2];q[u+328>>2]=q[a+1368>>2];q[u+256>>2]=r[a+1310|0];q[u+304>>2]=q[a+1344>>2];q[u+284>>2]=q[a+1324>>2];q[u+332>>2]=q[a+1372>>2];q[u+260>>2]=r[a+1311|0];q[u+308>>2]=q[a+1348>>2];q[u+288>>2]=q[a+1328>>2];q[u+336>>2]=q[a+1376>>2];q[u+264>>2]=r[a+1312|0];q[u+312>>2]=q[a+1352>>2];q[u+292>>2]=q[a+1332>>2];q[u+340>>2]=q[a+1380>>2];q[u+268>>2]=r[a+1313|0];q[u+316>>2]=q[a+1356>>2];q[u+296>>2]=q[a+1336>>2];q[u+344>>2]=q[a+1384>>2];q[u+272>>2]=r[a+1314|0];q[u+320>>2]=q[a+1360>>2];return 3244}function vm(a){return 348}function wm(a,hd,qd){a=a|0;hd=hd|0;qd=qd|0;var rd=x(0),sd=x(0),td=x(0),ud=0,vd=x(0),wd=x(0),xd=x(0),yd=x(0),zd=x(0),Ad=x(0),Bd=x(0),Cd=x(0),Dd=x(0),Ed=x(0),Gd=x(0),Hd=x(0),Id=x(0),Jd=x(0),Kd=x(0),Ld=x(0),Md=x(0),Nd=x(0);ud=q[a+28>>2];Dd=u[ud+36>>2];Ed=u[ud+20>>2];Gd=u[ud+4>>2];Hd=u[ud+40>>2];Id=u[ud+24>>2];Jd=u[ud+8>>2];sd=u[ud+60>>2];vd=u[ud+44>>2];wd=u[ud+28>>2];td=u[ud+56>>2];xd=u[ud+52>>2];yd=u[ud+12>>2];zd=u[qd+8>>2];Ad=u[qd>>2];Bd=u[qd+4>>2];Cd=u[hd+8>>2];rd=u[hd>>2];Kd=u[hd+4>>2];q[a+108>>2]=0;q[a+92>>2]=0;q[a+76>>2]=0;q[a+60>>2]=0;td=x(-td);u[a+104>>2]=x(x(x(yd*x(0))+x(wd*x(0)))+x(vd*x(0)))+x(x(x(wd*td)-x(yd*xd))-x(vd*sd));u[a+100>>2]=x(x(x(Jd*x(0))+x(Id*x(0)))+x(Hd*x(0)))+x(x(x(Id*td)-x(Jd*xd))-x(Hd*sd));u[a+96>>2]=x(x(x(Gd*x(0))+x(Ed*x(0)))+x(Dd*x(0)))+x(x(x(Ed*td)-x(Gd*xd))-x(Dd*sd));td=rd;rd=x(x(1)/x(E(x(x(x(rd*rd)+x(Kd*Kd))+x(Cd*Cd)))));sd=x(td*rd);xd=x(Kd*rd);Cd=x(Cd*rd);u[a+88>>2]=x(x(yd*sd)+x(wd*xd))+x(vd*Cd);rd=x(x(1)/x(E(x(x(x(Ad*Ad)+x(Bd*Bd))+x(zd*zd)))));Ad=x(Ad*rd);Bd=x(Bd*rd);zd=x(zd*rd);u[a+84>>2]=x(x(yd*Ad)+x(wd*Bd))+x(vd*zd);u[a+72>>2]=x(x(sd*Jd)+x(xd*Id))+x(Cd*Hd);u[a+68>>2]=x(x(Ad*Jd)+x(Bd*Id))+x(zd*Hd);u[a+56>>2]=x(x(Gd*sd)+x(xd*Ed))+x(Cd*Dd);u[a+52>>2]=x(Dd*zd)+x(x(Gd*Ad)+x(Ed*Bd));rd=yd;yd=x(x(Cd*Bd)-x(xd*zd));td=wd;wd=x(x(sd*zd)-x(Cd*Ad));Kd=vd;vd=x(x(xd*Ad)-x(sd*Bd));u[a+80>>2]=x(x(rd*yd)+x(td*wd))+x(Kd*vd);u[a- -64>>2]=x(vd*Hd)+x(x(Jd*yd)+x(Id*wd));u[a+48>>2]=x(Dd*vd)+x(x(Gd*yd)+x(Ed*wd));hd=q[a+32>>2];Ld=u[hd+60>>2];Nd=u[hd+56>>2];Md=u[hd+52>>2];Dd=u[hd+36>>2];Ed=u[hd+4>>2];Gd=u[hd+20>>2];Hd=u[hd+40>>2];Id=u[hd+8>>2];Jd=u[hd+24>>2];rd=u[hd+44>>2];Kd=u[hd+12>>2];td=u[hd+28>>2];q[a+172>>2]=0;q[a+156>>2]=0;q[a+140>>2]=0;q[a+124>>2]=0;u[a+152>>2]=x(x(sd*Kd)+x(xd*td))+x(Cd*rd);u[a+148>>2]=x(x(Ad*Kd)+x(Bd*td))+x(zd*rd);u[a+144>>2]=x(x(yd*Kd)+x(wd*td))+x(vd*rd);u[a+136>>2]=x(x(sd*Id)+x(xd*Jd))+x(Cd*Hd);u[a+132>>2]=x(x(Ad*Id)+x(Bd*Jd))+x(zd*Hd);u[a+128>>2]=x(x(yd*Id)+x(wd*Jd))+x(vd*Hd);u[a+120>>2]=x(x(sd*Ed)+x(xd*Gd))+x(Cd*Dd);u[a+116>>2]=x(x(Ad*Ed)+x(Bd*Gd))+x(zd*Dd);u[a+112>>2]=x(x(yd*Ed)+x(wd*Gd))+x(vd*Dd);sd=x(-Nd);u[a+168>>2]=x(x(x(Kd*x(0))+x(td*x(0)))+x(rd*x(0)))+x(x(x(td*sd)-x(Kd*Md))-x(rd*Ld));u[a+164>>2]=x(x(x(Id*x(0))+x(Jd*x(0)))+x(Hd*x(0)))+x(x(x(Jd*sd)-x(Id*Md))-x(Hd*Ld));u[a+160>>2]=x(x(x(Ed*x(0))+x(Gd*x(0)))+x(Dd*x(0)))+x(x(x(Gd*sd)-x(Ed*Md))-x(Dd*Ld));Fd(a);}function xm(a,q){a=a|0;q=q|0;ym(a,q);Df(a,q);}function ym(a,hd){var qd=x(0),Fd=x(0);if(r[a+1309|0]){qd=x(x(u[a+1256>>2]-u[a+1316>>2])*u[a+1340>>2]);u[a+792>>2]=qd*x(x(u[hd>>2]*u[a+1364>>2])/x(q[hd+44>>2]));u[a+808>>2]=x(y(qd))/u[hd>>2];}if(r[a+1310|0]){qd=x(x(u[a+1260>>2]-u[a+1320>>2])*u[a+1344>>2]);u[a+796>>2]=qd*x(x(u[hd>>2]*u[a+1368>>2])/x(q[hd+44>>2]));u[a+812>>2]=x(y(qd))/u[hd>>2];}if(r[a+1311|0]){qd=x(x(u[a+1264>>2]-u[a+1324>>2])*u[a+1348>>2]);u[a+800>>2]=qd*x(x(u[hd>>2]*u[a+1372>>2])/x(q[hd+44>>2]));u[a+816>>2]=x(y(qd))/u[hd>>2];}if(r[a+1312|0]){qd=x(u[a+1352>>2]*x(-x(u[a+1192>>2]-u[a+1328>>2])));Fd=u[hd>>2];u[a+876>>2]=qd*x(x(Fd*u[a+1376>>2])/x(q[hd+44>>2]));u[a+880>>2]=x(y(qd))/Fd;}if(r[a+1313|0]){qd=x(u[a+1356>>2]*x(-x(u[a+1196>>2]-u[a+1332>>2])));Fd=u[hd>>2];u[a+940>>2]=qd*x(x(Fd*u[a+1380>>2])/x(q[hd+44>>2]));u[a+944>>2]=x(y(qd))/Fd;}if(r[a+1314|0]){qd=x(u[a+1360>>2]*x(-x(u[a+1200>>2]-u[a+1336>>2])));Fd=u[hd>>2];u[a+1004>>2]=qd*x(x(Fd*u[a+1384>>2])/x(q[hd+44>>2]));u[a+1008>>2]=x(y(qd))/Fd;}}function zm(a,u){Fd(a);a=(u<<2)+a|0;q[a+1316>>2]=q[((u|0)<3?a+1256|0:a+1180|0)>>2];}function Am(a){var u=0,hd=0,Od=0;Fd(a);q[a+1316>>2]=q[a+1256>>2];hd=a+1260|0;Od=q[hd+4>>2];u=a+1320|0;q[u>>2]=q[hd>>2];q[u+4>>2]=Od;q[a+1328>>2]=q[a+1192>>2];u=a+1332|0;a=a+1196|0;hd=q[a+4>>2];q[u>>2]=q[a>>2];q[u+4>>2]=hd;}function Bm(a,q,Pd){var Qd=0;Qd=a+q|0;o[Qd+1309|0]=Pd;if((q|0)<=2){o[Qd+788|0]=Pd;return}o[((q<<6)+a|0)+720|0]=Pd;}function Cm(a,Pd,Rd,Sd){Gf(a,Pd,Rd,Sd);Pd=a+1309|0;o[Pd|0]=0;o[Pd+1|0]=0;o[Pd+2|0]=0;o[Pd+3|0]=0;q[a+4>>2]=9;q[a>>2]=3144;Pd=a+1313|0;o[Pd|0]=0;o[Pd+1|0]=0;Pd=a+1316|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1324|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1332|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1340|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1348|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1356|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1380|0;q[Pd>>2]=1065353216;q[Pd+4>>2]=1065353216;Pd=a+1372|0;q[Pd>>2]=1065353216;q[Pd+4>>2]=1065353216;q[a+1364>>2]=1065353216;q[a+1368>>2]=1065353216;}function Dm(a,Pd,Rd,Sd,Td,Ud){Hf(a,Pd,Rd,Sd,Td,Ud);Pd=a+1309|0;o[Pd|0]=0;o[Pd+1|0]=0;o[Pd+2|0]=0;o[Pd+3|0]=0;q[a+4>>2]=9;q[a>>2]=3144;Pd=a+1313|0;o[Pd|0]=0;o[Pd+1|0]=0;Pd=a+1316|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1324|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1332|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1340|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1348|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1356|0;q[Pd>>2]=0;q[Pd+4>>2]=0;Pd=a+1380|0;q[Pd>>2]=1065353216;q[Pd+4>>2]=1065353216;Pd=a+1372|0;q[Pd>>2]=1065353216;q[Pd+4>>2]=1065353216;q[a+1364>>2]=1065353216;q[a+1368>>2]=1065353216;}function Em(a){a=a|0;return q[a+1304>>2]}function Fm(a,Pd,Rd){a=a|0;Pd=Pd|0;Rd=Rd|0;Va(a,Pd,Rd);q[Pd+52>>2]=q[a+48>>2];q[Pd+56>>2]=q[a+52>>2];q[Pd+60>>2]=q[a+56>>2];q[Pd+64>>2]=q[a+60>>2];q[Pd+68>>2]=q[a- -64>>2];q[Pd+72>>2]=q[a+68>>2];q[Pd+76>>2]=q[a+72>>2];q[Pd+80>>2]=q[a+76>>2];q[Pd+84>>2]=q[a+80>>2];q[Pd+88>>2]=q[a+84>>2];q[Pd+92>>2]=q[a+88>>2];q[Pd+96>>2]=q[a+92>>2];q[Pd+100>>2]=q[a+96>>2];q[Pd+104>>2]=q[a+100>>2];q[Pd+108>>2]=q[a+104>>2];q[Pd+112>>2]=q[a+108>>2];q[Pd+116>>2]=q[a+112>>2];q[Pd+120>>2]=q[a+116>>2];q[Pd+124>>2]=q[a+120>>2];q[Pd+128>>2]=q[a+124>>2];q[Pd+132>>2]=q[a+128>>2];q[Pd+136>>2]=q[a+132>>2];q[Pd+140>>2]=q[a+136>>2];q[Pd+144>>2]=q[a+140>>2];q[Pd+148>>2]=q[a+144>>2];q[Pd+152>>2]=q[a+148>>2];q[Pd+156>>2]=q[a+152>>2];q[Pd+160>>2]=q[a+156>>2];q[Pd+164>>2]=q[a+160>>2];q[Pd+168>>2]=q[a+164>>2];q[Pd+172>>2]=q[a+168>>2];q[Pd+176>>2]=q[a+172>>2];q[Pd+228>>2]=q[a+868>>2];q[Pd+212>>2]=q[a+872>>2];q[Pd+196>>2]=q[a+680>>2];q[Pd+180>>2]=q[a+696>>2];q[Pd+232>>2]=q[a+932>>2];q[Pd+216>>2]=q[a+936>>2];q[Pd+200>>2]=q[a+684>>2];q[Pd+184>>2]=q[a+700>>2];q[Pd+236>>2]=q[a+996>>2];q[Pd+220>>2]=q[a+1e3>>2];q[Pd+204>>2]=q[a+688>>2];q[Pd+188>>2]=q[a+704>>2];q[Pd+244>>2]=r[a+1300|0];q[Pd+248>>2]=r[a+1301|0];return 3108}function Gm(a){return 252}function Hm(a,q,Pd){a=a|0;q=q|0;Pd=Pd|0;var Rd=x(0);if(Pd>>>0<=2){q=q+ -2|0;if(q>>>0>2){return x(x(0))}a:{switch(q-1|0){default:return x(u[((Pd<<2)+a|0)+756>>2]);case 1:return x(u[((Pd<<2)+a|0)+772>>2]);case 0:break a}}return x(u[((Pd<<2)+a|0)+740>>2])}Pd=Pd+ -3|0;b:{if(Pd>>>0>2){break b}q=q+ -2|0;if(q>>>0>2){break b}c:{switch(q-1|0){default:return x(u[((Pd<<6)+a|0)+900>>2]);case 1:return x(u[((Pd<<6)+a|0)+904>>2]);case 0:break c}}Rd=u[((Pd<<6)+a|0)+896>>2];}return x(Rd)}function Im(a,Pd,Sd,Td){a=a|0;Pd=Pd|0;Sd=x(Sd);Td=Td|0;var Ud=0;a:{b:{c:{if(Td>>>0<=2){Pd=Pd+ -2|0;if(Pd>>>0>2){break c}d:{switch(Pd-1|0){default:u[((Td<<2)+a|0)+756>>2]=Sd;break b;case 1:u[((Td<<2)+a|0)+772>>2]=Sd;break a;case 0:break d}}u[((Td<<2)+a|0)+740>>2]=Sd;q[a+1304>>2]=q[a+1304>>2]|1<<w(Td,3);return}Ud=Td+ -3|0;if(Ud>>>0>2){break c}Pd=Pd+ -2|0;if(Pd>>>0>2){break c}e:{switch(Pd-1|0){default:u[((Ud<<6)+a|0)+900>>2]=Sd;break b;case 1:u[((Ud<<6)+a|0)+904>>2]=Sd;break a;case 0:break e}}u[((Ud<<6)+a|0)+896>>2]=Sd;q[a+1304>>2]=q[a+1304>>2]|1<<w(Td,3);}return}q[a+1304>>2]=q[a+1304>>2]|4<<w(Td,3);return}q[a+1304>>2]=q[a+1304>>2]|2<<w(Td,3);}function Jm(a){a=a|0;var Pd=x(0),Sd=x(0);Pd=x(1);Sd=u[q[a+32>>2]+404>>2];if(Sd!=x(0)){Pd=u[q[a+28>>2]+404>>2];Pd=x(Pd/x(Pd+Sd));}q[a+1296>>2]=0;Sd=x(x(1)-Pd);u[a+1292>>2]=x(Pd*u[a+1120>>2])+x(Sd*u[a+1184>>2]);u[a+1288>>2]=x(Pd*u[a+1116>>2])+x(Sd*u[a+1180>>2]);u[a+1284>>2]=x(Pd*u[a+1112>>2])+x(Sd*u[a+1176>>2]);}function Km(a,Td){a=a|0;Td=Td|0;var Vd=0,Wd=0;a:{if(r[a+1308|0]){q[Td>>2]=0;q[Td+4>>2]=0;break a}Ob(a,q[a+28>>2]+4|0,q[a+32>>2]+4|0);q[Td>>2]=0;q[Td+4>>2]=6;b:{if(!(q[a+856>>2]|r[a+788|0])){Vd=6;Wd=0;break b}q[Td>>2]=1;q[Td+4>>2]=5;Vd=5;Wd=1;}if(!(r[a+789|0]?0:!q[a+860>>2])){Vd=Vd+ -1|0;q[Td+4>>2]=Vd;Wd=Wd+1|0;q[Td>>2]=Wd;}if(!(r[a+790|0]?0:!q[a+864>>2])){q[Td+4>>2]=Vd+ -1;q[Td>>2]=Wd+1;}if(rb(a,0)){q[Td>>2]=q[Td>>2]+1;q[Td+4>>2]=q[Td+4>>2]+ -1;}if(rb(a,1)){q[Td>>2]=q[Td>>2]+1;q[Td+4>>2]=q[Td+4>>2]+ -1;}if(!rb(a,2)){break a}q[Td>>2]=q[Td>>2]+1;q[Td+4>>2]=q[Td+4>>2]+ -1;}}function Lm(a){a=a|0;var Td=0,Xd=0,Yd=0,Zd=0;Td=P-48|0;P=Td;a:{if(!r[a+1308|0]){break a}q[a+1056>>2]=0;q[a+992>>2]=0;q[a+928>>2]=0;q[a+712>>2]=0;q[a+716>>2]=0;q[a+720>>2]=0;q[a+724>>2]=0;Ob(a,q[a+28>>2]+4|0,q[a+32>>2]+4|0);n[q[q[a>>2]+44>>2]](a);Xd=a+1292|0;Zd=q[Xd+4>>2];q[Td+40>>2]=q[Xd>>2];q[Td+44>>2]=Zd;Yd=q[a+1288>>2];q[Td+32>>2]=q[a+1284>>2];q[Td+36>>2]=Yd;Yd=q[Xd+4>>2];q[Td+24>>2]=q[Xd>>2];q[Td+28>>2]=Yd;Xd=q[a+1288>>2];q[Td+16>>2]=q[a+1284>>2];q[Td+20>>2]=Xd;if(!!(u[a+696>>2]>=u[a+680>>2])){Xd=r[a+1300|0];Yd=q[(Xd?a+1064|0:a+1128|0)>>2];Zd=q[(Xd?a+1080|0:a+1144|0)>>2];Xd=q[(Xd?a+1096|0:a+1160|0)>>2];q[Td+12>>2]=0;q[Td+8>>2]=Xd;q[Td+4>>2]=Zd;q[Td>>2]=Yd;Ed(a,a+176|0,Td,Td+32|0,Td+16|0);}if(!!(u[a+700>>2]>=u[a+684>>2])){Xd=r[a+1300|0];Yd=q[(Xd?a+1068|0:a+1132|0)>>2];Zd=q[(Xd?a+1084|0:a+1148|0)>>2];Xd=q[(Xd?a+1100|0:a+1164|0)>>2];q[Td+12>>2]=0;q[Td+8>>2]=Xd;q[Td+4>>2]=Zd;q[Td>>2]=Yd;Ed(a,a+260|0,Td,Td+32|0,Td+16|0);}if(!!(u[a+704>>2]>=u[a+688>>2])){Xd=r[a+1300|0];Yd=q[(Xd?a+1072|0:a+1136|0)>>2];Zd=q[(Xd?a+1088|0:a+1152|0)>>2];Xd=q[(Xd?a+1104|0:a+1168|0)>>2];q[Td+12>>2]=0;q[Td+8>>2]=Xd;q[Td+4>>2]=Zd;q[Td>>2]=Yd;Ed(a,a+344|0,Td,Td+32|0,Td+16|0);}if(rb(a,0)){Xd=a+1216|0;Yd=q[Xd+4>>2];q[Td+8>>2]=q[Xd>>2];q[Td+12>>2]=Yd;Xd=q[a+1212>>2];q[Td>>2]=q[a+1208>>2];q[Td+4>>2]=Xd;Dd(a,a+428|0,Td);}if(rb(a,1)){Xd=a+1232|0;Yd=q[Xd+4>>2];q[Td+8>>2]=q[Xd>>2];q[Td+12>>2]=Yd;Xd=a+1224|0;Yd=q[Xd+4>>2];q[Td>>2]=q[Xd>>2];q[Td+4>>2]=Yd;Dd(a,a+512|0,Td);}if(!rb(a,2)){break a}Xd=a+1248|0;Yd=q[Xd+4>>2];q[Td+8>>2]=q[Xd>>2];q[Td+12>>2]=Yd;Xd=a+1240|0;Yd=q[Xd+4>>2];q[Td>>2]=q[Xd>>2];q[Td+4>>2]=Yd;Dd(a,a+596|0,Td);}P=Td+48|0;}function Mm(a){var _d=x(0),$d=x(0),ae=x(0),be=x(0),ce=x(0),de=x(0),ee=x(0),fe=x(0),ge=x(0),he=x(0),ie=x(0),je=x(0),ke=x(0),le=x(0),me=x(0),ne=x(0),oe=0;q[a+1268>>2]=0;de=u[a+1084>>2];ee=u[a+1104>>2];fe=u[a+1088>>2];ge=u[a+1100>>2];me=x(x(de*ee)-x(fe*ge));$d=u[a+1064>>2];ae=u[a+1068>>2];he=u[a+1096>>2];ie=u[a+1080>>2];ne=x(x(fe*he)-x(ee*ie));be=x(x(ge*ie)-x(de*he));ce=u[a+1072>>2];_d=x(x(1)/x(x(x(me*$d)+x(ae*ne))+x(be*ce)));je=x(u[a+1184>>2]-u[a+1120>>2]);ke=x(u[a+1176>>2]-u[a+1112>>2]);le=x(u[a+1180>>2]-u[a+1116>>2]);be=x(x(je*x(x(x(de*$d)-x(ie*ae))*_d))+x(x(ke*x(be*_d))+x(le*x(x(x(he*ae)-x(ge*$d))*_d))));u[a+1264>>2]=be;$d=x(x(je*x(x(x(ie*ce)-x(fe*$d))*_d))+x(x(ke*x(ne*_d))+x(le*x(x(x(ee*$d)-x(he*ce))*_d))));u[a+1260>>2]=$d;_d=x(x(je*x(x(x(fe*ae)-x(de*ce))*_d))+x(x(ke*x(me*_d))+x(le*x(x(x(ge*ce)-x(ee*ae))*_d))));u[a+1256>>2]=_d;u[a+840>>2]=_d;ae=u[a+680>>2];ce=u[a+696>>2];a:{if(!(ae>ce)){if(!!(ae>_d)){q[a+856>>2]=2;_d=x(_d-ae);break a}if(!!(ce<_d)){q[a+856>>2]=1;_d=x(_d-ce);break a}}q[a+856>>2]=0;_d=x(0);}u[a+844>>2]=$d;u[a+824>>2]=_d;_d=u[a+684>>2];ae=u[a+700>>2];b:{if(!(_d>ae)){c:{if(!(_d>$d)){if(!(ae<$d)){break c}q[a+860>>2]=1;_d=x($d-ae);break b}q[a+860>>2]=2;_d=x($d-_d);break b}}q[a+860>>2]=0;_d=x(0);}u[a+848>>2]=be;u[a+828>>2]=_d;oe=a;_d=u[a+688>>2];$d=u[a+704>>2];d:{if(!(_d>$d)){e:{if(!(_d>be)){if(!($d<be)){break e}q[a+864>>2]=1;_d=x(be-$d);break d}q[a+864>>2]=2;_d=x(be-_d);break d}}q[a+864>>2]=0;_d=x(0);}u[oe+832>>2]=_d;}function Nm(a){var pe=x(0),qe=x(0),re=x(0),se=x(0),te=0,ue=x(0),ve=x(0),we=x(0),xe=x(0),ye=x(0),ze=x(0),Ae=x(0),Be=x(0),Ce=x(0),De=x(0),Ee=x(0),Fe=x(0),Ge=x(0),He=x(0),Ie=x(0),Je=x(0),Ke=x(0),Le=x(0),Me=x(0),Ne=0,Oe=0,Pe=0,Qe=0,Re=0,Se=0,Te=x(0);te=P-48|0;P=te;Ne=a+1160|0;Ce=u[Ne>>2];Oe=a+1128|0;De=u[Oe>>2];Pe=a+1144|0;Ee=u[Pe>>2];Fe=u[a+1164>>2];Ge=u[a+1132>>2];He=u[a+1148>>2];Ie=u[a+1168>>2];Je=u[a+1136>>2];Ke=u[a+1152>>2];Qe=a+1072|0;se=u[Qe>>2];ye=u[a+1084>>2];re=u[a+1100>>2];ue=u[a+1068>>2];ve=u[a+1096>>2];Re=a+1088|0;ze=u[Re>>2];we=u[a+1080>>2];Se=a+1104|0;xe=u[Se>>2];pe=u[a+1064>>2];q[te+44>>2]=0;q[te+28>>2]=0;Te=x(x(ye*xe)-x(ze*re));Ae=x(x(ze*ve)-x(xe*we));Be=x(x(re*we)-x(ye*ve));qe=x(x(1)/x(x(x(pe*Te)+x(ue*Ae))+x(Be*se)));Be=x(Be*qe);Le=x(x(x(ve*ue)-x(re*pe))*qe);Me=x(x(x(ye*pe)-x(we*ue))*qe);u[te+40>>2]=x(x(Je*Be)+x(Ke*Le))+x(Ie*Me);u[te+36>>2]=x(x(Ge*Be)+x(Le*He))+x(Me*Fe);Ae=x(Ae*qe);ve=x(x(x(xe*pe)-x(ve*se))*qe);pe=x(x(x(we*se)-x(ze*pe))*qe);u[te+24>>2]=x(x(Je*Ae)+x(Ke*ve))+x(Ie*pe);u[te+20>>2]=x(x(Ge*Ae)+x(ve*He))+x(pe*Fe);q[te+12>>2]=0;u[te+32>>2]=x(Ce*Me)+x(x(De*Be)+x(Ee*Le));u[te+16>>2]=x(Ce*pe)+x(x(De*Ae)+x(Ee*ve));pe=x(Te*qe);re=x(x(x(re*se)-x(xe*ue))*qe);qe=x(x(x(ze*ue)-x(ye*se))*qe);u[te+8>>2]=x(x(Je*pe)+x(Ke*re))+x(Ie*qe);u[te+4>>2]=x(x(pe*Ge)+x(re*He))+x(qe*Fe);u[te>>2]=x(Ce*qe)+x(x(De*pe)+x(Ee*re));Ff(te,a+1192|0);q[a+1236>>2]=0;q[a+1252>>2]=0;q[a+1220>>2]=0;pe=u[Pe>>2];ye=u[Qe>>2];re=u[Oe>>2];ve=u[Re>>2];qe=x(x(pe*ye)-x(re*ve));ze=u[Se>>2];we=u[Ne>>2];se=x(x(re*ze)-x(we*ye));ue=x(x(we*ve)-x(pe*ze));xe=x(x(1)/x(E(x(x(qe*qe)+x(x(se*se)+x(ue*ue))))));u[a+1232>>2]=qe*xe;u[a+1228>>2]=se*xe;u[a+1224>>2]=ue*xe;xe=x(x(pe*qe)-x(we*se));we=x(x(we*ue)-x(re*qe));re=x(x(re*se)-x(pe*ue));pe=x(x(1)/x(E(x(x(x(xe*xe)+x(we*we))+x(re*re)))));u[a+1248>>2]=re*pe;u[a+1244>>2]=we*pe;u[a+1240>>2]=xe*pe;pe=x(x(ze*se)-x(ve*qe));re=x(x(ye*qe)-x(ze*ue));se=x(x(ve*ue)-x(ye*se));qe=x(x(1)/x(E(x(x(x(pe*pe)+x(re*re))+x(se*se)))));u[a+1216>>2]=se*qe;u[a+1212>>2]=re*qe;u[a+1208>>2]=pe*qe;P=te+48|0;}function Om(a,Ue,Ve){a=a|0;Ue=Ue|0;Ve=Ve|0;Va(a,Ue,Ve);q[Ue+52>>2]=q[a+48>>2];q[Ue+56>>2]=q[a+52>>2];q[Ue+60>>2]=q[a+56>>2];q[Ue+64>>2]=q[a+60>>2];q[Ue+68>>2]=q[a- -64>>2];q[Ue+72>>2]=q[a+68>>2];q[Ue+76>>2]=q[a+72>>2];q[Ue+80>>2]=q[a+76>>2];q[Ue+84>>2]=q[a+80>>2];q[Ue+88>>2]=q[a+84>>2];q[Ue+92>>2]=q[a+88>>2];q[Ue+96>>2]=q[a+92>>2];q[Ue+100>>2]=q[a+96>>2];q[Ue+104>>2]=q[a+100>>2];q[Ue+108>>2]=q[a+104>>2];q[Ue+112>>2]=q[a+108>>2];q[Ue+116>>2]=q[a+112>>2];q[Ue+120>>2]=q[a+116>>2];q[Ue+124>>2]=q[a+120>>2];q[Ue+128>>2]=q[a+124>>2];q[Ue+132>>2]=q[a+128>>2];q[Ue+136>>2]=q[a+132>>2];q[Ue+140>>2]=q[a+136>>2];q[Ue+144>>2]=q[a+140>>2];q[Ue+148>>2]=q[a+144>>2];q[Ue+152>>2]=q[a+148>>2];q[Ue+156>>2]=q[a+152>>2];q[Ue+160>>2]=q[a+156>>2];q[Ue+164>>2]=q[a+160>>2];q[Ue+168>>2]=q[a+164>>2];q[Ue+172>>2]=q[a+168>>2];q[Ue+176>>2]=q[a+172>>2];q[Ue+428>>2]=q[a+968>>2];q[Ue+412>>2]=q[a+972>>2];q[Ue+444>>2]=q[a+976>>2];q[Ue+460>>2]=q[a+980>>2];q[Ue+476>>2]=q[a+984>>2];q[Ue+492>>2]=q[a+988>>2];q[Ue+508>>2]=q[a+992>>2];q[Ue+524>>2]=q[a+1e3>>2];q[Ue+540>>2]=q[a+1004>>2];q[Ue+556>>2]=q[a+1012>>2];q[Ue+572>>2]=q[a+1020>>2];q[Ue+588>>2]=q[a+1028>>2];q[Ue+604>>2]=q[a+1036>>2];q[Ue+432>>2]=q[a+1056>>2];q[Ue+416>>2]=q[a+1060>>2];q[Ue+448>>2]=q[a+1064>>2];q[Ue+464>>2]=q[a+1068>>2];q[Ue+480>>2]=q[a+1072>>2];q[Ue+496>>2]=q[a+1076>>2];q[Ue+512>>2]=q[a+1080>>2];q[Ue+528>>2]=q[a+1088>>2];q[Ue+544>>2]=q[a+1092>>2];q[Ue+560>>2]=q[a+1100>>2];q[Ue+576>>2]=q[a+1108>>2];q[Ue+592>>2]=q[a+1116>>2];q[Ue+608>>2]=q[a+1124>>2];q[Ue+436>>2]=q[a+1144>>2];q[Ue+420>>2]=q[a+1148>>2];q[Ue+452>>2]=q[a+1152>>2];q[Ue+468>>2]=q[a+1156>>2];q[Ue+484>>2]=q[a+1160>>2];q[Ue+500>>2]=q[a+1164>>2];q[Ue+516>>2]=q[a+1168>>2];q[Ue+532>>2]=q[a+1176>>2];q[Ue+548>>2]=q[a+1180>>2];q[Ue+564>>2]=q[a+1188>>2];q[Ue+580>>2]=q[a+1196>>2];q[Ue+596>>2]=q[a+1204>>2];Ve=q[a+1212>>2];q[Ue+440>>2]=0;q[Ue+612>>2]=Ve;q[Ue+616>>2]=0;q[Ue+600>>2]=0;q[Ue+584>>2]=0;q[Ue+568>>2]=0;q[Ue+552>>2]=0;q[Ue+536>>2]=0;q[Ue+520>>2]=0;q[Ue+504>>2]=0;q[Ue+488>>2]=0;q[Ue+472>>2]=0;q[Ue+456>>2]=0;q[Ue+424>>2]=0;o[Ue+620|0]=r[a+996|0];o[Ue+624|0]=r[a+1008|0];o[Ue+628|0]=r[a+1016|0];o[Ue+632|0]=r[a+1024|0];o[Ue+636|0]=r[a+1032|0];o[Ue+621|0]=r[a+1084|0];o[Ue+625|0]=r[a+1096|0];o[Ue+629|0]=r[a+1104|0];o[Ue+633|0]=r[a+1112|0];o[Ue+637|0]=r[a+1120|0];o[Ue+622|0]=r[a+1172|0];o[Ue+626|0]=r[a+1184|0];o[Ue+630|0]=r[a+1192|0];o[Ue+634|0]=r[a+1200|0];Ve=r[a+1208|0];o[Ue+639|0]=0;o[Ue+635|0]=0;o[Ue+631|0]=0;o[Ue+627|0]=0;o[Ue+623|0]=0;o[Ue+638|0]=Ve;q[Ue+196>>2]=q[a+680>>2];q[Ue+200>>2]=q[a+684>>2];q[Ue+204>>2]=q[a+688>>2];q[Ue+208>>2]=q[a+692>>2];q[Ue+180>>2]=q[a+696>>2];q[Ue+184>>2]=q[a+700>>2];q[Ue+188>>2]=q[a+704>>2];q[Ue+192>>2]=q[a+708>>2];q[Ue+212>>2]=q[a+712>>2];q[Ue+216>>2]=q[a+716>>2];q[Ue+220>>2]=q[a+720>>2];q[Ue+224>>2]=q[a+724>>2];q[Ue+228>>2]=q[a+728>>2];q[Ue+232>>2]=q[a+732>>2];q[Ue+236>>2]=q[a+736>>2];q[Ue+240>>2]=q[a+740>>2];q[Ue+244>>2]=q[a+744>>2];q[Ue+248>>2]=q[a+748>>2];q[Ue+252>>2]=q[a+752>>2];q[Ue+256>>2]=q[a+756>>2];q[Ue+260>>2]=q[a+760>>2];q[Ue+264>>2]=q[a+764>>2];q[Ue+268>>2]=q[a+768>>2];q[Ue+272>>2]=q[a+772>>2];q[Ue+276>>2]=q[a+776>>2];q[Ue+280>>2]=q[a+780>>2];q[Ue+284>>2]=q[a+784>>2];q[Ue+288>>2]=q[a+788>>2];q[Ue+292>>2]=q[a+876>>2];q[Ue+296>>2]=q[a+880>>2];q[Ue+300>>2]=q[a+884>>2];q[Ue+304>>2]=q[a+888>>2];q[Ue+308>>2]=q[a+892>>2];q[Ue+312>>2]=q[a+896>>2];q[Ue+316>>2]=q[a+900>>2];q[Ue+320>>2]=q[a+904>>2];q[Ue+324>>2]=q[a+804>>2];q[Ue+328>>2]=q[a+808>>2];q[Ue+332>>2]=q[a+812>>2];q[Ue+336>>2]=q[a+816>>2];q[Ue+340>>2]=q[a+820>>2];q[Ue+344>>2]=q[a+824>>2];q[Ue+348>>2]=q[a+828>>2];q[Ue+352>>2]=q[a+832>>2];q[Ue+356>>2]=q[a+840>>2];q[Ue+360>>2]=q[a+844>>2];q[Ue+364>>2]=q[a+848>>2];q[Ue+368>>2]=q[a+852>>2];q[Ue+372>>2]=q[a+860>>2];q[Ue+376>>2]=q[a+864>>2];q[Ue+380>>2]=q[a+868>>2];q[Ue+384>>2]=q[a+872>>2];o[Ue+388|0]=r[a+792|0];o[Ue+392|0]=r[a+795|0];o[Ue+396|0]=r[a+798|0];o[Ue+400|0]=r[a+836|0];o[Ue+404|0]=r[a+856|0];o[Ue+389|0]=r[a+793|0];o[Ue+393|0]=r[a+796|0];o[Ue+397|0]=r[a+799|0];o[Ue+401|0]=r[a+837|0];o[Ue+405|0]=r[a+857|0];o[Ue+390|0]=r[a+794|0];o[Ue+394|0]=r[a+797|0];o[Ue+398|0]=r[a+800|0];o[Ue+402|0]=r[a+838|0];Ve=r[a+858|0];o[Ue+407|0]=0;o[Ue+403|0]=0;o[Ue+399|0]=0;o[Ue+395|0]=0;o[Ue+391|0]=0;o[Ue+406|0]=Ve;a=q[a+1232>>2];q[Ue+408>>2]=0;q[Ue+640>>2]=a;return 2972}function Pm(a){return 644}function Qm(a,Ue,Ve){a=a|0;Ue=Ue|0;Ve=Ve|0;var We=0;We=P-16|0;P=We;q[We+12>>2]=a;q[We+8>>2]=Ue;q[We+4>>2]=Ve;a=P-16|0;q[a+12>>2]=q[We+8>>2];a=q[q[q[a+12>>2]+188>>2]+4>>2];Ue=P-16|0;q[Ue+12>>2]=q[We+4>>2];o[We+3|0]=(q[q[q[Ue+12>>2]+188>>2]+8>>2]&a)!=0;a=We;if(o[We+3|0]&1){Ue=P-16|0;q[Ue+12>>2]=q[We+4>>2];Ue=q[q[q[Ue+12>>2]+188>>2]+4>>2];Ve=P-16|0;q[Ve+12>>2]=q[We+8>>2];Ue=(q[q[q[Ve+12>>2]+188>>2]+8>>2]&Ue)!=0;}else {Ue=0;}o[a+3|0]=Ue;a=We;Ue=0;a:{if(!(o[We+3|0]&1)){break a}Ue=0;if(!(Ef(q[We+8>>2],q[We+4>>2])&1)){break a}Ue=Ef(q[We+4>>2],q[We+8>>2]);}o[a+3|0]=Ue&1;P=We+16|0;return o[We+3|0]&1}function Rm(a,q,Ue,Ve,Xe){Xe=x(Xe);}function Sm(a,Ue,Ve,Xe,Ye){tm(a,Ue,Ve,Xe,Ye);q[a>>2]=2896;Ue=a+1144|0;q[Ue>>2]=0;q[Ue+4>>2]=0;Ue=a+1056|0;q[Ue>>2]=0;q[Ue+4>>2]=0;q[a+968>>2]=0;q[a+972>>2]=0;q[a+680>>2]=0;q[a+684>>2]=0;q[a+688>>2]=0;q[a+692>>2]=0;q[a+696>>2]=0;q[a+700>>2]=0;q[a+704>>2]=0;q[a+708>>2]=0;}function Tm(a,Ue,Ve){a=a|0;Ue=Ue|0;Ve=Ve|0;var Xe=0,Ye=x(0),Ze=x(0),_e=x(0),$e=0,af=x(0),bf=x(0),cf=x(0),df=x(0),ef=x(0),ff=x(0),gf=x(0),hf=x(0),jf=x(0);Ye=x(1);Xe=q[Ue>>2];if(!((Xe|0)==q[a+84>>2]|r[Xe+204|0]&4|x(x(x(x(u[a+32>>2]-u[a+16>>2])*u[Ue+8>>2])+x(x(u[a+36>>2]-u[a+20>>2])*u[Ue+12>>2]))+x(x(u[a+40>>2]-u[a+24>>2])*u[Ue+16>>2]))>=x(-u[a+88>>2]))){$e=q[Ue+40>>2];q[a+80>>2]=Xe;q[a+4>>2]=$e;a:{if(Ve){Ve=Ue+8|0;Xe=q[Ve+4>>2];q[a+48>>2]=q[Ve>>2];q[a+52>>2]=Xe;Xe=q[Ve+12>>2];q[a+56>>2]=q[Ve+8>>2];q[a+60>>2]=Xe;break a}af=u[Xe+12>>2];bf=u[Xe+8>>2];cf=u[Xe+28>>2];df=u[Xe+20>>2];ef=u[Xe+24>>2];ff=u[Xe+44>>2];gf=u[Xe+36>>2];hf=u[Xe+40>>2];jf=u[Xe+4>>2];Ye=u[Ue+16>>2];Ze=u[Ue+8>>2];_e=u[Ue+12>>2];q[a+60>>2]=0;u[a+56>>2]=x(x(Ze*gf)+x(_e*hf))+x(Ye*ff);u[a+52>>2]=x(x(Ze*df)+x(_e*ef))+x(Ye*cf);u[a+48>>2]=x(x(jf*Ze)+x(bf*_e))+x(af*Ye);}Xe=q[Ue+28>>2];Ve=a- -64|0;q[Ve>>2]=q[Ue+24>>2];q[Ve+4>>2]=Xe;Ve=q[Ue+36>>2];q[a+72>>2]=q[Ue+32>>2];q[a+76>>2]=Ve;Ye=u[Ue+40>>2];}return x(Ye)}function Um(a,Ue){a=a|0;Ue=Ue|0;var Ve=0,kf=0,lf=0;Ve=q[Ue>>2];kf=q[a+84>>2];if(!(!(q[Ue+8>>2]&q[a+8>>2])|(!(q[a+12>>2]&q[Ue+4>>2])|(Ve|0)==(kf|0)))){a=q[a+96>>2];lf=n[q[q[a>>2]+28>>2]](a,kf,Ve)|0;}return lf|0}function Vm(a,Ue,mf,nf,of,pf){a=a|0;Ue=Ue|0;mf=mf|0;nf=nf|0;of=of|0;pf=pf|0;var qf=0,rf=0,sf=0,tf=0,uf=0,vf=0,wf=0,xf=0;a:{b:{if((pf|0)>=0){rf=q[a+16>>2];c:{if((rf|0)>=1){vf=q[a+12>>2];while(1){wf=vf+(qf<<2)|0;uf=q[wf>>2];sf=q[q[uf+28>>2]+208>>2];if((sf|0)<=-1){sf=q[q[uf+32>>2]+208>>2];}if((pf|0)==(sf|0)){break c}qf=qf+1|0;if((qf|0)<(rf|0)){continue}break}}wf=0;}uf=0;if((qf|0)<(rf|0)){xf=q[a+12>>2];while(1){vf=q[xf+(qf<<2)>>2];sf=q[q[vf+28>>2]+208>>2];if((sf|0)<=-1){sf=q[q[vf+32>>2]+208>>2];}uf=((pf|0)==(sf|0))+uf|0;qf=qf+1|0;if((rf|0)!=(qf|0)){continue}break}}qf=q[a+4>>2];if(q[qf+80>>2]<2){break a}if((mf|0)<1){break b}pf=q[a+36>>2];qf=q[a+32>>2];while(1){xf=(tf<<2)+Ue|0;d:{if((pf|0)!=(qf|0)){break d}sf=pf?pf<<1:1;if((pf|0)>=(sf|0)){qf=pf;break d}qf=0;rf=0;if(sf){q[6657]=q[6657]+1;rf=n[q[5255]](sf<<2,16)|0;pf=q[a+32>>2];}if((pf|0)>=1){while(1){vf=qf<<2;q[vf+rf>>2]=q[q[a+40>>2]+vf>>2];qf=qf+1|0;if((qf|0)!=(pf|0)){continue}break}}qf=q[a+40>>2];if(qf){if(r[a+44|0]){if(qf){q[6658]=q[6658]+1;n[q[5256]](qf);}pf=q[a+32>>2];}q[a+40>>2]=0;}qf=pf;q[a+40>>2]=rf;o[a+44|0]=1;q[a+36>>2]=sf;pf=sf;}q[q[a+40>>2]+(qf<<2)>>2]=q[xf>>2];qf=qf+1|0;q[a+32>>2]=qf;tf=tf+1|0;if((tf|0)!=(mf|0)){continue}break}break b}pf=q[a+8>>2];x(n[q[q[pf>>2]+12>>2]](pf,Ue,mf,nf,of,q[a+12>>2],q[a+16>>2],q[a+4>>2],q[a+20>>2],q[a+24>>2]));return}if((of|0)>=1){pf=q[a+56>>2];qf=q[a+52>>2];tf=0;while(1){sf=(tf<<2)+nf|0;e:{if((pf|0)!=(qf|0)){break e}Ue=pf?pf<<1:1;if((pf|0)>=(Ue|0)){qf=pf;break e}qf=0;rf=0;if(Ue){q[6657]=q[6657]+1;rf=n[q[5255]](Ue<<2,16)|0;pf=q[a+52>>2];}if((pf|0)>=1){while(1){mf=qf<<2;q[mf+rf>>2]=q[mf+q[a+60>>2]>>2];qf=qf+1|0;if((qf|0)!=(pf|0)){continue}break}}mf=q[a+60>>2];if(mf){if(r[a+64|0]){if(mf){q[6658]=q[6658]+1;n[q[5256]](mf);}pf=q[a+52>>2];}q[a+60>>2]=0;}qf=pf;q[a+60>>2]=rf;o[a+64|0]=1;q[a+56>>2]=Ue;pf=Ue;}q[q[a+60>>2]+(qf<<2)>>2]=q[sf>>2];qf=qf+1|0;q[a+52>>2]=qf;tf=tf+1|0;if((tf|0)!=(of|0)){continue}break}}f:{if(!uf){qf=q[a+72>>2];break f}pf=q[a+76>>2];qf=q[a+72>>2];tf=0;while(1){nf=(tf<<2)+wf|0;g:{if((pf|0)!=(qf|0)){break g}Ue=pf?pf<<1:1;if((pf|0)>=(Ue|0)){qf=pf;break g}qf=0;rf=0;if(Ue){q[6657]=q[6657]+1;rf=n[q[5255]](Ue<<2,16)|0;pf=q[a+72>>2];}if((pf|0)>=1){while(1){mf=qf<<2;q[mf+rf>>2]=q[mf+q[a+80>>2]>>2];qf=qf+1|0;if((qf|0)!=(pf|0)){continue}break}}mf=q[a+80>>2];if(mf){if(r[a+84|0]){if(mf){q[6658]=q[6658]+1;n[q[5256]](mf);}pf=q[a+72>>2];}q[a+80>>2]=0;}qf=pf;q[a+80>>2]=rf;o[a+84|0]=1;q[a+76>>2]=Ue;pf=Ue;}q[q[a+80>>2]+(qf<<2)>>2]=q[nf>>2];qf=qf+1|0;q[a+72>>2]=qf;tf=tf+1|0;if((uf|0)!=(tf|0)){continue}break}}if((q[a+52>>2]+qf|0)>q[q[a+4>>2]+80>>2]){Of(a);}return}pf=q[a+8>>2];x(n[q[q[pf>>2]+12>>2]](pf,Ue,mf,nf,of,wf,uf,qf,q[a+20>>2],q[a+24>>2]));}function Wm(a){a=a|0;aa(Lf(a));}function Xm(a,Ue){a=a|0;Ue=Ue|0;var mf=0;mf=P-16|0;q[mf+12>>2]=a;o[mf+11|0]=Ue;o[q[mf+12>>2]+180|0]=o[mf+11|0]&1;}function Ym(a,Ue){a=a|0;Ue=x(Ue);var nf=0,of=0,pf=0;of=P-16|0;P=of;n[q[5253]](2328);if(q[a+296>>2]>=1){while(1){pf=q[q[a+304>>2]+(nf<<2)>>2];n[q[q[pf>>2]+8>>2]](pf,a,Ue);nf=nf+1|0;if((nf|0)<q[a+296>>2]){continue}break}}n[q[5254]]();P=of+16|0;}function Zm(a,Ue){a=a|0;Ue=Ue|0;q[a+72>>2]=Ue;}function _m(a,Ue){a=a|0;Ue=Ue|0;var yf=0,zf=0,Af=0;n[q[q[Ue>>2]+32>>2]](Ue);zf=n[q[q[Ue>>2]+16>>2]](Ue,104,1)|0;yf=_(q[zf+8>>2],0,104);q[yf+88>>2]=q[a+264>>2];q[yf+92>>2]=q[a+268>>2];q[yf+96>>2]=q[a+272>>2];q[yf+100>>2]=q[a+276>>2];q[yf>>2]=q[a+92>>2];q[yf+4>>2]=q[a+96>>2];q[yf+8>>2]=q[a+100>>2];q[yf+12>>2]=q[a+104>>2];q[yf+16>>2]=q[a+108>>2];q[yf+20>>2]=q[a+116>>2];q[yf+24>>2]=q[a+120>>2];q[yf+28>>2]=q[a+124>>2];q[yf+32>>2]=q[a+128>>2];q[yf+36>>2]=q[a+132>>2];q[yf+40>>2]=q[a+148>>2];q[yf+44>>2]=q[a+152>>2];q[yf+48>>2]=q[a+156>>2];q[yf+52>>2]=q[a+160>>2];q[yf+56>>2]=q[a+176>>2];q[yf+60>>2]=q[a+180>>2];q[yf+64>>2]=q[a+112>>2];q[yf+68>>2]=q[a+164>>2];q[yf+72>>2]=q[a+168>>2];q[yf+76>>2]=q[a+172>>2];Af=q[a+144>>2];q[yf+84>>2]=0;q[yf+80>>2]=Af;n[q[q[Ue>>2]+20>>2]](Ue,zf,2601,1145853764,yf);Ei(a,Ue);$m(a,Ue);n[q[q[Ue>>2]+36>>2]](Ue);}function $m(a,Ue){var Bf=0,Cf=0,Df=0,Ef=0,Ff=0,Gf=0,Hf=0,If=0,Jf=0;Cf=q[a+8>>2];if((Cf|0)>=1){while(1){Bf=q[q[a+16>>2]+(Df<<2)>>2];if(r[Bf+252|0]&2){Cf=(Ff=Ue,Gf=n[q[q[Bf>>2]+16>>2]](Bf)|0,Hf=1,Ef=q[q[Ue>>2]+16>>2],n[Ef](Ff|0,Gf|0,Hf|0)|0);Hf=Ue,Gf=Cf,Ff=n[q[q[Bf>>2]+20>>2]](Bf,q[Cf+8>>2],Ue)|0,If=1497645650,Jf=Bf,Ef=q[q[Ue>>2]+20>>2],n[Ef](Hf|0,Gf|0,Ff|0,If|0,Jf|0);Cf=q[a+8>>2];}Df=Df+1|0;if((Df|0)<(Cf|0)){continue}break}}if(q[a+228>>2]>=1){Df=0;while(1){Bf=q[q[a+236>>2]+(Df<<2)>>2];Cf=(Jf=Ue,If=n[q[q[Bf>>2]+36>>2]](Bf)|0,Ff=1,Ef=q[q[Ue>>2]+16>>2],n[Ef](Jf|0,If|0,Ff|0)|0);Ff=Ue,If=Cf,Jf=n[q[q[Bf>>2]+40>>2]](Bf,q[Cf+8>>2],Ue)|0,Gf=1397641027,Hf=Bf,Ef=q[q[Ue>>2]+20>>2],n[Ef](Ff|0,If|0,Jf|0,Gf|0,Hf|0);Df=Df+1|0;if((Df|0)<q[a+228>>2]){continue}break}}}function an(a){a=a|0;return q[a+228>>2]}function bn(a,Ue){a=a|0;Ue=Ue|0;var Kf=0;Kf=P-16|0;q[Kf+12>>2]=a;q[Kf+8>>2]=Ue;}function cn(a){a=a|0;return q[a+216>>2]}function dn(a,Ue){a=a|0;Ue=Ue|0;var Lf=0;if(r[a+289|0]){Lf=q[a+216>>2];if(Lf){q[6658]=q[6658]+1;n[q[5256]](Lf);}}q[a+216>>2]=Ue;o[a+289|0]=0;q[q[a+212>>2]+8>>2]=Ue;}function en(a,Ue){a=a|0;Ue=Ue|0;var Mf=0,Nf=0,Of=0,Pf=0,Qf=0,Rf=x(0),Sf=x(0),Tf=x(0),Uf=0,Vf=x(0),Wf=x(0),Xf=x(0),Yf=x(0),Zf=x(0),_f=x(0),$f=x(0),ag=x(0),bg=x(0),cg=x(0),dg=x(0),eg=x(0),fg=x(0),gg=x(0),hg=x(0),ig=x(0),jg=x(0),kg=x(0),lg=x(0),mg=x(0),ng=x(0),og=x(0),pg=0,qg=0,rg=x(0),sg=x(0),tg=x(0);Mf=P-176|0;P=Mf;Nf=n[q[q[a>>2]+20>>2]](a)|0;Uf=n[q[q[Nf>>2]+56>>2]](Nf)|0;Nf=n[q[q[a>>2]+20>>2]](a)|0;Qf=n[q[q[Nf>>2]+56>>2]](Nf)|0;og=u[Ue+40>>2];a:{if(og<=x(0)){break a}Nf=q[Ue+4>>2]+ -3|0;if(Nf>>>0>9){break a}Pf=Uf&2048;qg=Qf&4096;b:{switch(Nf-1|0){default:q[Mf+124>>2]=0;q[Mf+128>>2]=0;q[Mf+136>>2]=0;q[Mf+140>>2]=0;q[Mf+132>>2]=1065353216;q[Mf+156>>2]=0;q[Mf+160>>2]=0;q[Mf+152>>2]=1065353216;q[Mf+164>>2]=0;q[Mf+168>>2]=0;q[Mf+172>>2]=0;q[Mf+116>>2]=0;q[Mf+120>>2]=0;q[Mf+112>>2]=1065353216;q[Mf+144>>2]=0;q[Mf+148>>2]=0;Nf=q[Ue+28>>2];lg=u[Nf+52>>2];Zf=u[Nf+12>>2];fg=u[Nf+4>>2];gg=u[Nf+8>>2];ig=u[Nf+56>>2];Wf=u[Nf+28>>2];Xf=u[Nf+20>>2];Yf=u[Nf+24>>2];Vf=u[Nf+60>>2];hg=u[Ue+308>>2];Tf=u[Nf+44>>2];jg=u[Ue+300>>2];Rf=u[Nf+36>>2];kg=u[Ue+304>>2];Sf=u[Nf+40>>2];q[Mf+172>>2]=0;u[Mf+168>>2]=Vf+x(x(x(jg*Rf)+x(kg*Sf))+x(hg*Tf));u[Mf+164>>2]=ig+x(x(x(jg*Xf)+x(kg*Yf))+x(hg*Wf));u[Mf+160>>2]=lg+x(x(x(jg*fg)+x(kg*gg))+x(hg*Zf));Nf=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Nf>>2]+64>>2]](Nf,Mf+112|0,og);Nf=q[Ue+32>>2];lg=u[Nf+52>>2];Zf=u[Nf+12>>2];fg=u[Nf+4>>2];gg=u[Nf+8>>2];ig=u[Nf+56>>2];Wf=u[Nf+28>>2];Xf=u[Nf+20>>2];Yf=u[Nf+24>>2];Vf=u[Nf+60>>2];hg=u[Ue+324>>2];Tf=u[Nf+44>>2];jg=u[Ue+316>>2];Rf=u[Nf+36>>2];kg=u[Ue+320>>2];Sf=u[Nf+40>>2];q[Mf+172>>2]=0;u[Mf+168>>2]=Vf+x(x(x(jg*Rf)+x(kg*Sf))+x(hg*Tf));u[Mf+164>>2]=ig+x(x(x(jg*Xf)+x(kg*Yf))+x(hg*Wf));u[Mf+160>>2]=lg+x(x(x(jg*fg)+x(kg*gg))+x(hg*Zf));if(!Pf){break a}a=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[a>>2]+64>>2]](a,Mf+112|0,og);break a;case 0:Nf=q[Ue+28>>2];Tf=u[Nf+52>>2];$f=u[Nf+12>>2];ag=u[Nf+4>>2];_f=u[Nf+8>>2];hg=u[Ue+584>>2];jg=u[Ue+552>>2];kg=u[Ue+568>>2];Rf=u[Nf+56>>2];Sf=u[Nf+60>>2];lg=u[Ue+608>>2];Zf=u[Ue+600>>2];fg=u[Ue+604>>2];bg=u[Nf+28>>2];cg=u[Nf+20>>2];dg=u[Nf+24>>2];gg=u[Ue+588>>2];ig=u[Ue+556>>2];Wf=u[Ue+572>>2];Xf=u[Ue+592>>2];eg=u[Nf+44>>2];Yf=u[Ue+560>>2];mg=u[Nf+36>>2];Vf=u[Ue+576>>2];ng=u[Nf+40>>2];q[Mf+172>>2]=0;q[Mf+156>>2]=0;q[Mf+140>>2]=0;u[Mf+152>>2]=x(x(Yf*mg)+x(Vf*ng))+x(Xf*eg);u[Mf+148>>2]=x(x(ig*mg)+x(Wf*ng))+x(gg*eg);u[Mf+136>>2]=x(x(Yf*cg)+x(Vf*dg))+x(Xf*bg);u[Mf+132>>2]=x(x(ig*cg)+x(Wf*dg))+x(gg*bg);u[Mf+168>>2]=Sf+x(x(x(mg*Zf)+x(ng*fg))+x(eg*lg));u[Mf+164>>2]=Rf+x(x(x(cg*Zf)+x(dg*fg))+x(bg*lg));q[Mf+124>>2]=0;u[Mf+144>>2]=x(x(jg*mg)+x(kg*ng))+x(hg*eg);u[Mf+128>>2]=x(x(jg*cg)+x(kg*dg))+x(hg*bg);u[Mf+120>>2]=x(x(ag*Yf)+x(_f*Vf))+x($f*Xf);u[Mf+116>>2]=x(x(ag*ig)+x(_f*Wf))+x($f*gg);u[Mf+112>>2]=x(x(jg*ag)+x(kg*_f))+x(hg*$f);u[Mf+160>>2]=Tf+x(x(x(ag*Zf)+x(_f*fg))+x($f*lg));c:{if(Pf){Nf=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Nf>>2]+64>>2]](Nf,Mf+112|0,og);Nf=q[Ue+32>>2];Tf=u[Nf+52>>2];Rf=u[Nf+56>>2];Sf=u[Nf+60>>2];hg=u[Ue+672>>2];jg=u[Ue+664>>2];kg=u[Ue+668>>2];$f=u[Nf+12>>2];ag=u[Nf+4>>2];_f=u[Nf+8>>2];bg=u[Nf+28>>2];cg=u[Nf+20>>2];dg=u[Nf+24>>2];lg=u[Ue+648>>2];Zf=u[Ue+616>>2];fg=u[Ue+632>>2];gg=u[Ue+652>>2];ig=u[Ue+620>>2];Wf=u[Ue+636>>2];Xf=u[Ue+656>>2];eg=u[Nf+44>>2];Yf=u[Ue+624>>2];mg=u[Nf+36>>2];Vf=u[Ue+640>>2];ng=u[Nf+40>>2];q[Mf+172>>2]=0;q[Mf+156>>2]=0;q[Mf+140>>2]=0;q[Mf+124>>2]=0;u[Mf+152>>2]=x(x(Yf*mg)+x(Vf*ng))+x(Xf*eg);u[Mf+148>>2]=x(x(ig*mg)+x(Wf*ng))+x(gg*eg);u[Mf+144>>2]=x(x(Zf*mg)+x(fg*ng))+x(lg*eg);u[Mf+136>>2]=x(x(Yf*cg)+x(Vf*dg))+x(Xf*bg);u[Mf+132>>2]=x(x(ig*cg)+x(Wf*dg))+x(gg*bg);u[Mf+128>>2]=x(x(Zf*cg)+x(fg*dg))+x(lg*bg);u[Mf+120>>2]=x(x(ag*Yf)+x(_f*Vf))+x($f*Xf);u[Mf+116>>2]=x(x(ag*ig)+x(_f*Wf))+x($f*gg);u[Mf+112>>2]=x(x(Zf*ag)+x(fg*_f))+x(lg*$f);u[Mf+168>>2]=Sf+x(x(x(mg*jg)+x(ng*kg))+x(eg*hg));u[Mf+164>>2]=Rf+x(x(x(cg*jg)+x(dg*kg))+x(bg*hg));u[Mf+160>>2]=Tf+x(x(x(ag*jg)+x(_f*kg))+x($f*hg));Nf=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Nf>>2]+64>>2]](Nf,Mf+112|0,og);break c}Nf=q[Ue+32>>2];Tf=u[Nf+52>>2];Rf=u[Nf+56>>2];Sf=u[Nf+60>>2];hg=u[Ue+672>>2];jg=u[Ue+664>>2];kg=u[Ue+668>>2];$f=u[Nf+12>>2];ag=u[Nf+4>>2];_f=u[Nf+8>>2];bg=u[Nf+28>>2];cg=u[Nf+20>>2];dg=u[Nf+24>>2];lg=u[Ue+648>>2];Zf=u[Ue+616>>2];fg=u[Ue+632>>2];gg=u[Ue+652>>2];ig=u[Ue+620>>2];Wf=u[Ue+636>>2];Xf=u[Ue+656>>2];eg=u[Nf+44>>2];Yf=u[Ue+624>>2];mg=u[Nf+36>>2];Vf=u[Ue+640>>2];ng=u[Nf+40>>2];q[Mf+172>>2]=0;q[Mf+156>>2]=0;q[Mf+140>>2]=0;q[Mf+124>>2]=0;u[Mf+152>>2]=x(x(Yf*mg)+x(Vf*ng))+x(Xf*eg);u[Mf+148>>2]=x(x(ig*mg)+x(Wf*ng))+x(gg*eg);u[Mf+144>>2]=x(x(Zf*mg)+x(fg*ng))+x(lg*eg);u[Mf+136>>2]=x(x(Yf*cg)+x(Vf*dg))+x(Xf*bg);u[Mf+132>>2]=x(x(ig*cg)+x(Wf*dg))+x(gg*bg);u[Mf+128>>2]=x(x(Zf*cg)+x(fg*dg))+x(lg*bg);u[Mf+120>>2]=x(x(ag*Yf)+x(_f*Vf))+x($f*Xf);u[Mf+116>>2]=x(x(ag*ig)+x(_f*Wf))+x($f*gg);u[Mf+112>>2]=x(x(Zf*ag)+x(fg*_f))+x(lg*$f);u[Mf+168>>2]=Sf+x(x(x(mg*jg)+x(ng*kg))+x(eg*hg));u[Mf+164>>2]=Rf+x(x(x(cg*jg)+x(dg*kg))+x(bg*hg));u[Mf+160>>2]=Tf+x(x(x(ag*jg)+x(_f*kg))+x($f*hg));}Nf=Ue+688|0;Tf=pc(Nf);Rf=qc(Nf);if(!qg|Tf==Rf){break a}Sf=u[Ue+692>>2];q[Mf+96>>2]=q[Mf+120>>2];q[Mf+100>>2]=q[Mf+136>>2];q[Mf+108>>2]=0;q[Mf+104>>2]=q[Mf+152>>2];q[Mf+80>>2]=q[Mf+112>>2];q[Mf+84>>2]=q[Mf+128>>2];q[Mf+92>>2]=0;q[Mf+88>>2]=q[Mf+144>>2];Ue=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+72>>2]=0;q[Mf+76>>2]=0;q[Mf+64>>2]=0;q[Mf+68>>2]=0;a=Sf>x(0);n[q[q[Ue>>2]+68>>2]](Ue,Mf+160|0,Mf+96|0,Mf+80|0,og,og,a?Tf:x(0),a?Rf:x(6.2831854820251465),Mf- -64|0,a,x(10));break a;case 1:Nf=q[Ue+28>>2];Tf=u[Nf+52>>2];$f=u[Nf+12>>2];ag=u[Nf+4>>2];_f=u[Nf+8>>2];hg=u[Ue+332>>2];jg=u[Ue+300>>2];kg=u[Ue+316>>2];Rf=u[Nf+56>>2];Sf=u[Nf+60>>2];lg=u[Ue+356>>2];Zf=u[Ue+348>>2];fg=u[Ue+352>>2];bg=u[Nf+28>>2];cg=u[Nf+20>>2];dg=u[Nf+24>>2];gg=u[Ue+336>>2];ig=u[Ue+304>>2];Wf=u[Ue+320>>2];Xf=u[Ue+340>>2];eg=u[Nf+44>>2];Yf=u[Ue+308>>2];mg=u[Nf+36>>2];Vf=u[Ue+324>>2];ng=u[Nf+40>>2];q[Mf+172>>2]=0;q[Mf+156>>2]=0;q[Mf+140>>2]=0;u[Mf+152>>2]=x(x(Yf*mg)+x(Vf*ng))+x(Xf*eg);u[Mf+148>>2]=x(x(ig*mg)+x(Wf*ng))+x(gg*eg);u[Mf+136>>2]=x(x(Yf*cg)+x(Vf*dg))+x(Xf*bg);u[Mf+132>>2]=x(x(ig*cg)+x(Wf*dg))+x(gg*bg);u[Mf+168>>2]=Sf+x(x(x(mg*Zf)+x(ng*fg))+x(eg*lg));u[Mf+164>>2]=Rf+x(x(x(cg*Zf)+x(dg*fg))+x(bg*lg));q[Mf+124>>2]=0;u[Mf+144>>2]=x(x(jg*mg)+x(kg*ng))+x(hg*eg);u[Mf+128>>2]=x(x(jg*cg)+x(kg*dg))+x(hg*bg);u[Mf+120>>2]=x(x(ag*Yf)+x(_f*Vf))+x($f*Xf);u[Mf+116>>2]=x(x(ag*ig)+x(_f*Wf))+x($f*gg);u[Mf+112>>2]=x(x(jg*ag)+x(kg*_f))+x(hg*$f);u[Mf+160>>2]=Tf+x(x(x(ag*Zf)+x(_f*fg))+x($f*lg));d:{if(Pf){Nf=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Nf>>2]+64>>2]](Nf,Mf+112|0,og);Nf=q[Ue+32>>2];Tf=u[Nf+52>>2];Rf=u[Nf+56>>2];Sf=u[Nf+60>>2];hg=u[Ue+420>>2];jg=u[Ue+412>>2];kg=u[Ue+416>>2];$f=u[Nf+12>>2];ag=u[Nf+4>>2];_f=u[Nf+8>>2];bg=u[Nf+28>>2];cg=u[Nf+20>>2];dg=u[Nf+24>>2];lg=u[Ue+396>>2];Zf=u[Ue+364>>2];fg=u[Ue+380>>2];gg=u[Ue+400>>2];ig=u[Ue+368>>2];Wf=u[Ue+384>>2];Xf=u[Ue+404>>2];eg=u[Nf+44>>2];Yf=u[Ue+372>>2];mg=u[Nf+36>>2];Vf=u[Ue+388>>2];ng=u[Nf+40>>2];q[Mf+172>>2]=0;q[Mf+156>>2]=0;q[Mf+140>>2]=0;q[Mf+124>>2]=0;u[Mf+152>>2]=x(x(Yf*mg)+x(Vf*ng))+x(Xf*eg);u[Mf+148>>2]=x(x(ig*mg)+x(Wf*ng))+x(gg*eg);u[Mf+144>>2]=x(x(Zf*mg)+x(fg*ng))+x(lg*eg);u[Mf+136>>2]=x(x(Yf*cg)+x(Vf*dg))+x(Xf*bg);u[Mf+132>>2]=x(x(ig*cg)+x(Wf*dg))+x(gg*bg);u[Mf+128>>2]=x(x(Zf*cg)+x(fg*dg))+x(lg*bg);u[Mf+120>>2]=x(x(ag*Yf)+x(_f*Vf))+x($f*Xf);u[Mf+116>>2]=x(x(ag*ig)+x(_f*Wf))+x($f*gg);u[Mf+112>>2]=x(x(Zf*ag)+x(fg*_f))+x(lg*$f);u[Mf+168>>2]=Sf+x(x(x(mg*jg)+x(ng*kg))+x(eg*hg));u[Mf+164>>2]=Rf+x(x(x(cg*jg)+x(dg*kg))+x(bg*hg));u[Mf+160>>2]=Tf+x(x(x(ag*jg)+x(_f*kg))+x($f*hg));Nf=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Nf>>2]+64>>2]](Nf,Mf+112|0,og);break d}Nf=q[Ue+32>>2];Tf=u[Nf+52>>2];Rf=u[Nf+56>>2];Sf=u[Nf+60>>2];hg=u[Ue+420>>2];jg=u[Ue+412>>2];kg=u[Ue+416>>2];$f=u[Nf+12>>2];ag=u[Nf+4>>2];_f=u[Nf+8>>2];bg=u[Nf+28>>2];cg=u[Nf+20>>2];dg=u[Nf+24>>2];lg=u[Ue+396>>2];Zf=u[Ue+364>>2];fg=u[Ue+380>>2];gg=u[Ue+400>>2];ig=u[Ue+368>>2];Wf=u[Ue+384>>2];Xf=u[Ue+404>>2];eg=u[Nf+44>>2];Yf=u[Ue+372>>2];mg=u[Nf+36>>2];Vf=u[Ue+388>>2];ng=u[Nf+40>>2];q[Mf+172>>2]=0;q[Mf+156>>2]=0;q[Mf+140>>2]=0;q[Mf+124>>2]=0;u[Mf+152>>2]=x(x(Yf*mg)+x(Vf*ng))+x(Xf*eg);u[Mf+148>>2]=x(x(ig*mg)+x(Wf*ng))+x(gg*eg);u[Mf+144>>2]=x(x(Zf*mg)+x(fg*ng))+x(lg*eg);u[Mf+136>>2]=x(x(Yf*cg)+x(Vf*dg))+x(Xf*bg);u[Mf+132>>2]=x(x(ig*cg)+x(Wf*dg))+x(gg*bg);u[Mf+128>>2]=x(x(Zf*cg)+x(fg*dg))+x(lg*bg);u[Mf+120>>2]=x(x(ag*Yf)+x(_f*Vf))+x($f*Xf);u[Mf+116>>2]=x(x(ag*ig)+x(_f*Wf))+x($f*gg);u[Mf+112>>2]=x(x(Zf*ag)+x(fg*_f))+x(lg*$f);u[Mf+168>>2]=Sf+x(x(x(mg*jg)+x(ng*kg))+x(eg*hg));u[Mf+164>>2]=Rf+x(x(x(cg*jg)+x(dg*kg))+x(bg*hg));u[Mf+160>>2]=Tf+x(x(x(ag*jg)+x(_f*kg))+x($f*hg));}if(!qg){break a}xf(Mf+96|0,Ue,x(6.0868353843688965),og);q[Mf+108>>2]=0;Tf=u[Mf+96>>2];Rf=u[Mf+100>>2];Sf=u[Mf+104>>2];u[Mf+104>>2]=x(x(x(Tf*u[Mf+144>>2])+x(Rf*u[Mf+148>>2]))+x(Sf*u[Mf+152>>2]))+u[Mf+168>>2];u[Mf+100>>2]=x(x(x(Tf*u[Mf+128>>2])+x(Rf*u[Mf+132>>2]))+x(Sf*u[Mf+136>>2]))+u[Mf+164>>2];u[Mf+96>>2]=x(x(x(Tf*u[Mf+112>>2])+x(Rf*u[Mf+116>>2]))+x(Sf*u[Mf+120>>2]))+u[Mf+160>>2];Nf=Mf+160|0;Uf=0;while(1){xf(Mf+80|0,Ue,x(x(x(Uf|0)*x(6.283185005187988))*x(.03125)),og);q[Mf+92>>2]=0;Tf=u[Mf+80>>2];Rf=u[Mf+84>>2];Sf=u[Mf+88>>2];u[Mf+88>>2]=x(x(x(Tf*u[Mf+144>>2])+x(Rf*u[Mf+148>>2]))+x(Sf*u[Mf+152>>2]))+u[Mf+168>>2];u[Mf+84>>2]=x(x(x(Tf*u[Mf+128>>2])+x(Rf*u[Mf+132>>2]))+x(Sf*u[Mf+136>>2]))+u[Mf+164>>2];u[Mf+80>>2]=x(x(x(Tf*u[Mf+112>>2])+x(Rf*u[Mf+116>>2]))+x(Sf*u[Mf+120>>2]))+u[Mf+160>>2];Qf=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+72>>2]=0;q[Mf+76>>2]=0;q[Mf+64>>2]=0;q[Mf+68>>2]=0;n[q[q[Qf>>2]+16>>2]](Qf,Mf+96|0,Mf+80|0,Mf- -64|0);if(!(Uf&3)){Qf=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+72>>2]=0;q[Mf+76>>2]=0;q[Mf+64>>2]=0;q[Mf+68>>2]=0;n[q[q[Qf>>2]+16>>2]](Qf,Nf,Mf+80|0,Mf- -64|0);}Qf=q[Mf+92>>2];q[Mf+104>>2]=q[Mf+88>>2];q[Mf+108>>2]=Qf;Qf=q[Mf+84>>2];q[Mf+96>>2]=q[Mf+80>>2];q[Mf+100>>2]=Qf;Uf=Uf+1|0;if((Uf|0)!=32){continue}break}mg=u[Ue+512>>2];ng=u[Ue+452>>2];Uf=q[Ue+32>>2];e:{if(u[Uf+404>>2]>x(0)){rg=u[Uf+36>>2];Rf=u[Ue+412>>2];Zf=u[Uf+40>>2];Sf=u[Ue+416>>2];hg=x(x(rg*Rf)+x(Zf*Sf));$f=u[Uf+20>>2];ag=u[Uf+24>>2];_f=u[Uf+28>>2];fg=u[Ue+420>>2];jg=x(x(x($f*Rf)+x(ag*Sf))+x(_f*fg));bg=u[Uf+4>>2];cg=u[Uf+8>>2];dg=u[Uf+12>>2];kg=x(x(x(bg*Rf)+x(cg*Sf))+x(dg*fg));gg=u[Ue+372>>2];ig=u[Ue+388>>2];Wf=u[Ue+404>>2];eg=u[Uf+44>>2];lg=x(x(x(gg*rg)+x(ig*Zf))+x(Wf*eg));Xf=u[Ue+368>>2];Yf=u[Ue+384>>2];Vf=u[Ue+400>>2];sg=x(x(x(Xf*rg)+x(Yf*Zf))+x(Vf*eg));Tf=u[Ue+364>>2];Rf=u[Ue+380>>2];Sf=u[Ue+396>>2];tg=x(x(x(Tf*rg)+x(Rf*Zf))+x(Sf*eg));Zf=x(x(x(gg*$f)+x(ig*ag))+x(Wf*_f));rg=x(x(x(Xf*$f)+x(Yf*ag))+x(Vf*_f));_f=x(x(x(Tf*$f)+x(Rf*ag))+x(Sf*_f));Wf=x(x(x(bg*gg)+x(cg*ig))+x(dg*Wf));Xf=x(x(x(bg*Xf)+x(cg*Yf))+x(dg*Vf));Yf=x(x(x(Tf*bg)+x(Rf*cg))+x(Sf*dg));Vf=x(eg*fg);break e}Uf=q[Ue+28>>2];rg=u[Uf+36>>2];Rf=u[Ue+348>>2];Zf=u[Uf+40>>2];Sf=u[Ue+352>>2];hg=x(x(rg*Rf)+x(Zf*Sf));$f=u[Uf+20>>2];ag=u[Uf+24>>2];_f=u[Uf+28>>2];fg=u[Ue+356>>2];jg=x(x(x($f*Rf)+x(ag*Sf))+x(_f*fg));bg=u[Uf+4>>2];cg=u[Uf+8>>2];dg=u[Uf+12>>2];kg=x(x(x(bg*Rf)+x(cg*Sf))+x(dg*fg));gg=u[Ue+308>>2];ig=u[Ue+324>>2];Wf=u[Ue+340>>2];eg=u[Uf+44>>2];lg=x(x(x(gg*rg)+x(ig*Zf))+x(Wf*eg));Xf=u[Ue+304>>2];Yf=u[Ue+320>>2];Vf=u[Ue+336>>2];sg=x(x(x(Xf*rg)+x(Yf*Zf))+x(Vf*eg));Tf=u[Ue+300>>2];Rf=u[Ue+316>>2];Sf=u[Ue+332>>2];tg=x(x(x(Tf*rg)+x(Rf*Zf))+x(Sf*eg));Zf=x(x(x(gg*$f)+x(ig*ag))+x(Wf*_f));rg=x(x(x(Xf*$f)+x(Yf*ag))+x(Vf*_f));_f=x(x(x(Tf*$f)+x(Rf*ag))+x(Sf*_f));Wf=x(x(x(bg*gg)+x(cg*ig))+x(dg*Wf));Xf=x(x(x(bg*Xf)+x(cg*Yf))+x(dg*Vf));Yf=x(x(x(Tf*bg)+x(Rf*cg))+x(Sf*dg));Vf=x(eg*fg);}Tf=u[Uf+52>>2];Rf=u[Uf+56>>2];Sf=u[Uf+60>>2];q[Mf+172>>2]=0;q[Mf+156>>2]=0;u[Mf+152>>2]=lg;u[Mf+148>>2]=sg;u[Mf+144>>2]=tg;q[Mf+140>>2]=0;u[Mf+136>>2]=Zf;u[Mf+132>>2]=rg;u[Mf+128>>2]=_f;q[Mf+124>>2]=0;u[Mf+120>>2]=Wf;u[Mf+116>>2]=Xf;u[Mf+112>>2]=Yf;u[Mf+168>>2]=Sf+x(hg+Vf);u[Mf+164>>2]=jg+Rf;u[Mf+160>>2]=Tf+kg;Ue=q[Nf+12>>2];q[Mf+88>>2]=q[Nf+8>>2];q[Mf+92>>2]=Ue;Ue=q[Nf+4>>2];q[Mf+80>>2]=q[Nf>>2];q[Mf+84>>2]=Ue;q[Mf+76>>2]=0;u[Mf+72>>2]=tg;u[Mf+68>>2]=_f;u[Mf+64>>2]=Yf;q[Mf+60>>2]=0;u[Mf+56>>2]=sg;u[Mf+52>>2]=rg;u[Mf+48>>2]=Xf;a=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+40>>2]=0;q[Mf+44>>2]=0;q[Mf+32>>2]=0;q[Mf+36>>2]=0;n[q[q[a>>2]+68>>2]](a,Mf+80|0,Mf- -64|0,Mf+48|0,og,og,x(x(-mg)-ng),x(ng-mg),Mf+32|0,1,x(10));break a;case 2:case 5:Qf=Ue+1072|0;Nf=q[Qf+4>>2];q[Mf+120>>2]=q[Qf>>2];q[Mf+124>>2]=Nf;pg=Ue+1064|0;Qf=pg;Nf=q[Qf+4>>2];q[Mf+112>>2]=q[Qf>>2];q[Mf+116>>2]=Nf;Qf=Ue+1088|0;Nf=q[Qf+4>>2];q[Mf+136>>2]=q[Qf>>2];q[Mf+140>>2]=Nf;Uf=Ue+1080|0;Qf=Uf;Nf=q[Qf+4>>2];q[Mf+128>>2]=q[Qf>>2];q[Mf+132>>2]=Nf;Qf=Ue+1104|0;Nf=q[Qf+4>>2];q[Mf+152>>2]=q[Qf>>2];q[Mf+156>>2]=Nf;Qf=Ue+1096|0;Of=Qf;Nf=q[Of+4>>2];q[Mf+144>>2]=q[Of>>2];q[Mf+148>>2]=Nf;Of=Ue+1120|0;Nf=q[Of+4>>2];q[Mf+168>>2]=q[Of>>2];q[Mf+172>>2]=Nf;Nf=Ue+1112|0;Of=q[Nf+4>>2];q[Mf+160>>2]=q[Nf>>2];q[Mf+164>>2]=Of;f:{if(Pf){Of=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Of>>2]+64>>2]](Of,Mf+112|0,og);Pf=Ue+1136|0;Of=q[Pf+4>>2];q[Mf+120>>2]=q[Pf>>2];q[Mf+124>>2]=Of;Pf=Ue+1128|0;Of=q[Pf+4>>2];q[Mf+112>>2]=q[Pf>>2];q[Mf+116>>2]=Of;Pf=Ue+1152|0;Of=q[Pf+4>>2];q[Mf+136>>2]=q[Pf>>2];q[Mf+140>>2]=Of;Pf=Ue+1144|0;Of=q[Pf+4>>2];q[Mf+128>>2]=q[Pf>>2];q[Mf+132>>2]=Of;Pf=Ue+1168|0;Of=q[Pf+4>>2];q[Mf+152>>2]=q[Pf>>2];q[Mf+156>>2]=Of;Pf=Ue+1160|0;Of=q[Pf+4>>2];q[Mf+144>>2]=q[Pf>>2];q[Mf+148>>2]=Of;Pf=Ue+1184|0;Of=q[Pf+4>>2];q[Mf+168>>2]=q[Pf>>2];q[Mf+172>>2]=Of;Pf=Ue+1176|0;Of=q[Pf+4>>2];q[Mf+160>>2]=q[Pf>>2];q[Mf+164>>2]=Of;Of=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Of>>2]+64>>2]](Of,Mf+112|0,og);break f}Pf=Ue+1136|0;Of=q[Pf+4>>2];q[Mf+120>>2]=q[Pf>>2];q[Mf+124>>2]=Of;Pf=Ue+1128|0;Of=q[Pf+4>>2];q[Mf+112>>2]=q[Pf>>2];q[Mf+116>>2]=Of;Pf=Ue+1152|0;Of=q[Pf+4>>2];q[Mf+136>>2]=q[Pf>>2];q[Mf+140>>2]=Of;Pf=Ue+1144|0;Of=q[Pf+4>>2];q[Mf+128>>2]=q[Pf>>2];q[Mf+132>>2]=Of;Pf=Ue+1168|0;Of=q[Pf+4>>2];q[Mf+152>>2]=q[Pf>>2];q[Mf+156>>2]=Of;Pf=Ue+1160|0;Of=q[Pf+4>>2];q[Mf+144>>2]=q[Pf>>2];q[Mf+148>>2]=Of;Pf=Ue+1184|0;Of=q[Pf+4>>2];q[Mf+168>>2]=q[Pf>>2];q[Mf+172>>2]=Of;Pf=Ue+1176|0;Of=q[Pf+4>>2];q[Mf+160>>2]=q[Pf>>2];q[Mf+164>>2]=Of;}if(!qg){break a}Of=pg;Pf=q[Of+12>>2];q[Mf+120>>2]=q[Of+8>>2];q[Mf+124>>2]=Pf;Pf=q[Of+4>>2];q[Mf+112>>2]=q[Of>>2];q[Mf+116>>2]=Pf;Of=Uf;Pf=q[Of+12>>2];q[Mf+136>>2]=q[Of+8>>2];q[Mf+140>>2]=Pf;Pf=q[Of+4>>2];q[Mf+128>>2]=q[Of>>2];q[Mf+132>>2]=Pf;Of=Qf;Pf=q[Of+12>>2];q[Mf+152>>2]=q[Of+8>>2];q[Mf+156>>2]=Pf;Pf=q[Of+4>>2];q[Mf+144>>2]=q[Of>>2];q[Mf+148>>2]=Pf;Pf=q[Nf+12>>2];q[Mf+168>>2]=q[Nf+8>>2];q[Mf+172>>2]=Pf;Pf=q[Nf+4>>2];q[Mf+160>>2]=q[Nf>>2];q[Mf+164>>2]=Pf;q[Mf+96>>2]=q[Mf+120>>2];q[Mf+100>>2]=q[Mf+136>>2];q[Mf+108>>2]=0;q[Mf+104>>2]=q[Mf+152>>2];q[Mf+80>>2]=q[Mf+112>>2];q[Mf+84>>2]=q[Mf+128>>2];q[Mf+92>>2]=0;q[Mf+88>>2]=q[Mf+144>>2];Vf=u[Ue+1e3>>2];Tf=u[Ue+996>>2];Rf=u[Ue+936>>2];Sf=u[Ue+932>>2];Of=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+72>>2]=0;q[Mf+76>>2]=0;q[Mf+64>>2]=0;q[Mf+68>>2]=0;qg=Ue+1176|0;n[q[q[Of>>2]+72>>2]](Of,qg,Mf+96|0,Mf+80|0,x(og*x(.8999999761581421)),Sf,Rf,Tf,Vf,Mf- -64|0,x(10),1);q[Mf+92>>2]=0;q[Mf+88>>2]=q[Mf+148>>2];q[Mf+84>>2]=q[Mf+132>>2];q[Mf+80>>2]=q[Mf+116>>2];Rf=u[Ue+1196>>2];Sf=u[Ue+1200>>2];Wf=ga(Sf);Xf=u[Mf+80>>2];Yf=fa(Sf);Vf=u[Mf+84>>2];u[Mf+68>>2]=x(Yf*Vf)-x(Wf*Xf);Tf=ga(Rf);Rf=fa(Rf);Sf=u[Mf+88>>2];u[Mf+72>>2]=x(x(Xf*x(Yf*Tf))+x(Vf*x(Tf*Wf)))+x(Rf*Sf);u[Mf+64>>2]=x(x(Xf*x(Rf*Yf))+x(Vf*x(Rf*Wf)))-x(Tf*Sf);Pf=Ue+1136|0;Of=q[Pf+4>>2];q[Mf+120>>2]=q[Pf>>2];q[Mf+124>>2]=Of;Pf=Ue+1128|0;Of=q[Pf+4>>2];q[Mf+112>>2]=q[Pf>>2];q[Mf+116>>2]=Of;Pf=Ue+1152|0;Of=q[Pf+4>>2];q[Mf+136>>2]=q[Pf>>2];q[Mf+140>>2]=Of;Pf=Ue+1144|0;Of=q[Pf+4>>2];q[Mf+128>>2]=q[Pf>>2];q[Mf+132>>2]=Of;Pf=Ue+1168|0;Of=q[Pf+4>>2];q[Mf+152>>2]=q[Pf>>2];q[Mf+156>>2]=Of;Pf=Ue+1160|0;Of=q[Pf+4>>2];q[Mf+144>>2]=q[Pf>>2];q[Mf+148>>2]=Of;Of=q[qg+4>>2];q[Mf+160>>2]=q[qg>>2];q[Mf+164>>2]=Of;Pf=Ue+1184|0;Of=q[Pf+4>>2];q[Mf+168>>2]=q[Pf>>2];q[Mf+172>>2]=Of;q[Mf+60>>2]=0;u[Mf+56>>2]=-u[Mf+144>>2];u[Mf+52>>2]=-u[Mf+128>>2];u[Mf+48>>2]=-u[Mf+112>>2];Rf=u[Ue+868>>2];Sf=u[Ue+872>>2];g:{if(!!(Rf>Sf)){Of=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+40>>2]=0;q[Mf+44>>2]=0;q[Mf+32>>2]=0;q[Mf+36>>2]=0;n[q[q[Of>>2]+68>>2]](Of,qg,Mf+48|0,Mf- -64|0,og,og,x(-3.1415927410125732),x(3.1415927410125732),Mf+32|0,0,x(10));break g}if(!(Rf<Sf)){break g}Of=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+40>>2]=0;q[Mf+44>>2]=0;q[Mf+32>>2]=0;q[Mf+36>>2]=0;n[q[q[Of>>2]+68>>2]](Of,qg,Mf+48|0,Mf- -64|0,og,og,Rf,Sf,Mf+32|0,1,x(10));}Of=q[pg+12>>2];q[Mf+120>>2]=q[pg+8>>2];q[Mf+124>>2]=Of;Of=q[pg+4>>2];q[Mf+112>>2]=q[pg>>2];q[Mf+116>>2]=Of;pg=q[Uf+12>>2];q[Mf+136>>2]=q[Uf+8>>2];q[Mf+140>>2]=pg;pg=q[Uf+4>>2];q[Mf+128>>2]=q[Uf>>2];q[Mf+132>>2]=pg;Uf=q[Qf+12>>2];q[Mf+152>>2]=q[Qf+8>>2];q[Mf+156>>2]=Uf;Uf=q[Qf+4>>2];q[Mf+144>>2]=q[Qf>>2];q[Mf+148>>2]=Uf;Qf=q[Nf+12>>2];q[Mf+168>>2]=q[Nf+8>>2];q[Mf+172>>2]=Qf;Qf=q[Nf+4>>2];q[Mf+160>>2]=q[Nf>>2];q[Mf+164>>2]=Qf;Nf=q[Ue+692>>2];q[Mf+40>>2]=q[Ue+688>>2];q[Mf+44>>2]=Nf;Nf=q[Ue+684>>2];q[Mf+32>>2]=q[Ue+680>>2];q[Mf+36>>2]=Nf;Nf=q[Ue+708>>2];q[Mf+24>>2]=q[Ue+704>>2];q[Mf+28>>2]=Nf;Nf=q[Ue+700>>2];q[Mf+16>>2]=q[Ue+696>>2];q[Mf+20>>2]=Nf;a=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+8>>2]=0;q[Mf+12>>2]=0;q[Mf>>2]=0;q[Mf+4>>2]=0;n[q[q[a>>2]+80>>2]](a,Mf+32|0,Mf+16|0,Mf+112|0,Mf);break a;case 8:Qf=Ue+1244|0;Nf=q[Qf+4>>2];q[Mf+120>>2]=q[Qf>>2];q[Mf+124>>2]=Nf;pg=Ue+1236|0;Qf=pg;Nf=q[Qf+4>>2];q[Mf+112>>2]=q[Qf>>2];q[Mf+116>>2]=Nf;Qf=Ue+1260|0;Nf=q[Qf+4>>2];q[Mf+136>>2]=q[Qf>>2];q[Mf+140>>2]=Nf;Uf=Ue+1252|0;Qf=Uf;Nf=q[Qf+4>>2];q[Mf+128>>2]=q[Qf>>2];q[Mf+132>>2]=Nf;Qf=Ue+1276|0;Nf=q[Qf+4>>2];q[Mf+152>>2]=q[Qf>>2];q[Mf+156>>2]=Nf;Qf=Ue+1268|0;Of=Qf;Nf=q[Of+4>>2];q[Mf+144>>2]=q[Of>>2];q[Mf+148>>2]=Nf;Of=Ue+1292|0;Nf=q[Of+4>>2];q[Mf+168>>2]=q[Of>>2];q[Mf+172>>2]=Nf;Nf=Ue+1284|0;Of=q[Nf+4>>2];q[Mf+160>>2]=q[Nf>>2];q[Mf+164>>2]=Of;h:{if(Pf){Of=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Of>>2]+64>>2]](Of,Mf+112|0,og);Pf=Ue+1308|0;Of=q[Pf+4>>2];q[Mf+120>>2]=q[Pf>>2];q[Mf+124>>2]=Of;Pf=Ue+1300|0;Of=q[Pf+4>>2];q[Mf+112>>2]=q[Pf>>2];q[Mf+116>>2]=Of;Pf=Ue+1324|0;Of=q[Pf+4>>2];q[Mf+136>>2]=q[Pf>>2];q[Mf+140>>2]=Of;Pf=Ue+1316|0;Of=q[Pf+4>>2];q[Mf+128>>2]=q[Pf>>2];q[Mf+132>>2]=Of;Pf=Ue+1340|0;Of=q[Pf+4>>2];q[Mf+152>>2]=q[Pf>>2];q[Mf+156>>2]=Of;Pf=Ue+1332|0;Of=q[Pf+4>>2];q[Mf+144>>2]=q[Pf>>2];q[Mf+148>>2]=Of;Pf=Ue+1356|0;Of=q[Pf+4>>2];q[Mf+168>>2]=q[Pf>>2];q[Mf+172>>2]=Of;Pf=Ue+1348|0;Of=q[Pf+4>>2];q[Mf+160>>2]=q[Pf>>2];q[Mf+164>>2]=Of;Of=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Of>>2]+64>>2]](Of,Mf+112|0,og);break h}Pf=Ue+1308|0;Of=q[Pf+4>>2];q[Mf+120>>2]=q[Pf>>2];q[Mf+124>>2]=Of;Pf=Ue+1300|0;Of=q[Pf+4>>2];q[Mf+112>>2]=q[Pf>>2];q[Mf+116>>2]=Of;Pf=Ue+1324|0;Of=q[Pf+4>>2];q[Mf+136>>2]=q[Pf>>2];q[Mf+140>>2]=Of;Pf=Ue+1316|0;Of=q[Pf+4>>2];q[Mf+128>>2]=q[Pf>>2];q[Mf+132>>2]=Of;Pf=Ue+1340|0;Of=q[Pf+4>>2];q[Mf+152>>2]=q[Pf>>2];q[Mf+156>>2]=Of;Pf=Ue+1332|0;Of=q[Pf+4>>2];q[Mf+144>>2]=q[Pf>>2];q[Mf+148>>2]=Of;Pf=Ue+1356|0;Of=q[Pf+4>>2];q[Mf+168>>2]=q[Pf>>2];q[Mf+172>>2]=Of;Pf=Ue+1348|0;Of=q[Pf+4>>2];q[Mf+160>>2]=q[Pf>>2];q[Mf+164>>2]=Of;}if(!qg){break a}Of=pg;Pf=q[Of+12>>2];q[Mf+120>>2]=q[Of+8>>2];q[Mf+124>>2]=Pf;Pf=q[Of+4>>2];q[Mf+112>>2]=q[Of>>2];q[Mf+116>>2]=Pf;Of=Uf;Pf=q[Of+12>>2];q[Mf+136>>2]=q[Of+8>>2];q[Mf+140>>2]=Pf;Pf=q[Of+4>>2];q[Mf+128>>2]=q[Of>>2];q[Mf+132>>2]=Pf;Of=Qf;Pf=q[Of+12>>2];q[Mf+152>>2]=q[Of+8>>2];q[Mf+156>>2]=Pf;Pf=q[Of+4>>2];q[Mf+144>>2]=q[Of>>2];q[Mf+148>>2]=Pf;Pf=q[Nf+12>>2];q[Mf+168>>2]=q[Nf+8>>2];q[Mf+172>>2]=Pf;Pf=q[Nf+4>>2];q[Mf+160>>2]=q[Nf>>2];q[Mf+164>>2]=Pf;q[Mf+96>>2]=q[Mf+120>>2];q[Mf+100>>2]=q[Mf+136>>2];q[Mf+108>>2]=0;q[Mf+104>>2]=q[Mf+152>>2];q[Mf+80>>2]=q[Mf+112>>2];q[Mf+84>>2]=q[Mf+128>>2];q[Mf+92>>2]=0;q[Mf+88>>2]=q[Mf+144>>2];Vf=u[Ue+1148>>2];Tf=u[Ue+1144>>2];Rf=u[Ue+1060>>2];Sf=u[Ue+1056>>2];Of=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+72>>2]=0;q[Mf+76>>2]=0;q[Mf+64>>2]=0;q[Mf+68>>2]=0;qg=Ue+1348|0;n[q[q[Of>>2]+72>>2]](Of,qg,Mf+96|0,Mf+80|0,x(og*x(.8999999761581421)),Sf,Rf,Tf,Vf,Mf- -64|0,x(10),1);q[Mf+92>>2]=0;Yf=u[Mf+148>>2];q[Mf+88>>2]=q[Mf+148>>2];Rf=u[Mf+132>>2];q[Mf+84>>2]=q[Mf+132>>2];Sf=u[Mf+116>>2];q[Mf+80>>2]=q[Mf+116>>2];Tf=u[Ue+1372>>2];Wf=ga(Tf);Xf=fa(Tf);Tf=u[Ue+1368>>2];u[Mf+68>>2]=x(Xf*Rf)-x(Wf*Sf);Vf=ga(Tf);Tf=fa(Tf);u[Mf+72>>2]=x(x(x(Xf*Vf)*Sf)+x(x(Vf*Wf)*Rf))+x(Tf*Yf);u[Mf+64>>2]=x(x(x(Tf*Xf)*Sf)+x(x(Tf*Wf)*Rf))-x(Vf*Yf);Pf=Ue+1308|0;Of=q[Pf+4>>2];q[Mf+120>>2]=q[Pf>>2];q[Mf+124>>2]=Of;Pf=Ue+1300|0;Of=q[Pf+4>>2];q[Mf+112>>2]=q[Pf>>2];q[Mf+116>>2]=Of;Pf=Ue+1324|0;Of=q[Pf+4>>2];q[Mf+136>>2]=q[Pf>>2];q[Mf+140>>2]=Of;Pf=Ue+1316|0;Of=q[Pf+4>>2];q[Mf+128>>2]=q[Pf>>2];q[Mf+132>>2]=Of;Pf=Ue+1340|0;Of=q[Pf+4>>2];q[Mf+152>>2]=q[Pf>>2];q[Mf+156>>2]=Of;Pf=Ue+1332|0;Of=q[Pf+4>>2];q[Mf+144>>2]=q[Pf>>2];q[Mf+148>>2]=Of;Pf=Ue+1356|0;Of=q[Pf+4>>2];q[Mf+168>>2]=q[Pf>>2];q[Mf+172>>2]=Of;Of=q[qg+4>>2];q[Mf+160>>2]=q[qg>>2];q[Mf+164>>2]=Of;q[Mf+60>>2]=0;u[Mf+56>>2]=-u[Mf+144>>2];u[Mf+52>>2]=-u[Mf+128>>2];u[Mf+48>>2]=-u[Mf+112>>2];Rf=u[Ue+968>>2];Sf=u[Ue+972>>2];i:{if(!!(Rf>Sf)){Of=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+40>>2]=0;q[Mf+44>>2]=0;q[Mf+32>>2]=0;q[Mf+36>>2]=0;n[q[q[Of>>2]+68>>2]](Of,qg,Mf+48|0,Mf- -64|0,og,og,x(-3.1415927410125732),x(3.1415927410125732),Mf+32|0,0,x(10));break i}if(!(Rf<Sf)){break i}Of=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+40>>2]=0;q[Mf+44>>2]=0;q[Mf+32>>2]=0;q[Mf+36>>2]=0;n[q[q[Of>>2]+68>>2]](Of,qg,Mf+48|0,Mf- -64|0,og,og,Rf,Sf,Mf+32|0,1,x(10));}Of=q[pg+12>>2];q[Mf+120>>2]=q[pg+8>>2];q[Mf+124>>2]=Of;Of=q[pg+4>>2];q[Mf+112>>2]=q[pg>>2];q[Mf+116>>2]=Of;pg=q[Uf+12>>2];q[Mf+136>>2]=q[Uf+8>>2];q[Mf+140>>2]=pg;pg=q[Uf+4>>2];q[Mf+128>>2]=q[Uf>>2];q[Mf+132>>2]=pg;Uf=q[Qf+12>>2];q[Mf+152>>2]=q[Qf+8>>2];q[Mf+156>>2]=Uf;Uf=q[Qf+4>>2];q[Mf+144>>2]=q[Qf>>2];q[Mf+148>>2]=Uf;Qf=q[Nf+12>>2];q[Mf+168>>2]=q[Nf+8>>2];q[Mf+172>>2]=Qf;Qf=q[Nf+4>>2];q[Mf+160>>2]=q[Nf>>2];q[Mf+164>>2]=Qf;Nf=q[Ue+692>>2];q[Mf+40>>2]=q[Ue+688>>2];q[Mf+44>>2]=Nf;Nf=q[Ue+684>>2];q[Mf+32>>2]=q[Ue+680>>2];q[Mf+36>>2]=Nf;Nf=q[Ue+708>>2];q[Mf+24>>2]=q[Ue+704>>2];q[Mf+28>>2]=Nf;Nf=q[Ue+700>>2];q[Mf+16>>2]=q[Ue+696>>2];q[Mf+20>>2]=Nf;a=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+8>>2]=0;q[Mf+12>>2]=0;q[Mf>>2]=0;q[Mf+4>>2]=0;n[q[q[a>>2]+80>>2]](a,Mf+32|0,Mf+16|0,Mf+112|0,Mf);break a;case 4:case 6:case 7:break a;case 3:break b}}Nf=q[Ue+836>>2];q[Mf+120>>2]=q[Ue+832>>2];q[Mf+124>>2]=Nf;Uf=Ue+824|0;Qf=Uf;Nf=q[Qf+4>>2];q[Mf+112>>2]=q[Qf>>2];q[Mf+116>>2]=Nf;Nf=q[Ue+852>>2];q[Mf+136>>2]=q[Ue+848>>2];q[Mf+140>>2]=Nf;Nf=q[Ue+844>>2];q[Mf+128>>2]=q[Ue+840>>2];q[Mf+132>>2]=Nf;Nf=q[Ue+868>>2];q[Mf+152>>2]=q[Ue+864>>2];q[Mf+156>>2]=Nf;Nf=q[Ue+860>>2];q[Mf+144>>2]=q[Ue+856>>2];q[Mf+148>>2]=Nf;Nf=q[Ue+884>>2];q[Mf+168>>2]=q[Ue+880>>2];q[Mf+172>>2]=Nf;Nf=q[Ue+876>>2];q[Mf+160>>2]=q[Ue+872>>2];q[Mf+164>>2]=Nf;j:{if(Pf){Nf=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Nf>>2]+64>>2]](Nf,Mf+112|0,og);Nf=q[Ue+900>>2];q[Mf+120>>2]=q[Ue+896>>2];q[Mf+124>>2]=Nf;Nf=q[Ue+892>>2];q[Mf+112>>2]=q[Ue+888>>2];q[Mf+116>>2]=Nf;Nf=q[Ue+916>>2];q[Mf+136>>2]=q[Ue+912>>2];q[Mf+140>>2]=Nf;Nf=q[Ue+908>>2];q[Mf+128>>2]=q[Ue+904>>2];q[Mf+132>>2]=Nf;Nf=q[Ue+932>>2];q[Mf+152>>2]=q[Ue+928>>2];q[Mf+156>>2]=Nf;Nf=q[Ue+924>>2];q[Mf+144>>2]=q[Ue+920>>2];q[Mf+148>>2]=Nf;Nf=q[Ue+948>>2];q[Mf+168>>2]=q[Ue+944>>2];q[Mf+172>>2]=Nf;Nf=q[Ue+940>>2];q[Mf+160>>2]=q[Ue+936>>2];q[Mf+164>>2]=Nf;Nf=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Nf>>2]+64>>2]](Nf,Mf+112|0,og);break j}Nf=q[Ue+900>>2];q[Mf+120>>2]=q[Ue+896>>2];q[Mf+124>>2]=Nf;Nf=q[Ue+892>>2];q[Mf+112>>2]=q[Ue+888>>2];q[Mf+116>>2]=Nf;Nf=q[Ue+916>>2];q[Mf+136>>2]=q[Ue+912>>2];q[Mf+140>>2]=Nf;Nf=q[Ue+908>>2];q[Mf+128>>2]=q[Ue+904>>2];q[Mf+132>>2]=Nf;Nf=q[Ue+932>>2];q[Mf+152>>2]=q[Ue+928>>2];q[Mf+156>>2]=Nf;Nf=q[Ue+924>>2];q[Mf+144>>2]=q[Ue+920>>2];q[Mf+148>>2]=Nf;Nf=q[Ue+948>>2];q[Mf+168>>2]=q[Ue+944>>2];q[Mf+172>>2]=Nf;Nf=q[Ue+940>>2];q[Mf+160>>2]=q[Ue+936>>2];q[Mf+164>>2]=Nf;}if(!qg){break a}Nf=r[Ue+180|0];Qf=Nf?Uf:Ue+888|0;jg=u[Qf+48>>2];ig=u[Qf+8>>2];Wf=u[Qf+4>>2];Pf=q[Qf+4>>2];kg=u[Qf+52>>2];Vf=u[Qf+24>>2];lg=u[Qf+16>>2];Of=q[Qf+16>>2];Tf=u[Qf+20>>2];pg=q[Qf+20>>2];Zf=u[Qf+56>>2];Rf=u[Qf+40>>2];fg=u[Qf+32>>2];Uf=q[Qf+32>>2];Sf=u[Qf+36>>2];Qf=q[Qf+36>>2];Nf=(Nf?824:888)+Ue|0;gg=u[Nf>>2];Nf=q[Nf>>2];hg=u[Ue+184>>2];q[Mf+108>>2]=0;Xf=x(Rf*x(0));Yf=x(Sf*x(0));u[Mf+104>>2]=Zf+x(Xf+x(Yf+x(hg*fg)));Vf=x(Vf*x(0));Tf=x(Tf*x(0));u[Mf+100>>2]=kg+x(Vf+x(Tf+x(hg*lg)));Rf=x(ig*x(0));Sf=x(Wf*x(0));u[Mf+96>>2]=jg+x(Rf+x(Sf+x(hg*gg)));Wf=u[Ue+188>>2];q[Mf+92>>2]=0;u[Mf+88>>2]=Zf+x(Xf+x(Yf+x(Wf*fg)));u[Mf+84>>2]=kg+x(Vf+x(Tf+x(Wf*lg)));u[Mf+80>>2]=jg+x(Rf+x(Sf+x(Wf*gg)));qg=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+72>>2]=0;q[Mf+76>>2]=0;q[Mf+64>>2]=0;q[Mf+68>>2]=0;n[q[q[qg>>2]+16>>2]](qg,Mf+96|0,Mf+80|0,Mf- -64|0);q[Mf+76>>2]=0;q[Mf+72>>2]=Uf;q[Mf+68>>2]=Of;q[Mf+64>>2]=Nf;q[Mf+60>>2]=0;q[Mf+56>>2]=Qf;q[Mf+52>>2]=pg;q[Mf+48>>2]=Pf;Rf=u[Ue+196>>2];Sf=u[Ue+192>>2];a=n[q[q[a>>2]+20>>2]](a)|0;q[Mf+40>>2]=0;q[Mf+44>>2]=0;q[Mf+32>>2]=0;q[Mf+36>>2]=0;n[q[q[a>>2]+68>>2]](a,Ue+936|0,Mf- -64|0,Mf+48|0,og,og,Sf,Rf,Mf+32|0,1,x(10));}P=Mf+176|0;}function fn(a,Ue){a=a|0;Ue=x(Ue);var ug=0,vg=0,wg=0,xg=0;xg=P-16|0;P=xg;n[q[5253]](2575);vg=q[a+248>>2];if((vg|0)>=1){while(1){ug=q[q[a+256>>2]+(wg<<2)>>2];if(!(r[ug+204|0]&3)){Wn(ug,Ue);tc(ug,Ue,ug+68|0);vg=q[a+248>>2];}wg=wg+1|0;if((wg|0)<(vg|0)){continue}break}}n[q[5254]]();P=xg+16|0;}function gn(a,Ue){a=a|0;Ue=x(Ue);var yg=0,zg=0,Ag=x(0),Bg=0,Cg=0,Dg=0,Eg=x(0),Fg=x(0),Gg=x(0),Hg=0,Ig=0,Jg=x(0),Kg=x(0),Lg=x(0),Mg=x(0);yg=P-80|0;P=yg;n[q[5253]](2517);zg=q[a+248>>2];if((zg|0)>=1){hn(a,q[a+256>>2],zg,Ue);}if(r[a+291|0]){n[q[5253]](2537);zg=q[a+324>>2];if((zg|0)>=1){while(1){Cg=q[q[a+332>>2]+(Ig<<2)>>2];if(q[Cg+844>>2]>=1){zg=q[Cg+840>>2];Dg=q[zg+252>>2]<<30>>31&zg;zg=q[Cg+836>>2];Bg=q[zg+252>>2]<<30>>31&zg;Hg=0;while(1){Ue=x(u[Bg+232>>2]*u[Dg+232>>2]);a:{if(!(Ue>x(0))){break a}zg=w(Hg,208)+Cg|0;Ag=u[zg+136>>2];if(Ag==x(0)){break a}Eg=u[zg+68>>2];Fg=u[zg+72>>2];Gg=u[zg+76>>2];q[yg+60>>2]=0;Gg=x(Ue*x(Ag*x(-Gg)));u[yg+56>>2]=Gg;Fg=x(Ue*x(Ag*x(-Fg)));u[yg+52>>2]=Fg;Ue=x(Ue*x(Ag*x(-Eg)));u[yg+48>>2]=Ue;Ag=u[Bg+52>>2];Eg=u[zg+52>>2];Jg=u[Bg+56>>2];Kg=u[zg+56>>2];Lg=u[Bg+60>>2];Mg=u[zg+60>>2];q[yg+44>>2]=0;u[yg+40>>2]=Mg-Lg;u[yg+36>>2]=Kg-Jg;u[yg+32>>2]=Eg-Ag;Ag=u[Dg+52>>2];Eg=u[zg+36>>2];Jg=u[Dg+56>>2];Kg=u[zg+40>>2];Lg=u[Dg+60>>2];Mg=u[zg+44>>2];q[yg+28>>2]=0;u[yg+24>>2]=Mg-Lg;u[yg+20>>2]=Kg-Jg;u[yg+16>>2]=Eg-Ag;if(Bg){Md(Bg,yg+48|0,yg+32|0);Gg=u[yg+56>>2];Fg=u[yg+52>>2];Ue=u[yg+48>>2];}q[yg+12>>2]=0;u[yg+8>>2]=-Gg;u[yg+4>>2]=-Fg;u[yg>>2]=-Ue;Md(Dg,yg,yg+16|0);}Hg=Hg+1|0;if((Hg|0)<q[Cg+844>>2]){continue}break}zg=q[a+324>>2];}Ig=Ig+1|0;if((Ig|0)<(zg|0)){continue}break}}n[q[5254]]();}n[q[5254]]();P=yg+80|0;}function hn(a,Ue,Ng,Og){var Pg=0,Qg=0,Rg=0,Sg=x(0),Tg=0,Ug=0,Vg=0,Wg=0,Xg=x(0),Yg=0,Zg=x(0);Pg=P-304|0;P=Pg;if((Ng|0)>=1){while(1){Rg=q[(Wg<<2)+Ue>>2];Yg=Rg;q[Rg+268>>2]=1065353216;a:{b:{Ug=q[Rg+220>>2]+ -2|0;if(Ug>>>0>3){break b}switch(Ug-1|0){case 0:case 1:break b;default:break a}}if(r[Rg+204|0]&3){break a}tc(Rg,Og,Pg+240|0);c:{if(!r[a+44|0]){break c}Sg=u[Rg+276>>2];Sg=x(Sg*Sg);if(Sg==x(0)){break c}Zg=Sg;Sg=x(u[Pg+288>>2]-u[Rg+52>>2]);Xg=x(Sg*Sg);Sg=x(u[Pg+292>>2]-u[Rg+56>>2]);Xg=x(Xg+x(Sg*Sg));Sg=x(u[Pg+296>>2]-u[Rg+60>>2]);if(!(Zg<x(Xg+x(Sg*Sg)))){break c}n[q[5253]](2497);d:{if(q[q[Rg+192>>2]+4>>2]<=19){Ug=0;q[5607]=q[5607]+1;Qg=q[a+68>>2];Qg=n[q[q[Qg>>2]+36>>2]](Qg)|0;Vg=q[a+24>>2];q[Pg+140>>2]=-1;q[Pg+132>>2]=1065353216;q[Pg+136>>2]=1;q[Pg+128>>2]=1504;Tg=q[Rg+64>>2];q[Pg+152>>2]=q[Rg+60>>2];q[Pg+156>>2]=Tg;Tg=q[Rg+56>>2];q[Pg+144>>2]=q[Rg+52>>2];q[Pg+148>>2]=Tg;Tg=q[Pg+300>>2];q[Pg+168>>2]=q[Pg+296>>2];q[Pg+172>>2]=Tg;Tg=q[Pg+292>>2];q[Pg+160>>2]=q[Pg+288>>2];q[Pg+164>>2]=Tg;q[Pg+224>>2]=Vg;q[Pg+220>>2]=Qg;q[Pg+216>>2]=0;q[Pg+128>>2]=2820;q[Pg+208>>2]=0;q[Pg+212>>2]=Rg;Qg=q[Rg+272>>2];Aa(Pg+72|0);q[Pg+96>>2]=1065353216;q[Pg+88>>2]=1065353216;q[Pg+92>>2]=1065353216;q[Pg+76>>2]=8;q[Pg+72>>2]=12036;q[Pg+108>>2]=0;q[Pg+112>>2]=0;q[Pg+116>>2]=0;q[Pg+100>>2]=0;q[Pg+104>>2]=0;q[Pg+124>>2]=0;q[Pg+120>>2]=Qg;q[Pg+104>>2]=Qg;q[Pg+216>>2]=q[a+56>>2];Qg=q[Rg+188>>2];q[Pg+136>>2]=q[Qg+4>>2];q[Pg+140>>2]=q[Qg+8>>2];Qg=q[Pg+252>>2];q[Pg+16>>2]=q[Pg+248>>2];q[Pg+20>>2]=Qg;Qg=q[Pg+244>>2];q[Pg+8>>2]=q[Pg+240>>2];q[Pg+12>>2]=Qg;Qg=q[Pg+268>>2];q[Pg+32>>2]=q[Pg+264>>2];q[Pg+36>>2]=Qg;Qg=q[Pg+260>>2];q[Pg+24>>2]=q[Pg+256>>2];q[Pg+28>>2]=Qg;Qg=q[Pg+284>>2];q[Pg+48>>2]=q[Pg+280>>2];q[Pg+52>>2]=Qg;Qg=q[Pg+276>>2];q[Pg+40>>2]=q[Pg+272>>2];q[Pg+44>>2]=Qg;Qg=q[Pg+300>>2];q[Pg+64>>2]=q[Pg+296>>2];q[Pg+68>>2]=Qg;Qg=q[Pg+292>>2];q[Pg+56>>2]=q[Pg+288>>2];q[Pg+60>>2]=Qg;Vg=Rg+4|0;Qg=Vg;Tg=q[Qg+12>>2];q[Pg+16>>2]=q[Qg+8>>2];q[Pg+20>>2]=Tg;Tg=q[Qg+4>>2];q[Pg+8>>2]=q[Qg>>2];q[Pg+12>>2]=Tg;Qg=q[Rg+32>>2];q[Pg+32>>2]=q[Rg+28>>2];q[Pg+36>>2]=Qg;Qg=q[Rg+24>>2];q[Pg+24>>2]=q[Rg+20>>2];q[Pg+28>>2]=Qg;Qg=q[Rg+48>>2];q[Pg+48>>2]=q[Rg+44>>2];q[Pg+52>>2]=Qg;Qg=q[Rg+40>>2];q[Pg+40>>2]=q[Rg+36>>2];q[Pg+44>>2]=Qg;La(a,Pg+72|0,Vg,Pg+8|0,Pg+128|0,x(0));Sg=u[Pg+132>>2];if(!!(Sg<x(1))){u[Yg+268>>2]=Sg;tc(Rg,x(Sg*Og),Pg+240|0);q[Yg+268>>2]=0;Id(Rg,Pg+240|0);Ug=4;}if(Ug){break d}}Ug=0;}n[q[5254]]();if(Ug){break a}}Id(Rg,Pg+240|0);}Wg=Wg+1|0;if((Wg|0)!=(Ng|0)){continue}break}}P=Pg+304|0;}function jn(a,Ue){a=a|0;Ue=x(Ue);var Ng=0,Og=0;Ng=P-16|0;P=Ng;n[q[5253]](2472);kn(a);Og=q[a+248>>2];if((Og|0)>=1){ln(a,q[a+256>>2],Og,Ue);}n[q[5254]]();P=Ng+16|0;}function kn(a){var Ue=0,_g=0,$g=0,ah=0;$g=P-16|0;P=$g;n[q[5253]](2435);Ue=q[a+332>>2];if(q[a+324>>2]>=1){while(1){ah=q[a+24>>2];n[q[q[ah>>2]+16>>2]](ah,q[(_g<<2)+Ue>>2]);Ue=q[a+332>>2];_g=_g+1|0;if((_g|0)<q[a+324>>2]){continue}break}}if(Ue){if(r[a+336|0]){if(Ue){q[6658]=q[6658]+1;n[q[5256]](Ue);}}q[a+332>>2]=0;}q[a+332>>2]=0;q[a+324>>2]=0;q[a+328>>2]=0;o[a+336|0]=1;n[q[5254]]();P=$g+16|0;}function ln(a,bh,ch,dh){var eh=0,fh=0,gh=0,hh=x(0),ih=0,jh=x(0),kh=0,lh=x(0),mh=x(0),nh=x(0),oh=0,ph=x(0),qh=x(0),rh=x(0),sh=x(0),th=x(0),uh=x(0),vh=x(0),wh=0,xh=0,yh=x(0),zh=0,Ah=x(0),Bh=x(0),Ch=x(0),Dh=x(0),Eh=x(0),Fh=x(0);eh=P-512|0;P=eh;if((ch|0)>=1){while(1){gh=q[(wh<<2)+bh>>2];q[gh+268>>2]=1065353216;a:{b:{fh=q[gh+220>>2]+ -2|0;if(fh>>>0>3){break b}switch(fh-1|0){case 0:case 1:break b;default:break a}}if(r[gh+204|0]&3){break a}tc(gh,dh,eh+448|0);if(!r[a+44|0]){break a}hh=u[gh+276>>2];hh=x(hh*hh);if(hh==x(0)){break a}lh=hh;hh=x(u[eh+496>>2]-u[gh+52>>2]);jh=x(hh*hh);hh=x(u[eh+500>>2]-u[gh+56>>2]);jh=x(jh+x(hh*hh));hh=x(u[eh+504>>2]-u[gh+60>>2]);if(!(lh<x(jh+x(hh*hh)))){break a}n[q[5253]](2408);if(q[q[gh+192>>2]+4>>2]<=19){q[5607]=q[5607]+1;fh=q[a+68>>2];fh=n[q[q[fh>>2]+36>>2]](fh)|0;ih=q[a+24>>2];q[eh+348>>2]=-1;q[eh+340>>2]=1065353216;q[eh+344>>2]=1;q[eh+336>>2]=1504;kh=q[gh+64>>2];q[eh+360>>2]=q[gh+60>>2];q[eh+364>>2]=kh;kh=q[gh+56>>2];q[eh+352>>2]=q[gh+52>>2];q[eh+356>>2]=kh;kh=q[eh+508>>2];q[eh+376>>2]=q[eh+504>>2];q[eh+380>>2]=kh;kh=q[eh+500>>2];q[eh+368>>2]=q[eh+496>>2];q[eh+372>>2]=kh;q[eh+432>>2]=ih;q[eh+428>>2]=fh;q[eh+424>>2]=0;q[eh+336>>2]=2820;q[eh+416>>2]=0;q[eh+420>>2]=gh;fh=q[gh+272>>2];Aa(eh+280|0);q[eh+304>>2]=1065353216;q[eh+296>>2]=1065353216;q[eh+300>>2]=1065353216;q[eh+284>>2]=8;q[eh+280>>2]=12036;q[eh+316>>2]=0;q[eh+320>>2]=0;q[eh+324>>2]=0;q[eh+308>>2]=0;q[eh+312>>2]=0;q[eh+332>>2]=0;q[eh+328>>2]=fh;q[eh+312>>2]=fh;q[eh+424>>2]=q[a+56>>2];fh=q[gh+188>>2];q[eh+344>>2]=q[fh+4>>2];q[eh+348>>2]=q[fh+8>>2];fh=q[eh+460>>2];q[eh+224>>2]=q[eh+456>>2];q[eh+228>>2]=fh;fh=q[eh+452>>2];q[eh+216>>2]=q[eh+448>>2];q[eh+220>>2]=fh;fh=q[eh+476>>2];q[eh+240>>2]=q[eh+472>>2];q[eh+244>>2]=fh;fh=q[eh+468>>2];q[eh+232>>2]=q[eh+464>>2];q[eh+236>>2]=fh;fh=q[eh+492>>2];q[eh+256>>2]=q[eh+488>>2];q[eh+260>>2]=fh;fh=q[eh+484>>2];q[eh+248>>2]=q[eh+480>>2];q[eh+252>>2]=fh;fh=q[eh+508>>2];q[eh+272>>2]=q[eh+504>>2];q[eh+276>>2]=fh;fh=q[eh+500>>2];q[eh+264>>2]=q[eh+496>>2];q[eh+268>>2]=fh;fh=gh+4|0;ih=q[fh+12>>2];q[eh+224>>2]=q[fh+8>>2];q[eh+228>>2]=ih;ih=q[fh+4>>2];q[eh+216>>2]=q[fh>>2];q[eh+220>>2]=ih;ih=q[gh+32>>2];q[eh+240>>2]=q[gh+28>>2];q[eh+244>>2]=ih;ih=q[gh+24>>2];q[eh+232>>2]=q[gh+20>>2];q[eh+236>>2]=ih;ih=q[gh+48>>2];q[eh+256>>2]=q[gh+44>>2];q[eh+260>>2]=ih;ih=q[gh+40>>2];q[eh+248>>2]=q[gh+36>>2];q[eh+252>>2]=ih;La(a,eh+280|0,fh,eh+216|0,eh+336|0,x(0));hh=u[eh+340>>2];if(!!(hh<x(1))){ph=u[gh+60>>2];mh=u[gh+56>>2];nh=u[gh+52>>2];lh=u[eh+392>>2];qh=u[eh+504>>2];rh=u[eh+388>>2];sh=u[eh+500>>2];th=u[eh+384>>2];uh=u[eh+496>>2];fh=q[a+24>>2];ih=n[q[q[fh>>2]+12>>2]](fh,gh,q[eh+416>>2])|0;vh=x(hh*x(sh-mh));mh=x(hh*x(uh-nh));jh=lh;lh=x(hh*x(qh-ph));Dh=x(x(x(vh*x(-rh))-x(th*mh))-x(jh*lh));fh=q[a+324>>2];c:{if((fh|0)!=q[a+328>>2]){break c}kh=fh?fh<<1:1;if((fh|0)>=(kh|0)){break c}oh=0;xh=0;if(kh){q[6657]=q[6657]+1;xh=n[q[5255]](kh<<2,16)|0;fh=q[a+324>>2];}if((fh|0)>=1){while(1){zh=oh<<2;q[zh+xh>>2]=q[q[a+332>>2]+zh>>2];oh=oh+1|0;if((fh|0)!=(oh|0)){continue}break}}oh=q[a+332>>2];if(oh){if(r[a+336|0]){if(oh){q[6658]=q[6658]+1;n[q[5256]](oh);}fh=q[a+324>>2];}q[a+332>>2]=0;}q[a+332>>2]=xh;o[a+336|0]=1;q[a+328>>2]=kh;}q[q[a+332>>2]+(fh<<2)>>2]=ih;q[a+324>>2]=fh+1;fh=q[eh+416>>2];qh=u[fh+20>>2];rh=u[fh+36>>2];sh=u[fh+40>>2];th=u[fh+8>>2];uh=u[fh+24>>2];hh=u[fh+60>>2];Eh=u[fh+56>>2];ph=u[fh+52>>2];Ah=u[fh+44>>2];yh=u[gh+60>>2];Bh=u[fh+12>>2];nh=u[gh+52>>2];jh=u[fh+28>>2];Fh=u[gh+56>>2];Ch=u[fh+4>>2];q[eh+16>>2]=0;q[eh+20>>2]=0;q[eh+36>>2]=0;q[eh+8>>2]=0;q[eh+12>>2]=0;mh=x(mh+nh);nh=x(vh+Fh);lh=x(lh+yh);yh=x(x(x(Bh*mh)+x(jh*nh))+x(Ah*lh));vh=jh;jh=x(-Eh);u[eh+32>>2]=yh+x(x(x(vh*jh)-x(Bh*ph))-x(Ah*hh));u[eh+28>>2]=x(x(x(mh*th)+x(nh*uh))+x(lh*sh))+x(x(x(uh*jh)-x(th*ph))-x(sh*hh));u[eh+24>>2]=x(x(x(mh*Ch)+x(nh*qh))+x(lh*rh))+x(x(x(qh*jh)-x(Ch*ph))-x(rh*hh));fh=q[eh+388>>2];q[eh+72>>2]=q[eh+384>>2];q[eh+76>>2]=fh;fh=q[eh+396>>2];q[eh+80>>2]=q[eh+392>>2];q[eh+84>>2]=fh;u[eh+88>>2]=Dh;q[eh+100>>2]=0;q[eh+104>>2]=0;q[eh+92>>2]=0;q[eh+96>>2]=0;q[eh+172>>2]=0;q[eh+164>>2]=0;q[eh+168>>2]=0;q[eh+156>>2]=0;q[eh+160>>2]=0;q[eh+148>>2]=0;q[eh+152>>2]=0;q[eh+140>>2]=0;q[eh+144>>2]=0;q[eh+132>>2]=0;q[eh+136>>2]=0;q[eh+124>>2]=0;q[eh+128>>2]=0;fh=w(kf(ih,eh+8|0),208)+ih|0;q[fh+100>>2]=0;u[fh+88>>2]=A(x(B(x(u[gh+228>>2]*u[q[eh+416>>2]+228>>2]),x(-10))),x(10));ih=q[gh+56>>2];q[fh+52>>2]=q[gh+52>>2];q[fh+56>>2]=ih;ih=q[gh+64>>2];q[fh+60>>2]=q[gh+60>>2];q[fh+64>>2]=ih;q[fh+48>>2]=0;u[fh+44>>2]=lh;u[fh+40>>2]=nh;u[fh+36>>2]=mh;}}n[q[5254]]();}wh=wh+1|0;if((wh|0)!=(ch|0)){continue}break}}P=eh+512|0;}function mn(a){a=a|0;var bh=0,ch=0,dh=0,Gh=0,Hh=0,Ih=0,Jh=0,Kh=0,Lh=0;Lh=P-16|0;P=Lh;n[q[5253]](2381);bh=q[a+220>>2];n[q[q[bh>>2]+8>>2]](bh,a,q[a+24>>2]);Jh=q[a+324>>2];if((Jh|0)>=1){Kh=q[a+332>>2];while(1){bh=q[Kh+(Ih<<2)>>2];ch=q[bh+836>>2];a:{if(!ch){break a}bh=q[bh+840>>2];if(!bh|q[ch+204>>2]&3|r[bh+204|0]&3){break a}bh=q[bh+208>>2];dh=q[q[a+220>>2]+16>>2];Gh=q[ch+208>>2];Hh=dh+(Gh<<3)|0;ch=q[Hh>>2];if((ch|0)!=(Gh|0)){while(1){ch=dh+(ch<<3)|0;q[Hh>>2]=q[ch>>2];Gh=q[ch>>2];Hh=dh+(Gh<<3)|0;ch=q[Hh>>2];if((ch|0)!=(Gh|0)){continue}break}}Hh=dh+(bh<<3)|0;ch=q[Hh>>2];if((ch|0)!=(bh|0)){while(1){bh=dh+(ch<<3)|0;q[Hh>>2]=q[bh>>2];bh=q[bh>>2];Hh=dh+(bh<<3)|0;ch=q[Hh>>2];if((bh|0)!=(ch|0)){continue}break}}if((bh|0)==(Gh|0)){break a}ch=dh+(Gh<<3)|0;q[ch>>2]=bh;bh=dh+(bh<<3)|0;q[bh+4>>2]=q[bh+4>>2]+q[ch+4>>2];}Ih=Ih+1|0;if((Ih|0)<(Jh|0)){continue}break}}Jh=q[a+228>>2];if((Jh|0)>=1){Kh=q[a+236>>2];Hh=0;while(1){bh=q[Kh+(Hh<<2)>>2];b:{if(!r[bh+20|0]){break b}ch=q[bh+28>>2];if(r[ch+204|0]&3){break b}bh=q[bh+32>>2];if(r[bh+204|0]&3){break b}bh=q[bh+208>>2];dh=q[q[a+220>>2]+16>>2];Gh=q[ch+208>>2];ch=dh+(Gh<<3)|0;Ih=q[ch>>2];if((Ih|0)!=(Gh|0)){while(1){Gh=ch;ch=dh+(Ih<<3)|0;q[Gh>>2]=q[ch>>2];Gh=q[ch>>2];ch=dh+(Gh<<3)|0;Ih=q[ch>>2];if((Ih|0)!=(Gh|0)){continue}break}}ch=dh+(bh<<3)|0;Ih=q[ch>>2];if((Ih|0)!=(bh|0)){while(1){bh=dh+(Ih<<3)|0;q[ch>>2]=q[bh>>2];bh=q[bh>>2];ch=dh+(bh<<3)|0;Ih=q[ch>>2];if((bh|0)!=(Ih|0)){continue}break}}if((bh|0)==(Gh|0)){break b}ch=dh+(Gh<<3)|0;q[ch>>2]=bh;bh=dh+(bh<<3)|0;q[bh+4>>2]=q[bh+4>>2]+q[ch+4>>2];}Hh=Hh+1|0;if((Jh|0)!=(Hh|0)){continue}break}}bh=q[a+220>>2];n[q[q[bh>>2]+12>>2]](bh,a);n[q[5254]]();P=Lh+16|0;}function nn(a){a=a|0;var Mh=0;Mh=P-16|0;q[Mh+12>>2]=a;a=q[Mh+12>>2];if(+u[a+16>>2]==0){a=+u[a+20>>2]==0;}else {a=0;}return a|0}function on(a,Nh,Oh,Ph,Qh){q[a+20>>2]=Qh;q[a+16>>2]=Ph;q[a+12>>2]=Oh;q[a+4>>2]=Nh;Nh=q[a+32>>2];if((Nh|0)<=-1){if(q[a+36>>2]<=-1){Oh=q[a+40>>2];if(Oh){if(r[a+44|0]){if(Oh){q[6658]=q[6658]+1;n[q[5256]](Oh);}}q[a+40>>2]=0;}q[a+36>>2]=0;q[a+40>>2]=0;o[a+44|0]=1;}while(1){q[q[a+40>>2]+(Nh<<2)>>2]=0;Oh=Nh+1|0;Ph=Oh>>>0>=Nh>>>0;Nh=Oh;if(Ph){continue}break}}q[a+32>>2]=0;Nh=q[a+52>>2];if((Nh|0)<=-1){if(q[a+56>>2]<=-1){Oh=q[a+60>>2];if(Oh){if(r[a- -64|0]){if(Oh){q[6658]=q[6658]+1;n[q[5256]](Oh);}}q[a+60>>2]=0;}q[a+56>>2]=0;q[a+60>>2]=0;o[a- -64|0]=1;}while(1){q[q[a+60>>2]+(Nh<<2)>>2]=0;Oh=Nh+1|0;Ph=Oh>>>0>=Nh>>>0;Nh=Oh;if(Ph){continue}break}}q[a+52>>2]=0;Nh=q[a+72>>2];if((Nh|0)<=-1){if(q[a+76>>2]<=-1){Oh=q[a+80>>2];if(Oh){if(r[a+84|0]){if(Oh){q[6658]=q[6658]+1;n[q[5256]](Oh);}}q[a+80>>2]=0;}q[a+76>>2]=0;q[a+80>>2]=0;o[a+84|0]=1;}while(1){q[q[a+80>>2]+(Nh<<2)>>2]=0;Oh=Nh+1|0;Ph=Oh>>>0>=Nh>>>0;Nh=Oh;if(Ph){continue}break}}q[a+72>>2]=0;}function pn(a,Nh){a=a|0;Nh=Nh|0;var Oh=0,Ph=0,Qh=0,Rh=0,Sh=0,Th=0,Uh=0,Vh=0,Wh=0,Xh=0,Yh=0;Rh=P-16|0;P=Rh;n[q[5253]](2364);Ph=q[a+196>>2];Qh=q[a+228>>2];if((Ph|0)<(Qh|0)){if(q[a+200>>2]<(Qh|0)){if(Qh){q[6657]=q[6657]+1;Th=n[q[5255]](Qh<<2,16)|0;Oh=q[a+196>>2];}else {Oh=Ph;}if((Oh|0)>=1){while(1){Uh=Sh<<2;q[Uh+Th>>2]=q[q[a+204>>2]+Uh>>2];Sh=Sh+1|0;if((Oh|0)!=(Sh|0)){continue}break}}Oh=q[a+204>>2];if(Oh){if(r[a+208|0]){if(Oh){q[6658]=q[6658]+1;n[q[5256]](Oh);}}q[a+204>>2]=0;}q[a+204>>2]=Th;q[a+200>>2]=Qh;o[a+208|0]=1;}while(1){q[q[a+204>>2]+(Ph<<2)>>2]=0;Ph=Ph+1|0;if((Qh|0)!=(Ph|0)){continue}break}}Oh=a+192|0;q[a+196>>2]=Qh;Ph=0;while(1){if((Ph|0)<(n[q[q[a>>2]+104>>2]](a)|0)){Qh=Ph<<2;q[Qh+q[a+204>>2]>>2]=q[Qh+q[a+236>>2]>>2];Ph=Ph+1|0;continue}break}Ph=q[a+196>>2];if((Ph|0)>=2){Pf(Oh,Rh,0,Ph+ -1|0);}Oh=0;a:{if(!n[q[q[a>>2]+104>>2]](a)){break a}Oh=q[a+204>>2];}on(q[a+212>>2],Nh,Oh,q[a+196>>2],n[q[q[a>>2]+20>>2]](a)|0);Oh=q[a+216>>2];Ph=q[a+24>>2];Wh=Oh,Xh=q[a+8>>2],Yh=n[q[q[Ph>>2]+36>>2]](Ph)|0,Vh=q[q[Oh>>2]+8>>2],n[Vh](Wh|0,Xh|0,Yh|0);bj(q[a+220>>2],q[a+24>>2],a,q[a+212>>2]);Of(q[a+212>>2]);Oh=q[a+216>>2];n[q[q[Oh>>2]+16>>2]](Oh,Nh,q[a+72>>2]);n[q[5254]]();P=Rh+16|0;}function qn(a,Nh){a=a|0;Nh=Nh|0;var Zh=0,_h=0,$h=0,ai=0;Zh=q[a+296>>2];a:{if((Zh|0)<1){break a}$h=q[a+304>>2];while(1){ai=(_h<<2)+$h|0;if(q[ai>>2]!=(Nh|0)){_h=_h+1|0;if((Zh|0)!=(_h|0)){continue}break a}break}if((Zh|0)<=(_h|0)){break a}Zh=Zh+ -1|0;_h=Zh<<2;q[ai>>2]=q[_h+$h>>2];q[_h+q[a+304>>2]>>2]=Nh;q[a+296>>2]=Zh;}}function rn(a,Nh){a=a|0;Nh=Nh|0;var bi=0,ci=0,di=0,ei=0,fi=0;bi=q[a+296>>2];a:{if((bi|0)!=q[a+300>>2]){break a}di=bi?bi<<1:1;if((bi|0)>=(di|0)){break a}if(di){q[6657]=q[6657]+1;ei=n[q[5255]](di<<2,16)|0;bi=q[a+296>>2];}if((bi|0)>=1){while(1){fi=ci<<2;q[fi+ei>>2]=q[q[a+304>>2]+fi>>2];ci=ci+1|0;if((ci|0)!=(bi|0)){continue}break}}ci=q[a+304>>2];if(ci){if(r[a+308|0]){if(ci){q[6658]=q[6658]+1;n[q[5256]](ci);}bi=q[a+296>>2];}q[a+304>>2]=0;}q[a+304>>2]=ei;q[a+300>>2]=di;o[a+308|0]=1;}q[q[a+304>>2]+(bi<<2)>>2]=Nh;q[a+296>>2]=bi+1;}function sn(a,Nh){a=a|0;Nh=Nh|0;var gi=0,hi=0,ii=0,ji=0;gi=q[a+228>>2];a:{if((gi|0)<1){break a}ii=q[a+236>>2];while(1){ji=(hi<<2)+ii|0;if(q[ji>>2]!=(Nh|0)){hi=hi+1|0;if((gi|0)!=(hi|0)){continue}break a}break}if((gi|0)<=(hi|0)){break a}gi=gi+ -1|0;hi=gi<<2;q[ji>>2]=q[hi+ii>>2];q[hi+q[a+236>>2]>>2]=Nh;q[a+228>>2]=gi;}Uf(q[Nh+28>>2],Nh);Uf(q[Nh+32>>2],Nh);}function tn(a,Nh,ki){a=a|0;Nh=Nh|0;ki=ki|0;var li=0,mi=0,ni=0,oi=0,pi=0;li=q[a+228>>2];a:{if((li|0)!=q[a+232>>2]){break a}ni=li?li<<1:1;if((li|0)>=(ni|0)){break a}if(ni){q[6657]=q[6657]+1;oi=n[q[5255]](ni<<2,16)|0;li=q[a+228>>2];}if((li|0)>=1){while(1){pi=mi<<2;q[pi+oi>>2]=q[q[a+236>>2]+pi>>2];mi=mi+1|0;if((mi|0)!=(li|0)){continue}break}}mi=q[a+236>>2];if(mi){if(r[a+240|0]){if(mi){q[6658]=q[6658]+1;n[q[5256]](mi);}li=q[a+228>>2];}q[a+236>>2]=0;}q[a+236>>2]=oi;q[a+232>>2]=ni;o[a+240|0]=1;}q[q[a+236>>2]+(li<<2)>>2]=Nh;q[a+228>>2]=li+1;if(ki){Vf(q[Nh+28>>2],Nh);Vf(q[Nh+32>>2],Nh);}}function un(a,Nh){a=a|0;Nh=Nh|0;var ki=0;ki=P-16|0;P=ki;q[ki+12>>2]=a;q[ki+8>>2]=Nh;a=q[ki+12>>2];if(n[q[q[a>>2]+40>>2]](a)&1){u[a+16>>2]=u[a+28>>2];o[a+169|0]=1;}P=ki+16|0;}function vn(a,Nh){a=a|0;Nh=x(Nh);var qi=0,ri=x(0),si=x(0),ti=0,ui=0,vi=0,wi=0;vi=P-16|0;P=vi;n[q[5253]](2342);if(q[a+248>>2]>=1){while(1){qi=q[q[a+256>>2]+(ui<<2)>>2];a:{if(!qi){break a}ti=q[qi+220>>2];wi=ti+ -2|0;b:{if(!(wi-1|0?wi>>>0<=2:0)){c:{ri=u[qi+372>>2];si=x(ri*ri);ri=u[qi+376>>2];si=x(si+x(ri*ri));ri=u[qi+380>>2];si=x(si+x(ri*ri));ri=u[qi+532>>2];if(!(si<x(ri*ri))){break c}ri=u[qi+388>>2];si=x(ri*ri);ri=u[qi+392>>2];si=x(si+x(ri*ri));ri=u[qi+396>>2];si=x(si+x(ri*ri));ri=u[qi+536>>2];if(!(si<x(ri*ri))){break c}u[qi+224>>2]=u[qi+224>>2]+Nh;break b}q[qi+224>>2]=0;if((q[qi+220>>2]&-2)!=4){q[qi+220>>2]=0;}ti=q[qi+220>>2];}if((ti|0)==4){break a}}d:{if(r[22420]){break d}ri=u[5248];if(ri==x(0)|(u[qi+224>>2]>ri^1?(ti&-2)!=2:0)){break d}if(r[qi+204|0]&3){if((q[qi+220>>2]&-2)!=4){q[qi+220>>2]=2;}break a}if((ti|0)==1){if((q[qi+220>>2]&-2)!=4){q[qi+220>>2]=3;}ti=q[qi+220>>2];}if((ti|0)!=2){break a}q[qi+388>>2]=0;q[qi+392>>2]=0;q[qi+372>>2]=0;q[qi+376>>2]=0;q[qi+396>>2]=0;q[qi+400>>2]=0;q[qi+380>>2]=0;q[qi+384>>2]=0;q[qi+304>>2]=q[qi+304>>2]+2;break a}if((q[qi+220>>2]&-2)!=4){q[qi+220>>2]=1;}}ui=ui+1|0;if((ui|0)<q[a+248>>2]){continue}break}}n[q[5254]]();P=vi+16|0;}function wn(a,Nh,xi,yi){a=a|0;Nh=Nh|0;xi=xi|0;yi=yi|0;var zi=0,Ai=0,Bi=0,Ci=0,Di=0;if(!(r[Nh+204|0]&3|o[Nh+564|0]&1)){sc(Nh,a+264|0);}if(q[Nh+192>>2]){a:{if(!(o[Nh+204|0]&1)){zi=q[a+248>>2];b:{if((zi|0)!=q[a+252>>2]){break b}Bi=zi?zi<<1:1;if((zi|0)>=(Bi|0)){break b}if(Bi){q[6657]=q[6657]+1;Ci=n[q[5255]](Bi<<2,16)|0;zi=q[a+248>>2];}if((zi|0)>=1){while(1){Di=Ai<<2;q[Di+Ci>>2]=q[q[a+256>>2]+Di>>2];Ai=Ai+1|0;if((Ai|0)!=(zi|0)){continue}break}}Ai=q[a+256>>2];if(Ai){if(r[a+260|0]){if(Ai){q[6658]=q[6658]+1;n[q[5256]](Ai);}zi=q[a+248>>2];}q[a+256>>2]=0;}q[a+256>>2]=Ci;q[a+252>>2]=Bi;o[a+260|0]=1;}q[q[a+256>>2]+(zi<<2)>>2]=Nh;q[a+248>>2]=zi+1;break a}if((q[Nh+220>>2]&-2)!=4){q[Nh+220>>2]=2;}}n[q[q[a>>2]+36>>2]](a,Nh,xi,yi);}}function xn(a,Nh){a=a|0;Nh=Nh|0;var xi=0,yi=0,Ei=0,Fi=0,Gi=0;if(!(r[Nh+204|0]&3|o[Nh+564|0]&1)){sc(Nh,a+264|0);}if(q[Nh+192>>2]){a:{if(!(o[Nh+204|0]&1)){xi=q[a+248>>2];b:{if((xi|0)!=q[a+252>>2]){break b}Ei=xi?xi<<1:1;if((xi|0)>=(Ei|0)){break b}if(Ei){q[6657]=q[6657]+1;Fi=n[q[5255]](Ei<<2,16)|0;xi=q[a+248>>2];}if((xi|0)>=1){while(1){Gi=yi<<2;q[Gi+Fi>>2]=q[q[a+256>>2]+Gi>>2];yi=yi+1|0;if((yi|0)!=(xi|0)){continue}break}}yi=q[a+256>>2];if(yi){if(r[a+260|0]){if(yi){q[6658]=q[6658]+1;n[q[5256]](yi);}xi=q[a+248>>2];}q[a+256>>2]=0;}q[a+256>>2]=Fi;q[a+252>>2]=Ei;o[a+260|0]=1;}q[q[a+256>>2]+(xi<<2)>>2]=Nh;q[a+248>>2]=xi+1;break a}if((q[Nh+220>>2]&-2)!=4){q[Nh+220>>2]=2;}}xi=Nh;Nh=q[Nh+204>>2]&3;n[q[q[a>>2]+36>>2]](a,xi,Nh?2:1,Nh?-3:-1);}}function yn(a,Nh){a=a|0;Nh=Nh|0;var Hi=0,Ii=0,Ji=0,Ki=0;Hi=q[a+248>>2];a:{if((Hi|0)<1){break a}Ji=q[a+256>>2];while(1){Ki=(Ii<<2)+Ji|0;if(q[Ki>>2]!=(Nh|0)){Ii=Ii+1|0;if((Hi|0)!=(Ii|0)){continue}break a}break}if((Hi|0)<=(Ii|0)){break a}Hi=Hi+ -1|0;Ii=Hi<<2;q[Ki>>2]=q[Ii+Ji>>2];q[Ii+q[a+256>>2]>>2]=Nh;q[a+248>>2]=Hi;}Re(a,Nh);}function zn(a,Nh){a=a|0;Nh=Nh|0;if(!(!Nh|!(q[Nh+252>>2]&2))){n[q[q[a>>2]+92>>2]](a,Nh);return}Re(a,Nh);}function An(a,q,Nh,Li){a=a|0;q=q|0;Nh=Nh|0;Li=Li|0;Ii(a,q,Nh,Li);}function Bn(a,Nh){a=a|0;Nh=Nh|0;var Li=0;Li=q[Nh+268>>2];q[a>>2]=q[Nh+264>>2];q[a+4>>2]=Li;Li=q[Nh+276>>2];q[a+8>>2]=q[Nh+272>>2];q[a+12>>2]=Li;}function Cn(a,Nh){a=a|0;Nh=Nh|0;var Mi=0,Ni=0,Oi=0,Pi=0;Mi=Nh;Ni=q[Mi+4>>2];q[a+264>>2]=q[Mi>>2];q[a+268>>2]=Ni;Ni=q[Mi+12>>2];q[a+272>>2]=q[Mi+8>>2];q[a+276>>2]=Ni;Mi=q[a+248>>2];if((Mi|0)>=1){while(1){a:{b:{Ni=q[q[a+256>>2]+(Oi<<2)>>2];Pi=q[Ni+220>>2]+ -2|0;if(Pi>>>0>3){break b}switch(Pi-1|0){case 0:case 1:break b;default:break a}}if(o[Ni+564|0]&1){break a}sc(Ni,Nh);Mi=q[a+248>>2];}Oi=Oi+1|0;if((Oi|0)<(Mi|0)){continue}break}}}function Dn(a,Nh){a=a|0;Nh=x(Nh);var Qi=0,Ri=0,Si=0;Ri=P-16|0;P=Ri;n[q[5253]](2299);Qi=q[a+84>>2];if(Qi){n[Qi](a,Nh);}n[q[q[a>>2]+140>>2]](a,Nh);Qi=0;q[a+32>>2]=0;u[a+28>>2]=Nh;q[a+48>>2]=n[q[q[a>>2]+20>>2]](a);n[q[q[a>>2]+164>>2]](a,Nh);n[q[q[a>>2]+44>>2]](a);n[q[q[a>>2]+148>>2]](a);u[a+104>>2]=Nh;n[q[q[a>>2]+152>>2]](a,a+92|0);n[q[q[a>>2]+144>>2]](a,Nh);n[q[5253]](2328);if(q[a+296>>2]>=1){while(1){Si=q[q[a+304>>2]+(Qi<<2)>>2];n[q[q[Si>>2]+8>>2]](Si,a,Nh);Qi=Qi+1|0;if((Qi|0)<q[a+296>>2]){continue}break}}n[q[5254]]();n[q[q[a>>2]+156>>2]](a,Nh);Qi=q[a+80>>2];if(Qi){n[Qi](a,Nh);}n[q[5254]]();P=Ri+16|0;}function En(a,Nh,Ti,Ui){a=a|0;Nh=x(Nh);Ti=Ti|0;Ui=x(Ui);var Vi=0,Wi=0,Xi=x(0);I(q[6078],0)|0;a:{if(Ti){u[a+284>>2]=Ui;Nh=x(u[a+280>>2]+Nh);u[a+280>>2]=Nh;if(!(Nh>=Ui)){break a}Vi=a;Xi=Nh;Nh=x(Nh/Ui);b:{if(x(y(Nh))<x(2147483648)){Wi=~~Nh;break b}Wi=-2147483648;}u[Vi+280>>2]=Xi-x(x(Wi|0)*Ui);break a}q[a+284>>2]=0;u[a+280>>2]=r[a+316|0]?x(0):Nh;Ui=Nh;Wi=x(y(Nh))<x(1.1920928955078125e-7)^1;Ti=Wi;}if(n[q[q[a>>2]+20>>2]](a)){Vi=n[q[q[a>>2]+20>>2]](a)|0;o[22420]=n[q[q[Vi>>2]+56>>2]](Vi)>>>4&1;}c:{if(Wi){Vi=(Wi|0)>(Ti|0)?Ti:Wi;n[q[q[a>>2]+168>>2]](a,x(Ui*x(Vi|0)));n[q[q[a>>2]+176>>2]](a);if((Vi|0)<1){break c}Ti=0;while(1){n[q[q[a>>2]+160>>2]](a,Ui);n[q[q[a>>2]+80>>2]](a);Ti=Ti+1|0;if((Ti|0)<(Vi|0)){continue}break}break c}n[q[q[a>>2]+80>>2]](a);}n[q[q[a>>2]+120>>2]](a);q[6656]=q[6656]+1;return Wi|0}function Fn(a){a=a|0;var Nh=0,Ti=0,Ui=x(0),Yi=0,Zi=0,_i=0,$i=0;Zi=P+ -64|0;P=Zi;a:{if(r[a+290|0]){Ti=q[a+8>>2];if((Ti|0)<1){break a}while(1){Nh=q[q[a+16>>2]+(Yi<<2)>>2];if(!(!Nh|!(q[Nh+252>>2]&2)|(!q[Nh+540>>2]|r[Nh+204|0]&3))){Ti=Nh+68|0;_i=Nh+132|0;$i=Nh+148|0;b:{c:{if(!r[a+316|0]){break c}Ui=u[a+284>>2];if(Ui==x(0)){break c}Ui=x(u[a+280>>2]-Ui);break b}Ui=x(u[a+280>>2]*u[Nh+268>>2]);}Xa(Ti,_i,$i,Ui,Zi);Nh=q[Nh+540>>2];n[q[q[Nh>>2]+12>>2]](Nh,Zi);Ti=q[a+8>>2];}Yi=Yi+1|0;if((Yi|0)<(Ti|0)){continue}break}break a}Ti=q[a+248>>2];if((Ti|0)<1){break a}while(1){d:{e:{Nh=q[q[a+256>>2]+(Yi<<2)>>2];_i=q[Nh+220>>2]+ -2|0;if(_i>>>0>3){break e}switch(_i-1|0){case 0:case 1:break e;default:break d}}if(!q[Nh+540>>2]|r[Nh+204|0]&3){break d}Ti=Nh+68|0;_i=Nh+132|0;$i=Nh+148|0;f:{g:{if(!r[a+316|0]){break g}Ui=u[a+284>>2];if(Ui==x(0)){break g}Ui=x(u[a+280>>2]-Ui);break f}Ui=x(u[a+280>>2]*u[Nh+268>>2]);}Xa(Ti,_i,$i,Ui,Zi);Nh=q[Nh+540>>2];n[q[q[Nh>>2]+12>>2]](Nh,Zi);Ti=q[a+248>>2];}Yi=Yi+1|0;if((Yi|0)<(Ti|0)){continue}break}}P=Zi- -64|0;}function Gn(a){a=a|0;var aj=0,bj=0,cj=0,dj=0;aj=q[a+248>>2];if((aj|0)>=1){while(1){a:{b:{cj=q[q[a+256>>2]+(bj<<2)>>2];dj=q[cj+220>>2]+ -2|0;if(dj>>>0>3){break b}switch(dj-1|0){case 0:case 1:break b;default:break a}}Wf(cj);aj=q[a+248>>2];}bj=bj+1|0;if((bj|0)<(aj|0)){continue}break}}}function Hn(a){a=a|0;var ej=0,fj=0;if(q[a+248>>2]>=1){while(1){ej=q[q[a+256>>2]+(fj<<2)>>2];q[ej+472>>2]=0;q[ej+476>>2]=0;q[ej+496>>2]=0;q[ej+500>>2]=0;q[ej+488>>2]=0;q[ej+492>>2]=0;q[ej+480>>2]=0;q[ej+484>>2]=0;fj=fj+1|0;if((fj|0)<q[a+248>>2]){continue}break}}}function In(a){a=a|0;var gj=0,hj=0,ij=0,jj=0,kj=0,lj=0;hj=P-16|0;P=hj;n[q[5253]](2284);Fi(a);a:{if(!n[q[q[a>>2]+20>>2]](a)){break a}gj=n[q[q[a>>2]+20>>2]](a)|0;if(!(n[q[q[gj>>2]+56>>2]](gj)&6144)){break a}gj=n[q[q[a>>2]+104>>2]](a)|0;while(1){if((gj|0)<1){break a}gj=gj+ -1|0;kj=a,lj=n[q[q[a>>2]+108>>2]](a,gj)|0,jj=q[q[a>>2]+172>>2],n[jj](kj|0,lj|0);continue}}b:{if(!n[q[q[a>>2]+20>>2]](a)){break b}gj=n[q[q[a>>2]+20>>2]](a)|0;if(!(n[q[q[gj>>2]+56>>2]](gj)&16387)){break b}if(!n[q[q[a>>2]+20>>2]](a)){break b}gj=n[q[q[a>>2]+20>>2]](a)|0;if(!n[q[q[gj>>2]+56>>2]](gj)|q[a+296>>2]<1){break b}gj=0;while(1){ij=q[q[a+304>>2]+(gj<<2)>>2];n[q[q[ij>>2]+12>>2]](ij,q[a+72>>2]);gj=gj+1|0;if((gj|0)<q[a+296>>2]){continue}break}}if(n[q[q[a>>2]+20>>2]](a)){a=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[a>>2]+104>>2]](a);}n[q[5254]]();P=hj+16|0;}function Jn(a,mj){a=a|0;mj=x(mj);var nj=0,oj=0,pj=0;oj=q[a+8>>2];if((oj|0)>=1){while(1){nj=q[q[a+16>>2]+(pj<<2)>>2];if(!(!nj|!(q[nj+252>>2]&2)|(!(r[nj+204|0]&2)|q[nj+220>>2]==2))){Xn(nj,mj);oj=q[a+8>>2];}pj=pj+1|0;if((pj|0)<(oj|0)){continue}break}}}function Kn(a){a=a|0;a=Sf(a);if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}function Ln(a,mj,qj,rj){var sj=0;aB(a,mj,qj);qj=a;q[qj+100>>2]=1050253722;q[qj+104>>2]=1015580809;q[qj+92>>2]=1058642330;q[qj+96>>2]=1065353216;q[qj+88>>2]=0;q[qj+80>>2]=0;q[qj+84>>2]=0;q[qj+132>>2]=0;q[qj+136>>2]=1045220557;q[qj+124>>2]=1045220557;q[qj+128>>2]=1045220557;q[qj+108>>2]=0;q[qj+112>>2]=10;q[qj+184>>2]=0;q[qj+188>>2]=1045220557;q[qj+176>>2]=1120403456;q[qj+180>>2]=1900671690;q[qj+172>>2]=128;q[qj+164>>2]=260;q[qj+168>>2]=2;q[qj+156>>2]=0;q[qj+160>>2]=1062836634;q[qj+148>>2]=-1121724662;q[qj+152>>2]=1036831949;q[qj+140>>2]=0;q[qj+144>>2]=1;q[qj+116>>2]=1101004800;q[qj+120>>2]=1065353216;q[qj>>2]=2096;o[qj+208|0]=1;q[qj+204>>2]=0;o[qj+240|0]=1;q[qj+216>>2]=rj;q[qj+212>>2]=0;q[qj+196>>2]=0;q[qj+200>>2]=0;q[qj+236>>2]=0;q[qj+228>>2]=0;q[qj+232>>2]=0;o[qj+260|0]=1;p[qj+290>>1]=0;q[qj+256>>2]=0;q[qj+248>>2]=0;q[qj+252>>2]=0;q[qj+264>>2]=0;q[qj+268>>2]=-1054867456;q[qj+272>>2]=0;q[qj+276>>2]=0;q[qj+280>>2]=0;q[qj+284>>2]=0;o[qj+308|0]=1;q[qj+312>>2]=0;q[qj+304>>2]=0;q[qj+296>>2]=0;q[qj+300>>2]=0;o[qj+336|0]=1;o[qj+316|0]=1;q[qj+324>>2]=0;q[qj+328>>2]=0;q[qj+332>>2]=0;q[qj+340>>2]=0;sj=qj;if(rj){qj=0;}else {q[6657]=q[6657]+1;qj=n[q[5255]](236,16)|0;sf(qj);q[a+216>>2]=qj;qj=1;}o[sj+289|0]=qj;q[6657]=q[6657]+1;qj=n[q[5255]](68,16)|0;hj(qj);o[a+288|0]=1;q[a+220>>2]=qj;q[6657]=q[6657]+1;qj=n[q[5255]](88,16)|0;rj=q[a+216>>2];o[qj+44|0]=1;q[qj+24>>2]=mj;q[qj+20>>2]=0;q[qj+12>>2]=0;q[qj+16>>2]=0;q[qj+8>>2]=rj;q[qj+4>>2]=0;q[qj>>2]=2704;q[qj+40>>2]=0;o[qj+64|0]=1;q[qj+32>>2]=0;q[qj+36>>2]=0;q[qj+60>>2]=0;o[qj+84|0]=1;q[qj+52>>2]=0;q[qj+56>>2]=0;q[qj+80>>2]=0;q[qj+72>>2]=0;q[qj+76>>2]=0;q[a+212>>2]=qj;}function Mn(a,mj){a=a|0;mj=mj|0;var qj=0,rj=0;rj=q[a+288>>2];qj=rj;a:{if((rj|0)<1){break a}a=q[a+296>>2];qj=0;while(1){if(q[a+(qj<<2)>>2]==(mj|0)){break a}qj=qj+1|0;if((rj|0)!=(qj|0)){continue}break}qj=rj;}return (qj|0)>=(rj|0)|0}function Nn(a,mj){a=a|0;mj=mj|0;q[a+200>>2]=mj;q[a+192>>2]=mj;q[a+304>>2]=q[a+304>>2]+1;}function On(a){a=a|0;var mj=0;q[a>>2]=2012;mj=q[a+556>>2];if(mj){if(r[a+560|0]){if(mj){q[6658]=q[6658]+1;n[q[5256]](mj);}}q[a+556>>2]=0;}q[a+556>>2]=0;q[a+548>>2]=0;q[a+552>>2]=0;o[a+560|0]=1;hb(a);if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}function Pn(a,tj){a=a|0;tj=tj|0;var uj=0,vj=0,wj=0,xj=0,yj=0,zj=0,Aj=0;uj=(wj=tj,xj=n[q[q[a>>2]+16>>2]](a)|0,yj=1,vj=q[q[tj>>2]+16>>2],n[vj](wj|0,xj|0,yj|0)|0);yj=tj,xj=uj,wj=n[q[q[a>>2]+20>>2]](a,q[uj+8>>2],tj)|0,zj=1497645650,Aj=a,vj=q[q[tj>>2]+20>>2],n[vj](yj|0,xj|0,wj|0,zj|0,Aj|0);}function Qn(a,tj,Bj){a=a|0;tj=tj|0;Bj=Bj|0;jf(a,tj,Bj);q[tj+264>>2]=q[a+324>>2];q[tj+268>>2]=q[a+328>>2];q[tj+272>>2]=q[a+332>>2];q[tj+276>>2]=q[a+336>>2];q[tj+280>>2]=q[a+340>>2];q[tj+284>>2]=q[a+344>>2];q[tj+288>>2]=q[a+348>>2];q[tj+292>>2]=q[a+352>>2];q[tj+296>>2]=q[a+356>>2];q[tj+300>>2]=q[a+360>>2];q[tj+304>>2]=q[a+364>>2];q[tj+308>>2]=q[a+368>>2];q[tj+312>>2]=q[a+372>>2];q[tj+316>>2]=q[a+376>>2];q[tj+320>>2]=q[a+380>>2];q[tj+324>>2]=q[a+384>>2];q[tj+328>>2]=q[a+388>>2];q[tj+332>>2]=q[a+392>>2];q[tj+336>>2]=q[a+396>>2];q[tj+340>>2]=q[a+400>>2];q[tj+456>>2]=q[a+404>>2];q[tj+344>>2]=q[a+604>>2];q[tj+348>>2]=q[a+608>>2];q[tj+352>>2]=q[a+612>>2];q[tj+356>>2]=q[a+616>>2];q[tj+360>>2]=q[a+408>>2];q[tj+364>>2]=q[a+412>>2];q[tj+368>>2]=q[a+416>>2];q[tj+372>>2]=q[a+420>>2];q[tj+376>>2]=q[a+424>>2];q[tj+380>>2]=q[a+428>>2];q[tj+384>>2]=q[a+432>>2];q[tj+388>>2]=q[a+436>>2];q[tj+392>>2]=q[a+440>>2];q[tj+396>>2]=q[a+444>>2];q[tj+400>>2]=q[a+448>>2];q[tj+404>>2]=q[a+452>>2];q[tj+408>>2]=q[a+456>>2];q[tj+412>>2]=q[a+460>>2];q[tj+416>>2]=q[a+464>>2];q[tj+420>>2]=q[a+468>>2];q[tj+424>>2]=q[a+472>>2];q[tj+428>>2]=q[a+476>>2];q[tj+432>>2]=q[a+480>>2];q[tj+436>>2]=q[a+484>>2];q[tj+440>>2]=q[a+488>>2];q[tj+444>>2]=q[a+492>>2];q[tj+448>>2]=q[a+496>>2];q[tj+452>>2]=q[a+500>>2];q[tj+460>>2]=q[a+504>>2];q[tj+464>>2]=q[a+508>>2];q[tj+492>>2]=r[a+512|0];q[tj+468>>2]=q[a+516>>2];q[tj+472>>2]=q[a+520>>2];q[tj+476>>2]=q[a+524>>2];q[tj+480>>2]=q[a+528>>2];q[tj+484>>2]=q[a+532>>2];q[tj+488>>2]=q[a+536>>2];return 2040}function Rn(a){return 496}function Sn(a,tj,Bj){var Cj=x(0),Dj=x(0),Ej=x(0),Fj=x(0),Gj=x(0),Hj=x(0),Ij=x(0),Jj=x(0),Kj=x(0),Lj=x(0),Mj=x(0),Nj=x(0),Oj=x(0),Pj=x(0),Qj=x(0),Rj=x(0),Sj=x(0),Tj=x(0),Uj=x(0),Vj=x(0),Wj=x(0),Xj=x(0),Yj=x(0),Zj=x(0),_j=x(0),$j=x(0),ak=x(0);Jj=u[tj+396>>2];Kj=u[tj+44>>2];Sj=u[tj+40>>2];Cj=u[tj+36>>2];Lj=u[tj+12>>2];Mj=u[tj+8>>2];Fj=u[tj+4>>2];Nj=u[tj+392>>2];Ej=u[tj+28>>2];Dj=u[tj+464>>2];Ij=u[tj+24>>2];Oj=u[tj+460>>2];Gj=u[tj+20>>2];Pj=u[tj+388>>2];Tj=u[tj+456>>2];q[a+12>>2]=0;Qj=Tj!=x(0)?x(x(1)/Tj):x(0);Rj=x(Cj*Qj);Wj=Oj!=x(0)?x(x(1)/Oj):x(0);Vj=x(Sj*Wj);Dj=Dj!=x(0)?x(x(1)/Dj):x(0);Xj=x(Kj*Dj);Oj=x(x(x(Fj*Rj)+x(Mj*Vj))+x(Lj*Xj));Hj=x(Qj*Gj);Uj=x(Wj*Ij);Yj=x(Dj*Ej);Tj=x(x(x(Fj*Hj)+x(Mj*Uj))+x(Lj*Yj));Zj=x(Pj*Tj);_j=x(Qj*Fj);$j=x(Wj*Mj);ak=x(Dj*Lj);Fj=x(x(x(Fj*_j)+x(Mj*$j))+x(Lj*ak));Dj=x(x(x(Hj*Gj)+x(Uj*Ij))+x(Yj*Ej));Qj=x(x(x(Hj*Cj)+x(Uj*Sj))+x(Yj*Kj));Uj=x(Jj*Qj);Lj=x(x(Zj+x(Nj*Dj))+Uj);Wj=x(Oj+x(x(x(x(Oj*x(0))+x(Zj-x(Nj*Fj)))+Lj)*Bj));Hj=x(x(x(_j*Gj)+x($j*Ij))+x(ak*Ej));Yj=x(Pj*Oj);Gj=x(x(x(Rj*Gj)+x(Vj*Ij))+x(Xj*Ej));Ij=x(Nj*Gj);Ej=x(x(x(Rj*Cj)+x(Vj*Sj))+x(Xj*Kj));Mj=x(x(Yj+Ij)+x(Jj*Ej));Ij=x(Hj+x(x(Mj+x(Ij+x(x(Hj*x(0))-x(Jj*Dj))))*Bj));Zj=x(Nj*Hj);Cj=x(x(x(_j*Cj)+x($j*Sj))+x(ak*Kj));Rj=x(Jj*Cj);Kj=x(x(x(Pj*Fj)+Zj)+Rj);Xj=x(Bj*x(0));Sj=x(x(Lj+x(x(x(Jj*Kj)-x(Pj*Mj))*Bj))-x(Xj+Lj));Rj=x(Qj+x(x(Kj+x(x(x(Qj*x(0))+Rj)-x(Pj*Ej)))*Bj));Hj=x(Dj+x(x(x(x(Dj*x(0))+x(Jj*Hj))-x(Pj*Gj))*Bj));Vj=x(Cj+x(x(x(x(Nj*Ej)+x(x(Cj*x(0))-Uj))-Lj)*Bj));Uj=x(x(Ij*Rj)-x(Hj*Vj));Oj=x(Fj+x(x(x(Nj*Oj)+x(x(Fj*x(0))-x(Jj*Tj)))*Bj));Ej=x(Ej+x(x(x(Ej*x(0))+x(x(Pj*Qj)-x(Nj*Cj)))*Bj));Gj=x(Gj+x(x(x(x(Gj*x(0))+x(x(Pj*Dj)-Zj))-Kj)*Bj));Qj=x(x(Hj*Ej)-x(Gj*Rj));Dj=x(Tj+x(x(x(x(x(Tj*x(0))+x(Jj*Fj))-Yj)-Mj)*Bj));Tj=x(x(Gj*Vj)-x(Ij*Ej));Cj=x(x(Wj*Uj)+x(x(Oj*Qj)+x(Dj*Tj)));Fj=x(y(Cj))>x(1.1920928955078125e-7)?x(x(1)/Cj):Cj;Cj=x(x(Kj+x(x(x(Nj*Mj)-x(Jj*Lj))*Bj))-x(Xj+Kj));Bj=x(x(Mj+x(x(x(Pj*Lj)-x(Nj*Kj))*Bj))-x(Xj+Mj));u[a+8>>2]=x(Jj-x(x(x(Wj*x(x(Ij*Sj)-x(Hj*Cj)))+x(x(Oj*x(x(Hj*Bj)-x(Gj*Sj)))+x(Dj*x(x(Gj*Cj)-x(Ij*Bj)))))*Fj))-Jj;u[a+4>>2]=x(Nj-x(x(x(Wj*x(x(Rj*Cj)-x(Vj*Sj)))+x(x(Oj*x(x(Ej*Sj)-x(Rj*Bj)))+x(Dj*x(x(Vj*Bj)-x(Ej*Cj)))))*Fj))-Nj;u[a>>2]=x(Pj-x(x(x(Bj*Uj)+x(x(Cj*Qj)+x(Sj*Tj)))*Fj))-Pj;}function Tn(a,tj,Bj){var bk=x(0),ck=x(0),dk=x(0),ek=x(0),fk=x(0),gk=x(0),hk=x(0),ik=x(0),jk=x(0),kk=x(0),lk=x(0),mk=x(0),nk=x(0),ok=x(0),pk=x(0),qk=x(0),rk=x(0),sk=0,tk=x(0),uk=x(0),vk=x(0),wk=x(0),xk=x(0),yk=x(0),zk=x(0),Ak=x(0),Bk=x(0),Ck=x(0),Dk=x(0);sk=P-16|0;P=sk;dk=u[tj+464>>2];ck=u[tj+460>>2];uk=u[tj+396>>2];vk=u[tj+392>>2];gk=u[tj+456>>2];wk=u[tj+388>>2];ja(tj+4|0,sk);hk=u[sk+4>>2];ik=u[sk>>2];jk=u[sk+12>>2];kk=u[sk+8>>2];q[a+12>>2]=0;ek=x(x(uk*ik)+x(x(vk*jk)-x(wk*kk)));pk=x(x(x(wk*ik)+x(vk*hk))+x(uk*kk));lk=x(x(vk*kk)+x(x(wk*jk)-x(uk*hk)));qk=x(x(wk*hk)+x(x(uk*jk)-x(vk*ik)));fk=x(x(x(kk*ek)+x(x(ik*pk)+x(jk*lk)))-x(hk*qk));mk=x(x(x(hk*lk)+x(x(kk*pk)+x(jk*qk)))-x(ik*ek));nk=x(mk*x(0));ok=x(fk*x(0));bk=ck!=x(0)?x(x(1)/ck):x(0);ck=x(x(x(ik*qk)+x(x(hk*pk)+x(jk*ek)))-x(kk*lk));pk=x(nk+x(ok+x(bk*ck)));ek=gk!=x(0)?x(x(1)/gk):x(0);lk=x(ck*x(0));qk=x(nk+x(x(fk*ek)+lk));gk=x(x(x(fk*pk)-x(ck*qk))*Bj);Bk=x(x(x(x(x(ok-x(ek*ck))+x(0))+pk)*Bj)+x(0));dk=dk!=x(0)?x(x(1)/dk):x(0);xk=x(x(dk*mk)+x(ok+lk));yk=x(x(x(x(lk+x(x(0)-x(bk*mk)))+xk)*Bj)+x(0));zk=x(x(x(x(x(nk+x(0))-x(dk*fk))+qk)*Bj)+x(0));tk=x(fk*x(-0));nk=x(bk+x(x(tk+x(x(bk*x(0))+nk))*Bj));rk=x(mk*x(-0));Ak=x(x(x(x(x(dk*ck)+x(rk+x(0)))-pk)*Bj)+x(0));Ck=x(x(yk*zk)-x(nk*Ak));lk=x(ek+x(x(lk+x(x(ek*x(0))+rk))*Bj));rk=x(ck*x(-0));dk=x(dk+x(x(x(dk*x(0))+x(rk+ok))*Bj));ok=x(x(x(x(x(rk+x(bk*fk))+x(0))-qk)*Bj)+x(0));rk=x(x(nk*dk)-x(ok*zk));tk=x(x(x(x(tk+x(x(ek*mk)+x(0)))-xk)*Bj)+x(0));Dk=x(x(ok*Ak)-x(dk*yk));bk=x(x(Bk*Ck)+x(x(lk*rk)+x(tk*Dk)));ek=x(y(bk))>x(1.1920928955078125e-7)?x(x(1)/bk):bk;bk=x(x(x(ck*xk)-x(mk*pk))*Bj);Bj=x(x(x(mk*qk)-x(fk*xk))*Bj);fk=x(fk-x(x(x(gk*Ck)+x(x(bk*rk)+x(Bj*Dk)))*ek));ck=x(ck-x(x(x(Bk*x(x(zk*bk)-x(Ak*Bj)))+x(x(lk*x(x(dk*Bj)-x(zk*gk)))+x(tk*x(x(Ak*gk)-x(dk*bk)))))*ek));Bj=x(mk-x(x(x(Bk*x(x(yk*Bj)-x(nk*bk)))+x(x(lk*x(x(nk*gk)-x(ok*Bj)))+x(tk*x(x(ok*bk)-x(yk*gk)))))*ek));mk=x(x(x(kk*fk)+x(jk*ck))-x(ik*Bj));gk=x(x(x(jk*Bj)+x(ik*ck))-x(hk*fk));bk=x(x(x(fk*x(-ik))-x(hk*ck))-x(kk*Bj));Bj=x(x(x(jk*fk)+x(hk*Bj))-x(kk*ck));u[a+8>>2]=x(x(ik*mk)+x(x(x(jk*gk)-x(kk*bk))-x(hk*Bj)))-uk;u[a+4>>2]=x(x(kk*Bj)+x(x(x(jk*mk)-x(hk*bk))-x(ik*gk)))-vk;u[a>>2]=x(x(hk*gk)+x(x(x(jk*Bj)-x(ik*bk))-x(kk*mk)))-wk;P=sk+16|0;}function Un(a,tj,Bj){var Ek=x(0),Fk=x(0),Gk=x(0),Hk=x(0),Ik=x(0),Jk=x(0),Kk=x(0),Lk=x(0),Mk=x(0),Nk=x(0),Ok=x(0),Pk=x(0),Qk=x(0),Rk=x(0),Sk=x(0),Tk=x(0),Uk=x(0),Vk=x(0),Wk=x(0);Gk=u[tj+396>>2];Ok=u[tj+44>>2];Pk=u[tj+40>>2];Qk=u[tj+36>>2];Jk=u[tj+392>>2];Rk=u[tj+28>>2];Kk=u[tj+12>>2];Ek=u[tj+464>>2];Sk=u[tj+24>>2];Lk=u[tj+8>>2];Mk=u[tj+460>>2];Tk=u[tj+20>>2];Uk=u[tj+4>>2];Fk=u[tj+388>>2];Nk=u[tj+456>>2];q[a+12>>2]=0;Nk=Nk!=x(0)?x(x(1)/Nk):x(0);Hk=x(Tk*Nk);Mk=Mk!=x(0)?x(x(1)/Mk):x(0);Ik=x(Sk*Mk);Vk=Ek!=x(0)?x(x(1)/Ek):x(0);Ek=x(Rk*Vk);Wk=x(x(x(Fk*x(x(x(Uk*Hk)+x(Lk*Ik))+x(Kk*Ek)))+x(Jk*x(x(x(Hk*Tk)+x(Ik*Sk))+x(Ek*Rk))))+x(Gk*x(x(x(Hk*Qk)+x(Ik*Pk))+x(Ek*Ok))));Ek=x(Nk*Uk);Hk=x(Mk*Lk);Ik=x(Vk*Kk);Hk=x(x(x(Fk*x(x(x(Uk*Ek)+x(Lk*Hk))+x(Kk*Ik)))+x(Jk*x(x(x(Ek*Tk)+x(Hk*Sk))+x(Ik*Rk))))+x(Gk*x(x(x(Ek*Qk)+x(Hk*Pk))+x(Ik*Ok))));Ek=x(x(Fk*Wk)-x(Jk*Hk));u[a+8>>2]=Ek;Ik=Fk;Fk=x(Nk*Qk);Nk=Lk;Lk=x(Mk*Pk);Mk=Kk;Kk=x(Vk*Ok);Ok=x(x(x(Ik*x(x(x(Uk*Fk)+x(Nk*Lk))+x(Mk*Kk)))+x(Jk*x(x(x(Fk*Tk)+x(Lk*Sk))+x(Kk*Rk))))+x(Gk*x(x(x(Fk*Qk)+x(Lk*Pk))+x(Kk*Ok))));Fk=x(x(Gk*Hk)-x(Ik*Ok));u[a+4>>2]=Fk;Gk=x(x(Jk*Ok)-x(Gk*Wk));u[a>>2]=Gk;Jk=x(x(Ek*Ek)+x(x(Gk*Gk)+x(Fk*Fk)));if(!!(Jk>x(Bj*Bj))){Bj=x(x(x(1)/x(E(Jk)))*Bj);u[a+8>>2]=Ek*Bj;u[a+4>>2]=Fk*Bj;u[a>>2]=Gk*Bj;}}function Vn(a,tj,Bj){a=a|0;tj=tj|0;Bj=x(Bj);var Xk=0,Yk=0;Xk=P-112|0;P=Xk;q[Xk+108>>2]=a;q[Xk+104>>2]=tj;u[Xk+100>>2]=Bj;tj=q[Xk+108>>2];if(o[tj+171|0]&1|!(+u[tj+172>>2]<=0)){o[tj+168|0]=n[q[q[tj>>2]+48>>2]](tj);u[tj+16>>2]=u[tj+16>>2]-x(u[tj+44>>2]*u[Xk+100>>2]);if(!(!(+u[tj+16>>2]>0)|!(u[tj+16>>2]>u[tj+28>>2]))){u[tj+16>>2]=u[tj+28>>2];}a:{if(!(+u[tj+16>>2]<0)){break a}a=P-16|0;u[a+12>>2]=u[tj+16>>2];Bj=x(y(u[a+12>>2]));a=P-16|0;u[a+12>>2]=u[tj+24>>2];if(!(Bj>x(y(u[a+12>>2])))){break a}a=P-16|0;u[a+12>>2]=u[tj+24>>2];u[tj+16>>2]=-x(y(u[a+12>>2]));}u[tj+20>>2]=u[tj+16>>2]*u[Xk+100>>2];a=Xk+32|0;ya(a);Yk=P-16|0;q[Yk+12>>2]=q[tj+8>>2];Rb(a,q[Yk+12>>2]+4|0);bs(tj,q[Xk+104>>2]);b:{if(o[tj+171|0]&1){qg(tj,q[Xk+104>>2],tj+60|0);break b}a=Xk;if(u[Xk+100>>2]<u[tj+172>>2]){Bj=u[Xk+100>>2];}else {Bj=u[tj+172>>2];}u[a+28>>2]=Bj;u[tj+172>>2]=u[tj+172>>2]-u[Xk+100>>2];a=Xk+8|0;sa(a,tj+60|0,Xk+28|0);qg(tj,q[Xk+104>>2],a);}ep(tj,q[Xk+104>>2],u[Xk+100>>2]);a=Xk+32|0;za(a,tj+92|0);Bc(q[tj+8>>2],a);}P=Xk+112|0;}function Wn(a,tj){var Bj=x(0),Zk=x(0),_k=x(0),$k=x(0),al=x(0),bl=x(0),cl=x(0),dl=x(0);cl=u[a+504>>2];Zk=Nc(x(x(1)-cl),tj);Bj=x(Zk*u[a+372>>2]);u[a+372>>2]=Bj;$k=x(Zk*u[a+376>>2]);u[a+376>>2]=$k;Zk=x(Zk*u[a+380>>2]);u[a+380>>2]=Zk;dl=u[a+508>>2];_k=Nc(x(x(1)-dl),tj);tj=x(_k*u[a+388>>2]);u[a+388>>2]=tj;al=x(_k*u[a+392>>2]);u[a+392>>2]=al;_k=x(_k*u[a+396>>2]);u[a+396>>2]=_k;a:{if(!r[a+512|0]){break a}if(!(x(x(x(tj*tj)+x(al*al))+x(_k*_k))<u[a+524>>2]^1|x(x(x(Bj*Bj)+x($k*$k))+x(Zk*Zk))<u[a+520>>2]^1)){bl=u[a+516>>2];_k=x(_k*bl);u[a+396>>2]=_k;al=x(al*bl);u[a+392>>2]=al;tj=x(tj*bl);u[a+388>>2]=tj;Zk=x(Zk*bl);u[a+380>>2]=Zk;$k=x($k*bl);u[a+376>>2]=$k;Bj=x(Bj*bl);u[a+372>>2]=Bj;}bl=x(E(x(x(x(Bj*Bj)+x($k*$k))+x(Zk*Zk))));b:{if(!(bl<cl)){break b}if(!!(bl>x(.004999999888241291))){cl=Zk;Zk=x(x(1)/bl);u[a+380>>2]=cl-x(x(cl*Zk)*x(.004999999888241291));u[a+376>>2]=$k-x(x($k*Zk)*x(.004999999888241291));u[a+372>>2]=Bj-x(x(Bj*Zk)*x(.004999999888241291));break b}q[a+372>>2]=0;q[a+376>>2]=0;q[a+380>>2]=0;q[a+384>>2]=0;}Bj=x(E(x(x(x(tj*tj)+x(al*al))+x(_k*_k))));if(!(Bj<dl)){break a}if(!!(Bj>x(.004999999888241291))){Bj=x(x(1)/Bj);u[a+396>>2]=_k-x(x(_k*Bj)*x(.004999999888241291));u[a+392>>2]=al-x(x(al*Bj)*x(.004999999888241291));u[a+388>>2]=tj-x(x(tj*Bj)*x(.004999999888241291));return}q[a+388>>2]=0;q[a+392>>2]=0;q[a+396>>2]=0;q[a+400>>2]=0;}}function Xn(a,tj){var el=0,fl=0,gl=x(0),hl=x(0),il=x(0),jl=x(0);fl=P-32|0;P=fl;if(tj!=x(0)){el=q[a+540>>2];if(el){n[q[q[el>>2]+8>>2]](el,a+4|0);}q[a+384>>2]=0;tj=x(x(1)/tj);u[a+380>>2]=tj*x(u[a+60>>2]-u[a+124>>2]);u[a+376>>2]=tj*x(u[a+56>>2]-u[a+120>>2]);u[a+372>>2]=tj*x(u[a+52>>2]-u[a+116>>2]);kb(a+68|0,a+4|0,fl+16|0,fl+12|0);hl=u[fl+16>>2];il=u[fl+20>>2];jl=u[fl+24>>2];gl=u[fl+12>>2];q[a+400>>2]=0;u[a+396>>2]=tj*x(gl*jl);u[a+392>>2]=tj*x(gl*il);u[a+388>>2]=tj*x(hl*gl);el=q[a+384>>2];q[a+140>>2]=q[a+380>>2];q[a+144>>2]=el;el=q[a+376>>2];q[a+132>>2]=q[a+372>>2];q[a+136>>2]=el;el=q[a+392>>2];q[a+148>>2]=q[a+388>>2];q[a+152>>2]=el;el=q[a+400>>2];q[a+156>>2]=q[a+396>>2];q[a+160>>2]=el;el=q[a+8>>2];q[a+68>>2]=q[a+4>>2];q[a+72>>2]=el;el=q[a+16>>2];q[a+76>>2]=q[a+12>>2];q[a+80>>2]=el;el=q[a+24>>2];q[a+84>>2]=q[a+20>>2];q[a+88>>2]=el;el=q[a+32>>2];q[a+92>>2]=q[a+28>>2];q[a+96>>2]=el;el=q[a+48>>2];q[a+108>>2]=q[a+44>>2];q[a+112>>2]=el;el=q[a+40>>2];q[a+100>>2]=q[a+36>>2];q[a+104>>2]=el;el=q[a+64>>2];q[a+124>>2]=q[a+60>>2];q[a+128>>2]=el;el=q[a+56>>2];q[a+116>>2]=q[a+52>>2];q[a+120>>2]=el;}P=fl+32|0;}function Yn(a,tj,kl){var ll=0;ll=P-16|0;u[ll+8>>2]=kl;u[ll+12>>2]=tj;q[ll+4>>2]=0;q[ll>>2]=1065353216;q[a+504>>2]=q[(tj<x(0)?ll+4|0:tj>x(1)?ll:ll+12|0)>>2];q[ll+4>>2]=0;q[ll>>2]=1065353216;q[a+508>>2]=q[(kl<x(0)?ll+4|0:kl>x(1)?ll:ll+8|0)>>2];}function Zn(a,tj){a=a|0;tj=tj|0;var kl=0,ml=0;kl=P-16|0;P=kl;q[kl+12>>2]=a;q[kl+8>>2]=tj;a=q[kl+12>>2];q[kl+4>>2]=0;o[a+148|0]=0;while(1){if(gu(a,q[kl+8>>2])&1){q[kl+4>>2]=q[kl+4>>2]+1;o[a+148|0]=1;if(q[kl+4>>2]<=4){continue}}break}tj=P-16|0;q[tj+12>>2]=q[a+8>>2];ml=P-16|0;q[ml+12>>2]=q[tj+12>>2]+4;tj=q[ml+12>>2]+48|0;ml=q[tj+4>>2];q[a+92>>2]=q[tj>>2];q[a+96>>2]=ml;ml=q[tj+12>>2];q[a+100>>2]=q[tj+8>>2];q[a+104>>2]=ml;tj=q[a+96>>2];q[a+112>>2]=q[a+92>>2];q[a+116>>2]=tj;tj=q[a+104>>2];q[a+120>>2]=q[a+100>>2];q[a+124>>2]=tj;P=kl+16|0;}function _n(a,tj){Mb(a);o[a+560|0]=1;q[a>>2]=2012;q[a+556>>2]=0;q[a+548>>2]=0;q[a+552>>2]=0;Yf(a,tj);}function $n(a,tj,nl){var ol=0;ol=P-32|0;P=ol;q[ol+28>>2]=a;q[ol+24>>2]=tj;q[ol+20>>2]=nl;tj=P-16|0;a=q[ol+28>>2];q[tj+12>>2]=a;q[ol+16>>2]=q[q[tj+12>>2]+4>>2];a:{if(q[ol+24>>2]<q[ol+16>>2]){q[ol+12>>2]=q[ol+24>>2];while(1){if(q[ol+12>>2]<q[ol+16>>2]){q[ol+12>>2]=q[ol+12>>2]+1;continue}break}break a}if(q[ol+24>>2]>q[ol+16>>2]){$f(a,q[ol+24>>2]);}q[ol+8>>2]=q[ol+16>>2];while(1){if(q[ol+8>>2]<q[ol+24>>2]){u[q[a+12>>2]+(q[ol+8>>2]<<2)>>2]=u[q[ol+20>>2]>>2];q[ol+8>>2]=q[ol+8>>2]+1;continue}break}}q[a+4>>2]=q[ol+24>>2];P=ol+32|0;}function ao(a,tj,nl){var pl=0,ql=0;pl=P-32|0;P=pl;q[pl+28>>2]=a;q[pl+24>>2]=tj;q[pl+20>>2]=nl;tj=P-16|0;a=q[pl+28>>2];q[tj+12>>2]=a;q[pl+16>>2]=q[q[tj+12>>2]+4>>2];a:{if(q[pl+24>>2]<q[pl+16>>2]){q[pl+12>>2]=q[pl+24>>2];while(1){if(q[pl+12>>2]<q[pl+16>>2]){q[pl+12>>2]=q[pl+12>>2]+1;continue}break}break a}if(q[pl+24>>2]>q[pl+16>>2]){ag(a,q[pl+24>>2]);}q[pl+8>>2]=q[pl+16>>2];while(1){if(q[pl+8>>2]<q[pl+24>>2]){nl=q[a+12>>2]+(q[pl+8>>2]<<4)|0;tj=P-16|0;q[tj+12>>2]=16;q[tj+8>>2]=nl;nl=q[pl+20>>2];ql=q[nl+4>>2];tj=q[tj+8>>2];q[tj>>2]=q[nl>>2];q[tj+4>>2]=ql;ql=q[nl+12>>2];q[tj+8>>2]=q[nl+8>>2];q[tj+12>>2]=ql;q[pl+8>>2]=q[pl+8>>2]+1;continue}break}}q[a+4>>2]=q[pl+24>>2];P=pl+32|0;}function bo(a,tj){var nl=0,rl=x(0),sl=x(0);nl=P-16|0;P=nl;q[nl+12>>2]=a;q[nl+8>>2]=tj;a=q[nl+12>>2];rl=u[a>>2];tj=P-16|0;q[tj+12>>2]=q[nl+8>>2];rl=x(rl*u[q[tj+12>>2]>>2]);sl=u[a+4>>2];tj=P-16|0;q[tj+12>>2]=q[nl+8>>2];rl=x(rl+x(sl*u[q[tj+12>>2]+4>>2]));sl=u[a+8>>2];tj=P-16|0;q[tj+12>>2]=q[nl+8>>2];P=nl+16|0;return x(x(rl+x(sl*u[q[tj+12>>2]+8>>2]))+x(u[a+12>>2]*u[q[nl+8>>2]+12>>2]))}function co(a){var tj=0,tl=x(0);tj=P-16|0;P=tj;q[tj+12>>2]=a;a=q[tj+12>>2];tl=bo(a,a);P=tj+16|0;return tl}function eo(a,ul){var vl=0,wl=x(0),xl=x(0);vl=P-32|0;P=vl;q[vl+28>>2]=a;q[vl+24>>2]=ul;a=q[vl+28>>2];wl=u[a+12>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];wl=x(x(wl*u[q[ul+12>>2]>>2])+x(u[a>>2]*u[q[vl+24>>2]+12>>2]));xl=u[a+4>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];wl=x(wl+x(xl*u[q[ul+12>>2]+8>>2]));xl=u[a+8>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];u[vl+20>>2]=wl-x(xl*u[q[ul+12>>2]+4>>2]);wl=u[a+12>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];wl=x(x(wl*u[q[ul+12>>2]+4>>2])+x(u[a+4>>2]*u[q[vl+24>>2]+12>>2]));xl=u[a+8>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];wl=x(wl+x(xl*u[q[ul+12>>2]>>2]));xl=u[a>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];u[vl+16>>2]=wl-x(xl*u[q[ul+12>>2]+8>>2]);wl=u[a+12>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];wl=x(x(wl*u[q[ul+12>>2]+8>>2])+x(u[a+8>>2]*u[q[vl+24>>2]+12>>2]));xl=u[a>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];wl=x(wl+x(xl*u[q[ul+12>>2]+4>>2]));xl=u[a+4>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];u[vl+12>>2]=wl-x(xl*u[q[ul+12>>2]>>2]);wl=x(u[a+12>>2]*u[q[vl+24>>2]+12>>2]);xl=u[a>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];wl=x(wl-x(xl*u[q[ul+12>>2]>>2]));xl=u[a+4>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];wl=x(wl-x(xl*u[q[ul+12>>2]+4>>2]));xl=u[a+8>>2];ul=P-16|0;q[ul+12>>2]=q[vl+24>>2];u[vl+8>>2]=wl-x(xl*u[q[ul+12>>2]+8>>2]);Td(a,vl+20|0,vl+16|0,vl+12|0,vl+8|0);P=vl+32|0;}function fo(a,ul){var yl=0;yl=P-16|0;P=yl;q[yl+12>>2]=ul;ul=q[yl+12>>2];u[yl+8>>2]=-u[ul>>2];u[yl+4>>2]=-u[ul+4>>2];u[yl>>2]=-u[ul+8>>2];Qb(a,yl+8|0,yl+4|0,yl,ul+12|0);P=yl+16|0;}function go(a,ul){a=a|0;ul=ul|0;var zl=0;zl=P-80|0;P=zl;q[zl+76>>2]=a;q[zl+72>>2]=ul;ul=q[zl+76>>2];a=zl+8|0;ya(a);Ba(a);za(a,q[zl+72>>2]);Bc(q[ul+8>>2],a);P=zl+80|0;}function ho(a,ul,Al){var Bl=0,Cl=x(0),Dl=x(0);Bl=P-32|0;P=Bl;q[Bl+28>>2]=ul;q[Bl+24>>2]=Al;ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Cl=u[q[ul+12>>2]+12>>2];ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];Cl=x(Cl*u[q[ul+12>>2]>>2]);ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Dl=u[q[ul+12>>2]+4>>2];ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];Cl=x(Cl+x(Dl*u[q[ul+12>>2]+8>>2]));ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Dl=u[q[ul+12>>2]+8>>2];ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];u[Bl+20>>2]=Cl-x(Dl*u[q[ul+12>>2]+4>>2]);ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Cl=u[q[ul+12>>2]+12>>2];ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];Cl=x(Cl*u[q[ul+12>>2]+4>>2]);ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Dl=u[q[ul+12>>2]+8>>2];ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];Cl=x(Cl+x(Dl*u[q[ul+12>>2]>>2]));ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Dl=u[q[ul+12>>2]>>2];ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];u[Bl+16>>2]=Cl-x(Dl*u[q[ul+12>>2]+8>>2]);ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Cl=u[q[ul+12>>2]+12>>2];ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];Cl=x(Cl*u[q[ul+12>>2]+8>>2]);ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Dl=u[q[ul+12>>2]>>2];ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];Cl=x(Cl+x(Dl*u[q[ul+12>>2]+4>>2]));ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Dl=u[q[ul+12>>2]+4>>2];ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];u[Bl+12>>2]=Cl-x(Dl*u[q[ul+12>>2]>>2]);ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Cl=x(-u[q[ul+12>>2]>>2]);ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];Cl=x(Cl*u[q[ul+12>>2]>>2]);ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Dl=u[q[ul+12>>2]+4>>2];ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];Cl=x(Cl-x(Dl*u[q[ul+12>>2]+4>>2]));ul=P-16|0;q[ul+12>>2]=q[Bl+28>>2];Dl=u[q[ul+12>>2]+8>>2];ul=P-16|0;q[ul+12>>2]=q[Bl+24>>2];u[Bl+8>>2]=Cl-x(Dl*u[q[ul+12>>2]+8>>2]);Qb(a,Bl+20|0,Bl+16|0,Bl+12|0,Bl+8|0);P=Bl+32|0;}function io(a,ul,Al){a=a|0;ul=ul|0;Al=Al|0;var El=0;El=P-32|0;P=El;q[El+28>>2]=a;q[El+24>>2]=ul;o[El+23|0]=Al;a=q[El+28>>2];ul=a;if(q[q[El+24>>2]+4>>2]){Al=q[q[q[El+24>>2]+4>>2]>>2];}else {Al=0;}q[ul+16>>2]=Al;u[a+4>>2]=u[q[El+24>>2]+24>>2];q[a+8>>2]=q[q[El+24>>2]>>2];a:{if(o[El+23|0]&1){ul=q[El+24>>2];Al=q[ul+12>>2];q[a+60>>2]=q[ul+8>>2];q[a+64>>2]=Al;Al=q[ul+20>>2];q[a+68>>2]=q[ul+16>>2];q[a+72>>2]=Al;break a}ul=P-16|0;q[ul+12>>2]=q[a+8>>2];Al=P-16|0;q[Al+12>>2]=q[ul+12>>2]+4;Ya(El,q[Al+12>>2],q[El+24>>2]+8|0);ul=q[El+4>>2];q[a+60>>2]=q[El>>2];q[a+64>>2]=ul;ul=q[El+12>>2];q[a+68>>2]=q[El+8>>2];q[a+72>>2]=ul;}yb(a+76|0,a+28|0,a+44|0,u[q[El+24>>2]+24>>2]);P=El+32|0;return x(u[q[El+24>>2]+24>>2])}function jo(a,ul){var Al=0;Al=P-16|0;P=Al;q[Al+12>>2]=a;q[Al+8>>2]=ul;q[Al+4>>2]=0;a=q[Al+8>>2]<<4;q[6657]=q[6657]+1;a=n[q[5255]](a,16)|0;P=Al+16|0;return a}function ko(a,ul){var Fl=0;Fl=P-16|0;P=Fl;q[Fl+8>>2]=a;q[Fl+4>>2]=ul;a=q[Fl+8>>2];a:{if(q[Fl+4>>2]){q[Fl+12>>2]=jo(a,q[Fl+4>>2]);break a}q[Fl+12>>2]=0;}P=Fl+16|0;return q[Fl+12>>2]}function lo(a,ul){var Gl=0,Hl=0;Hl=P-16|0;P=Hl;q[Hl+12>>2]=a;q[Hl+8>>2]=ul;ul=P-16|0;a=q[Hl+12>>2];q[ul+12>>2]=a;q[Hl+4>>2]=q[q[ul+12>>2]+4>>2];ul=q[Hl+4>>2];Gl=P-16|0;q[Gl+12>>2]=a;if(q[q[Gl+12>>2]+8>>2]==(ul|0)){Gl=P-16|0;q[Gl+12>>2]=a;ul=q[q[Gl+12>>2]+4>>2];Gl=P-16|0;q[Gl+12>>2]=a;q[Gl+8>>2]=ul;ul=a;if(q[Gl+8>>2]){Gl=q[Gl+8>>2]<<1;}else {Gl=1;}$f(ul,Gl);}u[q[a+12>>2]+(q[a+4>>2]<<2)>>2]=u[q[Hl+8>>2]>>2];q[a+4>>2]=q[a+4>>2]+1;P=Hl+16|0;}function mo(a,ul){a=a|0;ul=ul|0;var Il=0,Jl=0,Kl=0;Il=P-32|0;P=Il;q[Il+28>>2]=a;q[Il+24>>2]=ul;a=q[Il+28>>2];u[a+16>>2]=0;u[a+20>>2]=0;o[a+168|0]=0;o[a+169|0]=0;u[Il+20>>2]=0;u[Il+16>>2]=0;u[Il+12>>2]=0;ca(a+60|0,Il+20|0,Il+16|0,Il+12|0);u[a+172>>2]=0;ul=P-16|0;q[ul+12>>2]=q[a+8>>2];q[Il+8>>2]=q[q[ul+12>>2]+344>>2];while(1){a=q[Il+8>>2];a=n[q[q[a>>2]+28>>2]](a)|0;ul=P-16|0;q[ul+12>>2]=a;if(q[q[ul+12>>2]+4>>2]>0){ul=q[Il+8>>2];a=q[Il+8>>2];Kl=n[q[q[a>>2]+28>>2]](a)|0;a=P-16|0;q[a+12>>2]=Kl;q[a+8>>2]=0;Kl=q[q[q[a+12>>2]+12>>2]+(q[a+8>>2]<<4)>>2];a=q[Il+8>>2];Jl=n[q[q[a>>2]+28>>2]](a)|0;a=P-16|0;q[a+12>>2]=Jl;q[a+8>>2]=0;a=q[(q[q[a+12>>2]+12>>2]+(q[a+8>>2]<<4)|0)+4>>2];Jl=P-16|0;q[Jl+12>>2]=q[Il+24>>2];n[q[q[ul>>2]+12>>2]](ul,Kl,a,q[q[Jl+12>>2]+24>>2])|0;continue}break}P=Il+32|0;}function no(a,ul,Ll){a=a|0;ul=ul|0;Ll=Ll|0;var Ml=0;Ml=P-80|0;P=Ml;q[Ml+76>>2]=a;q[Ml+72>>2]=ul;o[Ml+71|0]=Ll;a=q[Ml+76>>2];q[a+8>>2]=q[q[Ml+72>>2]>>2];$c(a+28|0,q[Ml+72>>2]);q[(P-16|0)+12>>2]=Ml+48;a:{if(o[Ml+71|0]&1){ul=q[Ml+72>>2];Ll=q[ul+12>>2];q[Ml+48>>2]=q[ul+8>>2];q[Ml+52>>2]=Ll;Ll=q[ul+20>>2];q[Ml+56>>2]=q[ul+16>>2];q[Ml+60>>2]=Ll;break a}ul=P-16|0;q[ul+12>>2]=q[a+8>>2];Ll=P-16|0;q[Ll+12>>2]=q[ul+12>>2]+4;Ya(Ml+32|0,q[Ll+12>>2],q[Ml+72>>2]+8|0);ul=q[Ml+36>>2];q[Ml+48>>2]=q[Ml+32>>2];q[Ml+52>>2]=ul;ul=q[Ml+44>>2];q[Ml+56>>2]=q[Ml+40>>2];q[Ml+60>>2]=ul;}bg(a+80|0,Ml+48|0);ul=Ml+16|0;q[(P-16|0)+12>>2]=ul;yb(ul,a+48|0,a- -64|0,u[q[Ml+72>>2]+24>>2]);bg(a+100|0,ul);lo(a+120|0,q[Ml+72>>2]+24|0);b:{if(q[q[Ml+72>>2]+4>>2]){$c(a+140|0,q[q[Ml+72>>2]+4>>2]);break b}q[Ml+12>>2]=0;$c(a+140|0,Ml+12|0);}P=Ml+80|0;return x(u[a+4>>2])}function oo(a,ul){a=a|0;ul=ul|0;var Ll=0;Ll=P-16|0;q[Ll+8>>2]=a;q[Ll+4>>2]=ul;ul=q[Ll+8>>2];a:{if(o[ul+24|0]&1){o[Ll+15|0]=(q[q[Ll+4>>2]+4>>2]&p[ul+14>>1])!=0;break a}o[Ll+3|0]=(q[q[Ll+4>>2]+4>>2]&p[ul+14>>1])!=0;o[Ll+3|0]=o[Ll+3|0]&1?(p[ul+12>>1]&q[q[Ll+4>>2]+8>>2])!=0:0;o[Ll+15|0]=o[Ll+3|0]&1;}return o[Ll+15|0]&1}function po(a){a=a|0;var ul=0;ul=P-16|0;P=ul;q[ul+12>>2]=a;a=q[ul+12>>2];cg(a);aa(a);P=ul+16|0;}function qo(a,Nl,Ol,Pl,Ql){var Rl=0;Rl=P-32|0;P=Rl;q[Rl+28>>2]=Nl;q[Rl+24>>2]=Ol;q[Rl+20>>2]=Pl;q[Rl+16>>2]=Ql;Nl=q[Rl+28>>2];u[Rl+12>>2]=ta(Nl,q[Rl+24>>2]);u[Rl+8>>2]=ta(Nl,q[Rl+20>>2]);u[Rl+4>>2]=ta(Nl,q[Rl+16>>2]);ca(a,Rl+12|0,Rl+8|0,Rl+4|0);P=Rl+32|0;}function ro(a,Nl){a=a|0;Nl=Nl|0;var Ol=0;Ol=P-80|0;P=Ol;q[Ol+76>>2]=a;q[Ol+72>>2]=Nl;a=Ol+8|0;Nl=q[Ol+76>>2];dg(a,q[Ol+72>>2],Nl+68|0);Rb(Nl+4|0,a);P=Ol+80|0;}function so(a,Nl,Pl){a=a|0;Nl=Nl|0;Pl=x(Pl);var Ql=0,Sl=0;Ql=P-32|0;P=Ql;q[Ql+28>>2]=a;q[Ql+24>>2]=Nl;u[Ql+20>>2]=Pl;a=q[Ql+28>>2];o[a+171|0]=0;Nl=q[Ql+24>>2];Sl=q[Nl+4>>2];q[a+60>>2]=q[Nl>>2];q[a+64>>2]=Sl;Sl=q[Nl+12>>2];q[a+68>>2]=q[Nl+8>>2];q[a+72>>2]=Sl;kg(Ql,a+60|0);Nl=q[Ql+4>>2];q[a+76>>2]=q[Ql>>2];q[a+80>>2]=Nl;Nl=q[Ql+12>>2];q[a+84>>2]=q[Ql+8>>2];q[a+88>>2]=Nl;u[a+172>>2]=u[a+172>>2]+u[Ql+20>>2];P=Ql+32|0;}function to(a,Nl){a=a|0;Nl=Nl|0;var Pl=0,Tl=0;Pl=P-144|0;P=Pl;q[Pl+140>>2]=a;q[Pl+136>>2]=Nl;a=Pl+8|0;Nl=q[Pl+140>>2];Od(a,Nl+68|0);Tl=Pl+72|0;dg(Tl,Nl+4|0,a);Rb(q[Pl+136>>2],Tl);P=Pl+144|0;}function uo(a,Nl,Ul){var Vl=0;Vl=P-16|0;P=Vl;q[Vl+12>>2]=a;u[Vl+8>>2]=Nl;u[Vl+4>>2]=Ul;a=q[Vl+12>>2];u[Vl>>2]=u[Vl+4>>2]*u[Vl+8>>2];if(u[Vl>>2]<x(n[q[q[a>>2]+48>>2]](a))){n[q[q[a>>2]+44>>2]](a,u[Vl>>2]);}P=Vl+16|0;}function vo(a){var Nl=0;Nl=P-16|0;q[Nl+12>>2]=a;a=q[Nl+12>>2];a:{if(u[a>>2]<u[a+4>>2]){a=u[a>>2]<u[a+8>>2]?0:2;break a}a=u[a+4>>2]<u[a+8>>2]?1:2;}return a}function wo(a,Ul,Wl){a=a|0;Ul=Ul|0;Wl=Wl|0;var Xl=0;Xl=P-32|0;P=Xl;q[Xl+24>>2]=a;q[Xl+20>>2]=Ul;q[Xl+16>>2]=Wl;o[Xl+15|0]=(q[q[Xl+20>>2]+4>>2]&q[q[Xl+16>>2]+8>>2])!=0;o[Xl+15|0]=o[Xl+15|0]&1?(q[q[Xl+16>>2]+4>>2]&q[q[Xl+20>>2]+8>>2])!=0:0;a:{if(o[Xl+15|0]&1){q[Xl+8>>2]=q[q[Xl+20>>2]>>2];q[Xl+4>>2]=q[q[Xl+16>>2]>>2];a=P-16|0;q[a+12>>2]=q[Xl+8>>2];b:{if(!(q[q[a+12>>2]+204>>2]&1)){break b}a=P-16|0;q[a+12>>2]=q[Xl+4>>2];if(!(q[q[a+12>>2]+204>>2]&1)){break b}o[Xl+31|0]=0;break a}a=P-16|0;q[a+12>>2]=q[Xl+8>>2];c:{if(q[q[a+12>>2]+220>>2]!=2){break c}a=P-16|0;q[a+12>>2]=q[Xl+4>>2];if(q[q[a+12>>2]+220>>2]!=2){break c}o[Xl+31|0]=0;break a}}o[Xl+31|0]=o[Xl+15|0]&1;}P=Xl+32|0;return o[Xl+31|0]&1}function xo(a){var q=0;q=P-16|0;P=q;u[q+12>>2]=a;u[q+8>>2]=6.2831854820251465;a=ea(u[q+12>>2],u[q+8>>2]);P=q+16|0;return a}function yo(a,Ul,Wl){var Yl=0;Yl=P-16|0;q[Yl+12>>2]=a;q[Yl+8>>2]=Ul;q[Yl+4>>2]=Wl;a=q[Yl+12>>2];q[Yl>>2]=q[q[a+12>>2]+(q[Yl+8>>2]<<2)>>2];q[q[a+12>>2]+(q[Yl+8>>2]<<2)>>2]=q[q[a+12>>2]+(q[Yl+4>>2]<<2)>>2];q[q[a+12>>2]+(q[Yl+4>>2]<<2)>>2]=q[Yl>>2];}function zo(a,Ul){var Wl=0;Wl=P-16|0;P=Wl;q[Wl+12>>2]=a;q[Wl+8>>2]=Ul;a=q[Wl+8>>2];if(a){q[6658]=q[6658]+1;n[q[5256]](a);}P=Wl+16|0;}function Ao(a,Ul){var Zl=0,_l=0,$l=0;_l=P-32|0;P=_l;q[_l+28>>2]=Ul;Zl=q[_l+28>>2];$l=q[Zl+4>>2];Ul=_l+8|0;q[Ul>>2]=q[Zl>>2];q[Ul+4>>2]=$l;$l=q[Zl+12>>2];q[Ul+8>>2]=q[Zl+8>>2];q[Ul+12>>2]=$l;Ul=wc(Ul);Zl=q[Ul+4>>2];q[a>>2]=q[Ul>>2];q[a+4>>2]=Zl;Zl=q[Ul+12>>2];q[a+8>>2]=q[Ul+8>>2];q[a+12>>2]=Zl;P=_l+32|0;}function Bo(a,Ul){var am=0;am=P-16|0;P=am;q[am+12>>2]=a;q[am+8>>2]=Ul;q[am+4>>2]=0;a=q[am+8>>2]<<2;q[6657]=q[6657]+1;a=n[q[5255]](a,16)|0;P=am+16|0;return a}function Co(a,Ul){var bm=0,cm=0;bm=P-16|0;P=bm;q[bm+12>>2]=a;q[bm+8>>2]=Ul;Ul=q[bm+8>>2];cm=P-16|0;a=q[bm+12>>2];q[cm+12>>2]=a;if((Ul|0)<q[q[cm+12>>2]+4>>2]){Ul=q[bm+8>>2];cm=P-16|0;q[cm+12>>2]=a;yo(a,Ul,q[q[cm+12>>2]+4>>2]-1|0);Ul=P-16|0;q[Ul+12>>2]=a;a=q[Ul+12>>2];q[a+4>>2]=q[a+4>>2]+ -1;}P=bm+16|0;}function Do(a,Ul){var dm=0,em=0;dm=P-16|0;P=dm;q[dm+12>>2]=a;q[dm+8>>2]=Ul;Ul=P-16|0;a=q[dm+12>>2];q[Ul+12>>2]=a;q[dm+4>>2]=q[q[Ul+12>>2]+4>>2];q[dm>>2]=0;while(1){Ul=q[dm>>2];em=P-16|0;q[em+12>>2]=a;if((Ul|0)<q[q[em+12>>2]+4>>2]){if(q[q[a+12>>2]+(q[dm>>2]<<2)>>2]==q[q[dm+8>>2]>>2]){q[dm+4>>2]=q[dm>>2];}else {q[dm>>2]=q[dm>>2]+1;continue}}break}P=dm+16|0;return q[dm+4>>2]}function Eo(a,Ul){var fm=0;fm=P-16|0;q[fm+12>>2]=a;q[fm+8>>2]=Ul;a=q[fm+12>>2];u[a>>2]=u[a>>2]*u[q[fm+8>>2]>>2];u[a+4>>2]=u[a+4>>2]*u[q[fm+8>>2]>>2];u[a+8>>2]=u[a+8>>2]*u[q[fm+8>>2]>>2];return a}function Fo(a,Ul,gm){a=a|0;Ul=Ul|0;gm=gm|0;var hm=0;hm=P+ -64|0;P=hm;q[hm+56>>2]=a;q[hm+52>>2]=Ul;o[hm+51|0]=gm;a=q[hm+56>>2];a:{if(q[q[hm+52>>2]>>2]==q[a+84>>2]){u[hm+60>>2]=1;break a}Ul=P-16|0;q[Ul+12>>2]=q[q[hm+52>>2]>>2];if(q[q[Ul+12>>2]+204>>2]&4){u[hm+60>>2]=1;break a}q[(P-16|0)+12>>2]=hm+32;b:{if(o[hm+51|0]&1){Ul=q[hm+52>>2];gm=q[Ul+12>>2];q[hm+32>>2]=q[Ul+8>>2];q[hm+36>>2]=gm;gm=q[Ul+20>>2];q[hm+40>>2]=q[Ul+16>>2];q[hm+44>>2]=gm;break b}Ul=P-16|0;q[Ul+12>>2]=q[q[hm+52>>2]>>2];gm=P-16|0;q[gm+12>>2]=q[Ul+12>>2]+4;Ya(hm+16|0,q[gm+12>>2],q[hm+52>>2]+8|0);Ul=q[hm+20>>2];q[hm+32>>2]=q[hm+16>>2];q[hm+36>>2]=Ul;Ul=q[hm+28>>2];q[hm+40>>2]=q[hm+24>>2];q[hm+44>>2]=Ul;}u[hm+12>>2]=ta(a+88|0,hm+32|0);if(u[hm+12>>2]<u[a+104>>2]){u[hm+60>>2]=1;break a}u[hm+60>>2]=jg(a,q[hm+52>>2],o[hm+51|0]&1);}P=hm- -64|0;return x(u[hm+60>>2])}function Go(a,Ul){a=a|0;Ul=Ul|0;var gm=0;gm=P-16|0;q[gm+12>>2]=a;q[gm+8>>2]=Ul;Ul=q[gm+12>>2];o[gm+7|0]=(q[q[gm+8>>2]+4>>2]&q[Ul+12>>2])!=0;o[gm+7|0]=o[gm+7|0]&1?(q[Ul+8>>2]&q[q[gm+8>>2]+8>>2])!=0:0;return o[gm+7|0]&1}function Ho(a){a=a|0;var Ul=0;Ul=P-16|0;P=Ul;q[Ul+12>>2]=a;a=q[Ul+12>>2];xb(a);aa(a);P=Ul+16|0;}function Io(a){var im=0;im=P-16|0;q[im+12>>2]=a;a=q[im+12>>2];q[a>>2]=1528;u[a+4>>2]=1;q[a+8>>2]=1;q[a+12>>2]=-1;}function Jo(a,jm,km){a=a|0;jm=jm|0;km=x(km);var lm=0;lm=P-16|0;P=lm;q[lm+12>>2]=a;q[lm+8>>2]=jm;u[lm+4>>2]=km;a=q[lm+12>>2];n[q[q[a>>2]+32>>2]](a,q[lm+8>>2]);n[q[q[a>>2]+36>>2]](a,q[lm+8>>2],u[lm+4>>2]);P=lm+16|0;}function Ko(){return 5}function Lo(){return 0}function Mo(a,jm){a=a|0;jm=jm|0;var km=0,mm=0;km=P-32|0;P=km;q[km+28>>2]=a;q[km+24>>2]=jm;jm=q[km+28>>2];o[jm+171|0]=1;a=q[km+24>>2];mm=q[a+4>>2];q[jm+60>>2]=q[a>>2];q[jm+64>>2]=mm;mm=q[a+12>>2];q[jm+68>>2]=q[a+8>>2];q[jm+72>>2]=mm;a=km+8|0;kg(a,jm+60|0);mm=q[a+4>>2];q[jm+76>>2]=q[a>>2];q[jm+80>>2]=mm;mm=q[a+12>>2];q[jm+84>>2]=q[a+8>>2];q[jm+88>>2]=mm;P=km+32|0;}function No(a,jm,nm,om){var pm=0;pm=P+ -64|0;P=pm;q[pm+60>>2]=a;u[pm+56>>2]=jm;u[pm+52>>2]=nm;q[pm+48>>2]=om;a=q[pm+60>>2];q[a+56>>2]=q[pm+48>>2];u[pm+44>>2]=1;u[pm+40>>2]=1;u[pm+36>>2]=1;ca(a+16|0,pm+44|0,pm+40|0,pm+36|0);a:{if(q[a+56>>2]==1){om=pm+56|0;ca(a+32|0,om,pm+52|0,om);break a}b:{if(!q[a+56>>2]){om=pm+56|0;ca(a+32|0,pm+52|0,om,om);break b}om=pm+56|0;ca(a+32|0,om,om,pm+52|0);}}u[pm+12>>2]=n[q[q[a>>2]+48>>2]](a);u[pm+8>>2]=n[q[q[a>>2]+48>>2]](a);u[pm+4>>2]=n[q[q[a>>2]+48>>2]](a);om=pm+16|0;ca(om,pm+12|0,pm+8|0,pm+4|0);vc(a+32|0,om);P=pm- -64|0;}function Oo(a,jm,nm,om){a=a|0;jm=x(jm);nm=x(nm);om=om|0;var qm=0;qm=P-16|0;P=qm;q[qm+12>>2]=a;u[qm+8>>2]=jm;u[qm+4>>2]=nm;q[qm>>2]=om;No(q[qm+12>>2],u[qm+8>>2],u[qm+4>>2],q[qm>>2]);P=qm+16|0;}function Po(a){a=a|0;var jm=0;jm=P-16|0;P=jm;q[jm+12>>2]=a;a=Z(60);ox(a,q[jm+12>>2]);P=jm+16|0;return a|0}function Qo(a,nm){var om=0;om=P-48|0;P=om;q[om+44>>2]=a;q[om+40>>2]=nm;a=q[om+44>>2];u[om+36>>2]=vb(q[om+40>>2],a);u[om+32>>2]=ub(q[om+40>>2],a);u[om+28>>2]=tb(q[om+40>>2],a);u[om+24>>2]=vb(q[om+40>>2],a+16|0);u[om+20>>2]=ub(q[om+40>>2],a+16|0);u[om+16>>2]=tb(q[om+40>>2],a+16|0);u[om+12>>2]=vb(q[om+40>>2],a+32|0);u[om+8>>2]=ub(q[om+40>>2],a+32|0);u[om+4>>2]=tb(q[om+40>>2],a+32|0);zb(a,om+36|0,om+32|0,om+28|0,om+24|0,om+20|0,om+16|0,om+12|0,om+8|0,om+4|0);P=om+48|0;}function Ro(a,nm){var rm=0;rm=P-32|0;P=rm;q[rm+28>>2]=a;q[rm+24>>2]=nm;nm=rm+8|0;a=q[rm+28>>2];Ya(nm,a,q[rm+24>>2]+48|0);Za(a+48|0,nm);Qo(a,q[rm+24>>2]);P=rm+32|0;return a}function So(a,nm){a=a|0;nm=nm|0;var sm=0;sm=P-16|0;P=sm;q[sm+12>>2]=a;q[sm+8>>2]=nm;a=Ro(q[sm+12>>2],q[sm+8>>2]);P=sm+16|0;return a|0}function To(a,nm){var tm=0,um=0,vm=0,wm=0,xm=0,ym=0,zm=0,Am=0,Bm=0,Cm=0;tm=P-16|0;P=tm;q[tm+12>>2]=a;q[tm+8>>2]=nm;um=P-16|0;nm=q[tm+8>>2];q[um+12>>2]=nm;um=q[um+12>>2];vm=P-16|0;q[vm+12>>2]=nm+16;vm=q[vm+12>>2];wm=P-16|0;q[wm+12>>2]=nm+32;wm=q[wm+12>>2];xm=P-16|0;q[xm+12>>2]=nm;xm=q[xm+12>>2]+4|0;ym=P-16|0;q[ym+12>>2]=nm+16;ym=q[ym+12>>2]+4|0;zm=P-16|0;q[zm+12>>2]=nm+32;zm=q[zm+12>>2]+4|0;Am=P-16|0;q[Am+12>>2]=nm;Am=q[Am+12>>2]+8|0;Bm=P-16|0;q[Bm+12>>2]=nm+16;Bm=q[Bm+12>>2]+8|0;Cm=P-16|0;q[Cm+12>>2]=nm+32;uc(a,um,vm,wm,xm,ym,zm,Am,Bm,q[Cm+12>>2]+8|0);P=tm+16|0;}function Uo(a){a=a|0;var nm=0;nm=P-80|0;P=nm;q[nm+76>>2]=a;if(!(!!(r[21616]!=0)|o[21616]&1)){ya(21552);q[5404]=0;q[5404]=q[5404]|1;}Od(nm,q[nm+76>>2]);Rb(21552,nm);P=nm+80|0;return 21552}function Vo(a){a=a|0;var Dm=0;Dm=P-16|0;P=Dm;q[Dm+12>>2]=a;a=P-16|0;q[a+12>>2]=q[Dm+12>>2];P=Dm+16|0;return q[a+12>>2]}function Wo(a,Em){var Fm=0;Fm=P-16|0;P=Fm;q[Fm+12>>2]=Em;Em=q[Fm+12>>2];Ca(a);ja(Em,a);P=Fm+16|0;}function Xo(a){a=a|0;var Em=0;Em=P-32|0;P=Em;q[Em+28>>2]=a;if(!(!!(r[21548]!=0)|o[21548]&1)){Ca(21532);q[5387]=0;q[5387]=q[5387]|1;}Wo(Em,q[Em+28>>2]);a=q[Em+4>>2];q[5383]=q[Em>>2];q[5384]=a;a=q[Em+12>>2];q[5385]=q[Em+8>>2];q[5386]=a;P=Em+32|0;return 21532}function Yo(a,Gm){var Hm=0;Hm=P-16|0;P=Hm;q[Hm+12>>2]=a;q[Hm+8>>2]=Gm;pg(q[Hm+12>>2],q[Hm+8>>2]);P=Hm+16|0;}function Zo(a,Gm){a=a|0;Gm=Gm|0;var Im=0;Im=P-16|0;P=Im;q[Im+12>>2]=a;q[Im+8>>2]=Gm;Yo(q[Im+12>>2],q[Im+8>>2]);P=Im+16|0;}function _o(a,Gm){a=a|0;Gm=Gm|0;var Jm=0;Jm=P-16|0;P=Jm;q[Jm+12>>2]=a;q[Jm+8>>2]=Gm;za(q[Jm+12>>2],q[Jm+8>>2]);P=Jm+16|0;}function $o(a){a=a|0;var Gm=0;Gm=P-16|0;P=Gm;q[Gm+12>>2]=a;Ba(q[Gm+12>>2]);P=Gm+16|0;}function ap(a,Km){var Lm=0,Mm=0;Lm=P-16|0;P=Lm;q[Lm+8>>2]=a;q[Lm+4>>2]=Km;a=q[Lm+8>>2];q[Lm+12>>2]=a;Mm=a+48|0;Km=a;while(1){q[(P-16|0)+12>>2]=Km;Km=Km+16|0;if((Mm|0)!=(Km|0)){continue}break}pg(a,q[Lm+4>>2]);P=Lm+16|0;}function bp(a,Km,Nm){var Om=0;Om=P-16|0;P=Om;q[Om+12>>2]=a;q[Om+8>>2]=Km;q[Om+4>>2]=Nm;a=q[Om+12>>2];ap(a,q[Om+8>>2]);Km=q[Om+4>>2];Nm=q[Km+4>>2];q[a+48>>2]=q[Km>>2];q[a+52>>2]=Nm;Nm=q[Km+12>>2];q[a+56>>2]=q[Km+8>>2];q[a+60>>2]=Nm;P=Om+16|0;}function cp(a,Km){a=a|0;Km=Km|0;var Nm=0;Nm=P-16|0;P=Nm;q[Nm+12>>2]=a;q[Nm+8>>2]=Km;a=xa(64);bp(a,q[Nm+12>>2],q[Nm+8>>2]);P=Nm+16|0;return a|0}function dp(){var a=0,Km=0;a=P-16|0;P=a;Km=xa(64);ya(Km);P=a+16|0;return Km|0}function ep(Pm,Qm,Rm){var Sm=0,Tm=0,Um=0;Sm=P-560|0;P=Sm;q[Sm+556>>2]=Pm;q[Sm+552>>2]=Qm;u[Sm+548>>2]=Rm;Qm=q[Sm+556>>2];ya(Sm+480|0);ya(Sm+416|0);ya(Sm+352|0);o[Sm+351|0]=0;Pm=q[Qm+116>>2];q[Sm+328>>2]=q[Qm+112>>2];q[Sm+332>>2]=Pm;Pm=q[Qm+124>>2];q[Sm+336>>2]=q[Qm+120>>2];q[Sm+340>>2]=Pm;Pm=Sm;if(u[Qm+16>>2]<x(0)){Rm=x(-u[Qm+16>>2]);}else {Rm=x(0);}u[Pm+324>>2]=Rm*u[Sm+548>>2];if(!(!(+u[Sm+324>>2]>0)|!(u[Sm+324>>2]>u[Qm+24>>2])|(o[Qm+169|0]&1?!(o[Qm+168|0]&1):0))){u[Sm+324>>2]=u[Qm+24>>2];}Pm=Ra()+(q[Qm+176>>2]<<4)|0;u[Sm+300>>2]=u[Qm+108>>2]+u[Sm+324>>2];Tm=Sm+304|0;sa(Tm,Pm,Sm+300|0);vc(Qm+112|0,Tm);yc(Sm+192|0,q[Qm+8>>2],Ra()+(q[Qm+176>>2]<<4)|0,u[Qm+40>>2]);Pm=P-16|0;q[Pm+12>>2]=Qm;Tm=P-16|0;q[Tm+12>>2]=q[q[Pm+12>>2]+8>>2];q[Sm+200>>2]=q[q[q[Tm+12>>2]+188>>2]+4>>2];Pm=P-16|0;q[Pm+12>>2]=Qm;Tm=P-16|0;q[Tm+12>>2]=q[q[Pm+12>>2]+8>>2];q[Sm+204>>2]=q[q[q[Tm+12>>2]+188>>2]+8>>2];yc(Sm+72|0,q[Qm+8>>2],Ra()+(q[Qm+176>>2]<<4)|0,u[Qm+40>>2]);Pm=P-16|0;q[Pm+12>>2]=Qm;Tm=P-16|0;q[Tm+12>>2]=q[q[Pm+12>>2]+8>>2];q[Sm+80>>2]=q[q[q[Tm+12>>2]+188>>2]+4>>2];Pm=P-16|0;q[Pm+12>>2]=Qm;Tm=P-16|0;q[Tm+12>>2]=q[q[Pm+12>>2]+8>>2];q[Sm+84>>2]=q[q[q[Tm+12>>2]+188>>2]+8>>2];while(1){Ba(Sm+480|0);Ba(Sm+416|0);Ba(Sm+352|0);za(Sm+480|0,Qm+92|0);za(Sm+416|0,Qm+112|0);Ka(Sm+56|0,Qm+112|0,Sm+304|0);za(Sm+352|0,Sm+56|0);a:{if(o[Qm+170|0]&1){Pm=q[Qm+8>>2];Tm=q[Qm+12>>2];Um=P-16|0;q[Um+12>>2]=q[Sm+552>>2];Ta(Pm,Tm,Sm+480|0,Sm+416|0,Sm+192|0,u[(q[Um+12>>2]+28|0)+28>>2]);Pm=P-16|0;q[Pm+12>>2]=Sm+192;if(!(u[q[Pm+12>>2]+4>>2]<x(1))){Pm=q[Qm+8>>2];Tm=q[Qm+12>>2];Um=P-16|0;q[Um+12>>2]=q[Sm+552>>2];Ta(Pm,Tm,Sm+480|0,Sm+352|0,Sm+72|0,u[(q[Um+12>>2]+28|0)+28>>2]);}break a}Pm=q[Sm+552>>2];Tm=q[Qm+12>>2];Um=P-16|0;q[Um+12>>2]=q[Sm+552>>2];La(Pm,Tm,Sm+480|0,Sm+416|0,Sm+192|0,u[(q[Um+12>>2]+28|0)+28>>2]);Pm=P-16|0;q[Pm+12>>2]=Sm+192;if(!(u[q[Pm+12>>2]+4>>2]<x(1))){Pm=q[Sm+552>>2];Tm=q[Qm+12>>2];Um=P-16|0;q[Um+12>>2]=q[Sm+552>>2];La(Pm,Tm,Sm+480|0,Sm+352|0,Sm+72|0,u[(q[Um+12>>2]+28|0)+28>>2]);}}Pm=Sm;if(u[Qm+16>>2]<x(0)){Rm=x(-u[Qm+16>>2]);}else {Rm=x(0);}u[Pm+52>>2]=Rm*u[Sm+548>>2];o[Sm+51|0]=0;b:{if((o[Qm+182|0]&1)==1){Pm=Sm;Tm=P-16|0;q[Tm+12>>2]=Sm+192;c:{if(!(u[q[Tm+12>>2]+4>>2]<x(1))){Um=P-16|0;q[Um+12>>2]=Sm+72;Tm=0;if(!(u[q[Um+12>>2]+4>>2]<x(1))){break c}}Um=P-16|0;q[Um+12>>2]=q[Qm+8>>2];Tm=0;if(q[q[Um+12>>2]+204>>2]&4){break c}Tm=n[q[q[Qm>>2]+56>>2]](Qm,q[Qm+8>>2],q[Sm+272>>2])|0;}o[Pm+51|0]=Tm&1;break b}Pm=Sm;Um=P-16|0;q[Um+12>>2]=Sm+72;Tm=0;d:{if(!(u[q[Um+12>>2]+4>>2]<x(1))){break d}Um=P-16|0;q[Um+12>>2]=q[Qm+8>>2];Tm=0;if(q[q[Um+12>>2]+204>>2]&4){break d}Tm=n[q[q[Qm>>2]+56>>2]](Qm,q[Qm+8>>2],q[Sm+152>>2])|0;}o[Pm+51|0]=Tm&1;}e:{if(!(+u[Sm+52>>2]>0)|!(u[Sm+52>>2]<u[Qm+52>>2])|(o[Sm+351|0]&1|(o[Sm+51|0]&1)!=1)){break e}if(o[Qm+169|0]&1?!(o[Qm+168|0]&1):0){break e}Pm=q[Sm+332>>2];q[Qm+112>>2]=q[Sm+328>>2];q[Qm+116>>2]=Pm;Pm=q[Sm+340>>2];q[Qm+120>>2]=q[Sm+336>>2];q[Qm+124>>2]=Pm;u[Sm+324>>2]=u[Qm+52>>2];Pm=Ra()+(q[Qm+176>>2]<<4)|0;u[Sm+28>>2]=u[Qm+108>>2]+u[Sm+324>>2];sa(Sm+32|0,Pm,Sm+28|0);vc(Qm+112|0,Sm+32|0);o[Sm+351|0]=1;continue}break}f:{g:{if((o[Sm+351|0]&1)!=1){Pm=P-16|0;q[Pm+12>>2]=q[Qm+8>>2];if(q[q[Pm+12>>2]+204>>2]&4){break g}Pm=P-16|0;q[Pm+12>>2]=Sm+192;if(!(u[q[Pm+12>>2]+4>>2]<x(1))){break g}if(!(n[q[q[Qm>>2]+56>>2]](Qm,q[Qm+8>>2],q[Sm+272>>2])&1)){break g}}Pm=P-16|0;q[Pm+12>>2]=Qm+92;Rm=u[q[Pm+12>>2]+4>>2];Pm=P-16|0;q[Pm+12>>2]=Sm+256;u[Sm+24>>2]=x(Rm-u[q[Pm+12>>2]+4>>2])/x(2);h:{if((o[Qm+182|0]&1)==1){if((o[Qm+181|0]&1)==1){yb(Qm+92|0,Qm+92|0,Qm+112|0,u[Sm+196>>2]);break h}yb(Qm+92|0,Qm+92|0,Qm+112|0,u[Sm+24>>2]);break h}yb(Qm+92|0,Qm+92|0,Qm+112|0,u[Sm+196>>2]);}o[Qm+181|0]=0;u[Qm+16>>2]=0;u[Qm+20>>2]=0;o[Qm+169|0]=0;break f}o[Qm+181|0]=1;if((o[Qm+182|0]&1)==1){Pm=Sm;if(u[Qm+16>>2]<x(0)){Rm=x(-u[Qm+16>>2]);}else {Rm=x(0);}u[Pm+324>>2]=Rm*u[Sm+548>>2];if(!(!(u[Sm+324>>2]>u[Qm+24>>2])|(o[Qm+169|0]&1?!(o[Qm+168|0]&1):0))){Za(Qm+112|0,Sm+304|0);u[Sm+324>>2]=u[Qm+24>>2];Pm=Ra()+(q[Qm+176>>2]<<4)|0;u[Sm+4>>2]=u[Qm+108>>2]+u[Sm+324>>2];sa(Sm+8|0,Pm,Sm+4|0);Tm=q[Sm+12>>2];Pm=Sm+304|0;q[Pm>>2]=q[Sm+8>>2];q[Pm+4>>2]=Tm;Tm=q[Sm+20>>2];q[Pm+8>>2]=q[Sm+16>>2];q[Pm+12>>2]=Tm;vc(Qm+112|0,Pm);}}Pm=q[Qm+116>>2];q[Qm+92>>2]=q[Qm+112>>2];q[Qm+96>>2]=Pm;Pm=q[Qm+124>>2];q[Qm+100>>2]=q[Qm+120>>2];q[Qm+104>>2]=Pm;}xb(Sm+72|0);xb(Sm+192|0);P=Sm+560|0;}function fp(Pm,Qm){Pm=Pm|0;Qm=Qm|0;var Rm=0;Rm=P-16|0;P=Rm;q[Rm+12>>2]=Pm;q[Rm+8>>2]=Qm;Qm=q[Rm+8>>2];Pm=P-16|0;q[Pm+12>>2]=q[Rm+12>>2];q[Pm+8>>2]=Qm;P=Rm+16|0;return q[q[Pm+12>>2]+12>>2]+(q[Pm+8>>2]<<5)|0}function gp(Pm){var Qm=0;Qm=P+ -64|0;P=Qm;q[Qm+60>>2]=Pm;Pm=q[Qm+60>>2];u[Qm+56>>2]=0;u[Qm+52>>2]=0;u[Qm+48>>2]=0;ca(Pm+372|0,Qm+56|0,Qm+52|0,Qm+48|0);u[Qm+44>>2]=0;u[Qm+40>>2]=0;u[Qm+36>>2]=0;ca(Pm+388|0,Qm+44|0,Qm+40|0,Qm+36|0);u[Qm+32>>2]=0;u[Qm+28>>2]=0;u[Qm+24>>2]=0;ca(Pm+472|0,Qm+32|0,Qm+28|0,Qm+24|0);u[Qm+20>>2]=0;u[Qm+16>>2]=0;u[Qm+12>>2]=0;ca(Pm+488|0,Qm+20|0,Qm+16|0,Qm+12|0);P=Qm- -64|0;}function hp(Pm){Pm=Pm|0;var Vm=0;Vm=P-16|0;P=Vm;q[Vm+12>>2]=Pm;gp(q[Vm+12>>2]);P=Vm+16|0;}function ip(Pm){Pm=Pm|0;var Wm=0;Wm=P-16|0;P=Wm;q[Wm+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[Wm+12>>2];P=Wm+16|0;return q[Pm+12>>2]+488|0}function jp(Pm){Pm=Pm|0;var Xm=0;Xm=P-16|0;P=Xm;q[Xm+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[Xm+12>>2];P=Xm+16|0;return q[Pm+12>>2]+472|0}function kp(Pm){var Ym=0;Ym=P-32|0;P=Ym;q[Ym+28>>2]=Pm;Pm=q[Ym+28>>2];u[Ym+24>>2]=0;u[Ym+20>>2]=0;u[Ym+16>>2]=0;ca(Pm+472|0,Ym+24|0,Ym+20|0,Ym+16|0);u[Ym+12>>2]=0;u[Ym+8>>2]=0;u[Ym+4>>2]=0;ca(Pm+488|0,Ym+12|0,Ym+8|0,Ym+4|0);P=Ym+32|0;}function lp(Pm){Pm=Pm|0;var Zm=0;Zm=P-16|0;P=Zm;q[Zm+12>>2]=Pm;kp(q[Zm+12>>2]);P=Zm+16|0;}function mp(Pm){var _m=0,$m=0;_m=P-16|0;P=_m;q[_m+8>>2]=Pm;$m=P-16|0;Pm=q[_m+8>>2];q[$m+12>>2]=Pm;a:{if(q[q[$m+12>>2]+220>>2]==4){o[_m+15|0]=0;break a}if(!(u[5248]!=x(0)?!(o[22420]&1):0)){o[_m+15|0]=0;break a}$m=P-16|0;q[$m+12>>2]=Pm;b:{if(q[q[$m+12>>2]+220>>2]!=2){$m=P-16|0;q[$m+12>>2]=Pm;if(q[q[$m+12>>2]+220>>2]!=3){break b}}o[_m+15|0]=1;break a}if(u[Pm+224>>2]>u[5248]){o[_m+15|0]=1;break a}o[_m+15|0]=0;}P=_m+16|0;return o[_m+15|0]&1}function np(Pm){Pm=Pm|0;var an=0;an=P-16|0;P=an;q[an+12>>2]=Pm;Pm=mp(q[an+12>>2])&1;P=an+16|0;return Pm|0}function op(Pm,bn){Pm=Pm|0;bn=bn|0;var cn=0;cn=P-16|0;P=cn;q[cn+12>>2]=Pm;q[cn+8>>2]=bn;bn=q[cn+8>>2];Pm=P-16|0;q[Pm+12>>2]=q[cn+12>>2];q[Pm+8>>2]=bn;q[q[Pm+12>>2]+564>>2]=q[Pm+8>>2];P=cn+16|0;}function pp(Pm){Pm=Pm|0;var bn=0;bn=P-16|0;P=bn;q[bn+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[bn+12>>2];P=bn+16|0;return q[q[Pm+12>>2]+564>>2]}function qp(Pm,dn){Pm=Pm|0;dn=dn|0;var en=0;en=P-16|0;P=en;q[en+12>>2]=Pm;q[en+8>>2]=dn;sc(q[en+12>>2],q[en+8>>2]);P=en+16|0;}function rp(Pm){Pm=Pm|0;var dn=0;dn=P-16|0;P=dn;q[dn+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[dn+12>>2];P=dn+16|0;return q[Pm+12>>2]+440|0}function sp(Pm){Pm=Pm|0;var fn=0;fn=P-16|0;P=fn;q[fn+12>>2]=Pm;Wf(q[fn+12>>2]);P=fn+16|0;}function tp(Pm,gn,hn){Pm=Pm|0;gn=gn|0;hn=hn|0;var jn=0;jn=P-16|0;P=jn;q[jn+12>>2]=Pm;q[jn+8>>2]=gn;q[jn+4>>2]=hn;Pm=q[jn+12>>2];gn=q[Pm+192>>2];n[q[q[gn>>2]+8>>2]](gn,Pm+4|0,q[jn+8>>2],q[jn+4>>2]);P=jn+16|0;}function up(Pm){var gn=0;gn=P-16|0;P=gn;q[gn+8>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[gn+8>>2];a:{if(q[q[Pm+12>>2]+252>>2]&2){q[gn+12>>2]=q[gn+8>>2];break a}q[gn+12>>2]=0;}P=gn+16|0;return q[gn+12>>2]}function vp(Pm,hn){Pm=Pm|0;hn=hn|0;var kn=0;kn=P-16|0;P=kn;q[kn+12>>2]=Pm;q[kn+8>>2]=hn;Pm=up(q[kn+8>>2]);P=kn+16|0;return Pm|0}function wp(Pm,hn){var ln=0;ln=P-16|0;q[ln+12>>2]=Pm;q[ln+8>>2]=hn;Pm=q[ln+12>>2];q[Pm+304>>2]=q[Pm+304>>2]+1;hn=q[ln+8>>2];ln=q[hn+4>>2];q[Pm+604>>2]=q[hn>>2];q[Pm+608>>2]=ln;ln=q[hn+12>>2];q[Pm+612>>2]=q[hn+8>>2];q[Pm+616>>2]=ln;}function xp(Pm,hn){Pm=Pm|0;hn=hn|0;var mn=0;mn=P-16|0;P=mn;q[mn+12>>2]=Pm;q[mn+8>>2]=hn;wp(q[mn+12>>2],q[mn+8>>2]);P=mn+16|0;}function yp(Pm){Pm=Pm|0;var hn=0;hn=P-16|0;P=hn;q[hn+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[hn+12>>2];P=hn+16|0;return q[Pm+12>>2]+604|0}function zp(Pm,nn){var on=0;on=P-16|0;P=on;q[on+12>>2]=Pm;q[on+8>>2]=nn;Pm=q[on+12>>2];u[on+4>>2]=x(1)/u[q[on+8>>2]>>2];Pm=Eo(Pm,on+4|0);P=on+16|0;return Pm}function Ap(Pm,nn){var pn=0;pn=P-16|0;P=pn;q[pn+12>>2]=Pm;q[pn+8>>2]=nn;Pm=q[pn+12>>2];q[Pm+540>>2]=q[pn+8>>2];if(q[Pm+540>>2]){nn=q[pn+8>>2];n[q[q[nn>>2]+8>>2]](nn,Pm+4|0);}P=pn+16|0;}function Bp(Pm,nn){Pm=Pm|0;nn=nn|0;var qn=0;qn=P-16|0;P=qn;q[qn+12>>2]=Pm;q[qn+8>>2]=nn;Ap(q[qn+12>>2],q[qn+8>>2]);P=qn+16|0;}function Cp(Pm){Pm=Pm|0;var nn=0;nn=P-16|0;P=nn;q[nn+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[nn+12>>2];P=nn+16|0;return q[q[Pm+12>>2]+540>>2]}function Dp(Pm,rn){var sn=0;sn=P-16|0;q[sn+12>>2]=Pm;q[sn+8>>2]=rn;Pm=q[sn+12>>2];q[Pm+304>>2]=q[Pm+304>>2]+1;rn=q[sn+8>>2];sn=q[rn+4>>2];q[Pm+388>>2]=q[rn>>2];q[Pm+392>>2]=sn;sn=q[rn+12>>2];q[Pm+396>>2]=q[rn+8>>2];q[Pm+400>>2]=sn;}function Ep(Pm,rn){Pm=Pm|0;rn=rn|0;var tn=0;tn=P-16|0;P=tn;q[tn+12>>2]=Pm;q[tn+8>>2]=rn;Dp(q[tn+12>>2],q[tn+8>>2]);P=tn+16|0;}function Fp(Pm,rn){var un=0;un=P-16|0;q[un+12>>2]=Pm;q[un+8>>2]=rn;Pm=q[un+12>>2];q[Pm+304>>2]=q[Pm+304>>2]+1;rn=q[un+8>>2];un=q[rn+4>>2];q[Pm+372>>2]=q[rn>>2];q[Pm+376>>2]=un;un=q[rn+12>>2];q[Pm+380>>2]=q[rn+8>>2];q[Pm+384>>2]=un;}function Gp(Pm,rn){Pm=Pm|0;rn=rn|0;var vn=0;vn=P-16|0;P=vn;q[vn+12>>2]=Pm;q[vn+8>>2]=rn;Fp(q[vn+12>>2],q[vn+8>>2]);P=vn+16|0;}function Hp(Pm){Pm=Pm|0;var rn=0;rn=P-16|0;P=rn;q[rn+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[rn+12>>2];P=rn+16|0;return q[Pm+12>>2]+388|0}function Ip(Pm){Pm=Pm|0;var wn=0;wn=P-16|0;P=wn;q[wn+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[wn+12>>2];P=wn+16|0;return q[Pm+12>>2]+372|0}function Jp(Pm){Pm=Pm|0;var xn=0;xn=P-16|0;P=xn;q[xn+12>>2]=Pm;Kd(q[xn+12>>2]);P=xn+16|0;}function Kp(Pm,yn){Pm=Pm|0;yn=yn|0;var zn=0;zn=P-16|0;P=zn;q[zn+12>>2]=Pm;q[zn+8>>2]=yn;rg(q[zn+12>>2],q[zn+8>>2]);P=zn+16|0;}function Lp(Pm,yn,An){Pm=Pm|0;yn=yn|0;An=An|0;var Bn=0;Bn=P-16|0;P=Bn;q[Bn+12>>2]=Pm;q[Bn+8>>2]=yn;q[Bn+4>>2]=An;Md(q[Bn+12>>2],q[Bn+8>>2],q[Bn+4>>2]);P=Bn+16|0;}function Mp(Pm,yn){Pm=Pm|0;yn=yn|0;var An=0;An=P-16|0;P=An;q[An+12>>2]=Pm;q[An+8>>2]=yn;sg(q[An+12>>2],q[An+8>>2]);P=An+16|0;}function Np(Pm,yn){Pm=Pm|0;yn=yn|0;var Cn=0;Cn=P-16|0;P=Cn;q[Cn+12>>2]=Pm;q[Cn+8>>2]=yn;tg(q[Cn+12>>2],q[Cn+8>>2]);P=Cn+16|0;}function Op(Pm,yn,Dn){var En=0;En=P-48|0;P=En;q[En+44>>2]=Pm;q[En+40>>2]=yn;q[En+36>>2]=Dn;Pm=q[En+44>>2];tg(Pm,q[En+40>>2]);yn=q[En+36>>2];lb(En,q[En+40>>2],Pm+408|0);Dn=En+16|0;xc(Dn,yn,En);ug(Pm,Dn);P=En+48|0;}function Pp(Pm,yn,Dn){Pm=Pm|0;yn=yn|0;Dn=Dn|0;var Fn=0;Fn=P-16|0;P=Fn;q[Fn+12>>2]=Pm;q[Fn+8>>2]=yn;q[Fn+4>>2]=Dn;Op(q[Fn+12>>2],q[Fn+8>>2],q[Fn+4>>2]);P=Fn+16|0;}function Qp(Pm,yn){Pm=Pm|0;yn=yn|0;var Dn=0;Dn=P-16|0;P=Dn;q[Dn+12>>2]=Pm;q[Dn+8>>2]=yn;ug(q[Dn+12>>2],q[Dn+8>>2]);P=Dn+16|0;}function Rp(Pm,yn){var Gn=0,Hn=0;Gn=P-32|0;P=Gn;q[Gn+28>>2]=Pm;q[Gn+24>>2]=yn;Pm=q[Gn+24>>2];Hn=q[Pm+4>>2];yn=q[Gn+28>>2];q[yn+408>>2]=q[Pm>>2];q[yn+412>>2]=Hn;Hn=q[Pm+12>>2];q[yn+416>>2]=q[Pm+8>>2];q[yn+420>>2]=Hn;Pm=Gn+8|0;sa(Pm,yn+408|0,yn+404|0);Hn=q[Pm+4>>2];q[yn+620>>2]=q[Pm>>2];q[yn+624>>2]=Hn;Hn=q[Pm+12>>2];q[yn+628>>2]=q[Pm+8>>2];q[yn+632>>2]=Hn;P=Gn+32|0;}function Sp(Pm,yn){Pm=Pm|0;yn=yn|0;var In=0;In=P-16|0;P=In;q[In+12>>2]=Pm;q[In+8>>2]=yn;Rp(q[In+12>>2],q[In+8>>2]);P=In+16|0;}function Tp(Pm){Pm=Pm|0;var yn=0;yn=P-16|0;P=yn;q[yn+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[yn+12>>2];P=yn+16|0;return q[Pm+12>>2]+408|0}function Up(Pm,Jn,Kn){Pm=Pm|0;Jn=x(Jn);Kn=Kn|0;var Ln=0;Ln=P-16|0;P=Ln;q[Ln+12>>2]=Pm;u[Ln+8>>2]=Jn;q[Ln+4>>2]=Kn;Jd(q[Ln+12>>2],u[Ln+8>>2],q[Ln+4>>2]);P=Ln+16|0;}function Vp(Pm,Jn,Kn){Pm=Pm|0;Jn=x(Jn);Kn=x(Kn);var Mn=0;Mn=P-16|0;P=Mn;q[Mn+12>>2]=Pm;u[Mn+8>>2]=Jn;u[Mn+4>>2]=Kn;Yn(q[Mn+12>>2],u[Mn+8>>2],u[Mn+4>>2]);P=Mn+16|0;}function Wp(Pm){Pm=Pm|0;var Jn=0;Jn=P-16|0;P=Jn;q[Jn+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[Jn+12>>2];P=Jn+16|0;return x(u[q[Pm+12>>2]+508>>2])}function Xp(Pm){Pm=Pm|0;var Kn=0;Kn=P-16|0;P=Kn;q[Kn+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[Kn+12>>2];P=Kn+16|0;return x(u[q[Pm+12>>2]+504>>2])}function Yp(Pm){Pm=Pm|0;var Nn=0;Nn=P-16|0;P=Nn;q[Nn+12>>2]=Pm;Pm=P-16|0;q[Pm+12>>2]=q[Nn+12>>2];P=Nn+16|0;return x(u[q[Pm+12>>2]+532>>2])}function Zp(Pm,On,Pn){var Qn=0;Qn=P-16|0;q[Qn+12>>2]=Pm;u[Qn+8>>2]=On;u[Qn+4>>2]=Pn;Pm=q[Qn+12>>2];u[Pm+532>>2]=u[Qn+8>>2];u[Pm+536>>2]=u[Qn+4>>2];}function _p(Pm,On,Pn){Pm=Pm|0;On=x(On);Pn=x(Pn);var Rn=0;Rn=P-16|0;P=Rn;q[Rn+12>>2]=Pm;u[Rn+8>>2]=On;u[Rn+4>>2]=Pn;Zp(q[Rn+12>>2],u[Rn+8>>2],u[Rn+4>>2]);P=Rn+16|0;}function $p(Pm,On){Pm=Pm|0;On=On|0;var Pn=0;Pn=P-16|0;P=Pn;q[Pn+12>>2]=Pm;q[Pn+8>>2]=On;Id(q[Pn+12>>2],q[Pn+8>>2]);P=Pn+16|0;}function aq(Pm){Pm=Pm|0;var On=0;On=P-16|0;P=On;q[On+12>>2]=Pm;Pm=Z(676);_n(Pm,q[On+12>>2]);P=On+16|0;return Pm|0}function bq(Pm,Sn){Pm=Pm|0;Sn=Sn|0;var Tn=0;Tn=P-16|0;P=Tn;q[Tn+12>>2]=Pm;q[Tn+8>>2]=Sn;Sn=q[Tn+8>>2];Pm=P-16|0;q[Pm+12>>2]=q[Tn+12>>2];q[Pm+8>>2]=Sn;q[q[Pm+12>>2]+4>>2]=q[Pm+8>>2];P=Tn+16|0;}function cq(Pm){Pm=Pm|0;var Sn=0;Sn=P-16|0;P=Sn;q[Sn+12>>2]=Pm;Pm=xa(10448);ak(Pm,q[Sn+12>>2]);P=Sn+16|0;return Pm|0}function dq(Pm,Un,Vn,Wn){Pm=Pm|0;Un=Un|0;Vn=Vn|0;Wn=Wn|0;var Xn=0;Xn=P-32|0;P=Xn;q[Xn+28>>2]=Pm;q[Xn+24>>2]=Un;q[Xn+20>>2]=Vn;q[Xn+16>>2]=Wn;Pm=Z(1460);Sm(Pm,q[Xn+28>>2],q[Xn+24>>2],q[Xn+20>>2],q[Xn+16>>2]);P=Xn+32|0;return Pm|0}function eq(Pm,Un){Pm=Pm|0;Un=Un|0;var Vn=0;Vn=P-16|0;P=Vn;q[Vn+12>>2]=Pm;q[Vn+8>>2]=Un;Un=q[Vn+8>>2];Pm=P-16|0;q[Pm+12>>2]=q[Vn+12>>2];q[Pm+8>>2]=Un;P=Vn+16|0;return q[q[Pm+12>>2]+12>>2]+(q[Pm+8>>2]<<4)|0}function fq(Pm,Un){Pm=Pm|0;Un=x(Un);var Wn=0;Wn=P-16|0;q[Wn+12>>2]=Pm;u[Wn+8>>2]=Un;u[q[Wn+12>>2]+8>>2]=u[Wn+8>>2];}function gq(Pm){Pm=Pm|0;var Un=0;Un=P-16|0;q[Un+12>>2]=Pm;return x(u[q[Un+12>>2]+8>>2])}function hq(Pm,Yn){var Zn=0;Zn=P-144|0;P=Zn;q[Zn+140>>2]=Pm;q[Zn+136>>2]=Yn;u[Zn+132>>2]=0;u[Zn+128>>2]=1;Yn=Zn+112|0;Pm=q[Zn+140>>2];Ka(Yn,Pm+112|0,Pm+92|0);u[Zn+108>>2]=Pb(Yn);if(u[Zn+108>>2]>x(1.1920928955078125e-7)){wc(Zn+112|0);EB(Zn+88|0,Pm,Zn+112|0,q[Zn+136>>2]);wc(Zn+88|0);q[(P-16|0)+12>>2]=Zn+72;q[(P-16|0)+12>>2]=Zn+56;Jf(Zn+40|0,Pm,Zn+88|0,q[Zn+136>>2]);Yn=q[Zn+52>>2];q[Zn+80>>2]=q[Zn+48>>2];q[Zn+84>>2]=Yn;Yn=q[Zn+44>>2];q[Zn+72>>2]=q[Zn+40>>2];q[Zn+76>>2]=Yn;Al(Zn+24|0,Pm,Zn+88|0,q[Zn+136>>2]);Yn=q[Zn+36>>2];q[Zn+64>>2]=q[Zn+32>>2];q[Zn+68>>2]=Yn;Yn=q[Zn+28>>2];q[Zn+56>>2]=q[Zn+24>>2];q[Zn+60>>2]=Yn;Yn=q[Pm+104>>2];q[Pm+120>>2]=q[Pm+100>>2];q[Pm+124>>2]=Yn;Yn=q[Pm+96>>2];q[Pm+112>>2]=q[Pm+92>>2];q[Pm+116>>2]=Yn;if(+u[Zn+128>>2]!=0){u[Zn+4>>2]=u[Zn+128>>2]*u[Zn+108>>2];Yn=Zn+8|0;sa(Yn,Zn+56|0,Zn+4|0);Za(Pm+112|0,Yn);}}P=Zn+144|0;}function iq(Pm,Yn){Pm=Pm|0;Yn=x(Yn);var _n=0;_n=P-16|0;q[_n+12>>2]=Pm;u[_n+8>>2]=Yn;u[q[_n+12>>2]>>2]=u[_n+8>>2];}function jq(Pm){Pm=Pm|0;var Yn=0;Yn=P-16|0;q[Yn+12>>2]=Pm;return x(u[q[Yn+12>>2]>>2])}function kq(){var Pm=0,$n=0,ao=0;$n=P-16|0;P=$n;ao=xa(12);Pm=P-16|0;q[Pm+12>>2]=ao;Pm=q[Pm+12>>2];u[Pm>>2]=.30000001192092896;u[Pm+4>>2]=1;u[Pm+8>>2]=0;P=$n+16|0;return ao|0}function lq(){var bo=0,co=0;co=P-16|0;P=co;bo=Z(36);q[bo>>2]=14552;q[bo+4>>2]=35;q[bo+8>>2]=0;q[bo+12>>2]=-1;q[bo+16>>2]=0;q[bo+4>>2]=27;q[bo>>2]=13636;P=co+16|0;return bo|0}function mq(){var eo=0,fo=0;eo=P-16|0;P=eo;fo=xa(24);Ng(fo);P=eo+16|0;return fo|0}function nq(go,ho){go=go|0;ho=x(ho);var io=0;io=P-16|0;q[io+12>>2]=go;u[io+8>>2]=ho;u[q[io+12>>2]+48>>2]=u[io+8>>2];}function oq(go,ho){var jo=0,ko=0;jo=P-16|0;P=jo;q[jo+12>>2]=go;u[jo+8>>2]=ho;ho=u[jo+8>>2];go=P-16|0;ko=q[jo+12>>2];q[go+12>>2]=ko+32;u[go+8>>2]=ho;u[q[go+12>>2]>>2]=u[go+8>>2];ho=u[jo+8>>2];go=P-16|0;q[go+12>>2]=ko;u[go+8>>2]=ho;u[q[go+12>>2]+48>>2]=u[go+8>>2];P=jo+16|0;}function pq(go,ho){go=go|0;ho=x(ho);var lo=0;lo=P-16|0;P=lo;q[lo+12>>2]=go;u[lo+8>>2]=ho;oq(q[lo+12>>2],u[lo+8>>2]);P=lo+16|0;}function qq(go){var ho=0;ho=P-16|0;P=ho;q[ho+12>>2]=go;go=q[ho+12>>2];u[ho+8>>2]=0;u[ho+4>>2]=0;u[ho>>2]=0;ca(go,ho+8|0,ho+4|0,ho);P=ho+16|0;}function rq(go,mo){var no=0,oo=0;no=P-32|0;P=no;q[no+28>>2]=go;u[no+24>>2]=mo;go=q[no+28>>2];Aa(go);q[go>>2]=12036;q[go+4>>2]=8;u[no+20>>2]=1;u[no+16>>2]=1;u[no+12>>2]=1;ca(go+16|0,no+20|0,no+16|0,no+12|0);qq(go+32|0);mo=u[no+24>>2];oo=P-16|0;q[oo+12>>2]=go+32;u[oo+8>>2]=mo;u[q[oo+12>>2]>>2]=u[oo+8>>2];u[go+48>>2]=u[no+24>>2];u[go+52>>2]=0;P=no+32|0;}function sq(go,mo,po){var qo=0;qo=P-32|0;P=qo;q[qo+28>>2]=go;q[qo+24>>2]=mo;q[qo+20>>2]=po;go=q[qo+28>>2];Io(go);q[go>>2]=1504;mo=q[qo+24>>2];po=q[mo+4>>2];q[go+16>>2]=q[mo>>2];q[go+20>>2]=po;po=q[mo+12>>2];q[go+24>>2]=q[mo+8>>2];q[go+28>>2]=po;mo=q[qo+20>>2];po=q[mo+4>>2];q[go+32>>2]=q[mo>>2];q[go+36>>2]=po;po=q[mo+12>>2];q[go+40>>2]=q[mo+8>>2];q[go+44>>2]=po;q[(P-16|0)+12>>2]=go+48;q[(P-16|0)+12>>2]=go- -64;q[go+80>>2]=0;P=qo+32|0;}function tq(go){go=x(go);var mo=0,po=0;mo=P-16|0;P=mo;u[mo+12>>2]=go;po=Z(56);rq(po,u[mo+12>>2]);P=mo+16|0;return po|0}function uq(go,ro,so,to){go=go|0;ro=x(ro);so=x(so);to=x(to);var uo=0;uo=P-16|0;P=uo;q[uo+12>>2]=go;u[uo+8>>2]=ro;u[uo+4>>2]=so;u[uo>>2]=to;ca(q[uo+12>>2],uo+8|0,uo+4|0,uo);P=uo+16|0;}function vq(go,ro,so){go=x(go);ro=x(ro);so=x(so);var to=0,vo=0;to=P-32|0;P=to;u[to+28>>2]=go;u[to+24>>2]=ro;u[to+20>>2]=so;vo=Z(16);ca(vo,to+28|0,to+24|0,to+20|0);P=to+32|0;return vo|0}function wq(){var go=0,ro=0;go=P-16|0;P=go;ro=Z(16);q[(P-16|0)+12>>2]=ro;P=go+16|0;return ro|0}function xq(so){so=so|0;var wo=0;wo=P-16|0;P=wo;q[wo+12>>2]=so;so=q[wo+12>>2];so=n[q[q[so>>2]+36>>2]](so)|0;P=wo+16|0;return x(x(so|0))}function yq(so,xo){so=so|0;xo=x(xo);var yo=0;yo=P-16|0;P=yo;q[yo+12>>2]=so;u[yo+8>>2]=xo;xo=u[yo+8>>2];so=P-16|0;q[so+12>>2]=q[yo+12>>2];u[so+8>>2]=xo;u[q[so+12>>2]+68>>2]=u[so+8>>2];P=yo+16|0;}function zq(so){so=so|0;var xo=0;xo=P-16|0;P=xo;q[xo+12>>2]=so;so=P-16|0;q[so+12>>2]=q[xo+12>>2];P=xo+16|0;return q[so+12>>2]+52|0}function Aq(so,zo){so=so|0;zo=x(zo);var Ao=0;Ao=P-16|0;P=Ao;q[Ao+12>>2]=so;u[Ao+8>>2]=zo;so=Z(88);Cy(so,q[Ao+12>>2],u[Ao+8>>2]);P=Ao+16|0;return so|0}function Bq(so,zo){so=so|0;zo=zo|0;var Bo=0;Bo=P-16|0;P=Bo;q[Bo+12>>2]=so;o[Bo+11|0]=zo;zo=o[Bo+11|0]&1;so=P-16|0;q[so+12>>2]=q[Bo+12>>2];o[so+11|0]=zo;o[q[so+12>>2]+250|0]=o[so+11|0]&1;P=Bo+16|0;}function Cq(so){so=so|0;var zo=0;zo=P-16|0;P=zo;q[zo+12>>2]=so;P=zo+16|0;return q[q[zo+12>>2]+8>>2]}function Dq(so){var Co=0;Co=P-48|0;P=Co;q[Co+44>>2]=so;so=q[Co+44>>2];u[Co+40>>2]=1;u[Co+36>>2]=0;u[Co+32>>2]=0;u[Co+28>>2]=0;u[Co+24>>2]=1;u[Co+20>>2]=0;u[Co+16>>2]=0;u[Co+12>>2]=0;u[Co+8>>2]=1;zb(so,Co+40|0,Co+36|0,Co+32|0,Co+28|0,Co+24|0,Co+20|0,Co+16|0,Co+12|0,Co+8|0);P=Co+48|0;}function Eq(so){so=so|0;var Do=0;Do=P-16|0;P=Do;q[Do+12>>2]=so;P=Do+16|0;return x(u[q[Do+12>>2]+44>>2])}function Fq(so,Eo){so=so|0;Eo=x(Eo);var Fo=0;Fo=P-16|0;P=Fo;q[Fo+12>>2]=so;u[Fo+8>>2]=Eo;so=q[Fo+12>>2];Eo=u[Fo+8>>2];u[so+44>>2]=Eo;u[so+48>>2]=fa(Eo);P=Fo+16|0;}function Gq(so){so=so|0;var Eo=0;Eo=P-32|0;P=Eo;q[Eo+28>>2]=so;if(!(!!(r[21528]!=0)|o[21528]&1)){q[(P-16|0)+12>>2]=21512;q[5382]=0;q[5382]=q[5382]|1;}wk(Eo,q[Eo+28>>2]);so=q[Eo+4>>2];q[5378]=q[Eo>>2];q[5379]=so;so=q[Eo+12>>2];q[5380]=q[Eo+8>>2];q[5381]=so;P=Eo+32|0;return 21512}function Hq(so,Go){so=so|0;Go=Go|0;var Ho=0;Ho=P-16|0;P=Ho;q[Ho+12>>2]=so;q[Ho+8>>2]=Go;xk(q[Ho+12>>2],q[Ho+8>>2]);P=Ho+16|0;}function Iq(so,Go){so=so|0;Go=x(Go);var Io=0;Io=P-16|0;P=Io;q[Io+12>>2]=so;u[Io+8>>2]=Go;u[q[Io+12>>2]+40>>2]=u[Io+8>>2];P=Io+16|0;}function Jq(so,Go){so=so|0;Go=x(Go);var Jo=0;Jo=P-16|0;P=Jo;q[Jo+12>>2]=so;u[Jo+8>>2]=Go;so=q[Jo+12>>2];Go=u[Jo+8>>2];u[so+36>>2]=Go;u[so+32>>2]=Go;P=Jo+16|0;}function Kq(so,Go){so=so|0;Go=x(Go);var Ko=0;Ko=P-16|0;P=Ko;q[Ko+12>>2]=so;u[Ko+8>>2]=Go;u[q[Ko+12>>2]+28>>2]=u[Ko+8>>2];P=Ko+16|0;}function Lq(so,Go){so=so|0;Go=Go|0;var Lo=0;Lo=P-16|0;P=Lo;q[Lo+12>>2]=so;q[Lo+8>>2]=Go;nf(q[Lo+12>>2],q[Lo+8>>2]);P=Lo+16|0;}function Mq(so,Go,Mo,No){so=so|0;Go=Go|0;Mo=x(Mo);No=No|0;var Oo=0;Oo=P-32|0;P=Oo;q[Oo+28>>2]=so;q[Oo+24>>2]=Go;u[Oo+20>>2]=Mo;q[Oo+16>>2]=No;so=Z(292);of(so,q[Oo+28>>2],q[Oo+24>>2],u[Oo+20>>2],q[Oo+16>>2]);P=Oo+32|0;return so|0}function Nq(so){var Go=0,Mo=0;Go=P-16|0;P=Go;q[Go+8>>2]=so;so=q[Go+8>>2];q[Go+12>>2]=so;Mo=so+48|0;while(1){q[(P-16|0)+12>>2]=so;so=so+16|0;if((Mo|0)!=(so|0)){continue}break}P=Go+16|0;}function Oq(so,No,Po){so=so|0;No=No|0;Po=x(Po);var Qo=0,Ro=0;Qo=P+ -64|0;P=Qo;q[Qo+60>>2]=so;q[Qo+56>>2]=No;u[Qo+52>>2]=Po;so=Z(292);No=q[Qo+60>>2];Ro=q[Qo+56>>2];Po=u[Qo+52>>2];u[Qo+28>>2]=1;u[Qo+24>>2]=0;u[Qo+20>>2]=0;ca(Qo+32|0,Qo+28|0,Qo+24|0,Qo+20|0);of(so,No,Ro,Po,Qo+32|0);P=Qo- -64|0;return so|0}function Pq(so,No){so=so|0;No=No|0;var Po=0;Po=P-16|0;q[Po+12>>2]=so;q[Po+8>>2]=No;q[q[Po+12>>2]+20>>2]=q[Po+8>>2];}function Qq(so){so=so|0;var No=0;No=P-16|0;q[No+12>>2]=so;return q[q[No+12>>2]+20>>2]}function Rq(so,So){so=so|0;So=So|0;var To=0;To=P-16|0;q[To+12>>2]=so;q[To+8>>2]=So;u[q[To+12>>2]+56>>2]=q[To+8>>2];}function Sq(so){so=so|0;var So=0,Uo=x(0);So=P-16|0;q[So+12>>2]=so;Uo=u[q[So+12>>2]+56>>2];a:{if(x(y(Uo))<x(2147483648)){so=~~Uo;break a}so=-2147483648;}return so|0}function Tq(so,Vo){so=so|0;Vo=Vo|0;var Wo=0;Wo=P-16|0;q[Wo+12>>2]=so;o[Wo+11|0]=Vo;q[q[Wo+12>>2]+52>>2]=o[Wo+11|0]&1;}function Uq(so){so=so|0;var Vo=0;Vo=P-16|0;q[Vo+12>>2]=so;return q[q[Vo+12>>2]+52>>2]!=0|0}function Vq(so,Xo){so=so|0;Xo=Xo|0;var Yo=0;Yo=P-16|0;P=Yo;q[Yo+12>>2]=so;q[Yo+8>>2]=Xo;Pz(q[Yo+12>>2],q[Yo+8>>2]);P=Yo+16|0;}function Wq(){var so=0,Xo=0;Xo=P-16|0;P=Xo;so=Z(164);ci(so);q[so+96>>2]=0;q[so>>2]=11468;q[so+4>>2]=2;P=Xo+16|0;return so|0}function Xq(Zo,_o,$o,ap,bp){Zo=Zo|0;_o=x(_o);$o=x($o);ap=x(ap);bp=x(bp);var cp=0;cp=P-32|0;P=cp;q[cp+28>>2]=Zo;u[cp+24>>2]=_o;u[cp+20>>2]=$o;u[cp+16>>2]=ap;u[cp+12>>2]=bp;Td(q[cp+28>>2],cp+24|0,cp+20|0,cp+16|0,cp+12|0);P=cp+32|0;}function Yq(Zo,_o,$o,ap){Zo=x(Zo);_o=x(_o);$o=x($o);ap=x(ap);var bp=0,dp=0;bp=P-32|0;P=bp;u[bp+28>>2]=Zo;u[bp+24>>2]=_o;u[bp+20>>2]=$o;u[bp+16>>2]=ap;dp=xa(16);Qb(dp,bp+28|0,bp+24|0,bp+20|0,bp+16|0);P=bp+32|0;return dp|0}function Zq(Zo,_o){Zo=Zo|0;_o=_o|0;var $o=0;$o=P-16|0;P=$o;q[$o+12>>2]=Zo;o[$o+11|0]=_o;_o=o[$o+11|0]&1;Zo=P-16|0;q[Zo+12>>2]=q[$o+12>>2];o[Zo+11|0]=_o;o[q[Zo+12>>2]+740|0]=o[Zo+11|0]&1;P=$o+16|0;}function _q(Zo,_o){var ap=0,ep=0,fp=0;ap=P-80|0;P=ap;q[ap+76>>2]=Zo;q[ap+72>>2]=_o;_o=q[ap+72>>2];u[ap+52>>2]=Qa(_o,1,1,2,2);u[ap+48>>2]=Qa(_o,1,2,2,0);u[ap+44>>2]=Qa(_o,1,0,2,1);fp=ap+56|0;ca(fp,ap+52|0,ap+48|0,ap+44|0);ep=P-16|0;q[ep+12>>2]=_o;q[ep+8>>2]=0;u[ap+40>>2]=ta(q[ep+12>>2]+(q[ep+8>>2]<<4)|0,fp);u[ap+36>>2]=x(1)/u[ap+40>>2];ep=P-16|0;q[ep+12>>2]=fp;u[ap+32>>2]=u[q[ep+12>>2]>>2]*u[ap+36>>2];u[ap+28>>2]=Qa(_o,0,2,2,1)*u[ap+36>>2];u[ap+24>>2]=Qa(_o,0,1,1,2)*u[ap+36>>2];ep=P-16|0;q[ep+12>>2]=fp;u[ap+20>>2]=u[q[ep+12>>2]+4>>2]*u[ap+36>>2];u[ap+16>>2]=Qa(_o,0,0,2,2)*u[ap+36>>2];u[ap+12>>2]=Qa(_o,0,2,1,0)*u[ap+36>>2];ep=P-16|0;q[ep+12>>2]=fp;u[ap+8>>2]=u[q[ep+12>>2]+8>>2]*u[ap+36>>2];u[ap+4>>2]=Qa(_o,0,1,2,0)*u[ap+36>>2];u[ap>>2]=Qa(_o,0,0,1,1)*u[ap+36>>2];uc(Zo,ap+32|0,ap+28|0,ap+24|0,ap+20|0,ap+16|0,ap+12|0,ap+8|0,ap+4|0,ap);P=ap+80|0;}function $q(Zo,_o,gp){var hp=0,ip=0,jp=0;hp=P-48|0;P=hp;q[hp+44>>2]=_o;q[hp+40>>2]=gp;_o=hp+24|0;ho(_o,q[hp+44>>2],q[hp+40>>2]);gp=hp+8|0;fo(gp,q[hp+44>>2]);eo(_o,gp);gp=P-16|0;q[gp+12>>2]=_o;gp=q[gp+12>>2];ip=P-16|0;q[ip+12>>2]=_o;ip=q[ip+12>>2]+4|0;jp=P-16|0;q[jp+12>>2]=_o;ca(Zo,gp,ip,q[jp+12>>2]+8|0);P=hp+48|0;}function ar(Zo,_o,gp){var kp=0,lp=0,mp=0;kp=P-96|0;P=kp;q[kp+92>>2]=_o;q[kp+88>>2]=gp;xc(kp+72|0,q[kp+92>>2],q[kp+88>>2]);u[kp+68>>2]=ta(q[kp+92>>2],q[kp+88>>2]);a:{if(+u[kp+68>>2]<-.9999998807907104){_o=kp+48|0;q[(P-16|0)+12>>2]=_o;lp=kp+32|0;q[(P-16|0)+12>>2]=lp;xg(q[kp+92>>2],_o,lp);gp=P-16|0;q[gp+12>>2]=_o;gp=q[gp+12>>2];lp=P-16|0;q[lp+12>>2]=_o;lp=q[lp+12>>2]+4|0;mp=P-16|0;q[mp+12>>2]=_o;_o=q[mp+12>>2]+8|0;u[kp+28>>2]=0;Qb(Zo,gp,lp,_o,kp+28|0);break a}_o=P-16|0;u[_o+12>>2]=x(x(1)+u[kp+68>>2])*x(2);u[kp+24>>2]=E(u[_o+12>>2]);u[kp+20>>2]=x(1)/u[kp+24>>2];gp=P-16|0;_o=kp+72|0;q[gp+12>>2]=_o;u[kp+16>>2]=u[q[gp+12>>2]>>2]*u[kp+20>>2];gp=P-16|0;q[gp+12>>2]=_o;u[kp+12>>2]=u[q[gp+12>>2]+4>>2]*u[kp+20>>2];gp=P-16|0;q[gp+12>>2]=_o;u[kp+8>>2]=u[q[gp+12>>2]+8>>2]*u[kp+20>>2];u[kp+4>>2]=u[kp+24>>2]*x(.5);Qb(Zo,kp+16|0,kp+12|0,kp+8|0,kp+4|0);}P=kp+96|0;}function br(Zo,_o){var gp=0,np=0,op=0,pp=0,qp=0,rp=0,sp=0,tp=0,up=0,vp=0,wp=0,xp=0;gp=P-320|0;P=gp;q[gp+316>>2]=Zo;q[gp+312>>2]=_o;Zo=q[gp+316>>2];_o=gp+296|0;q[(P-16|0)+12>>2]=_o;op=gp+280|0;q[(P-16|0)+12>>2]=op;xg(q[gp+312>>2],_o,op);pp=P-16|0;q[pp+12>>2]=Zo+552;pp=q[pp+12>>2]+48|0;np=q[pp+4>>2];qp=gp+264|0;q[qp>>2]=q[pp>>2];q[qp+4>>2]=np;np=q[pp+12>>2];q[qp+8>>2]=q[pp+8>>2];q[qp+12>>2]=np;pp=P-16|0;q[pp+12>>2]=Zo+552;pp=q[pp+12>>2];np=P-16|0;q[np+12>>2]=_o;np=q[np+12>>2];sp=P-16|0;q[sp+12>>2]=op;sp=q[sp+12>>2];tp=P-16|0;q[tp+12>>2]=q[gp+312>>2];tp=q[tp+12>>2];up=P-16|0;q[up+12>>2]=_o;up=q[up+12>>2]+4|0;vp=P-16|0;q[vp+12>>2]=op;vp=q[vp+12>>2]+4|0;wp=P-16|0;q[wp+12>>2]=q[gp+312>>2];wp=q[wp+12>>2]+4|0;rp=P-16|0;q[rp+12>>2]=_o;rp=q[rp+12>>2]+8|0;xp=P-16|0;q[xp+12>>2]=op;op=q[xp+12>>2]+8|0;xp=P-16|0;q[xp+12>>2]=q[gp+312>>2];zb(pp,np,sp,tp,up,vp,wp,rp,op,q[xp+12>>2]+8|0);op=P-16|0;q[op+12>>2]=q[Zo+28>>2];pp=P-16|0;q[pp+12>>2]=q[op+12>>2]+4;op=gp+248|0;Ya(op,q[pp+12>>2],q[gp+312>>2]);np=gp+232|0;ar(np,q[gp+312>>2],op);pp=gp+216|0;$q(pp,np,_o);_o=gp+200|0;xc(_o,op,pp);np=P-16|0;q[np+12>>2]=q[Zo+32>>2];sp=gp+120|0;Od(sp,q[np+12>>2]+4|0);np=P-16|0;q[np+12>>2]=q[Zo+28>>2];tp=gp+104|0;Nd(tp,q[np+12>>2]+4|0,qp);Nd(gp+184|0,sp,tp);qp=P-16|0;q[qp+12>>2]=Zo+616;np=q[gp+188>>2];qp=q[qp+12>>2]+48|0;q[qp>>2]=q[gp+184>>2];q[qp+4>>2]=np;np=q[gp+196>>2];q[qp+8>>2]=q[gp+192>>2];q[qp+12>>2]=np;qp=P-16|0;q[qp+12>>2]=Zo+616;qp=q[qp+12>>2];np=P-16|0;q[np+12>>2]=pp;np=q[np+12>>2];sp=P-16|0;q[sp+12>>2]=_o;sp=q[sp+12>>2];tp=P-16|0;q[tp+12>>2]=op;tp=q[tp+12>>2];up=P-16|0;q[up+12>>2]=pp;up=q[up+12>>2]+4|0;vp=P-16|0;q[vp+12>>2]=_o;vp=q[vp+12>>2]+4|0;wp=P-16|0;q[wp+12>>2]=op;wp=q[wp+12>>2]+4|0;rp=P-16|0;q[rp+12>>2]=pp;pp=q[rp+12>>2]+8|0;rp=P-16|0;q[rp+12>>2]=_o;_o=q[rp+12>>2]+8|0;rp=P-16|0;q[rp+12>>2]=op;zb(qp,np,sp,tp,up,vp,wp,pp,_o,q[rp+12>>2]+8|0);_o=P-16|0;q[_o+12>>2]=q[Zo+32>>2];op=P-16|0;q[op+12>>2]=q[_o+12>>2]+4;_o=gp+8|0;_q(_o,q[op+12>>2]);op=P-16|0;q[op+12>>2]=Zo+616;qp=gp+56|0;wg(qp,_o,q[op+12>>2]);_o=P-16|0;q[_o+12>>2]=Zo+616;Tf(q[_o+12>>2],qp);P=gp+320|0;}function cr(Zo,_o){Zo=Zo|0;_o=_o|0;var yp=0;yp=P-16|0;P=yp;q[yp+12>>2]=Zo;q[yp+8>>2]=_o;br(q[yp+12>>2],q[yp+8>>2]);P=yp+16|0;}function dr(Zo,_o,zp){Zo=Zo|0;_o=_o|0;zp=zp|0;var Ap=0;Ap=P-16|0;P=Ap;q[Ap+12>>2]=Zo;q[Ap+8>>2]=_o;q[Ap+4>>2]=zp;pl(q[Ap+12>>2],q[Ap+8>>2],q[Ap+4>>2]);P=Ap+16|0;}function er(Zo,_o,zp){Zo=Zo|0;_o=x(_o);zp=x(zp);var Bp=0;Bp=P-16|0;P=Bp;q[Bp+12>>2]=Zo;u[Bp+8>>2]=_o;u[Bp+4>>2]=zp;ol(q[Bp+12>>2],u[Bp+8>>2],u[Bp+4>>2]);P=Bp+16|0;}function fr(Zo,_o){Zo=Zo|0;_o=x(_o);var zp=0;zp=P-16|0;P=zp;q[zp+12>>2]=Zo;u[zp+8>>2]=_o;_o=u[zp+8>>2];Zo=P-16|0;q[Zo+12>>2]=q[zp+12>>2];u[Zo+8>>2]=_o;u[q[Zo+12>>2]+684>>2]=u[Zo+8>>2];P=zp+16|0;}function gr(Zo,_o){Zo=Zo|0;_o=_o|0;var Cp=0;Cp=P-16|0;P=Cp;q[Cp+12>>2]=Zo;o[Cp+11|0]=_o;_o=o[Cp+11|0]&1;Zo=P-16|0;q[Zo+12>>2]=q[Cp+12>>2];o[Zo+11|0]=_o;o[q[Zo+12>>2]+737|0]=o[Zo+11|0]&1;P=Cp+16|0;}function hr(Zo,_o){Zo=Zo|0;_o=_o|0;var Dp=0;Dp=P-16|0;P=Dp;q[Dp+12>>2]=Zo;o[Dp+11|0]=_o;_o=o[Dp+11|0]&1;Zo=P-16|0;q[Zo+12>>2]=q[Dp+12>>2];o[Zo+11|0]=_o;o[q[Zo+12>>2]+736|0]=o[Zo+11|0]&1;P=Dp+16|0;}function ir(Zo,_o,Ep,Fp){var Gp=0;Gp=P-16|0;q[Gp+12>>2]=Zo;o[Gp+11|0]=_o;u[Gp+4>>2]=Ep;u[Gp>>2]=Fp;Zo=q[Gp+12>>2];o[Zo+737|0]=o[Gp+11|0]&1;u[Zo+680>>2]=u[Gp+4>>2];u[Zo+684>>2]=u[Gp>>2];}function jr(Zo,_o,Ep,Fp){Zo=Zo|0;_o=_o|0;Ep=x(Ep);Fp=x(Fp);var Hp=0;Hp=P-16|0;P=Hp;q[Hp+12>>2]=Zo;o[Hp+11|0]=_o;u[Hp+4>>2]=Ep;u[Hp>>2]=Fp;ir(q[Hp+12>>2],o[Hp+11|0]&1,u[Hp+4>>2],u[Hp>>2]);P=Hp+16|0;}function kr(Zo,_o,Ep,Fp,Ip,Jp){Zo=Zo|0;_o=x(_o);Ep=x(Ep);Fp=x(Fp);Ip=x(Ip);Jp=x(Jp);var Kp=0;Kp=P-32|0;P=Kp;q[Kp+28>>2]=Zo;u[Kp+24>>2]=_o;u[Kp+20>>2]=Ep;u[Kp+16>>2]=Fp;u[Kp+12>>2]=Ip;u[Kp+8>>2]=Jp;yg(q[Kp+28>>2],u[Kp+24>>2],u[Kp+20>>2],u[Kp+16>>2],u[Kp+12>>2],u[Kp+8>>2]);P=Kp+32|0;}function lr(Zo,_o,Ep,Fp,Ip){Zo=Zo|0;_o=x(_o);Ep=x(Ep);Fp=x(Fp);Ip=x(Ip);var Jp=0;Jp=P-32|0;P=Jp;q[Jp+28>>2]=Zo;u[Jp+24>>2]=_o;u[Jp+20>>2]=Ep;u[Jp+16>>2]=Fp;u[Jp+12>>2]=Ip;yg(q[Jp+28>>2],u[Jp+24>>2],u[Jp+20>>2],u[Jp+16>>2],u[Jp+12>>2],x(1));P=Jp+32|0;}function mr(Zo,_o,Ep,Fp,Ip,Lp,Mp){Zo=Zo|0;_o=_o|0;Ep=Ep|0;Fp=Fp|0;Ip=Ip|0;Lp=Lp|0;Mp=Mp|0;var Np=0;Np=P-48|0;P=Np;q[Np+44>>2]=Zo;q[Np+40>>2]=_o;q[Np+36>>2]=Ep;q[Np+32>>2]=Fp;q[Np+28>>2]=Ip;q[Np+24>>2]=Lp;o[Np+23|0]=Mp;Zo=Z(768);vf(Zo,q[Np+44>>2],q[Np+40>>2],q[Np+36>>2],q[Np+32>>2],q[Np+28>>2],q[Np+24>>2],o[Np+23|0]&1);P=Np+48|0;return Zo|0}function nr(Zo,_o,Ep,Fp,Ip,Lp){Zo=Zo|0;_o=_o|0;Ep=Ep|0;Fp=Fp|0;Ip=Ip|0;Lp=Lp|0;var Mp=0;Mp=P-32|0;P=Mp;q[Mp+28>>2]=Zo;q[Mp+24>>2]=_o;q[Mp+20>>2]=Ep;q[Mp+16>>2]=Fp;q[Mp+12>>2]=Ip;q[Mp+8>>2]=Lp;Zo=Z(768);vf(Zo,q[Mp+28>>2],q[Mp+24>>2],q[Mp+20>>2],q[Mp+16>>2],q[Mp+12>>2],q[Mp+8>>2],0);P=Mp+32|0;return Zo|0}function or(Zo,_o,Ep,Fp,Ip){Zo=Zo|0;_o=_o|0;Ep=Ep|0;Fp=Fp|0;Ip=Ip|0;var Lp=0;Lp=P-32|0;P=Lp;q[Lp+28>>2]=Zo;q[Lp+24>>2]=_o;q[Lp+20>>2]=Ep;q[Lp+16>>2]=Fp;o[Lp+15|0]=Ip;Zo=Z(768);uf(Zo,q[Lp+28>>2],q[Lp+24>>2],q[Lp+20>>2],q[Lp+16>>2],o[Lp+15|0]&1);P=Lp+32|0;return Zo|0}function pr(Zo,_o,Ep,Fp){Zo=Zo|0;_o=_o|0;Ep=Ep|0;Fp=Fp|0;var Ip=0;Ip=P-32|0;P=Ip;q[Ip+28>>2]=Zo;q[Ip+24>>2]=_o;q[Ip+20>>2]=Ep;q[Ip+16>>2]=Fp;Zo=Z(768);uf(Zo,q[Ip+28>>2],q[Ip+24>>2],q[Ip+20>>2],q[Ip+16>>2],0);P=Ip+32|0;return Zo|0}function qr(Zo,_o,Ep){Zo=Zo|0;_o=_o|0;Ep=Ep|0;var Fp=0;Fp=P-32|0;P=Fp;q[Fp+28>>2]=Zo;q[Fp+24>>2]=_o;o[Fp+23|0]=Ep;Zo=Z(768);tf(Zo,q[Fp+28>>2],q[Fp+24>>2],o[Fp+23|0]&1);P=Fp+32|0;return Zo|0}function rr(Zo,_o){Zo=Zo|0;_o=_o|0;var Ep=0;Ep=P-16|0;P=Ep;q[Ep+12>>2]=Zo;q[Ep+8>>2]=_o;Zo=Z(768);tf(Zo,q[Ep+12>>2],q[Ep+8>>2],0);P=Ep+16|0;return Zo|0}function sr(Zo,_o){Zo=Zo|0;_o=_o|0;var Op=0;Op=P-16|0;P=Op;q[Op+12>>2]=Zo;o[Op+11|0]=_o;_o=o[Op+11|0]&1;Zo=P-16|0;q[Zo+12>>2]=q[Op+12>>2];o[Zo+11|0]=_o;o[q[Zo+12>>2]+170|0]=o[Zo+11|0]&1;P=Op+16|0;}function tr(Zo){Zo=Zo|0;var _o=0;_o=P-16|0;P=_o;q[_o+12>>2]=Zo;Zo=P-16|0;q[Zo+12>>2]=q[_o+12>>2];P=_o+16|0;return q[q[Zo+12>>2]+8>>2]}function ur(Zo){Zo=Zo|0;var Pp=0;Pp=P-16|0;P=Pp;q[Pp+12>>2]=Zo;Zo=P-16|0;q[Zo+12>>2]=q[Pp+12>>2];P=Pp+16|0;return x(u[q[Zo+12>>2]+36>>2])}function vr(Zo,Qp){Zo=Zo|0;Qp=x(Qp);var Rp=0;Rp=P-16|0;P=Rp;q[Rp+12>>2]=Zo;u[Rp+8>>2]=Qp;zh(q[Rp+12>>2],u[Rp+8>>2]);P=Rp+16|0;}function wr(Zo){Zo=Zo|0;var Qp=0;Qp=P-16|0;P=Qp;q[Qp+12>>2]=Zo;Zo=P-16|0;q[Zo+12>>2]=q[Qp+12>>2];P=Qp+16|0;return x(u[q[Zo+12>>2]+44>>2])}function xr(Zo,Sp){Zo=Zo|0;Sp=x(Sp);var Tp=0;Tp=P-16|0;P=Tp;q[Tp+12>>2]=Zo;u[Tp+8>>2]=Sp;Sp=u[Tp+8>>2];Zo=P-16|0;q[Zo+12>>2]=q[Tp+12>>2];u[Zo+8>>2]=Sp;u[q[Zo+12>>2]+44>>2]=u[Zo+8>>2];P=Tp+16|0;}function yr(Zo,Sp){Zo=Zo|0;Sp=x(Sp);var Up=0;Up=P-16|0;P=Up;q[Up+12>>2]=Zo;u[Up+8>>2]=Sp;Sp=u[Up+8>>2];Zo=P-16|0;q[Zo+12>>2]=q[Up+12>>2];u[Zo+8>>2]=Sp;u[q[Zo+12>>2]+32>>2]=u[Zo+8>>2];P=Up+16|0;}function zr(Zo,Sp){Zo=Zo|0;Sp=x(Sp);var Vp=0;Vp=P-16|0;P=Vp;q[Vp+12>>2]=Zo;u[Vp+8>>2]=Sp;Sp=u[Vp+8>>2];Zo=P-16|0;q[Zo+12>>2]=q[Vp+12>>2];u[Zo+8>>2]=Sp;u[q[Zo+12>>2]+28>>2]=u[Zo+8>>2];P=Vp+16|0;}function Ar(Zo,Sp){Zo=Zo|0;Sp=x(Sp);var Wp=0;Wp=P-16|0;P=Wp;q[Wp+12>>2]=Zo;u[Wp+8>>2]=Sp;Sp=u[Wp+8>>2];Zo=P-16|0;q[Zo+12>>2]=q[Wp+12>>2];u[Zo+8>>2]=Sp;u[q[Zo+12>>2]+24>>2]=u[Zo+8>>2];P=Wp+16|0;}function Br(Zo,Sp){var Xp=0;Xp=P-16|0;q[Xp+12>>2]=Zo;q[Xp+8>>2]=Sp;Zo=q[Xp+12>>2];if(q[Xp+8>>2]<0){q[Xp+8>>2]=0;}if(q[Xp+8>>2]>2){q[Xp+8>>2]=2;}q[Zo+176>>2]=q[Xp+8>>2];}function Cr(Zo,Sp){Zo=Zo|0;Sp=Sp|0;var Yp=0;Yp=P-16|0;P=Yp;q[Yp+12>>2]=Zo;q[Yp+8>>2]=Sp;Br(q[Yp+12>>2],q[Yp+8>>2]);P=Yp+16|0;}function Dr(Zo,Sp,Zp,_p){Zo=Zo|0;Sp=Sp|0;Zp=x(Zp);_p=_p|0;var $p=0;$p=P-32|0;P=$p;q[$p+28>>2]=Zo;q[$p+24>>2]=Sp;u[$p+20>>2]=Zp;q[$p+16>>2]=_p;Zo=Z(184);n[3](Zo,q[$p+28>>2],q[$p+24>>2],u[$p+20>>2],q[$p+16>>2])|0;P=$p+32|0;return Zo|0}function Er(Zo,Sp,Zp){Zo=Zo|0;Sp=Sp|0;Zp=x(Zp);var _p=0;_p=P-32|0;P=_p;q[_p+28>>2]=Zo;q[_p+24>>2]=Sp;u[_p+20>>2]=Zp;Zo=Z(184);n[3](Zo,q[_p+28>>2],q[_p+24>>2],u[_p+20>>2],1)|0;P=_p+32|0;return Zo|0}function Fr(Zo,Sp){Zo=Zo|0;Sp=Sp|0;var Zp=0;Zp=P-16|0;q[Zp+12>>2]=Zo;q[Zp+8>>2]=Sp;Sp=q[Zp+12>>2];Zo=q[Zp+8>>2];Zp=q[Zo+4>>2];q[Sp+76>>2]=q[Zo>>2];q[Sp+80>>2]=Zp;Zp=q[Zo+12>>2];q[Sp+84>>2]=q[Zo+8>>2];q[Sp+88>>2]=Zp;}function Gr(Zo){Zo=Zo|0;var Sp=0;Sp=P-16|0;q[Sp+12>>2]=Zo;return q[Sp+12>>2]+76|0}function Hr(Zo,aq){Zo=Zo|0;aq=aq|0;var bq=0;bq=P-16|0;q[bq+12>>2]=Zo;q[bq+8>>2]=aq;aq=q[bq+12>>2];Zo=q[bq+8>>2];bq=q[Zo+4>>2];q[aq+60>>2]=q[Zo>>2];q[aq+64>>2]=bq;bq=q[Zo+12>>2];q[aq+68>>2]=q[Zo+8>>2];q[aq+72>>2]=bq;}function Ir(Zo){Zo=Zo|0;var aq=0;aq=P-16|0;q[aq+12>>2]=Zo;return q[aq+12>>2]+60|0}function Jr(Zo,cq){Zo=Zo|0;cq=cq|0;var dq=0;dq=P-16|0;q[dq+12>>2]=Zo;q[dq+8>>2]=cq;cq=q[dq+12>>2];Zo=q[dq+8>>2];dq=q[Zo+4>>2];q[cq+44>>2]=q[Zo>>2];q[cq+48>>2]=dq;dq=q[Zo+12>>2];q[cq+52>>2]=q[Zo+8>>2];q[cq+56>>2]=dq;}function Kr(Zo){Zo=Zo|0;var cq=0;cq=P-16|0;q[cq+12>>2]=Zo;return q[cq+12>>2]+44|0}function Lr(Zo,eq){Zo=Zo|0;eq=eq|0;var fq=0;fq=P-16|0;q[fq+12>>2]=Zo;q[fq+8>>2]=eq;eq=q[fq+12>>2];Zo=q[fq+8>>2];fq=q[Zo+4>>2];q[eq+28>>2]=q[Zo>>2];q[eq+32>>2]=fq;fq=q[Zo+12>>2];q[eq+36>>2]=q[Zo+8>>2];q[eq+40>>2]=fq;}function Mr(Zo,eq,gq){var hq=0;hq=P-32|0;P=hq;q[hq+28>>2]=Zo;q[hq+24>>2]=eq;q[hq+20>>2]=gq;Zo=q[hq+28>>2];Kg(Zo);q[Zo>>2]=1928;eq=q[hq+24>>2];gq=q[eq+4>>2];q[Zo+28>>2]=q[eq>>2];q[Zo+32>>2]=gq;gq=q[eq+12>>2];q[Zo+36>>2]=q[eq+8>>2];q[Zo+40>>2]=gq;eq=q[hq+20>>2];gq=q[eq+4>>2];q[Zo+44>>2]=q[eq>>2];q[Zo+48>>2]=gq;gq=q[eq+12>>2];q[Zo+52>>2]=q[eq+8>>2];q[Zo+56>>2]=gq;q[(P-16|0)+12>>2]=Zo+60;q[(P-16|0)+12>>2]=Zo+76;P=hq+32|0;}function Nr(Zo,eq){Zo=Zo|0;eq=eq|0;var gq=0;gq=P-16|0;P=gq;q[gq+12>>2]=Zo;q[gq+8>>2]=eq;Zo=xa(92);Mr(Zo,q[gq+12>>2],q[gq+8>>2]);P=gq+16|0;return Zo|0}function Or(Zo,eq){Zo=Zo|0;eq=eq|0;var iq=0;iq=P-16|0;P=iq;q[iq+12>>2]=Zo;q[iq+8>>2]=eq;Jg(q[iq+12>>2]+140|0,q[iq+8>>2]);P=iq+16|0;}function Pr(Zo){Zo=Zo|0;var eq=0;eq=P-16|0;q[eq+12>>2]=Zo;return q[eq+12>>2]+140|0}function Qr(Zo,jq){var kq=0;kq=P-16|0;P=kq;q[kq+12>>2]=Zo;q[kq+8>>2]=jq;Zo=q[kq+12>>2];jq=P-16|0;q[jq+12>>2]=q[kq+8>>2];q[kq+4>>2]=q[q[jq+12>>2]+4>>2];jq=q[kq+4>>2];u[kq>>2]=0;$n(Zo,jq,kq);Zf(q[kq+8>>2],q[kq+4>>2],q[Zo+12>>2]);P=kq+16|0;}function Rr(Zo,jq){var lq=0;lq=P-16|0;P=lq;q[lq+12>>2]=Zo;q[lq+8>>2]=jq;Qr(q[lq+12>>2],q[lq+8>>2]);P=lq+16|0;}function Sr(Zo,jq){Zo=Zo|0;jq=jq|0;var mq=0;mq=P-16|0;P=mq;q[mq+12>>2]=Zo;q[mq+8>>2]=jq;Rr(q[mq+12>>2]+120|0,q[mq+8>>2]);P=mq+16|0;}function Tr(Zo){Zo=Zo|0;var jq=0;jq=P-16|0;q[jq+12>>2]=Zo;return q[jq+12>>2]+120|0}function Ur(Zo,nq){Zo=Zo|0;nq=nq|0;var oq=0;oq=P-16|0;P=oq;q[oq+12>>2]=Zo;q[oq+8>>2]=nq;Ig(q[oq+12>>2]+100|0,q[oq+8>>2]);P=oq+16|0;}function Vr(Zo){Zo=Zo|0;var nq=0;nq=P-16|0;q[nq+12>>2]=Zo;return q[nq+12>>2]+100|0}function Wr(Zo,pq){var qq=0;qq=P-32|0;P=qq;q[qq+28>>2]=Zo;q[qq+24>>2]=pq;Zo=q[qq+28>>2];pq=P-16|0;q[pq+12>>2]=q[qq+24>>2];q[qq+20>>2]=q[q[pq+12>>2]+4>>2];pq=q[qq+20>>2];q[(P-16|0)+12>>2]=qq;ao(Zo,pq,qq);_f(q[qq+24>>2],q[qq+20>>2],q[Zo+12>>2]);P=qq+32|0;}function Xr(Zo,pq){Zo=Zo|0;pq=pq|0;var rq=0;rq=P-16|0;P=rq;q[rq+12>>2]=Zo;q[rq+8>>2]=pq;Ig(q[rq+12>>2]+80|0,q[rq+8>>2]);P=rq+16|0;}function Yr(Zo){Zo=Zo|0;var pq=0;pq=P-16|0;q[pq+12>>2]=Zo;return q[pq+12>>2]+80|0}function Zr(Zo,sq){var tq=0;tq=P-16|0;P=tq;q[tq+12>>2]=Zo;q[tq+8>>2]=sq;Zo=q[tq+12>>2];sq=P-16|0;q[sq+12>>2]=q[tq+8>>2];q[tq+4>>2]=q[q[sq+12>>2]+4>>2];sq=q[tq+4>>2];q[tq>>2]=0;Qg(Zo,sq,tq);gg(q[tq+8>>2],q[tq+4>>2],q[Zo+12>>2]);P=tq+16|0;}function _r(Zo,sq){Zo=Zo|0;sq=sq|0;var uq=0;uq=P-16|0;P=uq;q[uq+12>>2]=Zo;q[uq+8>>2]=sq;Jg(q[uq+12>>2]+28|0,q[uq+8>>2]);P=uq+16|0;}function $r(Zo,sq,vq){var wq=0;wq=P-32|0;P=wq;q[wq+28>>2]=Zo;q[wq+24>>2]=sq;q[wq+20>>2]=vq;Zo=q[wq+28>>2];Kg(Zo);q[Zo>>2]=1772;Fb(Zo+28|0);sq=q[wq+24>>2];vq=q[sq+4>>2];q[Zo+48>>2]=q[sq>>2];q[Zo+52>>2]=vq;vq=q[sq+12>>2];q[Zo+56>>2]=q[sq+8>>2];q[Zo+60>>2]=vq;sq=q[wq+20>>2];vq=q[sq+4>>2];q[Zo+64>>2]=q[sq>>2];q[Zo+68>>2]=vq;vq=q[sq+12>>2];q[Zo+72>>2]=q[sq+8>>2];q[Zo+76>>2]=vq;Fb(Zo+80|0);Fb(Zo+100|0);Fb(Zo+120|0);Fb(Zo+140|0);P=wq+32|0;}function as(Zo,sq){Zo=Zo|0;sq=sq|0;var vq=0;vq=P-16|0;P=vq;q[vq+12>>2]=Zo;q[vq+8>>2]=sq;Zo=xa(160);$r(Zo,q[vq+12>>2],q[vq+8>>2]);P=vq+16|0;return Zo|0}function bs(Zo,sq){var xq=0,yq=0,zq=0,Aq=0,Bq=x(0),Cq=x(0);xq=P-352|0;P=xq;q[xq+348>>2]=Zo;q[xq+344>>2]=sq;sq=q[xq+348>>2];ya(xq+280|0);ya(xq+216|0);yq=sq+92|0;zq=Ra()+(q[sq+176>>2]<<4)|0;Zo=xq;Cq=u[sq+52>>2];if(u[sq+20>>2]>x(0)){Bq=u[sq+20>>2];}else {Bq=x(0);}u[Zo+180>>2]=Cq+Bq;Zo=xq+184|0;sa(Zo,zq,xq+180|0);zc(xq+200|0,yq,Zo);Zo=q[xq+204>>2];q[sq+112>>2]=q[xq+200>>2];q[sq+116>>2]=Zo;Zo=q[xq+212>>2];q[sq+120>>2]=q[xq+208>>2];q[sq+124>>2]=Zo;Zo=xq+280|0;Ba(Zo);yq=xq+216|0;Ba(yq);zq=Ra()+(q[sq+176>>2]<<4)|0;Aq=q[sq+12>>2];u[xq+140>>2]=x(n[q[q[Aq>>2]+48>>2]](Aq))+u[sq+56>>2];Aq=xq+144|0;sa(Aq,zq,xq+140|0);zq=xq+160|0;zc(zq,sq+92|0,Aq);za(Zo,zq);za(yq,sq+112|0);Zo=q[sq+8>>2];yq=xq+16|0;zg(yq,Ra()+(q[sq+176>>2]<<4)|0);yc(xq+32|0,Zo,yq,x(.707099974155426));Zo=P-16|0;q[Zo+12>>2]=sq;yq=P-16|0;q[yq+12>>2]=q[q[Zo+12>>2]+8>>2];q[xq+40>>2]=q[q[q[yq+12>>2]+188>>2]+4>>2];Zo=P-16|0;q[Zo+12>>2]=sq;yq=P-16|0;q[yq+12>>2]=q[q[Zo+12>>2]+8>>2];q[xq+44>>2]=q[q[q[yq+12>>2]+188>>2]+8>>2];a:{if(o[sq+170|0]&1){Zo=q[sq+8>>2];yq=q[sq+12>>2];zq=P-16|0;q[zq+12>>2]=q[xq+344>>2];Ta(Zo,yq,xq+280|0,xq+216|0,xq+32|0,u[(q[zq+12>>2]+28|0)+28>>2]);break a}La(q[xq+344>>2],q[sq+12>>2],xq+280|0,xq+216|0,xq+32|0,x(0));}Zo=P-16|0;q[Zo+12>>2]=xq+32;b:{c:{if(!(u[q[Zo+12>>2]+4>>2]<x(1))){break c}Zo=P-16|0;q[Zo+12>>2]=q[sq+8>>2];if(q[q[Zo+12>>2]+204>>2]&4){break c}if(!(n[q[q[sq>>2]+56>>2]](sq,q[sq+8>>2],q[xq+112>>2])&1)){break c}if(+ta(xq+80|0,Ra()+(q[sq+176>>2]<<4)|0)>0){u[sq+108>>2]=u[sq+52>>2]*u[xq+36>>2];d:{if((o[sq+180|0]&1)==1){yb(sq+92|0,sq+92|0,sq+112|0,u[xq+36>>2]);break d}Zo=q[sq+116>>2];q[sq+92>>2]=q[sq+112>>2];q[sq+96>>2]=Zo;Zo=q[sq+124>>2];q[sq+100>>2]=q[sq+120>>2];q[sq+104>>2]=Zo;}}u[sq+16>>2]=0;u[sq+20>>2]=0;break b}u[sq+108>>2]=u[sq+52>>2];Zo=q[sq+116>>2];q[sq+92>>2]=q[sq+112>>2];q[sq+96>>2]=Zo;Zo=q[sq+124>>2];q[sq+100>>2]=q[sq+120>>2];q[sq+104>>2]=Zo;}xb(xq+32|0);P=xq+352|0;}function cs(Zo,sq){Zo=Zo|0;sq=sq|0;var Dq=0;Dq=P-16|0;P=Dq;q[Dq+12>>2]=Zo;q[Dq+8>>2]=sq;Zo=Z(200);Qd(Zo,q[Dq+12>>2],q[Dq+8>>2]);P=Dq+16|0;return Zo|0}function ds(Zo){Zo=Zo|0;var sq=0;sq=P-16|0;P=sq;q[sq+12>>2]=Zo;Zo=Z(200);Qd(Zo,q[sq+12>>2],Rd());P=sq+16|0;return Zo|0}function es(){var Zo=0;Zo=P-48|0;P=Zo;if(!(!!(r[22416]!=0)|o[22416]&1)){u[Zo+44>>2]=1;u[Zo+40>>2]=0;u[Zo+36>>2]=0;u[Zo+32>>2]=0;u[Zo+28>>2]=1;u[Zo+24>>2]=0;u[Zo+20>>2]=0;u[Zo+16>>2]=0;u[Zo+12>>2]=1;uc(22368,Zo+44|0,Zo+40|0,Zo+36|0,Zo+32|0,Zo+28|0,Zo+24|0,Zo+20|0,Zo+16|0,Zo+12|0);q[5604]=0;q[5604]=q[5604]|1;}P=Zo+48|0;return 22368}function fs(){var Eq=0,Fq=0;Eq=P-16|0;P=Eq;Fq=Z(200);Qd(Fq,Rd(),Rd());P=Eq+16|0;return Fq|0}function gs(Gq,Hq,Iq,Jq,Kq,Lq,Mq){Gq=Gq|0;Hq=Hq|0;Iq=x(Iq);Jq=x(Jq);Kq=x(Kq);Lq=x(Lq);Mq=Mq|0;var Nq=0;Nq=P-32|0;P=Nq;q[Nq+28>>2]=Gq;q[Nq+24>>2]=Hq;u[Nq+20>>2]=Iq;u[Nq+16>>2]=Jq;u[Nq+12>>2]=Kq;u[Nq+8>>2]=Lq;q[Nq+4>>2]=Mq;Ac(q[Nq+28>>2],q[Nq+24>>2],u[Nq+20>>2],u[Nq+16>>2],u[Nq+12>>2],u[Nq+8>>2],q[Nq+4>>2]);P=Nq+32|0;}function hs(Gq,Hq,Iq,Jq,Kq,Lq){Gq=Gq|0;Hq=Hq|0;Iq=x(Iq);Jq=x(Jq);Kq=x(Kq);Lq=x(Lq);var Mq=0;Mq=P-32|0;P=Mq;q[Mq+28>>2]=Gq;q[Mq+24>>2]=Hq;u[Mq+20>>2]=Iq;u[Mq+16>>2]=Jq;u[Mq+12>>2]=Kq;u[Mq+8>>2]=Lq;Ac(q[Mq+28>>2],q[Mq+24>>2],u[Mq+20>>2],u[Mq+16>>2],u[Mq+12>>2],u[Mq+8>>2],2);P=Mq+32|0;}function is(Gq,Hq,Iq,Jq,Kq){Gq=Gq|0;Hq=Hq|0;Iq=x(Iq);Jq=x(Jq);Kq=x(Kq);var Lq=0;Lq=P-32|0;P=Lq;q[Lq+28>>2]=Gq;q[Lq+24>>2]=Hq;u[Lq+20>>2]=Iq;u[Lq+16>>2]=Jq;u[Lq+12>>2]=Kq;Ac(q[Lq+28>>2],q[Lq+24>>2],u[Lq+20>>2],u[Lq+16>>2],u[Lq+12>>2],x(0),2);P=Lq+32|0;}function js(Gq,Hq,Iq,Jq){Gq=Gq|0;Hq=Hq|0;Iq=x(Iq);Jq=x(Jq);var Kq=0;Kq=P-16|0;P=Kq;q[Kq+12>>2]=Gq;q[Kq+8>>2]=Hq;u[Kq+4>>2]=Iq;u[Kq>>2]=Jq;Ac(q[Kq+12>>2],q[Kq+8>>2],u[Kq+4>>2],u[Kq>>2],x(0),x(0),2);P=Kq+16|0;}function ks(Gq,Hq,Iq,Jq){Gq=Gq|0;Hq=Hq|0;Iq=Iq|0;Jq=Jq|0;var Oq=0;Oq=P-16|0;P=Oq;q[Oq+12>>2]=Gq;q[Oq+8>>2]=Hq;q[Oq+4>>2]=Iq;o[Oq+3|0]=Jq;ni(q[Oq+12>>2],q[Oq+8>>2],q[Oq+4>>2],o[Oq+3|0]&1);P=Oq+16|0;}function ls(Gq,Hq,Iq){Gq=Gq|0;Hq=Hq|0;Iq=Iq|0;var Jq=0;Jq=P-16|0;P=Jq;q[Jq+12>>2]=Gq;q[Jq+8>>2]=Hq;q[Jq+4>>2]=Iq;ni(q[Jq+12>>2],q[Jq+8>>2],q[Jq+4>>2],1);P=Jq+16|0;}function ms(Gq,Hq){var Iq=0;Iq=P-16|0;P=Iq;q[Iq+12>>2]=Gq;q[Iq+8>>2]=Hq;Hq=q[Iq+8>>2];Gq=P-16|0;q[Gq+12>>2]=q[Iq+12>>2]+16;q[Gq+8>>2]=Hq;P=Iq+16|0;return q[(q[q[Gq+12>>2]+12>>2]+w(q[Gq+8>>2],80)|0)+64>>2]}function ns(Gq,Hq){Gq=Gq|0;Hq=Hq|0;var Pq=0;Pq=P-16|0;P=Pq;q[Pq+12>>2]=Gq;q[Pq+8>>2]=Hq;Gq=ms(q[Pq+12>>2],q[Pq+8>>2]);P=Pq+16|0;return Gq|0}function os(Gq){var Hq=0;Hq=P-16|0;P=Hq;q[Hq+12>>2]=Gq;Gq=P-16|0;q[Gq+12>>2]=q[Hq+12>>2]+16;P=Hq+16|0;return q[q[Gq+12>>2]+4>>2]}function ps(Gq){Gq=Gq|0;var Qq=0;Qq=P-16|0;P=Qq;q[Qq+12>>2]=Gq;Gq=os(q[Qq+12>>2]);P=Qq+16|0;return Gq|0}function qs(Gq,Rq){Gq=Gq|0;Rq=Rq|0;var Sq=0;Sq=P-16|0;P=Sq;q[Sq+12>>2]=Gq;q[Sq+8>>2]=Rq;mi(q[Sq+12>>2],q[Sq+8>>2]);P=Sq+16|0;}function rs(Gq,Rq,Tq){Gq=Gq|0;Rq=Rq|0;Tq=Tq|0;var Uq=0;Uq=P-16|0;P=Uq;q[Uq+12>>2]=Gq;q[Uq+8>>2]=Rq;q[Uq+4>>2]=Tq;Gz(q[Uq+12>>2],q[Uq+8>>2],q[Uq+4>>2]);P=Uq+16|0;}function ss(Gq){Gq=Gq|0;var Rq=0;Rq=P-16|0;P=Rq;o[Rq+15|0]=Gq;Gq=Z(200);pi(Gq,o[Rq+15|0]&1);P=Rq+16|0;return Gq|0}function ts(){var Gq=0,Tq=0;Gq=P-16|0;P=Gq;Tq=Z(200);pi(Tq,1);P=Gq+16|0;return Tq|0}function us(Vq,Wq,Xq,Yq){var Zq=0;Zq=P-32|0;P=Zq;q[Zq+28>>2]=Vq;u[Zq+24>>2]=Wq;u[Zq+20>>2]=Xq;q[Zq+16>>2]=Yq;Vq=q[Zq+28>>2];q[Vq+56>>2]=q[Zq+16>>2];u[Zq+12>>2]=1;u[Zq+8>>2]=1;u[Zq+4>>2]=1;ca(Vq+16|0,Zq+12|0,Zq+8|0,Zq+4|0);a:{if(q[Vq+56>>2]==1){Yq=Zq+24|0;ca(Vq+32|0,Yq,Zq+20|0,Yq);break a}b:{if(!q[Vq+56>>2]){Yq=Zq+24|0;ca(Vq+32|0,Zq+20|0,Yq,Yq);break b}Yq=Zq+24|0;ca(Vq+32|0,Yq,Yq,Zq+20|0);}}q[Zq>>2]=(q[Zq+16>>2]+2|0)%3;Yq=P-16|0;q[Yq+12>>2]=Vq+32;u[Vq+48>>2]=u[q[Yq+12>>2]+(q[Zq>>2]<<2)>>2];P=Zq+32|0;}function vs(Vq,Wq,Xq,Yq){Vq=Vq|0;Wq=x(Wq);Xq=x(Xq);Yq=Yq|0;var _q=0;_q=P-16|0;P=_q;q[_q+12>>2]=Vq;u[_q+8>>2]=Wq;u[_q+4>>2]=Xq;q[_q>>2]=Yq;us(q[_q+12>>2],u[_q+8>>2],u[_q+4>>2],q[_q>>2]);P=_q+16|0;}function ws(Vq,Wq){Vq=x(Vq);Wq=x(Wq);var Xq=0,Yq=0;Xq=P-16|0;P=Xq;u[Xq+12>>2]=Vq;u[Xq+8>>2]=Wq;Yq=Z(60);dy(Yq,u[Xq+12>>2],u[Xq+8>>2]);P=Xq+16|0;return Yq|0}function xs(Vq,Wq){var $q=0;$q=P-16|0;P=$q;q[$q+12>>2]=Vq;q[$q+8>>2]=Wq;u[$q+4>>2]=.10000000149011612;Vq=q[$q+12>>2];Wq=P-16|0;q[Wq+12>>2]=q[$q+8>>2];u[$q>>2]=u[q[Wq+12>>2]+(vo(q[$q+8>>2])<<2)>>2];uo(Vq,u[$q>>2],u[$q+4>>2]);P=$q+16|0;}function ys(Vq,Wq){var ar=0,br=0,cr=0;ar=P-80|0;P=ar;q[ar+76>>2]=Vq;q[ar+72>>2]=Wq;Vq=q[ar+76>>2];u[ar+52>>2]=n[q[q[Vq>>2]+48>>2]](Vq);u[ar+48>>2]=n[q[q[Vq>>2]+48>>2]](Vq);u[ar+44>>2]=n[q[q[Vq>>2]+48>>2]](Vq);br=ar+56|0;ca(br,ar+52|0,ar+48|0,ar+44|0);cr=ar+8|0;lb(cr,q[ar+72>>2],Vq+16|0);Wq=ar+24|0;Ka(Wq,cr,br);br=q[Wq+4>>2];q[Vq+32>>2]=q[Wq>>2];q[Vq+36>>2]=br;br=q[Wq+12>>2];q[Vq+40>>2]=q[Wq+8>>2];q[Vq+44>>2]=br;xs(Vq,q[ar+72>>2]);P=ar+80|0;}function zs(Vq,Wq){Vq=Vq|0;Wq=Wq|0;var dr=0;dr=P-16|0;P=dr;q[dr+12>>2]=Vq;q[dr+8>>2]=Wq;ys(q[dr+12>>2],q[dr+8>>2]);P=dr+16|0;}function As(Vq){Vq=Vq|0;var Wq=0;Wq=P-16|0;P=Wq;q[Wq+12>>2]=Vq;Vq=Z(60);Qx(Vq,q[Wq+12>>2]);P=Wq+16|0;return Vq|0}function Bs(Vq,er){Vq=Vq|0;er=er|0;var fr=0;fr=P-16|0;P=fr;q[fr+12>>2]=Vq;q[fr+8>>2]=er;er=q[fr+8>>2];Vq=P-16|0;q[Vq+12>>2]=q[fr+12>>2];q[Vq+8>>2]=er;P=fr+16|0;return (q[Vq+12>>2]+4|0)+w(q[Vq+8>>2],208)|0}function Cs(Vq){Vq=Vq|0;var er=0;er=P-16|0;P=er;q[er+12>>2]=Vq;Vq=P-16|0;q[Vq+12>>2]=q[er+12>>2];P=er+16|0;return q[q[Vq+12>>2]+844>>2]}function Ds(Vq){Vq=Vq|0;var gr=0;gr=P-16|0;P=gr;q[gr+12>>2]=Vq;Vq=P-16|0;q[Vq+12>>2]=q[gr+12>>2];P=gr+16|0;return q[q[Vq+12>>2]+840>>2]}function Es(Vq){Vq=Vq|0;var hr=0;hr=P-16|0;P=hr;q[hr+12>>2]=Vq;Vq=P-16|0;q[Vq+12>>2]=q[hr+12>>2];P=hr+16|0;return q[q[Vq+12>>2]+836>>2]}function Fs(){var Vq=0,ir=0;Vq=P-16|0;P=Vq;ir=Z(868);Nb(ir);P=Vq+16|0;return ir|0}function Gs(jr){jr=jr|0;var kr=0;kr=P-16|0;P=kr;q[kr+12>>2]=jr;jr=P-16|0;q[jr+12>>2]=q[kr+12>>2];P=kr+16|0;return q[jr+12>>2]+20|0}function Hs(jr,lr,mr,nr){jr=jr|0;lr=lr|0;mr=mr|0;nr=nr|0;var or=0;or=P-16|0;P=or;q[or+12>>2]=jr;q[or+8>>2]=lr;q[or+4>>2]=mr;q[or>>2]=nr;ax(q[or+12>>2],q[or+8>>2],q[or+4>>2],q[or>>2]);P=or+16|0;}function Is(jr,lr,mr,nr,pr){jr=jr|0;lr=lr|0;mr=mr|0;nr=nr|0;pr=pr|0;var qr=0;qr=P-32|0;P=qr;q[qr+28>>2]=jr;q[qr+24>>2]=lr;q[qr+20>>2]=mr;q[qr+16>>2]=nr;o[qr+15|0]=pr;Ph(q[qr+28>>2],q[qr+24>>2],q[qr+20>>2],q[qr+16>>2],o[qr+15|0]&1);P=qr+32|0;}function Js(jr,lr,mr,nr){jr=jr|0;lr=lr|0;mr=mr|0;nr=nr|0;var pr=0;pr=P-16|0;P=pr;q[pr+12>>2]=jr;q[pr+8>>2]=lr;q[pr+4>>2]=mr;q[pr>>2]=nr;Ph(q[pr+12>>2],q[pr+8>>2],q[pr+4>>2],q[pr>>2],0);P=pr+16|0;}function Ks(jr,lr){jr=jr|0;lr=lr|0;var mr=0;mr=P-16|0;P=mr;o[mr+15|0]=jr;o[mr+14|0]=lr;jr=Z(172);xe(jr,o[mr+15|0]&1,o[mr+14|0]&1);P=mr+16|0;return jr|0}function Ls(jr){jr=jr|0;var lr=0;lr=P-16|0;P=lr;o[lr+15|0]=jr;jr=Z(172);xe(jr,o[lr+15|0]&1,1);P=lr+16|0;return jr|0}function Ms(){var jr=0,nr=0;jr=P-16|0;P=jr;nr=Z(172);xe(nr,1,1);P=jr+16|0;return nr|0}function Ns(rr,sr,tr){rr=rr|0;sr=sr|0;tr=x(tr);var ur=0;ur=P-16|0;P=ur;q[ur+12>>2]=rr;q[ur+8>>2]=sr;u[ur+4>>2]=tr;u[(q[ur+12>>2]+(q[ur+8>>2]<<2)|0)+1316>>2]=u[ur+4>>2];P=ur+16|0;}function Os(rr,sr){rr=rr|0;sr=sr|0;var tr=0;tr=P-16|0;P=tr;q[tr+12>>2]=rr;q[tr+8>>2]=sr;zm(q[tr+12>>2],q[tr+8>>2]);P=tr+16|0;}function Ps(rr){rr=rr|0;var sr=0;sr=P-16|0;P=sr;q[sr+12>>2]=rr;Am(q[sr+12>>2]);P=sr+16|0;}function Qs(rr,vr,wr){rr=rr|0;vr=vr|0;wr=x(wr);var xr=0;xr=P-16|0;P=xr;q[xr+12>>2]=rr;q[xr+8>>2]=vr;u[xr+4>>2]=wr;u[(q[xr+12>>2]+(q[xr+8>>2]<<2)|0)+1364>>2]=u[xr+4>>2];P=xr+16|0;}function Rs(rr,vr,wr){rr=rr|0;vr=vr|0;wr=x(wr);var yr=0;yr=P-16|0;P=yr;q[yr+12>>2]=rr;q[yr+8>>2]=vr;u[yr+4>>2]=wr;u[(q[yr+12>>2]+(q[yr+8>>2]<<2)|0)+1340>>2]=u[yr+4>>2];P=yr+16|0;}function Ss(rr,vr,wr){rr=rr|0;vr=vr|0;wr=wr|0;var zr=0;zr=P-16|0;P=zr;q[zr+12>>2]=rr;q[zr+8>>2]=vr;o[zr+7|0]=wr;Bm(q[zr+12>>2],q[zr+8>>2],o[zr+7|0]&1);P=zr+16|0;}function Ts(rr,vr,wr,Ar,Br){rr=rr|0;vr=vr|0;wr=wr|0;Ar=Ar|0;Br=Br|0;var Cr=0;Cr=P-32|0;P=Cr;q[Cr+28>>2]=rr;q[Cr+24>>2]=vr;q[Cr+20>>2]=wr;q[Cr+16>>2]=Ar;o[Cr+15|0]=Br;rr=Z(1388);Dm(rr,q[Cr+28>>2],q[Cr+24>>2],q[Cr+20>>2],q[Cr+16>>2],o[Cr+15|0]&1);P=Cr+32|0;return rr|0}function Us(rr,vr,wr){rr=rr|0;vr=vr|0;wr=wr|0;var Ar=0;Ar=P-32|0;P=Ar;q[Ar+28>>2]=rr;q[Ar+24>>2]=vr;o[Ar+23|0]=wr;rr=Z(1388);Cm(rr,q[Ar+28>>2],q[Ar+24>>2],o[Ar+23|0]&1);P=Ar+32|0;return rr|0}function Vs(){var rr=0,vr=0;rr=P-16|0;P=rr;vr=Z(348);gk(vr);P=rr+16|0;return vr|0}function Ws(wr){wr=wr|0;var Br=0;Br=P-16|0;P=Br;q[Br+12>>2]=wr;wr=xa(88);$e(wr,q[Br+12>>2]);P=Br+16|0;return wr|0}function Xs(){var wr=0,Dr=0;wr=P-32|0;P=wr;Dr=xa(88);Ng(wr+8|0);$e(Dr,wr+8|0);P=wr+32|0;return Dr|0}function Ys(Er,Fr,Gr,Hr,Ir,Jr,Kr,Lr,Mr){Er=Er|0;Fr=Fr|0;Gr=Gr|0;Hr=x(Hr);Ir=x(Ir);Jr=x(Jr);Kr=Kr|0;Lr=Lr|0;Mr=Mr|0;var Nr=0;Nr=P-48|0;P=Nr;q[Nr+44>>2]=Er;q[Nr+40>>2]=Fr;q[Nr+36>>2]=Gr;u[Nr+32>>2]=Hr;u[Nr+28>>2]=Ir;u[Nr+24>>2]=Jr;q[Nr+20>>2]=Kr;q[Nr+16>>2]=Lr;o[Nr+15|0]=Mr;Er=Z(128);yx(Er,q[Nr+44>>2],q[Nr+40>>2],q[Nr+36>>2],u[Nr+32>>2],u[Nr+28>>2],u[Nr+24>>2],q[Nr+20>>2],q[Nr+16>>2],o[Nr+15|0]&1);P=Nr+48|0;return Er|0}function Zs(Er,Fr){Er=Er|0;Fr=Fr|0;var Gr=0;Gr=P-16|0;P=Gr;q[Gr+12>>2]=Er;q[Gr+8>>2]=Fr;sz(q[Gr+12>>2],q[Gr+8>>2]);P=Gr+16|0;}function _s(Er,Fr){Er=Er|0;Fr=x(Fr);var Hr=0;Hr=P-16|0;P=Hr;q[Hr+12>>2]=Er;u[Hr+8>>2]=Fr;Fr=u[Hr+8>>2];Er=P-16|0;q[Er+12>>2]=q[Hr+12>>2];u[Er+8>>2]=Fr;u[q[Er+12>>2]+64>>2]=u[Er+8>>2];P=Hr+16|0;}function $s(Er,Fr){Er=Er|0;Fr=x(Fr);var Ir=0;Ir=P-16|0;P=Ir;q[Ir+12>>2]=Er;u[Ir+8>>2]=Fr;Fr=u[Ir+8>>2];Er=P-16|0;q[Er+12>>2]=q[Ir+12>>2];u[Er+8>>2]=Fr;u[q[Er+12>>2]+60>>2]=u[Er+8>>2];P=Ir+16|0;}function at(Er,Fr){Er=x(Er);Fr=x(Fr);var Jr=0,Kr=0;Jr=P-16|0;P=Jr;u[Jr+12>>2]=Er;u[Jr+8>>2]=Fr;Kr=Z(80);tz(Kr,u[Jr+12>>2],u[Jr+8>>2]);P=Jr+16|0;return Kr|0}function bt(Er,Fr){Er=Er|0;Fr=Fr|0;var Lr=0;Lr=P-16|0;P=Lr;q[Lr+12>>2]=Er;q[Lr+8>>2]=Fr;wf(q[Lr+12>>2],q[Lr+8>>2]);P=Lr+16|0;}function ct(Er,Fr,Mr){var Or=0;Or=P-16|0;P=Or;q[Or+12>>2]=Fr;q[Or+8>>2]=Mr;sa(Er,q[Or+8>>2],q[Or+12>>2]);P=Or+16|0;}function dt(Er,Fr){Er=Er|0;Fr=Fr|0;var Mr=0;Mr=P-16|0;P=Mr;q[Mr+12>>2]=Er;q[Mr+8>>2]=Fr;Bl(q[Mr+12>>2],q[Mr+8>>2]);P=Mr+16|0;}function et(Er,Fr){Er=Er|0;Fr=x(Fr);var Pr=0,Qr=0;Pr=P-16|0;P=Pr;q[Pr+12>>2]=Er;u[Pr+8>>2]=Fr;Fr=u[Pr+8>>2];Er=P-16|0;q[Er+12>>2]=q[Pr+12>>2];u[Er+8>>2]=Fr;Qr=q[Er+12>>2];u[Qr+572>>2]=u[Er+8>>2];o[Qr+553|0]=1;P=Pr+16|0;}function ft(Er,Fr){Er=Er|0;Fr=x(Fr);var Rr=0,Sr=0;Rr=P-16|0;P=Rr;q[Rr+12>>2]=Er;u[Rr+8>>2]=Fr;Fr=u[Rr+8>>2];Er=P-16|0;q[Er+12>>2]=q[Rr+12>>2];u[Er+8>>2]=Fr;Sr=q[Er+12>>2];u[Sr+572>>2]=u[Er+8>>2];o[Sr+553|0]=0;P=Rr+16|0;}function gt(Er,Fr){Er=Er|0;Fr=Fr|0;var Tr=0;Tr=P-16|0;P=Tr;q[Tr+12>>2]=Er;o[Tr+11|0]=Fr;Fr=o[Tr+11|0]&1;Er=P-16|0;q[Er+12>>2]=q[Tr+12>>2];o[Er+11|0]=Fr;o[q[Er+12>>2]+552|0]=o[Er+11|0]&1;P=Tr+16|0;}function ht(Er,Fr){Er=Er|0;Fr=x(Fr);var Ur=0;Ur=P-16|0;P=Ur;q[Ur+12>>2]=Er;u[Ur+8>>2]=Fr;Fr=u[Ur+8>>2];Er=P-16|0;q[Er+12>>2]=q[Ur+12>>2];u[Er+8>>2]=Fr;u[q[Er+12>>2]+440>>2]=u[Er+8>>2];P=Ur+16|0;}function it(Er,Fr){Er=Er|0;Fr=Fr|0;var Vr=0;Vr=P-16|0;P=Vr;q[Vr+12>>2]=Er;o[Vr+11|0]=Fr;Fr=o[Vr+11|0]&1;Er=P-16|0;q[Er+12>>2]=q[Vr+12>>2];o[Er+11|0]=Fr;o[q[Er+12>>2]+524|0]=o[Er+11|0]&1;P=Vr+16|0;}function jt(Er,Fr,Wr){var Xr=0;Xr=P-16|0;q[Xr+12>>2]=Er;q[Xr+8>>2]=Fr;u[Xr+4>>2]=Wr;Er=q[Xr+12>>2];Fr=q[Xr+8>>2]+ -3|0;a:{if(Fr>>>0>2){break a}b:{switch(Fr-1|0){default:u[Er+452>>2]=u[Xr+4>>2];break a;case 0:u[Er+448>>2]=u[Xr+4>>2];break a;case 1:break b}}u[Er+444>>2]=u[Xr+4>>2];}}function kt(Er,Fr,Wr){Er=Er|0;Fr=Fr|0;Wr=x(Wr);var Yr=0;Yr=P-16|0;P=Yr;q[Yr+12>>2]=Er;q[Yr+8>>2]=Fr;u[Yr+4>>2]=Wr;jt(q[Yr+12>>2],q[Yr+8>>2],u[Yr+4>>2]);P=Yr+16|0;}function lt(Er,Fr,Wr,Zr){Er=Er|0;Fr=Fr|0;Wr=Wr|0;Zr=Zr|0;var _r=0;_r=P-32|0;P=_r;q[_r+28>>2]=Er;q[_r+24>>2]=Fr;q[_r+20>>2]=Wr;q[_r+16>>2]=Zr;Er=Z(608);Il(Er,q[_r+28>>2],q[_r+24>>2],q[_r+20>>2],q[_r+16>>2]);P=_r+32|0;return Er|0}function mt(Er,Fr){Er=Er|0;Fr=Fr|0;var Wr=0;Wr=P-16|0;P=Wr;q[Wr+12>>2]=Er;q[Wr+8>>2]=Fr;Er=Z(608);Hl(Er,q[Wr+12>>2],q[Wr+8>>2]);P=Wr+16|0;return Er|0}function nt(Er,Fr){Er=Er|0;Fr=Fr|0;var Zr=0;Zr=P-16|0;P=Zr;q[Zr+12>>2]=Er;o[Zr+11|0]=Fr;Er=Z(100);Zh(Er,q[Zr+12>>2],o[Zr+11|0]&1);P=Zr+16|0;return Er|0}function ot(Er){Er=Er|0;var Fr=0;Fr=P-16|0;P=Fr;q[Fr+12>>2]=Er;Er=Z(100);Zh(Er,q[Fr+12>>2],1);P=Fr+16|0;return Er|0}function pt(Er){var $r=0,as=0;$r=P-16|0;P=$r;q[$r+12>>2]=Er;Er=P-16|0;as=q[$r+12>>2];q[Er+12>>2]=as;q[q[Er+12>>2]>>2]=1644;q[as>>2]=1552;P=$r+16|0;}function qt(){var Er=0;Er=Z(4);q[Er>>2]=0;pt(Er);return Er|0}function rt(bs,cs){bs=bs|0;cs=cs|0;var ds=0;ds=P-16|0;q[ds+12>>2]=bs;q[ds+8>>2]=cs;bs=q[ds+12>>2];cs=q[ds+8>>2];ds=q[cs+4>>2];q[bs+348>>2]=q[cs>>2];q[bs+352>>2]=ds;q[bs+356>>2]=q[cs+8>>2];}function st(bs){bs=bs|0;var cs=0;cs=P-16|0;q[cs+12>>2]=bs;return q[cs+12>>2]+348|0}function tt(bs){bs=bs|0;var es=0;es=P-16|0;P=es;q[es+12>>2]=bs;bs=P-16|0;q[bs+12>>2]=q[es+12>>2];P=es+16|0;return q[bs+12>>2]+316|0}function ut(bs){bs=bs|0;var fs=0;fs=P-16|0;P=fs;q[fs+12>>2]=bs;bs=P-16|0;q[bs+12>>2]=q[fs+12>>2];P=fs+16|0;return q[bs+12>>2]+300|0}function vt(bs,gs){var hs=0;hs=P-16|0;q[hs+12>>2]=bs;q[hs+8>>2]=gs;gs=q[hs+12>>2];bs=q[hs+8>>2];hs=q[bs+4>>2];q[gs+316>>2]=q[bs>>2];q[gs+320>>2]=hs;hs=q[bs+12>>2];q[gs+324>>2]=q[bs+8>>2];q[gs+328>>2]=hs;}function wt(bs,gs){bs=bs|0;gs=gs|0;var is=0;is=P-16|0;P=is;q[is+12>>2]=bs;q[is+8>>2]=gs;vt(q[is+12>>2],q[is+8>>2]);P=is+16|0;}function xt(bs,gs){var js=0;js=P-16|0;q[js+12>>2]=bs;q[js+8>>2]=gs;gs=q[js+12>>2];bs=q[js+8>>2];js=q[bs+4>>2];q[gs+300>>2]=q[bs>>2];q[gs+304>>2]=js;js=q[bs+12>>2];q[gs+308>>2]=q[bs+8>>2];q[gs+312>>2]=js;}function yt(bs,gs){bs=bs|0;gs=gs|0;var ks=0;ks=P-16|0;P=ks;q[ks+12>>2]=bs;q[ks+8>>2]=gs;xt(q[ks+12>>2],q[ks+8>>2]);P=ks+16|0;}function zt(bs,gs,ls,ms){bs=bs|0;gs=gs|0;ls=ls|0;ms=ms|0;var ns=0;ns=P-32|0;P=ns;q[ns+28>>2]=bs;q[ns+24>>2]=gs;q[ns+20>>2]=ls;q[ns+16>>2]=ms;bs=Z(360);fm(bs,q[ns+28>>2],q[ns+24>>2],q[ns+20>>2],q[ns+16>>2]);P=ns+32|0;return bs|0}function At(bs,gs){bs=bs|0;gs=gs|0;var ls=0;ls=P-16|0;P=ls;q[ls+12>>2]=bs;q[ls+8>>2]=gs;bs=Z(360);em(bs,q[ls+12>>2],q[ls+8>>2]);P=ls+16|0;return bs|0}function Bt(bs,gs,ms){bs=bs|0;gs=gs|0;ms=ms|0;var os=0;os=P-16|0;P=os;q[os+12>>2]=bs;q[os+8>>2]=gs;q[os+4>>2]=ms;bs=q[os+12>>2];n[q[q[bs>>2]+36>>2]](bs,q[os+8>>2],q[os+4>>2],-3);P=os+16|0;}function Ct(bs,gs){bs=bs|0;gs=gs|0;var ms=0;ms=P-16|0;P=ms;q[ms+12>>2]=bs;q[ms+8>>2]=gs;bs=q[ms+12>>2];n[q[q[bs>>2]+36>>2]](bs,q[ms+8>>2],2,-3);P=ms+16|0;}function Dt(bs,gs,ps,qs){bs=bs|0;gs=x(gs);ps=ps|0;qs=x(qs);var rs=0;rs=P-16|0;P=rs;q[rs+12>>2]=bs;u[rs+8>>2]=gs;q[rs+4>>2]=ps;u[rs>>2]=qs;bs=q[rs+12>>2];bs=n[q[q[bs>>2]+52>>2]](bs,u[rs+8>>2],q[rs+4>>2],u[rs>>2])|0;P=rs+16|0;return bs|0}function Et(bs,gs,ps){bs=bs|0;gs=x(gs);ps=ps|0;var qs=0;qs=P-16|0;P=qs;q[qs+12>>2]=bs;u[qs+8>>2]=gs;q[qs+4>>2]=ps;bs=q[qs+12>>2];bs=n[q[q[bs>>2]+52>>2]](bs,u[qs+8>>2],q[qs+4>>2],x(.01666666753590107))|0;P=qs+16|0;return bs|0}function Ft(bs,gs){bs=bs|0;gs=x(gs);var ps=0;ps=P-16|0;P=ps;q[ps+12>>2]=bs;u[ps+8>>2]=gs;bs=q[ps+12>>2];bs=n[q[q[bs>>2]+52>>2]](bs,u[ps+8>>2],1,x(.01666666753590107))|0;P=ps+16|0;return bs|0}function Gt(bs,gs,ss){bs=bs|0;gs=gs|0;ss=ss|0;var ts=0;ts=P-16|0;P=ts;q[ts+12>>2]=bs;q[ts+8>>2]=gs;o[ts+7|0]=ss;bs=q[ts+12>>2];n[q[q[bs>>2]+56>>2]](bs,q[ts+8>>2],o[ts+7|0]&1);P=ts+16|0;}function Ht(bs,gs){bs=bs|0;gs=gs|0;var ss=0;ss=P-16|0;P=ss;q[ss+12>>2]=bs;q[ss+8>>2]=gs;bs=q[ss+12>>2];n[q[q[bs>>2]+56>>2]](bs,q[ss+8>>2],0);P=ss+16|0;}function It(bs,gs){bs=bs|0;gs=gs|0;var us=0;us=P-16|0;P=us;q[us+12>>2]=bs;q[us+8>>2]=gs;bs=q[us+12>>2];n[q[q[bs>>2]+92>>2]](bs,q[us+8>>2]);P=us+16|0;}function Jt(bs,gs,vs,ws){bs=bs|0;gs=gs|0;vs=vs|0;ws=ws|0;var xs=0;xs=P-16|0;P=xs;q[xs+12>>2]=bs;q[xs+8>>2]=gs;q[xs+4>>2]=vs;q[xs>>2]=ws;bs=q[xs+12>>2];n[q[q[bs>>2]+88>>2]](bs,q[xs+8>>2],q[xs+4>>2],q[xs>>2]);P=xs+16|0;}function Kt(bs,gs){bs=bs|0;gs=gs|0;var vs=0;vs=P-16|0;P=vs;q[vs+12>>2]=bs;q[vs+8>>2]=gs;bs=q[vs+12>>2];n[q[q[bs>>2]+84>>2]](bs,q[vs+8>>2]);P=vs+16|0;}function Lt(bs){bs=bs|0;var gs=0;gs=P-32|0;P=gs;q[gs+28>>2]=bs;if(!(!!(r[21508]!=0)|o[21508]&1)){q[(P-16|0)+12>>2]=21492;q[5377]=0;q[5377]=q[5377]|1;}bs=q[gs+28>>2];n[q[q[bs>>2]+76>>2]](gs,bs);bs=q[gs+4>>2];q[5373]=q[gs>>2];q[5374]=bs;bs=q[gs+12>>2];q[5375]=q[gs+8>>2];q[5376]=bs;P=gs+32|0;return 21492}function Mt(bs,ws){bs=bs|0;ws=ws|0;var ys=0;ys=P-16|0;P=ys;q[ys+12>>2]=bs;q[ys+8>>2]=ws;bs=q[ys+12>>2];n[q[q[bs>>2]+72>>2]](bs,q[ys+8>>2]);P=ys+16|0;}function Nt(bs,ws,zs,As){bs=bs|0;ws=ws|0;zs=zs|0;As=As|0;var Bs=0;Bs=P-32|0;P=Bs;q[Bs+28>>2]=bs;q[Bs+24>>2]=ws;q[Bs+20>>2]=zs;q[Bs+16>>2]=As;bs=Z(344);Ln(bs,q[Bs+28>>2],q[Bs+24>>2],q[Bs+20>>2]);P=Bs+32|0;return bs|0}function Ot(){var bs=0,ws=0;bs=P-16|0;P=bs;ws=Z(236);sf(ws);P=bs+16|0;return ws|0}function Pt(zs,As){zs=zs|0;As=As|0;var Cs=0;Cs=P-16|0;q[Cs+12>>2]=zs;q[Cs+8>>2]=As;q[q[Cs+12>>2]+124>>2]=q[Cs+8>>2];}function Qt(zs){zs=zs|0;var As=0;As=P-16|0;q[As+12>>2]=zs;return q[q[As+12>>2]+124>>2]}function Rt(zs,Ds){zs=zs|0;Ds=Ds|0;var Es=0;Es=P-16|0;q[Es+12>>2]=zs;q[Es+8>>2]=Ds;q[q[Es+12>>2]+120>>2]=q[Es+8>>2];}function St(zs){zs=zs|0;var Ds=0;Ds=P-16|0;q[Ds+12>>2]=zs;return q[q[Ds+12>>2]+120>>2]}function Tt(zs,Fs){zs=zs|0;Fs=Fs|0;var Gs=0;Gs=P-16|0;q[Gs+12>>2]=zs;q[Gs+8>>2]=Fs;q[q[Gs+12>>2]+116>>2]=q[Gs+8>>2];}function Ut(zs){zs=zs|0;var Fs=0;Fs=P-16|0;q[Fs+12>>2]=zs;return q[q[Fs+12>>2]+116>>2]}function Vt(zs,Hs){zs=zs|0;Hs=Hs|0;var Is=0;Is=P-16|0;q[Is+12>>2]=zs;q[Is+8>>2]=Hs;q[q[Is+12>>2]+112>>2]=q[Is+8>>2];}function Wt(zs){zs=zs|0;var Hs=0;Hs=P-16|0;q[Hs+12>>2]=zs;return q[q[Hs+12>>2]+112>>2]}function Xt(zs,Js){zs=zs|0;Js=Js|0;var Ks=0;Ks=P-16|0;q[Ks+12>>2]=zs;q[Ks+8>>2]=Js;q[q[Ks+12>>2]+108>>2]=q[Ks+8>>2];}function Yt(zs){zs=zs|0;var Js=0;Js=P-16|0;q[Js+12>>2]=zs;return q[q[Js+12>>2]+108>>2]}function Zt(zs,Ls){zs=zs|0;Ls=+Ls;var Ms=0;Ms=P-16|0;q[Ms+12>>2]=zs;v[Ms>>3]=Ls;u[q[Ms+12>>2]+80>>2]=v[Ms>>3];}function _t(zs){zs=zs|0;var Ls=0;Ls=P-16|0;q[Ls+12>>2]=zs;return +u[q[Ls+12>>2]+80>>2]}function $t(zs,Ns){zs=zs|0;Ns=Ns|0;var Os=0;Os=P-16|0;q[Os+12>>2]=zs;q[Os+8>>2]=Ns;Ns=q[Os+12>>2];zs=q[Os+8>>2];Os=q[zs+4>>2];q[Ns+32>>2]=q[zs>>2];q[Ns+36>>2]=Os;Os=q[zs+12>>2];q[Ns+40>>2]=q[zs+8>>2];q[Ns+44>>2]=Os;}function au(zs,Ns){zs=zs|0;Ns=Ns|0;var Ps=0;Ps=P-16|0;q[Ps+12>>2]=zs;q[Ps+8>>2]=Ns;Ns=q[Ps+12>>2];zs=q[Ps+8>>2];Ps=q[zs+4>>2];q[Ns+16>>2]=q[zs>>2];q[Ns+20>>2]=Ps;Ps=q[zs+12>>2];q[Ns+24>>2]=q[zs+8>>2];q[Ns+28>>2]=Ps;}function bu(zs){zs=zs|0;var Ns=0;Ns=P-16|0;q[Ns+12>>2]=zs;return q[Ns+12>>2]+16|0}function cu(zs,Qs){zs=zs|0;Qs=Qs|0;var Rs=0;Rs=P-16|0;q[Rs+12>>2]=zs;q[Rs+8>>2]=Qs;Qs=q[Rs+12>>2];zs=q[Rs+8>>2];Rs=q[zs+4>>2];q[Qs>>2]=q[zs>>2];q[Qs+4>>2]=Rs;Rs=q[zs+12>>2];q[Qs+8>>2]=q[zs+8>>2];q[Qs+12>>2]=Rs;}function du(zs){zs=zs|0;var Qs=0;Qs=P-16|0;P=Qs;q[Qs+12>>2]=zs;zs=P-16|0;q[zs+12>>2]=q[Qs+12>>2];P=Qs+16|0;return q[q[zs+12>>2]+200>>2]}function eu(zs){zs=zs|0;var Ss=0;Ss=P-16|0;P=Ss;q[Ss+12>>2]=zs;zs=P-16|0;q[zs+12>>2]=q[Ss+12>>2];P=Ss+16|0;return +u[q[zs+12>>2]+80>>2]}function fu(zs){zs=zs|0;var Ts=0;Ts=P-16|0;P=Ts;q[Ts+12>>2]=zs;zs=P-16|0;q[zs+12>>2]=q[Ts+12>>2];P=Ts+16|0;return +u[q[zs+12>>2]+132>>2]}function gu(zs,Us){var Vs=0,Ws=0,Xs=0,Ys=0,Zs=0;Vs=P-240|0;P=Vs;q[Vs+236>>2]=zs;q[Vs+232>>2]=Us;zs=q[Vs+236>>2];Us=Vs+216|0;q[(P-16|0)+12>>2]=Us;Ws=Vs+200|0;q[(P-16|0)+12>>2]=Ws;Xs=q[zs+12>>2];Ys=P-16|0;q[Ys+12>>2]=q[zs+8>>2];n[q[q[Xs>>2]+8>>2]](Xs,q[Ys+12>>2]+4|0,Us,Ws);Xs=P-16|0;q[Xs+12>>2]=q[Vs+232>>2];Xs=q[q[Xs+12>>2]+68>>2];Ys=P-16|0;q[Ys+12>>2]=q[zs+8>>2];Ys=q[q[Ys+12>>2]+188>>2];Zs=P-16|0;q[Zs+12>>2]=q[Vs+232>>2];n[q[q[Xs>>2]+16>>2]](Xs,Ys,Us,Ws,q[q[Zs+12>>2]+24>>2]);o[Vs+199|0]=0;Us=P-16|0;q[Us+12>>2]=q[Vs+232>>2];Us=q[q[Us+12>>2]+24>>2];Ws=P-16|0;q[Ws+12>>2]=q[zs+8>>2];Ws=q[q[Ws+12>>2]+344>>2];Xs=P-16|0;q[Xs+12>>2]=q[Vs+232>>2];Xs=q[Xs+12>>2]+28|0;Ys=P-16|0;q[Ys+12>>2]=q[Vs+232>>2];n[q[q[Us>>2]+32>>2]](Us,Ws,Xs,q[q[Ys+12>>2]+24>>2]);Us=P-16|0;q[Us+12>>2]=q[zs+8>>2];Ws=P-16|0;q[Ws+12>>2]=q[Us+12>>2]+4;Us=q[Ws+12>>2]+48|0;Ws=q[Us+4>>2];q[zs+92>>2]=q[Us>>2];q[zs+96>>2]=Ws;Ws=q[Us+12>>2];q[zs+100>>2]=q[Us+8>>2];q[zs+104>>2]=Ws;u[Vs+192>>2]=0;q[Vs+188>>2]=0;while(1){Us=q[Vs+188>>2];Ws=P-16|0;q[Ws+12>>2]=q[zs+8>>2];Xs=Us;Us=q[q[Ws+12>>2]+344>>2];if((Xs|0)<(n[q[q[Us>>2]+36>>2]](Us)|0)){q[Vs+184>>2]=0;Qg(zs+128|0,0,Vs+184|0);Us=P-16|0;q[Us+12>>2]=q[zs+8>>2];Us=q[q[Us+12>>2]+344>>2];Ws=n[q[q[Us>>2]+28>>2]](Us)|0;Xs=q[Vs+188>>2];Us=P-16|0;q[Us+12>>2]=Ws;q[Us+8>>2]=Xs;q[Vs+180>>2]=q[q[Us+12>>2]+12>>2]+(q[Us+8>>2]<<4);q[Vs+176>>2]=q[q[q[Vs+180>>2]>>2]>>2];q[Vs+172>>2]=q[q[q[Vs+180>>2]+4>>2]>>2];a:{if(q[Vs+176>>2]){Us=P-16|0;q[Us+12>>2]=q[Vs+176>>2];if(q[q[Us+12>>2]+204>>2]&4){break a}}b:{if(!q[Vs+172>>2]){break b}Us=P-16|0;q[Us+12>>2]=q[Vs+172>>2];if(!(q[q[Us+12>>2]+204>>2]&4)){break b}break a}if(!(n[q[q[zs>>2]+56>>2]](zs,q[Vs+176>>2],q[Vs+172>>2])&1)){break a}if(q[q[Vs+180>>2]+8>>2]){Us=q[q[Vs+180>>2]+8>>2];n[q[q[Us>>2]+16>>2]](Us,zs+128|0);}q[Vs+168>>2]=0;while(1){Us=q[Vs+168>>2];Ws=P-16|0;q[Ws+12>>2]=zs+128;if((Us|0)<q[q[Ws+12>>2]+4>>2]){Ws=q[Vs+168>>2];Us=P-16|0;q[Us+12>>2]=zs+128;q[Us+8>>2]=Ws;q[Vs+164>>2]=q[q[q[Us+12>>2]+12>>2]+(q[Us+8>>2]<<2)>>2];Us=P-16|0;q[Us+12>>2]=q[Vs+164>>2];u[Vs+160>>2]=q[q[Us+12>>2]+836>>2]==q[zs+8>>2]?x(-1):x(1);q[Vs+156>>2]=0;while(1){Us=q[Vs+156>>2];Ws=P-16|0;q[Ws+12>>2]=q[Vs+164>>2];if((Us|0)<q[q[Ws+12>>2]+844>>2]){Ws=q[Vs+156>>2];Us=P-16|0;q[Us+12>>2]=q[Vs+164>>2];q[Us+8>>2]=Ws;q[Vs+152>>2]=(q[Us+12>>2]+4|0)+w(q[Us+8>>2],208);Us=P-16|0;q[Us+12>>2]=q[Vs+152>>2];u[Vs+148>>2]=u[q[Us+12>>2]+80>>2];if(+u[Vs+148>>2]<0){if(u[Vs+148>>2]<u[Vs+192>>2]){u[Vs+192>>2]=u[Vs+148>>2];sa(Vs+128|0,q[Vs+152>>2]- -64|0,Vs+160|0);Us=q[Vs+132>>2];q[zs+152>>2]=q[Vs+128>>2];q[zs+156>>2]=Us;Us=q[Vs+140>>2];q[zs+160>>2]=q[Vs+136>>2];q[zs+164>>2]=Us;}Us=Vs+80|0;sa(Us,q[Vs+152>>2]- -64|0,Vs+160|0);Ws=Vs+96|0;sa(Ws,Us,Vs+148|0);u[Vs+76>>2]=.20000000298023224;Us=Vs+112|0;sa(Us,Ws,Vs+76|0);Za(zs+92|0,Us);o[Vs+199|0]=1;}q[Vs+156>>2]=q[Vs+156>>2]+1;continue}break}q[Vs+168>>2]=q[Vs+168>>2]+1;continue}break}}q[Vs+188>>2]=q[Vs+188>>2]+1;continue}break}Ws=P-16|0;q[Ws+12>>2]=q[zs+8>>2];Us=Vs+8|0;Cc(Us,q[Ws+12>>2]+4|0);za(Us,zs+92|0);Bc(q[zs+8>>2],Us);P=Vs+240|0;return o[Vs+199|0]&1}function hu(zs,Us){zs=zs|0;Us=x(Us);var _s=0;_s=P-16|0;q[_s+12>>2]=zs;u[_s+8>>2]=Us;u[q[_s+12>>2]+140>>2]=u[_s+8>>2];}function iu(zs){zs=zs|0;var Us=0;Us=P-16|0;q[Us+12>>2]=zs;return x(u[q[Us+12>>2]+140>>2])}function ju(zs,$s){zs=zs|0;$s=x($s);var at=0;at=P-16|0;q[at+12>>2]=zs;u[at+8>>2]=$s;u[q[at+12>>2]+136>>2]=u[at+8>>2];}function ku(zs){zs=zs|0;var $s=0;$s=P-16|0;q[$s+12>>2]=zs;return x(u[q[$s+12>>2]+136>>2])}function lu(zs,bt){zs=zs|0;bt=x(bt);var ct=0;ct=P-16|0;q[ct+12>>2]=zs;u[ct+8>>2]=bt;u[q[ct+12>>2]+132>>2]=u[ct+8>>2];}function mu(zs){zs=zs|0;var bt=0;bt=P-16|0;q[bt+12>>2]=zs;return x(u[q[bt+12>>2]+132>>2])}function nu(zs,dt){zs=zs|0;dt=x(dt);var et=0;et=P-16|0;q[et+12>>2]=zs;u[et+8>>2]=dt;u[q[et+12>>2]+128>>2]=u[et+8>>2];}function ou(zs){zs=zs|0;var dt=0;dt=P-16|0;q[dt+12>>2]=zs;return x(u[q[dt+12>>2]+128>>2])}function pu(zs,ft){zs=zs|0;ft=ft|0;var gt=0;gt=P-16|0;q[gt+12>>2]=zs;o[gt+11|0]=ft;o[q[gt+12>>2]+124|0]=o[gt+11|0]&1;}function qu(zs){zs=zs|0;var ft=0;ft=P-16|0;q[ft+12>>2]=zs;return o[q[ft+12>>2]+124|0]&1}function ru(zs,ht){zs=zs|0;ht=x(ht);var it=0;it=P-16|0;q[it+12>>2]=zs;u[it+8>>2]=ht;u[q[it+12>>2]+120>>2]=u[it+8>>2];}function su(zs){zs=zs|0;var ht=0;ht=P-16|0;q[ht+12>>2]=zs;return x(u[q[ht+12>>2]+120>>2])}function tu(zs,jt){zs=zs|0;jt=x(jt);var kt=0;kt=P-16|0;q[kt+12>>2]=zs;u[kt+8>>2]=jt;u[q[kt+12>>2]+116>>2]=u[kt+8>>2];}function uu(zs){zs=zs|0;var jt=0;jt=P-16|0;q[jt+12>>2]=zs;return x(u[q[jt+12>>2]+116>>2])}function vu(zs,lt){zs=zs|0;lt=x(lt);var mt=0;mt=P-16|0;q[mt+12>>2]=zs;u[mt+8>>2]=lt;u[q[mt+12>>2]+112>>2]=u[mt+8>>2];}function wu(zs){zs=zs|0;var lt=0;lt=P-16|0;q[lt+12>>2]=zs;return x(u[q[lt+12>>2]+112>>2])}function xu(zs,nt){zs=zs|0;nt=x(nt);var ot=0;ot=P-16|0;q[ot+12>>2]=zs;u[ot+8>>2]=nt;u[q[ot+12>>2]+104>>2]=u[ot+8>>2];}function yu(zs){zs=zs|0;var nt=0;nt=P-16|0;q[nt+12>>2]=zs;return x(u[q[nt+12>>2]+104>>2])}function zu(zs,pt){zs=zs|0;pt=x(pt);var qt=0;qt=P-16|0;q[qt+12>>2]=zs;u[qt+8>>2]=pt;u[q[qt+12>>2]+100>>2]=u[qt+8>>2];}function Au(zs){zs=zs|0;var pt=0;pt=P-16|0;q[pt+12>>2]=zs;return x(u[q[pt+12>>2]+100>>2])}function Bu(zs,rt){zs=zs|0;rt=x(rt);var st=0;st=P-16|0;q[st+12>>2]=zs;u[st+8>>2]=rt;u[q[st+12>>2]+96>>2]=u[st+8>>2];}function Cu(zs){zs=zs|0;var rt=0;rt=P-16|0;q[rt+12>>2]=zs;return x(u[q[rt+12>>2]+96>>2])}function Du(zs,tt){zs=zs|0;tt=x(tt);var ut=0;ut=P-16|0;q[ut+12>>2]=zs;u[ut+8>>2]=tt;u[q[ut+12>>2]+92>>2]=u[ut+8>>2];}function Eu(zs){zs=zs|0;var tt=0;tt=P-16|0;q[tt+12>>2]=zs;return x(u[q[tt+12>>2]+92>>2])}function Fu(zs,vt,wt,xt){zs=x(zs);vt=vt|0;wt=wt|0;xt=xt|0;var yt=0;yt=P-32|0;P=yt;u[yt+28>>2]=zs;q[yt+24>>2]=vt;q[yt+20>>2]=wt;q[yt+16>>2]=xt;vt=xa(144);Vg(vt,u[yt+28>>2],q[yt+24>>2],q[yt+20>>2],q[yt+16>>2]);P=yt+32|0;return vt|0}function Gu(zs,vt,wt){zs=x(zs);vt=vt|0;wt=wt|0;var xt=0,zt=0;xt=P+ -64|0;P=xt;u[xt+60>>2]=zs;q[xt+56>>2]=vt;q[xt+52>>2]=wt;vt=xa(144);zs=u[xt+60>>2];wt=q[xt+56>>2];zt=q[xt+52>>2];u[xt+28>>2]=0;u[xt+24>>2]=0;u[xt+20>>2]=0;ca(xt+32|0,xt+28|0,xt+24|0,xt+20|0);Vg(vt,zs,wt,zt,xt+32|0);P=xt- -64|0;return vt|0}function Hu(zs,vt){var wt=0;wt=P-16|0;P=wt;q[wt+12>>2]=zs;u[wt+8>>2]=vt;u[q[wt+12>>2]+196>>2]=Oc(u[wt+8>>2]);P=wt+16|0;}function Iu(zs){zs=zs|0;var vt=0;vt=P-16|0;P=vt;q[vt+12>>2]=zs;zs=q[vt+12>>2];n[1](zs)|0;Sd(zs);P=vt+16|0;}function Ju(zs,At){zs=zs|0;At=x(At);var Bt=0;Bt=P-16|0;P=Bt;q[Bt+12>>2]=zs;u[Bt+8>>2]=At;Hu(q[Bt+12>>2],u[Bt+8>>2]);P=Bt+16|0;}function Ku(zs,At){var Ct=0;Ct=P-16|0;P=Ct;q[Ct+12>>2]=zs;u[Ct+8>>2]=At;u[q[Ct+12>>2]+192>>2]=Oc(u[Ct+8>>2]);P=Ct+16|0;}function Lu(zs,At){zs=zs|0;At=x(At);var Dt=0;Dt=P-16|0;P=Dt;q[Dt+12>>2]=zs;u[Dt+8>>2]=At;Ku(q[Dt+12>>2],u[Dt+8>>2]);P=Dt+16|0;}function Mu(zs,At){zs=zs|0;At=x(At);var Et=0;Et=P-16|0;P=Et;q[Et+12>>2]=zs;u[Et+8>>2]=At;At=u[Et+8>>2];zs=P-16|0;q[zs+12>>2]=q[Et+12>>2];u[zs+8>>2]=At;u[q[zs+12>>2]+188>>2]=u[zs+8>>2];P=Et+16|0;}function Nu(zs,At){zs=zs|0;At=x(At);var Ft=0;Ft=P-16|0;P=Ft;q[Ft+12>>2]=zs;u[Ft+8>>2]=At;At=u[Ft+8>>2];zs=P-16|0;q[zs+12>>2]=q[Ft+12>>2];u[zs+8>>2]=At;u[q[zs+12>>2]+184>>2]=u[zs+8>>2];P=Ft+16|0;}function Ou(zs,At,Gt,Ht,It){zs=zs|0;At=At|0;Gt=Gt|0;Ht=Ht|0;It=It|0;var Jt=0;Jt=P-32|0;P=Jt;q[Jt+28>>2]=zs;q[Jt+24>>2]=At;q[Jt+20>>2]=Gt;q[Jt+16>>2]=Ht;o[Jt+15|0]=It;zs=Z(1128);Ul(zs,q[Jt+28>>2],q[Jt+24>>2],q[Jt+20>>2],q[Jt+16>>2],o[Jt+15|0]&1);P=Jt+32|0;return zs|0}function Pu(zs,At,Gt){zs=zs|0;At=At|0;Gt=Gt|0;var Ht=0;Ht=P-32|0;P=Ht;q[Ht+28>>2]=zs;q[Ht+24>>2]=At;o[Ht+23|0]=Gt;zs=Z(1128);Tl(zs,q[Ht+28>>2],q[Ht+24>>2],o[Ht+23|0]&1);P=Ht+32|0;return zs|0}function Qu(){var zs=0,At=0;zs=P-16|0;P=zs;At=xa(176);Hw(At);P=zs+16|0;return At|0}function Ru(Gt,It,Kt){Gt=Gt|0;It=It|0;Kt=Kt|0;var Lt=0;Lt=P-16|0;P=Lt;q[Lt+12>>2]=Gt;o[Lt+11|0]=It;o[Lt+10|0]=Kt;Gt=Z(80);ji(Gt,q[Lt+12>>2],o[Lt+11|0]&1,o[Lt+10|0]&1);P=Lt+16|0;return Gt|0}function Su(Gt,It){Gt=Gt|0;It=It|0;var Kt=0;Kt=P-16|0;P=Kt;q[Kt+12>>2]=Gt;o[Kt+11|0]=It;Gt=Z(80);ji(Gt,q[Kt+12>>2],o[Kt+11|0]&1,1);P=Kt+16|0;return Gt|0}function Tu(Gt,It){Gt=Gt|0;It=It|0;var Mt=0;Mt=P-16|0;P=Mt;q[Mt+12>>2]=Gt;q[Mt+8>>2]=It;It=q[Mt+8>>2];Gt=P-16|0;q[Gt+12>>2]=q[Mt+12>>2];q[Gt+8>>2]=It;P=Mt+16|0;return x(u[q[q[Gt+12>>2]+12>>2]+(q[Gt+8>>2]<<2)>>2])}function Uu(Gt){Gt=Gt|0;var It=0;It=P-16|0;P=It;q[It+12>>2]=Gt;Gt=q[It+12>>2];q[Gt>>2]=1032;_a(Gt+128|0);Ca(Gt);P=It+16|0;return Gt|0}function Vu(Gt,Nt){Gt=Gt|0;Nt=Nt|0;var Ot=0;Ot=P-16|0;P=Ot;q[Ot+12>>2]=Gt;q[Ot+8>>2]=Nt;ja(q[Ot+12>>2],q[Ot+8>>2]);P=Ot+16|0;}function Wu(Gt,Nt){var Pt=0;Pt=P-16|0;P=Pt;q[Pt+12>>2]=Gt;q[Pt+8>>2]=Nt;Nt=q[Pt+8>>2];Gt=P-16|0;q[Gt+12>>2]=q[Pt+12>>2]+324;q[Gt+8>>2]=Nt;P=Pt+16|0;return q[q[q[Gt+12>>2]+12>>2]+(q[Gt+8>>2]<<2)>>2]}function Xu(Gt){var Nt=0;Nt=P-16|0;P=Nt;q[Nt+12>>2]=Gt;Gt=P-16|0;q[Gt+12>>2]=q[Nt+12>>2]+324;P=Nt+16|0;return q[q[Gt+12>>2]+4>>2]}function Yu(){var Gt=0,Qt=0;Gt=P-16|0;P=Gt;Qt=Z(344);lk(Qt);P=Gt+16|0;return Qt|0}function Zu(Rt){Rt=Rt|0;var St=0;St=P-16|0;P=St;q[St+12>>2]=Rt;fg(21620);P=St+16|0;}function _u(Rt){var Tt=0;Tt=P-16|0;P=Tt;u[Tt+12>>2]=Rt;Rt=fa(u[Tt+12>>2]);P=Tt+16|0;return Rt}function $u(){var Rt=0,Ut=0;Rt=P-80|0;P=Rt;if(!(!!(r[22296]!=0)|o[22296]&1)){u[Rt+60>>2]=0;u[Rt+56>>2]=0;u[Rt+52>>2]=0;ca(Rt- -64|0,Rt+60|0,Rt+56|0,Rt+52|0);Xf(21620,Rt- -64|0);q[5574]=0;q[5574]=q[5574]|1;}u[Rt+20>>2]=0;u[Rt+16>>2]=0;u[Rt+12>>2]=0;Ut=Rt+24|0;ca(Ut,Rt+20|0,Rt+16|0,Rt+12|0);Jd(21620,x(0),Ut);P=Rt+80|0;return 21620}function av(Vt){Vt=Vt|0;var Wt=0;Wt=P-16|0;q[Wt+12>>2]=Vt;return q[Wt+12>>2]+32|0}function bv(Vt){Vt=Vt|0;n[Vt]();}function cv(Vt,Xt){var Yt=0;Yt=P-16|0;q[Yt+12>>2]=Vt;q[Yt+8>>2]=Xt;Xt=q[Yt+12>>2];Vt=q[Yt+8>>2];Yt=q[Vt+4>>2];q[Xt+4>>2]=q[Vt>>2];q[Xt+8>>2]=Yt;Yt=q[Vt+12>>2];q[Xt+12>>2]=q[Vt+8>>2];q[Xt+16>>2]=Yt;}function dv(Vt,Xt){Vt=Vt|0;Xt=Xt|0;n[Vt](Xt);}function ev(Vt){return F()|0}function fv(Vt,Xt,Zt,_t,$t,au){Vt=Vt|0;Xt=Xt|0;Zt=Zt|0;_t=_t|0;$t=$t|0;au=au|0;if(wa(Vt,q[Xt+8>>2],au)){le(Xt,Zt,_t,$t);}}function gv(Vt,Xt,Zt,_t,$t,au){Vt=Vt|0;Xt=Xt|0;Zt=Zt|0;_t=_t|0;$t=$t|0;au=au|0;if(wa(Vt,q[Xt+8>>2],au)){le(Xt,Zt,_t,$t);return}Vt=q[Vt+8>>2];n[q[q[Vt>>2]+20>>2]](Vt,Xt,Zt,_t,$t,au);}function hv(Vt,Xt,Zt,_t,$t,au){Vt=Vt|0;Xt=Xt|0;Zt=Zt|0;_t=_t|0;$t=$t|0;au=au|0;var bu=0,cu=0,du=0,eu=0,fu=0,gu=0;if(wa(Vt,q[Xt+8>>2],au)){le(Xt,Zt,_t,$t);return}cu=r[Xt+53|0];bu=q[Vt+12>>2];o[Xt+53|0]=0;du=r[Xt+52|0];o[Xt+52|0]=0;eu=Vt+16|0;ke(eu,Xt,Zt,_t,$t,au);fu=r[Xt+53|0];cu=cu|fu;gu=r[Xt+52|0];du=du|gu;a:{if((bu|0)<2){break a}eu=eu+(bu<<3)|0;bu=Vt+24|0;while(1){if(r[Xt+54|0]){break a}b:{if(gu){if(q[Xt+24>>2]==1){break a}if(r[Vt+8|0]&2){break b}break a}if(!fu){break b}if(!(o[Vt+8|0]&1)){break a}}p[Xt+52>>1]=0;ke(bu,Xt,Zt,_t,$t,au);fu=r[Xt+53|0];cu=fu|cu;gu=r[Xt+52|0];du=gu|du;bu=bu+8|0;if(bu>>>0<eu>>>0){continue}break}}o[Xt+53|0]=(cu&255)!=0;o[Xt+52|0]=(du&255)!=0;}function iv(Vt,Xt,Zt,_t,$t){Vt=Vt|0;Xt=Xt|0;Zt=Zt|0;_t=_t|0;$t=$t|0;if(wa(Vt,q[Xt+8>>2],$t)){if(!(q[Xt+28>>2]==1|q[Xt+4>>2]!=(Zt|0))){q[Xt+28>>2]=_t;}return}a:{if(!wa(Vt,q[Xt>>2],$t)){break a}if(!(q[Xt+20>>2]!=(Zt|0)?q[Xt+16>>2]!=(Zt|0):0)){if((_t|0)!=1){break a}q[Xt+32>>2]=1;return}q[Xt+20>>2]=Zt;q[Xt+32>>2]=_t;q[Xt+40>>2]=q[Xt+40>>2]+1;if(!(q[Xt+36>>2]!=1|q[Xt+24>>2]!=2)){o[Xt+54|0]=1;}q[Xt+44>>2]=4;}}function jv(Vt,Xt,Zt,_t,$t){Vt=Vt|0;Xt=Xt|0;Zt=Zt|0;_t=_t|0;$t=$t|0;if(wa(Vt,q[Xt+8>>2],$t)){if(!(q[Xt+28>>2]==1|q[Xt+4>>2]!=(Zt|0))){q[Xt+28>>2]=_t;}return}a:{if(wa(Vt,q[Xt>>2],$t)){if(!(q[Xt+20>>2]!=(Zt|0)?q[Xt+16>>2]!=(Zt|0):0)){if((_t|0)!=1){break a}q[Xt+32>>2]=1;return}q[Xt+32>>2]=_t;b:{if(q[Xt+44>>2]==4){break b}p[Xt+52>>1]=0;Vt=q[Vt+8>>2];n[q[q[Vt>>2]+20>>2]](Vt,Xt,Zt,Zt,1,$t);if(r[Xt+53|0]){q[Xt+44>>2]=3;if(!r[Xt+52|0]){break b}break a}q[Xt+44>>2]=4;}q[Xt+20>>2]=Zt;q[Xt+40>>2]=q[Xt+40>>2]+1;if(q[Xt+36>>2]!=1|q[Xt+24>>2]!=2){break a}o[Xt+54|0]=1;return}Vt=q[Vt+8>>2];n[q[q[Vt>>2]+24>>2]](Vt,Xt,Zt,_t,$t);}}function kv(Vt,Xt,Zt,_t,$t){Vt=Vt|0;Xt=Xt|0;Zt=Zt|0;_t=_t|0;$t=$t|0;var au=0,hu=0,iu=0,ju=0,ku=0;if(wa(Vt,q[Xt+8>>2],$t)){if(!(q[Xt+28>>2]==1|q[Xt+4>>2]!=(Zt|0))){q[Xt+28>>2]=_t;}return}a:{if(wa(Vt,q[Xt>>2],$t)){if(!(q[Xt+20>>2]!=(Zt|0)?q[Xt+16>>2]!=(Zt|0):0)){if((_t|0)!=1){break a}q[Xt+32>>2]=1;return}q[Xt+32>>2]=_t;if(q[Xt+44>>2]!=4){au=Vt+16|0;ju=au+(q[Vt+12>>2]<<3)|0;ku=Xt;b:{c:{while(1){d:{if(au>>>0>=ju>>>0){break d}p[Xt+52>>1]=0;ke(au,Xt,Zt,Zt,1,$t);if(r[Xt+54|0]){break d}e:{if(!r[Xt+53|0]){break e}if(r[Xt+52|0]){_t=1;if(q[Xt+24>>2]==1){break c}iu=1;hu=1;if(r[Vt+8|0]&2){break e}break c}iu=1;_t=hu;if(!(o[Vt+8|0]&1)){break c}}au=au+8|0;continue}break}_t=hu;Vt=4;if(!iu){break b}}Vt=3;}q[ku+44>>2]=Vt;if(_t&1){break a}}q[Xt+20>>2]=Zt;q[Xt+40>>2]=q[Xt+40>>2]+1;if(q[Xt+36>>2]!=1|q[Xt+24>>2]!=2){break a}o[Xt+54|0]=1;return}hu=q[Vt+12>>2];au=Vt+16|0;Mc(au,Xt,Zt,_t,$t);if((hu|0)<2){break a}hu=au+(hu<<3)|0;au=Vt+24|0;Vt=q[Vt+8>>2];if(!(q[Xt+36>>2]!=1?!(Vt&2):0)){while(1){if(r[Xt+54|0]){break a}Mc(au,Xt,Zt,_t,$t);au=au+8|0;if(au>>>0<hu>>>0){continue}break}break a}if(!(Vt&1)){while(1){if(r[Xt+54|0]|q[Xt+36>>2]==1){break a}Mc(au,Xt,Zt,_t,$t);au=au+8|0;if(au>>>0<hu>>>0){continue}break a}}while(1){if(r[Xt+54|0]|(q[Xt+24>>2]==1?q[Xt+36>>2]==1:0)){break a}Mc(au,Xt,Zt,_t,$t);au=au+8|0;if(au>>>0<hu>>>0){continue}break}}}function lv(Vt,Xt,Zt,_t){Vt=Vt|0;Xt=Xt|0;Zt=Zt|0;_t=_t|0;var $t=0,lu=0;if(wa(Vt,q[Xt+8>>2],0)){me(Xt,Zt,_t);return}$t=q[Vt+12>>2];lu=Vt+16|0;kh(lu,Xt,Zt,_t);a:{if(($t|0)<2){break a}$t=($t<<3)+lu|0;Vt=Vt+24|0;while(1){kh(Vt,Xt,Zt,_t);if(r[Xt+54|0]){break a}Vt=Vt+8|0;if(Vt>>>0<$t>>>0){continue}break}}}function mv(Vt,Xt,Zt,_t){Vt=Vt|0;Xt=Xt|0;Zt=Zt|0;_t=_t|0;if(wa(Vt,q[Xt+8>>2],0)){me(Xt,Zt,_t);return}Vt=q[Vt+8>>2];n[q[q[Vt>>2]+28>>2]](Vt,Xt,Zt,_t);}function nv(Vt,Xt,Zt,_t){Vt=Vt|0;Xt=Xt|0;Zt=Zt|0;_t=_t|0;if(wa(Vt,q[Xt+8>>2],0)){me(Xt,Zt,_t);}}function ov(Vt){var Xt=0,Zt=0,_t=0,mu=0;Xt=P+ -64|0;P=Xt;Zt=q[Vt>>2];mu=q[Zt+ -8>>2];Zt=q[Zt+ -4>>2];q[Xt+20>>2]=0;q[Xt+16>>2]=20708;q[Xt+12>>2]=Vt;q[Xt+8>>2]=20756;_(Xt+24|0,0,39);Vt=Vt+mu|0;a:{if(wa(Zt,20756,0)){q[Xt+56>>2]=1;n[q[q[Zt>>2]+20>>2]](Zt,Xt+8|0,Vt,Vt,1,0);_t=q[Xt+32>>2]==1?Vt:0;break a}n[q[q[Zt>>2]+24>>2]](Zt,Xt+8|0,Vt,1,0);Vt=q[Xt+44>>2];if(Vt>>>0>1){break a}if(Vt-1){_t=q[Xt+48>>2]==1?q[Xt+36>>2]==1?q[Xt+40>>2]==1?q[Xt+28>>2]:0:0:0;break a}if(q[Xt+32>>2]!=1){if(q[Xt+48>>2]|q[Xt+36>>2]!=1|q[Xt+40>>2]!=1){break a}}_t=q[Xt+24>>2];}P=Xt- -64|0;return _t}function pv(Vt,nu,ou){Vt=Vt|0;nu=nu|0;ou=ou|0;var pu=0,qu=0;pu=P+ -64|0;P=pu;qu=1;a:{if(wa(Vt,nu,0)){break a}qu=0;if(!nu){break a}nu=ov(nu);qu=0;if(!nu){break a}q[pu+20>>2]=-1;q[pu+16>>2]=Vt;q[pu+12>>2]=0;q[pu+8>>2]=nu;_(pu+24|0,0,39);q[pu+56>>2]=1;n[q[q[nu>>2]+28>>2]](nu,pu+8|0,q[ou>>2],1);qu=0;if(q[pu+32>>2]!=1){break a}q[ou>>2]=q[pu+24>>2];qu=1;}P=pu- -64|0;return qu|0}function qv(Vt,nu){var ou=0,ru=x(0);ou=P-16|0;P=ou;q[ou+12>>2]=Vt;q[ou+8>>2]=nu;Vt=q[ou+12>>2];q[ou+4>>2]=0;while(1){if(q[ou+4>>2]<3){nu=P-16|0;q[nu+12>>2]=q[ou+8>>2];ru=Oc(u[q[nu+12>>2]+(q[ou+4>>2]<<2)>>2]);u[((Vt+868|0)+(q[ou+4>>2]<<6)|0)+4>>2]=ru;q[ou+4>>2]=q[ou+4>>2]+1;continue}break}P=ou+16|0;}function rv(Vt,nu){var su=0,tu=0;su=r[Vt|0];tu=r[nu|0];a:{if(!su|(su|0)!=(tu|0)){break a}while(1){tu=r[nu+1|0];su=r[Vt+1|0];if(!su){break a}nu=nu+1|0;Vt=Vt+1|0;if((su|0)==(tu|0)){continue}break}}return su-tu|0}function sv(){tv();F();}function tv(){var Vt=0;Vt=P-16|0;P=Vt;q[Vt+12>>2]=0;Vt=q[5154];Iv(Vt);Lv(Vt);N();F();}function uv(nu,uu,vu,wu){nu=nu|0;uu=uu|0;vu=vu|0;wu=wu|0;var xu=0;xu=P-16|0;P=xu;nu=J(q[nu+60>>2],uu|0,vu|0,wu&255,xu+8|0)|0;uu=0;a:{if(!nu){break a}q[6659]=nu;uu=-1;}b:{if(!uu){uu=q[xu+12>>2];nu=q[xu+8>>2];break b}q[xu+8>>2]=-1;q[xu+12>>2]=-1;uu=-1;nu=-1;}P=xu+16|0;Q=uu;return nu|0}function vv(nu){nu=nu|0;return M(q[nu+60>>2])|0}function wv(nu,uu){var vu=0;a:{if((uu|0)>=128){nu=x(nu*x(1.7014118346046923e+38));vu=uu+ -127|0;if((vu|0)<128){uu=vu;break a}nu=x(nu*x(1.7014118346046923e+38));uu=((uu|0)<381?uu:381)+ -254|0;break a}if((uu|0)>-127){break a}nu=x(nu*x(1.1754943508222875e-38));vu=uu+126|0;if((vu|0)>-127){uu=vu;break a}nu=x(nu*x(1.1754943508222875e-38));uu=((uu|0)>-378?uu:-378)+252|0;}return x(nu*(f(0,(uu<<23)+1065353216|0),k()))}



            function Xe(a,b,c,d,e,f){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;f=f|0;var g=0,h=x(0),i=x(0),j=x(0),k=x(0),l=x(0),m=x(0),o=x(0),p=x(0),r=x(0),s=x(0),t=0,v=x(0),w=x(0),y=x(0),z=x(0),A=x(0),B=x(0),C=x(0),D=x(0),F=x(0),G=x(0),H=x(0),I=x(0),J=x(0),K=x(0),L=0,M=x(0),N=x(0),O=x(0),Q=x(0),R=x(0),S=x(0),T=x(0),U=x(0),V=x(0),W=x(0),X=x(0),Y=x(0),Z=x(0),_=x(0),$=x(0),aa=x(0),ba=x(0),ca=x(0),da=0,ea=0;g=P-96|0;P=g;hc(q[a+4>>2]);W=u[d+40>>2];X=u[d+36>>2];Y=u[d+24>>2];Z=u[d+20>>2];M=u[b+20>>2];N=u[b+36>>2];O=u[b+24>>2];C=u[b+52>>2];i=u[c+52>>2];D=u[d+52>>2];l=u[e+52>>2];Q=u[b+40>>2];F=u[b+56>>2];m=u[c+56>>2];G=u[d+56>>2];h=u[e+56>>2];_=u[d+32>>2];$=u[d+16>>2];aa=u[d+8>>2];ba=u[d+4>>2];ca=u[d>>2];R=u[b>>2];S=u[b+16>>2];T=u[b+32>>2];U=u[b+4>>2];V=u[b+8>>2];H=u[b+48>>2];j=u[c+48>>2];I=u[d+48>>2];k=u[e+48>>2];t=q[a+8>>2];q[g+60>>2]=0;A=x(x(i-C)-x(l-D));i=x(-A);v=x(x(j-H)-x(k-I));w=x(x(m-F)-x(h-G));u[g+56>>2]=x(x(O*i)-x(V*v))-x(Q*w);u[g+52>>2]=x(x(M*i)-x(v*U))-x(w*N);u[g+48>>2]=x(x(S*i)-x(v*R))-x(w*T);n[q[q[t>>2]+64>>2]](g+80|0,t,g+48|0);h=u[b+52>>2];j=u[b+24>>2];k=u[b+20>>2];i=u[b+56>>2];m=u[b+40>>2];l=u[b+36>>2];o=u[b+48>>2];p=u[b+8>>2];r=u[b>>2];z=u[b+4>>2];B=u[b+16>>2];y=u[b+32>>2];q[g+76>>2]=0;J=i;i=u[g+80>>2];K=l;l=u[g+84>>2];s=m;m=u[g+88>>2];u[g+72>>2]=J+x(x(x(y*i)+x(K*l))+x(s*m));u[g+68>>2]=h+x(x(x(i*B)+x(l*k))+x(m*j));u[g+64>>2]=o+x(x(x(i*r)+x(l*z))+x(m*p));t=q[a+12>>2];i=u[d+20>>2];l=u[d+36>>2];m=u[d+24>>2];h=u[d+40>>2];j=u[d>>2];k=u[d+16>>2];o=u[d+32>>2];p=u[d+4>>2];r=u[d+8>>2];q[g+28>>2]=0;u[g+24>>2]=x(x(v*r)+x(A*m))+x(w*h);u[g+20>>2]=x(x(v*p)+x(A*i))+x(w*l);u[g+16>>2]=x(x(v*j)+x(A*k))+x(w*o);n[q[q[t>>2]+64>>2]](g+32|0,t,g+16|0);h=u[d+52>>2];j=u[d+24>>2];k=u[d+20>>2];i=u[d+56>>2];m=u[d+40>>2];l=u[d+36>>2];o=u[d+16>>2];p=u[d+48>>2];r=u[d+8>>2];z=u[d>>2];B=u[d+4>>2];y=u[d+32>>2];q[g+60>>2]=0;q[g+92>>2]=0;J=i;i=u[g+32>>2];K=l;l=u[g+36>>2];s=m;m=u[g+40>>2];y=x(J+x(x(x(y*i)+x(K*l))+x(s*m)));u[g+56>>2]=y;p=x(p+x(x(x(i*z)+x(l*B))+x(m*r)));u[g+48>>2]=p;i=x(h+x(x(x(i*o)+x(l*k))+x(m*j)));u[g+52>>2]=i;h=x(u[g+68>>2]-i);u[g+84>>2]=h;j=x(u[g+64>>2]-p);u[g+80>>2]=j;k=x(u[g+72>>2]-y);u[g+88>>2]=k;i=x(0);l=x(0);m=x(0);o=x(0);a:{b:{if(!(x(x(x(j*j)+x(h*h))+x(k*k))>x(9999999747378752e-20))){break b}t=32;while(1){if(!t){break b}L=q[a+8>>2];q[g+12>>2]=0;h=x(-u[g+84>>2]);j=u[g+80>>2];k=u[g+88>>2];u[g+8>>2]=x(x(O*h)-x(V*j))-x(Q*k);u[g+4>>2]=x(x(M*h)-x(U*j))-x(N*k);u[g>>2]=x(x(S*h)-x(R*j))-x(T*k);n[q[q[L>>2]+64>>2]](g+16|0,L,g);q[g+76>>2]=0;h=u[g+16>>2];j=u[g+20>>2];k=u[g+24>>2];u[g+72>>2]=F+x(x(x(T*h)+x(N*j))+x(Q*k));u[g+68>>2]=C+x(x(x(S*h)+x(M*j))+x(O*k));u[g+64>>2]=H+x(x(x(R*h)+x(U*j))+x(V*k));L=q[a+12>>2];q[g+12>>2]=0;h=u[g+80>>2];j=u[g+84>>2];k=u[g+88>>2];u[g+8>>2]=x(x(aa*h)+x(Y*j))+x(W*k);u[g+4>>2]=x(x(ba*h)+x(Z*j))+x(X*k);u[g>>2]=x(x(ca*h)+x($*j))+x(_*k);n[q[q[L>>2]+64>>2]](g+16|0,L,g);q[g+60>>2]=0;q[g+44>>2]=0;h=u[g+16>>2];j=u[g+20>>2];k=u[g+24>>2];p=x(G+x(x(x(_*h)+x(X*j))+x(W*k)));u[g+56>>2]=p;p=x(u[g+72>>2]-p);u[g+40>>2]=p;r=x(D+x(x(x($*h)+x(Z*j))+x(Y*k)));u[g+52>>2]=r;r=x(u[g+68>>2]-r);u[g+36>>2]=r;h=x(I+x(x(x(ca*h)+x(ba*j))+x(aa*k)));u[g+48>>2]=h;z=x(u[g+64>>2]-h);u[g+32>>2]=z;if(o>x(1)){break a}h=u[g+80>>2];j=u[g+84>>2];k=u[g+88>>2];B=x(x(x(z*h)+x(r*j))+x(p*k));if(!!(B>x(0))){i=x(x(x(v*h)+x(A*j))+x(w*k));if(i>=x(-1.4210854715202004e-14)){break a}l=u[b+48>>2];m=u[c+48>>2];C=u[b+52>>2];H=u[c+52>>2];F=u[b+56>>2];y=u[c+56>>2];I=u[d+48>>2];J=u[e+48>>2];D=u[d+52>>2];K=u[e+52>>2];G=u[d+56>>2];s=u[e+56>>2];q[g+44>>2]=0;u[g+40>>2]=p;u[g+36>>2]=r;u[g+32>>2]=z;o=x(o-x(B/i));i=x(x(1)-o);G=x(x(G*i)+x(o*s));D=x(x(i*D)+x(o*K));I=x(x(i*I)+x(o*J));F=x(x(i*F)+x(o*y));C=x(x(i*C)+x(o*H));H=x(x(i*l)+x(o*m));da=q[g+92>>2];l=j;m=k;i=h;}if(!bf(q[a+4>>2],g+32|0)){ef(q[a+4>>2],g+32|0,g- -64|0,g+48|0);}if(!cf(q[a+4>>2],g+80|0)){break b}t=t+ -1|0;h=u[g+80>>2];s=x(h*h);h=u[g+84>>2];s=x(s+x(h*h));h=u[g+88>>2];if(x(s+x(h*h))>x(9999999747378752e-20)){continue}break}}u[f+164>>2]=o;h=x(x(x(i*i)+x(l*l))+x(m*m));c:{if(!!(h>=x(1.4210854715202004e-14))){q[f+144>>2]=da;s=m;m=x(x(1)/x(E(h)));o=x(s*m);u[f+140>>2]=o;l=x(l*m);u[f+136>>2]=l;i=x(i*m);u[f+132>>2]=i;break c}q[f+132>>2]=0;q[f+136>>2]=0;q[f+140>>2]=0;q[f+144>>2]=0;o=x(0);l=x(0);i=x(0);}if(x(x(x(v*i)+x(A*l))+x(w*o))>=x(-u[f+172>>2])){break a}af(q[a+4>>2],g+16|0,g);a=q[g+12>>2];q[f+156>>2]=q[g+8>>2];q[f+160>>2]=a;a=q[g+4>>2];q[f+148>>2]=q[g>>2];q[f+152>>2]=a;ea=1;}P=g+96|0;return ea|0}function Ye(a,b,c,d){var e=0,f=0,n=0,u=0,x=0,E=0,P=0,fa=0,ga=0,ha=0,ia=0,ja=0,ka=0,la=0;while(1){ga=c;n=q[a+12>>2];E=q[n+((c+d|0)/2<<2)>>2];u=d;x=c;while(1){ha=q[q[E+836>>2]+208>>2];while(1){c=x;ia=(c<<2)+n|0;P=q[ia>>2];e=q[q[P+836>>2]+208>>2];if((e|0)<=-1){e=q[q[P+840>>2]+208>>2];}x=c+1|0;f=e;e=ha;ja=(e|0)>-1;if(!ja){e=q[q[E+840>>2]+208>>2];}if((f|0)<(e|0)){continue}break}while(1){e=u;ka=e<<2;fa=q[ka+n>>2];f=ha;u=e+ -1|0;if(!ja){f=q[q[E+840>>2]+208>>2];}la=f;f=q[q[fa+836>>2]+208>>2];if((f|0)<=-1){f=q[q[fa+840>>2]+208>>2];}if((la|0)<(f|0)){continue}break}if((c|0)<=(e|0)){q[ia>>2]=fa;q[q[a+12>>2]+ka>>2]=P;e=u;c=x;}if((c|0)<=(e|0)){n=q[a+12>>2];u=e;x=c;continue}break}if((e|0)>(ga|0)){Ye(a,b,ga,e);}if((c|0)<(d|0)){continue}break}}function Ze(a){a=a|0;var b=0;q[a>>2]=6720;b=q[a+56>>2];if(b){if(r[a+60|0]){if(b){q[6658]=q[6658]+1;n[q[5256]](b);}}q[a+56>>2]=0;}q[a+56>>2]=0;q[a+48>>2]=0;q[a+52>>2]=0;o[a+60|0]=1;b=q[a+36>>2];if(b){if(r[a+40|0]){if(b){q[6658]=q[6658]+1;n[q[5256]](b);}}q[a+36>>2]=0;}q[a+36>>2]=0;q[a+28>>2]=0;q[a+32>>2]=0;o[a+40|0]=1;hA(a+4|0);return a|0}function _e(a){a=a|0;var c=0;q[a>>2]=5744;if(r[a+20|0]){c=q[q[a+16>>2]+16>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+16>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}}if(r[a+12|0]){c=q[q[a+8>>2]+16>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+8>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}}c=q[a+28>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+28>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+32>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+32>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+36>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+36>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+40>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+40>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+44>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+44>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+48>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+48>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+52>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+52>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+56>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+56>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+72>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+72>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+76>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+76>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+68>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+68>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+84>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+84>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+80>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+80>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}c=q[a+24>>2];n[q[q[c>>2]>>2]](c)|0;c=q[a+24>>2];if(c){q[6658]=q[6658]+1;n[q[5256]](c);}return a|0}function $e(a,d){var ma=0,na=0,oa=0,pa=0,qa=0,ra=0;q[a>>2]=5744;na=q[d+20>>2];q[6657]=q[6657]+1;ma=n[q[5255]](4,16)|0;q[ma>>2]=na?4956:5164;q[a+24>>2]=ma;q[6657]=q[6657]+1;na=n[q[5255]](20,16)|0;ma=q[a+24>>2];q[na+12>>2]=0;q[na+16>>2]=3;q[na>>2]=10484;o[na+4|0]=0;q[na+8>>2]=ma;q[a+28>>2]=na;q[6657]=q[6657]+1;ma=n[q[5255]](8,16)|0;q[ma>>2]=5860;o[ma+4|0]=0;q[a+32>>2]=ma;q[6657]=q[6657]+1;ma=n[q[5255]](8,16)|0;q[ma>>2]=5984;o[ma+4|0]=0;q[a+36>>2]=ma;q[6657]=q[6657]+1;ma=n[q[5255]](8,16)|0;q[ma>>2]=6076;o[ma+4|0]=0;q[a+40>>2]=ma;q[6657]=q[6657]+1;ma=n[q[5255]](8,16)|0;q[ma>>2]=6156;o[ma+4|0]=0;q[a+44>>2]=ma;q[6657]=q[6657]+1;ma=n[q[5255]](8,16)|0;q[ma>>2]=6244;o[ma+4|0]=0;q[a+48>>2]=ma;q[6657]=q[6657]+1;ma=n[q[5255]](8,16)|0;q[ma>>2]=6328;o[ma+4|0]=0;q[a+52>>2]=ma;q[6657]=q[6657]+1;ma=n[q[5255]](8,16)|0;q[ma>>2]=6396;o[ma+4|0]=0;q[a+56>>2]=ma;q[6657]=q[6657]+1;ma=n[q[5255]](8,16)|0;q[ma>>2]=6480;o[ma+4|0]=0;q[a+72>>2]=ma;q[6657]=q[6657]+1;ma=n[q[5255]](8,16)|0;q[ma>>2]=6480;q[a+76>>2]=ma;o[ma+4|0]=1;q[6657]=q[6657]+1;ma=n[q[5255]](8,16)|0;q[ma>>2]=6564;o[ma+4|0]=0;q[a+68>>2]=ma;q[6657]=q[6657]+1;ma=n[q[5255]](16,16)|0;q[ma+8>>2]=1;q[ma+12>>2]=0;q[ma>>2]=6640;o[ma+4|0]=0;q[a+84>>2]=ma;q[6657]=q[6657]+1;ma=n[q[5255]](16,16)|0;q[ma+8>>2]=1;q[ma+12>>2]=0;q[ma>>2]=6640;q[a+80>>2]=ma;o[ma+4|0]=1;ra=q[d+16>>2];ma=q[d>>2];a:{if(ma){q[a+8>>2]=ma;o[a+12|0]=0;break a}o[a+12|0]=1;q[6657]=q[6657]+1;pa=n[q[5255]](24,16)|0;ma=q[d+8>>2];q[pa+20>>2]=0;q[pa+4>>2]=ma;q[pa>>2]=868;q[6657]=q[6657]+1;na=n[q[5255]](w(ma,868),16)|0;q[pa+12>>2]=na;q[pa+16>>2]=na;ma=q[pa+4>>2];q[pa+8>>2]=ma;qa=ma+ -1|0;b:{if(!qa){ma=na;break b}oa=q[pa>>2];while(1){ma=na+oa|0;q[na>>2]=ma;na=ma;qa=qa+ -1|0;if(qa){continue}break}}q[ma>>2]=0;q[a+8>>2]=pa;}ma=q[d+4>>2];if(ma){q[a+16>>2]=ma;o[a+20|0]=0;return}o[a+20|0]=1;q[6657]=q[6657]+1;oa=n[q[5255]](24,16)|0;ma=q[d+12>>2];q[oa+20>>2]=0;q[oa+4>>2]=ma;d=(ra|0)>80?ra:80;d=(d|0)>116?d+16&-16:128;q[oa>>2]=d;q[6657]=q[6657]+1;na=n[q[5255]](w(d,ma),16)|0;q[oa+12>>2]=na;q[oa+16>>2]=na;d=q[oa+4>>2];q[oa+8>>2]=d;qa=d+ -1|0;c:{if(!qa){ma=na;break c}d=q[oa>>2];while(1){ma=d+na|0;q[na>>2]=ma;na=ma;qa=qa+ -1|0;if(qa){continue}break}}q[ma>>2]=0;q[a+16>>2]=oa;}function af(a,d,sa){var ta=0;df(a);ta=q[a+248>>2];q[d>>2]=q[a+244>>2];q[d+4>>2]=ta;ta=q[a+256>>2];q[d+8>>2]=q[a+252>>2];q[d+12>>2]=ta;d=q[a+272>>2];q[sa+8>>2]=q[a+268>>2];q[sa+12>>2]=d;d=q[a+264>>2];q[sa>>2]=q[a+260>>2];q[sa+4>>2]=d;}function bf(a,d){var sa=0,ua=x(0),va=0,wa=x(0),xa=0,ya=x(0),za=x(0),Aa=x(0),Ba=x(0);xa=q[a>>2];sa=0;a:{if((xa|0)<1){break a}ya=u[a+308>>2];za=u[d+8>>2];Aa=u[d+4>>2];Ba=u[d>>2];while(1){sa=(va<<4)+a|0;ua=x(Ba-u[sa+4>>2]);wa=x(ua*ua);ua=x(Aa-u[sa+8>>2]);wa=x(wa+x(ua*ua));ua=x(za-u[sa+12>>2]);sa=1;if(!!(x(wa+x(ua*ua))<=ya)){break a}va=va+1|0;if((xa|0)!=(va|0)){continue}break}sa=0;}va=sa;if(!(u[d+12>>2]!=u[a+304>>2]|u[d+8>>2]!=u[a+300>>2]|(u[d+4>>2]!=u[a+296>>2]|u[d>>2]!=u[a+292>>2]))){va=1;}return va}function cf(a,d){var Ca=0,Da=0;Da=df(a);Ca=q[a+288>>2];q[d+8>>2]=q[a+284>>2];q[d+12>>2]=Ca;Ca=q[a+280>>2];q[d>>2]=q[a+276>>2];q[d+4>>2]=Ca;return Da}function df(a){var d=x(0),Ea=0,Fa=0,Ga=x(0),Ha=x(0),Ia=x(0),Ja=x(0),Ka=x(0),La=x(0),Ma=x(0),Na=x(0),Oa=x(0),Pa=x(0),Qa=x(0),Ra=x(0),Sa=0,Ta=0,Ua=x(0),Va=x(0);Sa=P-16|0;P=Sa;a:{if(!r[a+356|0]){Fa=r[a+312|0];break a}o[a+356|0]=0;o[a+352|0]=0;q[a+344>>2]=0;q[a+348>>2]=0;q[a+336>>2]=0;q[a+340>>2]=0;Ta=r[a+332|0]&-16;o[a+332|0]=Ta;Ea=q[a>>2];b:{if(Ea>>>0>4){break b}Fa=a+316|0;c:{d:{e:{switch(Ea-1|0){case 1:Ha=u[a+4>>2];Ja=x(u[a+20>>2]-Ha);Ga=u[a+8>>2];Ka=x(u[a+24>>2]-Ga);d=u[a+12>>2];Oa=x(u[a+28>>2]-d);Ga=x(x(x(x(x(0)-Ha)*Ja)+x(x(x(0)-Ga)*Ka))+x(x(x(0)-d)*Oa));Fa=1;f:{if(!(Ga>x(0))){break f}d=x(x(x(Ja*Ja)+x(Ka*Ka))+x(Oa*Oa));if(!(Ga<d)){Ia=x(1);Fa=2;break f}Ia=x(Ga/d);Fa=3;}q[a+344>>2]=0;q[a+348>>2]=0;u[a+340>>2]=Ia;u[a+336>>2]=x(1)-Ia;Ea=a+332|0;o[Ea|0]=Fa|Ta;Fa=0;q[a+256>>2]=0;d=u[a+92>>2];Ha=x(d+x(Ia*x(u[a+108>>2]-d)));u[a+252>>2]=Ha;d=u[a+88>>2];Ja=x(d+x(Ia*x(u[a+104>>2]-d)));u[a+248>>2]=Ja;d=u[a+84>>2];Ka=x(d+x(Ia*x(u[a+100>>2]-d)));u[a+244>>2]=Ka;Oa=u[a+180>>2];Ga=u[a+184>>2];La=u[a+168>>2];d=u[a+188>>2];Ma=u[a+172>>2];Na=u[a+164>>2];q[a+288>>2]=0;Pa=Ha;Ha=x(Ma+x(Ia*x(d-Ma)));u[a+284>>2]=Pa-Ha;Ga=x(La+x(Ia*x(Ga-La)));u[a+280>>2]=Ja-Ga;d=x(Na+x(Ia*x(Oa-Na)));u[a+276>>2]=Ka-d;q[a+272>>2]=0;u[a+268>>2]=Ha;u[a+264>>2]=Ga;u[a+260>>2]=d;qd(a,Ea);if(u[a+336>>2]>=x(0)^1|u[a+340>>2]>=x(0)^1|u[a+344>>2]>=x(0)^1){break b}Fa=u[a+348>>2]>=x(0);break b;case 2:Ea=Sa;q[Ea+8>>2]=0;q[Ea+12>>2]=0;q[Ea>>2]=0;q[Ea+4>>2]=0;Kb(Ea,a+4|0,a+20|0,a+36|0,Fa);Fa=0;q[a+256>>2]=0;Pa=u[a+336>>2];Qa=u[a+340>>2];Ra=u[a+344>>2];Ua=x(x(x(Pa*u[a+92>>2])+x(Qa*u[a+108>>2]))+x(Ra*u[a+124>>2]));u[a+252>>2]=Ua;Va=x(x(x(Pa*u[a+88>>2])+x(Qa*u[a+104>>2]))+x(Ra*u[a+120>>2]));u[a+248>>2]=Va;Ia=x(x(x(Pa*u[a+84>>2])+x(Qa*u[a+100>>2]))+x(Ra*u[a+116>>2]));u[a+244>>2]=Ia;La=u[a+180>>2];Ma=u[a+196>>2];Na=u[a+168>>2];Ja=u[a+184>>2];Ka=u[a+200>>2];Oa=u[a+172>>2];Ha=u[a+188>>2];Ga=u[a+204>>2];d=u[a+164>>2];q[a+288>>2]=0;Ha=x(x(x(Pa*Oa)+x(Qa*Ha))+x(Ra*Ga));u[a+284>>2]=Ua-Ha;Ga=x(x(x(Pa*Na)+x(Qa*Ja))+x(Ra*Ka));u[a+280>>2]=Va-Ga;d=x(x(x(Pa*d)+x(Qa*La))+x(Ra*Ma));u[a+276>>2]=Ia-d;q[a+272>>2]=0;u[a+268>>2]=Ha;u[a+264>>2]=Ga;u[a+260>>2]=d;qd(a,a+332|0);if(u[a+336>>2]>=x(0)^1|u[a+340>>2]>=x(0)^1|u[a+344>>2]>=x(0)^1){break b}Fa=u[a+348>>2]>=x(0);break b;case 3:Ea=Sa;q[Ea+8>>2]=0;q[Ea+12>>2]=0;q[Ea>>2]=0;q[Ea+4>>2]=0;if(Fj(Ea,a+4|0,a+20|0,a+36|0,a+52|0,Fa)){Fa=0;q[a+256>>2]=0;La=u[a+336>>2];Ma=u[a+340>>2];Na=u[a+344>>2];d=u[a+348>>2];Ja=x(x(x(x(La*u[a+92>>2])+x(Ma*u[a+108>>2]))+x(Na*u[a+124>>2]))+x(d*u[a+140>>2]));u[a+252>>2]=Ja;Ka=x(x(x(x(La*u[a+88>>2])+x(Ma*u[a+104>>2]))+x(Na*u[a+120>>2]))+x(d*u[a+136>>2]));u[a+248>>2]=Ka;Oa=x(x(x(x(La*u[a+84>>2])+x(Ma*u[a+100>>2]))+x(Na*u[a+116>>2]))+x(d*u[a+132>>2]));u[a+244>>2]=Oa;q[a+288>>2]=0;q[a+272>>2]=0;Ha=x(x(x(x(La*u[a+164>>2])+x(Ma*u[a+180>>2]))+x(Na*u[a+196>>2]))+x(d*u[a+212>>2]));u[a+260>>2]=Ha;Ga=x(x(x(x(La*u[a+168>>2])+x(Ma*u[a+184>>2]))+x(Na*u[a+200>>2]))+x(d*u[a+216>>2]));u[a+264>>2]=Ga;d=x(x(x(x(La*u[a+172>>2])+x(Ma*u[a+188>>2]))+x(Na*u[a+204>>2]))+x(d*u[a+220>>2]));u[a+268>>2]=d;u[a+276>>2]=Oa-Ha;u[a+280>>2]=Ka-Ga;u[a+284>>2]=Ja-d;qd(a,a+332|0);if(u[a+336>>2]>=x(0)^1|u[a+340>>2]>=x(0)^1|u[a+344>>2]>=x(0)^1){break b}Fa=u[a+348>>2]>=x(0);break b}if(!r[a+352|0]){break d}break;case 0:break c;default:break e}}Fa=0;break b}q[a+276>>2]=0;q[a+280>>2]=0;Fa=1;o[a+312|0]=1;q[a+284>>2]=0;q[a+288>>2]=0;break a}Ea=q[a+168>>2];q[a+260>>2]=q[a+164>>2];q[a+264>>2]=Ea;Ea=q[a+88>>2];q[a+244>>2]=q[a+84>>2];q[a+248>>2]=Ea;Ea=q[a+176>>2];q[a+268>>2]=q[a+172>>2];q[a+272>>2]=Ea;Ea=q[a+96>>2];q[a+252>>2]=q[a+92>>2];q[a+256>>2]=Ea;o[a+352|0]=0;q[a+288>>2]=0;u[a+280>>2]=u[a+248>>2]-u[a+264>>2];u[a+276>>2]=u[a+244>>2]-u[a+260>>2];u[a+284>>2]=u[a+252>>2]-u[a+268>>2];q[a+344>>2]=0;q[a+348>>2]=0;q[a+336>>2]=1065353216;q[a+340>>2]=0;o[a+332|0]=Ta;Fa=1;}o[a+312|0]=Fa;}P=Sa+16|0;return (Fa|0)!=0}function ef(a,Wa,Xa,Ya){var Za=0,_a=0;Za=q[Wa+4>>2];q[a+292>>2]=q[Wa>>2];q[a+296>>2]=Za;Za=q[Wa+12>>2];q[a+300>>2]=q[Wa+8>>2];q[a+304>>2]=Za;o[a+356|0]=1;_a=q[Wa+4>>2];Za=a+(q[a>>2]<<4)|0;q[Za+4>>2]=q[Wa>>2];q[Za+8>>2]=_a;_a=q[Wa+12>>2];q[Za+12>>2]=q[Wa+8>>2];q[Za+16>>2]=_a;_a=q[Xa+12>>2];Wa=(q[a>>2]<<4)+a|0;q[Wa+92>>2]=q[Xa+8>>2];q[Wa+96>>2]=_a;Za=q[Xa+4>>2];q[Wa+84>>2]=q[Xa>>2];q[Wa+88>>2]=Za;Za=q[Ya+12>>2];Wa=(q[a>>2]<<4)+a|0;q[Wa+172>>2]=q[Ya+8>>2];q[Wa+176>>2]=Za;Xa=q[Ya+4>>2];q[Wa+164>>2]=q[Ya>>2];q[Wa+168>>2]=Xa;q[a>>2]=q[a>>2]+1;}function ff(a,Wa,Xa,Ya,$a){var ab=x(0),bb=x(0),cb=x(0),db=x(0),eb=x(0),fb=0,gb=x(0),hb=x(0),ib=x(0),jb=x(0),kb=0,lb=x(0),mb=x(0),nb=x(0),ob=x(0),pb=0,qb=x(0),rb=x(0),sb=0,tb=x(0),ub=x(0),vb=x(0),wb=x(0),xb=0,yb=x(0),zb=x(0),Ab=x(0),Bb=0,Cb=0,Db=0,Eb=0;fb=P+ -64|0;q[fb+60>>2]=Xa;q[fb+56>>2]=Wa;q[fb+52>>2]=a;ab=u[Wa>>2];db=u[a>>2];hb=u[Wa+4>>2];cb=u[a+4>>2];jb=u[Wa+8>>2];gb=u[a+8>>2];q[fb+12>>2]=0;bb=x(gb-jb);u[fb+8>>2]=bb;ib=x(cb-hb);u[fb+4>>2]=ib;eb=x(db-ab);u[fb>>2]=eb;mb=u[Xa>>2];nb=u[Xa+4>>2];ob=u[Xa+8>>2];q[fb+44>>2]=0;q[fb+28>>2]=0;tb=x(ob-gb);u[fb+40>>2]=tb;ub=x(nb-cb);u[fb+36>>2]=ub;ob=x(jb-ob);u[fb+24>>2]=ob;qb=x(hb-nb);u[fb+20>>2]=qb;vb=x(mb-db);u[fb+32>>2]=vb;rb=x(ab-mb);u[fb+16>>2]=rb;hb=x(-1);jb=x(x(eb*qb)-x(ib*rb));mb=x(x(ib*ob)-x(bb*qb));nb=x(x(bb*rb)-x(eb*ob));wb=x(x(jb*jb)+x(x(mb*mb)+x(nb*nb)));if(!(wb>x(0))){return x(-1)}while(1){a:{if(!(x(x(x(db*x(x(jb*ib)-x(nb*bb)))+x(cb*x(x(mb*bb)-x(jb*eb))))+x(x(x(nb*eb)-x(mb*ib))*gb))>x(0))){ab=hb;break a}Db=pb<<2;Eb=q[Db+4900>>2];kb=Eb<<2;xb=q[kb+(fb+52|0)>>2];yb=u[xb>>2];bb=x(yb-db);zb=u[xb+4>>2];ib=x(zb-cb);Ab=u[xb+8>>2];eb=x(Ab-gb);ab=x(x(x(bb*bb)+x(ib*ib))+x(eb*eb));lb=x(-1);b:{if(!(ab>x(0))){break b}ab=x(x(-x(x(x(db*bb)+x(cb*ib))+x(gb*eb)))/ab);if(!!(ab>=x(1))){Bb=1065353216;Cb=0;sb=2;lb=x(x(x(yb*yb)+x(zb*zb))+x(Ab*Ab));break b}if(!!(ab<=x(0))){Bb=0;Cb=1065353216;sb=1;lb=x(x(x(db*db)+x(cb*cb))+x(gb*gb));break b}Cb=(j(x(x(1)-ab)),e(0));Bb=(j(ab),e(0));sb=3;gb=x(gb+x(eb*ab));db=x(db+x(bb*ab));ab=x(cb+x(ib*ab));lb=x(x(gb*gb)+x(x(db*db)+x(ab*ab)));}ab=lb;if(!(!!(ab<hb)|hb<x(0))){ab=hb;break a}q[$a>>2]=(0-(sb&1)&1<<pb)+(1<<Eb&sb<<30>>31);q[Ya+Db>>2]=Cb;q[Ya+kb>>2]=Bb;q[(q[kb+4900>>2]<<2)+Ya>>2]=0;}pb=pb+1|0;if((pb|0)!=3){kb=(pb<<4)+fb|0;eb=u[kb>>2];bb=u[kb+8>>2];ib=u[kb+4>>2];kb=q[(fb+52|0)+(pb<<2)>>2];gb=u[kb+8>>2];cb=u[kb+4>>2];db=u[kb>>2];hb=ab;continue}break}if(ab<x(0)){ab=u[a+8>>2];hb=u[a>>2];db=u[a+4>>2];q[$a>>2]=7;db=x(x(x(x(mb*hb)+x(nb*db))+x(jb*ab))/wb);ab=x(nb*db);cb=x(u[Wa+4>>2]-ab);hb=x(mb*db);gb=x(u[Wa>>2]-hb);bb=x(x(rb*cb)-x(qb*gb));lb=x(bb*bb);db=x(jb*db);bb=x(u[Wa+8>>2]-db);cb=x(x(qb*bb)-x(ob*cb));eb=x(cb*cb);cb=x(x(ob*gb)-x(rb*bb));lb=x(E(x(lb+x(eb+x(cb*cb)))));cb=x(E(wb));gb=x(lb/cb);u[Ya>>2]=gb;bb=x(u[Xa+4>>2]-ab);ib=x(u[Xa>>2]-hb);eb=x(x(vb*bb)-x(ub*ib));lb=x(eb*eb);eb=x(u[Xa+8>>2]-db);bb=x(x(ub*eb)-x(tb*bb));jb=x(bb*bb);bb=x(x(tb*ib)-x(vb*eb));cb=x(x(E(x(lb+x(jb+x(bb*bb)))))/cb);u[Ya+4>>2]=cb;u[Ya+8>>2]=x(1)-x(gb+cb);ab=x(x(db*db)+x(x(hb*hb)+x(ab*ab)));}return ab}function gf(a,Wa,Xa){var Ya=0,$a=x(0),Fb=0,Gb=x(0),Hb=x(0),Ib=x(0),Jb=x(0),Kb=0,Lb=0,Mb=0,Nb=0,Ob=x(0),Pb=x(0),Qb=0,Rb=0,Sb=0,Tb=x(0),Ub=x(0),Vb=x(0),Wb=x(0),Xb=0,Yb=0,Zb=0,_b=0,$b=0;Ya=P-96|0;P=Ya;q[a+376>>2]=0;q[a+364>>2]=4;q[a+368>>2]=0;Kb=a+316|0;q[a+360>>2]=Kb;q[a+356>>2]=a+284;q[a+352>>2]=a+252;q[a+348>>2]=a+220;Fb=q[Wa+4>>2];q[a>>2]=q[Wa>>2];q[a+4>>2]=Fb;Fb=q[Wa+20>>2];q[a+16>>2]=q[Wa+16>>2];q[a+20>>2]=Fb;Fb=q[Wa+12>>2];q[a+8>>2]=q[Wa+8>>2];q[a+12>>2]=Fb;Fb=q[Wa+36>>2];q[a+32>>2]=q[Wa+32>>2];q[a+36>>2]=Fb;Fb=q[Wa+28>>2];q[a+24>>2]=q[Wa+24>>2];q[a+28>>2]=Fb;Fb=q[Wa+52>>2];q[a+48>>2]=q[Wa+48>>2];q[a+52>>2]=Fb;Fb=q[Wa+44>>2];q[a+40>>2]=q[Wa+40>>2];q[a+44>>2]=Fb;Mb=Wa- -64|0;Nb=q[Mb+4>>2];Fb=a- -64|0;q[Fb>>2]=q[Mb>>2];q[Fb+4>>2]=Nb;Fb=q[Wa+60>>2];q[a+56>>2]=q[Wa+56>>2];q[a+60>>2]=Fb;Fb=q[Wa+84>>2];q[a+80>>2]=q[Wa+80>>2];q[a+84>>2]=Fb;Fb=q[Wa+76>>2];q[a+72>>2]=q[Wa+72>>2];q[a+76>>2]=Fb;Fb=q[Wa+100>>2];q[a+96>>2]=q[Wa+96>>2];q[a+100>>2]=Fb;Fb=q[Wa+92>>2];q[a+88>>2]=q[Wa+88>>2];q[a+92>>2]=Fb;Fb=q[Wa+108>>2];q[a+104>>2]=q[Wa+104>>2];q[a+108>>2]=Fb;Fb=q[Wa+116>>2];q[a+112>>2]=q[Wa+112>>2];q[a+116>>2]=Fb;Fb=q[Wa+124>>2];Wa=q[Wa+120>>2];q[a+180>>2]=0;q[a+144>>2]=0;q[a+120>>2]=Wa;q[a+124>>2]=Fb;Wa=q[Xa+12>>2];q[a+136>>2]=q[Xa+8>>2];q[a+140>>2]=Wa;Wa=q[Xa+4>>2];q[a+128>>2]=q[Xa>>2];q[a+132>>2]=Wa;Fb=a+128|0;$a=u[a+128>>2];Ib=u[a+132>>2];Hb=u[a+136>>2];Ob=x(x(x($a*$a)+x(Ib*Ib))+x(Hb*Hb));a:{if(!!(Ob>x(0))){u[Ya+40>>2]=-Hb;u[Ya+36>>2]=-Ib;u[Ya+32>>2]=-$a;break a}q[Ya+40>>2]=0;q[Ya+32>>2]=1065353216;q[Ya+36>>2]=0;}q[Ya+44>>2]=0;q[a+364>>2]=3;q[a+164>>2]=0;q[a+180>>2]=1;q[a+148>>2]=Kb;Na(a,Ya+32|0,Kb);q[a+164>>2]=1065353216;Wa=q[a+148>>2];Xa=q[Wa+20>>2];q[Fb>>2]=q[Wa+16>>2];q[Fb+4>>2]=Xa;Xa=q[Wa+28>>2];q[Fb+8>>2]=q[Wa+24>>2];q[Fb+12>>2]=Xa;Xa=q[Wa+28>>2];q[Ya+88>>2]=q[Wa+24>>2];q[Ya+92>>2]=Xa;Xa=q[Wa+20>>2];q[Ya+80>>2]=q[Wa+16>>2];q[Ya+84>>2]=Xa;Xa=q[Wa+28>>2];q[Ya+72>>2]=q[Wa+24>>2];q[Ya+76>>2]=Xa;Xa=q[Wa+20>>2];q[Ya+64>>2]=q[Wa+16>>2];q[Ya+68>>2]=Xa;Xa=q[Wa+28>>2];q[Ya+56>>2]=q[Wa+24>>2];q[Ya+60>>2]=Xa;Xa=q[Wa+20>>2];q[Ya+48>>2]=q[Wa+16>>2];q[Ya+52>>2]=Xa;Xa=q[Wa+28>>2];q[Ya+40>>2]=q[Wa+24>>2];q[Ya+44>>2]=Xa;Xa=q[Wa+20>>2];q[Ya+32>>2]=q[Wa+16>>2];q[Ya+36>>2]=Xa;$a=u[a+136>>2];Ib=u[a+132>>2];Hb=u[a+128>>2];Kb=q[a+368>>2];b:{c:{d:{while(1){Pb=x(E(x(x(x(Hb*Hb)+x(Ib*Ib))+x($a*$a))));if(!!(Pb<x(9999999747378752e-20))){q[a+376>>2]=1;break d}q[Ya+28>>2]=0;u[Ya+24>>2]=-$a;u[Ya+20>>2]=-Ib;u[Ya+16>>2]=-Hb;Xa=w(Kb,36)+a|0;Mb=Xa+148|0;Wa=q[Xa+180>>2];Nb=Mb+(Wa<<2)|0;q[Nb+16>>2]=0;Lb=q[a+364>>2]+ -1|0;q[a+364>>2]=Lb;Qb=Nb;Nb=q[((Lb<<2)+a|0)+348>>2];q[Qb>>2]=Nb;q[Xa+180>>2]=Wa+1;Na(a,Ya+16|0,Nb);e:{Lb=q[Xa+180>>2];Wa=q[(Mb+(Lb<<2)|0)+ -4>>2];$a=u[Wa+16>>2];Ib=x($a-u[Ya+32>>2]);Gb=x(Ib*Ib);Ib=u[Wa+20>>2];Hb=x(Ib-u[Ya+36>>2]);Jb=x(Gb+x(Hb*Hb));Hb=u[Wa+24>>2];Gb=x(Hb-u[Ya+40>>2]);if(x(Jb+x(Gb*Gb))<x(9999999747378752e-20)){break e}Gb=x($a-u[Ya+48>>2]);Jb=x(Gb*Gb);Gb=x(Ib-u[Ya+52>>2]);Jb=x(Jb+x(Gb*Gb));Gb=x(Hb-u[Ya+56>>2]);if(!!(x(Jb+x(Gb*Gb))<x(9999999747378752e-20))){break e}Gb=x($a-u[Ya+64>>2]);Jb=x(Gb*Gb);Gb=x(Ib-u[Ya+68>>2]);Jb=x(Jb+x(Gb*Gb));Gb=x(Hb-u[Ya+72>>2]);if(x(Jb+x(Gb*Gb))<x(9999999747378752e-20)){break e}Gb=x($a-u[Ya+80>>2]);Jb=x(Gb*Gb);Gb=x(Ib-u[Ya+84>>2]);Jb=x(Jb+x(Gb*Gb));Gb=x(Hb-u[Ya+88>>2]);if(x(Jb+x(Gb*Gb))<x(9999999747378752e-20)){break e}Sb=q[Wa+28>>2];Xb=Xb+1&3;Nb=(Ya+32|0)+(Xb<<4)|0;q[Nb+8>>2]=q[Wa+24>>2];q[Nb+12>>2]=Sb;Qb=q[Wa+20>>2];q[Nb>>2]=q[Wa+16>>2];q[Nb+4>>2]=Qb;$a=x(x(x(x(u[a+128>>2]*$a)+x(u[a+132>>2]*Ib))+x(u[a+136>>2]*Hb))/Pb);Tb=$a>Tb?$a:Tb;if(!!(x(x(Pb-Tb)+x(Pb*x(-9999999747378752e-20)))<=x(0))){Kb=q[a+368>>2];Xa=w(Kb,36)+a|0;Wa=q[Xa+180>>2]+ -1|0;q[Xa+180>>2]=Wa;Wa=q[(Xa+(Wa<<2)|0)+148>>2];Xa=q[a+364>>2];q[a+364>>2]=Xa+1;q[((Xa<<2)+a|0)+348>>2]=Wa;break d}q[Ya+12>>2]=0;f:{g:{Wa=Lb+ -2|0;h:{if(Wa>>>0>2){break h}i:{switch(Wa-1|0){default:Wa=q[Xa+152>>2];Ub=u[Wa+16>>2];Mb=q[Mb>>2];Ob=u[Mb+16>>2];Pb=x(Ub-Ob);Vb=u[Wa+20>>2];Ib=u[Mb+20>>2];Gb=x(Vb-Ib);Wb=u[Wa+24>>2];Hb=u[Mb+24>>2];Jb=x(Wb-Hb);$a=x(x(x(Pb*Pb)+x(Gb*Gb))+x(Jb*Jb));if(!($a>x(0))){break g}$a=x(x(-x(x(x(Ob*Pb)+x(Ib*Gb))+x(Hb*Jb)))/$a);if(!!($a>=x(1))){q[Ya+16>>2]=0;q[Ya+20>>2]=1065353216;q[Ya+12>>2]=2;Ob=x(x(x(Ub*Ub)+x(Vb*Vb))+x(Wb*Wb));break h}if(!!($a<=x(0))){q[Ya+16>>2]=1065353216;q[Ya+20>>2]=0;q[Ya+12>>2]=1;Ob=x(x(x(Ob*Ob)+x(Ib*Ib))+x(Hb*Hb));break h}q[Ya+12>>2]=3;u[Ya+20>>2]=$a;u[Ya+16>>2]=x(1)-$a;Hb=x(Hb+x(Jb*$a));Ob=x(Ob+x(Pb*$a));$a=x(Ib+x(Gb*$a));Ob=x(x(Hb*Hb)+x(x(Ob*Ob)+x($a*$a)));break h;case 0:Ob=ff(q[Mb>>2]+16|0,q[Xa+152>>2]+16|0,q[Xa+156>>2]+16|0,Ya+16|0,Ya+12|0);break h;case 1:break i}}Ob=Kj(q[Mb>>2]+16|0,q[Xa+152>>2]+16|0,q[Xa+156>>2]+16|0,q[Xa+160>>2]+16|0,Ya+16|0,Ya+12|0);}if(!(Ob>=x(0))){break g}Wa=0;Kb=1-Kb|0;Qb=w(Kb,36)+a|0;Mb=Qb;q[Mb+180>>2]=0;q[Fb+8>>2]=0;q[Fb+12>>2]=0;q[Fb>>2]=0;q[Fb+4>>2]=0;q[a+368>>2]=Kb;$a=x(0);Nb=q[Ya+12>>2];Ib=x(0);Hb=x(0);Sb=q[Xa+180>>2];if(!Sb){break f}while(1){Rb=Wa<<2;Yb=Rb+Xa|0;Lb=q[Yb+148>>2];j:{if(Nb>>>Wa&1){Zb=q[Mb+180>>2];_b=(Zb<<2)+Qb|0;q[_b+148>>2]=Lb;Lb=Rb+(Ya+16|0)|0;$a=u[Lb>>2];Lb=q[Lb>>2];q[Mb+180>>2]=Zb+1;q[_b+164>>2]=Lb;Lb=q[Yb+148>>2];Pb=u[Lb+24>>2];Ib=u[Lb+20>>2];Hb=x(x(u[Lb+16>>2]*$a)+u[a+128>>2]);u[a+128>>2]=Hb;Ib=x(x(Ib*$a)+u[a+132>>2]);u[a+132>>2]=Ib;$a=x(x(Pb*$a)+u[a+136>>2]);u[a+136>>2]=$a;break j}Rb=q[a+364>>2];q[a+364>>2]=Rb+1;q[((Rb<<2)+a|0)+348>>2]=Lb;}Wa=Wa+1|0;if((Sb|0)!=(Wa|0)){continue}break}break f}Kb=q[a+368>>2];Xa=w(Kb,36)+a|0;Wa=q[Xa+180>>2]+ -1|0;q[Xa+180>>2]=Wa;Wa=q[(Xa+(Wa<<2)|0)+148>>2];Xa=q[a+364>>2];q[a+364>>2]=Xa+1;q[((Xa<<2)+a|0)+348>>2]=Wa;break d}if((Nb|0)==15){q[a+376>>2]=1;}if(($b|0)==127){Wa=2;q[a+376>>2]=2;q[a+372>>2]=(w(Kb,36)+a|0)+148;break b}$b=$b+1|0;Wa=q[a+376>>2];if(!Wa){continue}break c}break}Kb=q[a+368>>2];Xa=w(Kb,36)+a|0;Wa=q[Xa+180>>2]+ -1|0;q[Xa+180>>2]=Wa;Wa=q[(Xa+(Wa<<2)|0)+148>>2];Xa=q[a+364>>2];q[a+364>>2]=Xa+1;q[((Xa<<2)+a|0)+348>>2]=Wa;}Wa=q[a+376>>2];}q[a+372>>2]=(w(Kb,36)+a|0)+148;if(Wa>>>0>1){break b}if(Wa-1){$a=u[a+128>>2];Gb=x($a*$a);$a=u[a+132>>2];Gb=x(Gb+x($a*$a));$a=u[a+136>>2];u[a+144>>2]=E(x(Gb+x($a*$a)));Wa=0;break b}q[a+144>>2]=0;Wa=1;}P=Ya+96|0;return Wa}function hf(a){a=a|0;var Wa=0;q[a>>2]=4600;Wa=q[a+344>>2];n[q[q[Wa>>2]>>2]](Wa)|0;Wa=q[a+344>>2];if(Wa){q[6658]=q[6658]+1;n[q[5256]](Wa);}q[a>>2]=4556;Wa=q[a+336>>2];if(Wa){if(r[a+340|0]){if(Wa){q[6658]=q[6658]+1;n[q[5256]](Wa);}}q[a+336>>2]=0;}q[a+336>>2]=0;o[a+340|0]=1;q[a+328>>2]=0;q[a+332>>2]=0;hb(a);return a|0}function jf(a,Xa,ac){a=a|0;Xa=Xa|0;ac=ac|0;var bc=0,cc=0;q[Xa+16>>2]=q[a+4>>2];q[Xa+20>>2]=q[a+8>>2];q[Xa+24>>2]=q[a+12>>2];q[Xa+28>>2]=q[a+16>>2];q[Xa+32>>2]=q[a+20>>2];q[Xa+36>>2]=q[a+24>>2];q[Xa+40>>2]=q[a+28>>2];q[Xa+44>>2]=q[a+32>>2];q[Xa+48>>2]=q[a+36>>2];q[Xa+52>>2]=q[a+40>>2];q[Xa+56>>2]=q[a+44>>2];q[Xa+60>>2]=q[a+48>>2];q[Xa+64>>2]=q[a+52>>2];q[Xa+68>>2]=q[a+56>>2];q[Xa+72>>2]=q[a+60>>2];q[Xa+76>>2]=q[a- -64>>2];q[Xa+80>>2]=q[a+68>>2];q[Xa+84>>2]=q[a+72>>2];q[Xa+88>>2]=q[a+76>>2];q[Xa+92>>2]=q[a+80>>2];q[Xa+96>>2]=q[a+84>>2];q[Xa+100>>2]=q[a+88>>2];q[Xa+104>>2]=q[a+92>>2];q[Xa+108>>2]=q[a+96>>2];q[Xa+112>>2]=q[a+100>>2];q[Xa+116>>2]=q[a+104>>2];q[Xa+120>>2]=q[a+108>>2];q[Xa+124>>2]=q[a+112>>2];q[Xa+128>>2]=q[a+116>>2];q[Xa+132>>2]=q[a+120>>2];q[Xa+136>>2]=q[a+124>>2];q[Xa+140>>2]=q[a+128>>2];q[Xa+144>>2]=q[a+132>>2];q[Xa+148>>2]=q[a+136>>2];q[Xa+152>>2]=q[a+140>>2];q[Xa+156>>2]=q[a+144>>2];q[Xa+160>>2]=q[a+148>>2];q[Xa+164>>2]=q[a+152>>2];q[Xa+168>>2]=q[a+156>>2];q[Xa+172>>2]=q[a+160>>2];q[Xa+176>>2]=q[a+164>>2];q[Xa+180>>2]=q[a+168>>2];q[Xa+184>>2]=q[a+172>>2];q[Xa+188>>2]=q[a+176>>2];q[Xa+232>>2]=q[a+180>>2];bc=q[a+184>>2];q[Xa>>2]=0;q[Xa+192>>2]=bc;bc=n[q[q[ac>>2]+28>>2]](ac,q[a+192>>2])|0;q[Xa+8>>2]=0;q[Xa+4>>2]=bc;q[Xa+236>>2]=q[a+204>>2];q[Xa+240>>2]=q[a+208>>2];q[Xa+244>>2]=q[a+212>>2];q[Xa+248>>2]=q[a+220>>2];q[Xa+196>>2]=q[a+224>>2];q[Xa+200>>2]=q[a+228>>2];q[Xa+204>>2]=q[a+236>>2];q[Xa+208>>2]=q[a+244>>2];q[Xa+212>>2]=q[a+248>>2];q[Xa+216>>2]=q[a+232>>2];q[Xa+252>>2]=q[a+252>>2];bc=n[q[q[ac>>2]+40>>2]](ac,a)|0;cc=n[q[q[ac>>2]+28>>2]](ac,bc)|0;q[Xa+12>>2]=cc;if(cc){n[q[q[ac>>2]+48>>2]](ac,bc);}q[Xa+220>>2]=q[a+268>>2];q[Xa+224>>2]=q[a+272>>2];q[Xa+228>>2]=q[a+276>>2];a=q[a+280>>2];q[Xa+260>>2]=0;q[Xa+256>>2]=a;return 4492}function kf(a,Xa){var ac=0,dc=0,ec=0,fc=0;ac=q[a+844>>2];a:{if((ac|0)==4){ac=qk(a,Xa);dc=w(ac,208)+a|0;ec=q[dc+120>>2];if(!ec){break a}fc=q[5779];if(!fc){break a}n[fc](ec)|0;q[dc+120>>2]=0;break a}q[a+844>>2]=ac+1;}dc=a;a=(ac|0)>0?ac:0;va((dc+w(a,208)|0)+4|0,Xa,208);return a}function lf(a,Xa,gc){var hc=0,ic=x(0),jc=x(0),kc=0,lc=x(0),mc=x(0),nc=x(0),oc=x(0),pc=x(0),qc=x(0),rc=x(0),sc=x(0),tc=x(0),uc=x(0),vc=0,wc=x(0),xc=x(0),yc=x(0),zc=x(0),Ac=x(0),Bc=x(0);hc=P-240|0;P=hc;ic=u[gc>>2];jc=u[gc+4>>2];mc=u[gc+8>>2];q[a+164>>2]=0;u[a+160>>2]=mc+u[a+140>>2];u[a+156>>2]=jc+u[a+136>>2];u[a+152>>2]=ic+u[a+132>>2];q[hc+132>>2]=1065353216;q[hc+136>>2]=0;q[hc+140>>2]=0;q[hc+124>>2]=0;q[hc+128>>2]=0;q[hc+152>>2]=1065353216;q[hc+236>>2]=0;q[hc+228>>2]=0;q[hc+232>>2]=0;q[hc+216>>2]=1065353216;q[hc+220>>2]=0;q[hc+224>>2]=0;q[hc+172>>2]=0;q[hc+164>>2]=0;q[hc+168>>2]=0;q[hc+156>>2]=0;q[hc+160>>2]=0;q[hc+196>>2]=1065353216;q[hc+200>>2]=0;q[hc+204>>2]=0;q[hc+188>>2]=0;q[hc+192>>2]=0;q[hc+144>>2]=0;q[hc+148>>2]=0;q[hc+112>>2]=1065353216;q[hc+116>>2]=0;q[hc+120>>2]=0;q[hc+208>>2]=0;q[hc+212>>2]=0;q[hc+180>>2]=0;q[hc+184>>2]=0;q[hc+176>>2]=1065353216;vc=hc+48|0;gc=10;uc=x(1);while(1){a:{if(!gc){break a}kc=q[a+136>>2];q[hc+224>>2]=q[a+132>>2];q[hc+228>>2]=kc;kc=q[a+144>>2];q[hc+232>>2]=q[a+140>>2];q[hc+236>>2]=kc;kc=q[a+164>>2];q[hc+168>>2]=q[a+160>>2];q[hc+172>>2]=kc;kc=q[a+156>>2];q[hc+160>>2]=q[a+152>>2];q[hc+164>>2]=kc;jc=u[a+180>>2];nc=u[a+176>>2];ic=u[a+168>>2];mc=u[a+172>>2];wc=u[a+132>>2];xc=u[a+152>>2];yc=u[a+136>>2];zc=u[a+156>>2];Ac=u[a+140>>2];Bc=u[a+160>>2];q[hc+220>>2]=0;q[hc+204>>2]=0;q[hc+188>>2]=0;lc=x(x(2)/x(x(x(x(ic*ic)+x(mc*mc))+x(nc*nc))+x(jc*jc)));oc=x(nc*lc);pc=x(mc*oc);qc=x(ic*lc);rc=x(jc*qc);u[hc+212>>2]=pc+rc;sc=x(ic*oc);lc=x(mc*lc);tc=x(jc*lc);u[hc+208>>2]=sc-tc;u[hc+200>>2]=pc-rc;pc=x(ic*lc);jc=x(jc*oc);u[hc+192>>2]=pc+jc;u[hc+184>>2]=sc+tc;u[hc+180>>2]=pc-jc;ic=x(ic*qc);jc=x(mc*lc);u[hc+216>>2]=x(1)-x(ic+jc);lc=ic;ic=x(nc*oc);u[hc+196>>2]=x(1)-x(lc+ic);u[hc+176>>2]=x(1)-x(jc+ic);jc=u[a+196>>2];nc=u[a+192>>2];ic=u[a+184>>2];mc=u[a+188>>2];q[hc+156>>2]=0;q[hc+140>>2]=0;q[hc+124>>2]=0;lc=x(x(2)/x(x(x(x(ic*ic)+x(mc*mc))+x(nc*nc))+x(jc*jc)));oc=x(nc*lc);pc=x(mc*oc);qc=x(ic*lc);rc=x(jc*qc);u[hc+148>>2]=pc+rc;sc=x(ic*oc);lc=x(mc*lc);tc=x(jc*lc);u[hc+144>>2]=sc-tc;u[hc+136>>2]=pc-rc;pc=x(ic*lc);jc=x(jc*oc);u[hc+128>>2]=pc+jc;u[hc+120>>2]=sc+tc;u[hc+116>>2]=pc-jc;ic=x(ic*qc);jc=x(mc*lc);u[hc+152>>2]=x(1)-x(ic+jc);lc=ic;ic=x(nc*oc);u[hc+132>>2]=x(1)-x(lc+ic);u[hc+112>>2]=x(1)-x(jc+ic);kc=q[a+8>>2];q[hc+80>>2]=0;q[hc+4>>2]=1065353216;q[hc+40>>2]=0;q[hc+44>>2]=0;q[hc+32>>2]=0;q[hc+36>>2]=0;q[hc+24>>2]=0;q[hc+28>>2]=0;q[hc+16>>2]=0;q[hc+20>>2]=0;q[hc+100>>2]=0;q[hc+104>>2]=0;u[hc+96>>2]=Ac-Bc;u[hc+92>>2]=yc-zc;u[hc+88>>2]=wc-xc;q[hc+84>>2]=kc;q[hc>>2]=4380;kc=q[kc+188>>2];q[hc+8>>2]=q[kc+4>>2];q[hc+12>>2]=q[kc+8>>2];kc=q[a+12>>2];ic=x(n[q[q[kc>>2]+48>>2]](kc));kc=q[a+12>>2];n[q[q[kc>>2]+44>>2]](kc,x(ic+u[a+64>>2]));b:{c:{if(u[hc+176>>2]!=u[hc+112>>2]|u[hc+192>>2]!=u[hc+128>>2]|(u[hc+208>>2]!=u[hc+144>>2]|u[hc+180>>2]!=u[hc+116>>2])){break c}if(u[hc+196>>2]!=u[hc+132>>2]|u[hc+212>>2]!=u[hc+148>>2]|(u[hc+184>>2]!=u[hc+120>>2]|u[hc+200>>2]!=u[hc+136>>2])){break c}if(u[hc+216>>2]!=u[hc+152>>2]|u[hc+236>>2]!=u[hc+172>>2]|(u[hc+232>>2]!=u[hc+168>>2]|u[hc+228>>2]!=u[hc+164>>2])){break c}if(u[hc+224>>2]==u[hc+160>>2]){break b}}if(r[a+250|0]){Ta(q[a+8>>2],q[a+12>>2],hc+176|0,hc+112|0,hc,u[Xa+56>>2]);break b}La(Xa,q[a+12>>2],hc+176|0,hc+112|0,hc,u[Xa+56>>2]);}kc=q[a+12>>2];n[q[q[kc>>2]+44>>2]](kc,ic);d:{e:{nc=u[hc+4>>2];if(!(nc<x(1))){break e}kc=q[a+8>>2];if(r[kc+204|0]&4){break e}if(!n[q[q[a>>2]+56>>2]](a,kc,q[hc+80>>2])){break e}Lk(a,vc);ic=x(u[a+152>>2]-u[a+132>>2]);jc=x(u[a+156>>2]-u[a+136>>2]);mc=x(u[a+160>>2]-u[a+140>>2]);oc=x(x(x(ic*ic)+x(jc*jc))+x(mc*mc));if(!(oc>x(1.1920928955078125e-7))){break a}lc=ic;ic=x(x(1)/x(E(oc)));if(!(x(x(x(x(lc*ic)*u[a+84>>2])+x(x(jc*ic)*u[a+88>>2]))+x(x(mc*ic)*u[a+92>>2]))<=x(0))){break d}break a}kc=q[a+156>>2];q[a+132>>2]=q[a+152>>2];q[a+136>>2]=kc;kc=q[a+164>>2];q[a+140>>2]=q[a+160>>2];q[a+144>>2]=kc;}gc=gc+ -1|0;uc=x(uc-nc);if(uc>x(.009999999776482582)){continue}}break}P=hc+240|0;}function mf(a){a=a|0;return q[a+8>>2]}function nf(a,Xa){var gc=x(0),Cc=0,Dc=x(0),Ec=x(0),Fc=x(0),Gc=x(0),Hc=x(0);Cc=P-16|0;P=Cc;a:{b:{Dc=u[Xa>>2];Ec=u[Xa+4>>2];gc=u[Xa+8>>2];Fc=x(x(x(Dc*Dc)+x(Ec*Ec))+x(gc*gc));if(!(Fc>x(0))){break b}Gc=u[a+52>>2];if(!(Gc>x(0))){break b}Hc=gc;gc=x(x(1)/x(E(Fc)));Fc=x(-Gc);Gc=x(x(Hc*gc)*Fc);Dc=x(x(Dc*gc)*Fc);Ec=x(x(Ec*gc)*Fc);gc=x(x(Gc*Gc)+x(x(Dc*Dc)+x(Ec*Ec)));if(!!(gc>x(0))){q[Cc+12>>2]=0;u[Cc+8>>2]=-Gc;u[Cc+4>>2]=-Ec;u[Cc>>2]=-Dc;td(a,Cc);}u[a+52>>2]=E(gc);break a}td(a,Xa);}P=Cc+16|0;}function of(a,Xa,Ic,Jc,Kc){q[a>>2]=4248;q[a+272>>2]=0;q[a+276>>2]=0;q[a+256>>2]=0;q[a+260>>2]=0;q[a+8>>2]=Xa;q[a+68>>2]=0;q[a+72>>2]=0;q[a+64>>2]=1017370378;q[a+100>>2]=0;q[a+104>>2]=0;p[a+250>>1]=257;q[a+56>>2]=0;q[a+12>>2]=Ic;q[a+252>>2]=0;o[a+216|0]=1;q[a+212>>2]=0;q[a+204>>2]=0;q[a+208>>2]=0;q[a+280>>2]=1065353216;q[a+284>>2]=0;q[a+264>>2]=1065353216;q[a+268>>2]=0;q[a+76>>2]=0;q[a+80>>2]=0;q[a+108>>2]=0;q[a+112>>2]=0;q[a+52>>2]=1105933107;q[a+20>>2]=0;q[a+24>>2]=0;p[a+248>>1]=0;q[a+28>>2]=1113325568;q[a+32>>2]=1092616192;q[a+36>>2]=1092616192;o[a+288|0]=1;q[a+148>>2]=0;o[a+289|0]=0;o[a+290|0]=0;q[a+16>>2]=1045220557;q[a+240>>2]=0;q[a+244>>2]=0;nf(a,Kc);q[a+44>>2]=1061752795;q[a+48>>2]=1060439283;u[a+60>>2]=Jc;}function pf(a){return 1}function qf(a,Xa){var Ic=0,Jc=0,Kc=0,Lc=0,Mc=0,Nc=0,Oc=0,Pc=0;Jc=q[a+4>>2];Mc=Jc;a:{if((Jc|0)!=q[a+8>>2]){break a}Mc=Jc;Nc=Jc?Jc<<1:1;if((Jc|0)>=(Nc|0)){break a}if(Nc){q[6657]=q[6657]+1;Pc=n[q[5255]](w(Nc,244),16)|0;Mc=q[a+4>>2];}else {Mc=Jc;}if((Mc|0)>=1){while(1){Ic=w(Oc,244);Kc=Ic+Pc|0;Ic=Ic+q[a+12>>2]|0;Lc=q[Ic+4>>2];q[Kc>>2]=q[Ic>>2];q[Kc+4>>2]=Lc;Lc=q[Ic+12>>2];q[Kc+8>>2]=q[Ic+8>>2];q[Kc+12>>2]=Lc;Lc=q[Ic+28>>2];q[Kc+24>>2]=q[Ic+24>>2];q[Kc+28>>2]=Lc;Lc=q[Ic+20>>2];q[Kc+16>>2]=q[Ic+16>>2];q[Kc+20>>2]=Lc;Lc=q[Ic+44>>2];q[Kc+40>>2]=q[Ic+40>>2];q[Kc+44>>2]=Lc;Lc=q[Ic+36>>2];q[Kc+32>>2]=q[Ic+32>>2];q[Kc+36>>2]=Lc;Lc=q[Ic+52>>2];q[Kc+48>>2]=q[Ic+48>>2];q[Kc+52>>2]=Lc;Lc=q[Ic+60>>2];q[Kc+56>>2]=q[Ic+56>>2];q[Kc+60>>2]=Lc;va(Kc- -64|0,Ic- -64|0,180);Oc=Oc+1|0;if((Mc|0)!=(Oc|0)){continue}break}}Mc=q[a+12>>2];if(Mc){if(r[a+16|0]){if(Mc){q[6658]=q[6658]+1;n[q[5256]](Mc);}}q[a+12>>2]=0;}q[a+12>>2]=Pc;o[a+16|0]=1;q[a+8>>2]=Nc;Mc=q[a+4>>2];}q[a+4>>2]=Mc+1;Kc=q[Xa+12>>2];Mc=w(Jc,244);Jc=Mc+q[a+12>>2]|0;Ic=Jc;q[Ic+8>>2]=q[Xa+8>>2];q[Ic+12>>2]=Kc;Ic=q[Xa+4>>2];q[Jc>>2]=q[Xa>>2];q[Jc+4>>2]=Ic;Ic=q[Xa+28>>2];q[Jc+24>>2]=q[Xa+24>>2];q[Jc+28>>2]=Ic;Ic=q[Xa+20>>2];q[Jc+16>>2]=q[Xa+16>>2];q[Jc+20>>2]=Ic;Ic=q[Xa+36>>2];q[Jc+32>>2]=q[Xa+32>>2];q[Jc+36>>2]=Ic;Ic=q[Xa+44>>2];q[Jc+40>>2]=q[Xa+40>>2];q[Jc+44>>2]=Ic;Ic=q[Xa+52>>2];q[Jc+48>>2]=q[Xa+48>>2];q[Jc+52>>2]=Ic;Ic=q[Xa+60>>2];q[Jc+56>>2]=q[Xa+56>>2];q[Jc+60>>2]=Ic;va(Jc- -64|0,Xa- -64|0,180);return Mc+q[a+12>>2]|0}function rf(a){a=a|0;var Xa=0;q[a>>2]=4032;Xa=q[a+204>>2];if(Xa){if(r[a+208|0]){if(Xa){q[6658]=q[6658]+1;n[q[5256]](Xa);}}q[a+204>>2]=0;}q[a+204>>2]=0;q[a+196>>2]=0;q[a+200>>2]=0;o[a+208|0]=1;Xa=q[a+176>>2];if(Xa){if(r[a+180|0]){if(Xa){q[6658]=q[6658]+1;n[q[5256]](Xa);}}q[a+176>>2]=0;}q[a+176>>2]=0;q[a+168>>2]=0;q[a+172>>2]=0;o[a+180|0]=1;Xa=q[a+156>>2];if(Xa){if(r[a+160|0]){if(Xa){q[6658]=q[6658]+1;n[q[5256]](Xa);}}q[a+156>>2]=0;}q[a+156>>2]=0;q[a+148>>2]=0;q[a+152>>2]=0;o[a+160|0]=1;Xa=q[a+136>>2];if(Xa){if(r[a+140|0]){if(Xa){q[6658]=q[6658]+1;n[q[5256]](Xa);}}q[a+136>>2]=0;}q[a+136>>2]=0;q[a+128>>2]=0;q[a+132>>2]=0;o[a+140|0]=1;Xa=q[a+116>>2];if(Xa){if(r[a+120|0]){if(Xa){q[6658]=q[6658]+1;n[q[5256]](Xa);}}q[a+116>>2]=0;}q[a+116>>2]=0;q[a+108>>2]=0;q[a+112>>2]=0;o[a+120|0]=1;Xa=q[a+96>>2];if(Xa){if(r[a+100|0]){if(Xa){q[6658]=q[6658]+1;n[q[5256]](Xa);}}q[a+96>>2]=0;}q[a+96>>2]=0;q[a+88>>2]=0;q[a+92>>2]=0;o[a+100|0]=1;Xa=q[a+76>>2];if(Xa){if(r[a+80|0]){if(Xa){q[6658]=q[6658]+1;n[q[5256]](Xa);}}q[a+76>>2]=0;}q[a+76>>2]=0;q[a+68>>2]=0;q[a+72>>2]=0;o[a+80|0]=1;Xa=q[a+56>>2];if(Xa){if(r[a+60|0]){if(Xa){q[6658]=q[6658]+1;n[q[5256]](Xa);}}q[a+56>>2]=0;}q[a+56>>2]=0;q[a+48>>2]=0;q[a+52>>2]=0;o[a+60|0]=1;Xa=q[a+36>>2];if(Xa){if(r[a+40|0]){if(Xa){q[6658]=q[6658]+1;n[q[5256]](Xa);}}q[a+36>>2]=0;}q[a+36>>2]=0;q[a+28>>2]=0;q[a+32>>2]=0;o[a+40|0]=1;Xa=q[a+16>>2];if(Xa){if(r[a+20|0]){if(Xa){q[6658]=q[6658]+1;n[q[5256]](Xa);}}q[a+16>>2]=0;}q[a+16>>2]=0;q[a+8>>2]=0;q[a+12>>2]=0;o[a+20|0]=1;return a|0}function sf(a){q[a>>2]=4032;o[a+20|0]=1;q[a+16>>2]=0;o[a+40|0]=1;q[a+8>>2]=0;q[a+12>>2]=0;q[a+36>>2]=0;o[a+60|0]=1;q[a+28>>2]=0;q[a+32>>2]=0;q[a+56>>2]=0;o[a+80|0]=1;q[a+48>>2]=0;q[a+52>>2]=0;q[a+76>>2]=0;o[a+100|0]=1;q[a+68>>2]=0;q[a+72>>2]=0;q[a+96>>2]=0;o[a+120|0]=1;q[a+88>>2]=0;q[a+92>>2]=0;q[a+116>>2]=0;o[a+140|0]=1;q[a+108>>2]=0;q[a+112>>2]=0;q[a+136>>2]=0;q[a+128>>2]=0;q[a+132>>2]=0;o[a+160|0]=1;q[a+156>>2]=0;q[a+148>>2]=0;q[a+152>>2]=0;o[a+180|0]=1;q[a+176>>2]=0;q[a+168>>2]=0;q[a+172>>2]=0;o[a+208|0]=1;q[a+232>>2]=0;q[a+204>>2]=0;q[a+196>>2]=0;q[a+200>>2]=0;q[a+224>>2]=0;q[a+212>>2]=181;q[a+216>>2]=182;q[a+220>>2]=183;}function tf(a,Qc,Rc,Sc){var Tc=x(0),Uc=x(0),Vc=x(0),Wc=x(0),Xc=x(0),Yc=x(0),Zc=x(0),_c=x(0),$c=x(0),ad=x(0),bd=x(0),cd=x(0),dd=x(0),ed=x(0),fd=x(0);Ad(a,4,Qc);q[a>>2]=3916;Qc=q[Rc+12>>2];q[a+560>>2]=q[Rc+8>>2];q[a+564>>2]=Qc;Qc=q[Rc+4>>2];q[a+552>>2]=q[Rc>>2];q[a+556>>2]=Qc;Qc=q[Rc+28>>2];q[a+576>>2]=q[Rc+24>>2];q[a+580>>2]=Qc;Qc=q[Rc+20>>2];q[a+568>>2]=q[Rc+16>>2];q[a+572>>2]=Qc;Qc=q[Rc+44>>2];q[a+592>>2]=q[Rc+40>>2];q[a+596>>2]=Qc;Qc=q[Rc+36>>2];q[a+584>>2]=q[Rc+32>>2];q[a+588>>2]=Qc;Qc=q[Rc+60>>2];q[a+608>>2]=q[Rc+56>>2];q[a+612>>2]=Qc;Qc=q[Rc+52>>2];q[a+600>>2]=q[Rc+48>>2];q[a+604>>2]=Qc;Qc=q[Rc+12>>2];q[a+624>>2]=q[Rc+8>>2];q[a+628>>2]=Qc;Qc=q[Rc+4>>2];q[a+616>>2]=q[Rc>>2];q[a+620>>2]=Qc;Qc=q[Rc+20>>2];q[a+632>>2]=q[Rc+16>>2];q[a+636>>2]=Qc;Qc=q[Rc+28>>2];q[a+640>>2]=q[Rc+24>>2];q[a+644>>2]=Qc;Qc=q[Rc+36>>2];q[a+648>>2]=q[Rc+32>>2];q[a+652>>2]=Qc;Qc=q[Rc+44>>2];q[a+656>>2]=q[Rc+40>>2];q[a+660>>2]=Qc;Qc=q[Rc+52>>2];q[a+664>>2]=q[Rc+48>>2];q[a+668>>2]=Qc;Qc=q[Rc+60>>2];q[a+672>>2]=q[Rc+56>>2];q[a+676>>2]=Qc;q[a+688>>2]=0;q[a+692>>2]=-1082130432;q[a+696>>2]=1063675494;q[a+700>>2]=1050253722;q[a+704>>2]=1065353216;q[a+708>>2]=0;q[a+712>>2]=0;o[a+716|0]=0;o[a+740|0]=Sc;q[a+736>>2]=16777216;q[a+764>>2]=0;q[a+756>>2]=0;q[a+760>>2]=0;q[a+748>>2]=0;q[a+752>>2]=0;Qc=q[a+28>>2];Wc=u[Qc+52>>2];Xc=u[Qc+12>>2];Yc=u[Qc+4>>2];Zc=u[Qc+8>>2];_c=u[Qc+56>>2];$c=u[Qc+28>>2];ad=u[Qc+20>>2];bd=u[Qc+24>>2];cd=u[Qc+60>>2];Tc=u[a+608>>2];dd=u[Qc+44>>2];Uc=u[a+600>>2];ed=u[Qc+36>>2];Vc=u[a+604>>2];fd=u[Qc+40>>2];u[a+732>>2]=Sc?x(-1):x(1);q[a+676>>2]=0;u[a+672>>2]=cd+x(x(x(Uc*ed)+x(Vc*fd))+x(Tc*dd));u[a+668>>2]=_c+x(x(x(Uc*ad)+x(Vc*bd))+x(Tc*$c));u[a+664>>2]=Wc+x(x(x(Uc*Yc)+x(Vc*Zc))+x(Tc*Xc));}function uf(a,Qc,Rc,Sc,gd,hd){Oa(a,4,Qc,Rc);q[a>>2]=3916;Qc=q[Sc+12>>2];q[a+560>>2]=q[Sc+8>>2];q[a+564>>2]=Qc;Qc=q[Sc+4>>2];q[a+552>>2]=q[Sc>>2];q[a+556>>2]=Qc;Qc=q[Sc+28>>2];q[a+576>>2]=q[Sc+24>>2];q[a+580>>2]=Qc;Qc=q[Sc+20>>2];q[a+568>>2]=q[Sc+16>>2];q[a+572>>2]=Qc;Qc=q[Sc+44>>2];q[a+592>>2]=q[Sc+40>>2];q[a+596>>2]=Qc;Qc=q[Sc+36>>2];q[a+584>>2]=q[Sc+32>>2];q[a+588>>2]=Qc;Qc=q[Sc+60>>2];q[a+608>>2]=q[Sc+56>>2];q[a+612>>2]=Qc;Qc=q[Sc+52>>2];q[a+600>>2]=q[Sc+48>>2];q[a+604>>2]=Qc;Qc=q[gd+12>>2];q[a+624>>2]=q[gd+8>>2];q[a+628>>2]=Qc;Qc=q[gd+4>>2];q[a+616>>2]=q[gd>>2];q[a+620>>2]=Qc;Qc=q[gd+20>>2];q[a+632>>2]=q[gd+16>>2];q[a+636>>2]=Qc;Qc=q[gd+28>>2];q[a+640>>2]=q[gd+24>>2];q[a+644>>2]=Qc;Qc=q[gd+36>>2];q[a+648>>2]=q[gd+32>>2];q[a+652>>2]=Qc;Qc=q[gd+44>>2];q[a+656>>2]=q[gd+40>>2];q[a+660>>2]=Qc;Qc=q[gd+52>>2];q[a+664>>2]=q[gd+48>>2];q[a+668>>2]=Qc;Qc=q[gd+60>>2];q[a+672>>2]=q[gd+56>>2];q[a+676>>2]=Qc;q[a+688>>2]=0;q[a+692>>2]=-1082130432;q[a+696>>2]=1063675494;q[a+700>>2]=1050253722;q[a+704>>2]=1065353216;q[a+708>>2]=0;q[a+712>>2]=0;o[a+716|0]=0;o[a+740|0]=hd;q[a+736>>2]=16777216;q[a+764>>2]=0;q[a+756>>2]=0;q[a+760>>2]=0;q[a+748>>2]=0;q[a+752>>2]=0;u[a+732>>2]=hd?x(-1):x(1);}function vf(a,Qc,Rc,Sc,gd,hd,id,jd){var kd=x(0),ld=x(0),md=x(0),nd=x(0),od=x(0),pd=x(0),qd=x(0),rd=x(0),sd=x(0),td=x(0),ud=x(0),vd=x(0),wd=x(0);Oa(a,4,Qc,Rc);q[a+708>>2]=0;q[a+712>>2]=0;q[a+704>>2]=1065353216;q[a+696>>2]=1063675494;q[a+700>>2]=1050253722;q[a+688>>2]=0;q[a+692>>2]=-1082130432;q[a>>2]=3916;o[a+716|0]=0;q[a+748>>2]=0;q[a+752>>2]=0;o[a+740|0]=jd;q[a+736>>2]=16777216;q[a+756>>2]=0;q[a+760>>2]=0;q[a+764>>2]=0;Rc=q[Sc+12>>2];q[a+608>>2]=q[Sc+8>>2];q[a+612>>2]=Rc;Rc=q[Sc+4>>2];q[a+600>>2]=q[Sc>>2];q[a+604>>2]=Rc;nd=u[Qc+4>>2];kd=u[hd>>2];od=u[Qc+20>>2];ld=u[hd+4>>2];pd=u[Qc+36>>2];md=u[hd+8>>2];qd=x(x(x(nd*kd)+x(od*ld))+x(pd*md));a:{if(!!(qd>=x(.9999998807907104))){Sc=q[Qc+40>>2];Rc=q[Qc+8>>2];pd=x(-u[Qc+44>>2]);od=x(-u[Qc+28>>2]);qd=x(-u[Qc+12>>2]);Qc=q[Qc+24>>2];break a}if(!!(qd<=x(-.9999998807907104))){Sc=q[Qc+40>>2];Rc=q[Qc+8>>2];pd=u[Qc+44>>2];od=u[Qc+28>>2];qd=u[Qc+12>>2];Qc=q[Qc+24>>2];break a}sd=x(x(pd*ld)-x(od*md));td=x(x(nd*md)-x(pd*kd));pd=x(x(ld*sd)-x(kd*td));rd=kd;kd=x(x(od*kd)-x(nd*ld));od=x(x(rd*kd)-x(md*sd));qd=x(x(md*td)-x(ld*kd));Sc=(j(kd),e(0));Rc=(j(sd),e(0));Qc=(j(td),e(0));}q[a+556>>2]=Rc;u[a+552>>2]=qd;Rc=q[hd>>2];q[a+572>>2]=Qc;u[a+568>>2]=od;q[a+564>>2]=0;q[a+560>>2]=Rc;Qc=q[hd+4>>2];q[a+588>>2]=Sc;u[a+584>>2]=pd;q[a+580>>2]=0;q[a+576>>2]=Qc;Qc=q[hd+8>>2];q[a+596>>2]=0;q[a+592>>2]=Qc;sd=u[id+8>>2];nd=u[hd+8>>2];kd=u[hd+4>>2];td=u[id+4>>2];vd=u[id>>2];md=u[hd>>2];ld=x(x(sd*nd)+x(x(kd*td)+x(vd*md)));b:{if(!!(ld<x(-.9999998807907104))){if(!!(x(y(nd))>x(.7071067690849304))){rd=kd;kd=x(x(1)/x(E(x(x(kd*kd)+x(nd*nd)))));ld=x(rd*kd);md=x(kd*x(-nd));nd=x(0);kd=x(0);break b}ld=x(x(1)/x(E(x(x(kd*kd)+x(md*md)))));md=x(md*ld);nd=x(ld*x(-kd));ld=x(0);kd=x(0);break b}ld=x(ld+x(1));ud=x(E(x(ld+ld)));rd=x(x(1)/ud);ld=x(x(x(td*md)-x(kd*vd))*rd);md=x(x(x(nd*vd)-x(sd*md))*rd);nd=x(x(x(kd*sd)-x(nd*td))*rd);kd=x(ud*x(.5));}Qc=q[gd+4>>2];q[a+664>>2]=q[gd>>2];q[a+668>>2]=Qc;Qc=q[gd+12>>2];q[a+672>>2]=q[gd+8>>2];q[a+676>>2]=Qc;rd=x(x(x(pd*kd)+x(od*nd))-x(qd*md));ud=x(x(x(qd*kd)+x(pd*md))-x(od*ld));wd=x(x(x(qd*x(-nd))-x(od*md))-x(pd*ld));pd=x(x(x(od*kd)+x(qd*ld))-x(pd*nd));od=x(x(md*rd)+x(x(x(kd*ud)-x(nd*wd))-x(ld*pd)));u[a+616>>2]=od;qd=x(x(nd*pd)+x(x(x(kd*rd)-x(ld*wd))-x(md*ud)));kd=x(x(ld*ud)+x(x(x(kd*pd)-x(md*wd))-x(nd*rd)));u[a+620>>2]=x(td*qd)-x(sd*kd);Qc=q[id>>2];u[a+632>>2]=kd;u[a+636>>2]=x(sd*od)-x(vd*qd);q[a+628>>2]=0;q[a+624>>2]=Qc;Qc=q[id+4>>2];u[a+652>>2]=x(vd*kd)-x(td*od);u[a+648>>2]=qd;q[a+644>>2]=0;q[a+640>>2]=Qc;Qc=q[id+8>>2];u[a+732>>2]=jd?x(-1):x(1);q[a+660>>2]=0;q[a+656>>2]=Qc;}function wf(a,Qc){var Rc=x(0),Sc=x(0),gd=x(0),hd=x(0),id=x(0),jd=x(0),xd=x(0),yd=x(0),zd=x(0),Ad=x(0),Bd=x(0),Cd=x(0),Dd=x(0),Ed=x(0),Fd=0,Gd=x(0),Hd=x(0);Fd=q[Qc+12>>2];q[a+564>>2]=q[Qc+8>>2];q[a+568>>2]=Fd;Fd=q[Qc+4>>2];q[a+556>>2]=q[Qc>>2];q[a+560>>2]=Fd;yd=x(-0);Ad=x(1);Sc=u[a+564>>2];Rc=u[a+568>>2];hd=x(Rc*x(0));id=u[a+556>>2];jd=x(id*x(0));gd=x(x(Sc+hd)-jd);xd=u[a+560>>2];zd=x(x(hd+jd)-xd);hd=x(xd*x(0));jd=x(Sc*x(0));Ed=x(x(x(-id)-hd)-jd);hd=x(x(Rc+hd)-jd);jd=x(x(id*gd)+x(x(x(Rc*zd)-x(Sc*Ed))-x(xd*hd)));Cd=x(x(Sc*hd)+x(x(x(Rc*gd)-x(xd*Ed))-x(id*zd)));gd=x(x(xd*zd)+x(x(x(Rc*hd)-x(id*Ed))-x(Sc*gd)));zd=x(x(jd*x(0))+x(x(Cd*x(0))+gd));if(!(zd<x(-.9999998807907104))){yd=x(gd*x(0));gd=x(zd+x(1));zd=x(E(x(gd+gd)));gd=x(x(1)/zd);Bd=x(x(Cd-yd)*gd);Ad=x(x(yd-jd)*gd);Dd=x(zd*x(.5));yd=x(x(x(jd*x(0))-x(Cd*x(0)))*gd);}gd=x(x(1)/x(E(x(x(x(x(yd*yd)+x(Ad*Ad))+x(Bd*Bd))+x(Dd*Dd)))));Bd=x(Bd*gd);Ad=x(Ad*gd);Dd=x(Dd*gd);yd=x(yd*gd);gd=x(x(Sc*Bd)+x(x(xd*Ad)+x(x(Rc*Dd)+x(id*yd))));zd=x(x(id*Ad)+x(x(x(Sc*Dd)-x(Rc*Bd))-x(xd*yd)));Ed=x(x(xd*Bd)+x(x(x(id*Dd)-x(Rc*yd))-x(Sc*Ad)));Gd=x(x(Sc*yd)+x(x(x(xd*Dd)-x(Rc*Ad))-x(id*Bd)));xd=x(x(1)/x(E(x(x(gd*gd)+x(x(zd*zd)+x(x(Ed*Ed)+x(Gd*Gd)))))));id=u[a+444>>2];a:{if(!(id>=x(.05000000074505806))){break a}Rc=u[a+448>>2];if(!(Rc>=x(.05000000074505806))){break a}Sc=Sa(x(A(x(B(Dd,x(-1))),x(1))));Sc=x(Sc+Sc);b:{if(!(Sc>x(1.1920928955078125e-7))){break b}hd=x(x(1)/x(E(x(x(Bd*Bd)+x(x(yd*yd)+x(Ad*Ad))))));jd=x(Bd*hd);Cd=x(yd*hd);hd=x(Ad*hd);if(!(x(y(hd))>x(1.1920928955078125e-7))){break b}Hd=x(x(jd*jd)/x(hd*hd));id=x(E(x(x(Hd+x(1))/x(x(Hd/x(id*id))+x(x(1)/x(Rc*Rc))))));}if(!(x(y(Sc))>x(1.1920928955078125e-7))){break a}c:{if(Sc>id){Sc=id;break c}Rc=x(-id);if(!(Sc<Rc)){break c}Sc=Rc;}Rc=x(Sc*x(.5));Sc=x(ga(Rc)/x(E(x(x(x(Cd*Cd)+x(hd*hd))+x(jd*jd)))));Bd=x(jd*Sc);Ad=x(hd*Sc);yd=x(Cd*Sc);Dd=fa(Rc);}id=x(gd*xd);Sc=x(zd*xd);Cd=x(Gd*xd);gd=x(Ed*xd);zd=u[a+452>>2];d:{if(!(zd>=x(.05000000074505806))){break d}xd=gd;jd=Cd;hd=Sc;Rc=Sa(x(A(x(B(id,x(-1))),x(1))));Rc=x(Rc+Rc);if(!!(Rc>x(3.1415927410125732))){hd=x(-Sc);jd=x(-Cd);xd=x(-gd);Rc=Sa(x(A(x(B(x(-id),x(-1))),x(1))));Rc=x(Rc+Rc);}if(!!(Rc>x(1.1920928955078125e-7))){Ed=x(x(1)/x(E(x(x(x(xd*xd)+x(jd*jd))+x(hd*hd)))));hd=x(hd*Ed);xd=x(xd*Ed);jd=x(jd*Ed);}if(!(x(y(Rc))>x(1.1920928955078125e-7))){break d}e:{if(Rc>zd){Rc=zd;break e}Sc=x(-zd);if(!(Rc<Sc)){break e}Rc=Sc;}id=x(Rc*x(.5));Rc=x(ga(id)/x(E(x(x(hd*hd)+x(x(jd*jd)+x(xd*xd))))));Sc=x(hd*Rc);Cd=x(jd*Rc);gd=x(xd*Rc);id=fa(id);}u[a+568>>2]=x(x(x(Dd*id)-x(yd*gd))-x(Ad*Cd))-x(Bd*Sc);u[a+564>>2]=x(x(yd*Cd)+x(x(Dd*Sc)+x(Bd*id)))-x(Ad*gd);u[a+560>>2]=x(x(Bd*gd)+x(x(Dd*Cd)+x(Ad*id)))-x(yd*Sc);u[a+556>>2]=x(x(Ad*Sc)+x(x(Dd*gd)+x(yd*id)))-x(Bd*Cd);}function xf(a,Qc,Id,Jd){var Kd=x(0),Ld=x(0),Md=x(0),Nd=x(0),Od=x(0),Pd=x(0),Qd=x(0),Rd=x(0);Ld=fa(Id);Kd=u[Qc+444>>2];Id=ga(Id);a:{if(!(x(y(Ld))>x(1.1920928955078125e-7))){Md=x(Id*Id);Od=x(Ld*Ld);break a}Md=x(Id*Id);Od=x(Ld*Ld);Pd=x(Md/Od);Nd=u[Qc+448>>2];Kd=x(E(x(x(Pd+x(1))/x(x(x(1)/x(Nd*Nd))+x(Pd/x(Kd*Kd))))));}q[a+12>>2]=0;Kd=x(Kd*x(.5));Md=x(ga(Kd)/x(E(x(Md+x(Od+x(0))))));Od=x(Md*x(0));Kd=fa(Kd);Nd=x(Kd*x(0));Id=x(Md*x(-Id));Qd=x(Od*x(0));Pd=x(x(Nd+x(Id*Jd))-Qd);Ld=x(Ld*Md);Nd=x(x(Nd+Qd)-x(Ld*Jd));Qd=x(Ld*x(0));Rd=x(Id*x(0));Md=x(x(x(x(Md*x(-0))*Jd)-Qd)-Rd);Jd=x(x(x(Kd*Jd)+Qd)-Rd);u[a+8>>2]=x(Od*Pd)+x(x(x(Kd*Nd)-x(Id*Md))-x(Ld*Jd));u[a+4>>2]=x(Id*Jd)+x(x(x(Kd*Pd)-x(Ld*Md))-x(Od*Nd));u[a>>2]=x(Ld*Nd)+x(x(x(Kd*Jd)-x(Od*Md))-x(Id*Pd));}function yf(a,Qc){var Id=x(0);q[a+20>>2]=0;q[a+24>>2]=0;o[a+28|0]=0;Id=u[a+4>>2];a:{if(!(Id>=x(0))){break a}Qc=ea(x(Qc-u[a>>2]),x(6.2831854820251465));b:{if(!!(Qc<x(-3.1415927410125732))){Qc=x(Qc+x(6.2831854820251465));break b}if(!(Qc>x(3.1415927410125732))){break b}Qc=x(Qc+x(-6.2831854820251465));}if(!!(Qc<x(-Id))){q[a+24>>2]=1065353216;o[a+28|0]=1;u[a+20>>2]=-x(Id+Qc);return}if(!(Qc>Id)){break a}q[a+24>>2]=-1082130432;o[a+28|0]=1;u[a+20>>2]=Id-Qc;}}function zf(a){return 84}function Af(a,Qc,Jd,Sd,Td,Ud,Vd,Wd,Xd,Yd,Zd,_d,$d){var ae=x(0),be=x(0),ce=x(0),de=0,ee=x(0),fe=x(0),ge=0,he=x(0),ie=x(0),je=x(0),ke=x(0),le=x(0);Yd=w(q[Xd+24>>2],Yd);de=q[Qc+84>>2]+ -3|0;a:{if(de>>>0>1){de=0;break a}b:{if(!(de-1)){c:{if(_d){be=u[Zd>>2];ce=u[Zd+4>>2];ae=x(x(u[Vd>>2]*be)+x(u[Vd+4>>2]*ce));ee=u[Zd+8>>2];he=x(u[Vd+8>>2]*ee);de=Wd;break c}be=u[Zd>>2];ce=u[Zd+4>>2];ae=x(x(u[Td>>2]*be)+x(u[Td+4>>2]*ce));ee=u[Zd+8>>2];he=x(u[Td+8>>2]*ee);de=Ud;}ie=u[de+8>>2];je=u[de>>2];ke=u[de+4>>2];qb(a,Jd,Sd,Xd,Yd,Zd,_d,$d);de=q[Xd+28>>2]+(Yd<<2)|0;le=x((_d?-1:1)|0);fe=x(x(x(u[Xd>>2]*u[Qc+12>>2])*u[Qc+72>>2])*le);u[de>>2]=fe;ae=x(x(ae+he)-x(x(x(be*je)+x(ce*ke))+x(ee*ie)));be=x(fe-x(ae*u[Qc+12>>2]));d:{if(_d){if(!(be>x(0))){break d}be=x(ae*x(-u[Qc+8>>2]));if(!(be>fe)){break d}u[de>>2]=be;break d}if(!(be<x(0))){break d}be=x(ae*x(-u[Qc+8>>2]));if(!(be<fe)){break d}u[de>>2]=be;}de=Yd<<2;u[de+q[Xd+36>>2]>>2]=_d?x(0):x(-3.4028234663852886e+38);u[de+q[Xd+40>>2]>>2]=_d?x(3.4028234663852886e+38):x(0);q[de+q[Xd+32>>2]>>2]=q[Qc+16>>2];Yd=q[Xd+24>>2]+Yd|0;qb(a,Jd,Sd,Xd,Yd,Zd,_d,$d);de=q[Xd+28>>2]+(Yd<<2)|0;be=x(x(x(u[Xd>>2]*u[Qc+12>>2])*u[Qc+76>>2])*le);u[de>>2]=be;ce=x(be-x(ae*u[Qc+12>>2]));ge=Qc+16|0;e:{if(_d){if(!(ce<x(0))){break e}ae=x(ae*x(-u[Qc+8>>2]));if(!(ae<be)){break e}u[de>>2]=ae;break e}if(!(ce>x(0))){break e}ae=x(ae*x(-u[Qc+8>>2]));if(!(ae>be)){break e}u[de>>2]=ae;}de=Yd<<2;u[de+q[Xd+36>>2]>>2]=_d?x(-3.4028234663852886e+38):x(0);u[de+q[Xd+40>>2]>>2]=_d?x(0):x(3.4028234663852886e+38);de=2;break b}qb(a,Jd,Sd,Xd,Yd,Zd,_d,$d);de=Yd<<2;u[de+q[Xd+28>>2]>>2]=x(x(u[Xd>>2]*u[Qc+12>>2])*u[Qc+72>>2])*x((_d?-1:1)|0);q[de+q[Xd+36>>2]>>2]=-8388609;q[de+q[Xd+40>>2]>>2]=2139095039;ge=Qc+16|0;de=1;}q[q[Xd+32>>2]+(Yd<<2)>>2]=q[ge>>2];Yd=q[Xd+24>>2]+Yd|0;}f:{if(!r[Qc+28|0]){break f}if(!r[Qc+40|0]){qb(a,Jd,Sd,Xd,Yd,Zd,_d,$d);ae=u[Qc+32>>2];ae=jb(u[Qc+80>>2],u[Qc>>2],u[Qc+4>>2],_d?ae:x(-ae),x(u[Xd>>2]*u[Qc+20>>2]));ge=Yd<<2;u[ge+q[Xd+28>>2]>>2]=ae*u[Qc+32>>2];u[ge+q[Xd+36>>2]>>2]=-u[Qc+36>>2];q[ge+q[Xd+40>>2]>>2]=q[Qc+36>>2];q[ge+q[Xd+32>>2]>>2]=q[Qc+24>>2];de=de+1|0;Yd=q[Xd+24>>2]+Yd|0;if(!r[Qc+28|0]|!r[Qc+40|0]){break f}}ae=u[Qc+44>>2];be=x(u[Qc+80>>2]-ae);g:{if(!_d){break g}ge=be>x(3.1415927410125732);ae=ge?x(ae+x(6.2831854820251465)):ae;be=ge?x(be+x(-6.2831854820251465)):be;if(!(be<x(-3.1415927410125732))){break g}ae=x(ae+x(-6.2831854820251465));be=x(be+x(6.2831854820251465));}qb(a,Jd,Sd,Xd,Yd,Zd,_d,$d);ce=x(0);ee=u[Qc+32>>2];fe=be<x(0)?x(-ee):ee;if(be!=x(0)){he=x(-fe);ie=u[Qc+80>>2];ce=u[Qc>>2];ee=u[Qc+4>>2];h:{if(!!(ce>ee)){ee=be<x(0)?ae:x(3.4028234663852886e+38);ae=be>x(0)?ae:x(-3.4028234663852886e+38);break h}ee=be<x(0)?ae<ee?ae:ee:ee;ae=be>x(0)?ae>ce?ae:ce:ce;}ce=jb(ie,ae,ee,he,x(u[Xd>>2]*u[Qc+20>>2]));}ge=Yd<<2;u[ge+q[Xd+28>>2]>>2]=x(fe*ce)*x((_d?-1:1)|0);u[ge+q[Xd+36>>2]>>2]=-u[Qc+36>>2];q[ge+q[Xd+40>>2]>>2]=q[Qc+36>>2];q[ge+q[Xd+32>>2]>>2]=q[Qc+24>>2];de=de+1|0;Yd=q[Xd+24>>2]+Yd|0;}if(r[Qc+48|0]){ce=u[Qc+68>>2];fe=u[Qc+80>>2];qb(a,Jd,Sd,Xd,Yd,Zd,_d,$d);ae=u[Qc+52>>2];ee=u[Qc+60>>2];be=x(x(1)/u[Xd>>2]);ke=x(fe-ce);i:{if(_d){ce=u[Zd>>2];ie=u[Zd+4>>2];je=x(x(u[Vd>>2]*ce)+x(u[Vd+4>>2]*ie));fe=u[Zd+8>>2];he=x(u[Vd+8>>2]*fe);break i}Wd=Ud;ce=u[Zd>>2];ie=u[Zd+4>>2];je=x(x(u[Td>>2]*ce)+x(u[Td+4>>2]*ie));fe=u[Zd+8>>2];he=x(u[Td+8>>2]*fe);}fe=x(x(je+he)-x(x(x(ce*u[Wd>>2])+x(ie*u[Wd+4>>2]))+x(fe*u[Wd+8>>2])));ce=x(x(1)/u[q[a+32>>2]+404>>2]);he=x(x(1)/u[q[a+28>>2]+404>>2]);ce=he>ce?ce:he;if(!(!r[Qc+56|0]|x(be*x(E(x(ae/ce))))>x(.25)^1)){ae=x(x(x(x(x(1)/be)/be)*x(.0625))*ce);}a=Yd<<2;he=x(be*x(ke*ae));ae=x(fe*x(-(x(ee*be)>ce?r[Qc+64|0]?x(ce/be):ee:ee)));ce=x((_d?-1:1)|0);ae=x(be*x(ae*ce));be=x(he+ae);u[a+q[Xd+28>>2]>>2]=fe+x(be*ce);Qc=be<ae;ce=Qc?ae:be;ae=Qc?be:ae;j:{if(!_d){u[a+q[Xd+36>>2]>>2]=A(ae,x(0));break j}u[a+q[Xd+36>>2]>>2]=A(x(-ce),x(0));ce=x(-ae);}a=Yd<<2;u[a+q[Xd+40>>2]>>2]=B(ce,x(0));q[a+q[Xd+32>>2]>>2]=0;de=de+1|0;}return de}function Bf(a,Qc,Jd){var Sd=x(0),Td=x(0),Ud=x(0),Vd=x(0),Wd=x(0),Xd=x(0),Yd=x(0),Zd=x(0),_d=x(0),$d=x(0),me=x(0),ne=x(0),oe=x(0),pe=x(0),qe=x(0),re=x(0),se=x(0),te=x(0),ue=x(0),ve=x(0),we=x(0),xe=x(0),ye=x(0),ze=x(0);ye=u[Qc+52>>2];ze=u[Qc+56>>2];$d=u[a+96>>2];me=u[a+100>>2];ne=u[a+104>>2];Sd=u[Qc+20>>2];Td=u[Qc+24>>2];oe=u[a- -64>>2];pe=u[a+80>>2];qe=u[a+52>>2];re=u[a+68>>2];se=u[a+84>>2];te=u[a+56>>2];Ud=u[Qc+36>>2];ue=u[a+72>>2];Vd=u[Qc+40>>2];ve=u[a+88>>2];xe=u[Qc+48>>2];Wd=u[Qc+8>>2];Xd=u[Qc>>2];Yd=u[Qc+4>>2];Zd=u[Qc+16>>2];we=u[a+48>>2];_d=u[Qc+32>>2];q[a+1296>>2]=0;q[a+1280>>2]=0;q[a+1264>>2]=0;q[a+1248>>2]=0;u[a+1276>>2]=x(x(te*_d)+x(ue*Ud))+x(ve*Vd);u[a+1272>>2]=x(x(qe*_d)+x(re*Ud))+x(se*Vd);u[a+1268>>2]=x(x(we*_d)+x(oe*Ud))+x(pe*Vd);u[a+1260>>2]=x(x(te*Zd)+x(ue*Sd))+x(ve*Td);u[a+1256>>2]=x(x(qe*Zd)+x(re*Sd))+x(se*Td);u[a+1252>>2]=x(x(we*Zd)+x(oe*Sd))+x(pe*Td);u[a+1244>>2]=x(x(Xd*te)+x(Yd*ue))+x(Wd*ve);u[a+1240>>2]=x(x(Xd*qe)+x(Yd*re))+x(Wd*se);u[a+1236>>2]=x(x(we*Xd)+x(oe*Yd))+x(pe*Wd);u[a+1292>>2]=ze+x(x(x(_d*$d)+x(Ud*me))+x(Vd*ne));u[a+1288>>2]=ye+x(x(x(Zd*$d)+x(Sd*me))+x(Td*ne));u[a+1284>>2]=xe+x(x(x(Xd*$d)+x(Yd*me))+x(Wd*ne));ye=u[Jd+52>>2];ze=u[Jd+56>>2];$d=u[a+160>>2];me=u[a+164>>2];ne=u[a+168>>2];Sd=u[Jd+20>>2];Td=u[Jd+24>>2];oe=u[a+128>>2];pe=u[a+144>>2];qe=u[a+116>>2];re=u[a+132>>2];se=u[a+148>>2];te=u[a+120>>2];ue=u[a+136>>2];Ud=u[Jd+36>>2];ve=u[a+152>>2];Vd=u[Jd+40>>2];xe=u[Jd+48>>2];Wd=u[Jd+8>>2];Xd=u[Jd>>2];Yd=u[Jd+4>>2];Zd=u[Jd+16>>2];we=u[a+112>>2];_d=u[Jd+32>>2];q[a+1360>>2]=0;q[a+1344>>2]=0;q[a+1328>>2]=0;q[a+1312>>2]=0;u[a+1340>>2]=x(x(te*_d)+x(ue*Ud))+x(ve*Vd);u[a+1336>>2]=x(x(qe*_d)+x(re*Ud))+x(se*Vd);u[a+1332>>2]=x(x(we*_d)+x(oe*Ud))+x(pe*Vd);u[a+1324>>2]=x(x(te*Zd)+x(ue*Sd))+x(ve*Td);u[a+1320>>2]=x(x(qe*Zd)+x(re*Sd))+x(se*Td);u[a+1316>>2]=x(x(we*Zd)+x(oe*Sd))+x(pe*Td);u[a+1308>>2]=x(x(Xd*te)+x(Yd*ue))+x(Wd*ve);u[a+1304>>2]=x(x(Xd*qe)+x(Yd*re))+x(Wd*se);u[a+1300>>2]=x(x(we*Xd)+x(oe*Yd))+x(pe*Wd);u[a+1356>>2]=ze+x(x(x(_d*$d)+x(Ud*me))+x(Vd*ne));u[a+1352>>2]=ye+x(x(x(Zd*$d)+x(Sd*me))+x(Td*ne));u[a+1348>>2]=xe+x(x(x(Xd*$d)+x(Yd*me))+x(Wd*ne));mm(a);nm(a);Td=u[q[a+28>>2]+404>>2];Sd=u[q[a+32>>2]+404>>2];o[a+1452|0]=Td<x(1.1920928955078125e-7)|Sd<x(1.1920928955078125e-7);xe=Sd;Sd=x(Td+Sd);Sd=Sd>x(0)?x(xe/Sd):x(.5);u[a+1444>>2]=Sd;u[a+1448>>2]=x(1)-Sd;}function Cf(a,Qc,Jd,Ae,Be,Ce,De,Ee,Fe){var Ge=0,He=0,Ie=0,Je=0,Ke=0,Le=0,Me=0,Ne=0,Oe=0,Pe=0,Qe=0,Re=0,Se=0,Te=0,Ue=0,Ve=0;Ge=P-80|0;P=Ge;q[Ge+32>>2]=1133903872;q[Ge+24>>2]=0;q[Ge+28>>2]=1036831949;q[Ge+72>>2]=0;q[Ge+76>>2]=0;q[Ge+52>>2]=0;q[Ge+56>>2]=0;q[Ge+44>>2]=0;q[Ge+48>>2]=1045220557;q[Ge+16>>2]=1065353216;q[Ge+20>>2]=-1082130432;q[Ge+36>>2]=1065353216;q[Ge+40>>2]=1056964608;q[Ge+64>>2]=0;o[Ge+60|0]=0;Oe=Qc+4|0;Ne=a+680|0;while(1){Ie=r[(Le+Ne|0)+108|0];Je=Le<<2;Ke=q[(Je+Ne|0)+176>>2];a:{if(!Ke){He=Ie;Ie=1;if(!He){break a}}q[Ge+72>>2]=Ke;q[Ge+56>>2]=0;He=a+Je|0;q[Ge+68>>2]=q[He+840>>2];q[Ge+64>>2]=q[He+824>>2];Je=q[a+732>>2];o[Ge+60|0]=Ie;q[Ge+36>>2]=Je;q[Ge+20>>2]=q[He+696>>2];q[Ge+40>>2]=q[a+728>>2];Ie=q[He+680>>2];q[Ge+32>>2]=0;q[Ge+16>>2]=Ie;q[Ge+28>>2]=q[He+808>>2];q[Ge+24>>2]=q[He+792>>2];q[Ge>>2]=q[He+1064>>2];q[Ge+4>>2]=q[He+1080>>2];Ie=q[He+1096>>2];q[Ge+12>>2]=0;q[Ge+8>>2]=Ie;Ie=Ge;Ke=q[a+1304>>2]>>w(Le,3);Je=He+740|0;b:{if(Ke&1){break b}Je=q[Qc+32>>2];}q[Ie+44>>2]=q[Je>>2];q[Ge+52>>2]=q[(Ke&2?He+772|0:q[Qc+32>>2])>>2];q[Ge+48>>2]=q[(Ke&4?He+756|0:Oe)>>2];He=a;Pe=Ge+16|0;Ie=Ae;Ke=Be;Je=Ce;Qe=De;Re=Ee;Se=Fe;Te=Qc;Ue=Jd;Ve=Ge;Me=0;c:{if(!r[a+1301|0]){break c}Me=1;if(!q[((((Le+1&255)>>>0)%3<<6)+a|0)+924>>2]){break c}Me=!q[((((Le+2&255)>>>0)%3<<6)+a|0)+924>>2];}Jd=Cd(He,Pe,Ie,Ke,Je,Qe,Re,Se,Te,Ue,Ve,0,Me)+Jd|0;}Le=Le+1|0;if((Le|0)!=3){continue}break}P=Ge+80|0;return Jd}function Df(a,Qc){a=a|0;Qc=Qc|0;var Jd=0,Ae=0,Be=0,Ce=0,De=0,Ee=0,Fe=0,We=0,Xe=0,Ye=0,Ze=0,_e=0,$e=0;Ce=P-16|0;P=Ce;Ae=q[a+32>>2];Fe=Ae+388|0;De=q[a+28>>2];We=De+388|0;Xe=Ae+372|0;Ye=De+372|0;Ze=Ae+4|0;_e=De+4|0;a:{if(r[a+1301|0]){De=0;Ae=0;while(1){Be=(Ae<<6)+a|0;if(!(r[Be+912|0]?0:!q[Be+924>>2])){Jd=(Ae<<4)+a|0;Ee=Jd+1216|0;$e=q[Ee+4>>2];q[Ce+8>>2]=q[Ee>>2];q[Ce+12>>2]=$e;Jd=Jd+1208|0;Ee=q[Jd+4>>2];q[Ce>>2]=q[Jd>>2];q[Ce+4>>2]=Ee;Jd=q[a+1304>>2]>>w(Ae,3)+9;if(!(Jd&1)){q[Be+896>>2]=q[q[Qc+32>>2]>>2];}if(!(Jd&2)){q[Be+904>>2]=q[q[Qc+32>>2]>>2];}if(!(Jd&4)){q[Be+900>>2]=q[Qc+4>>2];}De=Cd(a,Be+868|0,_e,Ze,Ye,Xe,We,Fe,Qc,De,Ce,1,0)+De|0;}Ae=Ae+1|0;if((Ae|0)!=3){continue}break}Cf(a,Qc,De,_e,Ze,Ye,Xe,We,Fe);break a}De=Cf(a,Qc,0,_e,Ze,Ye,Xe,We,Fe);Ae=0;while(1){Be=(Ae<<6)+a|0;if(!(r[Be+912|0]?0:!q[Be+924>>2])){Jd=(Ae<<4)+a|0;Ee=Jd+1216|0;$e=q[Ee+4>>2];q[Ce+8>>2]=q[Ee>>2];q[Ce+12>>2]=$e;Jd=Jd+1208|0;Ee=q[Jd+4>>2];q[Ce>>2]=q[Jd>>2];q[Ce+4>>2]=Ee;Jd=q[a+1304>>2]>>w(Ae,3)+9;if(!(Jd&1)){q[Be+896>>2]=q[q[Qc+32>>2]>>2];}if(!(Jd&2)){q[Be+904>>2]=q[q[Qc+32>>2]>>2];}if(!(Jd&4)){q[Be+900>>2]=q[Qc+4>>2];}De=Cd(a,Be+868|0,_e,Ze,Ye,Xe,We,Fe,Qc,De,Ce,1,0)+De|0;}Ae=Ae+1|0;if((Ae|0)!=3){continue}break}}P=Ce+16|0;}function Ef(a,Qc){var af=0;af=P-16|0;P=af;q[af+8>>2]=a;q[af+4>>2]=Qc;a=q[af+8>>2];a:{if(q[a+280>>2]){o[af+15|0]=n[q[q[a>>2]+12>>2]](a,q[af+4>>2])&1;break a}o[af+15|0]=1;}P=af+16|0;return o[af+15|0]&1}function Ff(a,Qc){var bf=x(0),cf=x(0);bf=u[a+32>>2];a:{if(!!(bf<x(1))){if(!!(bf>x(-1))){u[Qc>>2]=$(x(-u[a+36>>2]),u[a+40>>2]);u[Qc+4>>2]=Bb(x(A(x(B(u[a+32>>2],x(-1))),x(1))));u[Qc+8>>2]=$(x(-u[a+16>>2]),u[a>>2]);return}bf=u[a+20>>2];cf=u[a+4>>2];q[Qc+4>>2]=-1077342245;u[Qc>>2]=-$(cf,bf);break a}bf=u[a+20>>2];cf=u[a+4>>2];q[Qc+4>>2]=1070141403;u[Qc>>2]=$(cf,bf);}u[Qc+8>>2]=0;}function Gf(a,Qc,df,ef){var ff=0,gf=x(0),hf=x(0),jf=x(0),kf=x(0),lf=x(0),mf=x(0),nf=x(0),of=x(0),pf=x(0),qf=x(0),rf=x(0),sf=x(0),tf=x(0),uf=x(0),vf=x(0),wf=x(0),xf=x(0),yf=x(0),zf=x(0),Af=x(0),Bf=x(0),Cf=0,Df=0,Ef=x(0),Ff=x(0),Gf=x(0);Oa(a,6,zd(),Qc);q[a>>2]=3016;ff=q[df+12>>2];q[a+120>>2]=q[df+8>>2];q[a+124>>2]=ff;ff=q[df+4>>2];q[a+112>>2]=q[df>>2];q[a+116>>2]=ff;ff=q[df+28>>2];q[a+136>>2]=q[df+24>>2];q[a+140>>2]=ff;ff=q[df+20>>2];q[a+128>>2]=q[df+16>>2];q[a+132>>2]=ff;ff=q[df+44>>2];q[a+152>>2]=q[df+40>>2];q[a+156>>2]=ff;ff=q[df+36>>2];q[a+144>>2]=q[df+32>>2];q[a+148>>2]=ff;ff=q[df+56>>2];Cf=q[df+60>>2];Df=q[df+48>>2];df=q[df+52>>2];q[a+784>>2]=0;q[a+776>>2]=0;q[a+780>>2]=0;q[a+768>>2]=0;q[a+772>>2]=0;q[a+756>>2]=1045220557;q[a+760>>2]=1045220557;q[a+764>>2]=1045220557;q[a+740>>2]=0;q[a+744>>2]=0;q[a+748>>2]=0;q[a+752>>2]=0;q[a+720>>2]=0;q[a+724>>2]=0;q[a+712>>2]=0;q[a+716>>2]=0;q[a+704>>2]=0;q[a+708>>2]=0;q[a+696>>2]=0;q[a+700>>2]=0;q[a+688>>2]=0;q[a+692>>2]=0;q[a+680>>2]=0;q[a+684>>2]=0;q[a+168>>2]=ff;q[a+172>>2]=Cf;q[a+160>>2]=Df;q[a+164>>2]=df;q[a+728>>2]=1060320051;q[a+732>>2]=1065353216;q[a+736>>2]=1056964608;o[a+790|0]=0;o[a+788|0]=0;o[a+789|0]=0;q[a+792>>2]=0;q[a+796>>2]=0;q[a+800>>2]=0;q[a+808>>2]=0;q[a+812>>2]=0;q[a+816>>2]=0;q[a+876>>2]=0;q[a+880>>2]=1036831949;q[a+884>>2]=1133903872;q[a+868>>2]=1065353216;q[a+872>>2]=-1082130432;q[a+896>>2]=0;q[a+900>>2]=1045220557;q[a+904>>2]=0;q[a+908>>2]=0;q[a+924>>2]=0;q[a+928>>2]=0;q[a+888>>2]=1065353216;q[a+892>>2]=1056964608;q[a+916>>2]=0;q[a+992>>2]=0;o[a+912|0]=0;q[a+940>>2]=0;q[a+944>>2]=1036831949;q[a+948>>2]=1133903872;q[a+968>>2]=0;q[a+972>>2]=0;q[a+960>>2]=0;q[a+964>>2]=1045220557;q[a+932>>2]=1065353216;q[a+936>>2]=-1082130432;q[a+952>>2]=1065353216;q[a+956>>2]=1056964608;q[a+988>>2]=0;q[a+980>>2]=0;o[a+976|0]=0;q[a+1004>>2]=0;q[a+1008>>2]=1036831949;q[a+1012>>2]=1133903872;df=a+1032|0;q[df>>2]=0;q[df+4>>2]=0;df=a+1024|0;q[df>>2]=0;q[df+4>>2]=1045220557;q[a+996>>2]=1065353216;q[a+1e3>>2]=-1082130432;q[a+1016>>2]=1065353216;q[a+1020>>2]=1056964608;df=a+1052|0;q[df>>2]=0;q[df+4>>2]=0;q[a+1044>>2]=0;o[a+1040|0]=0;o[a+1301|0]=1;o[a+1308|0]=0;o[a+1300|0]=ef;q[a+1304>>2]=0;Ef=u[Qc+52>>2];Ff=u[Qc+56>>2];Gf=u[Qc+60>>2];qf=u[a+168>>2];rf=u[a+160>>2];sf=u[a+164>>2];gf=u[Qc+12>>2];hf=u[Qc+4>>2];jf=u[Qc+8>>2];kf=u[Qc+28>>2];lf=u[Qc+20>>2];mf=u[Qc+24>>2];tf=u[a+128>>2];uf=u[a+144>>2];vf=u[a+148>>2];wf=u[a+116>>2];xf=u[a+132>>2];nf=u[Qc+44>>2];yf=u[a+152>>2];of=u[Qc+36>>2];zf=u[a+120>>2];pf=u[Qc+40>>2];Af=u[a+136>>2];Bf=u[a+112>>2];q[a+108>>2]=0;q[a+92>>2]=0;q[a+76>>2]=0;q[a+60>>2]=0;u[a+88>>2]=x(x(zf*of)+x(Af*pf))+x(yf*nf);u[a+84>>2]=x(x(wf*of)+x(xf*pf))+x(vf*nf);u[a+80>>2]=x(x(Bf*of)+x(tf*pf))+x(uf*nf);u[a+72>>2]=x(x(zf*lf)+x(Af*mf))+x(yf*kf);u[a+68>>2]=x(x(wf*lf)+x(xf*mf))+x(vf*kf);u[a- -64>>2]=x(x(Bf*lf)+x(tf*mf))+x(uf*kf);u[a+56>>2]=x(x(hf*zf)+x(jf*Af))+x(gf*yf);u[a+52>>2]=x(x(hf*wf)+x(jf*xf))+x(gf*vf);u[a+48>>2]=x(x(Bf*hf)+x(tf*jf))+x(uf*gf);u[a+104>>2]=Gf+x(x(x(of*rf)+x(pf*sf))+x(nf*qf));u[a+100>>2]=Ff+x(x(x(lf*rf)+x(mf*sf))+x(kf*qf));u[a+96>>2]=Ef+x(x(x(hf*rf)+x(jf*sf))+x(gf*qf));Ob(a,q[a+28>>2]+4|0,q[a+32>>2]+4|0);}function Hf(a,Qc,df,ef,Hf,If){Oa(a,6,Qc,df);q[a>>2]=3016;Qc=q[ef+12>>2];q[a+56>>2]=q[ef+8>>2];q[a+60>>2]=Qc;Qc=q[ef+4>>2];q[a+48>>2]=q[ef>>2];q[a+52>>2]=Qc;Qc=q[ef+28>>2];q[a+72>>2]=q[ef+24>>2];q[a+76>>2]=Qc;df=q[ef+20>>2];Qc=a- -64|0;q[Qc>>2]=q[ef+16>>2];q[Qc+4>>2]=df;Qc=q[ef+44>>2];q[a+88>>2]=q[ef+40>>2];q[a+92>>2]=Qc;Qc=q[ef+36>>2];q[a+80>>2]=q[ef+32>>2];q[a+84>>2]=Qc;Qc=q[ef+60>>2];q[a+104>>2]=q[ef+56>>2];q[a+108>>2]=Qc;Qc=q[ef+52>>2];q[a+96>>2]=q[ef+48>>2];q[a+100>>2]=Qc;Qc=q[Hf+12>>2];q[a+120>>2]=q[Hf+8>>2];q[a+124>>2]=Qc;Qc=q[Hf+4>>2];q[a+112>>2]=q[Hf>>2];q[a+116>>2]=Qc;Qc=q[Hf+20>>2];q[a+128>>2]=q[Hf+16>>2];q[a+132>>2]=Qc;Qc=q[Hf+28>>2];q[a+136>>2]=q[Hf+24>>2];q[a+140>>2]=Qc;Qc=q[Hf+36>>2];q[a+144>>2]=q[Hf+32>>2];q[a+148>>2]=Qc;Qc=q[Hf+44>>2];q[a+152>>2]=q[Hf+40>>2];q[a+156>>2]=Qc;Qc=q[Hf+52>>2];q[a+160>>2]=q[Hf+48>>2];q[a+164>>2]=Qc;Qc=q[Hf+60>>2];q[a+168>>2]=q[Hf+56>>2];q[a+172>>2]=Qc;q[a+680>>2]=0;q[a+684>>2]=0;q[a+688>>2]=0;q[a+692>>2]=0;q[a+696>>2]=0;q[a+700>>2]=0;q[a+704>>2]=0;q[a+708>>2]=0;q[a+712>>2]=0;q[a+716>>2]=0;q[a+720>>2]=0;q[a+724>>2]=0;q[a+740>>2]=0;q[a+744>>2]=0;q[a+748>>2]=0;q[a+752>>2]=0;q[a+756>>2]=1045220557;q[a+760>>2]=1045220557;q[a+764>>2]=1045220557;q[a+784>>2]=0;q[a+776>>2]=0;q[a+780>>2]=0;q[a+768>>2]=0;q[a+772>>2]=0;q[a+736>>2]=1056964608;q[a+728>>2]=1060320051;q[a+732>>2]=1065353216;o[a+790|0]=0;o[a+788|0]=0;o[a+789|0]=0;q[a+800>>2]=0;q[a+792>>2]=0;q[a+796>>2]=0;q[a+816>>2]=0;q[a+808>>2]=0;q[a+812>>2]=0;q[a+928>>2]=0;q[a+884>>2]=1133903872;q[a+876>>2]=0;q[a+880>>2]=1036831949;q[a+904>>2]=0;q[a+908>>2]=0;q[a+896>>2]=0;q[a+900>>2]=1045220557;q[a+868>>2]=1065353216;q[a+872>>2]=-1082130432;q[a+924>>2]=0;q[a+888>>2]=1065353216;q[a+892>>2]=1056964608;q[a+916>>2]=0;q[a+992>>2]=0;o[a+912|0]=0;q[a+948>>2]=1133903872;q[a+940>>2]=0;q[a+944>>2]=1036831949;q[a+968>>2]=0;q[a+972>>2]=0;q[a+960>>2]=0;q[a+964>>2]=1045220557;q[a+932>>2]=1065353216;q[a+936>>2]=-1082130432;q[a+988>>2]=0;q[a+952>>2]=1065353216;q[a+956>>2]=1056964608;q[a+980>>2]=0;q[a+1056>>2]=0;o[a+976|0]=0;q[a+1012>>2]=1133903872;q[a+1004>>2]=0;q[a+1008>>2]=1036831949;Qc=a+1032|0;q[Qc>>2]=0;q[Qc+4>>2]=0;Qc=a+1024|0;q[Qc>>2]=0;q[Qc+4>>2]=1045220557;q[a+996>>2]=1065353216;q[a+1e3>>2]=-1082130432;q[a+1052>>2]=0;q[a+1016>>2]=1065353216;q[a+1020>>2]=1056964608;q[a+1044>>2]=0;o[a+1308|0]=0;q[a+1304>>2]=0;o[a+1301|0]=1;o[a+1300|0]=If;o[a+1040|0]=0;Ob(a,q[a+28>>2]+4|0,q[a+32>>2]+4|0);}function If(a,q,Qc,df){df=x(df);}function Jf(a,Qc,df,ef){var Hf=0;Hf=P-16|0;P=Hf;q[Hf+12>>2]=Qc;q[Hf+8>>2]=df;q[Hf+4>>2]=ef;u[Hf>>2]=ta(q[Hf+8>>2],q[Hf+4>>2]);sa(a,q[Hf+4>>2],Hf);P=Hf+16|0;}function Kf(a){a=a|0;q[a>>2]=3532;return a|0}function Lf(a){a=a|0;var Qc=0;q[a>>2]=2704;Qc=q[a+80>>2];if(Qc){if(r[a+84|0]){if(Qc){q[6658]=q[6658]+1;n[q[5256]](Qc);}}q[a+80>>2]=0;}q[a+80>>2]=0;q[a+72>>2]=0;q[a+76>>2]=0;o[a+84|0]=1;Qc=q[a+60>>2];if(Qc){if(r[a- -64|0]){if(Qc){q[6658]=q[6658]+1;n[q[5256]](Qc);}}q[a+60>>2]=0;}q[a+60>>2]=0;q[a+52>>2]=0;q[a+56>>2]=0;o[a- -64|0]=1;Qc=q[a+40>>2];if(Qc){if(r[a+44|0]){if(Qc){q[6658]=q[6658]+1;n[q[5256]](Qc);}}q[a+40>>2]=0;}q[a+40>>2]=0;q[a+32>>2]=0;q[a+36>>2]=0;o[a+44|0]=1;return a|0}function Mf(a){return 2}function Nf(a,df){a=a|0;df=df|0;return q[q[a+236>>2]+(df<<2)>>2]}function Of(a){var df=0,ef=0,If=0,Jf=0,Kf=0,Lf=0,Mf=0,Nf=0;Kf=q[a+8>>2];Nf=Kf;If=q[a+32>>2];if(If){Lf=q[a+40>>2];}else {Lf=0;}ef=q[a+52>>2];if(ef){Mf=q[a+60>>2];}else {Mf=0;}df=q[a+72>>2];Jf=0;a:{if(!df){break a}Jf=q[a+80>>2];}x(n[q[q[Kf>>2]+12>>2]](Nf,Lf,If,Mf,ef,Jf,df,q[a+4>>2],q[a+20>>2],q[a+24>>2]));ef=q[a+32>>2];if((ef|0)<=-1){if(q[a+36>>2]<=-1){df=q[a+40>>2];if(df){if(r[a+44|0]){if(df){q[6658]=q[6658]+1;n[q[5256]](df);}}q[a+40>>2]=0;}q[a+36>>2]=0;q[a+40>>2]=0;o[a+44|0]=1;}while(1){q[q[a+40>>2]+(ef<<2)>>2]=0;df=ef+1|0;If=df>>>0>=ef>>>0;ef=df;if(If){continue}break}}q[a+32>>2]=0;ef=q[a+52>>2];if((ef|0)<=-1){if(q[a+56>>2]<=-1){df=q[a+60>>2];if(df){if(r[a- -64|0]){if(df){q[6658]=q[6658]+1;n[q[5256]](df);}}q[a+60>>2]=0;}q[a+56>>2]=0;q[a+60>>2]=0;o[a- -64|0]=1;}while(1){q[q[a+60>>2]+(ef<<2)>>2]=0;df=ef+1|0;If=df>>>0>=ef>>>0;ef=df;if(If){continue}break}}q[a+52>>2]=0;ef=q[a+72>>2];if((ef|0)<=-1){if(q[a+76>>2]<=-1){df=q[a+80>>2];if(df){if(r[a+84|0]){if(df){q[6658]=q[6658]+1;n[q[5256]](df);}}q[a+80>>2]=0;}q[a+76>>2]=0;q[a+80>>2]=0;o[a+84|0]=1;}while(1){q[q[a+80>>2]+(ef<<2)>>2]=0;df=ef+1|0;If=df>>>0>=ef>>>0;ef=df;if(If){continue}break}}q[a+72>>2]=0;}function Pf(a,Of,Qf,Rf){var Sf=0,Tf=0,Uf=0,Vf=0,Wf=0,Xf=0,Yf=0,Zf=0,_f=0,$f=0,ag=0,bg=0,cg=0,dg=0;while(1){_f=Qf;Uf=q[a+12>>2];Xf=q[Uf+((Qf+Rf|0)/2<<2)>>2];Vf=Rf;Wf=Qf;while(1){$f=q[q[Xf+28>>2]+208>>2];while(1){Qf=Wf;ag=(Qf<<2)+Uf|0;Yf=q[ag>>2];Tf=$f;bg=(Tf|0)>-1;if(!bg){Tf=q[q[Xf+32>>2]+208>>2];}Wf=Qf+1|0;Sf=q[q[Yf+28>>2]+208>>2];if((Sf|0)<=-1){Sf=q[q[Yf+32>>2]+208>>2];}if((Sf|0)<(Tf|0)){continue}break}while(1){Sf=Vf;cg=Sf<<2;Zf=q[cg+Uf>>2];Tf=q[q[Zf+28>>2]+208>>2];if((Tf|0)<=-1){Tf=q[q[Zf+32>>2]+208>>2];}dg=$f;Vf=Sf+ -1|0;if(!bg){dg=q[q[Xf+32>>2]+208>>2];}if((dg|0)<(Tf|0)){continue}break}if((Qf|0)<=(Sf|0)){q[ag>>2]=Zf;q[q[a+12>>2]+cg>>2]=Yf;Sf=Vf;Qf=Wf;}if((Qf|0)<=(Sf|0)){Uf=q[a+12>>2];Vf=Sf;Wf=Qf;continue}break}if((Sf|0)>(_f|0)){Pf(a,Of,_f,Sf);}if((Qf|0)<(Rf|0)){continue}break}}function Qf(a,Of){a=a|0;Of=Of|0;n[q[q[a>>2]+68>>2]](a,Of);}function Rf(a,Of){a=a|0;Of=Of|0;n[q[q[a>>2]+64>>2]](a,Of);}function Sf(a){a=a|0;var Of=0;q[a>>2]=2096;if(r[a+288|0]){Of=q[a+220>>2];n[q[q[Of>>2]>>2]](Of)|0;Of=q[a+220>>2];if(Of){q[6658]=q[6658]+1;n[q[5256]](Of);}}Of=q[a+212>>2];if(Of){n[q[q[Of>>2]>>2]](Of)|0;Of=q[a+212>>2];if(Of){q[6658]=q[6658]+1;n[q[5256]](Of);}}if(r[a+289|0]){Of=q[a+216>>2];n[q[q[Of>>2]>>2]](Of)|0;Of=q[a+216>>2];if(Of){q[6658]=q[6658]+1;n[q[5256]](Of);}}Of=q[a+332>>2];if(Of){if(r[a+336|0]){if(Of){q[6658]=q[6658]+1;n[q[5256]](Of);}}q[a+332>>2]=0;}q[a+332>>2]=0;q[a+324>>2]=0;q[a+328>>2]=0;o[a+336|0]=1;Of=q[a+304>>2];if(Of){if(r[a+308|0]){if(Of){q[6658]=q[6658]+1;n[q[5256]](Of);}}q[a+304>>2]=0;}q[a+304>>2]=0;q[a+296>>2]=0;q[a+300>>2]=0;o[a+308|0]=1;Of=q[a+256>>2];if(Of){if(r[a+260|0]){if(Of){q[6658]=q[6658]+1;n[q[5256]](Of);}}q[a+256>>2]=0;}q[a+256>>2]=0;q[a+248>>2]=0;q[a+252>>2]=0;o[a+260|0]=1;Of=q[a+236>>2];if(Of){if(r[a+240|0]){if(Of){q[6658]=q[6658]+1;n[q[5256]](Of);}}q[a+236>>2]=0;}q[a+236>>2]=0;q[a+228>>2]=0;q[a+232>>2]=0;o[a+240|0]=1;Of=q[a+204>>2];if(Of){if(r[a+208|0]){if(Of){q[6658]=q[6658]+1;n[q[5256]](Of);}}q[a+204>>2]=0;}q[a+204>>2]=0;q[a+196>>2]=0;q[a+200>>2]=0;o[a+208|0]=1;Se(a);return a|0}function Tf(a,Pf){var Qf=0,Rf=0;Qf=P-16|0;q[Qf+12>>2]=a;q[Qf+8>>2]=Pf;Pf=q[Qf+8>>2];Rf=q[Pf+4>>2];a=q[Qf+12>>2];q[a>>2]=q[Pf>>2];q[a+4>>2]=Rf;Rf=q[Pf+12>>2];q[a+8>>2]=q[Pf+8>>2];q[a+12>>2]=Rf;Pf=q[Qf+8>>2];Rf=q[Pf+20>>2];q[a+16>>2]=q[Pf+16>>2];q[a+20>>2]=Rf;Rf=q[Pf+28>>2];q[a+24>>2]=q[Pf+24>>2];q[a+28>>2]=Rf;Pf=q[Qf+8>>2];Qf=q[Pf+36>>2];q[a+32>>2]=q[Pf+32>>2];q[a+36>>2]=Qf;Qf=q[Pf+44>>2];q[a+40>>2]=q[Pf+40>>2];q[a+44>>2]=Qf;}function Uf(a,Pf){var eg=0,fg=0,gg=0,hg=0;fg=q[a+548>>2];a:{if((fg|0)<1){break a}gg=q[a+556>>2];while(1){if(q[gg+(eg<<2)>>2]!=(Pf|0)){eg=eg+1|0;if((fg|0)!=(eg|0)){continue}break a}break}if((eg|0)>=(fg|0)){break a}eg=0;b:{while(1){hg=gg+(eg<<2)|0;if(q[hg>>2]!=(Pf|0)){eg=eg+1|0;if((fg|0)!=(eg|0)){continue}break b}break}if((fg|0)<=(eg|0)){break b}eg=fg+ -1|0;fg=eg<<2;q[hg>>2]=q[fg+gg>>2];q[fg+q[a+556>>2]>>2]=Pf;q[a+548>>2]=eg;}fg=q[Pf+32>>2];gg=q[Pf+28>>2];if((gg|0)==(a|0)){Pf=q[a+288>>2];c:{if((Pf|0)<1){break c}gg=q[a+296>>2];eg=0;while(1){hg=gg+(eg<<2)|0;if((fg|0)!=q[hg>>2]){eg=eg+1|0;if((eg|0)!=(Pf|0)){continue}break c}break}if((Pf|0)<=(eg|0)){break c}Pf=Pf+ -1|0;eg=Pf<<2;q[hg>>2]=q[eg+gg>>2];q[eg+q[a+296>>2]>>2]=fg;q[a+288>>2]=Pf;}q[a+280>>2]=(Pf|0)>0;return}Pf=q[fg+288>>2];d:{if((Pf|0)<1){break d}a=q[fg+296>>2];eg=0;while(1){hg=a+(eg<<2)|0;if((gg|0)!=q[hg>>2]){eg=eg+1|0;if((eg|0)!=(Pf|0)){continue}break d}break}if((Pf|0)<=(eg|0)){break d}eg=a;Pf=Pf+ -1|0;a=Pf<<2;q[hg>>2]=q[eg+a>>2];q[a+q[fg+296>>2]>>2]=gg;q[fg+288>>2]=Pf;}q[fg+280>>2]=(Pf|0)>0;}}function Vf(a,Pf){var ig=0,jg=0,kg=0,lg=0,mg=0;ig=q[a+548>>2];a:{b:{if((ig|0)<1){break b}kg=q[a+556>>2];while(1){if(q[kg+(jg<<2)>>2]!=(Pf|0)){jg=jg+1|0;if((jg|0)!=(ig|0)){continue}break b}break}if((ig|0)!=(jg|0)){break a}}c:{if(q[a+552>>2]!=(ig|0)){break c}kg=ig?ig<<1:1;if((ig|0)>=(kg|0)){break c}if(kg){q[6657]=q[6657]+1;lg=n[q[5255]](kg<<2,16)|0;ig=q[a+548>>2];}if((ig|0)>=1){jg=0;while(1){mg=jg<<2;q[mg+lg>>2]=q[q[a+556>>2]+mg>>2];jg=jg+1|0;if((jg|0)!=(ig|0)){continue}break}}jg=q[a+556>>2];if(jg){if(r[a+560|0]){if(jg){q[6658]=q[6658]+1;n[q[5256]](jg);}ig=q[a+548>>2];}q[a+556>>2]=0;}q[a+556>>2]=lg;q[a+552>>2]=kg;o[a+560|0]=1;}q[q[a+556>>2]+(ig<<2)>>2]=Pf;q[a+548>>2]=ig+1;ig=q[Pf+32>>2];jg=a;a=q[Pf+28>>2];if((jg|0)==(a|0)){Ge(a,ig,1);return}Ge(ig,a,1);}}function Wf(a){if(!(r[a+204|0]&3)){u[a+472>>2]=x(u[a+424>>2]*u[a+408>>2])+u[a+472>>2];u[a+476>>2]=x(u[a+428>>2]*u[a+412>>2])+u[a+476>>2];u[a+480>>2]=x(u[a+432>>2]*u[a+416>>2])+u[a+480>>2];}}function Xf(a,Pf){var ng=0,og=0;ng=P-144|0;P=ng;Mb(a);o[a+560|0]=1;q[a>>2]=2012;q[a+556>>2]=0;q[a+548>>2]=0;q[a+552>>2]=0;q[ng+72>>2]=0;q[ng+4>>2]=0;u[ng>>2]=0;og=q[Pf+12>>2];q[ng+84>>2]=q[Pf+8>>2];q[ng+88>>2]=og;og=q[Pf>>2];Pf=q[Pf+4>>2];q[ng+20>>2]=0;q[ng+24>>2]=0;q[ng+12>>2]=0;q[ng+16>>2]=0;q[ng+28>>2]=1065353216;q[ng+32>>2]=0;q[ng+36>>2]=0;q[ng+40>>2]=0;q[ng+44>>2]=0;q[ng+48>>2]=1065353216;q[ng+68>>2]=0;q[ng+60>>2]=0;q[ng+64>>2]=0;q[ng+52>>2]=0;q[ng+56>>2]=0;q[ng+76>>2]=og;q[ng+80>>2]=Pf;q[ng+136>>2]=1008981770;q[ng+140>>2]=1008981770;q[ng+128>>2]=1000593162;q[ng+132>>2]=1008981770;o[ng+124|0]=0;q[ng+116>>2]=1061997773;q[ng+120>>2]=1065353216;q[ng+108>>2]=0;q[ng+112>>2]=0;q[ng+100>>2]=1056964608;q[ng+104>>2]=0;q[ng+92>>2]=0;q[ng+96>>2]=0;q[ng+8>>2]=1065353216;Yf(a,ng);P=ng+144|0;}function Yf(a,Pf){var pg=0,qg=0,rg=0,sg=x(0),tg=x(0),ug=0,vg=x(0),wg=x(0);rg=P-16|0;P=rg;q[a+372>>2]=0;q[a+376>>2]=0;q[a+604>>2]=1065353216;q[a+608>>2]=1065353216;q[a+408>>2]=1065353216;q[a+412>>2]=1065353216;q[a+472>>2]=0;q[a+476>>2]=0;q[a+252>>2]=2;q[a+380>>2]=0;q[a+384>>2]=0;q[a+388>>2]=0;q[a+392>>2]=0;q[a+396>>2]=0;q[a+400>>2]=0;q[a+612>>2]=1065353216;q[a+616>>2]=0;q[a+420>>2]=0;q[a+424>>2]=0;q[a+416>>2]=1065353216;q[a+428>>2]=0;q[a+432>>2]=0;q[a+436>>2]=0;q[a+440>>2]=0;q[a+444>>2]=0;q[a+448>>2]=0;q[a+452>>2]=0;q[a+480>>2]=0;q[a+484>>2]=0;q[a+488>>2]=0;q[a+492>>2]=0;q[a+496>>2]=0;q[a+500>>2]=0;sg=u[Pf+96>>2];tg=u[Pf+92>>2];u[rg+12>>2]=tg;u[rg+8>>2]=sg;q[rg+4>>2]=0;q[rg>>2]=1065353216;q[a+504>>2]=q[(tg<x(0)?rg+4|0:tg>x(1)?rg:rg+12|0)>>2];q[rg+4>>2]=0;q[rg>>2]=1065353216;q[a+508>>2]=q[(sg<x(0)?rg+4|0:sg>x(1)?rg:rg+8|0)>>2];q[a+532>>2]=q[Pf+116>>2];q[a+536>>2]=q[Pf+120>>2];qg=q[Pf+4>>2];q[a+668>>2]=0;q[a+672>>2]=0;q[a+540>>2]=qg;o[a+512|0]=r[Pf+124|0];q[a+516>>2]=q[Pf+128>>2];q[a+520>>2]=q[Pf+132>>2];q[a+524>>2]=q[Pf+136>>2];q[a+528>>2]=q[Pf+140>>2];a:{if(qg){pg=a+4|0;n[q[q[qg>>2]+8>>2]](qg,pg);break a}ug=q[Pf+12>>2];pg=a+4|0;q[pg>>2]=q[Pf+8>>2];q[pg+4>>2]=ug;qg=q[Pf+20>>2];q[a+12>>2]=q[Pf+16>>2];q[a+16>>2]=qg;qg=q[Pf+36>>2];q[a+28>>2]=q[Pf+32>>2];q[a+32>>2]=qg;qg=q[Pf+28>>2];q[a+20>>2]=q[Pf+24>>2];q[a+24>>2]=qg;qg=q[Pf+44>>2];q[a+36>>2]=q[Pf+40>>2];q[a+40>>2]=qg;qg=q[Pf+52>>2];q[a+44>>2]=q[Pf+48>>2];q[a+48>>2]=qg;qg=Pf- -64|0;ug=q[qg+4>>2];q[a+60>>2]=q[qg>>2];q[a+64>>2]=ug;qg=q[Pf+60>>2];q[a+52>>2]=q[Pf+56>>2];q[a+56>>2]=qg;}qg=q[pg+4>>2];q[a+68>>2]=q[pg>>2];q[a+72>>2]=qg;qg=q[pg+12>>2];q[a+76>>2]=q[pg+8>>2];q[a+80>>2]=qg;pg=q[a+32>>2];q[a+92>>2]=q[a+28>>2];q[a+96>>2]=pg;pg=q[a+24>>2];q[a+84>>2]=q[a+20>>2];q[a+88>>2]=pg;pg=q[a+40>>2];q[a+100>>2]=q[a+36>>2];q[a+104>>2]=pg;pg=q[a+48>>2];q[a+108>>2]=q[a+44>>2];q[a+112>>2]=pg;pg=q[a+56>>2];q[a+116>>2]=q[a+52>>2];q[a+120>>2]=pg;pg=q[a+64>>2];q[a+124>>2]=q[a+60>>2];q[a+128>>2]=pg;q[a+132>>2]=0;q[a+136>>2]=0;q[a+140>>2]=0;q[a+144>>2]=0;q[a+148>>2]=0;q[a+152>>2]=0;q[a+156>>2]=0;q[a+160>>2]=0;q[a+228>>2]=q[Pf+100>>2];q[a+236>>2]=q[Pf+104>>2];q[a+240>>2]=q[Pf+108>>2];q[a+232>>2]=q[Pf+112>>2];n[q[q[a>>2]+8>>2]](a,q[Pf+72>>2]);pg=q[5606];q[5606]=pg+1;q[a+568>>2]=pg;sg=x(0);pg=q[a+204>>2];tg=u[Pf>>2];b:{if(tg==x(0)){q[a+204>>2]=pg|1;break b}q[a+204>>2]=pg&-2;sg=x(x(1)/tg);}q[a+436>>2]=0;u[a+404>>2]=sg;u[a+432>>2]=tg*u[a+448>>2];u[a+428>>2]=tg*u[a+444>>2];u[a+424>>2]=tg*u[a+440>>2];tg=u[Pf+84>>2];vg=u[Pf+80>>2];wg=u[Pf+76>>2];u[a+620>>2]=sg*u[a+408>>2];u[a+624>>2]=sg*u[a+412>>2];u[a+628>>2]=sg*u[a+416>>2];q[a+632>>2]=0;q[a+468>>2]=0;u[a+456>>2]=wg!=x(0)?x(x(1)/wg):x(0);u[a+460>>2]=vg!=x(0)?x(x(1)/vg):x(0);u[a+464>>2]=tg!=x(0)?x(x(1)/tg):x(0);Kd(a);q[a+572>>2]=0;q[a+576>>2]=0;q[a+564>>2]=8;q[a+580>>2]=0;q[a+584>>2]=0;q[a+588>>2]=0;q[a+592>>2]=0;q[a+596>>2]=0;q[a+600>>2]=0;q[a+632>>2]=0;q[a+636>>2]=0;q[a+640>>2]=0;q[a+644>>2]=0;q[a+648>>2]=0;q[a+652>>2]=0;q[a+656>>2]=0;q[a+660>>2]=0;q[a+664>>2]=0;sg=u[a+404>>2];u[a+628>>2]=sg*u[a+416>>2];u[a+624>>2]=sg*u[a+412>>2];u[a+620>>2]=sg*u[a+408>>2];P=rg+16|0;}function Zf(a,Pf,xg){var yg=0;yg=P-32|0;q[yg+28>>2]=a;q[yg+24>>2]=0;q[yg+20>>2]=Pf;q[yg+16>>2]=xg;a=q[yg+28>>2];q[yg+12>>2]=q[yg+24>>2];while(1){if(q[yg+12>>2]<q[yg+20>>2]){u[q[yg+16>>2]+(q[yg+12>>2]<<2)>>2]=u[q[a+12>>2]+(q[yg+12>>2]<<2)>>2];q[yg+12>>2]=q[yg+12>>2]+1;continue}break}}function _f(a,Pf,xg){var zg=0,Ag=0;zg=P-32|0;P=zg;q[zg+28>>2]=a;q[zg+24>>2]=0;q[zg+20>>2]=Pf;q[zg+16>>2]=xg;xg=q[zg+28>>2];q[zg+12>>2]=q[zg+24>>2];while(1){if(q[zg+12>>2]<q[zg+20>>2]){Pf=q[zg+16>>2]+(q[zg+12>>2]<<4)|0;a=P-16|0;q[a+12>>2]=16;q[a+8>>2]=Pf;Pf=q[xg+12>>2]+(q[zg+12>>2]<<4)|0;Ag=q[Pf+4>>2];a=q[a+8>>2];q[a>>2]=q[Pf>>2];q[a+4>>2]=Ag;Ag=q[Pf+12>>2];q[a+8>>2]=q[Pf+8>>2];q[a+12>>2]=Ag;q[zg+12>>2]=q[zg+12>>2]+1;continue}break}P=zg+32|0;}function $f(a,Pf){var xg=0;xg=P-16|0;P=xg;q[xg+12>>2]=a;q[xg+8>>2]=Pf;Pf=P-16|0;a=q[xg+12>>2];q[Pf+12>>2]=a;if(q[q[Pf+12>>2]+8>>2]<q[xg+8>>2]){q[xg+4>>2]=hg(a,q[xg+8>>2]);Pf=P-16|0;q[Pf+12>>2]=a;Zf(a,q[q[Pf+12>>2]+4>>2],q[xg+4>>2]);Pf=P-16|0;q[Pf+12>>2]=a;Gc(a,q[q[Pf+12>>2]+4>>2]);Fc(a);o[a+16|0]=1;q[a+12>>2]=q[xg+4>>2];q[a+8>>2]=q[xg+8>>2];}P=xg+16|0;}function ag(a,Pf){var Bg=0;Bg=P-16|0;P=Bg;q[Bg+12>>2]=a;q[Bg+8>>2]=Pf;Pf=P-16|0;a=q[Bg+12>>2];q[Pf+12>>2]=a;if(q[q[Pf+12>>2]+8>>2]<q[Bg+8>>2]){q[Bg+4>>2]=ko(a,q[Bg+8>>2]);Pf=P-16|0;q[Pf+12>>2]=a;_f(a,q[q[Pf+12>>2]+4>>2],q[Bg+4>>2]);Pf=P-16|0;q[Pf+12>>2]=a;Gc(a,q[q[Pf+12>>2]+4>>2]);Fc(a);o[a+16|0]=1;q[a+12>>2]=q[Bg+4>>2];q[a+8>>2]=q[Bg+8>>2];}P=Bg+16|0;}function bg(a,Pf){var Cg=0,Dg=0,Eg=0;Dg=P-16|0;P=Dg;q[Dg+12>>2]=a;q[Dg+8>>2]=Pf;Pf=P-16|0;a=q[Dg+12>>2];q[Pf+12>>2]=a;q[Dg+4>>2]=q[q[Pf+12>>2]+4>>2];Pf=q[Dg+4>>2];Cg=P-16|0;q[Cg+12>>2]=a;if(q[q[Cg+12>>2]+8>>2]==(Pf|0)){Cg=P-16|0;q[Cg+12>>2]=a;Eg=q[q[Cg+12>>2]+4>>2];Cg=P-16|0;q[Cg+12>>2]=a;q[Cg+8>>2]=Eg;Pf=a;if(q[Cg+8>>2]){Cg=q[Cg+8>>2]<<1;}else {Cg=1;}ag(Pf,Cg);}Cg=q[a+12>>2]+(q[a+4>>2]<<4)|0;Pf=P-16|0;q[Pf+12>>2]=16;q[Pf+8>>2]=Cg;Cg=q[Dg+8>>2];Eg=q[Cg+4>>2];Pf=q[Pf+8>>2];q[Pf>>2]=q[Cg>>2];q[Pf+4>>2]=Eg;Eg=q[Cg+12>>2];q[Pf+8>>2]=q[Cg+8>>2];q[Pf+12>>2]=Eg;q[a+4>>2]=q[a+4>>2]+1;P=Dg+16|0;}function cg(a){a=a|0;var Pf=0;Pf=P-16|0;P=Pf;q[Pf+12>>2]=a;a=q[Pf+12>>2];q[a>>2]=1772;_a(a+140|0);_a(a+120|0);_a(a+100|0);_a(a+80|0);_a(a+28|0);q[(P-16|0)+12>>2]=a;P=Pf+16|0;return a|0}function dg(a,Fg,Gg){var Hg=0;Hg=P-80|0;P=Hg;q[Hg+76>>2]=a;q[Hg+72>>2]=Fg;q[Hg+68>>2]=Gg;Fg=Hg+16|0;Gg=q[Hg+72>>2];wg(Fg,Gg,q[Hg+68>>2]);Nd(Hg,Gg,q[Hg+68>>2]+48|0);Pd(a,Fg,Hg);P=Hg+80|0;}function eg(a){a=a|0;var Fg=0;Fg=P-16|0;P=Fg;q[Fg+12>>2]=a;a=q[Fg+12>>2];Ca(a);Sd(a);P=Fg+16|0;}function fg(a){a=a|0;var Gg=0;Gg=P-16|0;P=Gg;q[Gg+12>>2]=a;a=q[Gg+12>>2];q[a>>2]=2012;_a(a+544|0);hb(a);P=Gg+16|0;return a|0}function gg(a,Ig,Jg){var Kg=0;Kg=P-32|0;q[Kg+28>>2]=a;q[Kg+24>>2]=0;q[Kg+20>>2]=Ig;q[Kg+16>>2]=Jg;a=q[Kg+28>>2];q[Kg+12>>2]=q[Kg+24>>2];while(1){if(q[Kg+12>>2]<q[Kg+20>>2]){q[q[Kg+16>>2]+(q[Kg+12>>2]<<2)>>2]=q[q[a+12>>2]+(q[Kg+12>>2]<<2)>>2];q[Kg+12>>2]=q[Kg+12>>2]+1;continue}break}}function hg(a,Ig){var Jg=0;Jg=P-16|0;P=Jg;q[Jg+8>>2]=a;q[Jg+4>>2]=Ig;a=q[Jg+8>>2];a:{if(q[Jg+4>>2]){q[Jg+12>>2]=Bo(a,q[Jg+4>>2]);break a}q[Jg+12>>2]=0;}P=Jg+16|0;return q[Jg+12>>2]}function ig(a){a=a|0;var Ig=0;Ig=P-16|0;P=Ig;q[Ig+12>>2]=a;a=q[Ig+12>>2];Ca(a);aa(a);P=Ig+16|0;}function jg(a,Lg,Mg){a=a|0;Lg=Lg|0;Mg=Mg|0;var Ng=0;Ng=P-32|0;P=Ng;q[Ng+28>>2]=a;q[Ng+24>>2]=Lg;o[Ng+23|0]=Mg;a=q[Ng+28>>2];u[a+4>>2]=u[q[Ng+24>>2]+40>>2];q[a+80>>2]=q[q[Ng+24>>2]>>2];a:{if(o[Ng+23|0]&1){Lg=q[Ng+24>>2];Mg=q[Lg+12>>2];q[a+48>>2]=q[Lg+8>>2];q[a+52>>2]=Mg;Mg=q[Lg+20>>2];q[a+56>>2]=q[Lg+16>>2];q[a+60>>2]=Mg;break a}Lg=P-16|0;q[Lg+12>>2]=q[a+80>>2];Mg=P-16|0;q[Mg+12>>2]=q[Lg+12>>2]+4;Ya(Ng,q[Mg+12>>2],q[Ng+24>>2]+8|0);Lg=q[Ng+4>>2];q[a+48>>2]=q[Ng>>2];q[a+52>>2]=Lg;Lg=q[Ng+12>>2];q[a+56>>2]=q[Ng+8>>2];q[a+60>>2]=Lg;}Lg=q[Ng+24>>2];Mg=q[Lg+28>>2];q[a+64>>2]=q[Lg+24>>2];q[a+68>>2]=Mg;Mg=q[Lg+36>>2];q[a+72>>2]=q[Lg+32>>2];q[a+76>>2]=Mg;P=Ng+32|0;return x(u[q[Ng+24>>2]+40>>2])}function kg(a,Lg){var Mg=0;Mg=P-16|0;P=Mg;q[Mg+12>>2]=Lg;Ao(a,q[Mg+12>>2]);if(Pb(a)<x(1.1920928955078125e-7)){u[Mg+8>>2]=0;u[Mg+4>>2]=0;u[Mg>>2]=0;ca(a,Mg+8|0,Mg+4|0,Mg);}P=Mg+16|0;}function lg(){return 4}function mg(){return 3}function ng(){return 2}function og(){return 1}function pg(a,Lg){var Og=0;Og=P-112|0;P=Og;q[Og+108>>2]=a;q[Og+104>>2]=Lg;a=q[Og+108>>2];u[Og+100>>2]=co(q[Og+104>>2]);u[Og+96>>2]=x(2)/u[Og+100>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+92>>2]=u[q[Lg+12>>2]>>2]*u[Og+96>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+88>>2]=u[q[Lg+12>>2]+4>>2]*u[Og+96>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+84>>2]=u[q[Lg+12>>2]+8>>2]*u[Og+96>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+80>>2]=u[q[Lg+12>>2]+12>>2]*u[Og+92>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+76>>2]=u[q[Lg+12>>2]+12>>2]*u[Og+88>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+72>>2]=u[q[Lg+12>>2]+12>>2]*u[Og+84>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+68>>2]=u[q[Lg+12>>2]>>2]*u[Og+92>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+64>>2]=u[q[Lg+12>>2]>>2]*u[Og+88>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+60>>2]=u[q[Lg+12>>2]>>2]*u[Og+84>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+56>>2]=u[q[Lg+12>>2]+4>>2]*u[Og+88>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+52>>2]=u[q[Lg+12>>2]+4>>2]*u[Og+84>>2];Lg=P-16|0;q[Lg+12>>2]=q[Og+104>>2];u[Og+48>>2]=u[q[Lg+12>>2]+8>>2]*u[Og+84>>2];u[Og+44>>2]=x(1)-x(u[Og+56>>2]+u[Og+48>>2]);u[Og+40>>2]=u[Og+64>>2]-u[Og+72>>2];u[Og+36>>2]=u[Og+60>>2]+u[Og+76>>2];u[Og+32>>2]=u[Og+64>>2]+u[Og+72>>2];u[Og+28>>2]=x(1)-x(u[Og+68>>2]+u[Og+48>>2]);u[Og+24>>2]=u[Og+52>>2]-u[Og+80>>2];u[Og+20>>2]=u[Og+60>>2]-u[Og+76>>2];u[Og+16>>2]=u[Og+52>>2]+u[Og+80>>2];u[Og+12>>2]=x(1)-x(u[Og+68>>2]+u[Og+56>>2]);zb(a,Og+44|0,Og+40|0,Og+36|0,Og+32|0,Og+28|0,Og+24|0,Og+20|0,Og+16|0,Og+12|0);P=Og+112|0;}function qg(a,Lg,Pg){var Qg=0,Rg=0;Qg=P-384|0;P=Qg;q[Qg+380>>2]=a;q[Qg+376>>2]=Lg;q[Qg+372>>2]=Pg;a=q[Qg+380>>2];Lg=Qg+304|0;ya(Lg);Pg=Qg+240|0;ya(Pg);zc(Qg+224|0,a+92|0,q[Qg+372>>2]);Rg=q[Qg+228>>2];q[a+112>>2]=q[Qg+224>>2];q[a+116>>2]=Rg;Rg=q[Qg+236>>2];q[a+120>>2]=q[Qg+232>>2];q[a+124>>2]=Rg;Ba(Lg);Ba(Pg);u[Qg+220>>2]=1;Lg=Qg+200|0;Ka(Lg,a+92|0,a+112|0);u[Qg+216>>2]=Ld(Lg);if(o[a+148|0]&1){a:{if(!(ta(a+76|0,a+152|0)>x(0))){break a}}}q[Qg+196>>2]=10;b:{while(1){c:{if(u[Qg+220>>2]>x(.009999999776482582)){Lg=q[Qg+196>>2];q[Qg+196>>2]=Lg+ -1;Lg=(Lg|0)>0;}else {Lg=0;}if(!Lg){break c}za(Qg+304|0,a+92|0);za(Qg+240|0,a+112|0);Lg=Qg+176|0;Ka(Lg,a+92|0,a+112|0);yc(Qg- -64|0,q[a+8>>2],Lg,x(0));Lg=P-16|0;q[Lg+12>>2]=a;Pg=P-16|0;q[Pg+12>>2]=q[q[Lg+12>>2]+8>>2];q[Qg+72>>2]=q[q[q[Pg+12>>2]+188>>2]+4>>2];Lg=P-16|0;q[Lg+12>>2]=a;Pg=P-16|0;q[Pg+12>>2]=q[q[Lg+12>>2]+8>>2];q[Qg+76>>2]=q[q[q[Pg+12>>2]+188>>2]+8>>2];Lg=q[a+12>>2];u[Qg+52>>2]=n[q[q[Lg>>2]+48>>2]](Lg);Lg=q[a+12>>2];n[q[q[Lg>>2]+44>>2]](Lg,x(u[Qg+52>>2]+u[a+56>>2]));d:{if(o[a+170|0]&1){Lg=q[a+8>>2];Pg=q[a+12>>2];Rg=P-16|0;q[Rg+12>>2]=q[Qg+376>>2];Ta(Lg,Pg,Qg+304|0,Qg+240|0,Qg- -64|0,u[(q[Rg+12>>2]+28|0)+28>>2]);break d}Lg=q[Qg+376>>2];Pg=q[a+12>>2];Rg=P-16|0;q[Rg+12>>2]=q[Qg+376>>2];La(Lg,Pg,Qg+304|0,Qg+240|0,Qg- -64|0,u[(q[Rg+12>>2]+28|0)+28>>2]);}Lg=q[a+12>>2];n[q[q[Lg>>2]+44>>2]](Lg,u[Qg+52>>2]);u[Qg+220>>2]=u[Qg+220>>2]-u[Qg+68>>2];Lg=P-16|0;q[Lg+12>>2]=Qg- -64;e:{f:{g:{if(!(u[q[Lg+12>>2]+4>>2]<x(1))){break g}Lg=P-16|0;q[Lg+12>>2]=q[a+8>>2];if(q[q[Lg+12>>2]+204>>2]&4){break g}if(!(n[q[q[a>>2]+56>>2]](a,q[a+8>>2],q[Qg+144>>2])&1)){break g}Ka(Qg+32|0,Qg+128|0,a+92|0);u[Qg+48>>2]=Pb(Qg+32|0);hq(a,Qg+112|0);Ka(Qg+16|0,a+112|0,a+92|0);u[Qg+216>>2]=Ld(Qg+16|0);h:{if(u[Qg+216>>2]>x(1.1920928955078125e-7)){wc(Qg+16|0);if(ta(Qg+16|0,a+76|0)<=x(0)){q[Qg+12>>2]=3;break e}break h}q[Qg+12>>2]=3;break e}break f}Lg=q[a+116>>2];q[a+92>>2]=q[a+112>>2];q[a+96>>2]=Lg;Lg=q[a+124>>2];q[a+100>>2]=q[a+120>>2];q[a+104>>2]=Lg;}q[Qg+12>>2]=0;}xb(Qg- -64|0);i:{switch(q[Qg+12>>2]-1|0){case 0:case 1:break b;case 2:break c;default:break i}}continue}break}P=Qg+384|0;return}F();}function rg(a,Lg){var Pg=0,Sg=0;Pg=P-48|0;P=Pg;q[Pg+44>>2]=a;q[Pg+40>>2]=Lg;Lg=Pg+8|0;a=q[Pg+44>>2];lb(Lg,q[Pg+40>>2],a+408|0);Sg=Pg+24|0;sa(Sg,Lg,a+404|0);Za(a+372|0,Sg);P=Pg+48|0;}function sg(a,Lg){var Tg=0,Ug=0;Tg=P-48|0;P=Tg;q[Tg+44>>2]=a;q[Tg+40>>2]=Lg;Lg=Tg+8|0;a=q[Tg+44>>2];Ya(Lg,a+324|0,q[Tg+40>>2]);Ug=Tg+24|0;lb(Ug,Lg,a+604|0);Za(a+388|0,Ug);P=Tg+48|0;}function tg(a,Lg){var Vg=0;Vg=P-32|0;P=Vg;q[Vg+28>>2]=a;q[Vg+24>>2]=Lg;a=Vg+8|0;Lg=q[Vg+28>>2];lb(a,q[Vg+24>>2],Lg+408|0);Za(Lg+472|0,a);P=Vg+32|0;}function ug(a,Lg){var Wg=0;Wg=P-32|0;P=Wg;q[Wg+28>>2]=a;q[Wg+24>>2]=Lg;a=Wg+8|0;Lg=q[Wg+28>>2];lb(a,q[Wg+24>>2],Lg+604|0);Za(Lg+488|0,a);P=Wg+32|0;}function vg(a,Lg){a=a|0;Lg=Lg|0;var Xg=0;Xg=P-16|0;P=Xg;q[Xg+12>>2]=a;q[Xg+8>>2]=Lg;a=q[Xg+12>>2];n[q[q[a>>2]+44>>2]](a,q[Xg+8>>2]);P=Xg+16|0;}function wg(a,Lg,Yg){var Zg=0;Zg=P-48|0;P=Zg;q[Zg+44>>2]=a;q[Zg+40>>2]=Lg;q[Zg+36>>2]=Yg;Yg=q[Zg+36>>2];Lg=P-16|0;q[Lg+12>>2]=q[Zg+40>>2];q[Lg+8>>2]=0;u[Zg+32>>2]=vb(Yg,q[Lg+12>>2]+(q[Lg+8>>2]<<4)|0);Yg=q[Zg+36>>2];Lg=P-16|0;q[Lg+12>>2]=q[Zg+40>>2];q[Lg+8>>2]=0;u[Zg+28>>2]=ub(Yg,q[Lg+12>>2]+(q[Lg+8>>2]<<4)|0);Yg=q[Zg+36>>2];Lg=P-16|0;q[Lg+12>>2]=q[Zg+40>>2];q[Lg+8>>2]=0;u[Zg+24>>2]=tb(Yg,q[Lg+12>>2]+(q[Lg+8>>2]<<4)|0);Yg=q[Zg+36>>2];Lg=P-16|0;q[Lg+12>>2]=q[Zg+40>>2];q[Lg+8>>2]=1;u[Zg+20>>2]=vb(Yg,q[Lg+12>>2]+(q[Lg+8>>2]<<4)|0);Yg=q[Zg+36>>2];Lg=P-16|0;q[Lg+12>>2]=q[Zg+40>>2];q[Lg+8>>2]=1;u[Zg+16>>2]=ub(Yg,q[Lg+12>>2]+(q[Lg+8>>2]<<4)|0);Yg=q[Zg+36>>2];Lg=P-16|0;q[Lg+12>>2]=q[Zg+40>>2];q[Lg+8>>2]=1;u[Zg+12>>2]=tb(Yg,q[Lg+12>>2]+(q[Lg+8>>2]<<4)|0);Yg=q[Zg+36>>2];Lg=P-16|0;q[Lg+12>>2]=q[Zg+40>>2];q[Lg+8>>2]=2;u[Zg+8>>2]=vb(Yg,q[Lg+12>>2]+(q[Lg+8>>2]<<4)|0);Yg=q[Zg+36>>2];Lg=P-16|0;q[Lg+12>>2]=q[Zg+40>>2];q[Lg+8>>2]=2;u[Zg+4>>2]=ub(Yg,q[Lg+12>>2]+(q[Lg+8>>2]<<4)|0);Yg=q[Zg+36>>2];Lg=P-16|0;q[Lg+12>>2]=q[Zg+40>>2];q[Lg+8>>2]=2;u[Zg>>2]=tb(Yg,q[Lg+12>>2]+(q[Lg+8>>2]<<4)|0);uc(a,Zg+32|0,Zg+28|0,Zg+24|0,Zg+20|0,Zg+16|0,Zg+12|0,Zg+8|0,Zg+4|0,Zg);P=Zg+48|0;}function xg(a,Lg,Yg){var _g=0,$g=x(0),ah=x(0);_g=P-32|0;P=_g;q[_g+28>>2]=a;q[_g+24>>2]=Lg;q[_g+20>>2]=Yg;a=P-16|0;q[a+12>>2]=q[_g+28>>2];Lg=P-16|0;u[Lg+12>>2]=u[q[a+12>>2]+8>>2];a:{if(x(y(u[Lg+12>>2]))>x(.7071067690849304)){a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=u[q[a+12>>2]+4>>2];a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=x($g*u[q[a+12>>2]+4>>2]);a=P-16|0;q[a+12>>2]=q[_g+28>>2];ah=u[q[a+12>>2]+8>>2];a=P-16|0;q[a+12>>2]=q[_g+28>>2];u[_g+16>>2]=$g+x(ah*u[q[a+12>>2]+8>>2]);a=P-16|0;u[a+12>>2]=u[_g+16>>2];u[_g+12>>2]=x(1)/x(E(u[a+12>>2]));a=P-16|0;q[a+12>>2]=q[_g+24>>2];u[q[a+12>>2]>>2]=0;a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=x(x(-u[q[a+12>>2]+8>>2])*u[_g+12>>2]);a=P-16|0;q[a+12>>2]=q[_g+24>>2];u[q[a+12>>2]+4>>2]=$g;a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=x(u[q[a+12>>2]+4>>2]*u[_g+12>>2]);a=P-16|0;q[a+12>>2]=q[_g+24>>2];u[q[a+12>>2]+8>>2]=$g;$g=x(u[_g+16>>2]*u[_g+12>>2]);a=P-16|0;q[a+12>>2]=q[_g+20>>2];u[q[a+12>>2]>>2]=$g;a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=x(-u[q[a+12>>2]>>2]);a=P-16|0;q[a+12>>2]=q[_g+24>>2];$g=x($g*u[q[a+12>>2]+8>>2]);a=P-16|0;q[a+12>>2]=q[_g+20>>2];u[q[a+12>>2]+4>>2]=$g;a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=u[q[a+12>>2]>>2];a=P-16|0;q[a+12>>2]=q[_g+24>>2];$g=x($g*u[q[a+12>>2]+4>>2]);break a}a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=u[q[a+12>>2]>>2];a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=x($g*u[q[a+12>>2]>>2]);a=P-16|0;q[a+12>>2]=q[_g+28>>2];ah=u[q[a+12>>2]+4>>2];a=P-16|0;q[a+12>>2]=q[_g+28>>2];u[_g+8>>2]=$g+x(ah*u[q[a+12>>2]+4>>2]);a=P-16|0;u[a+12>>2]=u[_g+8>>2];u[_g+4>>2]=x(1)/x(E(u[a+12>>2]));a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=x(x(-u[q[a+12>>2]+4>>2])*u[_g+4>>2]);a=P-16|0;q[a+12>>2]=q[_g+24>>2];u[q[a+12>>2]>>2]=$g;a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=x(u[q[a+12>>2]>>2]*u[_g+4>>2]);a=P-16|0;q[a+12>>2]=q[_g+24>>2];u[q[a+12>>2]+4>>2]=$g;a=P-16|0;q[a+12>>2]=q[_g+24>>2];u[q[a+12>>2]+8>>2]=0;a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=x(-u[q[a+12>>2]+8>>2]);a=P-16|0;q[a+12>>2]=q[_g+24>>2];$g=x($g*u[q[a+12>>2]+4>>2]);a=P-16|0;q[a+12>>2]=q[_g+20>>2];u[q[a+12>>2]>>2]=$g;a=P-16|0;q[a+12>>2]=q[_g+28>>2];$g=u[q[a+12>>2]+8>>2];a=P-16|0;q[a+12>>2]=q[_g+24>>2];$g=x($g*u[q[a+12>>2]>>2]);a=P-16|0;q[a+12>>2]=q[_g+20>>2];u[q[a+12>>2]+4>>2]=$g;$g=x(u[_g+8>>2]*u[_g+4>>2]);}a=P-16|0;q[a+12>>2]=q[_g+20>>2];u[q[a+12>>2]+8>>2]=$g;P=_g+32|0;}function yg(a,Lg,Yg,bh,ch,dh){var eh=0;eh=P-32|0;P=eh;q[eh+28>>2]=a;u[eh+24>>2]=Lg;u[eh+20>>2]=Yg;u[eh+16>>2]=bh;u[eh+12>>2]=ch;u[eh+8>>2]=dh;Wl(q[eh+28>>2]+688|0,u[eh+24>>2],u[eh+20>>2],u[eh+16>>2],u[eh+12>>2],u[eh+8>>2]);P=eh+32|0;}function zg(a,Lg){var Yg=0;Yg=P-16|0;P=Yg;q[Yg+12>>2]=Lg;u[Yg+8>>2]=-u[q[Yg+12>>2]>>2];u[Yg+4>>2]=-u[q[Yg+12>>2]+4>>2];u[Yg>>2]=-u[q[Yg+12>>2]+8>>2];ca(a,Yg+8|0,Yg+4|0,Yg);P=Yg+16|0;}function Ag(a,Lg){a=a|0;Lg=Lg|0;var bh=0;bh=P-16|0;P=bh;q[bh+12>>2]=a;o[bh+11|0]=Lg;a=q[bh+12>>2];n[q[q[a>>2]+52>>2]](a,o[bh+11|0]&1);P=bh+16|0;}function Bg(a){a=a|0;var Lg=0,ch=0;Lg=P-48|0;P=Lg;q[Lg+44>>2]=a;a=q[Lg+44>>2];u[Lg+20>>2]=0;u[Lg+16>>2]=0;u[Lg+12>>2]=0;ch=Lg+24|0;ca(ch,Lg+20|0,Lg+16|0,Lg+12|0);n[q[q[a>>2]+44>>2]](a,ch);P=Lg+48|0;}function Cg(a){a=a|0;var dh=0;dh=P-16|0;P=dh;q[dh+12>>2]=a;a=q[dh+12>>2];a=n[q[q[a>>2]+40>>2]](a)&1;P=dh+16|0;return a|0}function Dg(a,fh,gh){a=a|0;fh=fh|0;gh=x(gh);var hh=0;hh=P-16|0;P=hh;q[hh+12>>2]=a;q[hh+8>>2]=fh;u[hh+4>>2]=gh;a=q[hh+12>>2];n[q[q[a>>2]+36>>2]](a,q[hh+8>>2],u[hh+4>>2]);P=hh+16|0;}function Eg(a,fh){a=a|0;fh=fh|0;var gh=0;gh=P-16|0;P=gh;q[gh+12>>2]=a;q[gh+8>>2]=fh;a=q[gh+12>>2];n[q[q[a>>2]+32>>2]](a,q[gh+8>>2]);P=gh+16|0;}function Fg(a,fh){a=a|0;fh=fh|0;var ih=0;ih=P-16|0;P=ih;q[ih+12>>2]=a;q[ih+8>>2]=fh;a=q[ih+12>>2];n[q[q[a>>2]+28>>2]](a,q[ih+8>>2]);P=ih+16|0;}function Gg(a,fh,jh){a=a|0;fh=fh|0;jh=x(jh);var kh=0;kh=P-16|0;P=kh;q[kh+12>>2]=a;q[kh+8>>2]=fh;u[kh+4>>2]=jh;a=q[kh+12>>2];n[q[q[a>>2]+20>>2]](a,q[kh+8>>2],u[kh+4>>2]);P=kh+16|0;}function Hg(a,fh){a=a|0;fh=fh|0;var jh=0;jh=P-16|0;P=jh;q[jh+12>>2]=a;q[jh+8>>2]=fh;a=q[jh+12>>2];n[q[q[a>>2]+16>>2]](a,q[jh+8>>2]);P=jh+16|0;}function Ig(a,fh){var lh=0;lh=P-16|0;P=lh;q[lh+12>>2]=a;q[lh+8>>2]=fh;Wr(q[lh+12>>2],q[lh+8>>2]);P=lh+16|0;}function Jg(a,fh){var mh=0;mh=P-16|0;P=mh;q[mh+12>>2]=a;q[mh+8>>2]=fh;Zr(q[mh+12>>2],q[mh+8>>2]);P=mh+16|0;}function Kg(a){var fh=0;fh=P-16|0;q[fh+12>>2]=a;a=q[fh+12>>2];q[a>>2]=1904;u[a+4>>2]=1;q[a+8>>2]=0;p[a+12>>1]=1;p[a+14>>1]=65535;q[a+16>>2]=-1;q[a+20>>2]=0;o[a+24|0]=0;}function Lg(a,nh){var oh=0,ph=0;ph=P-16|0;P=ph;q[ph+8>>2]=a;q[ph+4>>2]=nh;a=q[ph+8>>2];q[ph+12>>2]=a;oh=a+48|0;nh=a;while(1){q[(P-16|0)+12>>2]=nh;nh=nh+16|0;if((oh|0)!=(nh|0)){continue}break}nh=q[ph+4>>2];oh=q[nh+4>>2];q[a>>2]=q[nh>>2];q[a+4>>2]=oh;oh=q[nh+12>>2];q[a+8>>2]=q[nh+8>>2];q[a+12>>2]=oh;nh=q[ph+4>>2];oh=q[nh+20>>2];q[a+16>>2]=q[nh+16>>2];q[a+20>>2]=oh;oh=q[nh+28>>2];q[a+24>>2]=q[nh+24>>2];q[a+28>>2]=oh;nh=q[ph+4>>2];oh=q[nh+36>>2];q[a+32>>2]=q[nh+32>>2];q[a+36>>2]=oh;oh=q[nh+44>>2];q[a+40>>2]=q[nh+40>>2];q[a+44>>2]=oh;P=ph+16|0;}function Mg(a,nh){var qh=0;qh=P-16|0;P=qh;q[qh+12>>2]=a;q[qh+8>>2]=nh;nh=P-16|0;a=q[qh+12>>2];q[nh+12>>2]=a;if(q[q[nh+12>>2]+8>>2]<q[qh+8>>2]){q[qh+4>>2]=hg(a,q[qh+8>>2]);nh=P-16|0;q[nh+12>>2]=a;gg(a,q[q[nh+12>>2]+4>>2],q[qh+4>>2]);nh=P-16|0;q[nh+12>>2]=a;Gc(a,q[q[nh+12>>2]+4>>2]);Fc(a);o[a+16|0]=1;q[a+12>>2]=q[qh+4>>2];q[a+8>>2]=q[qh+8>>2];}P=qh+16|0;}function Ng(a){var nh=0;nh=P-16|0;q[nh+12>>2]=a;a=q[nh+12>>2];q[a>>2]=0;q[a+4>>2]=0;q[a+8>>2]=4096;q[a+12>>2]=4096;q[a+16>>2]=0;q[a+20>>2]=1;}function Og(a){a=a|0;var rh=0;rh=P-16|0;q[rh+12>>2]=a;return q[q[rh+12>>2]+4>>2]}function Pg(a,sh){a=a|0;sh=sh|0;var th=0;th=P-16|0;P=th;q[th+12>>2]=a;q[th+8>>2]=sh;a=q[th+12>>2];n[q[q[a>>2]+60>>2]](a,q[th+8>>2]);P=th+16|0;}function Qg(a,sh,uh){var vh=0;vh=P-32|0;P=vh;q[vh+28>>2]=a;q[vh+24>>2]=sh;q[vh+20>>2]=uh;sh=P-16|0;a=q[vh+28>>2];q[sh+12>>2]=a;q[vh+16>>2]=q[q[sh+12>>2]+4>>2];a:{if(q[vh+24>>2]<q[vh+16>>2]){q[vh+12>>2]=q[vh+24>>2];while(1){if(q[vh+12>>2]<q[vh+16>>2]){q[vh+12>>2]=q[vh+12>>2]+1;continue}break}break a}if(q[vh+24>>2]>q[vh+16>>2]){Mg(a,q[vh+24>>2]);}q[vh+8>>2]=q[vh+16>>2];while(1){if(q[vh+8>>2]<q[vh+24>>2]){q[q[a+12>>2]+(q[vh+8>>2]<<2)>>2]=q[q[vh+20>>2]>>2];q[vh+8>>2]=q[vh+8>>2]+1;continue}break}}q[a+4>>2]=q[vh+24>>2];P=vh+32|0;}function Rg(a){a=a|0;var sh=0;sh=P-16|0;q[sh+12>>2]=a;return q[sh+12>>2]+48|0}function Sg(a){a=a|0;var uh=0;uh=P-16|0;q[uh+12>>2]=a;return q[uh+12>>2]+28|0}function Tg(a,wh){a=a|0;wh=wh|0;var xh=0;xh=P-16|0;q[xh+12>>2]=a;q[xh+8>>2]=wh;wh=q[xh+12>>2];a=q[xh+8>>2];xh=q[a+4>>2];q[wh+64>>2]=q[a>>2];q[wh+68>>2]=xh;xh=q[a+12>>2];q[wh+72>>2]=q[a+8>>2];q[wh+76>>2]=xh;}function Ug(a){a=a|0;var wh=0;wh=P-16|0;q[wh+12>>2]=a;return q[wh+12>>2]- -64|0}function Vg(a,yh,zh,Ah,Bh){var Ch=0;Ch=P-32|0;P=Ch;q[Ch+28>>2]=a;u[Ch+24>>2]=yh;q[Ch+20>>2]=zh;q[Ch+16>>2]=Ah;q[Ch+12>>2]=Bh;a=q[Ch+28>>2];u[a>>2]=u[Ch+24>>2];q[a+4>>2]=q[Ch+20>>2];ya(a+8|0);q[a+72>>2]=q[Ch+16>>2];zh=q[Ch+12>>2];Ah=q[zh+4>>2];q[a+76>>2]=q[zh>>2];q[a+80>>2]=Ah;Ah=q[zh+12>>2];q[a+84>>2]=q[zh+8>>2];q[a+88>>2]=Ah;u[a+92>>2]=0;u[a+96>>2]=0;u[a+100>>2]=.5;u[a+104>>2]=0;u[a+108>>2]=0;u[a+112>>2]=0;u[a+116>>2]=.800000011920929;u[a+120>>2]=1;o[a+124|0]=0;u[a+128>>2]=.004999999888241291;u[a+132>>2]=.009999999776482582;u[a+136>>2]=.009999999776482582;u[a+140>>2]=.009999999776482582;Ba(a+8|0);P=Ch+32|0;}function Wg(a,yh){a=a|0;yh=yh|0;var zh=0;zh=P-16|0;q[zh+12>>2]=a;q[zh+8>>2]=yh;q[q[zh+12>>2]>>2]=q[zh+8>>2];}function Xg(a){a=a|0;var yh=0;yh=P-16|0;q[yh+12>>2]=a;return q[q[yh+12>>2]>>2]}function Yg(a,Ah){a=a|0;Ah=Ah|0;var Bh=0;Bh=P-16|0;q[Bh+12>>2]=a;q[Bh+8>>2]=Ah;q[q[Bh+12>>2]+4>>2]=q[Bh+8>>2];}function Zg(a,Ah){a=a|0;Ah=Ah|0;var Dh=0;Dh=P-16|0;P=Dh;q[Dh+12>>2]=a;q[Dh+8>>2]=Ah;Ah=q[Dh+8>>2];a=P-16|0;q[a+12>>2]=q[Dh+12>>2];q[a+8>>2]=Ah;P=Dh+16|0;return q[q[q[a+12>>2]+12>>2]+(q[a+8>>2]<<2)>>2]}function _g(a,Ah){a=a|0;Ah=x(Ah);var Eh=0;Eh=P-16|0;P=Eh;q[Eh+12>>2]=a;u[Eh+8>>2]=Ah;Ah=u[Eh+8>>2];a=P-16|0;q[a+12>>2]=q[Eh+12>>2];u[a+8>>2]=Ah;u[q[a+12>>2]+12>>2]=u[a+8>>2];P=Eh+16|0;}function $g(a){a=a|0;var Ah=0;Ah=P-16|0;P=Ah;q[Ah+12>>2]=a;a=P-16|0;q[a+12>>2]=q[Ah+12>>2];P=Ah+16|0;return x(u[q[a+12>>2]+12>>2])}function ah(a){var Fh=0,Gh=0;Fh=P-16|0;P=Fh;q[Fh+12>>2]=a;Gh=P-16|0;a=q[Fh+12>>2];q[Gh+12>>2]=a;Gc(a,q[q[Gh+12>>2]+4>>2]);Fc(a);ih(a);P=Fh+16|0;}function bh(a,Hh){a=a|0;Hh=Hh|0;var Ih=0;Ih=P-16|0;P=Ih;q[Ih+12>>2]=a;q[Ih+8>>2]=Hh;a=Wu(q[Ih+12>>2],q[Ih+8>>2]);P=Ih+16|0;return a|0}function ch(a){a=a|0;var Hh=0;Hh=P-16|0;P=Hh;q[Hh+12>>2]=a;a=Xu(q[Hh+12>>2]);P=Hh+16|0;return a|0}function dh(a,Jh){a=a|0;Jh=Jh|0;var Kh=0;Kh=P-16|0;P=Kh;q[Kh+12>>2]=a;q[Kh+8>>2]=Jh;a=q[Kh+12>>2];a=n[q[q[a>>2]+40>>2]](a,q[Kh+8>>2])|0;P=Kh+16|0;return a|0}function eh(a){a=a|0;var Jh=0;Jh=P-16|0;P=Jh;q[Jh+12>>2]=a;a=$u();P=Jh+16|0;return a|0}function fh(a){a=a|0;var Lh=0;Lh=P-16|0;P=Lh;q[Lh+12>>2]=a;a=P-16|0;q[a+12>>2]=q[Lh+12>>2];P=Lh+16|0;return q[a+12>>2]+92|0}function gh(a,Mh){a=a|0;Mh=Mh|0;var Nh=0;Nh=P-16|0;P=Nh;q[Nh+12>>2]=a;q[Nh+8>>2]=Mh;a=q[Nh+12>>2];n[q[q[a>>2]+68>>2]](a,q[Nh+8>>2]);P=Nh+16|0;}function hh(a,Mh){a=a|0;Mh=Mh|0;var Oh=0;Oh=P-16|0;P=Oh;q[Oh+12>>2]=a;q[Oh+8>>2]=Mh;a=q[Oh+12>>2];n[q[q[a>>2]+12>>2]](a,q[Oh+8>>2]);P=Oh+16|0;}function ih(a){var Mh=0;Mh=P-16|0;q[Mh+12>>2]=a;a=q[Mh+12>>2];o[a+16|0]=1;q[a+12>>2]=0;q[a+4>>2]=0;q[a+8>>2]=0;}function jh(a,Ph){a=a|0;Ph=Ph|0;var Qh=0;Qh=P-16|0;P=Qh;q[Qh+12>>2]=a;q[Qh+8>>2]=Ph;cv(q[Qh+12>>2],q[Qh+8>>2]);P=Qh+16|0;}function kh(a,Ph,Rh,Sh){var Th=0,Uh=0,Vh=0,Wh=0;Uh=q[a+4>>2];a=q[a>>2];Vh=a;Wh=Ph;Th=0;a:{if(!Rh){break a}Ph=Uh>>8;Th=Ph;if(!(Uh&1)){break a}Th=q[Ph+q[Rh>>2]>>2];}n[q[q[a>>2]+28>>2]](Vh,Wh,Th+Rh|0,Uh&2?Sh:2);}function lh(a,Ph){a=a|0;Ph=Ph|0;var Rh=0;Rh=P-16|0;P=Rh;q[Rh+12>>2]=a;q[Rh+8>>2]=Ph;qv(q[Rh+12>>2],q[Rh+8>>2]);P=Rh+16|0;}function mh(a){var q=0,Ph=x(0),Sh=0,Xh=0,Yh=x(0),Zh=x(0);Xh=(j(a),e(0));q=Xh&2147483647;a:{if(q>>>0>=1283457024){if(q>>>0>2139095040){break a}return (Xh|0)<0?x(-1.570796251296997):x(1.570796251296997)}b:{if(q>>>0<=1054867455){Sh=-1;if(q>>>0>=964689920){break b}break a}a=x(y(a));if(q>>>0<=1066926079){if(q>>>0<=1060110335){a=x(x(x(a+a)+x(-1))/x(a+x(2)));Sh=0;break b}a=x(x(a+x(-1))/x(a+x(1)));Sh=1;break b}if(q>>>0<=1075576831){a=x(x(a+x(-1.5))/x(x(a*x(1.5))+x(1)));Sh=2;break b}a=x(x(-1)/a);Sh=3;}q=Sh;Yh=x(a*a);Ph=x(Yh*Yh);Zh=x(Ph*x(x(Ph*x(-.106480173766613))+x(-.19999158382415771)));Ph=x(Yh*x(x(Ph*x(x(Ph*x(.06168760731816292))+x(.14253635704517365)))+x(.333333283662796)));if((q|0)<=-1){return x(a-x(a*x(Zh+Ph)))}q=q<<2;a=x(u[q+20528>>2]-x(x(x(a*x(Zh+Ph))-u[q+20544>>2])-a));a=(Xh|0)<0?x(-a):a;}return a}function nh(a,_h){var $h=0,ai=0,bi=0,ci=0,di=0,ei=0;bi=P-16|0;P=bi;ci=(j(a),e(0));$h=ci&2147483647;a:{if($h>>>0<=1305022426){di=+a;ai=di*.6366197723675814+6755399441055744+ -6755399441055744;v[_h>>3]=di+ai*-1.5707963109016418+ai*-1.5893254773528196e-8;if(y(ai)<2147483648){$h=~~ai;break a}$h=-2147483648;break a}if($h>>>0>=2139095040){v[_h>>3]=x(a-a);$h=0;break a}ei=$h;$h=($h>>>23)+ -150|0;v[bi+8>>3]=(f(0,ei-($h<<23)|0),k());$h=xv(bi+8|0,bi,$h);ai=v[bi>>3];if((ci|0)<=-1){v[_h>>3]=-ai;$h=0-$h|0;break a}v[_h>>3]=ai;}P=bi+16|0;return $h}function oh(a){var _h=0;_h=r[a+74|0];o[a+74|0]=_h+ -1|_h;_h=q[a>>2];if(_h&8){q[a>>2]=_h|32;return -1}q[a+4>>2]=0;q[a+8>>2]=0;_h=q[a+44>>2];q[a+28>>2]=_h;q[a+20>>2]=_h;q[a+16>>2]=_h+q[a+48>>2];return 0}function ph(a){var fi=0,gi=0,hi=0;fi=P-16|0;P=fi;o[fi+15|0]=10;gi=q[a+16>>2];a:{if(!gi){if(oh(a)){break a}gi=q[a+16>>2];}hi=q[a+20>>2];if(!(o[a+75|0]==10|hi>>>0>=gi>>>0)){q[a+20>>2]=hi+1;o[hi|0]=10;break a}if((n[q[a+36>>2]](a,fi+15|0,1)|0)!=1){break a}}P=fi+16|0;}function qh(a,ii,ji){a:{b:{if(ii>>>0>20){break b}ii=ii+ -9|0;if(ii>>>0>9){break b}c:{switch(ii-1|0){default:ii=q[ji>>2];q[ji>>2]=ii+4;q[a>>2]=q[ii>>2];return;case 0:ii=q[ji>>2];q[ji>>2]=ii+4;ii=q[ii>>2];q[a>>2]=ii;q[a+4>>2]=ii>>31;return;case 1:ii=q[ji>>2];q[ji>>2]=ii+4;q[a>>2]=q[ii>>2];q[a+4>>2]=0;return;case 3:ii=q[ji>>2];q[ji>>2]=ii+4;ii=p[ii>>1];q[a>>2]=ii;q[a+4>>2]=ii>>31;return;case 4:ii=q[ji>>2];q[ji>>2]=ii+4;q[a>>2]=s[ii>>1];q[a+4>>2]=0;return;case 5:ii=q[ji>>2];q[ji>>2]=ii+4;ii=o[ii|0];q[a>>2]=ii;q[a+4>>2]=ii>>31;return;case 6:ii=q[ji>>2];q[ji>>2]=ii+4;q[a>>2]=r[ii|0];q[a+4>>2]=0;return;case 2:case 7:break a;case 8:break c}}n[738](a,ji);}return}ii=q[ji>>2]+7&-8;q[ji>>2]=ii+8;ji=q[ii+4>>2];q[a>>2]=q[ii>>2];q[a+4>>2]=ji;}function rh(a){var ii=0,ji=0,ki=0;if(o[q[a>>2]]+ -48>>>0<10){while(1){ii=q[a>>2];ki=o[ii|0];q[a>>2]=ii+1;ji=(w(ji,10)+ki|0)+ -48|0;if(o[ii+1|0]+ -48>>>0<10){continue}break}}return ji}function sh(a,li){var mi=0,ni=0,oi=0;h(+a);mi=e(1)|0;ni=e(0)|0;oi=mi;mi=mi>>>20&2047;if((mi|0)!=2047){if(!mi){mi=li;if(a==0){li=0;}else {a=sh(a*0x10000000000000000,li);li=q[li>>2]+ -64|0;}q[mi>>2]=li;return a}q[li>>2]=mi+ -1022;f(0,ni|0);f(1,oi&-2146435073|1071644672);a=+g();}return a}function th(a,li){if(!a){return 0}return Jv(a,li)}function uh(a,li){a=a|0;li=li|0;var pi=0;pi=P-16|0;P=pi;q[pi+12>>2]=a;q[pi+8>>2]=li;Gv(q[pi+12>>2],q[pi+8>>2]);P=pi+16|0;}function vh(a,li,qi){var ri=0,si=0,ti=0,ui=0,vi=0,wi=0,xi=0,yi=0,zi=0,Ai=0,Bi=0,Ci=0,Di=0,Ei=0,Fi=0,Gi=0;ri=P-144|0;P=ri;a:{if((qi|0)<=0){li=q[a+12>>2];if(li){if(r[a+16|0]){if(li){q[6658]=q[6658]+1;n[q[5256]](li);}}q[a+12>>2]=0;}q[a+12>>2]=0;o[a+16|0]=1;q[a+4>>2]=0;q[a+8>>2]=0;li=q[a+32>>2];if(li){if(r[a+36|0]){if(li){q[6658]=q[6658]+1;n[q[5256]](li);}}q[a+32>>2]=0;}q[a+32>>2]=0;q[a+24>>2]=0;q[a+28>>2]=0;o[a+36|0]=1;li=q[a+52>>2];if(li){if(r[a+56|0]){if(li){q[6658]=q[6658]+1;n[q[5256]](li);}}q[a+52>>2]=0;}q[a+52>>2]=0;q[a+44>>2]=0;q[a+48>>2]=0;o[a+56|0]=1;break a}o[ri+112|0]=1;q[ri+88>>2]=0;q[ri+92>>2]=256;q[ri+72>>2]=0;q[ri+76>>2]=256;q[ri+56>>2]=0;q[ri+60>>2]=256;q[ri+108>>2]=0;q[ri+100>>2]=0;q[ri+104>>2]=0;q[ri+80>>2]=0;q[ri+84>>2]=0;q[ri+64>>2]=0;q[ri+68>>2]=0;q[ri+48>>2]=0;q[ri+52>>2]=0;Ov(ri+16|0,li,qi);qi=q[a+4>>2];if((qi|0)<=-1){if(q[a+8>>2]<=-1){li=q[a+12>>2];if(li){if(r[a+16|0]){if(li){q[6658]=q[6658]+1;n[q[5256]](li);}}q[a+12>>2]=0;}o[a+16|0]=1;q[a+8>>2]=0;q[a+12>>2]=0;}while(1){li=q[ri+4>>2];si=q[a+12>>2]+(qi<<4)|0;q[si>>2]=q[ri>>2];q[si+4>>2]=li;li=q[ri+12>>2];q[si+8>>2]=q[ri+8>>2];q[si+12>>2]=li;li=qi+1|0;si=li>>>0>=qi>>>0;qi=li;if(si){continue}break}}q[a+4>>2]=0;q[ri+8>>2]=0;q[ri>>2]=0;q[ri+4>>2]=0;qi=q[a+24>>2];if((qi|0)<=-1){if(q[a+28>>2]<=-1){li=q[a+32>>2];if(li){if(r[a+36|0]){if(li){q[6658]=q[6658]+1;n[q[5256]](li);}}q[a+32>>2]=0;}q[a+28>>2]=0;q[a+32>>2]=0;o[a+36|0]=1;}while(1){li=q[ri+4>>2];si=q[a+32>>2]+w(qi,12)|0;q[si>>2]=q[ri>>2];q[si+4>>2]=li;q[si+8>>2]=q[ri+8>>2];li=qi+1|0;si=li>>>0>=qi>>>0;qi=li;if(si){continue}break}}q[a+24>>2]=0;qi=q[a+44>>2];if((qi|0)<=-1){li=q[a+52>>2];if(q[a+48>>2]<=-1){if(!(!li|!r[a+56|0])){if(li){q[6658]=q[6658]+1;n[q[5256]](li);}}o[a+56|0]=1;q[a+48>>2]=0;q[a+52>>2]=0;li=0;}si=li;li=qi<<2;_(si+li|0,0,0-li|0);}q[a+44>>2]=0;li=q[ri+140>>2];b:{if(q[li+104>>2]>-1){break b}q[li+104>>2]=0;q[6657]=q[6657]+1;Ci=n[q[5255]](4,16)|0;q[Ci>>2]=li;qi=0;xi=1;zi=1;Fi=Ci;while(1){Gi=qi;ui=q[(qi<<2)+Ci>>2];Nv(ri,ri+16|0,ui);si=q[a+4>>2];c:{if((si|0)!=q[a+8>>2]){break c}Di=si?si<<1:1;if((si|0)>=(Di|0)){break c}qi=0;ti=0;if(Di){q[6657]=q[6657]+1;ti=n[q[5255]](Di<<4,16)|0;si=q[a+4>>2];}if((si|0)>=1){while(1){li=qi<<4;wi=li+ti|0;vi=li+q[a+12>>2]|0;li=q[vi+4>>2];q[wi>>2]=q[vi>>2];q[wi+4>>2]=li;li=q[vi+12>>2];q[wi+8>>2]=q[vi+8>>2];q[wi+12>>2]=li;qi=qi+1|0;if((si|0)!=(qi|0)){continue}break}}li=q[a+12>>2];if(li){if(r[a+16|0]){if(li){q[6658]=q[6658]+1;n[q[5256]](li);}}q[a+12>>2]=0;}q[a+12>>2]=ti;o[a+16|0]=1;q[a+8>>2]=Di;si=q[a+4>>2];}li=q[ri+4>>2];qi=q[a+12>>2]+(si<<4)|0;q[qi>>2]=q[ri>>2];q[qi+4>>2]=li;li=q[ri+12>>2];q[qi+8>>2]=q[ri+8>>2];q[qi+12>>2]=li;q[a+4>>2]=q[a+4>>2]+1;Ei=-1;wi=-1;Di=q[ui+8>>2];li=Di;if(li){while(1){qi=q[li+20>>2];if((qi|0)<=-1){si=q[a+24>>2];q[ri+8>>2]=0;q[ri>>2]=0;q[ri+4>>2]=0;qi=si;d:{if((qi|0)!=q[a+28>>2]){break d}yi=qi?qi<<1:1;if((si|0)>=(yi|0)){break d}qi=0;ti=si;ui=0;if(yi){q[6657]=q[6657]+1;ui=n[q[5255]](w(yi,12),16)|0;ti=q[a+24>>2];}if((ti|0)>=1){while(1){vi=w(qi,12);Ai=vi+q[a+32>>2]|0;Bi=ui+vi|0;vi=q[Ai+4>>2];q[Bi>>2]=q[Ai>>2];q[Bi+4>>2]=vi;q[Bi+8>>2]=q[Ai+8>>2];qi=qi+1|0;if((ti|0)!=(qi|0)){continue}break}}qi=q[a+32>>2];if(qi){if(r[a+36|0]){if(qi){q[6658]=q[6658]+1;n[q[5256]](qi);}}q[a+32>>2]=0;}q[a+32>>2]=ui;o[a+36|0]=1;q[a+28>>2]=yi;qi=q[a+24>>2];}ti=q[a+32>>2]+w(qi,12)|0;qi=q[ri+4>>2];q[ti>>2]=q[ri>>2];q[ti+4>>2]=qi;q[ti+8>>2]=q[ri+8>>2];ti=q[a+24>>2]+1|0;q[a+24>>2]=ti;q[ri+8>>2]=0;q[ri>>2]=0;q[ri+4>>2]=0;e:{if(q[a+28>>2]!=(ti|0)){break e}yi=ti?ti<<1:1;if((ti|0)>=(yi|0)){break e}qi=0;ui=0;if(yi){q[6657]=q[6657]+1;ui=n[q[5255]](w(yi,12),16)|0;ti=q[a+24>>2];}if((ti|0)>=1){while(1){vi=w(qi,12);Ai=vi+q[a+32>>2]|0;Bi=ui+vi|0;vi=q[Ai+4>>2];q[Bi>>2]=q[Ai>>2];q[Bi+4>>2]=vi;q[Bi+8>>2]=q[Ai+8>>2];qi=qi+1|0;if((ti|0)!=(qi|0)){continue}break}}qi=q[a+32>>2];if(qi){if(r[a+36|0]){if(qi){q[6658]=q[6658]+1;n[q[5256]](qi);}}q[a+32>>2]=0;}q[a+32>>2]=ui;o[a+36|0]=1;q[a+28>>2]=yi;ti=q[a+24>>2];}qi=q[ri+4>>2];ti=q[a+32>>2]+w(ti,12)|0;q[ti>>2]=q[ri>>2];q[ti+4>>2]=qi;q[ti+8>>2]=q[ri+8>>2];q[a+24>>2]=q[a+24>>2]+1;yi=q[a+32>>2];q[li+20>>2]=si;vi=si+1|0;q[q[li+8>>2]+20>>2]=vi;Ai=w(si,12)+yi|0;q[Ai+16>>2]=-1;q[Ai+4>>2]=1;Bi=q[li+12>>2];qi=q[Bi+104>>2];f:{if((qi|0)>-1){ti=xi;xi=qi;break f}q[Bi+104>>2]=xi;g:{h:{if((xi|0)!=(zi|0)){break h}ui=zi?zi<<1:1;if((zi|0)>=(ui|0)){break h}qi=0;si=0;if(ui){q[6657]=q[6657]+1;si=n[q[5255]](ui<<2,16)|0;}i:{j:{if((zi|0)>=1){while(1){ti=qi<<2;q[ti+si>>2]=q[ti+Ci>>2];qi=qi+1|0;if((zi|0)!=(qi|0)){continue}break j}}if(!Ci){break i}}if(Fi){q[6658]=q[6658]+1;n[q[5256]](Fi);}}Ci=si;break g}si=Fi;ui=zi;}q[(xi<<2)+Ci>>2]=Bi;ti=xi+1|0;Fi=si;zi=ui;}q[Ai+8>>2]=xi;q[(w(vi,12)+yi|0)+8>>2]=Gi;xi=ti;qi=q[li+20>>2];}if((wi|0)>=0){q[q[a+32>>2]+w(qi,12)>>2]=wi-qi;}else {Ei=qi;}wi=qi;li=q[li>>2];if((Di|0)!=(li|0)){continue}break}q[q[a+32>>2]+w(Ei,12)>>2]=wi-Ei;}qi=Gi+1|0;if((qi|0)<(xi|0)){continue}break}xi=0;while(1){ui=q[q[(xi<<2)+Ci>>2]+8>>2];li=ui;if(li){while(1){qi=q[li+20>>2];if((qi|0)>=0){si=q[a+44>>2];k:{if((si|0)!=q[a+48>>2]){break k}wi=si?si<<1:1;if((si|0)>=(wi|0)){break k}qi=0;ti=0;if(wi){q[6657]=q[6657]+1;ti=n[q[5255]](wi<<2,16)|0;si=q[a+44>>2];}Ei=q[a+52>>2];l:{m:{if((si|0)>=1){while(1){zi=qi<<2;q[zi+ti>>2]=q[zi+Ei>>2];qi=qi+1|0;if((si|0)!=(qi|0)){continue}break m}}if(!Ei){break l}}if(r[a+56|0]){qi=Ei;if(qi){q[6658]=q[6658]+1;n[q[5256]](qi);}}q[a+52>>2]=0;si=q[a+44>>2];}q[a+52>>2]=ti;o[a+56|0]=1;q[a+48>>2]=wi;qi=q[li+20>>2];}q[q[a+52>>2]+(si<<2)>>2]=qi;q[a+44>>2]=q[a+44>>2]+1;qi=li;while(1){q[qi+20>>2]=-1;qi=q[q[qi+8>>2]+4>>2];if((qi|0)!=(li|0)){continue}break}}li=q[li>>2];if((ui|0)!=(li|0)){continue}break}}li=(xi|0)==(Gi|0);xi=xi+1|0;if(!li){continue}break}if(!Ci){break b}if(Fi){q[6658]=q[6658]+1;n[q[5256]](Fi);}}Mv(ri+16|0);}P=ri+144|0;}function wh(a,li,qi,Hi,Ii,Ji,Ki){var Li=0,Mi=0,Ni=0,Oi=0,Pi=0,Qi=0,Ri=0,Si=0,Ti=0,Ui=0,Vi=0,Wi=0,Xi=0;Mi=P-48|0;P=Mi;Li=q[qi+8>>2];if(Li){Ti=Li;while(1){if(q[Ti+20>>2]>q[a+100>>2]){Li=q[Ti+12>>2];Qi=q[Li+92>>2];Ri=q[Li+96>>2];Oi=q[qi+88>>2];Pi=q[Li+88>>2];Ni=q[qi+92>>2];Li=q[qi+96>>2];q[Mi+44>>2]=-1;Si=Ri-Li|0;q[Mi+40>>2]=Si;Ni=Qi-Ni|0;q[Mi+36>>2]=Ni;Li=Pi-Oi|0;q[Mi+32>>2]=Li;Ri=Ni;Vi=Ni>>31;Ni=Ii;Oi=JB(Ri,Vi,q[Ni+8>>2],q[Ni+12>>2]);Pi=Q;Qi=Oi;Oi=Li;Wi=Li>>31;Li=JB(Li,Wi,q[Ni>>2],q[Ni+4>>2]);Ni=Qi+Li|0;Qi=Q+Pi|0;Qi=Ni>>>0<Li>>>0?Qi+1|0:Qi;Pi=Si;Xi=Pi>>31;Li=JB(Pi,Xi,q[Ii+16>>2],q[Ii+20>>2]);Si=Li+Ni|0;Ni=Q+Qi|0;Ni=Si>>>0<Li>>>0?Ni+1|0:Ni;Li=Si;Si=Ji;Qi=JB(q[Si+8>>2],q[Si+12>>2],Ri,Vi);Ri=Q;Oi=JB(q[Si>>2],q[Si+4>>2],Oi,Wi);Si=Oi+Qi|0;Ri=Q+Ri|0;Ri=Si>>>0<Oi>>>0?Ri+1|0:Ri;Pi=JB(q[Ji+16>>2],q[Ji+20>>2],Pi,Xi);Oi=Pi+Si|0;Qi=Q+Ri|0;Qi=Oi>>>0<Pi>>>0?Qi+1|0:Qi;Pi=Oi;Oi=Qi;a:{if((Oi|0)>0?1:(Oi|0)>=0?Pi>>>0<1?0:1:0){q[Mi+8>>2]=Pi;q[Mi+12>>2]=Oi;q[Mi+24>>2]=1;Ri=-1;Pi=-1;break a}if((Oi|0)<-1?1:(Oi|0)<=-1?Pi>>>0>4294967295?0:1:0){q[Mi+24>>2]=-1;q[Mi+8>>2]=0-Pi;q[Mi+12>>2]=0-((0<Pi>>>0)+Oi|0);Ri=1;Pi=-1;break a}q[Mi+8>>2]=0;q[Mi+12>>2]=0;q[Mi+24>>2]=0;Ri=0;Pi=0;}b:{c:{d:{Oi=Mi;Si=Mi;if((Ni|0)<0?1:(Ni|0)<=0?Li>>>0>0?0:1:0){if((Ni|0)>-1?1:(Ni|0)>=-1?Li>>>0<=4294967295?0:1:0){break d}q[Mi+24>>2]=Ri;Ni=0-((0<Li>>>0)+Ni|0)|0;Li=0-Li|0;}q[Si+16>>2]=Li;q[Oi+20>>2]=Ni;break c}q[Mi+16>>2]=0;q[Mi+20>>2]=0;if(!Pi){break b}}if(!Ui){Li=q[Mi+12>>2];q[Ki>>2]=q[Mi+8>>2];q[Ki+4>>2]=Li;q[Ki+16>>2]=q[Mi+24>>2];Li=q[Mi+20>>2];q[Ki+8>>2]=q[Mi+16>>2];q[Ki+12>>2]=Li;Ui=Ti;break b}Li=Db(Mi+8|0,Ki);if((Li|0)<=-1){Li=q[Mi+12>>2];q[Ki>>2]=q[Mi+8>>2];q[Ki+4>>2]=Li;q[Ki+16>>2]=q[Mi+24>>2];Li=q[Mi+20>>2];q[Ki+8>>2]=q[Mi+16>>2];q[Ki+12>>2]=Li;Ui=Ti;break b}if(Li){break b}Ui=(pe(Ui,Ti,Hi,Mi+32|0)|0)!=2^li?Ti:Ui;}Li=q[qi+8>>2];}Ti=q[Ti>>2];if((Ti|0)!=(Li|0)){continue}break}}P=Mi+48|0;return Ui}function xh(a,li,qi,Hi,Ii){var Ji=0,Ki=0,Yi=0,Zi=0,_i=0,$i=0,aj=0,bj=0,cj=0,dj=0,ej=0,fj=0,gj=0,hj=0,ij=0,jj=0,kj=0,lj=0,mj=0,nj=0,oj=0,pj=0,qj=0,rj=0,sj=0,tj=0,uj=0,vj=0,wj=0,xj=0,yj=0,zj=0,Aj=0,Bj=0,Cj=0,Dj=0,Ej=0,Fj=0,Gj=0,Hj=0,Ij=0,Jj=0;Yi=P-48|0;P=Yi;hj=q[Ii>>2];fj=li;pj=q[Hi>>2];if(pj){fj=q[pj+12>>2];}nj=q[fj+96>>2];aj=q[li+96>>2];Ej=q[qi+96>>2]-aj|0;Ji=q[(pj?pj:hj)+12>>2];bj=q[li+92>>2];Ki=q[Ji+92>>2]-bj|0;$i=qi;yj=q[qi+92>>2]-bj|0;jj=q[Ji+96>>2]-aj|0;qi=w(Ej,Ki)-w(yj,jj)|0;zj=qi;Aj=qi>>31;qi=Ej;kj=qi>>31;cj=JB(zj,Aj,qi,kj);mj=Q;_i=q[li+88>>2];Zi=q[Ji+88>>2]-_i|0;Fj=q[$i+88>>2]-_i|0;li=w(Zi,yj)-w(Ki,Fj)|0;Bj=li;Cj=li>>31;li=Fj;dj=li>>31;Ji=JB(Bj,Cj,li,dj);uj=cj-Ji|0;vj=mj-(Q+(cj>>>0<Ji>>>0)|0)|0;tj=q[fj+92>>2];cj=tj;Ki=JB(uj,vj,cj,cj>>31);mj=Q;cj=yj;qj=cj>>31;Ji=JB(Bj,Cj,cj,qj);sj=Q;ej=Ki;Ki=w(li,jj)-w(qi,Zi)|0;Gj=Ki;Dj=Ki>>31;qi=JB(Ki,Dj,qi,kj);wj=Ji-qi|0;sj=sj-(Q+(Ji>>>0<qi>>>0)|0)|0;fj=q[fj+88>>2];qi=fj;Ji=JB(wj,sj,qi,qi>>31);qi=ej+Ji|0;Ki=Q+mj|0;Ki=qi>>>0<Ji>>>0?Ki+1|0:Ki;li=JB(li,dj,Gj,Dj);Ji=Q;ej=qi;qi=JB(cj,qj,zj,Aj);qj=li-qi|0;xj=Ji-(Q+(li>>>0<qi>>>0)|0)|0;qi=JB(qj,xj,nj,nj>>31);li=ej+qi|0;Ji=Q+Ki|0;cj=li;qi=li>>>0<qi>>>0?Ji+1|0:Ji;li=JB(zj,Aj,_i,_i>>31);Ji=Q;aj=JB(Bj,Cj,aj,aj>>31);li=aj+li|0;Ji=Q+Ji|0;Ji=li>>>0<aj>>>0?Ji+1|0:Ji;aj=JB(Gj,Dj,bj,bj>>31);li=aj+li|0;Ji=Q+Ji|0;oj=li;dj=li>>>0<aj>>>0?Ji+1|0:Ji;$i=hj?q[hj+12>>2]:$i;jj=q[$i+96>>2];kj=q[$i+92>>2];mj=q[$i+88>>2];li=hj;a:{if(!pj){break a}li=hj;if(!q[pj+12>>2]){break a}li=q[q[pj+8>>2]+4>>2];_i=q[li+12>>2];Ji=_i;aj=q[Ji+92>>2];bj=aj;aj=aj>>31;$i=JB(bj,aj,Gj,Dj);Ki=Q;ej=$i;Ji=q[Ji+88>>2];lj=Ji;ij=Ji>>31;$i=JB(Ji,ij,zj,Aj);Ji=ej+$i|0;Ki=Q+Ki|0;Ki=Ji>>>0<$i>>>0?Ki+1|0:Ki;Zi=Ji;Ji=q[_i+96>>2];ej=Ji;gj=Ji>>31;$i=JB(Ji,gj,Bj,Cj);_i=Zi+$i|0;Ji=Q+Ki|0;Ji=_i>>>0<$i>>>0?Ji+1|0:Ji;b:{if((Ji|0)<(dj|0)?1:(Ji|0)<=(dj|0)?_i>>>0>=oj>>>0?0:1:0){break b}$i=li+12|0;rj=q[a+100>>2];while(1){if((rj|0)==q[li+20>>2]){break b}Ji=JB(bj,aj,uj,vj);bj=Q;_i=JB(lj,ij,wj,sj);aj=_i+Ji|0;Ji=Q+bj|0;Ji=aj>>>0<_i>>>0?Ji+1|0:Ji;bj=JB(ej,gj,qj,xj);aj=bj+aj|0;Ki=Q+Ji|0;Ki=aj>>>0<bj>>>0?Ki+1|0:Ki;Ji=Ki;if((Ji|0)<(qi|0)?1:(Ji|0)<=(qi|0)?aj>>>0>cj>>>0?0:1:0){break b}q[Hi>>2]=li;qi=q[$i>>2];nj=q[qi+96>>2];tj=q[qi+92>>2];fj=q[qi+88>>2];if(qi){li=q[q[li+8>>2]+4>>2];$i=li+12|0;cj=aj;qi=Ji;Ki=q[li+12>>2];Ji=Ki;aj=q[Ji+92>>2];bj=aj;aj=aj>>31;_i=JB(bj,aj,Gj,Dj);Zi=Q;Ji=q[Ji+88>>2];lj=Ji;ij=Ji>>31;ej=JB(Ji,ij,zj,Aj);_i=ej+_i|0;Ji=Q+Zi|0;Ji=_i>>>0<ej>>>0?Ji+1|0:Ji;Zi=_i;_i=q[Ki+96>>2];ej=_i;gj=_i>>31;Ki=JB(_i,gj,Bj,Cj);_i=Zi+Ki|0;Zi=Q+Ji|0;Zi=_i>>>0<Ki>>>0?Zi+1|0:Zi;if((Zi|0)<(dj|0)?1:(Zi|0)<=(dj|0)?_i>>>0>=oj>>>0?0:1:0){break b}continue}break}cj=aj;qi=Ji;}li=q[Ii>>2];}Ji=JB(uj,vj,kj,kj>>31);aj=Q;bj=JB(wj,sj,mj,mj>>31);Ji=bj+Ji|0;Ki=Q+aj|0;Ki=Ji>>>0<bj>>>0?Ki+1|0:Ki;bj=JB(qj,xj,jj,jj>>31);aj=bj+Ji|0;Ji=Q+Ki|0;Ji=aj>>>0<bj>>>0?Ji+1|0:Ji;bj=aj;aj=Ji;c:{if(!li){li=0;break c}if(!q[li+12>>2]){break c}$i=q[q[li+8>>2]>>2];_i=q[$i+12>>2];Ji=_i;Ki=q[Ji+92>>2];lj=Ki;ij=Ki>>31;Ki=JB(Ki,ij,Gj,Dj);Zi=Q;Hj=Ki;Ji=q[Ji+88>>2];ej=Ji;gj=Ji>>31;Ki=JB(Ji,gj,zj,Aj);Ji=Hj+Ki|0;Zi=Q+Zi|0;Zi=Ji>>>0<Ki>>>0?Zi+1|0:Zi;Hj=Ji;Ji=q[_i+96>>2];Ki=Ji;rj=Ji>>31;Ij=JB(Ji,rj,Bj,Cj);_i=Hj+Ij|0;Ji=Q+Zi|0;Ji=_i>>>0<Ij>>>0?Ji+1|0:Ji;if((Ji|0)<(dj|0)?1:(Ji|0)<=(dj|0)?_i>>>0>=oj>>>0?0:1:0){break c}Ij=$i+12|0;Jj=q[a+100>>2];while(1){_i=$i;if((Jj|0)==q[_i+20>>2]){break c}Ji=JB(lj,ij,uj,vj);Zi=Q;lj=JB(ej,gj,wj,sj);$i=lj+Ji|0;Ji=Q+Zi|0;Ji=$i>>>0<lj>>>0?Ji+1|0:Ji;Ki=JB(qj,xj,Ki,rj);$i=Ki+$i|0;Zi=Q+Ji|0;Zi=$i>>>0<Ki>>>0?Zi+1|0:Zi;Ki=$i;Ji=Zi;if((Ji|0)<(aj|0)?1:(Ji|0)<=(aj|0)?Ki>>>0>bj>>>0?0:1:0){break c}q[Ii>>2]=_i;li=q[Ij>>2];jj=q[li+96>>2];kj=q[li+92>>2];mj=q[li+88>>2];if(li){$i=q[q[_i+8>>2]>>2];Ij=$i+12|0;bj=Ki;aj=Ji;li=_i;Ki=q[$i+12>>2];Ji=Ki;_i=q[Ji+92>>2];lj=_i;ij=_i>>31;_i=JB(_i,ij,Gj,Dj);Zi=Q;Ji=q[Ji+88>>2];ej=Ji;gj=Ji>>31;rj=JB(Ji,gj,zj,Aj);_i=rj+_i|0;Ji=Q+Zi|0;Ji=_i>>>0<rj>>>0?Ji+1|0:Ji;Hj=_i;_i=q[Ki+96>>2];Ki=_i;rj=Ki>>31;Zi=JB(Ki,rj,Bj,Cj);_i=Hj+Zi|0;Ji=Q+Ji|0;Ji=_i>>>0<Zi>>>0?Ji+1|0:Ji;if((Ji|0)<(dj|0)?1:(Ji|0)<=(dj|0)?_i>>>0>=oj>>>0?0:1:0){break c}continue}break}li=_i;bj=Ki;aj=Ji;}d:{qi=aj-((bj>>>0<cj>>>0)+qi|0)|0;cj=bj-cj|0;if((qi|0)>0?1:(qi|0)>=0?cj>>>0<1?0:1:0){while(1){dj=(w(kj-tj|0,yj)+w(mj-fj|0,Fj)|0)+w(jj-nj|0,Ej)|0;li=dj;aj=li;lj=li>>31;e:{ij=q[Hi>>2];if(!ij|!q[ij+12>>2]){break e}ej=q[q[ij>>2]+8>>2];if(q[ej+20>>2]<=q[a+100>>2]){break e}li=q[ej+12>>2];bj=q[li+92>>2];Ji=bj-tj|0;_i=q[li+88>>2];Ki=_i-fj|0;$i=q[li+96>>2];li=$i-nj|0;hj=(w(Ji,yj)+w(Ki,Fj)|0)+w(li,Ej)|0;Ji=JB(uj,vj,Ji,Ji>>31);Zi=Q;gj=JB(wj,sj,Ki,Ki>>31);Ki=gj+Ji|0;Ji=Q+Zi|0;Ji=Ki>>>0<gj>>>0?Ji+1|0:Ji;Zi=Ki;Ki=JB(qj,xj,li,li>>31);li=Zi+Ki|0;Ji=Q+Ji|0;Ji=li>>>0<Ki>>>0?Ji+1|0:Ji;Ki=li;Zi=Ji;f:{if(!(Ji|li)){if((hj|0)<0){break f}break e}if((Zi|0)>-1?1:(Zi|0)>=-1?Ki>>>0<=4294967295?0:1:0){break e}li=hj;gj=li>>31;Ji=Yi;g:{if((li|0)>=1){q[Yi+24>>2]=li;q[Yi+28>>2]=gj;q[Yi+40>>2]=1;li=-1;break g}if((hj|0)<=-1){q[Yi+40>>2]=-1;q[Yi+24>>2]=0-li;q[Yi+28>>2]=0-((0<li>>>0)+gj|0);li=1;break g}q[Yi+24>>2]=0;q[Yi+28>>2]=0;q[Yi+40>>2]=0;li=0;}q[Ji+40>>2]=li;q[Yi+32>>2]=0-Ki;q[Yi+36>>2]=0-((0<Ki>>>0)+Zi|0);h:{if((dj|0)>=1){q[Yi>>2]=aj;q[Yi+4>>2]=lj;q[Yi+16>>2]=1;Ki=-1;break h}if((dj|0)<=-1){q[Yi+16>>2]=-1;li=aj;q[Yi>>2]=0-li;q[Yi+4>>2]=0-((0<li>>>0)+lj|0);Ki=1;break h}q[Yi>>2]=0;q[Yi+4>>2]=0;q[Yi+16>>2]=0;Ki=0;}hj=Yi;Ji=qi;li=cj;Zi=Ji;i:{if((Ji|0)>0?1:(Ji|0)>=0?li>>>0<=0?0:1:0){break i}li=0;Zi=0;if((qi|0)>-1?1:(qi|0)>=-1?cj>>>0<=4294967295?0:1:0){break i}q[Yi+16>>2]=Ki;Ji=cj;li=0-Ji|0;Zi=0-((0<Ji>>>0)+qi|0)|0;}Ji=Zi;q[hj+8>>2]=li;q[hj+12>>2]=Ji;if((Db(Yi+24|0,Yi)|0)<=-1){break e}}q[Hi>>2]=(ij|0)==(pj|0)?0:ej;li=kj-bj|0;li=JB(uj,vj,li,li>>31);qi=Q;Ji=li;li=mj-_i|0;cj=JB(wj,sj,li,li>>31);li=Ji+cj|0;Ji=Q+qi|0;Ji=li>>>0<cj>>>0?Ji+1|0:Ji;Ki=li;li=jj-$i|0;qi=JB(qj,xj,li,li>>31);li=Ki+qi|0;Ji=Q+Ji|0;cj=li;qi=li>>>0<qi>>>0?Ji+1|0:Ji;fj=_i;tj=bj;nj=$i;continue}li=q[Ii>>2];if(!li|!q[li+12>>2]){break d}ij=q[q[li+8>>2]>>2];if(q[ij+20>>2]<=q[a+100>>2]){break d}li=q[ij+12>>2];bj=q[li+92>>2];_i=bj-kj|0;Ji=_i;$i=Ji;hj=Ji>>31;Ji=JB(Ji,hj,Gj,Dj);Ki=Q;Zi=Ji;kj=q[li+88>>2];mj=kj-mj|0;Ji=mj;ej=Ji;gj=Ji>>31;oj=JB(Ji,gj,zj,Aj);Ji=Zi+oj|0;Zi=Q+Ki|0;Zi=Ji>>>0<oj>>>0?Zi+1|0:Zi;Ki=Ji;Ji=q[li+96>>2];jj=Ji-jj|0;li=jj;oj=li;rj=li>>31;li=JB(Bj,Cj,li,rj);if((Ki|0)!=(0-li|0)|(0-(Q+(0<li>>>0)|0)|0)!=(Zi|0)){break d}li=bj-tj|0;li=JB(uj,vj,li,li>>31);bj=Q;Ki=li;li=kj-fj|0;kj=JB(wj,sj,li,li>>31);li=Ki+kj|0;Ki=Q+bj|0;Ki=li>>>0<kj>>>0?Ki+1|0:Ki;Zi=li;li=Ji-nj|0;bj=JB(qj,xj,li,li>>31);li=Zi+bj|0;Ji=Q+Ki|0;Ji=li>>>0<bj>>>0?Ji+1|0:Ji;bj=li;li=Ji;if((Ji|0)<0?1:(Ji|0)<=0?bj>>>0>=1?0:1:0){break d}_i=(w(_i,yj)+w(mj,Fj)|0)+w(jj,Ej)|0;Ji=JB($i,hj,uj,vj);hj=Q;Ki=JB(ej,gj,wj,sj);$i=Ki+Ji|0;Ji=Q+hj|0;Ji=$i>>>0<Ki>>>0?Ji+1|0:Ji;hj=JB(qj,xj,oj,rj);$i=hj+$i|0;Ji=Q+Ji|0;Ji=$i>>>0<hj>>>0?Ji+1|0:Ji;hj=Ji;j:{if(!(Ji|$i)){if((_i|0)<0){break j}break d}if((hj|0)>-1?1:(hj|0)>=-1?$i>>>0<=4294967295?0:1:0){break d}Ji=_i;jj=Ji>>31;Ki=Yi;k:{if((Ji|0)>=1){q[Yi+24>>2]=Ji;q[Yi+28>>2]=jj;q[Yi+40>>2]=1;Ji=-1;break k}if((_i|0)<=-1){q[Yi+40>>2]=-1;q[Yi+24>>2]=0-Ji;q[Yi+28>>2]=0-((0<Ji>>>0)+jj|0);Ji=1;break k}q[Yi+24>>2]=0;q[Yi+28>>2]=0;q[Yi+40>>2]=0;Ji=0;}q[Ki+40>>2]=Ji;q[Yi+32>>2]=0-$i;q[Yi+36>>2]=0-((0<$i>>>0)+hj|0);l:{if((dj|0)>=1){q[Yi>>2]=aj;q[Yi+4>>2]=lj;q[Yi+16>>2]=1;$i=-1;break l}if((dj|0)<=-1){q[Yi+16>>2]=-1;q[Yi>>2]=0-aj;q[Yi+4>>2]=0-((0<aj>>>0)+lj|0);$i=1;break l}q[Yi>>2]=0;q[Yi+4>>2]=0;q[Yi+16>>2]=0;$i=0;}_i=Yi;Ki=Yi;aj=qi;Ji=cj;ej=Ji;m:{if((qi|0)>0?1:(qi|0)>=0?Ji>>>0<=0?0:1:0){break m}aj=0;ej=0;if((qi|0)>-1?1:(qi|0)>=-1?cj>>>0<=4294967295?0:1:0){break m}q[Yi+16>>2]=$i;aj=0-((0<cj>>>0)+qi|0)|0;ej=0-cj|0;}q[Ki+8>>2]=ej;q[_i+12>>2]=aj;if((Db(Yi+24|0,Yi)|0)<=0){break d}}q[Ii>>2]=ij;qi=q[ij+12>>2];jj=q[qi+96>>2];kj=q[qi+92>>2];mj=q[qi+88>>2];cj=bj;qi=li;continue}}if((qi|0)>-1?1:(qi|0)>=-1?cj>>>0<=4294967295?0:1:0){break d}while(1){lj=(w(kj-tj|0,yj)+w(mj-fj|0,Fj)|0)+w(jj-nj|0,Ej)|0;Ji=lj;bj=Ji;ij=Ji>>31;n:{if(!li|!q[li+12>>2]){break n}ej=q[q[li+4>>2]+8>>2];if(q[ej+20>>2]<=q[a+100>>2]){break n}Ji=q[ej+12>>2];aj=q[Ji+92>>2];Zi=aj-kj|0;_i=q[Ji+88>>2];dj=_i-mj|0;$i=q[Ji+96>>2];pj=$i-jj|0;Ki=(w(Zi,yj)+w(dj,Fj)|0)+w(pj,Ej)|0;Ji=JB(uj,vj,Zi,Zi>>31);gj=Q;dj=JB(wj,sj,dj,dj>>31);Zi=dj+Ji|0;Ji=Q+gj|0;Ji=Zi>>>0<dj>>>0?Ji+1|0:Ji;dj=JB(qj,xj,pj,pj>>31);Zi=dj+Zi|0;Ji=Q+Ji|0;Ji=Zi>>>0<dj>>>0?Ji+1|0:Ji;dj=Ji;o:{if(!(Ji|Zi)){if((Ki|0)>0){break o}break n}if((dj|0)>-1?1:(dj|0)>=-1?Zi>>>0<=4294967295?0:1:0){break n}Ji=Ki;gj=Ji>>31;oj=Yi;p:{if((Ji|0)>=1){q[Yi+24>>2]=Ji;q[Yi+28>>2]=gj;q[Yi+40>>2]=1;Ji=-1;break p}if((Ki|0)<=-1){q[Yi+40>>2]=-1;q[Yi+24>>2]=0-Ji;q[Yi+28>>2]=0-((0<Ji>>>0)+gj|0);Ji=1;break p}q[Yi+24>>2]=0;q[Yi+28>>2]=0;q[Yi+40>>2]=0;Ji=0;}q[oj+40>>2]=Ji;q[Yi+32>>2]=0-Zi;q[Yi+36>>2]=0-((0<Zi>>>0)+dj|0);q:{if((lj|0)>=1){q[Yi>>2]=bj;q[Yi+4>>2]=ij;q[Yi+16>>2]=1;dj=-1;break q}if((lj|0)<=-1){q[Yi+16>>2]=-1;Ji=bj;q[Yi>>2]=0-Ji;q[Yi+4>>2]=0-((0<Ji>>>0)+ij|0);dj=1;break q}q[Yi>>2]=0;q[Yi+4>>2]=0;q[Yi+16>>2]=0;dj=0;}Zi=Yi;Ji=cj;Ki=qi;r:{if((qi|0)>0?1:(qi|0)>=0?Ji>>>0<=0?0:1:0){break r}Ji=0;Ki=0;if((qi|0)>-1?1:(qi|0)>=-1?cj>>>0<=4294967295?0:1:0){break r}q[Yi+16>>2]=dj;Ki=cj;Ji=0-Ki|0;Ki=0-((0<Ki>>>0)+qi|0)|0;}q[Zi+8>>2]=Ji;q[Zi+12>>2]=Ki;if((Db(Yi+24|0,Yi)|0)>=1){break n}}li=(li|0)==(hj|0)?0:ej;q[Ii>>2]=li;qi=aj-tj|0;qi=JB(uj,vj,qi,qi>>31);cj=Q;Ji=qi;qi=_i-fj|0;bj=JB(wj,sj,qi,qi>>31);qi=Ji+bj|0;Ji=Q+cj|0;Ji=qi>>>0<bj>>>0?Ji+1|0:Ji;Ki=qi;qi=$i-nj|0;cj=JB(qj,xj,qi,qi>>31);qi=Ki+cj|0;Ji=Q+Ji|0;Ji=qi>>>0<cj>>>0?Ji+1|0:Ji;cj=qi;qi=Ji;mj=_i;kj=aj;jj=$i;continue}li=q[Hi>>2];if(!li|!q[li+12>>2]){break d}dj=q[q[li+8>>2]+4>>2];if(q[dj+20>>2]<=q[a+100>>2]){break d}li=q[dj+12>>2];aj=q[li+92>>2];$i=aj-tj|0;Ji=$i;Ki=Ji;tj=Ji>>31;Ji=JB(Ji,tj,Gj,Dj);_i=Q;Zi=Ji;pj=q[li+88>>2];fj=pj-fj|0;Ji=fj;ej=Ji;gj=Ji>>31;oj=JB(Ji,gj,zj,Aj);Ji=Zi+oj|0;Zi=Q+_i|0;Zi=Ji>>>0<oj>>>0?Zi+1|0:Zi;_i=q[li+96>>2];nj=_i-nj|0;li=nj;oj=li;rj=li>>31;li=JB(Bj,Cj,li,rj);if((0-li|0)!=(Ji|0)|(0-(Q+(0<li>>>0)|0)|0)!=(Zi|0)){break d}li=kj-aj|0;li=JB(uj,vj,li,li>>31);Ji=Q;Zi=li;li=mj-pj|0;aj=JB(wj,sj,li,li>>31);li=Zi+aj|0;Ji=Q+Ji|0;Ji=li>>>0<aj>>>0?Ji+1|0:Ji;Zi=li;li=jj-_i|0;aj=JB(qj,xj,li,li>>31);li=Zi+aj|0;Ji=Q+Ji|0;_i=li;Ji=li>>>0<aj>>>0?Ji+1|0:Ji;aj=Ji;if((Ji|0)>-1?1:(Ji|0)>=-1?li>>>0<=4294967295?0:1:0){break d}fj=(w($i,yj)+w(fj,Fj)|0)+w(nj,Ej)|0;li=JB(Ki,tj,uj,vj);Ji=Q;$i=JB(ej,gj,wj,sj);li=$i+li|0;Ki=Q+Ji|0;Ki=li>>>0<$i>>>0?Ki+1|0:Ki;$i=JB(qj,xj,oj,rj);li=$i+li|0;Ji=Q+Ki|0;Ji=li>>>0<$i>>>0?Ji+1|0:Ji;$i=li;Ki=Ji;s:{if(!(Ji|li)){if((fj|0)<=0){break d}break s}if((Ki|0)>-1?1:(Ki|0)>=-1?$i>>>0<=4294967295?0:1:0){break d}li=fj;nj=li>>31;Ji=Yi;t:{if((li|0)>=1){q[Yi+24>>2]=li;q[Yi+28>>2]=nj;q[Yi+40>>2]=1;li=-1;break t}if((fj|0)<=-1){q[Yi+40>>2]=-1;q[Yi+24>>2]=0-li;q[Yi+28>>2]=0-((0<li>>>0)+nj|0);li=1;break t}q[Yi+24>>2]=0;q[Yi+28>>2]=0;q[Yi+40>>2]=0;li=0;}q[Ji+40>>2]=li;q[Yi+32>>2]=0-$i;q[Yi+36>>2]=0-((0<$i>>>0)+Ki|0);u:{if((lj|0)>=1){q[Yi>>2]=bj;q[Yi+4>>2]=ij;q[Yi+16>>2]=1;fj=-1;break u}if((lj|0)<=-1){q[Yi+16>>2]=-1;q[Yi>>2]=0-bj;q[Yi+4>>2]=0-((0<bj>>>0)+ij|0);fj=1;break u}q[Yi>>2]=0;q[Yi+4>>2]=0;q[Yi+16>>2]=0;fj=0;}bj=Yi;Ki=Yi;li=cj;Ji=qi;$i=li;v:{if((Ji|0)>0?1:(Ji|0)>=0?li>>>0<=0?0:1:0){break v}Ji=0;$i=0;if((qi|0)>-1?1:(qi|0)>=-1?cj>>>0<=4294967295?0:1:0){break v}q[Yi+16>>2]=fj;Ji=0-((0<cj>>>0)+qi|0)|0;$i=0-cj|0;}q[Ki+8>>2]=$i;q[bj+12>>2]=Ji;if((Db(Yi+24|0,Yi)|0)>=0){break d}}q[Hi>>2]=dj;qi=q[dj+12>>2];nj=q[qi+96>>2];tj=q[qi+92>>2];li=q[Ii>>2];fj=q[qi+88>>2];cj=_i;qi=aj;continue}}P=Yi+48|0;}function yh(a,li){a=a|0;li=li|0;var qi=0;qi=P-16|0;P=qi;q[qi+12>>2]=a;q[qi+8>>2]=li;Pv(q[qi+12>>2],q[qi+8>>2]);P=qi+16|0;}function zh(a,li){var Hi=0;Hi=P-16|0;P=Hi;q[Hi+12>>2]=a;u[Hi+8>>2]=li;a=q[Hi+12>>2];u[a+36>>2]=u[Hi+8>>2];u[a+40>>2]=_u(u[Hi+8>>2]);P=Hi+16|0;}function Ah(a,li){var Ii=0,Kj=0,Lj=0,Mj=0,Nj=0,Oj=0,Pj=0,Qj=0,Rj=0,Sj=0;Mj=P-32|0;P=Mj;a:{li=(li|0)<=-1?q[a+12>>2]:li;if((li|0)<1){break a}Kj=q[a>>2];if(!Kj){break a}while(1){Qj=0;Nj=Kj+40|0;if(q[Nj>>2]){while(1){Lj=q[Kj+32>>2];b:{if(Lj>>>0<=Kj>>>0){Lj=Kj;break b}Ii=q[Lj+40>>2];Sj=(Ii|0)==(Kj|0);Oj=((Ii|0)!=(Kj|0))<<2;Rj=q[(Oj+Lj|0)+36>>2];Ii=q[Lj+32>>2];Pj=a;c:{if(!Ii){break c}Pj=(Ii+((q[Ii+40>>2]==(Lj|0))<<2)|0)+36|0;}q[Pj>>2]=Kj;q[Rj+32>>2]=Kj;q[Lj+32>>2]=Kj;q[Kj+32>>2]=Ii;Ii=Kj+36|0;q[Lj+36>>2]=q[Ii>>2];q[Lj+40>>2]=q[Nj>>2];q[q[Ii>>2]+32>>2]=Lj;q[q[Nj>>2]+32>>2]=Lj;q[Ii+(Sj<<2)>>2]=Lj;q[Ii+Oj>>2]=Rj;Ii=Lj+24|0;Nj=q[Ii+4>>2];q[Mj+24>>2]=q[Ii>>2];q[Mj+28>>2]=Nj;Ii=Lj+16|0;Nj=q[Ii+4>>2];q[Mj+16>>2]=q[Ii>>2];q[Mj+20>>2]=Nj;Ii=Lj+8|0;Nj=q[Ii+4>>2];q[Mj+8>>2]=q[Ii>>2];q[Mj+12>>2]=Nj;Ii=q[Lj+4>>2];q[Mj>>2]=q[Lj>>2];q[Mj+4>>2]=Ii;Ii=Kj+24|0;Nj=q[Ii+4>>2];q[Lj+24>>2]=q[Ii>>2];q[Lj+28>>2]=Nj;Ii=Kj+16|0;Nj=q[Ii+4>>2];q[Lj+16>>2]=q[Ii>>2];q[Lj+20>>2]=Nj;Ii=Kj+8|0;Nj=q[Ii+4>>2];q[Lj+8>>2]=q[Ii>>2];q[Lj+12>>2]=Nj;Ii=q[Kj+4>>2];q[Lj>>2]=q[Kj>>2];q[Lj+4>>2]=Ii;Ii=q[Mj+28>>2];q[Kj+24>>2]=q[Mj+24>>2];q[Kj+28>>2]=Ii;Ii=q[Mj+20>>2];q[Kj+16>>2]=q[Mj+16>>2];q[Kj+20>>2]=Ii;Ii=q[Mj+12>>2];q[Kj+8>>2]=q[Mj+8>>2];q[Kj+12>>2]=Ii;Ii=q[Mj+4>>2];q[Kj>>2]=q[Mj>>2];q[Kj+4>>2]=Ii;}Kj=q[a+16>>2]>>>Qj;Qj=Qj+1&31;Kj=q[(((Kj&1)<<2)+Lj|0)+36>>2];Nj=Kj+40|0;if(q[Nj>>2]){continue}break}}Lj=a;Pj=Lj;Oj=0;d:{if(!Sc(Lj,Kj)){break d}Oj=q[a>>2];}Rc(Pj,Oj,Kj);q[a+16>>2]=q[a+16>>2]+1;li=li+ -1|0;if(!li){break a}Kj=q[a>>2];continue}}P=Mj+32|0;}function Bh(a){var li=0;li=q[a>>2];if(li){Tc(a,li);}li=q[a+4>>2];if(li){q[6658]=q[6658]+1;n[q[5256]](li);}q[a+4>>2]=0;q[a+8>>2]=-1;li=q[a+32>>2];if(li){if(r[a+36|0]){if(li){q[6658]=q[6658]+1;n[q[5256]](li);}}q[a+32>>2]=0;}q[a+32>>2]=0;q[a+24>>2]=0;q[a+28>>2]=0;q[a+16>>2]=0;o[a+36|0]=1;}function Ch(a,Tj){a=a|0;Tj=Tj|0;var Uj=0;Uj=P-16|0;P=Uj;q[Uj+12>>2]=a;q[Uj+8>>2]=Tj;aw(q[Uj+12>>2],q[Uj+8>>2]);P=Uj+16|0;}function Dh(a,Tj,Vj,Wj){a=a|0;Tj=Tj|0;Vj=Vj|0;Wj=Wj|0;var Xj=0,Yj=0,Zj=0,_j=0,$j=0,ak=0,bk=0,ck=0;q[a+168>>2]=q[a+152>>2];o[Tj+80|0]=1;o[Tj+60|0]=0;q[Tj+52>>2]=287;q[Tj>>2]=16944;q[Tj+76>>2]=0;o[Tj+100|0]=1;q[Tj+68>>2]=0;q[Tj+72>>2]=0;q[Tj+96>>2]=0;o[Tj+120|0]=1;q[Tj+88>>2]=0;q[Tj+92>>2]=0;q[Tj+116>>2]=0;o[Tj+140|0]=1;q[Tj+108>>2]=0;q[Tj+112>>2]=0;q[Tj+136>>2]=0;o[Tj+164|0]=1;q[Tj+144>>2]=0;q[Tj+128>>2]=0;q[Tj+132>>2]=0;q[Tj+160>>2]=0;q[Tj+152>>2]=0;q[Tj+156>>2]=0;q[Tj+168>>2]=0;q[Tj+28>>2]=2139095039;q[Tj+32>>2]=0;q[Tj+20>>2]=2139095039;q[Tj+24>>2]=2139095039;q[Tj+12>>2]=-8388609;q[Tj+16>>2]=0;q[Tj+4>>2]=-8388609;q[Tj+8>>2]=-8388609;Zj=q[a+56>>2];Vj=Tj;a:{if(Wj){q[Tj+56>>2]=Zj<<8&16711680|Zj<<24|(Zj>>>8&65280|Zj>>>24);o[Tj+4|0]=r[a+7|0];o[Tj+5|0]=r[a+6|0];o[Tj+6|0]=r[a+5|0];o[Tj+7|0]=r[a+4|0];o[Tj+8|0]=r[a+11|0];o[Tj+9|0]=r[a+10|0];o[Tj+10|0]=r[a+9|0];o[Tj+11|0]=r[a+8|0];o[Tj+12|0]=r[a+15|0];o[Tj+13|0]=r[a+14|0];o[Tj+14|0]=r[a+13|0];o[Tj+15|0]=r[a+12|0];o[Tj+16|0]=r[a+19|0];o[Tj+17|0]=r[a+18|0];o[Tj+18|0]=r[a+17|0];o[Tj+19|0]=r[a+16|0];o[Tj+20|0]=r[a+23|0];o[Tj+21|0]=r[a+22|0];o[Tj+22|0]=r[a+21|0];o[Tj+23|0]=r[a+20|0];o[Tj+24|0]=r[a+27|0];o[Tj+25|0]=r[a+26|0];o[Tj+26|0]=r[a+25|0];o[Tj+27|0]=r[a+24|0];o[Tj+28|0]=r[a+31|0];o[Tj+29|0]=r[a+30|0];o[Tj+30|0]=r[a+29|0];o[Tj+31|0]=r[a+28|0];o[Tj+32|0]=r[a+35|0];o[Tj+33|0]=r[a+34|0];o[Tj+34|0]=r[a+33|0];o[Tj+35|0]=r[a+32|0];o[Tj+36|0]=r[a+39|0];o[Tj+37|0]=r[a+38|0];o[Tj+38|0]=r[a+37|0];o[Tj+39|0]=r[a+36|0];o[Tj+40|0]=r[a+43|0];o[Tj+41|0]=r[a+42|0];o[Tj+42|0]=r[a+41|0];o[Tj+43|0]=r[a+40|0];o[Tj+44|0]=r[a+47|0];o[Tj+45|0]=r[a+46|0];o[Tj+46|0]=r[a+45|0];o[Tj+47|0]=r[a+44|0];o[Tj+48|0]=r[a+51|0];o[Tj+49|0]=r[a+50|0];o[Tj+50|0]=r[a+49|0];o[Tj+51|0]=r[a+48|0];Zj=q[a+144>>2];q[Tj+144>>2]=Zj<<24|Zj<<8&16711680|(Zj>>>8&65280|Zj>>>24);Zj=q[a+168>>2];Zj=Zj<<24|Zj<<8&16711680|(Zj>>>8&65280|Zj>>>24);break a}q[Tj+56>>2]=Zj;Zj=q[a+16>>2];q[Tj+12>>2]=q[a+12>>2];q[Tj+16>>2]=Zj;Zj=q[a+8>>2];q[Tj+4>>2]=q[a+4>>2];q[Tj+8>>2]=Zj;Zj=q[a+32>>2];q[Tj+28>>2]=q[a+28>>2];q[Tj+32>>2]=Zj;Zj=q[a+24>>2];q[Tj+20>>2]=q[a+20>>2];q[Tj+24>>2]=Zj;Zj=q[a+48>>2];q[Tj+44>>2]=q[a+44>>2];q[Tj+48>>2]=Zj;Zj=q[a+40>>2];q[Tj+36>>2]=q[a+36>>2];q[Tj+40>>2]=Zj;q[Tj+144>>2]=q[a+144>>2];Zj=q[a+168>>2];}q[Vj+168>>2]=Zj;o[Tj+60|0]=r[a+60|0];Zj=Tj+172|0;ak=q[a+56>>2];b:{if(r[a+60|0]){Vj=q[Tj+136>>2];if(Vj){if(r[Tj+140|0]){if(Vj){q[6658]=q[6658]+1;n[q[5256]](Vj);}}q[Tj+136>>2]=0;}q[Tj+136>>2]=Zj;o[Tj+140|0]=0;q[Tj+132>>2]=ak;q[Tj+128>>2]=ak;c:{if(!Wj){if((ak|0)<1){break c}_j=q[a+136>>2];while(1){Vj=$j<<4;Yj=Vj+Zj|0;Vj=Vj+_j|0;p[Yj>>1]=s[Vj>>1];p[Yj+2>>1]=s[Vj+2>>1];p[Yj+4>>1]=s[Vj+4>>1];p[Yj+6>>1]=s[Vj+6>>1];p[Yj+8>>1]=s[Vj+8>>1];p[Yj+10>>1]=s[Vj+10>>1];q[Yj+12>>2]=q[Vj+12>>2];$j=$j+1|0;if((ak|0)!=($j|0)){continue}break}break c}if((ak|0)<1){break c}_j=q[a+136>>2];while(1){Vj=$j<<4;Xj=Vj+Zj|0;Yj=Vj+_j|0;Vj=s[Yj>>1];p[Xj>>1]=(Vj<<24|Vj<<8&16711680)>>>16;Vj=s[Yj+2>>1];p[Xj+2>>1]=(Vj<<24|Vj<<8&16711680)>>>16;Vj=s[Yj+4>>1];p[Xj+4>>1]=(Vj<<24|Vj<<8&16711680)>>>16;Vj=s[Yj+6>>1];p[Xj+6>>1]=(Vj<<24|Vj<<8&16711680)>>>16;Vj=s[Yj+8>>1];p[Xj+8>>1]=(Vj<<24|Vj<<8&16711680)>>>16;Vj=s[Yj+10>>1];p[Xj+10>>1]=(Vj<<24|Vj<<8&16711680)>>>16;Vj=q[Yj+12>>2];q[Xj+12>>2]=Vj<<24|Vj<<8&16711680|(Vj>>>8&65280|Vj>>>24);$j=$j+1|0;if((ak|0)!=($j|0)){continue}break}}Yj=Tj+128|0;Xj=ak<<4;break b}Vj=q[Tj+96>>2];if(Vj){if(r[Tj+100|0]){if(Vj){q[6658]=q[6658]+1;n[q[5256]](Vj);}}q[Tj+96>>2]=0;}Yj=Tj+88|0;q[Tj+96>>2]=Zj;o[Tj+100|0]=0;q[Tj+92>>2]=ak;q[Tj+88>>2]=ak;d:{e:{f:{if(!Wj){if((ak|0)<1){break e}ck=q[a+96>>2];Vj=Zj;while(1){bk=$j<<6;Xj=bk+Vj|0;_j=bk+ck|0;Vj=q[_j+4>>2];q[Xj>>2]=q[_j>>2];q[Xj+4>>2]=Vj;Vj=q[_j+12>>2];q[Xj+8>>2]=q[_j+8>>2];q[Xj+12>>2]=Vj;_j=bk+q[a+96>>2]|0;Vj=q[_j+20>>2];Xj=bk+q[Tj+96>>2]|0;q[Xj+16>>2]=q[_j+16>>2];q[Xj+20>>2]=Vj;Vj=q[_j+28>>2];q[Xj+24>>2]=q[_j+24>>2];q[Xj+28>>2]=Vj;Vj=q[Tj+96>>2];Xj=bk+Vj|0;ck=q[a+96>>2];_j=bk+ck|0;q[Xj+32>>2]=q[_j+32>>2];q[Xj+36>>2]=q[_j+36>>2];q[Xj+40>>2]=q[_j+40>>2];$j=$j+1|0;if((ak|0)!=($j|0)){continue}break}break f}if((ak|0)<1){break e}bk=q[a+96>>2];Vj=Zj;while(1){_j=ck<<6;Xj=_j+Vj|0;Vj=_j+bk|0;o[Xj|0]=r[Vj+3|0];o[Xj+1|0]=r[Vj+2|0];o[Xj+2|0]=r[Vj+1|0];o[Xj+3|0]=r[Vj|0];o[Xj+4|0]=r[Vj+7|0];o[Xj+5|0]=r[Vj+6|0];o[Xj+6|0]=r[Vj+5|0];o[Xj+7|0]=r[Vj+4|0];o[Xj+8|0]=r[Vj+11|0];o[Xj+9|0]=r[Vj+10|0];o[Xj+10|0]=r[Vj+9|0];o[Xj+11|0]=r[Vj+8|0];o[Xj+12|0]=r[Vj+15|0];o[Xj+13|0]=r[Vj+14|0];o[Xj+14|0]=r[Vj+13|0];o[Xj+15|0]=r[Vj+12|0];Xj=_j+q[Tj+96>>2]|0;Vj=_j+q[a+96>>2]|0;o[Xj+16|0]=r[Vj+19|0];o[Xj+17|0]=r[Vj+18|0];o[Xj+18|0]=r[Vj+17|0];o[Xj+19|0]=r[Vj+16|0];o[Xj+20|0]=r[Vj+23|0];o[Xj+21|0]=r[Vj+22|0];o[Xj+22|0]=r[Vj+21|0];o[Xj+23|0]=r[Vj+20|0];o[Xj+24|0]=r[Vj+27|0];o[Xj+25|0]=r[Vj+26|0];o[Xj+26|0]=r[Vj+25|0];o[Xj+27|0]=r[Vj+24|0];o[Xj+28|0]=r[Vj+31|0];o[Xj+29|0]=r[Vj+30|0];o[Xj+30|0]=r[Vj+29|0];o[Xj+31|0]=r[Vj+28|0];Vj=q[Tj+96>>2];Xj=_j+Vj|0;bk=q[a+96>>2];_j=_j+bk|0;$j=q[_j+32>>2];q[Xj+32>>2]=$j<<24|$j<<8&16711680|($j>>>8&65280|$j>>>24);$j=q[_j+36>>2];q[Xj+36>>2]=$j<<24|$j<<8&16711680|($j>>>8&65280|$j>>>24);_j=q[_j+40>>2];q[Xj+40>>2]=_j<<24|_j<<8&16711680|(_j>>>8&65280|_j>>>24);ck=ck+1|0;if((ak|0)!=(ck|0)){continue}break}}Xj=ak<<6;_j=Xj;if(Vj){break d}break b}Vj=Zj;_j=ak<<6;}Xj=_j;if(r[Tj+100|0]){if(Vj){q[6658]=q[6658]+1;n[q[5256]](Vj);}}q[Tj+96>>2]=0;}q[Yj>>2]=0;q[Yj+4>>2]=0;o[Yj+5|0]=0;o[Yj+6|0]=0;o[Yj+7|0]=0;o[Yj+8|0]=0;o[Yj+9|0]=0;o[Yj+10|0]=0;o[Yj+11|0]=0;o[Yj+12|0]=0;Yj=q[a+168>>2];Vj=q[Tj+160>>2];if(Vj){if(r[Tj+164|0]){if(Vj){q[6658]=q[6658]+1;n[q[5256]](Vj);}}q[Tj+160>>2]=0;}_j=Xj+Zj|0;q[Tj+160>>2]=_j;o[Tj+164|0]=0;q[Tj+156>>2]=Yj;q[Tj+152>>2]=Yj;Zj=q[a+168>>2];g:{if(!Wj){if((Zj|0)<1){break g}Zj=q[a+160>>2];Wj=0;while(1){Vj=Wj<<5;Yj=Vj+_j|0;Vj=Vj+Zj|0;p[Yj>>1]=s[Vj>>1];p[Yj+2>>1]=s[Vj+2>>1];p[Yj+4>>1]=s[Vj+4>>1];p[Yj+6>>1]=s[Vj+6>>1];p[Yj+8>>1]=s[Vj+8>>1];p[Yj+10>>1]=s[Vj+10>>1];q[Yj+12>>2]=q[Vj+12>>2];Vj=q[Vj+16>>2];q[Yj+28>>2]=0;q[Yj+20>>2]=0;q[Yj+24>>2]=0;q[Yj+16>>2]=Vj;Wj=Wj+1|0;if((Wj|0)<q[a+168>>2]){continue}break}break g}if((Zj|0)<1){break g}Vj=q[a+160>>2];Wj=0;while(1){a=Wj<<5;Xj=a+_j|0;Yj=a+Vj|0;a=s[Yj>>1];p[Xj>>1]=(a<<24|a<<8&16711680)>>>16;a=s[Yj+2>>1];p[Xj+2>>1]=(a<<24|a<<8&16711680)>>>16;a=s[Yj+4>>1];p[Xj+4>>1]=(a<<24|a<<8&16711680)>>>16;a=s[Yj+6>>1];p[Xj+6>>1]=(a<<24|a<<8&16711680)>>>16;a=s[Yj+8>>1];p[Xj+8>>1]=(a<<24|a<<8&16711680)>>>16;a=s[Yj+10>>1];p[Xj+10>>1]=(a<<24|a<<8&16711680)>>>16;a=q[Yj+12>>2];q[Xj+12>>2]=a<<24|a<<8&16711680|(a>>>8&65280|a>>>24);a=q[Yj+16>>2];q[Xj+16>>2]=a<<24|a<<8&16711680|(a>>>8&65280|a>>>24);Wj=Wj+1|0;if((Wj|0)<(Zj|0)){continue}break}}q[Tj>>2]=0;o[Tj+157|0]=0;o[Tj+158|0]=0;o[Tj+159|0]=0;o[Tj+160|0]=0;o[Tj+161|0]=0;o[Tj+162|0]=0;o[Tj+163|0]=0;o[Tj+164|0]=0;q[Tj+152>>2]=0;q[Tj+156>>2]=0;return 1}function Eh(a,Tj,Vj,Wj,dk,ek,fk){var gk=x(0),hk=x(0),ik=0,jk=x(0),kk=0,lk=x(0),mk=x(0),nk=x(0),ok=x(0),pk=x(0),qk=x(0),rk=x(0),sk=0,tk=x(0),uk=x(0),vk=x(0),wk=x(0),xk=x(0),yk=x(0),zk=0,Ak=0,Bk=0,Ck=0,Dk=0,Ek=0,Fk=0,Gk=0,Hk=0,Ik=0,Jk=0,Kk=0,Lk=0,Mk=0,Nk=0,Ok=0,Pk=0,Qk=0,Rk=0;kk=P-32|0;P=kk;vk=u[Vj+4>>2];wk=u[Wj+4>>2];xk=u[Vj>>2];yk=u[Wj>>2];mk=u[a+28>>2];tk=u[a+12>>2];pk=u[Wj+8>>2];qk=u[Vj+8>>2];gk=x((pk<qk?pk:qk)+u[dk+8>>2]);gk=gk<tk?tk:gk;jk=u[a+44>>2];gk=x(x((mk<gk?mk:gk)-tk)*jk);a:{if(gk<x(4294967296)&gk>=x(0)){zk=~~gk>>>0;break a}zk=0;}nk=u[a+24>>2];uk=u[a+8>>2];gk=x((wk<vk?wk:vk)+u[dk+4>>2]);gk=gk<uk?uk:gk;rk=u[a+40>>2];gk=x(x((nk<gk?nk:gk)-uk)*rk);b:{if(gk<x(4294967296)&gk>=x(0)){Ak=~~gk>>>0;break b}Ak=0;}lk=u[a+20>>2];ok=u[a+4>>2];gk=x((yk<xk?yk:xk)+u[dk>>2]);gk=gk<ok?ok:gk;hk=u[a+36>>2];gk=x(x((lk<gk?lk:gk)-ok)*hk);c:{if(gk<x(4294967296)&gk>=x(0)){Bk=~~gk>>>0;break c}Bk=0;}gk=x((qk<pk?pk:qk)+u[ek+8>>2]);gk=gk<tk?tk:gk;gk=x(x(x((mk<gk?mk:gk)-tk)*jk)+x(1));d:{if(gk<x(4294967296)&gk>=x(0)){sk=~~gk>>>0;break d}sk=0;}gk=x((vk<wk?wk:vk)+u[ek+4>>2]);gk=gk<uk?uk:gk;gk=x(x(x((nk<gk?nk:gk)-uk)*rk)+x(1));e:{if(gk<x(4294967296)&gk>=x(0)){ik=~~gk>>>0;break e}ik=0;}gk=x((xk<yk?yk:xk)+u[ek>>2]);gk=gk<ok?ok:gk;gk=x(x(x((lk<gk?lk:gk)-ok)*hk)+x(1));f:{if(gk<x(4294967296)&gk>=x(0)){Wj=~~gk>>>0;break f}Wj=0;}if(0<(fk|0)){lk=x(yk-xk);rk=x(wk-vk);hk=x(pk-qk);gk=x(x(1)/x(E(x(x(x(lk*lk)+x(rk*rk))+x(hk*hk)))));jk=x(hk*gk);mk=x(hk*jk);hk=x(lk*gk);gk=x(rk*gk);rk=x(mk+x(x(lk*hk)+x(rk*gk)));Gk=zk&65534;Hk=Ak&65534;Ik=Bk&65534;Jk=sk|1;Kk=ik|1;Lk=Wj|1;Wj=q[a+136>>2];ok=jk==x(0)?x(0xde0b6b000000000):x(x(1)/jk);sk=ok<x(0);Mk=(sk<<4)+kk|8;pk=gk==x(0)?x(0xde0b6b000000000):x(x(1)/gk);ik=pk<x(0);Nk=(ik<<4)+kk|4;Ok=((sk^1)<<4)+kk|8;Pk=((ik^1)<<4)+kk|4;qk=hk==x(0)?x(0xde0b6b000000000):x(x(1)/hk);ik=qk<x(0);Qk=(ik<<4)+kk|0;Rk=((ik^1)<<4)+kk|0;while(1){Ek=q[Wj+12>>2];ik=0;g:{h:{i:{j:{if(Ik>>>0>s[Wj+6>>1]){break j}Fk=s[Wj>>1];if(Lk>>>0<Fk>>>0|Gk>>>0>s[Wj+10>>1]){break j}zk=s[Wj+4>>1];if(Jk>>>0<zk>>>0|Hk>>>0>s[Wj+8>>1]){break j}Ak=s[Wj+2>>1];if(Kk>>>0<Ak>>>0){break j}mk=u[a+12>>2];nk=u[a+44>>2];lk=u[a+8>>2];jk=u[a+40>>2];hk=u[a+4>>2];gk=u[a+36>>2];q[kk+12>>2]=0;Bk=s[Wj+10>>1];sk=s[Wj+8>>1];ik=s[Wj+6>>1];q[kk+28>>2]=0;u[kk>>2]=x(hk+x(x(Fk>>>0)/gk))-u[ek>>2];u[kk+4>>2]=x(lk+x(x(Ak>>>0)/jk))-u[ek+4>>2];u[kk+8>>2]=x(mk+x(x(zk>>>0)/nk))-u[ek+8>>2];u[kk+16>>2]=x(hk+x(x(ik>>>0)/gk))-u[dk>>2];u[kk+20>>2]=x(lk+x(x(sk>>>0)/jk))-u[dk+4>>2];u[kk+24>>2]=x(mk+x(x(Bk>>>0)/nk))-u[dk+8>>2];k:{hk=u[Vj+4>>2];mk=x(pk*x(u[Nk>>2]-hk));gk=u[Vj>>2];jk=x(qk*x(u[Rk>>2]-gk));if(mk>jk){break k}nk=x(qk*x(u[Qk>>2]-gk));hk=x(pk*x(u[Pk>>2]-hk));if(nk>hk){break k}gk=u[Vj+8>>2];lk=x(ok*x(u[Mk>>2]-gk));jk=hk<jk?hk:jk;if(lk>jk){break k}hk=mk>nk?mk:nk;gk=x(ok*x(u[Ok>>2]-gk));if(hk>gk){break k}ik=(lk>hk?lk:hk)<rk&(gk<jk?gk:jk)>x(0);if(!ik|(Ek|0)<0){break j}ik=q[Wj+12>>2];n[q[q[Tj>>2]+8>>2]](Tj,ik>>21,ik&2097151);break i}ik=0;}if((Ek|0)>-1){break i}if(!ik){break h}}Ck=Ck+1|0;Wj=Wj+16|0;break g}ik=q[Wj+12>>2];Ck=Ck-ik|0;Wj=Wj-(ik<<4)|0;}Dk=Dk+1|0;if((Ck|0)<(fk|0)){continue}break}}if(q[6077]<(Dk|0)){q[6077]=Dk;}P=kk+32|0;}function Fh(a,Tj,Vj,Wj,dk,ek){var fk=0,Sk=0,Tk=x(0),Uk=x(0),Vk=x(0),Wk=x(0),Xk=x(0),Yk=x(0),Zk=x(0),_k=x(0),$k=x(0),al=0,bl=x(0),cl=x(0),dl=x(0),el=0,fl=x(0),gl=0,hl=0,il=x(0),jl=x(0),kl=x(0),ll=x(0),ml=x(0),nl=x(0),ol=0,pl=0,ql=0,rl=0,sl=0,tl=0;fk=P-32|0;P=fk;a:{if(q[a+56>>2]<1){break a}Vk=u[Wj+8>>2];Uk=u[Vj+8>>2];Yk=x(Vk-Uk);cl=Yk;Tk=u[Wj>>2];Zk=u[Vj>>2];Wk=x(Tk-Zk);_k=u[Wj+4>>2];$k=u[Vj+4>>2];Xk=x(_k-$k);bl=x(x(1)/x(E(x(x(x(Wk*Wk)+x(Xk*Xk))+x(Yk*Yk)))));Yk=x(Yk*bl);dl=Wk;Wk=x(Wk*bl);fl=Xk;Xk=x(Xk*bl);fl=x(x(cl*Yk)+x(x(dl*Wk)+x(fl*Xk)));bl=u[ek+8>>2];il=x((Uk<Vk?Vk:Uk)+bl);cl=u[ek+4>>2];jl=x(($k<_k?_k:$k)+cl);dl=u[ek>>2];kl=x((Zk<Tk?Tk:Zk)+dl);Uk=Vk<Uk?Vk:Uk;Vk=u[dk+8>>2];ll=x(Uk+Vk);Uk=u[dk+4>>2];ml=x((_k<$k?_k:$k)+Uk);Zk=Tk<Zk?Tk:Zk;Tk=u[dk>>2];nl=x(Zk+Tk);Wj=q[a+96>>2];Zk=Yk==x(0)?x(0xde0b6b000000000):x(x(1)/Yk);Sk=Zk<x(0);ol=(Sk<<4)+fk|8;_k=Xk==x(0)?x(0xde0b6b000000000):x(x(1)/Xk);al=_k<x(0);pl=(al<<4)+fk|4;ql=((Sk^1)<<4)+fk|8;rl=((al^1)<<4)+fk|4;$k=Wk==x(0)?x(0xde0b6b000000000):x(x(1)/Wk);Sk=$k<x(0);sl=(Sk<<4)+fk|0;tl=((Sk^1)<<4)+fk|0;while(1){Sk=q[Wj+4>>2];q[fk>>2]=q[Wj>>2];q[fk+4>>2]=Sk;Sk=q[Wj+12>>2];q[fk+8>>2]=q[Wj+8>>2];q[fk+12>>2]=Sk;Sk=q[Wj+28>>2];q[fk+24>>2]=q[Wj+24>>2];q[fk+28>>2]=Sk;Sk=q[Wj+20>>2];q[fk+16>>2]=q[Wj+16>>2];q[fk+20>>2]=Sk;u[fk>>2]=u[fk>>2]-dl;u[fk+4>>2]=u[fk+4>>2]-cl;u[fk+16>>2]=u[fk+16>>2]-Tk;u[fk+20>>2]=u[fk+20>>2]-Uk;u[fk+8>>2]=u[fk+8>>2]-bl;u[fk+24>>2]=u[fk+24>>2]-Vk;Sk=0;b:{if(nl>u[Wj+16>>2]){break b}Sk=0;if(kl<u[Wj>>2]){break b}Sk=1;}al=0;al=il<u[Wj+8>>2]|ll>u[Wj+24>>2]?al:Sk;c:{d:{e:{f:{g:{if(jl<u[Wj+4>>2]|ml>u[Wj+20>>2]|al^1){break g}Wk=u[Vj+4>>2];Vk=x(_k*x(u[pl>>2]-Wk));Tk=u[Vj>>2];Uk=x($k*x(u[tl>>2]-Tk));if(Vk>Uk){break g}Tk=x($k*x(u[sl>>2]-Tk));Wk=x(_k*x(u[rl>>2]-Wk));if(Tk>Wk){break g}Yk=u[Vj+8>>2];Xk=x(Zk*x(u[ol>>2]-Yk));Uk=Wk<Uk?Wk:Uk;if(Xk>Uk){break g}Vk=Vk>Tk?Vk:Tk;Tk=x(Zk*x(u[ql>>2]-Yk));if(Vk>Tk){break g}hl=q[Wj+32>>2];al=(hl|0)==-1;Sk=(Xk>Vk?Xk:Vk)<fl&(Tk<Uk?Tk:Uk)>x(0);if((Sk|0)!=1|(hl|0)!=-1){break f}n[q[q[Tj>>2]+8>>2]](Tj,q[Wj+36>>2],q[Wj+40>>2]);break e}al=q[Wj+32>>2]==-1;Sk=0;}if(al){break e}if(!Sk){break d}}el=el+1|0;Wj=Wj- -64|0;break c}Sk=q[Wj+32>>2];el=Sk+el|0;Wj=(Sk<<6)+Wj|0;}gl=gl+1|0;if((el|0)>=q[a+56>>2]){break a}Vk=u[dk+8>>2];Uk=u[dk+4>>2];Tk=u[dk>>2];bl=u[ek+8>>2];cl=u[ek+4>>2];dl=u[ek>>2];continue}}if(q[6077]<(gl|0)){q[6077]=gl;}P=fk+32|0;}function Gh(a,Tj,Vj,Wj,dk){var ek=0,ul=0;while(1){a:{b:{if(s[dk>>1]<s[Tj>>1]|s[Wj>>1]>s[Tj+6>>1]|(s[dk+4>>1]<s[Tj+4>>1]|s[Wj+4>>1]>s[Tj+10>>1])){break b}if(s[dk+2>>1]<s[Tj+2>>1]|s[Wj+2>>1]>s[Tj+8>>1]){break b}ek=q[Tj+12>>2];if((ek|0)<0){break a}n[q[q[Vj>>2]+8>>2]](Vj,ek>>>21,ek&2097151);}return}ek=Tj+16|0;Gh(a,ek,Vj,Wj,dk);ul=Tj+32|0;Tj=q[Tj+28>>2];Tj=(Tj|0)>-1?ul:ek-(Tj<<4)|0;continue}}function Hh(a,Tj){a=a|0;Tj=Tj|0;a=q[a+4>>2];n[q[q[a>>2]+8>>2]](a,q[Tj+36>>2])|0;}function Ih(a,Tj,Vj,Wj,dk,vl,wl,xl,yl){var zl=0,Al=0,Bl=0,Cl=x(0),Dl=0,El=0,Fl=0,Gl=x(0),Hl=x(0),Il=x(0),Jl=x(0),Kl=x(0),Ll=0,Ml=0,Nl=x(0),Ol=0;Al=P-32|0;P=Al;if(a){zl=q[xl+4>>2];if((zl|0)<=127){if(q[xl+8>>2]<=127){q[6657]=q[6657]+1;Dl=n[q[5255]](512,16)|0;Fl=q[xl+4>>2];if((Fl|0)>=1){while(1){Bl=El<<2;q[Bl+Dl>>2]=q[Bl+q[xl+12>>2]>>2];El=El+1|0;if((Fl|0)!=(El|0)){continue}break}}El=q[xl+12>>2];if(El){if(r[xl+16|0]){if(El){q[6658]=q[6658]+1;n[q[5256]](El);}}q[xl+12>>2]=0;}q[xl+12>>2]=Dl;o[xl+16|0]=1;q[xl+8>>2]=128;}while(1){q[q[xl+12>>2]+(zl<<2)>>2]=0;zl=zl+1|0;if((zl|0)!=128){continue}break}}q[xl+4>>2]=128;q[q[xl+12>>2]>>2]=a;zl=126;El=1;while(1){Fl=q[xl+12>>2];a=El+ -1|0;Ml=a<<2;Dl=q[Fl+Ml>>2];Gl=u[Dl>>2];Hl=u[Dl+4>>2];Cl=u[Dl+8>>2];Il=u[wl>>2];Jl=u[wl+4>>2];Kl=u[wl+8>>2];q[Al+12>>2]=0;u[Al+8>>2]=Cl-Kl;u[Al+4>>2]=Hl-Jl;u[Al>>2]=Gl-Il;Gl=u[Dl+16>>2];Hl=u[Dl+20>>2];Cl=u[Dl+24>>2];Il=u[vl>>2];Jl=u[vl+4>>2];Kl=u[vl+8>>2];q[Al+28>>2]=0;u[Al+24>>2]=Cl-Kl;u[Al+20>>2]=Hl-Jl;u[Al+16>>2]=Gl-Il;Bl=q[Wj+4>>2];Il=u[Tj+4>>2];Jl=u[Vj+4>>2];Gl=x(x(u[((Bl<<4)+Al|0)+4>>2]-Il)*Jl);Cl=u[Vj>>2];Ll=q[Wj>>2];Kl=u[Tj>>2];Hl=x(Cl*x(u[(1-Ll<<4)+Al>>2]-Kl));a:{if(Gl>Hl){break a}Cl=x(x(u[(Ll<<4)+Al>>2]-Kl)*Cl);Il=x(Jl*x(u[((1-Bl<<4)+Al|0)+4>>2]-Il));if(Cl>Il){break a}Bl=q[Wj+8>>2];Kl=u[Tj+8>>2];Nl=u[Vj+8>>2];Jl=x(x(u[((Bl<<4)+Al|0)+8>>2]-Kl)*Nl);Hl=Il<Hl?Il:Hl;if(Jl>Hl){break a}Gl=Gl>Cl?Gl:Cl;Cl=x(Nl*x(u[((1-Bl<<4)+Al|0)+8>>2]-Kl));if(Gl>Cl|(Jl>Gl?Jl:Gl)<dk^1|(Cl<Hl?Cl:Hl)>x(0)^1){break a}if(q[Dl+40>>2]){if((a|0)>(zl|0)){zl=q[xl+4>>2];Bl=zl<<1;if((zl|0)<(Bl|0)){if(q[xl+8>>2]<(Bl|0)){b:{if(!zl){Fl=0;break b}q[6657]=q[6657]+1;Fl=n[q[5255]](zl<<3,16)|0;a=0;Ll=q[xl+4>>2];if((Ll|0)<1){break b}while(1){Ol=a<<2;q[Ol+Fl>>2]=q[q[xl+12>>2]+Ol>>2];a=a+1|0;if((Ll|0)!=(a|0)){continue}break}}a=q[xl+12>>2];if(a){if(r[xl+16|0]){if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}q[xl+12>>2]=0;}q[xl+12>>2]=Fl;o[xl+16|0]=1;q[xl+8>>2]=Bl;}while(1){q[(zl<<2)+Fl>>2]=0;Fl=q[xl+12>>2];zl=zl+1|0;if((Bl|0)!=(zl|0)){continue}break}}q[xl+4>>2]=Bl;zl=Bl+ -2|0;}q[Fl+Ml>>2]=q[Dl+36>>2];q[q[xl+12>>2]+(El<<2)>>2]=q[Dl+40>>2];a=El+1|0;break a}n[q[q[yl>>2]+12>>2]](yl,Dl);}El=a;if(a){continue}break}}P=Al+32|0;}function Jh(a){a=a|0;var Tj=0,Vj=0,Wj=0,dk=0,vl=0;q[a>>2]=16576;if(r[a+152|0]){Tj=q[a+96>>2];n[q[q[Tj>>2]>>2]](Tj)|0;Tj=q[a+96>>2];if(Tj){q[6658]=q[6658]+1;n[q[5256]](Tj);}}dk=q[a+160>>2];if((dk|0)>=1){while(1){Tj=q[a+168>>2]+w(Vj,20)|0;vl=Tj;Wj=q[Tj+12>>2];if(Wj){if(r[Tj+16|0]){if(Wj){q[6658]=q[6658]+1;n[q[5256]](Wj);}}q[vl+12>>2]=0;}o[Tj+16|0]=1;q[vl+12>>2]=0;q[Tj+4>>2]=0;q[Tj+8>>2]=0;Vj=Vj+1|0;if((dk|0)!=(Vj|0)){continue}break}}Tj=q[a+168>>2];if(Tj){if(r[a+172|0]){if(Tj){q[6658]=q[6658]+1;n[q[5256]](Tj);}}q[a+168>>2]=0;}q[a+168>>2]=0;q[a+160>>2]=0;q[a+164>>2]=0;o[a+172|0]=1;ue(a+44|0);ue(a+4|0);return a|0}function Kh(a,wl){var xl=0,yl=0,Pl=0,Ql=0,Rl=0;q[a+12>>2]=0;o[a+16|0]=1;q[a+4>>2]=0;q[a+8>>2]=0;yl=q[wl+4>>2];if((yl|0)<=0){q[a+4>>2]=yl;return}q[6657]=q[6657]+1;Pl=n[q[5255]](yl<<2,16)|0;Ql=q[a+4>>2];if((Ql|0)>=1){while(1){Rl=xl<<2;q[Rl+Pl>>2]=q[q[a+12>>2]+Rl>>2];xl=xl+1|0;if((Ql|0)!=(xl|0)){continue}break}}xl=q[a+12>>2];if(xl){if(r[a+16|0]){if(xl){q[6658]=q[6658]+1;n[q[5256]](xl);}}q[a+12>>2]=0;}q[a+12>>2]=Pl;o[a+16|0]=1;q[a+8>>2]=yl;xl=0;while(1){q[(xl<<2)+Pl>>2]=0;Pl=q[a+12>>2];xl=xl+1|0;if((yl|0)!=(xl|0)){continue}break}q[a+4>>2]=yl;if((yl|0)>=1){xl=0;while(1){a=xl<<2;q[a+Pl>>2]=q[a+q[wl+12>>2]>>2];xl=xl+1|0;if((yl|0)!=(xl|0)){continue}break}}}function Lh(a){a=a|0;var wl=0;q[a>>2]=16016;wl=q[a+60>>2];if(wl){if(r[a- -64|0]){if(wl){q[6658]=q[6658]+1;n[q[5256]](wl);}}q[a+60>>2]=0;}q[a+60>>2]=0;q[a+52>>2]=0;q[a+56>>2]=0;o[a- -64|0]=1;wl=q[a+40>>2];if(wl){if(r[a+44|0]){if(wl){q[6658]=q[6658]+1;n[q[5256]](wl);}}q[a+40>>2]=0;}q[a+40>>2]=0;q[a+32>>2]=0;q[a+36>>2]=0;o[a+44|0]=1;wl=q[a+16>>2];if(wl){if(r[a+20|0]){if(wl){q[6658]=q[6658]+1;n[q[5256]](wl);}}q[a+16>>2]=0;}q[a+16>>2]=0;q[a+8>>2]=0;q[a+12>>2]=0;o[a+20|0]=1;return a|0}function Mh(a){var Sl=0,Tl=0,Ul=0,Vl=0,Wl=0,Xl=0,Yl=0,Zl=0,_l=0;Yl=q[a+32>>2];Tl=q[a+12>>2];a:{if((Yl|0)>=(Tl|0)){break a}b:{if(q[a+36>>2]>=(Tl|0)){Sl=q[a+40>>2];break b}Ul=Yl;if(Tl){q[6657]=q[6657]+1;Sl=n[q[5255]](Tl<<2,16)|0;Ul=q[a+32>>2];}Wl=q[a+40>>2];c:{if((Ul|0)>=1){while(1){Xl=Vl<<2;q[Xl+Sl>>2]=q[Wl+Xl>>2];Vl=Vl+1|0;if((Vl|0)!=(Ul|0)){continue}break c}}if(Wl){break c}q[a+40>>2]=Sl;q[a+36>>2]=Tl;o[a+44|0]=1;break b}if(r[a+44|0]){if(Wl){q[6658]=q[6658]+1;n[q[5256]](Wl);}}q[a+40>>2]=Sl;o[a+44|0]=1;q[a+36>>2]=Tl;}Ul=Yl<<2;Xl=Tl<<2;_(Ul+Sl|0,0,Xl-Ul|0);q[a+32>>2]=Tl;Wl=q[a+52>>2];if((Wl|0)<(Tl|0)){d:{if(q[a+56>>2]>=(Tl|0)){Sl=q[a+60>>2];break d}Vl=0;Ul=Wl;Sl=0;if(Tl){q[6657]=q[6657]+1;Sl=n[q[5255]](Xl,16)|0;Ul=q[a+52>>2];}Zl=q[a+60>>2];e:{if((Ul|0)>=1){while(1){_l=Vl<<2;q[_l+Sl>>2]=q[Zl+_l>>2];Vl=Vl+1|0;if((Vl|0)!=(Ul|0)){continue}break e}}if(Zl){break e}q[a+60>>2]=Sl;q[a+56>>2]=Tl;o[a- -64|0]=1;break d}if(r[a- -64|0]){if(Zl){q[6658]=q[6658]+1;n[q[5256]](Zl);}}q[a+60>>2]=Sl;o[a+64|0]=1;q[a+56>>2]=Tl;}Ul=Wl<<2;_(Ul+Sl|0,0,Xl-Ul|0);}q[a+52>>2]=Tl;if((Tl|0)>=1){_(q[a+40>>2],255,Xl);_(q[a+60>>2],255,Xl);}if((Yl|0)<1){break a}Ul=q[a+60>>2];Wl=q[a+16>>2];Tl=q[a+40>>2];Vl=0;while(1){Sl=Wl+(Vl<<4)|0;Sl=q[q[Sl+4>>2]+12>>2]<<16|q[q[Sl>>2]+12>>2];Sl=(Sl<<15^-1)+Sl|0;Sl=w(Sl>>>10^Sl,9);Sl=Sl>>>6^Sl;Sl=(Sl<<11^-1)+Sl|0;Sl=Tl+((q[a+12>>2]+ -1&(Sl>>>16^Sl))<<2)|0;q[Ul+(Vl<<2)>>2]=q[Sl>>2];q[Sl>>2]=Vl;Vl=Vl+1|0;if((Yl|0)!=(Vl|0)){continue}break}}}function Nh(a){var $l=0,am=0,bm=0,cm=0,dm=0;q[a>>2]=16016;q[a+24>>2]=0;q[a+8>>2]=0;q[a+12>>2]=0;q[a+68>>2]=0;o[a+20|0]=1;q[a+16>>2]=0;o[a+44|0]=1;q[a+40>>2]=0;o[a- -64|0]=1;q[a+32>>2]=0;q[a+36>>2]=0;q[a+60>>2]=0;q[a+52>>2]=0;q[a+56>>2]=0;q[6657]=q[6657]+1;cm=n[q[5255]](32,16)|0;dm=q[a+8>>2];if((dm|0)>=1){while(1){am=bm<<4;$l=am+cm|0;am=am+q[a+16>>2]|0;q[$l>>2]=q[am>>2];q[$l+4>>2]=q[am+4>>2];q[$l+8>>2]=q[am+8>>2];q[$l+12>>2]=q[am+12>>2];bm=bm+1|0;if((dm|0)!=(bm|0)){continue}break}}$l=q[a+16>>2];if($l){if(r[a+20|0]){if($l){q[6658]=q[6658]+1;n[q[5256]]($l);}}q[a+16>>2]=0;}q[a+16>>2]=cm;o[a+20|0]=1;q[a+12>>2]=2;Mh(a);}function Oh(a){a=a|0;var em=0;q[a>>2]=15916;em=q[a+156>>2];if(em){if(r[a+160|0]){if(em){q[6658]=q[6658]+1;n[q[5256]](em);}}q[a+156>>2]=0;}q[a+156>>2]=0;q[a+148>>2]=0;q[a+152>>2]=0;o[a+160|0]=1;em=q[a+136>>2];if(em){if(r[a+140|0]){if(em){q[6658]=q[6658]+1;n[q[5256]](em);}}q[a+136>>2]=0;}q[a+136>>2]=0;q[a+128>>2]=0;q[a+132>>2]=0;o[a+140|0]=1;em=q[a+116>>2];if(em){if(r[a+120|0]){if(em){q[6658]=q[6658]+1;n[q[5256]](em);}}q[a+116>>2]=0;}q[a+116>>2]=0;q[a+108>>2]=0;q[a+112>>2]=0;o[a+120|0]=1;em=q[a+96>>2];if(em){if(r[a+100|0]){if(em){q[6658]=q[6658]+1;n[q[5256]](em);}}q[a+96>>2]=0;}q[a+96>>2]=0;q[a+88>>2]=0;q[a+92>>2]=0;o[a+100|0]=1;Rh(a);return a|0}function Ph(a,fm,gm,hm,im){var jm=0;jm=q[a+32>>2];q[jm>>2]=q[jm>>2]+1;Eb(a,we(a,fm,im));Eb(a,we(a,gm,im));Eb(a,we(a,hm,im));}function Qh(a,fm,gm,hm,im,km,lm,mm,nm,om){a=a|0;fm=fm|0;gm=gm|0;hm=hm|0;im=im|0;km=km|0;lm=lm|0;mm=mm|0;nm=nm|0;om=om|0;a=q[a+32>>2]+(om<<5)|0;q[gm>>2]=q[a+12>>2];q[fm>>2]=q[a+16>>2];q[hm>>2]=q[a+28>>2];q[im>>2]=q[a+20>>2];q[mm>>2]=q[a>>2];q[km>>2]=q[a+4>>2];q[lm>>2]=q[a+8>>2];q[nm>>2]=q[a+24>>2];}function Rh(a){a=a|0;var fm=0;q[a>>2]=15804;fm=q[a+32>>2];if(fm){if(r[a+36|0]){if(fm){q[6658]=q[6658]+1;n[q[5256]](fm);}}q[a+32>>2]=0;}q[a+32>>2]=0;q[a+24>>2]=0;q[a+28>>2]=0;o[a+36|0]=1;return a|0}function Sh(a,gm,hm,im,km){var lm=0,mm=0,nm=0,om=0,pm=0,qm=0,rm=0;lm=P-112|0;P=lm;o[a+60|0]=hm;a:{if(hm){lw(a,im,km);q[lm+96>>2]=a;q[lm+92>>2]=a+104;q[lm+88>>2]=15068;n[q[q[gm>>2]+8>>2]](gm,lm+88|0,a+4|0,a+20|0);km=q[a+108>>2];q[lm+16>>2]=0;q[lm+20>>2]=0;q[lm+8>>2]=0;q[lm+12>>2]=0;hm=q[a+128>>2];mm=km<<1;if((hm|0)<(mm|0)){if(q[a+132>>2]<(mm|0)){if(km){q[6657]=q[6657]+1;pm=n[q[5255]](km<<5,16)|0;im=q[a+128>>2];}else {im=hm;}if((im|0)>=1){gm=0;while(1){nm=gm<<4;qm=nm+pm|0;om=qm;nm=nm+q[a+136>>2]|0;rm=q[nm+4>>2];q[om>>2]=q[nm>>2];q[om+4>>2]=rm;om=q[nm+12>>2];q[qm+8>>2]=q[nm+8>>2];q[qm+12>>2]=om;gm=gm+1|0;if((im|0)!=(gm|0)){continue}break}}gm=q[a+136>>2];if(gm){if(r[a+140|0]){if(gm){q[6658]=q[6658]+1;n[q[5256]](gm);}}q[a+136>>2]=0;}q[a+136>>2]=pm;o[a+140|0]=1;q[a+132>>2]=mm;}while(1){pm=q[lm+12>>2];gm=q[a+136>>2]+(hm<<4)|0;q[gm>>2]=q[lm+8>>2];q[gm+4>>2]=pm;im=q[lm+20>>2];q[gm+8>>2]=q[lm+16>>2];q[gm+12>>2]=im;hm=hm+1|0;if((mm|0)!=(hm|0)){continue}break}}q[a+128>>2]=mm;break a}q[lm+104>>2]=15200;q[lm+108>>2]=a- -64;q[lm+96>>2]=-581039253;q[lm+100>>2]=0;q[lm+88>>2]=-581039253;q[lm+92>>2]=-581039253;q[lm+80>>2]=1566444395;q[lm+84>>2]=0;q[lm+72>>2]=1566444395;q[lm+76>>2]=1566444395;n[q[q[gm>>2]+8>>2]](gm,lm+104|0,lm+88|0,lm+72|0);km=q[a+68>>2];gm=lm- -64|0;q[gm>>2]=0;q[gm+4>>2]=0;q[lm+56>>2]=0;q[lm+60>>2]=0;q[lm+48>>2]=0;q[lm+52>>2]=0;q[lm+40>>2]=0;q[lm+44>>2]=0;q[lm+32>>2]=0;q[lm+36>>2]=0;q[lm+24>>2]=0;q[lm+28>>2]=0;q[lm+16>>2]=0;q[lm+20>>2]=0;q[lm+8>>2]=0;q[lm+12>>2]=0;gm=q[a+88>>2];nm=km<<1;if((gm|0)<(nm|0)){if(q[a+92>>2]<(nm|0)){if(km){q[6657]=q[6657]+1;pm=n[q[5255]](km<<7,16)|0;hm=q[a+88>>2];}else {hm=gm;}if((hm|0)>=1){while(1){im=qm<<6;mm=im+pm|0;im=im+q[a+96>>2]|0;rm=q[im+4>>2];q[mm>>2]=q[im>>2];q[mm+4>>2]=rm;om=q[im+60>>2];q[mm+56>>2]=q[im+56>>2];q[mm+60>>2]=om;om=q[im+52>>2];q[mm+48>>2]=q[im+48>>2];q[mm+52>>2]=om;om=q[im+44>>2];q[mm+40>>2]=q[im+40>>2];q[mm+44>>2]=om;om=q[im+36>>2];q[mm+32>>2]=q[im+32>>2];q[mm+36>>2]=om;om=q[im+28>>2];q[mm+24>>2]=q[im+24>>2];q[mm+28>>2]=om;om=q[im+20>>2];q[mm+16>>2]=q[im+16>>2];q[mm+20>>2]=om;om=q[im+12>>2];q[mm+8>>2]=q[im+8>>2];q[mm+12>>2]=om;qm=qm+1|0;if((hm|0)!=(qm|0)){continue}break}}hm=q[a+96>>2];if(hm){if(r[a+100|0]){if(hm){q[6658]=q[6658]+1;n[q[5256]](hm);}}q[a+96>>2]=0;}q[a+96>>2]=pm;o[a+100|0]=1;q[a+92>>2]=nm;}while(1){mm=q[lm+12>>2];hm=q[a+96>>2]+(gm<<6)|0;q[hm>>2]=q[lm+8>>2];q[hm+4>>2]=mm;im=lm- -64|0;mm=q[im+4>>2];q[hm+56>>2]=q[im>>2];q[hm+60>>2]=mm;im=q[lm+60>>2];q[hm+48>>2]=q[lm+56>>2];q[hm+52>>2]=im;im=q[lm+52>>2];q[hm+40>>2]=q[lm+48>>2];q[hm+44>>2]=im;im=q[lm+44>>2];q[hm+32>>2]=q[lm+40>>2];q[hm+36>>2]=im;im=q[lm+36>>2];q[hm+24>>2]=q[lm+32>>2];q[hm+28>>2]=im;im=q[lm+28>>2];q[hm+16>>2]=q[lm+24>>2];q[hm+20>>2]=im;im=q[lm+20>>2];q[hm+8>>2]=q[lm+16>>2];q[hm+12>>2]=im;gm=gm+1|0;if((nm|0)!=(gm|0)){continue}break}}q[a+88>>2]=nm;}q[a+56>>2]=0;ve(a,0,km);if(!(q[a+152>>2]|!r[a+60|0])){gm=a;b:{if(q[a+156>>2]){km=q[a+160>>2];hm=1;break b}q[6657]=q[6657]+1;km=n[q[5255]](32,16)|0;pm=q[a+152>>2];if((pm|0)>=1){im=0;while(1){hm=im<<5;mm=hm+km|0;hm=hm+q[a+160>>2]|0;qm=q[hm+4>>2];q[mm>>2]=q[hm>>2];q[mm+4>>2]=qm;nm=q[hm+28>>2];q[mm+24>>2]=q[hm+24>>2];q[mm+28>>2]=nm;nm=q[hm+20>>2];q[mm+16>>2]=q[hm+16>>2];q[mm+20>>2]=nm;nm=q[hm+12>>2];q[mm+8>>2]=q[hm+8>>2];q[mm+12>>2]=nm;im=im+1|0;if((pm|0)!=(im|0)){continue}break}}hm=q[a+160>>2];if(hm){if(r[a+164|0]){if(hm){q[6658]=q[6658]+1;n[q[5256]](hm);}}q[a+160>>2]=0;}q[a+160>>2]=km;o[a+164|0]=1;q[a+156>>2]=1;hm=q[a+152>>2]+1|0;}q[gm+152>>2]=hm;gm=q[lm+36>>2];q[km+24>>2]=q[lm+32>>2];q[km+28>>2]=gm;gm=q[lm+28>>2];q[km+16>>2]=q[lm+24>>2];q[km+20>>2]=gm;gm=q[lm+20>>2];q[km+8>>2]=q[lm+16>>2];q[km+12>>2]=gm;gm=q[lm+12>>2];q[km>>2]=q[lm+8>>2];q[km+4>>2]=gm;gm=q[a+160>>2];hm=q[a+136>>2];p[gm>>1]=s[hm>>1];p[gm+2>>1]=s[hm+2>>1];p[gm+4>>1]=s[hm+4>>1];p[gm+6>>1]=s[hm+6>>1];p[gm+8>>1]=s[hm+8>>1];im=s[hm+10>>1];q[gm+12>>2]=0;p[gm+10>>1]=im;im=gm;gm=q[hm+12>>2];q[im+16>>2]=(gm|0)>-1?1:0-gm|0;}q[a+168>>2]=q[a+152>>2];gm=q[a+116>>2];if(gm){if(r[a+120|0]){if(gm){q[6658]=q[6658]+1;n[q[5256]](gm);}}q[a+116>>2]=0;}q[a+116>>2]=0;o[a+120|0]=1;q[a+108>>2]=0;q[a+112>>2]=0;gm=q[a+76>>2];if(gm){if(r[a+80|0]){if(gm){q[6658]=q[6658]+1;n[q[5256]](gm);}}q[a+76>>2]=0;}q[a+76>>2]=0;o[a+80|0]=1;q[a+68>>2]=0;q[a+72>>2]=0;P=lm+112|0;}function Th(a){qw(a);q[a>>2]=14996;return a}function Uh(a){return 6}function Vh(a,gm,hm){a=a|0;gm=gm|0;hm=hm|0;var im=0;im=P-16|0;P=im;q[im+12>>2]=a;q[im+8>>2]=gm;q[im+4>>2]=hm;a=q[im+12>>2];n[q[q[a>>2]+36>>2]](a,q[im+8>>2],q[im+4>>2],-1);P=im+16|0;}function Wh(a,gm){a=a|0;gm=gm|0;var hm=x(0),km=x(0),sm=x(0),tm=x(0),um=x(0),vm=x(0),wm=x(0),xm=x(0),ym=x(0);hm=x(n[q[q[a>>2]+48>>2]](a));km=x(n[q[q[a>>2]+48>>2]](a));sm=x(n[q[q[a>>2]+48>>2]](a));tm=u[a+16>>2];um=u[a+32>>2];vm=u[a+20>>2];wm=u[a+36>>2];xm=u[a+24>>2];ym=u[a+40>>2];Ub(a,gm);q[a+44>>2]=0;u[a+40>>2]=x(x(x(sm+ym)/xm)*u[a+24>>2])-sm;u[a+36>>2]=x(x(x(km+wm)/vm)*u[a+20>>2])-km;u[a+32>>2]=x(x(x(hm+um)/tm)*u[a+16>>2])-hm;}function Xh(a,gm,zm,Am){a=a|0;gm=gm|0;zm=zm|0;Am=Am|0;var Bm=x(0),Cm=x(0),Dm=x(0),Em=x(0),Fm=x(0),Gm=x(0),Hm=x(0),Im=x(0),Jm=x(0),Km=x(0),Lm=x(0),Mm=x(0),Nm=x(0),Om=x(0),Pm=x(0),Qm=x(0);Bm=x(n[q[q[a>>2]+48>>2]](a));Gm=u[gm+52>>2];Em=u[gm+24>>2];Jm=u[gm+20>>2];Hm=u[gm+56>>2];Fm=u[gm+40>>2];Km=u[a+40>>2];Cm=u[a+32>>2];Lm=u[gm+36>>2];Dm=u[a+36>>2];Im=u[gm+48>>2];Mm=u[gm+8>>2];Nm=u[gm>>2];Om=u[gm+4>>2];Pm=u[gm+16>>2];Qm=u[gm+32>>2];q[zm+12>>2]=0;Cm=x(Bm+Cm);Dm=x(Bm+Dm);Bm=x(Bm+Km);Fm=x(x(x(Cm*x(y(Qm)))+x(Dm*x(y(Lm))))+x(Bm*x(y(Fm))));u[zm+8>>2]=Hm-Fm;Em=x(x(x(Cm*x(y(Pm)))+x(Dm*x(y(Jm))))+x(Bm*x(y(Em))));u[zm+4>>2]=Gm-Em;Bm=x(x(x(Cm*x(y(Nm)))+x(Dm*x(y(Om))))+x(Bm*x(y(Mm))));u[zm>>2]=Im-Bm;q[Am+12>>2]=0;u[Am+8>>2]=Hm+Fm;u[Am+4>>2]=Em+Gm;u[Am>>2]=Bm+Im;}function Yh(a,gm){a=a|0;gm=gm|0;var zm=0;zm=P-16|0;P=zm;q[zm+12>>2]=a;q[zm+8>>2]=gm;a=q[zm+12>>2];n[q[q[a>>2]+36>>2]](a,q[zm+8>>2],1,-1);P=zm+16|0;}function Zh(a,gm,Am){var Rm=0;Rm=ci(a);q[a+96>>2]=gm;q[a>>2]=14300;q[a+4>>2]=3;if(Am){Zc(Rm);}}function _h(a,gm){a=a|0;gm=gm|0;q[a>>2]=0;q[a+4>>2]=0;q[a+8>>2]=0;q[a+12>>2]=0;q[a+(q[gm+56>>2]<<2)>>2]=1065353216;}function $h(a,gm,Am){a=a|0;gm=gm|0;Am=Am|0;var Sm=x(0),Tm=x(0),Um=x(0),Vm=x(0),Wm=x(0);n[q[q[gm>>2]+68>>2]](a,gm,Am);if(x(n[q[q[gm>>2]+48>>2]](gm))!=x(0)){Tm=u[Am+4>>2];Sm=u[Am>>2];Um=u[Am+8>>2];Vm=x(n[q[q[gm>>2]+48>>2]](gm));gm=x(x(x(Sm*Sm)+x(Tm*Tm))+x(Um*Um))<x(1.4210854715202004e-14);Sm=gm?x(-1):Sm;Wm=Sm;Um=gm?x(-1):Um;Tm=gm?x(-1):Tm;Sm=x(x(1)/x(E(x(x(Um*Um)+x(x(Sm*Sm)+x(Tm*Tm))))));u[a>>2]=u[a>>2]+x(Vm*x(Wm*Sm));u[a+4>>2]=u[a+4>>2]+x(Vm*x(Tm*Sm));u[a+8>>2]=u[a+8>>2]+x(Vm*x(Um*Sm));}}function ai(a,gm,Am,Xm,Ym,Zm){var _m=x(0),$m=x(0),an=x(0),bn=x(0),cn=0,dn=0,en=0,fn=0,gn=0,hn=x(0),jn=x(0),kn=x(0),ln=x(0),mn=x(0);n[q[q[a>>2]+8>>2]](a,gm,Ym,Zm);_m=u[Am+8>>2];$m=u[Am+4>>2];bn=u[Ym+8>>2];gm=q[Ym+8>>2];hn=u[Ym+4>>2];cn=q[Ym+4>>2];jn=u[Ym>>2];dn=q[Ym>>2];kn=u[Zm+8>>2];en=q[Zm+8>>2];ln=u[Zm+4>>2];fn=q[Zm+4>>2];mn=u[Zm>>2];gn=q[Zm>>2];an=u[Am>>2];a:{if(!!(an>x(0))){gn=(j(x(an+mn)),e(0));break a}dn=(j(x(an+jn)),e(0));}b:{if(!!($m>x(0))){fn=(j(x($m+ln)),e(0));break b}cn=(j(x($m+hn)),e(0));}c:{if(!!(_m>x(0))){en=(j(x(_m+kn)),e(0));break c}gm=(j(x(_m+bn)),e(0));}_m=u[Xm+8>>2];$m=u[Xm>>2];an=u[Xm+4>>2];bn=x(n[q[q[a>>2]+16>>2]](a));q[Ym+12>>2]=0;q[Ym+8>>2]=gm;q[Ym+4>>2]=cn;q[Ym>>2]=dn;q[Zm+12>>2]=0;q[Zm+8>>2]=en;q[Zm+4>>2]=fn;q[Zm>>2]=gn;_m=x(bn*x(E(x(x(x($m*$m)+x(an*an))+x(_m*_m)))));u[Ym>>2]=u[Ym>>2]-_m;u[Ym+4>>2]=u[Ym+4>>2]-_m;u[Ym+8>>2]=u[Ym+8>>2]-_m;u[Zm>>2]=_m+u[Zm>>2];u[Zm+4>>2]=_m+u[Zm+4>>2];u[Zm+8>>2]=_m+u[Zm+8>>2];}function bi(a,gm,Am,Xm){a=a|0;gm=gm|0;Am=Am|0;Xm=Xm|0;var Ym=x(0),Zm=x(0),nn=x(0),on=x(0),pn=x(0),qn=x(0),rn=x(0),sn=x(0),tn=x(0),un=x(0),vn=x(0),wn=x(0),xn=x(0),yn=x(0),zn=x(0),An=x(0),Bn=x(0),Cn=x(0),Dn=x(0),En=x(0),Fn=x(0),Gn=x(0);Ym=x(n[q[q[a>>2]+48>>2]](a));Fn=u[gm+52>>2];on=u[gm+24>>2];pn=u[gm+20>>2];qn=u[gm+56>>2];rn=u[gm+40>>2];sn=u[a+68>>2];wn=u[a+84>>2];xn=u[gm+36>>2];Zm=u[a- -64>>2];yn=u[a+80>>2];Gn=u[gm+48>>2];zn=u[gm+8>>2];An=u[gm>>2];Bn=u[gm+4>>2];Cn=u[gm+16>>2];Dn=u[gm+32>>2];nn=u[a+60>>2];En=u[a+76>>2];q[Am+12>>2]=0;tn=qn;qn=x(x(En+nn)*x(.5));un=x(x(yn+Zm)*x(.5));vn=x(x(wn+sn)*x(.5));tn=x(tn+x(x(x(Dn*qn)+x(xn*un))+x(rn*vn)));nn=x(Ym+x(x(En-nn)*x(.5)));Zm=x(Ym+x(x(yn-Zm)*x(.5)));Ym=x(Ym+x(x(wn-sn)*x(.5)));rn=x(x(x(nn*x(y(Dn)))+x(Zm*x(y(xn))))+x(Ym*x(y(rn))));u[Am+8>>2]=tn-rn;sn=x(Fn+x(x(x(qn*Cn)+x(un*pn))+x(vn*on)));on=x(x(x(nn*x(y(Cn)))+x(Zm*x(y(pn))))+x(Ym*x(y(on))));u[Am+4>>2]=sn-on;pn=x(Gn+x(x(x(qn*An)+x(un*Bn))+x(vn*zn)));Ym=x(x(x(nn*x(y(An)))+x(Zm*x(y(Bn))))+x(Ym*x(y(zn))));u[Am>>2]=pn-Ym;q[Xm+12>>2]=0;u[Xm+8>>2]=rn+tn;u[Xm+4>>2]=on+sn;u[Xm>>2]=Ym+pn;}function ci(a){var gm=0;Aa(a);o[a+92|0]=0;q[a+88>>2]=0;q[a+80>>2]=-1082130432;q[a+84>>2]=-1082130432;q[a+72>>2]=0;q[a+76>>2]=-1082130432;gm=a- -64|0;q[gm>>2]=1065353216;q[gm+4>>2]=1065353216;q[a>>2]=13412;q[a+56>>2]=0;q[a+60>>2]=1065353216;return a}function di(a,Am){var Xm=0,Hn=0,In=0,Jn=0,Kn=0,Ln=0,Mn=0,Nn=0,On=0,Pn=0;In=q[a+4>>2];if((In|0)==q[a+8>>2]){ei(a,In?In<<1:1);In=q[a+4>>2];}Mn=q[a+12>>2];Xm=Mn+w(In,36)|0;q[Xm+12>>2]=0;o[Xm+16|0]=1;q[Xm+4>>2]=0;q[Xm+8>>2]=0;Jn=q[Am+4>>2];a:{if((Jn|0)>=1){q[6657]=q[6657]+1;Nn=Jn<<2;Kn=n[q[5255]](Nn,16)|0;Ln=q[Xm+12>>2];On=q[Xm+4>>2];b:{c:{if((On|0)>=1){while(1){Pn=Hn<<2;q[Kn+Pn>>2]=q[Ln+Pn>>2];Hn=Hn+1|0;if((On|0)!=(Hn|0)){continue}break c}}if(!Ln){break b}}if(!r[Xm+16|0]){break b}if(Ln){q[6658]=q[6658]+1;n[q[5256]](Ln);}}o[Xm+16|0]=1;q[Xm+12>>2]=Kn;q[Xm+8>>2]=Jn;Hn=0;_(Kn,0,Nn);q[Xm+4>>2]=Jn;Ln=q[Am+12>>2];Xm=q[Xm+12>>2];while(1){Kn=Hn<<2;q[Kn+Xm>>2]=q[Ln+Kn>>2];Hn=Hn+1|0;if((Jn|0)!=(Hn|0)){continue}break}break a}q[Xm+4>>2]=Jn;}Hn=q[Am+24>>2];Xm=w(In,36)+Mn|0;q[Xm+20>>2]=q[Am+20>>2];q[Xm+24>>2]=Hn;Hn=q[Am+32>>2];q[Xm+28>>2]=q[Am+28>>2];q[Xm+32>>2]=Hn;q[a+4>>2]=q[a+4>>2]+1;}function ei(a,Am){var Qn=0,Rn=0,Sn=0,Tn=0,Un=0,Vn=0,Wn=0,Xn=0,Yn=0,Zn=0,_n=0,$n=0;if(q[a+8>>2]<(Am|0)){if(Am){q[6657]=q[6657]+1;Xn=n[q[5255]](w(Am,36),16)|0;}else {Xn=0;}Zn=q[a+4>>2];a:{if((Zn|0)<1){break a}while(1){Rn=q[a+12>>2];Sn=w(Yn,36);Qn=Sn+Xn|0;q[Qn+12>>2]=0;o[Qn+16|0]=1;q[Qn+4>>2]=0;q[Qn+8>>2]=0;Sn=Rn+Sn|0;Tn=q[Sn+4>>2];b:{if((Tn|0)>=1){q[6657]=q[6657]+1;Vn=Tn<<2;Wn=n[q[5255]](Vn,16)|0;Un=q[Qn+12>>2];Rn=0;_n=q[Qn+4>>2];c:{d:{if((_n|0)>=1){while(1){$n=Rn<<2;q[Wn+$n>>2]=q[Un+$n>>2];Rn=Rn+1|0;if((_n|0)!=(Rn|0)){continue}break d}}if(!Un){break c}}if(!r[Qn+16|0]){break c}if(Un){q[6658]=q[6658]+1;n[q[5256]](Un);}}o[Qn+16|0]=1;q[Qn+12>>2]=Wn;q[Qn+8>>2]=Tn;Rn=0;_(Wn,0,Vn);q[Qn+4>>2]=Tn;Un=q[Sn+12>>2];Wn=q[Qn+12>>2];while(1){Vn=Rn<<2;q[Vn+Wn>>2]=q[Un+Vn>>2];Rn=Rn+1|0;if((Tn|0)!=(Rn|0)){continue}break}break b}q[Qn+4>>2]=Tn;}Rn=q[Sn+24>>2];q[Qn+20>>2]=q[Sn+20>>2];q[Qn+24>>2]=Rn;Rn=q[Sn+32>>2];q[Qn+28>>2]=q[Sn+28>>2];q[Qn+32>>2]=Rn;Yn=Yn+1|0;if((Zn|0)!=(Yn|0)){continue}break}Un=q[a+4>>2];if((Un|0)<1){break a}Rn=0;while(1){Qn=q[a+12>>2]+w(Rn,36)|0;Sn=Qn;Tn=q[Qn+12>>2];if(Tn){if(r[Qn+16|0]){if(Tn){q[6658]=q[6658]+1;n[q[5256]](Tn);}}q[Sn+12>>2]=0;}o[Qn+16|0]=1;q[Sn+12>>2]=0;q[Qn+4>>2]=0;q[Qn+8>>2]=0;Rn=Rn+1|0;if((Un|0)!=(Rn|0)){continue}break}}Qn=q[a+12>>2];if(Qn){if(r[a+16|0]){if(Qn){q[6658]=q[6658]+1;n[q[5256]](Qn);}}q[a+12>>2]=0;}q[a+12>>2]=Xn;o[a+16|0]=1;q[a+8>>2]=Am;}}function fi(a){return 12}function gi(a,Am){a=a|0;Am=Am|0;var ao=0,bo=0;bo=q[Am+4>>2];ao=q[a+52>>2];q[ao+4>>2]=q[Am>>2];q[ao+8>>2]=bo;bo=q[Am+12>>2];q[ao+12>>2]=q[Am+8>>2];q[ao+16>>2]=bo;hi(a);}function hi(a){var Am=0,co=0;Am=P-48|0;P=Am;q[Am+44>>2]=0;q[Am+36>>2]=0;q[Am+40>>2]=0;q[Am+32>>2]=1065353216;n[q[q[a>>2]+68>>2]](Am+16|0,a,Am+32|0);u[a+36>>2]=u[Am+16>>2]+u[a+16>>2];q[Am+32>>2]=-1082130432;n[q[q[a>>2]+68>>2]](Am,a,Am+32|0);co=q[Am+12>>2];q[Am+24>>2]=q[Am+8>>2];q[Am+28>>2]=co;co=q[Am+4>>2];q[Am+16>>2]=q[Am>>2];q[Am+20>>2]=co;u[a+20>>2]=u[Am+16>>2]-u[a+16>>2];q[Am+40>>2]=0;q[Am+44>>2]=0;q[Am+32>>2]=0;q[Am+36>>2]=1065353216;n[q[q[a>>2]+68>>2]](Am+16|0,a,Am+32|0);u[a+40>>2]=u[Am+20>>2]+u[a+16>>2];q[Am+36>>2]=-1082130432;n[q[q[a>>2]+68>>2]](Am,a,Am+32|0);co=q[Am+12>>2];q[Am+24>>2]=q[Am+8>>2];q[Am+28>>2]=co;co=q[Am+4>>2];q[Am+16>>2]=q[Am>>2];q[Am+20>>2]=co;u[a+24>>2]=u[Am+20>>2]-u[a+16>>2];q[Am+32>>2]=0;q[Am+36>>2]=0;q[Am+40>>2]=1065353216;q[Am+44>>2]=0;n[q[q[a>>2]+68>>2]](Am+16|0,a,Am+32|0);u[a+44>>2]=u[Am+24>>2]+u[a+16>>2];q[Am+40>>2]=-1082130432;n[q[q[a>>2]+68>>2]](Am,a,Am+32|0);co=q[Am+12>>2];q[Am+24>>2]=q[Am+8>>2];q[Am+28>>2]=co;co=q[Am+4>>2];q[Am+16>>2]=q[Am>>2];q[Am+20>>2]=co;u[a+28>>2]=u[Am+24>>2]-u[a+16>>2];P=Am+48|0;}function ii(a,eo,fo){a=a|0;eo=eo|0;fo=fo|0;var go=0,ho=0,io=0,jo=0,ko=0,lo=x(0),mo=x(0),no=x(0),oo=0,po=x(0),qo=0,ro=0,so=0,to=0;go=P-80|0;P=go;jo=q[a+4>>2];n[q[q[jo>>2]+16>>2]](jo,go+28|0,go+24|0,go+20|0,go+16|0,go+12|0,go+8|0,go+4|0,go,eo);oo=q[go+12>>2]+w(q[go+8>>2],fo)|0;qo=q[go+20>>2];io=q[a+4>>2];jo=io+12|0;ko=q[go+28>>2];ho=ko;ro=q[go>>2];so=s[oo+4>>1];a:{if((ro|0)==3){break a}so=q[oo+8>>2];}to=q[go+16>>2];ho=ho+w(so,to)|0;b:{if(!qo){lo=x(u[ho+4>>2]*u[io+8>>2]);mo=x(u[ho>>2]*u[io+4>>2]);no=u[io+12>>2];ho=ho+8|0;break b}lo=x(u[io+8>>2]*x(v[ho+8>>3]));mo=x(u[io+4>>2]*x(v[ho>>3]));no=x(v[ho+16>>3]);ho=jo;}po=u[ho>>2];q[go+76>>2]=0;u[go+68>>2]=lo;u[go+72>>2]=po*no;u[go+64>>2]=mo;if((ro|0)!=3){ho=q[oo+4>>2];}else {ho=s[oo+2>>1];}ho=w(ho,to)+ko|0;c:{if(qo){lo=x(u[io+8>>2]*x(v[ho+8>>3]));mo=x(u[io+4>>2]*x(v[ho>>3]));no=x(v[ho+16>>3]);ho=jo;break c}lo=x(u[ho+4>>2]*u[io+8>>2]);mo=x(u[ho>>2]*u[io+4>>2]);no=u[io+12>>2];ho=ho+8|0;}po=u[ho>>2];q[go+60>>2]=0;u[go+52>>2]=lo;u[go+56>>2]=po*no;u[go+48>>2]=mo;if((ro|0)!=3){ho=q[oo>>2];}else {ho=s[oo>>1];}ko=w(ho,to)+ko|0;d:{if(qo){no=x(v[ko+16>>3]);lo=x(u[io+8>>2]*x(v[ko+8>>3]));mo=x(u[io+4>>2]*x(v[ko>>3]));break d}jo=ko+8|0;no=u[io+12>>2];lo=x(u[ko+4>>2]*u[io+8>>2]);mo=x(u[ko>>2]*u[io+4>>2]);}po=u[jo>>2];q[go+44>>2]=0;u[go+36>>2]=lo;u[go+32>>2]=mo;u[go+40>>2]=po*no;jo=q[a+8>>2];n[q[q[jo>>2]+8>>2]](jo,go+32|0,eo,fo);a=q[a+4>>2];n[q[q[a>>2]+24>>2]](a,eo);P=go+80|0;}function ji(a,eo,fo,uo){Ly(a,eo);o[a+65|0]=0;o[a+64|0]=fo;q[a+56>>2]=0;q[a+60>>2]=0;q[a>>2]=12172;q[a+4>>2]=21;if(uo){q[6657]=q[6657]+1;eo=n[q[5255]](172,16)|0;fo=Th(eo);q[a+56>>2]=eo;Sh(fo,q[a+52>>2],r[a+64|0],a+20|0,a+36|0);o[a+65|0]=1;}}function ki(a,eo,fo,uo){a=a|0;eo=eo|0;fo=fo|0;uo=uo|0;var vo=x(0),wo=x(0),xo=x(0),yo=x(0),zo=x(0),Ao=x(0);yo=x(n[q[q[a>>2]+48>>2]](a));zo=x(n[q[q[a>>2]+48>>2]](a));Ao=x(n[q[q[a>>2]+48>>2]](a));vo=u[eo+52>>2];wo=u[eo+56>>2];xo=u[eo+48>>2];q[fo+12>>2]=0;u[fo+8>>2]=wo-Ao;u[fo+4>>2]=vo-zo;u[fo>>2]=xo-yo;vo=u[eo+52>>2];wo=u[eo+56>>2];xo=u[eo+48>>2];q[uo+12>>2]=0;u[uo+8>>2]=Ao+wo;u[uo+4>>2]=zo+vo;u[uo>>2]=yo+xo;}function li(a){a=a|0;var eo=0,fo=0,uo=0,Bo=0,Co=0;q[a>>2]=11988;eo=q[a+56>>2];if(eo){if(r[a+60|0]){if(eo){q[6658]=q[6658]+1;n[q[5256]](eo);}}q[a+56>>2]=0;}q[a+56>>2]=0;q[a+48>>2]=0;q[a+52>>2]=0;o[a+60|0]=1;Bo=q[a+28>>2];if((Bo|0)>=1){while(1){eo=q[a+36>>2]+w(fo,36)|0;Co=eo;uo=q[eo+12>>2];if(uo){if(r[eo+16|0]){if(uo){q[6658]=q[6658]+1;n[q[5256]](uo);}}q[Co+12>>2]=0;}o[eo+16|0]=1;q[Co+12>>2]=0;q[eo+4>>2]=0;q[eo+8>>2]=0;fo=fo+1|0;if((Bo|0)!=(fo|0)){continue}break}}eo=q[a+36>>2];if(eo){if(r[a+40|0]){if(eo){q[6658]=q[6658]+1;n[q[5256]](eo);}}q[a+36>>2]=0;}q[a+36>>2]=0;q[a+28>>2]=0;q[a+32>>2]=0;o[a+40|0]=1;eo=q[a+16>>2];if(eo){if(r[a+20|0]){if(eo){q[6658]=q[6658]+1;n[q[5256]](eo);}}q[a+16>>2]=0;}q[a+16>>2]=0;q[a+8>>2]=0;q[a+12>>2]=0;o[a+20|0]=1;return a|0}function mi(a,Do){var Eo=0,Fo=0,Go=0,Ho=0,Io=0,Jo=0,Ko=x(0),Lo=x(0),Mo=0;Go=P-80|0;P=Go;q[a+72>>2]=q[a+72>>2]+1;Eo=q[a+68>>2];if(Eo){Pc(Eo,q[(q[a+28>>2]+w(Do,80)|0)+76>>2]);}Fo=q[a+20>>2];Io=q[a+28>>2];Jo=w(Do,80);Eo=Io+Jo|0;Ho=Eo+8|0;Mo=q[Ho+4>>2];q[Go+8>>2]=q[Ho>>2];q[Go+12>>2]=Mo;Ho=q[Eo+4>>2];q[Go>>2]=q[Eo>>2];q[Go+4>>2]=Ho;Ho=q[Eo+28>>2];q[Go+24>>2]=q[Eo+24>>2];q[Go+28>>2]=Ho;Ho=q[Eo+20>>2];q[Go+16>>2]=q[Eo+16>>2];q[Go+20>>2]=Ho;Ho=q[Eo+44>>2];q[Go+40>>2]=q[Eo+40>>2];q[Go+44>>2]=Ho;Ho=q[Eo+36>>2];q[Go+32>>2]=q[Eo+32>>2];q[Go+36>>2]=Ho;Ho=q[Eo+60>>2];q[Go+56>>2]=q[Eo+56>>2];q[Go+60>>2]=Ho;Ho=q[Eo+52>>2];q[Go+48>>2]=q[Eo+48>>2];q[Go+52>>2]=Ho;Ho=q[Eo+76>>2];q[Go+72>>2]=q[Eo+72>>2];q[Go+76>>2]=Ho;Ho=q[Eo+68>>2];q[Go+64>>2]=q[Eo+64>>2];q[Go+68>>2]=Ho;Ho=Io;Io=w(Fo,80)+ -80|0;Fo=Ho+Io|0;Ho=q[Fo+4>>2];q[Eo>>2]=q[Fo>>2];q[Eo+4>>2]=Ho;Ho=q[Fo+12>>2];q[Eo+8>>2]=q[Fo+8>>2];q[Eo+12>>2]=Ho;Ho=q[Fo+20>>2];q[Eo+16>>2]=q[Fo+16>>2];q[Eo+20>>2]=Ho;Ho=q[Fo+28>>2];q[Eo+24>>2]=q[Fo+24>>2];q[Eo+28>>2]=Ho;Ho=q[Fo+44>>2];q[Eo+40>>2]=q[Fo+40>>2];q[Eo+44>>2]=Ho;Ho=q[Fo+36>>2];q[Eo+32>>2]=q[Fo+32>>2];q[Eo+36>>2]=Ho;Ho=q[Fo+52>>2];q[Eo+48>>2]=q[Fo+48>>2];q[Eo+52>>2]=Ho;Ho=q[Fo+60>>2];q[Eo+56>>2]=q[Fo+56>>2];q[Eo+60>>2]=Ho;Ho=q[Fo+76>>2];q[Eo+72>>2]=q[Fo+72>>2];q[Eo+76>>2]=Ho;Ho=q[Fo+68>>2];q[Eo+64>>2]=q[Fo+64>>2];q[Eo+68>>2]=Ho;Eo=Io+q[a+28>>2]|0;Io=q[Go+4>>2];q[Eo>>2]=q[Go>>2];q[Eo+4>>2]=Io;Fo=q[Go+12>>2];q[Eo+8>>2]=q[Go+8>>2];q[Eo+12>>2]=Fo;Fo=q[Go+20>>2];q[Eo+16>>2]=q[Go+16>>2];q[Eo+20>>2]=Fo;Fo=q[Go+28>>2];q[Eo+24>>2]=q[Go+24>>2];q[Eo+28>>2]=Fo;Fo=q[Go+36>>2];q[Eo+32>>2]=q[Go+32>>2];q[Eo+36>>2]=Fo;Fo=q[Go+44>>2];q[Eo+40>>2]=q[Go+40>>2];q[Eo+44>>2]=Fo;Fo=q[Go+52>>2];q[Eo+48>>2]=q[Go+48>>2];q[Eo+52>>2]=Fo;Fo=q[Go+60>>2];q[Eo+56>>2]=q[Go+56>>2];q[Eo+60>>2]=Fo;Fo=q[Go+68>>2];q[Eo+64>>2]=q[Go+64>>2];q[Eo+68>>2]=Fo;Fo=q[Go+76>>2];q[Eo+72>>2]=q[Go+72>>2];q[Eo+76>>2]=Fo;if(q[a+68>>2]){q[q[(Jo+q[a+28>>2]|0)+76>>2]+36>>2]=Do;}q[a+20>>2]=q[a+20>>2]+ -1;Lo=x(Do|0);Fo=q[a+84>>2];a:{if((Fo|0)<1){break a}Io=q[a+92>>2];Eo=0;while(1){Jo=Io+(Eo<<2)|0;Ko=u[Jo>>2];if(Ko!=Lo){Eo=Eo+1|0;if((Fo|0)!=(Eo|0)){continue}break a}break}if((Fo|0)<=(Eo|0)){break a}Eo=Fo+ -1|0;Fo=Io+(Eo<<2)|0;q[Jo>>2]=q[Fo>>2];u[Fo>>2]=Ko;q[a+84>>2]=Eo;}Fo=q[a+124>>2];b:{if((Fo|0)<1){break b}Io=q[a+132>>2];Eo=0;while(1){Jo=Io+(Eo<<2)|0;Ko=u[Jo>>2];if(Ko!=Lo){Eo=Eo+1|0;if((Fo|0)!=(Eo|0)){continue}break b}break}if((Fo|0)<=(Eo|0)){break b}Eo=Fo+ -1|0;Fo=Io+(Eo<<2)|0;q[Jo>>2]=q[Fo>>2];u[Fo>>2]=Ko;q[a+124>>2]=Eo;}Fo=q[a+104>>2];c:{if((Fo|0)<1){break c}Io=q[a+112>>2];Eo=0;while(1){Jo=Io+(Eo<<2)|0;Ko=u[Jo>>2];if(Ko!=Lo){Eo=Eo+1|0;if((Fo|0)!=(Eo|0)){continue}break c}break}if((Fo|0)<=(Eo|0)){break c}Eo=Fo+ -1|0;Fo=Io+(Eo<<2)|0;q[Jo>>2]=q[Fo>>2];u[Fo>>2]=Ko;q[a+104>>2]=Eo;}Fo=q[a+144>>2];d:{if((Fo|0)<1){break d}Io=q[a+152>>2];Eo=0;while(1){Jo=Io+(Eo<<2)|0;Ko=u[Jo>>2];if(Ko!=Lo){Eo=Eo+1|0;if((Fo|0)!=(Eo|0)){continue}break d}break}if((Fo|0)<=(Eo|0)){break d}Eo=Fo+ -1|0;Fo=Io+(Eo<<2)|0;q[Jo>>2]=q[Fo>>2];u[Fo>>2]=Ko;q[a+144>>2]=Eo;}Fo=q[a+164>>2];e:{if((Fo|0)<1){break e}Io=q[a+172>>2];Eo=0;while(1){Jo=Io+(Eo<<2)|0;if(q[Jo>>2]!=(Do|0)){Eo=Eo+1|0;if((Fo|0)!=(Eo|0)){continue}break e}break}if((Fo|0)<=(Eo|0)){break e}Eo=(Io+(Fo<<2)|0)+ -4|0;q[Jo>>2]=q[Eo>>2];q[Eo>>2]=Do;q[a+164>>2]=q[a+164>>2]+ -1;}P=Go+80|0;}function ni(a,Do,No,Oo){var Po=0,Qo=0,Ro=0,So=0;Ro=P+ -64|0;P=Ro;So=w(Do,80);Po=So+q[a+28>>2]|0;Do=No;Qo=q[Do+4>>2];q[Po>>2]=q[Do>>2];q[Po+4>>2]=Qo;Qo=q[Do+12>>2];q[Po+8>>2]=q[Do+8>>2];q[Po+12>>2]=Qo;Qo=q[Do+28>>2];q[Po+24>>2]=q[Do+24>>2];q[Po+28>>2]=Qo;Qo=q[Do+20>>2];q[Po+16>>2]=q[Do+16>>2];q[Po+20>>2]=Qo;Qo=q[Do+44>>2];q[Po+40>>2]=q[Do+40>>2];q[Po+44>>2]=Qo;Qo=q[Do+36>>2];q[Po+32>>2]=q[Do+32>>2];q[Po+36>>2]=Qo;Qo=q[Do+60>>2];q[Po+56>>2]=q[Do+56>>2];q[Po+60>>2]=Qo;Qo=q[Do+52>>2];q[Po+48>>2]=q[Do+48>>2];q[Po+52>>2]=Qo;if(q[a+68>>2]){Do=q[(q[a+28>>2]+So|0)+64>>2];n[q[q[Do>>2]+8>>2]](Do,No,Ro+48|0,Ro+32|0);Do=Ro;No=q[Do+60>>2];Po=q[Do+56>>2];q[Do+8>>2]=Po;q[Do+12>>2]=No;No=q[Do+44>>2];q[Do+24>>2]=q[Do+40>>2];q[Do+28>>2]=No;No=q[Do+36>>2];q[Do+16>>2]=q[Do+32>>2];q[Do+20>>2]=No;No=q[Do+52>>2];q[Do>>2]=q[Do+48>>2];q[Do+4>>2]=No;te(q[a+68>>2],q[(q[a+28>>2]+So|0)+76>>2],Do);}if(Oo){n[q[q[a>>2]+68>>2]](a);}P=Ro- -64|0;}function oi(a){a=a|0;var Do=0;q[a>>2]=11668;Do=q[a+68>>2];if(Do){ue(Do);Do=q[a+68>>2];if(Do){q[6658]=q[6658]+1;n[q[5256]](Do);}}Do=q[a+172>>2];if(Do){if(r[a+176|0]){if(Do){q[6658]=q[6658]+1;n[q[5256]](Do);}}q[a+172>>2]=0;}q[a+172>>2]=0;q[a+164>>2]=0;q[a+168>>2]=0;o[a+176|0]=1;Do=q[a+152>>2];if(Do){if(r[a+156|0]){if(Do){q[6658]=q[6658]+1;n[q[5256]](Do);}}q[a+152>>2]=0;}q[a+152>>2]=0;q[a+144>>2]=0;q[a+148>>2]=0;o[a+156|0]=1;Do=q[a+132>>2];if(Do){if(r[a+136|0]){if(Do){q[6658]=q[6658]+1;n[q[5256]](Do);}}q[a+132>>2]=0;}q[a+132>>2]=0;q[a+124>>2]=0;q[a+128>>2]=0;o[a+136|0]=1;Do=q[a+112>>2];if(Do){if(r[a+116|0]){if(Do){q[6658]=q[6658]+1;n[q[5256]](Do);}}q[a+112>>2]=0;}q[a+112>>2]=0;q[a+104>>2]=0;q[a+108>>2]=0;o[a+116|0]=1;Do=q[a+92>>2];if(Do){if(r[a+96|0]){if(Do){q[6658]=q[6658]+1;n[q[5256]](Do);}}q[a+92>>2]=0;}q[a+92>>2]=0;q[a+84>>2]=0;q[a+88>>2]=0;o[a+96|0]=1;Do=q[a+28>>2];if(Do){if(r[a+32|0]){if(Do){q[6658]=q[6658]+1;n[q[5256]](Do);}}q[a+28>>2]=0;}q[a+28>>2]=0;q[a+20>>2]=0;q[a+24>>2]=0;o[a+32|0]=1;return a|0}function pi(a,No){var Oo=0,To=0,Uo=0,Vo=0;q[a>>2]=11668;q[a+76>>2]=0;Oo=a;q[Oo+68>>2]=0;q[Oo+72>>2]=1;q[Oo+52>>2]=-581039253;q[Oo+56>>2]=-581039253;q[Oo+36>>2]=1566444395;q[Oo+40>>2]=1566444395;q[Oo+8>>2]=0;q[Oo+12>>2]=-1;o[Oo+32|0]=1;q[Oo+28>>2]=0;o[Oo+96|0]=1;q[Oo+60>>2]=-581039253;q[Oo+64>>2]=0;q[Oo+44>>2]=1566444395;q[Oo+48>>2]=0;q[Oo+20>>2]=0;q[Oo+24>>2]=0;q[Oo+92>>2]=0;q[Oo+84>>2]=0;q[Oo+88>>2]=0;o[Oo+116|0]=1;q[Oo+112>>2]=0;o[Oo+136|0]=1;q[Oo+104>>2]=0;q[Oo+108>>2]=0;q[Oo+124>>2]=0;q[Oo+128>>2]=0;q[Oo+132>>2]=0;o[Oo+156|0]=1;q[Oo+152>>2]=0;q[Oo+144>>2]=0;q[Oo+148>>2]=0;o[Oo+176|0]=1;q[Oo+172>>2]=0;q[Oo+164>>2]=0;q[Oo+168>>2]=0;q[Oo+184>>2]=1065353216;q[Oo+188>>2]=1065353216;q[Oo+192>>2]=1065353216;q[Oo+196>>2]=0;o[Oo+180|0]=0;q[Oo+4>>2]=31;if(No){q[6657]=q[6657]+1;No=n[q[5255]](40,16)|0;q[No+16>>2]=0;q[No+8>>2]=-1;q[No+12>>2]=0;q[No>>2]=0;q[No+4>>2]=0;q[No+32>>2]=0;o[No+36|0]=1;q[No+24>>2]=0;q[No+28>>2]=0;q[a+68>>2]=No;No=q[a+24>>2];}else {No=0;}if((No|0)<0){Vo=q[a+20>>2];if((Vo|0)>=1){while(1){No=w(Uo,80);Oo=No+q[a+28>>2]|0;To=q[Oo+4>>2];q[No>>2]=q[Oo>>2];q[No+4>>2]=To;To=q[Oo+12>>2];q[No+8>>2]=q[Oo+8>>2];q[No+12>>2]=To;To=q[Oo+28>>2];q[No+24>>2]=q[Oo+24>>2];q[No+28>>2]=To;To=q[Oo+20>>2];q[No+16>>2]=q[Oo+16>>2];q[No+20>>2]=To;To=q[Oo+44>>2];q[No+40>>2]=q[Oo+40>>2];q[No+44>>2]=To;To=q[Oo+36>>2];q[No+32>>2]=q[Oo+32>>2];q[No+36>>2]=To;To=q[Oo+60>>2];q[No+56>>2]=q[Oo+56>>2];q[No+60>>2]=To;To=q[Oo+52>>2];q[No+48>>2]=q[Oo+48>>2];q[No+52>>2]=To;To=q[Oo+68>>2];q[No+64>>2]=q[Oo+64>>2];q[No+68>>2]=To;To=q[Oo+76>>2];q[No+72>>2]=q[Oo+72>>2];q[No+76>>2]=To;Uo=Uo+1|0;if((Vo|0)!=(Uo|0)){continue}break}}No=q[a+28>>2];if(No){if(r[a+32|0]){if(No){q[6658]=q[6658]+1;n[q[5256]](No);}}q[a+28>>2]=0;}q[a+28>>2]=0;o[a+32|0]=1;q[a+24>>2]=0;}}function qi(a,No,Wo){Wo=x(Wo);return 0}function ri(a){a=a|0;var No=0,Wo=0,Xo=0,Yo=0,Zo=0;q[a>>2]=11264;No=q[a+84>>2];Yo=q[No+8>>2];if((Yo|0)>=1){while(1){Wo=q[(q[No+16>>2]+w(Xo,12)|0)+8>>2];if(Wo){n[q[q[Wo>>2]>>2]](Wo)|0;Zo=q[a+4>>2];n[q[q[Zo>>2]+60>>2]](Zo,Wo);}Xo=Xo+1|0;if((Yo|0)!=(Xo|0)){continue}break}No=q[a+84>>2];}si(No);No=q[a+84>>2];n[q[q[No>>2]>>2]](No)|0;No=q[a+84>>2];if(No){q[6658]=q[6658]+1;n[q[5256]](No);}No=q[a+100>>2];if(No){if(r[a+104|0]){if(No){q[6658]=q[6658]+1;n[q[5256]](No);}}q[a+100>>2]=0;}q[a+100>>2]=0;q[a+92>>2]=0;q[a+96>>2]=0;o[a+104|0]=1;Le(a);return a|0}function si(a){var _o=0,$o=0,ap=0,bp=0,cp=0,dp=0;_o=q[a+16>>2];if(_o){if(r[a+20|0]){if(_o){q[6658]=q[6658]+1;n[q[5256]](_o);}}q[a+16>>2]=0;}q[a+16>>2]=0;q[a+8>>2]=0;q[a+12>>2]=0;o[a+20|0]=1;_o=q[a+36>>2];if(_o){if(r[a+40|0]){if(_o){q[6658]=q[6658]+1;n[q[5256]](_o);}}q[a+36>>2]=0;}q[a+36>>2]=0;q[a+28>>2]=0;q[a+32>>2]=0;o[a+40|0]=1;_o=q[a+56>>2];if(_o){if(r[a+60|0]){if(_o){q[6658]=q[6658]+1;n[q[5256]](_o);}}q[a+56>>2]=0;}_o=0;q[a+56>>2]=0;q[a+48>>2]=0;q[a+52>>2]=0;o[a+60|0]=1;if(q[a+12>>2]<=1){q[6657]=q[6657]+1;bp=n[q[5255]](24,16)|0;cp=q[a+8>>2];if((cp|0)>=1){while(1){$o=w(_o,12);ap=$o+q[a+16>>2]|0;dp=q[ap+4>>2];$o=$o+bp|0;q[$o>>2]=q[ap>>2];q[$o+4>>2]=dp;q[$o+8>>2]=q[ap+8>>2];_o=_o+1|0;if((cp|0)!=(_o|0)){continue}break}}_o=q[a+16>>2];if(_o){if(r[a+20|0]){if(_o){q[6658]=q[6658]+1;n[q[5256]](_o);}}q[a+16>>2]=0;}q[a+16>>2]=bp;o[a+20|0]=1;q[a+12>>2]=2;}Ke(a);}function ti(a){a=a|0;var ep=0;q[a>>2]=11200;ep=q[a+56>>2];if(ep){if(r[a+60|0]){if(ep){q[6658]=q[6658]+1;n[q[5256]](ep);}}q[a+56>>2]=0;}q[a+56>>2]=0;q[a+48>>2]=0;q[a+52>>2]=0;o[a+60|0]=1;ep=q[a+36>>2];if(ep){if(r[a+40|0]){if(ep){q[6658]=q[6658]+1;n[q[5256]](ep);}}q[a+36>>2]=0;}q[a+36>>2]=0;q[a+28>>2]=0;q[a+32>>2]=0;o[a+40|0]=1;ep=q[a+16>>2];if(ep){if(r[a+20|0]){if(ep){q[6658]=q[6658]+1;n[q[5256]](ep);}}q[a+16>>2]=0;}q[a+16>>2]=0;q[a+8>>2]=0;q[a+12>>2]=0;o[a+20|0]=1;return a|0}function ui(a,fp,gp){var hp=0,ip=0,jp=0,kp=x(0),lp=x(0),mp=x(0),np=x(0),op=x(0),pp=x(0),qp=x(0),rp=x(0),sp=x(0),tp=x(0),up=x(0),vp=x(0),wp=x(0),xp=x(0),yp=x(0),zp=x(0),Ap=x(0),Bp=x(0),Cp=x(0),Dp=x(0),Ep=x(0),Fp=0,Gp=x(0),Hp=x(0),Ip=x(0);hp=P-160|0;P=hp;jp=q[a+4>>2];ip=q[jp+12>>2];Gp=u[ip+52>>2];Hp=u[ip+56>>2];kp=u[ip+24>>2];lp=u[ip+20>>2];mp=u[ip+40>>2];np=u[ip+36>>2];Ip=u[ip+48>>2];op=u[ip+8>>2];pp=u[ip>>2];qp=u[ip+4>>2];rp=u[ip+16>>2];sp=u[ip+32>>2];ip=q[q[jp+4>>2]+28>>2]+w(gp,80)|0;tp=u[ip+32>>2];up=u[ip>>2];vp=u[ip+16>>2];wp=u[ip+56>>2];xp=u[ip+52>>2];yp=u[ip+48>>2];zp=u[ip+36>>2];Ap=u[ip+20>>2];Bp=u[ip+4>>2];Cp=u[ip+40>>2];Dp=u[ip+24>>2];Ep=u[ip+8>>2];jp=0;q[hp+156>>2]=0;q[hp+140>>2]=0;q[hp+124>>2]=0;u[hp+136>>2]=x(x(sp*Ep)+x(np*Dp))+x(mp*Cp);u[hp+132>>2]=x(x(sp*Bp)+x(np*Ap))+x(mp*zp);u[hp+120>>2]=x(x(rp*Ep)+x(lp*Dp))+x(kp*Cp);u[hp+116>>2]=x(x(rp*Bp)+x(lp*Ap))+x(kp*zp);u[hp+152>>2]=Hp+x(x(x(sp*yp)+x(np*xp))+x(mp*wp));u[hp+148>>2]=Gp+x(x(x(rp*yp)+x(lp*xp))+x(kp*wp));q[hp+108>>2]=0;u[hp+128>>2]=x(x(sp*up)+x(np*vp))+x(mp*tp);u[hp+112>>2]=x(x(rp*up)+x(lp*vp))+x(kp*tp);u[hp+96>>2]=x(x(pp*up)+x(qp*vp))+x(op*tp);u[hp+104>>2]=x(x(pp*Ep)+x(qp*Dp))+x(op*Cp);u[hp+100>>2]=x(x(pp*Bp)+x(qp*Ap))+x(op*zp);u[hp+144>>2]=Ip+x(x(x(pp*yp)+x(qp*xp))+x(op*wp));n[q[q[fp>>2]+8>>2]](fp,hp+96|0,hp+80|0,hp- -64|0);kp=u[q[a+20>>2]+32>>2];u[hp+80>>2]=u[hp+80>>2]-kp;u[hp+84>>2]=u[hp+84>>2]-kp;u[hp+88>>2]=u[hp+88>>2]-kp;u[hp+64>>2]=kp+u[hp+64>>2];u[hp+68>>2]=kp+u[hp+68>>2];u[hp+72>>2]=kp+u[hp+72>>2];ip=q[a+8>>2];Fp=q[ip+4>>2];n[q[q[Fp>>2]+8>>2]](Fp,q[ip+12>>2],hp+48|0,hp+32|0);ip=q[6043];a:{if(ip){if(!n[ip](q[q[a+8>>2]+4>>2],fp)){break a}}jp=u[hp+64>>2]<u[hp+48>>2]|u[hp+80>>2]>u[hp+32>>2]?jp:1;ip=0;ip=u[hp+72>>2]<u[hp+56>>2]|u[hp+88>>2]>u[hp+40>>2]?ip:jp;if(u[hp+68>>2]<u[hp+52>>2]|u[hp+84>>2]>u[hp+36>>2]|ip^1){break a}ip=q[a+4>>2];jp=q[ip+8>>2];q[hp+28>>2]=gp;q[hp+24>>2]=-1;q[hp+16>>2]=jp;q[hp+12>>2]=fp;q[hp+8>>2]=ip;q[hp+20>>2]=hp+96;b:{if(!!(u[q[a+20>>2]+32>>2]>x(0))){fp=q[a+12>>2];fp=n[q[q[fp>>2]+8>>2]](fp,hp+8|0,q[a+8>>2],0,2)|0;break b}ip=gp<<2;fp=q[ip+q[a+24>>2]>>2];if(fp){break b}fp=q[a+12>>2];fp=n[q[q[fp>>2]+8>>2]](fp,hp+8|0,q[a+8>>2],q[a+28>>2],1)|0;q[ip+q[a+24>>2]>>2]=fp;fp=q[ip+q[a+24>>2]>>2];}jp=q[a+20>>2];ip=q[jp+8>>2];c:{if(q[ip+8>>2]==q[q[a+4>>2]+8>>2]){q[jp+8>>2]=hp+8;n[q[q[jp>>2]+8>>2]](jp,-1,gp);break c}ip=q[jp+12>>2];q[jp+12>>2]=hp+8;n[q[q[jp>>2]+12>>2]](jp,-1,gp);}n[q[q[fp>>2]+8>>2]](fp,hp+8|0,q[a+8>>2],q[a+16>>2],q[a+20>>2]);fp=q[a+20>>2];q[(q[q[fp+8>>2]+8>>2]==q[q[a+4>>2]+8>>2]?8:12)+fp>>2]=ip;}P=hp+160|0;}function vi(a,fp,gp,Jp,Kp){a=a|0;fp=fp|0;gp=gp|0;Jp=Jp|0;Kp=Kp|0;var Lp=0,Mp=0,Np=0,Op=x(0),Pp=x(0),Qp=x(0),Rp=x(0),Sp=x(0),Tp=x(0),Up=x(0),Vp=x(0),Wp=x(0),Xp=0,Yp=0,Zp=0,_p=x(0),$p=x(0),aq=x(0),bq=x(0),cq=x(0),dq=x(0),eq=x(0),fq=x(0),gq=x(0),hq=x(0),iq=x(0),jq=x(0),kq=x(0),lq=0,mq=x(0),nq=x(0),oq=0;Lp=P-176|0;P=Lp;Yp=r[a+68|0];oq=Yp?gp:fp;lq=q[oq+4>>2];if(q[lq+72>>2]!=q[a+80>>2]){Xp=q[a+52>>2];if((Xp|0)>=1){while(1){Zp=Mp<<2;Np=q[Zp+q[a+60>>2]>>2];if(Np){n[q[q[Np>>2]>>2]](Np)|0;Np=q[a+4>>2];n[q[q[Np>>2]+60>>2]](Np,q[Zp+q[a+60>>2]>>2]);}Mp=Mp+1|0;if((Xp|0)!=(Mp|0)){continue}break}}wi(a,fp,gp);q[a+80>>2]=q[lq+72>>2];}Np=q[a+52>>2];a:{if(!Np){break a}Xp=q[lq+68>>2];Mp=q[a+4>>2];Zp=q[a+60>>2];q[Lp+172>>2]=q[a+72>>2];q[Lp+168>>2]=Zp;q[Lp+164>>2]=Kp;q[Lp+160>>2]=Jp;q[Lp+156>>2]=Mp;Jp=Yp?fp:gp;q[Lp+152>>2]=Jp;q[Lp+148>>2]=oq;q[Lp+144>>2]=11124;Mp=q[a+32>>2];if((Mp|0)<=-1){if(q[a+36>>2]<=-1){fp=q[a+40>>2];if(fp){if(r[a+44|0]){if(fp){q[6658]=q[6658]+1;n[q[5256]](fp);}}q[a+40>>2]=0;}q[a+36>>2]=0;q[a+40>>2]=0;o[a+44|0]=1;}while(1){q[q[a+40>>2]+(Mp<<2)>>2]=0;fp=Mp+1|0;gp=fp>>>0>=Mp>>>0;Mp=fp;if(gp){continue}break}Np=q[a+52>>2];}q[a+32>>2]=0;if((Np|0)>=1){Yp=a+28|0;gp=0;while(1){fp=q[q[a+60>>2]+(gp<<2)>>2];if(fp){n[q[q[fp>>2]+16>>2]](fp,Yp);Np=0;Mp=q[a+32>>2];if((Mp|0)>0){while(1){fp=q[q[a+40>>2]+(Np<<2)>>2];if(q[fp+844>>2]){q[Kp+4>>2]=fp;Mp=q[fp+836>>2];Zp=q[q[Kp+8>>2]+8>>2];b:{if((Mp|0)!=(Zp|0)){ba(fp,q[q[Kp+12>>2]+8>>2]+4|0,Zp+4|0);break b}ba(fp,Mp+4|0,q[q[Kp+12>>2]+8>>2]+4|0);}q[Kp+4>>2]=0;Mp=q[a+32>>2];}Np=Np+1|0;if((Np|0)<(Mp|0)){continue}break}}if((Mp|0)<=-1){if(q[a+36>>2]<=-1){fp=q[a+40>>2];if(fp){if(r[a+44|0]){if(fp){q[6658]=q[6658]+1;n[q[5256]](fp);}}q[a+40>>2]=0;}o[a+44|0]=1;q[a+36>>2]=0;q[a+40>>2]=0;}while(1){q[q[a+40>>2]+(Mp<<2)>>2]=0;fp=Mp+1|0;Np=fp>>>0<Mp>>>0;Mp=fp;if(!Np){continue}break}}q[a+32>>2]=0;Np=q[a+52>>2];}gp=gp+1|0;if((gp|0)<(Np|0)){continue}break}}c:{if(!Xp){if((Np|0)<1){break c}Mp=0;while(1){ui(Lp+144|0,q[(q[lq+28>>2]+w(Mp,80)|0)+64>>2],Mp);Mp=Mp+1|0;if((Np|0)!=(Mp|0)){continue}break}break c}fp=q[oq+12>>2];_p=u[fp+52>>2];$p=u[fp+56>>2];gp=q[Jp+12>>2];aq=u[gp+52>>2];bq=u[gp+56>>2];Op=u[fp+20>>2];Pp=u[fp+36>>2];cq=u[gp+20>>2];dq=u[gp+36>>2];eq=u[gp+24>>2];Qp=u[fp+24>>2];fq=u[gp+40>>2];Rp=u[fp+40>>2];gq=u[gp+32>>2];Sp=u[fp+32>>2];hq=u[gp>>2];Tp=u[fp>>2];iq=u[gp+16>>2];Up=u[fp+16>>2];jq=u[fp+48>>2];kq=u[gp+48>>2];Vp=u[fp+4>>2];mq=u[gp+4>>2];nq=u[gp+8>>2];Wp=u[fp+8>>2];q[Lp+108>>2]=0;q[Lp+92>>2]=0;q[Lp+76>>2]=0;u[Lp+88>>2]=x(x(Wp*nq)+x(Qp*eq))+x(Rp*fq);u[Lp+84>>2]=x(x(Wp*mq)+x(Qp*cq))+x(Rp*dq);u[Lp+72>>2]=x(x(Vp*nq)+x(Op*eq))+x(Pp*fq);u[Lp+68>>2]=x(x(Vp*mq)+x(Op*cq))+x(Pp*dq);_p=x(-_p);u[Lp+104>>2]=x(x(x(Qp*_p)-x(Wp*jq))-x(Rp*$p))+x(x(x(Wp*kq)+x(Qp*aq))+x(Rp*bq));u[Lp+100>>2]=x(x(x(Op*_p)-x(Vp*jq))-x(Pp*$p))+x(x(x(Vp*kq)+x(Op*aq))+x(Pp*bq));q[Lp+60>>2]=0;u[Lp+48>>2]=x(x(Tp*hq)+x(Up*iq))+x(Sp*gq);u[Lp+80>>2]=x(x(Wp*hq)+x(Qp*iq))+x(Rp*gq);u[Lp+64>>2]=x(x(Vp*hq)+x(Op*iq))+x(Pp*gq);u[Lp+56>>2]=x(x(Tp*nq)+x(Up*eq))+x(Sp*fq);u[Lp+52>>2]=x(x(Tp*mq)+x(Up*cq))+x(Sp*dq);u[Lp+96>>2]=x(x(x(Up*_p)-x(Tp*jq))-x(Sp*$p))+x(x(x(Tp*kq)+x(Up*aq))+x(Sp*bq));fp=q[Jp+4>>2];n[q[q[fp>>2]+8>>2]](fp,Lp+48|0,Lp+128|0,Lp+112|0);Op=u[Kp+32>>2];u[Lp+128>>2]=u[Lp+128>>2]-Op;u[Lp+132>>2]=u[Lp+132>>2]-Op;u[Lp+136>>2]=u[Lp+136>>2]-Op;u[Lp+112>>2]=Op+u[Lp+112>>2];u[Lp+116>>2]=Op+u[Lp+116>>2];u[Lp+120>>2]=Op+u[Lp+120>>2];fp=q[Lp+140>>2];q[Lp+24>>2]=q[Lp+136>>2];q[Lp+28>>2]=fp;fp=q[Lp+124>>2];q[Lp+40>>2]=q[Lp+120>>2];q[Lp+44>>2]=fp;fp=q[Lp+116>>2];q[Lp+32>>2]=q[Lp+112>>2];q[Lp+36>>2]=fp;fp=q[Lp+132>>2];q[Lp+16>>2]=q[Lp+128>>2];q[Lp+20>>2]=fp;dA(q[Xp>>2],Lp+16|0,a+8|0,Lp+144|0);}Xp=q[a+52>>2];Mp=q[a+32>>2];if((Mp|0)<=-1){if(q[a+36>>2]<=-1){fp=q[a+40>>2];if(fp){if(r[a+44|0]){if(fp){q[6658]=q[6658]+1;n[q[5256]](fp);}}q[a+40>>2]=0;}q[a+36>>2]=0;q[a+40>>2]=0;o[a+44|0]=1;}while(1){q[q[a+40>>2]+(Mp<<2)>>2]=0;fp=Mp+1|0;gp=fp>>>0>=Mp>>>0;Mp=fp;if(gp){continue}break}}q[a+32>>2]=0;if((Xp|0)<1){break a}Kp=0;while(1){Mp=Kp<<2;d:{if(!q[Mp+q[a+60>>2]>>2]){break d}fp=q[lq+28>>2]+w(Kp,80)|0;Yp=q[fp+64>>2];gp=q[oq+12>>2];mq=u[gp+52>>2];nq=u[gp+56>>2];$p=u[fp+48>>2];aq=u[fp+52>>2];bq=u[fp+56>>2];cq=u[fp+4>>2];dq=u[fp+20>>2];eq=u[fp+36>>2];fq=u[fp+8>>2];gq=u[fp+24>>2];hq=u[fp+40>>2];Op=u[gp+20>>2];Pp=u[gp+24>>2];iq=u[fp>>2];jq=u[fp+16>>2];Qp=u[gp+36>>2];kq=u[fp+32>>2];Rp=u[gp+40>>2];_p=u[gp+48>>2];Sp=u[gp+8>>2];Tp=u[gp>>2];Up=u[gp+4>>2];Vp=u[gp+16>>2];Wp=u[gp+32>>2];Np=0;q[Lp+108>>2]=0;q[Lp+92>>2]=0;q[Lp+76>>2]=0;q[Lp+60>>2]=0;u[Lp+80>>2]=x(x(Wp*iq)+x(Qp*jq))+x(Rp*kq);u[Lp+64>>2]=x(x(Vp*iq)+x(Op*jq))+x(Pp*kq);u[Lp+48>>2]=x(x(Tp*iq)+x(Up*jq))+x(Sp*kq);u[Lp+88>>2]=x(x(Wp*fq)+x(Qp*gq))+x(Rp*hq);u[Lp+84>>2]=x(x(Wp*cq)+x(Qp*dq))+x(Rp*eq);u[Lp+72>>2]=x(x(Vp*fq)+x(Op*gq))+x(Pp*hq);u[Lp+68>>2]=x(x(Vp*cq)+x(Op*dq))+x(Pp*eq);u[Lp+56>>2]=x(x(Tp*fq)+x(Up*gq))+x(Sp*hq);u[Lp+52>>2]=x(x(Tp*cq)+x(Up*dq))+x(Sp*eq);u[Lp+104>>2]=nq+x(x(x(Wp*$p)+x(Qp*aq))+x(Rp*bq));u[Lp+100>>2]=mq+x(x(x(Vp*$p)+x(Op*aq))+x(Pp*bq));u[Lp+96>>2]=_p+x(x(x(Tp*$p)+x(Up*aq))+x(Sp*bq));n[q[q[Yp>>2]+8>>2]](Yp,Lp+48|0,Lp+16|0,Lp+128|0);fp=q[Jp+4>>2];n[q[q[fp>>2]+8>>2]](fp,q[Jp+12>>2],Lp+112|0,Lp);fp=0;e:{if(u[Lp+16>>2]>u[Lp>>2]){break e}fp=0;if(u[Lp+128>>2]<u[Lp+112>>2]){break e}fp=1;}Np=u[Lp+136>>2]<u[Lp+120>>2]|u[Lp+24>>2]>u[Lp+8>>2]?Np:fp;if(Np^1?0:!(u[Lp+132>>2]<u[Lp+116>>2]|u[Lp+20>>2]>u[Lp+4>>2])){break d}fp=q[Mp+q[a+60>>2]>>2];n[q[q[fp>>2]>>2]](fp)|0;fp=q[a+4>>2];n[q[q[fp>>2]+60>>2]](fp,q[Mp+q[a+60>>2]>>2]);q[Mp+q[a+60>>2]>>2]=0;}Kp=Kp+1|0;if((Xp|0)!=(Kp|0)){continue}break}}P=Lp+176|0;}function wi(a,fp,gp){var Jp=0,Kp=0,pq=0,qq=0,rq=0,sq=0,tq=0,uq=0,vq=0,wq=0;Kp=P-32|0;P=Kp;Jp=q[a+52>>2];uq=r[a+68|0];rq=uq?gp:fp;sq=q[rq+4>>2];pq=q[sq+20>>2];if((Jp|0)<(pq|0)){if(q[a+56>>2]<(pq|0)){if(pq){q[6657]=q[6657]+1;vq=n[q[5255]](pq<<2,16)|0;qq=q[a+52>>2];}else {qq=Jp;}if((qq|0)>=1){while(1){wq=tq<<2;q[wq+vq>>2]=q[q[a+60>>2]+wq>>2];tq=tq+1|0;if((qq|0)!=(tq|0)){continue}break}}qq=q[a+60>>2];if(qq){if(r[a- -64|0]){if(qq){q[6658]=q[6658]+1;n[q[5256]](qq);}}q[a+60>>2]=0;}q[a+60>>2]=vq;q[a+56>>2]=pq;o[a- -64|0]=1;}while(1){q[q[a+60>>2]+(Jp<<2)>>2]=0;Jp=Jp+1|0;if((pq|0)!=(Jp|0)){continue}break}}q[a+52>>2]=pq;if((pq|0)>=1){fp=uq?fp:gp;Jp=0;while(1){a:{if(q[sq+68>>2]){q[q[a+60>>2]+(Jp<<2)>>2]=0;break a}gp=q[rq+12>>2];qq=q[rq+8>>2];q[Kp+12>>2]=q[(q[sq+28>>2]+w(Jp,80)|0)+64>>2];q[Kp+16>>2]=qq;q[Kp+20>>2]=gp;q[Kp+28>>2]=Jp;q[Kp+24>>2]=-1;q[Kp+8>>2]=rq;gp=q[a+4>>2];gp=n[q[q[gp>>2]+8>>2]](gp,Kp+8|0,fp,q[a+72>>2],1)|0;q[q[a+60>>2]+(Jp<<2)>>2]=gp;}Jp=Jp+1|0;if((pq|0)!=(Jp|0)){continue}break}}P=Kp+32|0;}function xi(a,fp,gp,xq){var yq=0,zq=0,Aq=0,Bq=0,Cq=0,Dq=0,Eq=0,Fq=0,Gq=0;while(1){Eq=gp;Aq=q[a+12>>2];Fq=q[Aq+((gp+xq|0)/2<<3)>>2];Bq=gp;yq=xq;while(1){gp=Bq;Bq=gp+1|0;zq=(gp<<3)+Aq|0;if(q[zq>>2]<(Fq|0)){continue}Cq=yq;while(1){yq=Cq;Cq=yq+ -1|0;Gq=yq<<3;Dq=Gq+Aq|0;if(q[Dq>>2]>(Fq|0)){continue}break}if((gp|0)<=(yq|0)){gp=q[zq>>2];yq=q[zq+4>>2];Aq=q[Dq+4>>2];q[zq>>2]=q[Dq>>2];q[zq+4>>2]=Aq;zq=q[a+12>>2]+Gq|0;q[zq>>2]=gp;q[zq+4>>2]=yq;yq=Cq;gp=Bq;}if((gp|0)<=(yq|0)){Aq=q[a+12>>2];Bq=gp;continue}break}if((yq|0)>(Eq|0)){xi(a,fp,Eq,yq);}if((gp|0)<(xq|0)){continue}break}}function yi(a){a=a|0;var fp=0,gp=0;q[a>>2]=10504;a:{if(!r[a+52|0]){break a}fp=q[a+56>>2];if(!fp){break a}gp=q[a+4>>2];n[q[q[gp>>2]+16>>2]](gp,fp);}fp=q[a+44>>2];if(fp){if(r[a+48|0]){if(fp){q[6658]=q[6658]+1;n[q[5256]](fp);}}q[a+44>>2]=0;}q[a+44>>2]=0;q[a+36>>2]=0;q[a+40>>2]=0;o[a+48|0]=1;fp=q[a+24>>2];if(fp){if(r[a+28|0]){if(fp){q[6658]=q[6658]+1;n[q[5256]](fp);}}q[a+24>>2]=0;}q[a+24>>2]=0;q[a+16>>2]=0;q[a+20>>2]=0;o[a+28|0]=1;return a|0}function zi(a,xq,Hq,Iq,Jq,Kq,Lq,Mq){var Nq=0,Oq=0,Pq=0,Qq=0,Rq=0,Sq=x(0),Tq=x(0),Uq=x(0),Vq=0,Wq=x(0),Xq=x(0),Yq=0,Zq=x(0),_q=x(0),$q=x(0),ar=x(0),br=0,cr=0,dr=x(0),er=x(0),fr=x(0),gr=x(0),hr=x(0),ir=x(0),jr=x(0),kr=x(0),lr=x(0),mr=x(0),nr=x(0),or=x(0),pr=x(0),qr=x(0),rr=x(0),sr=x(0),tr=x(0);Rq=P-32|0;P=Rq;Nq=q[Jq+4>>2];if((Nq|0)<=-1){if(q[Jq+8>>2]<=-1){Oq=q[Jq+12>>2];if(Oq){if(r[Jq+16|0]){if(Oq){q[6658]=q[6658]+1;n[q[5256]](Oq);}}q[Jq+12>>2]=0;}o[Jq+16|0]=1;q[Jq+8>>2]=0;q[Jq+12>>2]=0;}while(1){Pq=q[Rq+20>>2];Oq=q[Jq+12>>2]+(Nq<<4)|0;q[Oq>>2]=q[Rq+16>>2];q[Oq+4>>2]=Pq;Qq=q[Rq+28>>2];q[Oq+8>>2]=q[Rq+24>>2];q[Oq+12>>2]=Qq;Oq=Nq+1|0;Qq=Oq>>>0>=Nq>>>0;Nq=Oq;if(Qq){continue}break}}Oq=0;q[Jq+4>>2]=0;Qq=q[Iq+4>>2];if(q[Jq+8>>2]<(Qq|0)){a:{if(!Qq){break a}q[6657]=q[6657]+1;Oq=n[q[5255]](Qq<<4,16)|0;cr=q[Jq+4>>2];if((cr|0)<1){break a}Nq=0;while(1){Pq=Nq<<4;Yq=Pq+Oq|0;Vq=Yq;Pq=Pq+q[Jq+12>>2]|0;br=q[Pq+4>>2];q[Vq>>2]=q[Pq>>2];q[Vq+4>>2]=br;Vq=q[Pq+12>>2];q[Yq+8>>2]=q[Pq+8>>2];q[Yq+12>>2]=Vq;Nq=Nq+1|0;if((cr|0)!=(Nq|0)){continue}break}}Nq=q[Jq+12>>2];if(Nq){if(r[Jq+16|0]){if(Nq){q[6658]=q[6658]+1;n[q[5256]](Nq);}}q[Jq+12>>2]=0;}q[Jq+12>>2]=Oq;o[Jq+16|0]=1;q[Jq+8>>2]=Qq;}Pq=q[xq+28>>2];b:{if((Pq|0)<1){break b}Zq=u[Hq+40>>2];dr=u[Hq+36>>2];Wq=u[Hq+24>>2];er=u[Hq+20>>2];Yq=q[xq+36>>2];_q=u[a+8>>2];fr=u[a+4>>2];$q=u[a>>2];gr=u[Hq+32>>2];hr=u[Hq+16>>2];ir=u[Hq+8>>2];jr=u[Hq+4>>2];ar=u[Hq>>2];Nq=0;Uq=x(3.4028234663852886e+38);Qq=-1;while(1){Oq=Yq+w(Nq,36)|0;Tq=u[Oq+20>>2];Sq=u[Oq+24>>2];Xq=u[Oq+28>>2];Tq=x(x(x(x(x(x(Tq*ar)+x(Sq*jr))+x(Xq*ir))*$q)+x(x(x(x(Tq*hr)+x(Sq*er))+x(Xq*Wq))*fr))+x(x(x(x(Tq*gr)+x(Sq*dr))+x(Xq*Zq))*_q));Oq=Tq<Uq;Uq=Oq?Tq:Uq;Qq=Oq?Nq:Qq;Nq=Nq+1|0;if((Nq|0)<(Pq|0)){continue}break}if((Qq|0)<0){break b}Pq=q[xq+36>>2]+w(Qq,36)|0;cr=q[Pq+4>>2];c:{if((cr|0)<1){Oq=Iq;break c}Nq=0;while(1){Oq=Jq;Qq=Nq+1|0;Yq=(Qq|0)==(cr|0);br=q[xq+16>>2];Vq=q[Pq+12>>2];Jq=br+(q[Vq+((Yq?0:Qq)<<2)>>2]<<4)|0;kr=u[Jq+8>>2];ar=u[Jq>>2];lr=u[Jq+4>>2];Jq=br+(q[(Nq<<2)+Vq>>2]<<4)|0;Uq=u[Jq+8>>2];Tq=u[Jq>>2];Sq=u[Jq+4>>2];rr=u[Hq+56>>2];sr=u[Hq+52>>2];tr=u[Hq+48>>2];Xq=u[Hq+40>>2];Zq=u[Hq+32>>2];dr=u[Hq+36>>2];Wq=u[Pq+28>>2];er=u[Hq+8>>2];_q=u[Pq+20>>2];fr=u[Hq>>2];$q=u[Pq+24>>2];gr=u[Hq+4>>2];hr=u[Hq+24>>2];ir=u[Hq+16>>2];jr=u[Hq+20>>2];q[Rq+28>>2]=0;ar=x(Tq-ar);lr=x(Sq-lr);kr=x(Uq-kr);mr=x(x(x(fr*ar)+x(gr*lr))+x(er*kr));nr=x(x(x(ir*_q)+x(jr*$q))+x(hr*Wq));or=x(x(x(ar*ir)+x(lr*jr))+x(kr*hr));pr=x(x(x(fr*_q)+x(gr*$q))+x(er*Wq));qr=x(x(mr*nr)-x(or*pr));u[Rq+24>>2]=-qr;Wq=x(x(x(Zq*_q)+x(dr*$q))+x(Xq*Wq));_q=x(x(x(ar*Zq)+x(lr*dr))+x(kr*Xq));$q=x(x(or*Wq)-x(_q*nr));u[Rq+16>>2]=-$q;Wq=x(-x(x(_q*pr)-x(mr*Wq)));u[Rq+20>>2]=Wq;Jq=Iq;rA(Jq,Oq,Rq+16|0,x(-x(x(x(x(sr+x(x(x(Tq*ir)+x(Sq*jr))+x(Uq*hr)))*Wq)-x($q*x(tr+x(x(x(Tq*fr)+x(Sq*gr))+x(Uq*er)))))-x(qr*x(rr+x(x(x(Tq*Zq)+x(Sq*dr))+x(Uq*Xq)))))));Nq=q[Jq+4>>2];if((Nq|0)<=-1){if(q[Jq+8>>2]<=-1){Iq=q[Jq+12>>2];if(Iq){if(r[Jq+16|0]){if(Iq){q[6658]=q[6658]+1;n[q[5256]](Iq);}}q[Jq+12>>2]=0;}o[Jq+16|0]=1;q[Jq+8>>2]=0;q[Jq+12>>2]=0;}while(1){br=q[Rq+4>>2];Iq=q[Jq+12>>2]+(Nq<<4)|0;q[Iq>>2]=q[Rq>>2];q[Iq+4>>2]=br;Vq=q[Rq+12>>2];q[Iq+8>>2]=q[Rq+8>>2];q[Iq+12>>2]=Vq;Iq=Nq+1|0;Vq=Iq>>>0>=Nq>>>0;Nq=Iq;if(Vq){continue}break}}q[Jq+4>>2]=0;Nq=Qq;Iq=Oq;if(!Yq){continue}break}}Qq=q[Oq+4>>2];if((Qq|0)<1){break b}Uq=u[Pq+20>>2];Tq=u[Pq+24>>2];Sq=u[Pq+28>>2];Xq=x(x(x(Uq*u[Hq>>2])+x(Tq*u[Hq+4>>2]))+x(Sq*u[Hq+8>>2]));Zq=x(x(x(Uq*u[Hq+16>>2])+x(Tq*u[Hq+20>>2]))+x(Sq*u[Hq+24>>2]));Uq=x(x(x(Uq*u[Hq+32>>2])+x(Tq*u[Hq+36>>2]))+x(Sq*u[Hq+40>>2]));Tq=x(u[Pq+32>>2]-x(x(x(Xq*u[Hq+48>>2])+x(Zq*u[Hq+52>>2]))+x(Uq*u[Hq+56>>2])));Hq=0;while(1){xq=q[Oq+12>>2]+(Hq<<4)|0;Sq=x(Tq+x(x(x(Xq*u[xq>>2])+x(Zq*u[xq+4>>2]))+x(Uq*u[xq+8>>2])));Sq=Sq<=Kq?Kq:Sq;if(!!(Sq<=Lq)){Iq=q[xq+12>>2];q[Rq+24>>2]=q[xq+8>>2];q[Rq+28>>2]=Iq;Iq=q[xq+4>>2];q[Rq+16>>2]=q[xq>>2];q[Rq+20>>2]=Iq;n[q[q[Mq>>2]+16>>2]](Mq,a,Rq+16|0,Sq);Qq=q[Oq+4>>2];}Hq=Hq+1|0;if((Hq|0)<(Qq|0)){continue}break}}P=Rq+32|0;}function Ai(a,xq,Hq,Iq,Jq){a=a|0;xq=xq|0;Hq=Hq|0;Iq=Iq|0;Jq=Jq|0;var Kq=x(0),Lq=x(0),Mq=x(0),ur=x(0),vr=x(0),wr=x(0),xr=x(0),yr=x(0),zr=x(0),Ar=x(0),Br=x(0),Cr=x(0),Dr=x(0),Er=x(0),Fr=x(0),Gr=x(0),Hr=x(0),Ir=x(0),Jr=x(0),Kr=x(0),Lr=x(0),Mr=x(0),Nr=x(0),Or=x(0);Iq=P-144|0;P=Iq;q[Iq+108>>2]=0;Kq=u[xq+80>>2];Mq=u[xq+96>>2];Ar=u[xq+120>>2];Mr=u[xq+56>>2];Hr=u[xq+112>>2];Ir=u[xq+116>>2];Nr=u[xq+52>>2];ur=u[xq+68>>2];Br=u[xq+84>>2];Cr=u[xq+100>>2];Lq=u[xq+20>>2];yr=u[xq+36>>2];Dr=u[xq+72>>2];vr=u[xq+88>>2];zr=u[xq+24>>2];wr=u[xq+104>>2];Er=u[xq+40>>2];xr=u[xq+64>>2];Fr=u[xq+32>>2];Gr=u[xq>>2];Jr=u[xq+16>>2];Or=u[xq+48>>2];Kr=u[xq+4>>2];Lr=u[xq+8>>2];q[Iq+100>>2]=0;q[Iq+84>>2]=0;q[Iq+68>>2]=0;u[Iq+80>>2]=x(x(Lr*Dr)+x(zr*vr))+x(Er*wr);u[Iq+76>>2]=x(x(Kr*Dr)+x(Lq*vr))+x(yr*wr);u[Iq- -64>>2]=x(x(Lr*ur)+x(zr*Br))+x(Er*Cr);u[Iq+60>>2]=x(x(Kr*ur)+x(Lq*Br))+x(yr*Cr);Hr=x(Or-Hr);Ir=x(Nr-Ir);Ar=x(Mr-Ar);u[Iq+96>>2]=x(x(Dr*Hr)+x(vr*Ir))+x(wr*Ar);u[Iq+92>>2]=x(x(Hr*ur)+x(Ir*Br))+x(Ar*Cr);q[Iq+52>>2]=0;u[Iq+72>>2]=x(x(Gr*Dr)+x(Jr*vr))+x(Fr*wr);u[Iq+56>>2]=x(x(Gr*ur)+x(Jr*Br))+x(Fr*Cr);u[Iq+48>>2]=x(x(xr*Lr)+x(Kq*zr))+x(Mq*Er);u[Iq+44>>2]=x(x(xr*Kr)+x(Kq*Lq))+x(Mq*yr);u[Iq+40>>2]=x(x(xr*Gr)+x(Kq*Jr))+x(Mq*Fr);u[Iq+88>>2]=x(x(Hr*xr)+x(Ir*Kq))+x(Ar*Mq);a:{if(!xA(a,Iq+88|0,Iq+128|0,Iq+112|0,Iq+108|0,u[a+12>>2])){break a}if(Jq){Br=u[xq+72>>2];Cr=u[xq+64>>2];Dr=u[xq+68>>2];vr=u[xq+88>>2];wr=u[xq+80>>2];xr=u[xq+84>>2];Lq=u[xq+104>>2];yr=u[xq+96>>2];zr=u[xq+100>>2];Kq=u[Iq+120>>2];Mq=u[Iq+112>>2];ur=u[Iq+116>>2];q[Iq+36>>2]=0;Er=x(x(x(Mq*yr)+x(ur*zr))+x(Kq*Lq));u[Iq+32>>2]=-Er;Fr=x(x(x(Mq*wr)+x(ur*xr))+x(Kq*vr));u[Iq+28>>2]=-Fr;Gr=x(x(x(Cr*Mq)+x(Dr*ur))+x(Br*Kq));u[Iq+24>>2]=-Gr;Jr=u[xq+112>>2];Kr=u[xq+116>>2];Kq=u[xq+120>>2];q[Iq+20>>2]=0;Mq=u[Iq+128>>2];ur=u[Iq+132>>2];Ar=Lq;Lq=u[Iq+136>>2];Ar=x(Kq+x(x(x(yr*Mq)+x(zr*ur))+x(Ar*Lq)));Kq=u[Iq+108>>2];u[Iq+16>>2]=Ar+x(Er*Kq);u[Iq+12>>2]=x(Kr+x(x(x(Mq*wr)+x(ur*xr))+x(Lq*vr)))+x(Fr*Kq);u[Iq+8>>2]=x(Jr+x(x(x(Mq*Cr)+x(ur*Dr))+x(Lq*Br)))+x(Gr*Kq);n[q[q[Hq>>2]+16>>2]](Hq,Iq+24|0,Iq+8|0,Kq);break a}Kq=u[xq+72>>2];Mq=u[xq+64>>2];ur=u[xq+68>>2];Br=u[xq+88>>2];Cr=u[xq+80>>2];Dr=u[xq+84>>2];vr=u[xq+104>>2];wr=u[xq+96>>2];xr=u[xq+100>>2];q[Iq+36>>2]=0;Lq=u[Iq+112>>2];yr=u[Iq+116>>2];zr=u[Iq+120>>2];u[Iq+32>>2]=x(x(wr*Lq)+x(xr*yr))+x(vr*zr);u[Iq+28>>2]=x(x(Lq*Cr)+x(yr*Dr))+x(zr*Br);u[Iq+24>>2]=x(x(Mq*Lq)+x(ur*yr))+x(Kq*zr);Lq=u[xq+112>>2];yr=u[xq+116>>2];zr=u[xq+120>>2];q[Iq+20>>2]=0;Ar=wr;wr=u[Iq+128>>2];Er=xr;xr=u[Iq+132>>2];Fr=vr;vr=u[Iq+136>>2];u[Iq+16>>2]=zr+x(x(x(Ar*wr)+x(Er*xr))+x(Fr*vr));u[Iq+12>>2]=yr+x(x(x(wr*Cr)+x(xr*Dr))+x(vr*Br));u[Iq+8>>2]=Lq+x(x(x(wr*Mq)+x(xr*ur))+x(vr*Kq));n[q[q[Hq>>2]+16>>2]](Hq,Iq+24|0,Iq+8|0,u[Iq+108>>2]);}P=Iq+144|0;}function Bi(a,xq,Hq,Iq,Jq,Pr){a=a|0;xq=xq|0;Hq=Hq|0;Iq=x(Iq);Jq=Jq|0;Pr=Pr|0;var Qr=0;Qr=P+ -64|0;P=Qr;q[Qr+60>>2]=Pr;q[Qr+56>>2]=Jq;Jq=q[a+212>>2];if(!!(u[Jq+4>>2]>=Iq)){q[Qr+8>>2]=q[a+216>>2];q[Qr+12>>2]=Qr+56;a=q[xq+12>>2];q[Qr+24>>2]=q[xq+8>>2];q[Qr+28>>2]=a;a=q[xq+4>>2];q[Qr+16>>2]=q[xq>>2];q[Qr+20>>2]=a;a=q[Hq+12>>2];q[Qr+40>>2]=q[Hq+8>>2];q[Qr+44>>2]=a;a=q[Hq+4>>2];q[Qr+32>>2]=q[Hq>>2];q[Qr+36>>2]=a;u[Qr+48>>2]=Iq;Iq=x(n[q[q[Jq>>2]+12>>2]](Jq,Qr+8|0,1));}P=Qr- -64|0;return x(Iq)}function Ci(a,xq){return 1}function Di(a){var xq=0;xq=q[a+72>>2];if(xq){if(r[a+76|0]){if(xq){q[6658]=q[6658]+1;n[q[5256]](xq);}}q[a+72>>2]=0;}q[a+72>>2]=0;q[a+64>>2]=0;q[a+68>>2]=0;o[a+76|0]=1;xq=q[a+52>>2];if(xq){if(r[a+56|0]){if(xq){q[6658]=q[6658]+1;n[q[5256]](xq);}}q[a+52>>2]=0;}q[a+52>>2]=0;q[a+44>>2]=0;q[a+48>>2]=0;o[a+56|0]=1;xq=q[a+32>>2];if(xq){if(r[a+36|0]){if(xq){q[6658]=q[6658]+1;n[q[5256]](xq);}}q[a+32>>2]=0;}q[a+32>>2]=0;q[a+24>>2]=0;q[a+28>>2]=0;o[a+36|0]=1;xq=q[a+12>>2];if(xq){if(r[a+16|0]){if(xq){q[6658]=q[6658]+1;n[q[5256]](xq);}}q[a+12>>2]=0;}q[a+12>>2]=0;o[a+16|0]=1;q[a+4>>2]=0;q[a+8>>2]=0;}function Ei(a,Hq){var Iq=0,Jq=0,Pr=0,Rr=0,Sr=0,Tr=0,Ur=0;Iq=P-96|0;P=Iq;o[Iq+92|0]=1;q[Iq+60>>2]=0;q[Iq+64>>2]=0;o[Iq+52|0]=1;q[Iq+48>>2]=0;o[Iq+72|0]=1;q[Iq+40>>2]=0;q[Iq+44>>2]=0;q[Iq+68>>2]=0;q[Iq+88>>2]=0;q[Iq+80>>2]=0;q[Iq+84>>2]=0;q[Iq+28>>2]=0;o[Iq+32|0]=1;q[Iq+20>>2]=0;q[Iq+24>>2]=0;Sr=q[a+8>>2];a:{if((Sr|0)<1){break a}while(1){Rr=q[q[q[a+16>>2]+(Tr<<2)>>2]+192>>2];q[Iq+12>>2]=Rr;Ur=Jq+ -1|0;Jq=Rr+(Rr<<15^-1)|0;Jq=w(Jq>>>10^Jq,9);Jq=Jq>>>6^Jq;Jq=(Jq<<11^-1)+Jq|0;Jq=Ur&(Jq>>>16^Jq);b:{c:{if(Jq>>>0>=Pr>>>0){break c}Pr=q[q[Iq+28>>2]+(Jq<<2)>>2];if((Pr|0)==-1){break c}Jq=q[Iq+48>>2];Ur=q[Iq+88>>2];while(1){if((Rr|0)!=q[(Pr<<3)+Ur>>2]){Pr=q[Jq+(Pr<<2)>>2];if((Pr|0)!=-1){continue}break c}break}if(q[Iq+68>>2]){break b}}q[Iq>>2]=Rr;QA(Iq+16|0,Iq,Iq+12|0);Pr=q[Iq+12>>2];n[q[q[Pr>>2]+60>>2]](Pr,Hq);Sr=q[a+8>>2];}Tr=Tr+1|0;if((Tr|0)<(Sr|0)){Pr=q[Iq+20>>2];Jq=q[Iq+64>>2];continue}break}if((Sr|0)<1){break a}Pr=0;while(1){Rr=q[q[a+16>>2]+(Pr<<2)>>2];Tr=q[Rr+252>>2];if(!((Tr|0)!=1?(Tr|0)!=64:0)){n[q[q[Rr>>2]+24>>2]](Rr,Hq);Sr=q[a+8>>2];}Pr=Pr+1|0;if((Pr|0)<(Sr|0)){continue}break}}Di(Iq+16|0);P=Iq+96|0;}function Fi(a){a=a|0;var Hq=0,Vr=0,Wr=0,Xr=x(0),Yr=0,Zr=0,_r=0,$r=x(0),as=0,bs=0,cs=0,ds=0,es=x(0),fs=x(0),gs=x(0),hs=x(0);Hq=P-192|0;P=Hq;a:{if(!n[q[q[a>>2]+20>>2]](a)){break a}Vr=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Vr>>2]+100>>2]](Vr);Vr=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Vr>>2]+8>>2]](Hq+80|0,Vr);Vr=n[q[q[a>>2]+20>>2]](a)|0;b:{if(!(n[q[q[Vr>>2]+56>>2]](Vr)&8)){break b}Vr=q[a+24>>2];if(!Vr){break b}as=n[q[q[Vr>>2]+36>>2]](Vr)|0;if((as|0)<1){break b}ds=Hq+176|0;Vr=0;while(1){Zr=0;_r=q[a+24>>2];bs=n[q[q[_r>>2]+40>>2]](_r,Vr)|0;cs=q[bs+844>>2];if((cs|0)>0){while(1){Yr=n[q[q[a>>2]+20>>2]](a)|0;_r=bs+w(Zr,208)|0;n[q[q[Yr>>2]+40>>2]](Yr,_r+36|0,_r+68|0,u[_r+84>>2],q[_r+168>>2],ds);Zr=Zr+1|0;if((cs|0)!=(Zr|0)){continue}break}}Vr=Vr+1|0;if((as|0)!=(Vr|0)){continue}break}}Vr=n[q[q[a>>2]+20>>2]](a)|0;if(!(n[q[q[Vr>>2]+56>>2]](Vr)&3)|q[a+8>>2]<1){break a}_r=Hq+160|0;as=Hq+96|0;ds=Hq+112|0;bs=Hq+128|0;cs=Hq+144|0;Zr=0;while(1){Yr=q[q[a+16>>2]+(Zr<<2)>>2];c:{if(r[Yr+204|0]&32){break c}d:{if(!n[q[q[a>>2]+20>>2]](a)){break d}Vr=n[q[q[a>>2]+20>>2]](a)|0;if(!(n[q[q[Vr>>2]+56>>2]](Vr)&1)){break d}q[Hq+72>>2]=1053609165;q[Hq+76>>2]=0;q[Hq+64>>2]=1053609165;q[Hq+68>>2]=1053609165;Vr=q[Yr+220>>2]+ -1|0;e:{if(Vr>>>0<=4){f:{switch(Vr-1|0){default:Vr=q[Hq+92>>2];q[Hq+72>>2]=q[Hq+88>>2];q[Hq+76>>2]=Vr;Vr=q[Hq+84>>2];q[Hq+64>>2]=q[Hq+80>>2];q[Hq+68>>2]=Vr;break e;case 0:Vr=as;Wr=q[Vr+12>>2];q[Hq+72>>2]=q[Vr+8>>2];q[Hq+76>>2]=Wr;Wr=q[Vr+4>>2];q[Hq+64>>2]=q[Vr>>2];q[Hq+68>>2]=Wr;break e;case 1:Vr=ds;Wr=q[Vr+12>>2];q[Hq+72>>2]=q[Vr+8>>2];q[Hq+76>>2]=Wr;Wr=q[Vr+4>>2];q[Hq+64>>2]=q[Vr>>2];q[Hq+68>>2]=Wr;break e;case 2:Vr=bs;Wr=q[Vr+12>>2];q[Hq+72>>2]=q[Vr+8>>2];q[Hq+76>>2]=Wr;Wr=q[Vr+4>>2];q[Hq+64>>2]=q[Vr>>2];q[Hq+68>>2]=Wr;break e;case 3:break f}}Vr=cs;Wr=q[Vr+12>>2];q[Hq+72>>2]=q[Vr+8>>2];q[Hq+76>>2]=Wr;Wr=q[Vr+4>>2];q[Hq+64>>2]=q[Vr>>2];q[Hq+68>>2]=Wr;break e}q[Hq+72>>2]=1050253722;q[Hq+76>>2]=0;q[Hq+64>>2]=1050253722;q[Hq+68>>2]=1050253722;}if(o[Yr+205|0]&1){Vr=q[Yr+320>>2];q[Hq+72>>2]=q[Yr+316>>2];q[Hq+76>>2]=Vr;Vr=q[Yr+312>>2];q[Hq+64>>2]=q[Yr+308>>2];q[Hq+68>>2]=Vr;}n[q[q[a>>2]+28>>2]](a,Yr+4|0,q[Yr+192>>2],Hq- -64|0);}Vr=q[a+72>>2];if(!Vr){break c}if(!(n[q[q[Vr>>2]+56>>2]](Vr)&2)){break c}Vr=_r;Wr=q[Vr+12>>2];q[Hq+40>>2]=q[Vr+8>>2];q[Hq+44>>2]=Wr;Wr=q[Vr+4>>2];q[Hq+32>>2]=q[Vr>>2];q[Hq+36>>2]=Wr;Vr=q[Yr+192>>2];n[q[q[Vr>>2]+8>>2]](Vr,Yr+4|0,Hq- -64|0,Hq+48|0);Xr=u[5249];u[Hq+64>>2]=u[Hq+64>>2]-Xr;u[Hq+68>>2]=u[Hq+68>>2]-Xr;u[Hq+72>>2]=u[Hq+72>>2]-Xr;u[Hq+48>>2]=Xr+u[Hq+48>>2];u[Hq+52>>2]=Xr+u[Hq+52>>2];u[Hq+56>>2]=Xr+u[Hq+56>>2];g:{if(r[Yr+204|0]&3|(!r[a+44|0]|q[Yr+252>>2]!=2)){break g}Vr=q[Yr+192>>2];n[q[q[Vr>>2]+8>>2]](Vr,Yr+68|0,Hq+16|0,Hq);$r=x(u[Hq+16>>2]-Xr);u[Hq+16>>2]=$r;es=x(u[Hq+20>>2]-Xr);u[Hq+20>>2]=es;fs=x(u[Hq+24>>2]-Xr);u[Hq+24>>2]=fs;gs=x(Xr+u[Hq>>2]);u[Hq>>2]=gs;hs=x(Xr+u[Hq+4>>2]);u[Hq+4>>2]=hs;Xr=x(Xr+u[Hq+8>>2]);u[Hq+8>>2]=Xr;if(!!($r<u[Hq+64>>2])){u[Hq+64>>2]=$r;}if(!!(es<u[Hq+68>>2])){u[Hq+68>>2]=es;}if(!!(fs<u[Hq+72>>2])){u[Hq+72>>2]=fs;}$r=u[Hq+28>>2];if(!!($r<u[Hq+76>>2])){u[Hq+76>>2]=$r;}if(!!(u[Hq+48>>2]<gs)){u[Hq+48>>2]=gs;}if(!!(u[Hq+52>>2]<hs)){u[Hq+52>>2]=hs;}if(!!(u[Hq+56>>2]<Xr)){u[Hq+56>>2]=Xr;}Xr=u[Hq+12>>2];if(!(u[Hq+60>>2]<Xr)){break g}u[Hq+60>>2]=Xr;}Vr=q[a+72>>2];n[q[q[Vr>>2]+60>>2]](Vr,Hq- -64|0,Hq+48|0,Hq+32|0);}Zr=Zr+1|0;if((Zr|0)<q[a+8>>2]){continue}break}}P=Hq+192|0;}function Gi(a,is,js,ks){var ls=0,ms=0,ns=x(0),os=x(0),ps=x(0),qs=x(0),rs=x(0),ss=x(0),ts=x(0),us=x(0),vs=x(0),ws=x(0),xs=x(0),ys=x(0),zs=x(0),As=x(0),Bs=x(0),Cs=x(0),Ds=x(0),Es=x(0),Fs=x(0),Gs=x(0),Hs=x(0),Is=x(0),Js=x(0),Ks=x(0);ls=P-112|0;P=ls;ms=q[a+28>>2];Is=u[ms+52>>2];Js=u[ms+56>>2];ws=u[js+52>>2];xs=u[js+56>>2];ns=u[ms+20>>2];os=u[ms+24>>2];ys=u[js+20>>2];zs=u[js+36>>2];As=u[js+24>>2];ps=u[ms+36>>2];Bs=u[js+40>>2];qs=u[ms+40>>2];Ks=u[ms+48>>2];Cs=u[js+32>>2];Ds=u[js>>2];Es=u[js+16>>2];rs=u[ms+8>>2];ss=u[ms>>2];ts=u[ms+4>>2];Fs=u[js+48>>2];us=u[ms+16>>2];Gs=u[js+4>>2];Hs=u[js+8>>2];vs=u[ms+32>>2];q[ls+108>>2]=0;q[ls+92>>2]=0;q[ls+76>>2]=0;u[ls+88>>2]=x(x(Hs*vs)+x(As*ps))+x(Bs*qs);u[ls+84>>2]=x(x(Gs*vs)+x(ys*ps))+x(zs*qs);u[ls+72>>2]=x(x(Hs*us)+x(As*ns))+x(Bs*os);u[ls+68>>2]=x(x(Gs*us)+x(ys*ns))+x(zs*os);u[ls+104>>2]=Js+x(x(x(vs*Fs)+x(ps*ws))+x(qs*xs));u[ls+100>>2]=Is+x(x(x(us*Fs)+x(ns*ws))+x(os*xs));q[ls+60>>2]=0;u[ls+56>>2]=x(x(ss*Hs)+x(ts*As))+x(rs*Bs);u[ls+52>>2]=x(x(ss*Gs)+x(ts*ys))+x(rs*zs);u[ls+48>>2]=x(x(Ds*ss)+x(Es*ts))+x(Cs*rs);u[ls+96>>2]=Ks+x(x(x(ss*Fs)+x(ts*ws))+x(rs*xs));u[ls+80>>2]=x(x(Ds*vs)+x(Es*ps))+x(Cs*qs);u[ls+64>>2]=x(x(Ds*us)+x(Es*ns))+x(Cs*os);js=q[a+32>>2];q[ls+36>>2]=-1;q[ls+28>>2]=1065353216;q[ls+32>>2]=1;q[ls+44>>2]=is;q[ls+40>>2]=js;q[ls+24>>2]=9804;q[ls+28>>2]=q[js+4>>2];js=q[a+4>>2];ms=q[js+8>>2];q[ls+20>>2]=is;q[ls+16>>2]=-1;q[ls+8>>2]=ms;q[ls+4>>2]=ks;q[ls>>2]=js;q[ls+12>>2]=ls+48;Pe(q[a+8>>2],q[a+12>>2],q[a+16>>2],ls,ls+24|0,u[a+20>>2]);P=ls+112|0;}function Hi(a,is){var js=0,ks=0,Ls=x(0),Ms=x(0),Ns=x(0),Os=x(0),Ps=x(0),Qs=x(0),Rs=x(0),Ss=x(0),Ts=x(0),Us=x(0),Vs=x(0),Ws=x(0),Xs=x(0),Ys=x(0),Zs=x(0),_s=x(0),$s=x(0),at=x(0),bt=x(0),ct=x(0),dt=x(0),et=0,ft=x(0),gt=x(0),ht=x(0);js=P-128|0;P=js;ks=q[q[a+8>>2]+28>>2]+w(is,80)|0;et=q[ks+64>>2];Us=u[ks+32>>2];Vs=u[ks>>2];Ws=u[ks+16>>2];Xs=u[ks+56>>2];Ys=u[ks+52>>2];Zs=u[ks+48>>2];_s=u[ks+36>>2];$s=u[ks+20>>2];at=u[ks+4>>2];bt=u[ks+40>>2];ct=u[ks+24>>2];dt=u[ks+8>>2];ks=q[a+12>>2];ft=u[ks+52>>2];gt=u[ks+56>>2];Ls=u[ks+24>>2];Ms=u[ks+20>>2];Ns=u[ks+40>>2];Os=u[ks+36>>2];ht=u[ks+48>>2];Ps=u[ks+8>>2];Qs=u[ks>>2];Rs=u[ks+4>>2];Ss=u[ks+16>>2];Ts=u[ks+32>>2];q[js+124>>2]=0;q[js+108>>2]=0;q[js+92>>2]=0;u[js+104>>2]=x(x(dt*Ts)+x(ct*Os))+x(bt*Ns);u[js+100>>2]=x(x(at*Ts)+x($s*Os))+x(_s*Ns);u[js+88>>2]=x(x(dt*Ss)+x(ct*Ms))+x(bt*Ls);u[js+84>>2]=x(x(at*Ss)+x($s*Ms))+x(_s*Ls);u[js+120>>2]=gt+x(x(x(Ts*Zs)+x(Os*Ys))+x(Ns*Xs));u[js+116>>2]=ft+x(x(x(Ss*Zs)+x(Ms*Ys))+x(Ls*Xs));q[js+76>>2]=0;u[js+72>>2]=x(x(Qs*dt)+x(Rs*ct))+x(Ps*bt);u[js+68>>2]=x(x(Qs*at)+x(Rs*$s))+x(Ps*_s);u[js+64>>2]=x(x(Vs*Qs)+x(Ws*Rs))+x(Us*Ps);u[js+112>>2]=ht+x(x(x(Qs*Zs)+x(Rs*Ys))+x(Ps*Xs));u[js+96>>2]=x(x(Vs*Ts)+x(Ws*Os))+x(Us*Ns);u[js+80>>2]=x(x(Vs*Ss)+x(Ws*Ms))+x(Us*Ls);ks=q[a+4>>2];q[js+60>>2]=is;q[js+56>>2]=-1;q[js+48>>2]=ks;q[js+44>>2]=et;q[js+40>>2]=0;q[js+52>>2]=js- -64;ks=q[a+24>>2];q[js+28>>2]=0;q[js+20>>2]=-65535;q[js+12>>2]=1065353216;q[js+16>>2]=0;q[js+36>>2]=is;q[js+32>>2]=ks;q[js+8>>2]=8988;q[js+12>>2]=q[ks+4>>2];q[js+28>>2]=q[ks+20>>2];q[ks+16>>2]=is;q[js+24>>2]=is;Qe(q[a+16>>2],q[a+20>>2],js+40|0,js+8|0);P=js+128|0;}function Ii(a,is,it,jt){a=a|0;is=is|0;it=it|0;jt=jt|0;var kt=0,lt=0,mt=0,nt=0,ot=0,pt=0;lt=P-96|0;P=lt;kt=q[a+8>>2];q[is+216>>2]=kt;a:{if(q[a+12>>2]!=(kt|0)){break a}nt=kt?kt<<1:1;if((kt|0)>=(nt|0)){break a}if(nt){q[6657]=q[6657]+1;ot=n[q[5255]](nt<<2,16)|0;kt=q[a+8>>2];}if((kt|0)>=1){while(1){pt=mt<<2;q[pt+ot>>2]=q[q[a+16>>2]+pt>>2];mt=mt+1|0;if((mt|0)!=(kt|0)){continue}break}}mt=q[a+16>>2];if(mt){if(r[a+20|0]){if(mt){q[6658]=q[6658]+1;n[q[5256]](mt);}kt=q[a+8>>2];}q[a+16>>2]=0;}q[a+16>>2]=ot;q[a+12>>2]=nt;o[a+20|0]=1;}q[q[a+16>>2]+(kt<<2)>>2]=is;q[a+8>>2]=kt+1;kt=q[is+16>>2];q[lt+40>>2]=q[is+12>>2];q[lt+44>>2]=kt;kt=q[is+8>>2];q[lt+32>>2]=q[is+4>>2];q[lt+36>>2]=kt;kt=q[is+32>>2];q[lt+56>>2]=q[is+28>>2];q[lt+60>>2]=kt;kt=q[is+24>>2];q[lt+48>>2]=q[is+20>>2];q[lt+52>>2]=kt;kt=q[is+48>>2];q[lt+72>>2]=q[is+44>>2];q[lt+76>>2]=kt;kt=q[is+40>>2];q[lt+64>>2]=q[is+36>>2];q[lt+68>>2]=kt;kt=q[is+64>>2];q[lt+88>>2]=q[is+60>>2];q[lt+92>>2]=kt;kt=q[is+56>>2];q[lt+80>>2]=q[is+52>>2];q[lt+84>>2]=kt;kt=q[is+192>>2];n[q[q[kt>>2]+8>>2]](kt,lt+32|0,lt+16|0,lt);kt=q[a+68>>2];q[is+188>>2]=n[q[q[kt>>2]+8>>2]](kt,lt+16|0,lt,q[q[is+192>>2]+4>>2],is,it,jt,q[a+24>>2]);P=lt+96|0;}function Ji(a,is,it,jt,qt,rt){var st=0;q[a+4>>2]=is;q[a>>2]=8080;is=q[it+12>>2];q[a+16>>2]=q[it+8>>2];q[a+20>>2]=is;is=q[it+4>>2];q[a+8>>2]=q[it>>2];q[a+12>>2]=is;is=q[it+28>>2];q[a+32>>2]=q[it+24>>2];q[a+36>>2]=is;is=q[it+20>>2];q[a+24>>2]=q[it+16>>2];q[a+28>>2]=is;is=q[it+44>>2];q[a+48>>2]=q[it+40>>2];q[a+52>>2]=is;is=q[it+36>>2];q[a+40>>2]=q[it+32>>2];q[a+44>>2]=is;st=q[it+60>>2];is=a- -64|0;q[is>>2]=q[it+56>>2];q[is+4>>2]=st;is=q[it+52>>2];q[a+56>>2]=q[it+48>>2];q[a+60>>2]=is;is=q[jt+12>>2];q[a+80>>2]=q[jt+8>>2];q[a+84>>2]=is;is=q[jt+4>>2];q[a+72>>2]=q[jt>>2];q[a+76>>2]=is;is=q[jt+28>>2];q[a+96>>2]=q[jt+24>>2];q[a+100>>2]=is;is=q[jt+20>>2];q[a+88>>2]=q[jt+16>>2];q[a+92>>2]=is;is=q[jt+44>>2];q[a+112>>2]=q[jt+40>>2];q[a+116>>2]=is;is=q[jt+36>>2];q[a+104>>2]=q[jt+32>>2];q[a+108>>2]=is;is=q[jt+60>>2];q[a+128>>2]=q[jt+56>>2];q[a+132>>2]=is;is=q[jt+52>>2];q[a+120>>2]=q[jt+48>>2];q[a+124>>2]=is;is=q[qt+12>>2];q[a+144>>2]=q[qt+8>>2];q[a+148>>2]=is;is=q[qt+4>>2];q[a+136>>2]=q[qt>>2];q[a+140>>2]=is;is=q[qt+28>>2];q[a+160>>2]=q[qt+24>>2];q[a+164>>2]=is;is=q[qt+20>>2];q[a+152>>2]=q[qt+16>>2];q[a+156>>2]=is;is=q[qt+44>>2];q[a+176>>2]=q[qt+40>>2];q[a+180>>2]=is;is=q[qt+36>>2];q[a+168>>2]=q[qt+32>>2];q[a+172>>2]=is;is=q[qt+60>>2];q[a+192>>2]=q[qt+56>>2];q[a+196>>2]=is;is=q[qt+52>>2];q[a+184>>2]=q[qt+48>>2];q[a+188>>2]=is;q[a+208>>2]=0;u[a+204>>2]=rt;q[a+200>>2]=1065353216;}function Ki(a,is,it,jt){var qt=0;q[a>>2]=8056;qt=q[is+4>>2];q[a+4>>2]=q[is>>2];q[a+8>>2]=qt;qt=q[is+12>>2];q[a+12>>2]=q[is+8>>2];q[a+16>>2]=qt;is=q[it+4>>2];q[a+20>>2]=q[it>>2];q[a+24>>2]=is;is=q[it+12>>2];q[a+28>>2]=q[it+8>>2];q[a+32>>2]=is;q[a+40>>2]=1065353216;q[a+36>>2]=jt;}function Li(a,is,it,jt,rt,tt){a=a|0;is=is|0;it=it|0;jt=jt|0;rt=rt|0;tt=tt|0;var ut=0,vt=x(0),wt=x(0),xt=x(0),yt=x(0),zt=x(0),At=x(0),Bt=x(0),Ct=0,Dt=0,Et=x(0),Ft=x(0),Gt=x(0),Ht=x(0),It=x(0),Jt=x(0),Kt=0,Lt=0,Mt=x(0),Nt=0,Ot=0;ut=P-304|0;P=ut;vt=u[is+52>>2];zt=u[it+52>>2];wt=u[is+56>>2];At=u[it+56>>2];Bt=u[is+48>>2];yt=u[it+48>>2];q[ut+300>>2]=0;wt=x(At-wt);u[ut+296>>2]=wt;Ht=x(zt-vt);u[ut+292>>2]=Ht;It=x(yt-Bt);u[ut+288>>2]=It;kb(is,it,ut+112|0,ut+48|0);q[ut+284>>2]=0;vt=u[ut+48>>2];zt=x(vt*u[ut+120>>2]);u[ut+280>>2]=zt;At=x(vt*u[ut+116>>2]);u[ut+276>>2]=At;Bt=x(vt*u[ut+112>>2]);u[ut+272>>2]=Bt;vt=u[jt+52>>2];yt=u[rt+52>>2];xt=u[jt+56>>2];Et=u[rt+56>>2];Ft=u[jt+48>>2];Gt=u[rt+48>>2];q[ut+268>>2]=0;Et=x(Et-xt);u[ut+264>>2]=Et;Jt=x(yt-vt);u[ut+260>>2]=Jt;Ft=x(Gt-Ft);u[ut+256>>2]=Ft;kb(jt,rt,ut+112|0,ut+48|0);q[ut+252>>2]=0;vt=u[ut+48>>2];yt=x(vt*u[ut+120>>2]);u[ut+248>>2]=yt;xt=x(vt*u[ut+116>>2]);u[ut+244>>2]=xt;vt=x(vt*u[ut+112>>2]);u[ut+240>>2]=vt;it=q[a+12>>2];Mt=x(n[q[q[it>>2]+16>>2]](it));Gt=x(0);it=q[a+16>>2];if(it){Gt=x(n[q[q[it>>2]+16>>2]](it));wt=u[ut+296>>2];Et=u[ut+264>>2];Ht=u[ut+292>>2];Jt=u[ut+260>>2];It=u[ut+288>>2];Ft=u[ut+256>>2];yt=u[ut+248>>2];xt=u[ut+244>>2];zt=u[ut+280>>2];At=u[ut+276>>2];Bt=u[ut+272>>2];vt=u[ut+240>>2];}yt=x(x(Mt*x(E(x(x(x(Bt*Bt)+x(At*At))+x(zt*zt)))))+x(Gt*x(E(x(x(x(vt*vt)+x(xt*xt))+x(yt*yt))))));zt=x(Ft-It);At=x(Jt-Ht);Bt=x(Et-wt);a:{if(x(yt+x(E(x(x(x(zt*zt)+x(At*At))+x(Bt*Bt)))))==x(0)){break a}o[ut+216|0]=0;q[ut+212>>2]=1566444395;q[ut+176>>2]=7932;Mi(a,is,jt,ut+176|0);it=q[ut+208>>2];q[ut+232>>2]=q[ut+204>>2];q[ut+236>>2]=it;it=q[ut+200>>2];q[ut+224>>2]=q[ut+196>>2];q[ut+228>>2]=it;if(!r[ut+216|0]){break a}it=q[ut+180>>2];Kt=q[ut+184>>2];Lt=q[ut+188>>2];if(x(yt+x(x(x(zt*u[ut+180>>2])+x(At*u[ut+184>>2]))+x(Bt*u[ut+188>>2])))<=x(1.1920928955078125e-7)){break a}Dt=1;vt=x(0);b:{wt=x(u[ut+212>>2]+u[tt+172>>2]);xt=u[ut+192>>2];c:{if(!(wt>x(.0010000000474974513))){break c}Nt=ut+20|0;Ot=ut+160|0;rt=0;while(1){Ct=q[tt+168>>2];if(Ct){q[ut+120>>2]=1065353216;q[ut+124>>2]=0;q[ut+112>>2]=1065353216;q[ut+116>>2]=1065353216;n[q[q[Ct>>2]+28>>2]](Ct,ut+224|0,x(.20000000298023224),ut+112|0);}xt=x(yt+x(x(x(zt*(f(0,it),k()))+x(At*(f(0,Kt),k())))+x(Bt*(f(0,Lt),k()))));if(xt<=x(1.1920928955078125e-7)){Dt=0;break a}wt=x(vt+x(wt/xt));if(wt<=vt){Dt=0;break a}if(wt<x(0)){Dt=0;break a}if(wt>x(1)){Dt=0;break a}Xa(is,ut+288|0,ut+272|0,wt,ut+112|0);Xa(jt,ut+256|0,ut+240|0,wt,ut+48|0);it=q[tt+168>>2];if(it){q[ut+8>>2]=0;q[ut+12>>2]=0;q[ut>>2]=1065353216;q[ut+4>>2]=0;n[q[q[it>>2]+28>>2]](it,Ot,x(.20000000298023224),ut);}n[q[q[tt>>2]>>2]](tt,wt);o[ut+40|0]=0;q[ut+36>>2]=1566444395;q[ut>>2]=7932;Mi(a,ut+112|0,ut+48|0,ut);if(!r[ut+40|0]){break b}xt=u[tt+172>>2];it=Nt;Ct=q[it+12>>2];q[ut+232>>2]=q[it+8>>2];q[ut+236>>2]=Ct;Ct=q[it+4>>2];q[ut+224>>2]=q[it>>2];q[ut+228>>2]=Ct;Ct=rt+1|0;if(rt>>>0>63){n[q[q[tt>>2]+8>>2]](tt,-2,Ct);Dt=0;break a}it=q[ut+4>>2];Kt=q[ut+8>>2];Lt=q[ut+12>>2];rt=Ct;vt=wt;wt=x(u[ut+36>>2]+xt);if(wt>x(.0010000000474974513)){continue}break}xt=u[ut+16>>2];}wt=xt;q[tt+132>>2]=it;u[tt+164>>2]=vt;u[tt+144>>2]=wt;q[tt+140>>2]=Lt;q[tt+136>>2]=Kt;a=q[ut+228>>2];q[tt+148>>2]=q[ut+224>>2];q[tt+152>>2]=a;a=q[ut+236>>2];q[tt+156>>2]=q[ut+232>>2];q[tt+160>>2]=a;break a}n[q[q[tt>>2]+8>>2]](tt,-1,rt);Dt=0;}P=ut+304|0;return Dt|0}function Mi(a,is,it,jt){var rt=0,tt=0,Pt=x(0),Qt=x(0),Rt=x(0),St=x(0),Tt=x(0),Ut=x(0),Vt=x(0),Wt=x(0),Xt=x(0),Yt=x(0),Zt=x(0),_t=x(0),$t=x(0),au=x(0),bu=x(0),cu=x(0),du=x(0),eu=x(0),fu=x(0),gu=x(0),hu=x(0),iu=0,ju=x(0),ku=x(0),lu=x(0),mu=x(0),nu=x(0),ou=x(0),pu=0,qu=x(0),ru=x(0),su=x(0),tu=x(0),uu=x(0),vu=x(0),wu=x(0),xu=x(0),yu=x(0),zu=x(0),Au=x(0),Bu=x(0),Cu=0,Du=0,Eu=x(0),Fu=x(0),Gu=x(0),Hu=x(0),Iu=x(0),Ju=x(0);rt=P-240|0;P=rt;a:{if(q[a+16>>2]){hc(q[a+4>>2]);tt=q[a+12>>2];iu=q[tt+4>>2];pu=q[a+16>>2];Cu=tt;Du=q[pu+4>>2];ju=x(n[q[q[tt>>2]+48>>2]](tt));tt=q[a+16>>2];a=Ej(rt+160|0,Cu,pu,iu,Du,ju,x(n[q[q[tt>>2]+48>>2]](tt)),q[a+4>>2],q[a+8>>2]);q[rt+152>>2]=1566444395;tt=q[is+12>>2];q[rt+32>>2]=q[is+8>>2];q[rt+36>>2]=tt;tt=q[is+4>>2];q[rt+24>>2]=q[is>>2];q[rt+28>>2]=tt;tt=q[is+28>>2];q[rt+48>>2]=q[is+24>>2];q[rt+52>>2]=tt;tt=q[is+20>>2];q[rt+40>>2]=q[is+16>>2];q[rt+44>>2]=tt;iu=q[is+44>>2];tt=rt- -64|0;q[tt>>2]=q[is+40>>2];q[tt+4>>2]=iu;tt=q[is+36>>2];q[rt+56>>2]=q[is+32>>2];q[rt+60>>2]=tt;tt=q[is+60>>2];q[rt+80>>2]=q[is+56>>2];q[rt+84>>2]=tt;tt=q[is+52>>2];q[rt+72>>2]=q[is+48>>2];q[rt+76>>2]=tt;is=q[it+12>>2];q[rt+96>>2]=q[it+8>>2];q[rt+100>>2]=is;is=q[it+4>>2];q[rt+88>>2]=q[it>>2];q[rt+92>>2]=is;is=q[it+20>>2];q[rt+104>>2]=q[it+16>>2];q[rt+108>>2]=is;is=q[it+28>>2];q[rt+112>>2]=q[it+24>>2];q[rt+116>>2]=is;is=q[it+44>>2];q[rt+128>>2]=q[it+40>>2];q[rt+132>>2]=is;is=q[it+36>>2];q[rt+120>>2]=q[it+32>>2];q[rt+124>>2]=is;is=q[it+52>>2];q[rt+136>>2]=q[it+48>>2];q[rt+140>>2]=is;is=q[it+60>>2];q[rt+144>>2]=q[it+56>>2];q[rt+148>>2]=is;Ma(a,rt+24|0,jt,0);break a}Eu=u[it+52>>2];ku=u[it+56>>2];lu=u[is+52>>2];mu=u[is+56>>2];St=u[is+16>>2];Tt=u[is+32>>2];Ut=u[is+20>>2];Zt=u[is+36>>2];Rt=u[it+20>>2];Vt=u[it+36>>2];Pt=u[it+24>>2];_t=u[is+24>>2];Qt=u[it+40>>2];$t=u[is+40>>2];nu=u[it+48>>2];ou=u[is+48>>2];tt=q[a+12>>2];au=u[is>>2];bu=u[is+4>>2];Xt=u[it+32>>2];Wt=u[it+16>>2];fu=u[it>>2];gu=u[it+4>>2];hu=u[it+8>>2];cu=u[is+8>>2];a=q[a+20>>2];Yt=u[a+56>>2];du=u[a+60>>2];eu=u[a+52>>2];q[rt+172>>2]=0;qu=x(x(x(cu*gu)+x(_t*Rt))+x($t*Vt));Yt=x(-Yt);ru=x(x(x(cu*fu)+x(_t*Wt))+x($t*Xt));su=x(x(x(cu*hu)+x(_t*Pt))+x($t*Qt));u[rt+168>>2]=x(x(qu*Yt)-x(eu*ru))-x(du*su);tu=x(x(x(bu*gu)+x(Ut*Rt))+x(Zt*Vt));uu=x(x(x(bu*fu)+x(Ut*Wt))+x(Zt*Xt));vu=x(x(x(bu*hu)+x(Ut*Pt))+x(Zt*Qt));u[rt+164>>2]=x(x(tu*Yt)-x(eu*uu))-x(du*vu);wu=x(x(x(au*gu)+x(St*Rt))+x(Tt*Vt));xu=x(x(x(au*fu)+x(St*Wt))+x(Tt*Xt));yu=x(x(x(au*hu)+x(St*Pt))+x(Tt*Qt));u[rt+160>>2]=x(x(wu*Yt)-x(eu*xu))-x(du*yu);n[q[q[tt>>2]+64>>2]](rt+24|0,tt,rt+160|0);St=u[a+56>>2];Tt=u[a+60>>2];Fu=u[a+68>>2];Ut=u[a+52>>2];Zt=u[rt+32>>2];_t=u[rt+24>>2];$t=u[rt+28>>2];Gu=u[it+52>>2];au=u[it+24>>2];bu=u[it+20>>2];Hu=u[it+56>>2];cu=u[it+40>>2];du=u[it+36>>2];Iu=u[it+48>>2];eu=u[it+8>>2];Yt=u[it>>2];zu=u[it+4>>2];Au=u[it+16>>2];Bu=u[it+32>>2];q[rt+172>>2]=0;Ju=x(x(x(ou*fu)+x(lu*Wt))+x(mu*Xt));ju=Wt;Wt=x(-Eu);Xt=x(x(Ju+x(x(x(ju*Wt)-x(fu*nu))-x(Xt*ku)))+x(x(x(xu*_t)+x(uu*$t))+x(ru*Zt)));Qt=x(x(x(x(x(ou*hu)+x(lu*Pt))+x(mu*Qt))+x(x(x(Pt*Wt)-x(hu*nu))-x(Qt*ku)))+x(x(x(yu*_t)+x(vu*$t))+x(su*Zt)));Pt=x(x(x(x(x(ou*gu)+x(lu*Rt))+x(mu*Vt))+x(x(x(Rt*Wt)-x(gu*nu))-x(Vt*ku)))+x(x(x(wu*_t)+x(tu*$t))+x(qu*Zt)));Rt=x(x(x(Tt*Qt)+x(x(Ut*Xt)+x(St*Pt)))-Fu);Vt=x(Xt-x(Ut*Rt));Pt=x(Pt-x(St*Rt));Qt=x(Qt-x(Tt*Rt));u[rt+168>>2]=Hu+x(x(x(Bu*Vt)+x(du*Pt))+x(cu*Qt));u[rt+164>>2]=Gu+x(x(x(Vt*Au)+x(Pt*bu))+x(Qt*au));u[rt+160>>2]=Iu+x(x(eu*Qt)+x(x(Yt*Vt)+x(zu*Pt)));q[rt+20>>2]=0;u[rt+16>>2]=x(x(Ut*Bu)+x(St*du))+x(Tt*cu);u[rt+12>>2]=x(x(Ut*Au)+x(St*bu))+x(Tt*au);u[rt+8>>2]=x(x(Yt*Ut)+x(zu*St))+x(eu*Tt);n[q[q[jt>>2]+16>>2]](jt,rt+8|0,rt+160|0,Rt);}P=rt+240|0;}function Ni(a,is,it,jt,Ku){a=a|0;is=is|0;it=it|0;jt=jt|0;Ku=Ku|0;var Lu=x(0),Mu=x(0),Nu=x(0),Ou=x(0),Pu=x(0),Qu=x(0);jt=P-160|0;P=jt;q[jt+112>>2]=q[is>>2];q[jt+64>>2]=q[is+64>>2];q[jt+116>>2]=q[is+4>>2];q[jt+68>>2]=q[is+68>>2];q[jt+120>>2]=q[is+8>>2];q[jt+72>>2]=q[is+72>>2];q[jt+128>>2]=q[is+16>>2];q[jt+80>>2]=q[is+80>>2];q[jt+132>>2]=q[is+20>>2];q[jt+84>>2]=q[is+84>>2];q[jt+136>>2]=q[is+24>>2];q[jt+88>>2]=q[is+88>>2];q[jt+144>>2]=q[is+32>>2];q[jt+96>>2]=q[is+96>>2];q[jt+148>>2]=q[is+36>>2];q[jt+100>>2]=q[is+100>>2];q[jt+152>>2]=q[is+40>>2];q[jt+104>>2]=q[is+104>>2];Ku=q[a+4>>2];Mu=u[Ku+40>>2];Lu=u[Ku+36>>2];Nu=u[Ku+32>>2];Ou=x(n[q[q[Ku>>2]+48>>2]](Ku));Pu=x(n[q[q[Ku>>2]+48>>2]](Ku));Qu=x(n[q[q[Ku>>2]+48>>2]](Ku));q[jt+36>>2]=0;Lu=x(Lu+Pu);u[jt+28>>2]=Lu+Lu;Lu=x(Nu+Ou);u[jt+24>>2]=Lu+Lu;Mu=x(Mu+Qu);u[jt+32>>2]=Mu+Mu;a=q[a+8>>2];Mu=u[a+40>>2];Lu=u[a+36>>2];Nu=u[a+32>>2];Ou=x(n[q[q[a>>2]+48>>2]](a));Pu=x(n[q[q[a>>2]+48>>2]](a));Qu=x(n[q[q[a>>2]+48>>2]](a));q[jt+20>>2]=0;Lu=x(Lu+Pu);u[jt+12>>2]=Lu+Lu;Lu=x(Nu+Ou);u[jt+8>>2]=Lu+Lu;Mu=x(Mu+Qu);u[jt+16>>2]=Mu+Mu;mB(is+48|0,jt+112|0,jt+24|0,is+112|0,jt- -64|0,jt+8|0,jt+48|0,jt+44|0,jt+40|0,it);P=jt+160|0;}function Oi(a,is){is=x(is);}function Pi(a){return 3}function Qi(a,is,it,jt,Ku){a=a|0;is=is|0;it=it|0;jt=jt|0;Ku=Ku|0;var Ru=x(0),Su=x(0),Tu=x(0),Uu=x(0),Vu=x(0),Wu=x(0),Xu=x(0),Yu=x(0),Zu=x(0),_u=x(0),$u=x(0),av=x(0),bv=x(0),cv=x(0),dv=x(0),ev=x(0),fv=x(0),gv=x(0),hv=x(0),iv=x(0),jv=x(0),kv=x(0),lv=x(0),mv=x(0),nv=x(0),ov=x(0),pv=x(0),qv=x(0),rv=x(0),sv=x(0),tv=x(0),uv=x(0),vv=x(0),wv=x(0),xv=x(0),yv=x(0),zv=x(0),Av=x(0),Bv=x(0),Cv=x(0),Dv=x(0),Ev=x(0);jt=P-240|0;P=jt;Dv=x(1);Ku=r[a+76|0];a=Ku?it:is;Ru=x(u[a+116>>2]-u[a+52>>2]);Su=x(Ru*Ru);Ru=x(u[a+120>>2]-u[a+56>>2]);Su=x(Su+x(Ru*Ru));Ru=x(u[a+124>>2]-u[a+60>>2]);Su=x(Su+x(Ru*Ru));Ru=u[a+276>>2];a:{if(Su<x(Ru*Ru)){break a}is=Ku?is:it;it=q[is+192>>2];if(q[it+4>>2]+ -21>>>0>8){break a}kv=u[a+92>>2];lv=u[a+76>>2];mv=u[a+108>>2];nv=u[a+88>>2];ov=u[a+72>>2];pv=u[a+104>>2];qv=u[a+100>>2];rv=u[a+84>>2];sv=u[a+68>>2];Xu=u[is+36>>2];Yu=u[is+20>>2];Zu=u[is+4>>2];tv=u[a+28>>2];uv=u[a+12>>2];vv=u[a+44>>2];wv=u[a+24>>2];xv=u[a+8>>2];yv=u[a+40>>2];zv=u[a+36>>2];Av=u[a+20>>2];Bv=u[a+4>>2];_u=u[is+12>>2];fv=u[a+116>>2];$u=u[is+28>>2];Su=u[a+120>>2];av=u[is+44>>2];gv=u[a+124>>2];Cv=x(x(x(_u*fv)+x($u*Su))+x(av*gv));bv=u[is+24>>2];hv=x(-u[is+56>>2]);cv=u[is+8>>2];dv=u[is+52>>2];ev=u[is+40>>2];iv=u[is+60>>2];Wu=x(x(x(bv*hv)-x(cv*dv))-x(ev*iv));Ru=x(Wu+x(x(x(cv*fv)+x(bv*Su))+x(ev*gv)));Tu=u[a+56>>2];Uu=u[a+52>>2];Vu=u[a+60>>2];q[jt+236>>2]=0;Ev=x(x(x($u*hv)-x(_u*dv))-x(av*iv));jv=x(Ev+x(x(x(_u*Uu)+x($u*Tu))+x(av*Vu)));u[jt+232>>2]=jv;Wu=x(Wu+x(x(x(cv*Uu)+x(bv*Tu))+x(ev*Vu)));u[jt+228>>2]=Wu;dv=x(x(x(Yu*hv)-x(Zu*dv))-x(Xu*iv));Tu=x(dv+x(x(x(Zu*Uu)+x(Yu*Tu))+x(Xu*Vu)));u[jt+224>>2]=Tu;hv=Tu;Uu=x(dv+x(x(x(Zu*fv)+x(Yu*Su))+x(Xu*gv)));if(!!(Uu<Tu)){u[jt+224>>2]=Uu;hv=Uu;}fv=Wu;if(!!(Ru<Wu)){u[jt+228>>2]=Ru;fv=Ru;}Vu=x(Ev+Cv);Su=jv;if(!!(Vu<Su)){u[jt+232>>2]=Vu;Su=Vu;}q[jt+220>>2]=0;u[jt+216>>2]=jv;u[jt+212>>2]=Wu;u[jt+208>>2]=Tu;gv=Tu;if(!!(Tu<Uu)){u[jt+208>>2]=Uu;gv=Uu;}dv=Wu;if(!!(Wu<Ru)){u[jt+212>>2]=Ru;dv=Ru;}iv=jv;if(!!(jv<Vu)){u[jt+216>>2]=Vu;iv=Vu;}Cv=Su;Su=u[a+272>>2];u[jt+232>>2]=Cv-Su;u[jt+228>>2]=fv-Su;u[jt+224>>2]=hv-Su;u[jt+216>>2]=Su+iv;u[jt+212>>2]=Su+dv;u[jt+208>>2]=Su+gv;q[jt+128>>2]=0;u[jt+124>>2]=Vu;u[jt+120>>2]=Ru;u[jt+116>>2]=Uu;q[jt+112>>2]=0;u[jt+108>>2]=x(x(_u*lv)+x($u*kv))+x(av*mv);u[jt+104>>2]=x(x(_u*ov)+x($u*nv))+x(av*pv);u[jt+100>>2]=x(x(_u*sv)+x($u*rv))+x(av*qv);q[jt+96>>2]=0;u[jt+92>>2]=x(x(cv*lv)+x(bv*kv))+x(ev*mv);u[jt+88>>2]=x(x(cv*ov)+x(bv*nv))+x(ev*pv);u[jt+84>>2]=x(x(cv*sv)+x(bv*rv))+x(ev*qv);q[jt+80>>2]=0;u[jt+76>>2]=x(x(Zu*lv)+x(Yu*kv))+x(Xu*mv);u[jt+72>>2]=x(x(Zu*ov)+x(Yu*nv))+x(Xu*pv);q[jt- -64>>2]=0;u[jt+60>>2]=jv;u[jt+56>>2]=Wu;u[jt+52>>2]=Tu;q[jt+48>>2]=0;u[jt+44>>2]=x(x(_u*uv)+x($u*tv))+x(av*vv);u[jt+40>>2]=x(x(_u*xv)+x($u*wv))+x(av*yv);u[jt+36>>2]=x(x(_u*Bv)+x($u*Av))+x(av*zv);q[jt+32>>2]=0;u[jt+28>>2]=x(x(cv*uv)+x(bv*tv))+x(ev*vv);u[jt+24>>2]=x(x(cv*xv)+x(bv*wv))+x(ev*yv);u[jt+20>>2]=x(x(cv*Bv)+x(bv*Av))+x(ev*zv);q[jt+16>>2]=0;u[jt+12>>2]=x(x(Zu*uv)+x(Yu*tv))+x(Xu*vv);u[jt+8>>2]=x(x(Zu*xv)+x(Yu*wv))+x(Xu*yv);u[jt+196>>2]=Su;u[jt+68>>2]=x(x(Zu*sv)+x(Yu*rv))+x(Xu*qv);u[jt+4>>2]=x(x(Zu*Bv)+x(Yu*Av))+x(Xu*zv);q[jt>>2]=7420;q[jt+200>>2]=q[a+268>>2];b:{if(!it){break b}n[q[q[it>>2]+64>>2]](it,jt,jt+224|0,jt+208|0);Ru=u[jt+200>>2];if(!(Ru<u[a+268>>2])){break b}u[a+268>>2]=Ru;Dv=Ru;}}P=jt+240|0;return x(Dv)}function Ri(a,is,it,jt,Ku){a=a|0;is=is|0;it=it|0;jt=jt|0;Ku=Ku|0;var Fv=0,Gv=0,Hv=0,Iv=0,Jv=x(0);Hv=P-16|0;P=Hv;n[q[5253]](7066);Iv=r[a+76|0];Gv=Iv?is:it;Fv=q[Gv+4>>2];a:{if(q[Fv+4>>2]+ -21>>>0>8){break a}is=Iv?it:is;if(q[q[is+4>>2]+4>>2]>19){break a}Jv=x(n[q[q[Fv>>2]+48>>2]](Fv));q[Ku+4>>2]=q[a+72>>2];it=a+8|0;Si(it,Jv,jt,is,Gv,Ku);is=q[is+8>>2];jt=q[a+72>>2];q[jt+840>>2]=q[Gv+8>>2];q[jt+836>>2]=is;n[q[q[Fv>>2]+64>>2]](Fv,it,a+12|0,a+28|0);is=q[Ku+4>>2];b:{if(!q[is+844>>2]){break b}it=q[is+836>>2];jt=q[q[Ku+8>>2]+8>>2];if((it|0)!=(jt|0)){ba(is,q[q[Ku+12>>2]+8>>2]+4|0,jt+4|0);break b}ba(is,it+4|0,q[q[Ku+12>>2]+8>>2]+4|0);}q[a+44>>2]=0;q[a+48>>2]=0;}n[q[5254]]();P=Hv+16|0;}function Si(a,is,it,jt,Ku,Kv){var Lv=0,Mv=x(0),Nv=x(0),Ov=x(0),Pv=x(0),Qv=x(0),Rv=x(0),Sv=x(0),Tv=x(0),Uv=x(0),Vv=x(0),Wv=x(0),Xv=x(0),Yv=x(0),Zv=x(0),_v=x(0),$v=x(0),aw=x(0),bw=x(0),cw=x(0),dw=x(0),ew=x(0),fw=x(0),gw=x(0),hw=x(0);Lv=P+ -64|0;P=Lv;u[a+56>>2]=is;q[a+52>>2]=it;q[a+40>>2]=Ku;q[a+36>>2]=jt;q[a+44>>2]=Kv;it=q[Ku+12>>2];Mv=u[it+52>>2];Wv=u[it+56>>2];Ku=q[jt+12>>2];Xv=u[Ku+52>>2];Yv=u[Ku+56>>2];Nv=u[it+20>>2];Ov=u[it+36>>2];Zv=u[Ku+20>>2];_v=u[Ku+36>>2];$v=u[Ku+24>>2];Pv=u[it+24>>2];aw=u[Ku+40>>2];Qv=u[it+40>>2];bw=u[Ku+32>>2];Rv=u[it+32>>2];cw=u[Ku>>2];Sv=u[it>>2];dw=u[Ku+16>>2];Tv=u[it+16>>2];ew=u[it+48>>2];fw=u[Ku+48>>2];Uv=u[it+4>>2];gw=u[Ku+4>>2];hw=u[Ku+8>>2];Vv=u[it+8>>2];q[Lv+60>>2]=0;q[Lv+44>>2]=0;q[Lv+28>>2]=0;u[Lv+40>>2]=x(x(Vv*hw)+x(Pv*$v))+x(Qv*aw);u[Lv+36>>2]=x(x(Vv*gw)+x(Pv*Zv))+x(Qv*_v);u[Lv+24>>2]=x(x(Uv*hw)+x(Nv*$v))+x(Ov*aw);u[Lv+20>>2]=x(x(Uv*gw)+x(Nv*Zv))+x(Ov*_v);Mv=x(-Mv);u[Lv+56>>2]=x(x(x(Pv*Mv)-x(Vv*ew))-x(Qv*Wv))+x(x(x(Vv*fw)+x(Pv*Xv))+x(Qv*Yv));u[Lv+52>>2]=x(x(x(Nv*Mv)-x(Uv*ew))-x(Ov*Wv))+x(x(x(Uv*fw)+x(Nv*Xv))+x(Ov*Yv));q[Lv+12>>2]=0;u[Lv>>2]=x(x(Sv*cw)+x(Tv*dw))+x(Rv*bw);u[Lv+32>>2]=x(x(Vv*cw)+x(Pv*dw))+x(Qv*bw);u[Lv+16>>2]=x(x(Uv*cw)+x(Nv*dw))+x(Ov*bw);u[Lv+8>>2]=x(x(Sv*hw)+x(Tv*$v))+x(Rv*aw);u[Lv+4>>2]=x(x(Sv*gw)+x(Tv*Zv))+x(Rv*_v);u[Lv+48>>2]=x(x(x(Tv*Mv)-x(Sv*ew))-x(Rv*Wv))+x(x(x(Sv*fw)+x(Tv*Xv))+x(Rv*Yv));it=q[jt+4>>2];n[q[q[it>>2]+8>>2]](it,Lv,a+4|0,a+20|0);is=x(u[Kv+32>>2]+is);u[a+20>>2]=is+u[a+20>>2];u[a+24>>2]=is+u[a+24>>2];u[a+28>>2]=is+u[a+28>>2];u[a+4>>2]=u[a+4>>2]-is;u[a+8>>2]=u[a+8>>2]-is;u[a+12>>2]=u[a+12>>2]-is;P=Lv- -64|0;}function Ti(a,is,it,jt){a=a|0;is=is|0;it=it|0;jt=jt|0;var Ku=0,Kv=0,iw=0,jw=x(0),kw=x(0),lw=x(0),mw=x(0),nw=0,ow=0;Kv=P-144|0;P=Kv;n[q[5253]](7024);jw=u[is>>2];kw=u[is+16>>2];mw=jw<kw?jw:kw;lw=u[is+32>>2];a:{if((mw<lw?mw:lw)>u[a+20>>2]){break a}Ku=(jw>kw^1)<<4;if(u[(u[is+Ku>>2]>lw?Ku:32)+is>>2]<u[a+4>>2]){break a}jw=u[is+8>>2];Ku=is+24|0;kw=u[Ku>>2];mw=jw<kw?jw:kw;iw=is+40|0;lw=u[iw>>2];if((mw<lw?mw:lw)>u[a+28>>2]){break a}Ku=jw>kw?is+8|0:Ku;if(u[(u[Ku>>2]>lw?Ku:iw)>>2]<u[a+12>>2]){break a}jw=u[is+4>>2];Ku=is+20|0;kw=u[Ku>>2];mw=jw<kw?jw:kw;iw=is+36|0;lw=u[iw>>2];if((mw<lw?mw:lw)>u[a+24>>2]){break a}Ku=jw>kw?is+4|0:Ku;if(q[q[q[a+36>>2]+4>>2]+4>>2]>19|u[(u[Ku>>2]>lw?Ku:iw)>>2]<u[a+8>>2]){break a}iw=q[a+48>>2];ow=_c(Kv+24|0);q[Kv+24>>2]=7216;q[Kv+28>>2]=1;Ku=q[is+12>>2];q[Kv+92>>2]=q[is+8>>2];q[Kv+96>>2]=Ku;Ku=q[is+4>>2];q[Kv+84>>2]=q[is>>2];q[Kv+88>>2]=Ku;Ku=q[is+28>>2];q[Kv+108>>2]=q[is+24>>2];q[Kv+112>>2]=Ku;Ku=q[is+20>>2];q[Kv+100>>2]=q[is+16>>2];q[Kv+104>>2]=Ku;Ku=q[is+44>>2];q[Kv+124>>2]=q[is+40>>2];q[Kv+128>>2]=Ku;Ku=q[is+36>>2];q[Kv+116>>2]=q[is+32>>2];q[Kv+120>>2]=Ku;q[Kv+72>>2]=q[a+56>>2];is=q[a+40>>2];Ku=q[is+12>>2];nw=q[is+8>>2];q[Kv+20>>2]=jt;q[Kv+16>>2]=it;q[Kv+8>>2]=nw;q[Kv+12>>2]=Ku;q[Kv>>2]=is;q[Kv+4>>2]=Kv+24;is=q[a+36>>2];b:{if(!!(u[q[a+44>>2]+32>>2]>x(0))){is=n[q[q[iw>>2]+8>>2]](iw,is,Kv,0,2)|0;break b}is=n[q[q[iw>>2]+8>>2]](iw,is,Kv,q[a+64>>2],1)|0;}Ku=q[a+44>>2];nw=q[Ku+8>>2];c:{if(q[nw+8>>2]==q[q[a+40>>2]+8>>2]){q[Ku+8>>2]=Kv;n[q[q[Ku>>2]+8>>2]](Ku,it,jt);break c}nw=q[Ku+12>>2];q[Ku+12>>2]=Kv;n[q[q[Ku>>2]+12>>2]](Ku,it,jt);}n[q[q[is>>2]+8>>2]](is,q[a+36>>2],Kv,q[a+52>>2],q[a+44>>2]);it=q[a+44>>2];q[(q[q[it+8>>2]+8>>2]==q[q[a+40>>2]+8>>2]?8:12)+it>>2]=nw;n[q[q[is>>2]>>2]](is)|0;n[q[q[iw>>2]+60>>2]](iw,is);Vb(ow);}n[q[5254]]();P=Kv+144|0;}function Ui(a){a=a|0;var is=0;q[a>>2]=7012;is=q[a+48>>2];n[q[q[is>>2]+20>>2]](is,q[a+64>>2]);is=q[a+48>>2];n[q[q[is>>2]+16>>2]](is,q[a+64>>2]);if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}function Vi(a){a=a|0;var it=0;q[a>>2]=7012;it=q[a+48>>2];n[q[q[it>>2]+20>>2]](it,q[a+64>>2]);it=q[a+48>>2];n[q[q[it>>2]+16>>2]](it,q[a+64>>2]);return a|0}function Wi(a,jt){a=a|0;jt=jt|0;var pw=0,qw=0,rw=0,sw=0,tw=0;pw=q[a+72>>2];if(pw){qw=q[jt+4>>2];a:{if((qw|0)!=q[jt+8>>2]){break a}rw=qw?qw<<1:1;if((qw|0)>=(rw|0)){break a}if(rw){q[6657]=q[6657]+1;sw=n[q[5255]](rw<<2,16)|0;qw=q[jt+4>>2];}if((qw|0)>=1){pw=0;while(1){tw=pw<<2;q[tw+sw>>2]=q[q[jt+12>>2]+tw>>2];pw=pw+1|0;if((pw|0)!=(qw|0)){continue}break}}pw=q[jt+12>>2];if(pw){if(r[jt+16|0]){if(pw){q[6658]=q[6658]+1;n[q[5256]](pw);}qw=q[jt+4>>2];}q[jt+12>>2]=0;}q[jt+12>>2]=sw;o[jt+16|0]=1;q[jt+8>>2]=rw;pw=q[a+72>>2];}q[q[jt+12>>2]+(qw<<2)>>2]=pw;q[jt+4>>2]=qw+1;}}function Xi(a){a=a|0;a=Ve(a);if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}function Yi(a,jt,uw,vw,ww){a=a|0;jt=jt|0;uw=uw|0;vw=vw|0;ww=ww|0;var xw=0,yw=x(0),zw=x(0),Aw=x(0),Bw=x(0),Cw=0,Dw=x(0),Ew=x(0),Fw=0,Gw=x(0),Hw=x(0),Iw=x(0),Jw=x(0),Kw=x(0),Lw=x(0),Mw=x(0),Nw=x(0),Ow=x(0),Pw=x(0),Qw=x(0),Rw=x(0),Sw=x(0),Tw=x(0),Uw=x(0),Vw=x(0),Ww=x(0),Xw=x(0),Yw=x(0),Zw=x(0),_w=0,$w=x(0),ax=x(0),bx=x(0),cx=x(0),dx=x(0),ex=x(0),fx=x(0),gx=x(0),hx=x(0),ix=x(0),jx=x(0),kx=x(0),lx=x(0),mx=x(0),nx=x(0),ox=x(0),px=x(0),qx=x(0),rx=x(0),sx=x(0);vw=P-48|0;P=vw;a:{if(!q[a+12>>2]){break a}xw=r[a+16|0];_w=xw?jt:uw;Cw=q[_w+12>>2];Jw=u[Cw+56>>2];ex=u[Cw+52>>2];Kw=u[Cw+48>>2];Fw=xw?uw:jt;xw=q[Fw+12>>2];Lw=u[xw+56>>2];Yw=u[xw+52>>2];Zw=u[xw+48>>2];Fw=q[Fw+4>>2];Mw=u[xw+32>>2];Qw=u[xw+16>>2];Rw=u[xw>>2];Ow=u[xw+36>>2];Tw=u[xw+20>>2];Uw=u[xw+4>>2];yw=u[Cw+40>>2];zw=u[Cw+24>>2];Aw=u[Cw+8>>2];Bw=u[Cw+36>>2];Gw=u[Cw+20>>2];Ew=u[Cw+4>>2];Hw=u[Cw+32>>2];Nw=u[xw+40>>2];Iw=u[Cw+16>>2];Vw=u[xw+24>>2];Dw=u[Cw>>2];Ww=u[xw+8>>2];Cw=q[_w+4>>2];Pw=u[Cw+60>>2];Sw=u[Cw+56>>2];Xw=u[Cw+52>>2];q[vw+28>>2]=0;ax=x(x(x(Ww*Ew)+x(Vw*Gw))+x(Nw*Bw));Sw=x(-Sw);bx=x(x(x(Ww*Dw)+x(Vw*Iw))+x(Nw*Hw));Nw=x(x(x(Ww*Aw)+x(Vw*zw))+x(Nw*yw));u[vw+24>>2]=x(x(ax*Sw)-x(Xw*bx))-x(Pw*Nw);Vw=x(x(x(Uw*Ew)+x(Tw*Gw))+x(Ow*Bw));Ww=x(x(x(Uw*Dw)+x(Tw*Iw))+x(Ow*Hw));cx=x(x(x(Uw*Aw)+x(Tw*zw))+x(Ow*yw));u[vw+20>>2]=x(x(Vw*Sw)-x(Xw*Ww))-x(Pw*cx);dx=x(x(x(Rw*Ew)+x(Qw*Gw))+x(Mw*Bw));$w=Xw;Xw=x(x(x(Rw*Dw)+x(Qw*Iw))+x(Mw*Hw));Ow=Pw;Pw=x(x(x(Rw*Aw)+x(Qw*zw))+x(Mw*yw));u[vw+16>>2]=x(x(dx*Sw)-x($w*Xw))-x(Ow*Pw);n[q[q[Fw>>2]+64>>2]](vw+32|0,Fw,vw+16|0);xw=q[_w+12>>2];Sw=u[xw+48>>2];fx=u[xw+32>>2];gx=u[xw+16>>2];hx=u[xw+8>>2];ix=u[xw+4>>2];jx=u[xw>>2];kx=u[xw+56>>2];lx=u[xw+52>>2];mx=u[xw+40>>2];nx=u[xw+36>>2];ox=u[xw+24>>2];px=u[xw+20>>2];qx=u[Cw+68>>2];Ow=u[Cw+60>>2];Tw=u[Cw+52>>2];Uw=u[Cw+56>>2];Mw=u[vw+40>>2];Qw=u[vw+32>>2];Rw=u[vw+36>>2];rx=u[q[a+12>>2]+848>>2];q[ww+4>>2]=q[a+12>>2];sx=x(x(x(Zw*Aw)+x(Yw*zw))+x(Lw*yw));$w=zw;zw=x(-ex);Nw=x(x(sx+x(x(x($w*zw)-x(Kw*Aw))-x(Jw*yw)))+x(x(x(Pw*Qw)+x(cx*Rw))+x(Nw*Mw)));Hw=x(x(x(x(x(Zw*Dw)+x(Yw*Iw))+x(Lw*Hw))+x(x(x(Iw*zw)-x(Kw*Dw))-x(Jw*Hw)))+x(x(x(Xw*Qw)+x(Ww*Rw))+x(bx*Mw)));Gw=x(x(x(x(x(Zw*Ew)+x(Yw*Gw))+x(Lw*Bw))+x(x(x(Gw*zw)-x(Kw*Ew))-x(Jw*Bw)))+x(x(x(dx*Qw)+x(Vw*Rw))+x(ax*Mw)));yw=x(x(x(Ow*Nw)+x(x(Tw*Hw)+x(Uw*Gw)))-qx);if(!!(yw<rx)){xw=q[_w+12>>2];Ew=u[xw+24>>2];Iw=u[xw+20>>2];Dw=u[xw+40>>2];Jw=u[xw+36>>2];Kw=u[xw+16>>2];Lw=u[xw+32>>2];zw=u[Cw+60>>2];Yw=u[xw+8>>2];Aw=u[Cw+52>>2];Zw=u[xw>>2];Bw=u[Cw+56>>2];Mw=u[xw+4>>2];q[vw+28>>2]=0;u[vw+16>>2]=x(x(Zw*Aw)+x(Mw*Bw))+x(Yw*zw);u[vw+24>>2]=x(x(Aw*Lw)+x(Bw*Jw))+x(zw*Dw);u[vw+20>>2]=x(x(Aw*Kw)+x(Bw*Iw))+x(zw*Ew);q[vw+12>>2]=0;zw=x(Hw-x(Tw*yw));Aw=x(Gw-x(Uw*yw));Bw=x(Nw-x(Ow*yw));u[vw+8>>2]=x(x(x(zw*fx)+x(Aw*nx))+x(Bw*mx))+kx;u[vw+4>>2]=x(x(x(zw*gx)+x(Aw*px))+x(Bw*ox))+lx;u[vw>>2]=x(x(hx*Bw)+x(x(jx*zw)+x(ix*Aw)))+Sw;n[q[q[ww>>2]+16>>2]](ww,vw+16|0,vw,yw);}b:{if(q[Fw+4>>2]>6|q[q[ww+4>>2]+844>>2]>=q[a+24>>2]){break b}zw=u[Cw+60>>2];c:{if(!!(x(y(zw))>x(.7071067690849304))){yw=u[Cw+56>>2];Aw=x(x(1)/x(E(x(x(zw*zw)+x(yw*yw)))));yw=x(yw*Aw);zw=x(Aw*x(-zw));Aw=x(0);break c}yw=u[Cw+52>>2];Aw=u[Cw+56>>2];Bw=x(x(1)/x(E(x(x(yw*yw)+x(Aw*Aw)))));zw=x(yw*Bw);yw=x(0);Aw=x(Bw*x(-Aw));}Bw=x(n[q[q[Fw>>2]+16>>2]](Fw));xw=0;Bw=x(x(A(x(u[5249]/Bw),x(.39269909262657166)))*x(.5));Ew=ga(Bw);Fw=q[a+20>>2];Gw=fa(Bw);if((Fw|0)<1){break b}Pw=yw;yw=x(Ew/x(E(x(x(x(Aw*Aw)+x(zw*zw))+x(yw*yw)))));Ew=x(Pw*yw);Hw=x(zw*yw);Iw=x(Aw*yw);while(1){zw=u[Cw+56>>2];Bw=u[Cw+52>>2];yw=u[Cw+60>>2];Aw=x(x(x(x(6.2831854820251465)/x(Fw|0))*x(xw|0))*x(.5));Dw=x(ga(Aw)/x(E(x(x(x(Bw*Bw)+x(zw*zw))+x(yw*yw)))));yw=x(yw*Dw);zw=x(zw*Dw);Aw=fa(Aw);Bw=x(Bw*Dw);Dw=x(x(Ew*yw)+x(x(Hw*zw)+x(x(Gw*Aw)+x(Iw*Bw))));Jw=x(x(Hw*yw)+x(x(x(Iw*Aw)-x(Gw*Bw))-x(Ew*zw)));Kw=x(x(Ew*Bw)+x(x(x(Hw*Aw)-x(Gw*zw))-x(Iw*yw)));Lw=x(x(Iw*zw)+x(x(x(Ew*Aw)-x(Gw*yw))-x(Hw*Bw)));u[vw+28>>2]=x(x(x(Aw*Dw)-x(Bw*Jw))-x(zw*Kw))-x(yw*Lw);u[vw+24>>2]=x(x(zw*Jw)+x(x(yw*Dw)+x(Aw*Lw)))-x(Bw*Kw);u[vw+20>>2]=x(x(Bw*Lw)+x(x(Aw*Kw)+x(zw*Dw)))-x(yw*Jw);u[vw+16>>2]=x(x(yw*Kw)+x(x(Bw*Dw)+x(Aw*Jw)))-x(zw*Lw);Zi(a,vw+16|0,jt,uw,ww);xw=xw+1|0;Fw=q[a+20>>2];if((xw|0)<(Fw|0)){continue}break}}if(!r[a+8|0]|!q[q[a+12>>2]+844>>2]){break a}a=q[ww+4>>2];if(!q[a+844>>2]){break a}jt=q[a+836>>2];uw=q[q[ww+8>>2]+8>>2];if((jt|0)!=(uw|0)){ba(a,q[q[ww+12>>2]+8>>2]+4|0,uw+4|0);break a}ba(a,jt+4|0,q[q[ww+12>>2]+8>>2]+4|0);}P=vw+48|0;}function Zi(a,jt,uw,vw,ww){var tx=x(0),ux=x(0),vx=0,wx=x(0),xx=x(0),yx=x(0),zx=x(0),Ax=x(0),Bx=x(0),Cx=x(0),Dx=x(0),Ex=0,Fx=x(0),Gx=x(0),Hx=x(0),Ix=x(0),Jx=x(0),Kx=x(0),Lx=x(0),Mx=x(0),Nx=x(0),Ox=x(0),Px=x(0),Qx=x(0),Rx=x(0),Sx=x(0),Tx=x(0),Ux=x(0),Vx=x(0),Wx=x(0),Xx=x(0),Yx=x(0),Zx=0,_x=x(0),$x=x(0),ay=x(0),by=x(0),cy=x(0),dy=x(0),ey=x(0),fy=x(0),gy=x(0),hy=x(0),iy=x(0),jy=x(0),ky=x(0),ly=0,my=x(0),ny=x(0);vx=P-48|0;P=vx;ly=r[a+16|0];Zx=ly?uw:vw;Ex=q[Zx+12>>2];fy=u[Ex+56>>2];_x=u[Ex+52>>2];gy=u[Ex+48>>2];vw=ly?vw:uw;uw=q[vw+12>>2];hy=u[uw+56>>2];iy=u[uw+52>>2];jy=u[uw+48>>2];vw=q[vw+4>>2];Cx=u[Ex+40>>2];xx=u[Ex+8>>2];yx=u[Ex+24>>2];zx=u[Ex+36>>2];Fx=u[Ex+4>>2];Ix=u[Ex+20>>2];Gx=u[Ex+32>>2];Lx=u[uw+40>>2];Mx=u[uw+32>>2];Nx=u[uw+36>>2];Jx=u[Ex>>2];Ox=u[uw+8>>2];Px=u[uw>>2];Qx=u[uw+4>>2];Kx=u[Ex+16>>2];Tx=u[uw+24>>2];Ux=u[uw+16>>2];Vx=u[uw+20>>2];wx=u[jt+12>>2];Bx=u[jt+8>>2];ux=u[jt+4>>2];tx=u[jt>>2];uw=q[Zx+4>>2];Wx=u[uw+60>>2];ky=u[uw+56>>2];Xx=u[uw+52>>2];q[vx+28>>2]=0;Dx=x(x(2)/x(x(x(x(tx*tx)+x(ux*ux))+x(Bx*Bx))+x(wx*wx)));Ax=x(Bx*Dx);$x=x(tx*Ax);Rx=x(ux*Dx);ay=x(wx*Rx);Sx=x($x+ay);by=x(ux*Ax);Hx=x(tx*Dx);cy=x(wx*Hx);Dx=x(by-cy);dy=x(tx*Hx);ey=x(ux*Rx);ux=x(x(1)-x(dy+ey));Hx=x(x(x(Mx*Sx)+x(Nx*Dx))+x(Lx*ux));Yx=x(x(x(Px*Sx)+x(Qx*Dx))+x(Ox*ux));ux=x(x(x(Ux*Sx)+x(Vx*Dx))+x(Tx*ux));Dx=x(-ky);u[vx+24>>2]=x(x(x(x(zx*Hx)+x(x(Fx*Yx)+x(Ix*ux)))*Dx)-x(Xx*x(x(Gx*Hx)+x(x(Jx*Yx)+x(Kx*ux)))))-x(Wx*x(x(Cx*Hx)+x(x(xx*Yx)+x(yx*ux))));ux=x(by+cy);Rx=x(tx*Rx);Sx=x(wx*Ax);tx=x(Rx-Sx);Hx=x(Bx*Ax);wx=x(x(1)-x(dy+Hx));Bx=x(x(Lx*ux)+x(x(Mx*tx)+x(Nx*wx)));Ax=x(x(Ox*ux)+x(x(Px*tx)+x(Qx*wx)));tx=x(x(Tx*ux)+x(x(Ux*tx)+x(Vx*wx)));u[vx+20>>2]=x(x(x(x(zx*Bx)+x(x(Fx*Ax)+x(Ix*tx)))*Dx)-x(Xx*x(x(Gx*Bx)+x(x(Jx*Ax)+x(Kx*tx)))))-x(Wx*x(x(Cx*Bx)+x(x(xx*Ax)+x(yx*tx))));tx=x($x-ay);wx=x(Rx+Sx);ux=x(x(1)-x(ey+Hx));Bx=x(x(Lx*tx)+x(x(Nx*wx)+x(Mx*ux)));Ax=x(x(Ox*tx)+x(x(Qx*wx)+x(Px*ux)));tx=x(x(Tx*tx)+x(x(Vx*wx)+x(Ux*ux)));u[vx+16>>2]=x(x(x(x(zx*Bx)+x(x(Fx*Ax)+x(Ix*tx)))*Dx)-x(Xx*x(x(Gx*Bx)+x(x(Jx*Ax)+x(Kx*tx)))))-x(Wx*x(x(Cx*Bx)+x(x(xx*Ax)+x(yx*tx))));n[q[q[vw>>2]+64>>2]](vx+32|0,vw,vx+16|0);jt=q[Zx+12>>2];Dx=u[jt+48>>2];Rx=u[jt+32>>2];Sx=u[jt+16>>2];Hx=u[jt+8>>2];Yx=u[jt+4>>2];ky=u[jt>>2];$x=u[jt+56>>2];ay=u[jt+52>>2];by=u[jt+40>>2];cy=u[jt+36>>2];dy=u[jt+24>>2];ey=u[jt+20>>2];my=u[uw+68>>2];Bx=u[uw+60>>2];Wx=u[uw+52>>2];Xx=u[uw+56>>2];tx=u[vx+40>>2];wx=u[vx+32>>2];ux=u[vx+36>>2];ny=u[q[a+12>>2]+848>>2];q[ww+4>>2]=q[a+12>>2];Ax=x(-_x);_x=x(x(x(x(x(jy*xx)+x(iy*yx))+x(hy*Cx))+x(x(x(yx*Ax)-x(xx*gy))-x(Cx*fy)))+x(x(x(wx*x(x(x(Px*xx)+x(Ux*yx))+x(Mx*Cx)))+x(ux*x(x(x(Qx*xx)+x(Vx*yx))+x(Nx*Cx))))+x(tx*x(x(x(Ox*xx)+x(Tx*yx))+x(Lx*Cx)))));Gx=x(x(x(x(x(jy*Jx)+x(iy*Kx))+x(hy*Gx))+x(x(x(Kx*Ax)-x(Jx*gy))-x(Gx*fy)))+x(x(x(wx*x(x(x(Px*Jx)+x(Ux*Kx))+x(Mx*Gx)))+x(ux*x(x(x(Qx*Jx)+x(Vx*Kx))+x(Nx*Gx))))+x(tx*x(x(x(Ox*Jx)+x(Tx*Kx))+x(Lx*Gx)))));Fx=x(x(x(x(x(jy*Fx)+x(iy*Ix))+x(hy*zx))+x(x(x(Ix*Ax)-x(Fx*gy))-x(zx*fy)))+x(x(x(wx*x(x(x(Px*Fx)+x(Ux*Ix))+x(Mx*zx)))+x(ux*x(x(x(Qx*Fx)+x(Vx*Ix))+x(Nx*zx))))+x(tx*x(x(x(Ox*Fx)+x(Tx*Ix))+x(Lx*zx)))));Cx=x(x(x(Bx*_x)+x(x(Wx*Gx)+x(Xx*Fx)))-my);if(!!(Cx<ny)){a=q[Zx+12>>2];Ix=u[a+24>>2];Jx=u[a+20>>2];Kx=u[a+40>>2];Lx=u[a+36>>2];Mx=u[a+16>>2];Nx=u[a+32>>2];xx=u[uw+60>>2];Ox=u[a+8>>2];yx=u[uw+52>>2];Px=u[a>>2];zx=u[uw+56>>2];Qx=u[a+4>>2];q[vx+28>>2]=0;u[vx+16>>2]=x(x(Px*yx)+x(Qx*zx))+x(Ox*xx);u[vx+24>>2]=x(x(yx*Nx)+x(zx*Lx))+x(xx*Kx);u[vx+20>>2]=x(x(yx*Mx)+x(zx*Jx))+x(xx*Ix);q[vx+12>>2]=0;xx=x(Gx-x(Wx*Cx));yx=x(Fx-x(Xx*Cx));zx=x(_x-x(Bx*Cx));u[vx+8>>2]=x(x(x(xx*Rx)+x(yx*cy))+x(zx*by))+$x;u[vx+4>>2]=x(x(x(xx*Sx)+x(yx*ey))+x(zx*dy))+ay;u[vx>>2]=x(x(Hx*zx)+x(x(ky*xx)+x(Yx*yx)))+Dx;n[q[q[ww>>2]+16>>2]](ww,vx+16|0,vx,Cx);}P=vx+48|0;}function _i(a){a=a|0;var jt=0,uw=0;q[a>>2]=6824;a:{if(!r[a+8|0]){break a}jt=q[a+12>>2];if(!jt){break a}uw=q[a+4>>2];n[q[q[uw>>2]+16>>2]](uw,jt);}aa(a);}function $i(a){a=a|0;var vw=0,ww=0;q[a>>2]=6824;a:{if(!r[a+8|0]){break a}vw=q[a+12>>2];if(!vw){break a}ww=q[a+4>>2];n[q[q[ww>>2]+16>>2]](ww,vw);}return a|0}function aj(a,oy,py,qy,ry,sy,ty){q[a>>2]=17096;q[a+4>>2]=q[oy>>2];q[a+24>>2]=ty;q[a+20>>2]=sy;o[a+16|0]=ry;q[a+12>>2]=0;o[a+8|0]=0;q[a>>2]=6824;oy=q[a+4>>2];sy=ry?qy:py;py=ry?py:qy;if(n[q[q[oy>>2]+24>>2]](oy,q[sy+8>>2],q[py+8>>2])){oy=q[a+4>>2];oy=n[q[q[oy>>2]+12>>2]](oy,q[sy+8>>2],q[py+8>>2])|0;o[a+8|0]=1;q[a+12>>2]=oy;}}



            function xv(a,b,c){var d=0,e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,n=0,o=0,p=0,r=0,s=0,t=0,u=0;g=P-560|0;P=g;e=c;c=(c+ -3|0)/24|0;p=(c|0)>0?c:0;k=e+w(p,-24)|0;l=q[4420];if((l|0)>=0){e=l+1|0;c=p;while(1){v[(g+320|0)+(f<<3)>>3]=(c|0)<0?0:+q[(c<<2)+17696>>2];c=c+1|0;f=f+1|0;if((e|0)!=(f|0)){continue}break}}i=k+ -24|0;e=0;while(1){c=0;d=0;while(1){d=d+v[(c<<3)+a>>3]*v[(g+320|0)+(e-c<<3)>>3];c=c+1|0;if((c|0)!=1){continue}break}v[(e<<3)+g>>3]=d;c=(e|0)<(l|0);e=e+1|0;if(c){continue}break}u=23-i|0;r=24-i|0;e=l;a:{while(1){d=v[(e<<3)+g>>3];c=0;f=e;n=(e|0)<1;if(!n){while(1){j=(g+480|0)+(c<<2)|0;m=d;d=d*5.960464477539063e-8;b:{if(y(d)<2147483648){h=~~d;break b}h=-2147483648;}d=+(h|0);m=m+d*-16777216;c:{if(y(m)<2147483648){h=~~m;break c}h=-2147483648;}q[j>>2]=h;f=f+ -1|0;d=v[(f<<3)+g>>3]+d;c=c+1|0;if((e|0)!=(c|0)){continue}break}}d=Lc(d,i);d=d+C(d*.125)*-8;d:{if(y(d)<2147483648){j=~~d;break d}j=-2147483648;}d=d- +(j|0);e:{f:{g:{s=(i|0)<1;h:{if(!s){f=(e<<2)+g|0;h=q[f+476>>2];c=h>>r;o=f;f=h-(c<<r)|0;q[o+476>>2]=f;j=c+j|0;h=f>>u;break h}if(i){break g}h=q[((e<<2)+g|0)+476>>2]>>23;}if((h|0)<1){break e}break f}h=2;if(!!(d>=.5)){break f}h=0;break e}c=0;f=0;if(!n){while(1){t=(g+480|0)+(c<<2)|0;n=q[t>>2];o=16777215;i:{j:{if(!f){if(!n){break j}o=16777216;f=1;}q[t>>2]=o-n;break i}f=0;}c=c+1|0;if((e|0)!=(c|0)){continue}break}}k:{if(s){break k}c=i+ -1|0;if(c>>>0>1){break k}if(c-1){c=(e<<2)+g|0;q[c+476>>2]=q[c+476>>2]&8388607;break k}c=(e<<2)+g|0;q[c+476>>2]=q[c+476>>2]&4194303;}j=j+1|0;if((h|0)!=2){break e}d=1-d;h=2;if(!f){break e}d=d-Lc(1,i);}if(d==0){f=0;l:{c=e;if((c|0)<=(l|0)){break l}while(1){c=c+ -1|0;f=q[(g+480|0)+(c<<2)>>2]|f;if((c|0)>(l|0)){continue}break}if(!f){break l}k=i;while(1){k=k+ -24|0;e=e+ -1|0;if(!q[(g+480|0)+(e<<2)>>2]){continue}break}break a}c=1;while(1){f=c;c=c+1|0;if(!q[(g+480|0)+(l-f<<2)>>2]){continue}break}f=e+f|0;while(1){j=e+1|0;e=e+1|0;v[(g+320|0)+(j<<3)>>3]=q[(p+e<<2)+17696>>2];c=0;d=0;while(1){d=d+v[(c<<3)+a>>3]*v[(g+320|0)+(j-c<<3)>>3];c=c+1|0;if((c|0)!=1){continue}break}v[(e<<3)+g>>3]=d;if((e|0)<(f|0)){continue}break}e=f;continue}break}d=Lc(d,0-i|0);m:{if(!!(d>=16777216)){a=(g+480|0)+(e<<2)|0;m=d;d=d*5.960464477539063e-8;n:{if(y(d)<2147483648){c=~~d;break n}c=-2147483648;}d=m+ +(c|0)*-16777216;o:{if(y(d)<2147483648){f=~~d;break o}f=-2147483648;}q[a>>2]=f;e=e+1|0;break m}if(y(d)<2147483648){c=~~d;}else {c=-2147483648;}k=i;}q[(g+480|0)+(e<<2)>>2]=c;}d=Lc(1,k);p:{if((e|0)<=-1){break p}c=e;while(1){v[(c<<3)+g>>3]=d*+q[(g+480|0)+(c<<2)>>2];d=d*5.960464477539063e-8;a=(c|0)>0;c=c+ -1|0;if(a){continue}break}if((e|0)<=-1){break p}c=e;while(1){a=c;i=e-c|0;d=0;c=0;while(1){d=d+v[(c<<3)+20464>>3]*v[(a+c<<3)+g>>3];q:{if((c|0)>=(l|0)){break q}k=c>>>0<i>>>0;c=c+1|0;if(k){continue}}break}v[(g+160|0)+(i<<3)>>3]=d;c=a+ -1|0;if((a|0)>0){continue}break}}d=0;if((e|0)>=0){while(1){d=d+v[(g+160|0)+(e<<3)>>3];a=(e|0)>0;e=e+ -1|0;if(a){continue}break}}v[b>>3]=h?-d:d;P=g+560|0;return j&7}function yv(a,b,c,v){var w=0,x=0,y=0,z=0,A=0,B=0,C=0;y=P-32|0;P=y;w=v&2147483647;A=w;w=w+ -1006698496|0;z=c;x=c;if(c>>>0<0){w=w+1|0;}B=x;x=w;w=A+ -1140785152|0;C=z;if(z>>>0<0){w=w+1|0;}a:{if((w|0)==(x|0)&B>>>0<C>>>0|x>>>0<w>>>0){w=v<<4|c>>>28;c=c<<4|b>>>28;b=b&268435455;z=b;if((b|0)==134217728&a>>>0>=1|b>>>0>134217728){w=w+1073741824|0;a=c+1|0;if(a>>>0<1){w=w+1|0;}x=a;break a}x=c;w=w-((c>>>0<0)+ -1073741824|0)|0;if(a|z^134217728){break a}a=x+(x&1)|0;if(a>>>0<x>>>0){w=w+1|0;}x=a;break a}if(!(!z&(A|0)==2147418112?!(a|b):(A|0)==2147418112&z>>>0<0|A>>>0<2147418112)){w=v<<4|c>>>28;x=c<<4|b>>>28;w=w&524287|2146959360;break a}x=0;w=2146435072;if((A|0)==1140785151&z>>>0>4294967295|A>>>0>1140785151){break a}w=0;z=A>>>16;if(z>>>0<15249){break a}w=v&65535|65536;Av(y,a,b,c,w,15361-z|0);zv(y+16|0,a,b,c,w,z+ -15233|0);c=q[y+4>>2];a=q[y+8>>2];w=q[y+12>>2]<<4|a>>>28;x=a<<4|c>>>28;a=c&268435455;c=a;b=q[y>>2]|((q[y+16>>2]|q[y+24>>2])!=0|(q[y+20>>2]|q[y+28>>2])!=0);if((a|0)==134217728&b>>>0>=1|a>>>0>134217728){a=x+1|0;if(a>>>0<1){w=w+1|0;}x=a;break a}if(b|c^134217728){break a}a=x+(x&1)|0;if(a>>>0<x>>>0){w=w+1|0;}x=a;}P=y+32|0;f(0,x|0);f(1,v&-2147483648|w);return +g()}function zv(a,b,c,v,D,E){var F=0,G=0,H=0,I=0;a:{if(E&64){v=b;D=E+ -64|0;b=D&31;if(32<=(D&63)>>>0){D=v<<b;v=0;}else {D=(1<<b)-1&v>>>32-b|c<<b;v=v<<b;}b=0;c=0;break a}if(!E){break a}F=v;H=E;v=E&31;if(32<=(E&63)>>>0){G=F<<v;I=0;}else {G=(1<<v)-1&F>>>32-v|D<<v;I=F<<v;}v=c;F=b;E=64-E|0;D=E&31;if(32<=(E&63)>>>0){E=0;v=v>>>D;}else {E=v>>>D;v=((1<<D)-1&v)<<32-D|F>>>D;}v=I|v;D=E|G;E=b;b=H&31;if(32<=(H&63)>>>0){G=E<<b;b=0;}else {G=(1<<b)-1&E>>>32-b|c<<b;b=E<<b;}c=G;}q[a>>2]=b;q[a+4>>2]=c;q[a+8>>2]=v;q[a+12>>2]=D;}function Av(a,b,c,v,D,E){var J=0,K=0,L=0,M=0;a:{b:{if(E&64){c=E+ -64|0;b=c&31;if(32<=(c&63)>>>0){c=0;b=D>>>b;}else {c=D>>>b;b=((1<<b)-1&D)<<32-b|v>>>b;}v=0;D=0;break b}if(!E){break a}K=D;L=v;M=64-E|0;J=M&31;if(32<=(M&63)>>>0){K=L<<J;M=0;}else {K=(1<<J)-1&L>>>32-J|K<<J;M=L<<J;}L=b;J=E;b=J&31;if(32<=(J&63)>>>0){J=0;b=c>>>b;}else {J=c>>>b;b=((1<<b)-1&c)<<32-b|L>>>b;}b=M|b;c=J|K;J=v;v=E&31;if(32<=(E&63)>>>0){K=0;v=D>>>v;}else {K=D>>>v;v=((1<<v)-1&D)<<32-v|J>>>v;}D=K;}}q[a>>2]=b;q[a+4>>2]=c;q[a+8>>2]=v;q[a+12>>2]=D;}function Bv(a,b){var c=0,v=0,D=0;c=(b|0)!=0;a:{b:{c:{d:{if(!b|!(a&3)){break d}while(1){if(!r[a|0]){break c}a=a+1|0;b=b+ -1|0;c=(b|0)!=0;if(!b){break d}if(a&3){continue}break}}if(!c){break b}}if(!r[a|0]){break a}e:{if(b>>>0>=4){c=b+ -4|0;v=c&-4;c=c-v|0;v=(a+v|0)+4|0;while(1){D=q[a>>2];if((D^-1)&D+ -16843009&-2139062144){break e}a=a+4|0;b=b+ -4|0;if(b>>>0>3){continue}break}b=c;a=v;}if(!b){break b}}while(1){if(!r[a|0]){break a}a=a+1|0;b=b+ -1|0;if(b){continue}break}}return 0}return a}function Cv(a,b,E){a=a|0;b=b|0;E=E|0;var N=0,Q=0,R=0,S=0,T=0,U=0;Q=P-32|0;P=Q;N=q[a+28>>2];q[Q+16>>2]=N;S=q[a+20>>2];q[Q+28>>2]=E;q[Q+24>>2]=b;b=S-N|0;q[Q+20>>2]=b;S=b+E|0;T=2;b=Q+16|0;while(1){a:{R=O(q[a+60>>2],b|0,T|0,Q+12|0)|0;N=0;b:{if(!R){break b}q[6659]=R;N=-1;}c:{if(N){q[Q+12>>2]=-1;N=-1;break c}N=q[Q+12>>2];}d:{if((N|0)==(S|0)){b=q[a+44>>2];q[a+28>>2]=b;q[a+20>>2]=b;q[a+16>>2]=b+q[a+48>>2];a=E;break d}if((N|0)>-1){break a}q[a+28>>2]=0;q[a+16>>2]=0;q[a+20>>2]=0;q[a>>2]=q[a>>2]|32;a=0;if((T|0)==2){break d}a=E-q[b+4>>2]|0;}P=Q+32|0;return a|0}R=q[b+4>>2];U=N>>>0>R>>>0;b=U?b+8|0:b;R=N-(U?R:0)|0;q[b>>2]=R+q[b>>2];q[b+4>>2]=q[b+4>>2]-R;S=S-N|0;T=T-U|0;continue}}function Dv(a,b){a=a|0;b=b|0;var E=0;E=b;b=q[b>>2]+15&-16;q[E>>2]=b+16;v[a>>3]=yv(q[b>>2],q[b+4>>2],q[b+8>>2],q[b+12>>2]);}function Ev(a,b,O,V,W,X){a=a|0;b=+b;O=O|0;V=V|0;W=W|0;X=X|0;var Y=0,Z=0,_=0,$=0,aa=0,ba=0,ca=0,da=0,ea=0,fa=0,ga=0,ia=0,ja=0,ka=0,la=0,ma=0,na=0,oa=0,pa=0,qa=0,sa=0,ta=0,ua=0,va=0,wa=0;aa=P-560|0;P=aa;q[aa+44>>2]=0;h(+b);Y=e(1)|0;a:{if(qa=1,sa=(ua=e(0)>>>0>4294967295?0:1,va=0,wa=(Y|0)<=-1,wa?ua:va),ta=(Y|0)<-1,ta?qa:sa){b=-b;h(+b);Y=e(1)|0;ma=1;na=17632;break a}if(W&2048){ma=1;na=17635;break a}ma=W&1;na=ma?17638:17633;}b:{if((Y&2146435072)==2146435072){ca=ma+3|0;ra(a,32,O,ca,W&-65537);ha(a,na,ma);V=X>>>5&1;ha(a,b!=b?V?17659:17663:V?17651:17655,3);break b}b=sh(b,aa+44|0);b=b+b;if(b!=0){q[aa+44>>2]=q[aa+44>>2]+ -1;}ja=aa+16|0;oa=X|32;if((oa|0)==97){ba=X&32;ia=ba?na+9|0:na;c:{if(V>>>0>11){break c}Y=12-V|0;if(!Y){break c}ka=8;while(1){ka=ka*16;Y=Y+ -1|0;if(Y){continue}break}if(r[ia|0]==45){b=-(ka+(-b-ka));break c}b=b+ka-ka;}Y=q[aa+44>>2];_=Y>>31;Y=Cb(_^Y+_,0,ja);if((ja|0)==(Y|0)){o[aa+15|0]=48;Y=aa+15|0;}ga=ma|2;_=q[aa+44>>2];fa=Y+ -2|0;o[fa|0]=X+15;o[Y+ -1|0]=(_|0)<0?45:43;Y=W&8;Z=aa+16|0;while(1){X=Z;ea=ba;if(y(b)<2147483648){_=~~b;}else {_=-2147483648;}o[Z|0]=ea|r[_+17616|0];b=(b- +(_|0))*16;Z=X+1|0;if(!((Z-(aa+16|0)|0)!=1|(b==0?!((V|0)>0|Y):0))){o[X+1|0]=46;Z=X+2|0;}if(b!=0){continue}break}X=a;Y=O;if(!V|((Z-aa|0)+ -18|0)>=(V|0)){ba=((ja-(aa+16|0)|0)-fa|0)+Z|0;}else {ba=((V+ja|0)-fa|0)+2|0;}ca=ba+ga|0;ra(X,32,Y,ca,W);ha(a,ia,ga);ra(a,48,O,ca,W^65536);V=Z-(aa+16|0)|0;ha(a,aa+16|0,V);X=V;V=ja-fa|0;ra(a,48,ba-(X+V|0)|0,0,0);ha(a,fa,V);break b}Y=(V|0)<0;d:{if(b==0){$=q[aa+44>>2];break d}$=q[aa+44>>2]+ -28|0;q[aa+44>>2]=$;b=b*268435456;}da=Y?6:V;ga=($|0)<0?aa+48|0:aa+336|0;_=ga;while(1){V=_;if(b<4294967296&b>=0){Y=~~b>>>0;}else {Y=0;}q[V>>2]=Y;_=_+4|0;b=(b- +(Y>>>0))*1e9;if(b!=0){continue}break}e:{if(($|0)<1){Y=_;Z=ga;break e}Z=ga;while(1){fa=($|0)<29?$:29;Y=_+ -4|0;f:{if(Y>>>0<Z>>>0){break f}V=fa;ea=0;while(1){ia=Y;ca=0;pa=ea;ea=q[Y>>2];ba=V&31;if(32<=(V&63)>>>0){$=ea<<ba;ba=0;}else {$=(1<<ba)-1&ea>>>32-ba;ba=ea<<ba;}ea=pa+ba|0;ca=$+ca|0;ca=ea>>>0<ba>>>0?ca+1|0:ca;ba=ea;ea=KB(ba,ca,1e9);pa=ia;ia=JB(ea,Q,1e9,0);q[pa>>2]=ba-ia;Y=Y+ -4|0;if(Y>>>0>=Z>>>0){continue}break}V=ea;if(!V){break f}Z=Z+ -4|0;q[Z>>2]=V;}while(1){Y=_;if(Y>>>0>Z>>>0){_=Y+ -4|0;if(!q[_>>2]){continue}}break}$=q[aa+44>>2]-fa|0;q[aa+44>>2]=$;_=Y;if(($|0)>0){continue}break}}if(($|0)<=-1){la=((da+25|0)/9|0)+1|0;fa=(oa|0)==102;while(1){ea=($|0)<-9?9:0-$|0;g:{if(Z>>>0>=Y>>>0){Z=q[Z>>2]?Z:Z+4|0;break g}ia=1e9>>>ea;ba=-1<<ea^-1;$=0;_=Z;while(1){V=q[_>>2];q[_>>2]=(V>>>ea)+$;$=w(ia,V&ba);_=_+4|0;if(_>>>0<Y>>>0){continue}break}Z=q[Z>>2]?Z:Z+4|0;if(!$){break g}q[Y>>2]=$;Y=Y+4|0;}$=ea+q[aa+44>>2]|0;q[aa+44>>2]=$;V=fa?ga:Z;Y=Y-V>>2>(la|0)?V+(la<<2)|0:Y;if(($|0)<0){continue}break}}_=0;h:{if(Z>>>0>=Y>>>0){break h}_=w(ga-Z>>2,9);$=10;V=q[Z>>2];if(V>>>0<10){break h}while(1){_=_+1|0;$=w($,10);if(V>>>0>=$>>>0){continue}break}}V=(da-((oa|0)==102?0:_)|0)-((oa|0)==103&(da|0)!=0)|0;if((V|0)<(w(Y-ga>>2,9)+ -9|0)){ba=V+9216|0;V=(ba|0)/9|0;ca=(ga+(V<<2)|0)+ -4092|0;$=10;V=(ba-w(V,9)|0)+1|0;if((V|0)<=8){while(1){$=w($,10);V=V+1|0;if((V|0)!=9){continue}break}}ia=q[ca>>2];ba=(ia>>>0)/($>>>0)|0;la=ca+4|0;fa=ia-w($,ba)|0;i:{if(fa?0:(la|0)==(Y|0)){break i}V=$>>>1;ka=fa>>>0<V>>>0?.5:(Y|0)==(la|0)?(V|0)==(fa|0)?1:1.5:1.5;b=ba&1?9007199254740994:9007199254740992;if(!(!ma|r[na|0]!=45)){ka=-ka;b=-b;}V=ia-fa|0;q[ca>>2]=V;if(b+ka==b){break i}V=V+$|0;q[ca>>2]=V;if(V>>>0>=1e9){while(1){q[ca>>2]=0;ca=ca+ -4|0;if(ca>>>0<Z>>>0){Z=Z+ -4|0;q[Z>>2]=0;}V=q[ca>>2]+1|0;q[ca>>2]=V;if(V>>>0>999999999){continue}break}}_=w(ga-Z>>2,9);$=10;V=q[Z>>2];if(V>>>0<10){break i}while(1){_=_+1|0;$=w($,10);if(V>>>0>=$>>>0){continue}break}}V=ca+4|0;Y=Y>>>0>V>>>0?V:Y;}j:{while(1){fa=Y;ia=0;if(Y>>>0<=Z>>>0){break j}Y=fa+ -4|0;if(!q[Y>>2]){continue}break}ia=1;}k:{if((oa|0)!=103){ba=W&8;break k}Y=da?da:1;V=(Y|0)>(_|0)&(_|0)>-5;da=(V?_^-1:-1)+Y|0;X=(V?-1:-2)+X|0;ba=W&8;if(ba){break k}Y=9;l:{if(!ia){break l}ba=q[fa+ -4>>2];if(!ba){break l}V=10;Y=0;if((ba>>>0)%10){break l}while(1){Y=Y+1|0;V=w(V,10);if(!((ba>>>0)%(V>>>0))){continue}break}}V=w(fa-ga>>2,9)+ -9|0;if((X|32)==102){ba=0;V=V-Y|0;V=(V|0)>0?V:0;da=(da|0)<(V|0)?da:V;break k}ba=0;V=(V+_|0)-Y|0;V=(V|0)>0?V:0;da=(da|0)<(V|0)?da:V;}$=da|ba;ca=($|0)!=0;V=a;pa=O;ea=X|32;Y=(_|0)>0?_:0;m:{if((ea|0)==102){break m}Y=_>>31;Y=Cb(Y+_^Y,0,ja);if((ja-Y|0)<=1){while(1){Y=Y+ -1|0;o[Y|0]=48;if((ja-Y|0)<2){continue}break}}la=Y+ -2|0;o[la|0]=X;o[Y+ -1|0]=(_|0)<0?45:43;Y=ja-la|0;}ca=(Y+(ca+(da+ma|0)|0)|0)+1|0;ra(V,32,pa,ca,W);ha(a,na,ma);ra(a,48,O,ca,W^65536);n:{if((ea|0)==102){V=aa+16|8;_=aa+16|9;X=Z>>>0>ga>>>0?ga:Z;Z=X;while(1){Y=Cb(q[Z>>2],0,_);o:{if((X|0)!=(Z|0)){if(Y>>>0<=aa+16>>>0){break o}while(1){Y=Y+ -1|0;o[Y|0]=48;if(Y>>>0>aa+16>>>0){continue}break}break o}if((Y|0)!=(_|0)){break o}o[aa+24|0]=48;Y=V;}ha(a,Y,_-Y|0);Z=Z+4|0;if(Z>>>0<=ga>>>0){continue}break}if($){ha(a,17667,1);}p:{if((da|0)<1|Z>>>0>=fa>>>0){break p}while(1){Y=Cb(q[Z>>2],0,_);if(Y>>>0>aa+16>>>0){while(1){Y=Y+ -1|0;o[Y|0]=48;if(Y>>>0>aa+16>>>0){continue}break}}ha(a,Y,(da|0)<9?da:9);da=da+ -9|0;Z=Z+4|0;if(Z>>>0>=fa>>>0){break p}if((da|0)>0){continue}break}}ra(a,48,da+9|0,9,0);break n}q:{if((da|0)<0){break q}X=ia?fa:Z+4|0;V=aa+16|8;ga=aa+16|9;_=Z;while(1){Y=Cb(q[_>>2],0,ga);if((ga|0)==(Y|0)){o[aa+24|0]=48;Y=V;}r:{if((Z|0)!=(_|0)){if(Y>>>0<=aa+16>>>0){break r}while(1){Y=Y+ -1|0;o[Y|0]=48;if(Y>>>0>aa+16>>>0){continue}break}break r}ha(a,Y,1);Y=Y+1|0;if((da|0)<1?!ba:0){break r}ha(a,17667,1);}ea=Y;Y=ga-Y|0;ha(a,ea,(da|0)>(Y|0)?Y:da);da=da-Y|0;_=_+4|0;if(_>>>0>=X>>>0){break q}if((da|0)>-1){continue}break}}ra(a,48,da+18|0,18,0);ha(a,la,ja-la|0);}}ra(a,32,O,ca,W^8192);P=aa+560|0;return ((ca|0)<(O|0)?O:ca)|0}function Fv(a,b,q,O){if(a|b){while(1){q=q+ -1|0;o[q|0]=r[(a&15)+17616|0]|O;a=(b&15)<<28|a>>>4;b=b>>>4;if(a|b){continue}break}}return q}function Gv(a,b){var O=0,V=x(0);O=P-16|0;P=O;q[O+12>>2]=a;q[O+8>>2]=b;a=q[O+12>>2];q[O+4>>2]=0;while(1){if(q[O+4>>2]<3){b=P-16|0;q[b+12>>2]=q[O+8>>2];V=Oc(u[q[b+12>>2]+(q[O+4>>2]<<2)>>2]);u[(a+868|0)+(q[O+4>>2]<<6)>>2]=V;q[O+4>>2]=q[O+4>>2]+1;continue}break}P=O+16|0;}function Hv(a,b,q){if(a|b){while(1){q=q+ -1|0;o[q|0]=a&7|48;a=(b&7)<<29|a>>>3;b=b>>>3;if(a|b){continue}break}}return q}function Iv(a){var b=0,W=0,X=0,ha=0;b=P-208|0;P=b;q[b+204>>2]=0;_(b+160|0,0,40);q[b+200>>2]=q[b+204>>2];a:{if((ne(0,b+200|0,b+80|0,b+160|0)|0)<0){break a}X=q[a+76>>2]>=0?1:X;W=q[a>>2];if(o[a+74|0]<=0){q[a>>2]=W&-33;}ha=W&32;b:{if(q[a+48>>2]){ne(a,b+200|0,b+80|0,b+160|0);break b}q[a+48>>2]=80;q[a+16>>2]=b+80;q[a+28>>2]=b;q[a+20>>2]=b;W=q[a+44>>2];q[a+44>>2]=b;ne(a,b+200|0,b+80|0,b+160|0);if(!W){break b}n[q[a+36>>2]](a,0,0)|0;q[a+48>>2]=0;q[a+44>>2]=W;q[a+28>>2]=0;q[a+16>>2]=0;q[a+20>>2]=0;}q[a>>2]=q[a>>2]|ha;if(!X){break a}}P=b+208|0;}function Jv(a,P){a:{if(a){if(P>>>0<=127){break a}b:{if(!q[q[5306]>>2]){if((P&-128)==57216){break a}break b}if(P>>>0<=2047){o[a+1|0]=P&63|128;o[a|0]=P>>>6|192;return 2}if(!((P&-8192)!=57344?P>>>0>=55296:0)){o[a+2|0]=P&63|128;o[a|0]=P>>>12|224;o[a+1|0]=P>>>6&63|128;return 3}if(P+ -65536>>>0<=1048575){o[a+3|0]=P&63|128;o[a|0]=P>>>18|240;o[a+2|0]=P>>>6&63|128;o[a+1|0]=P>>>12&63|128;return 4}}q[6659]=25;a=-1;}else {a=1;}return a}o[a|0]=P;return 1}function Kv(a,P,ra){var xa=0,ya=0,za=0;xa=q[ra+16>>2];a:{if(!xa){if(oh(ra)){break a}xa=q[ra+16>>2];}za=q[ra+20>>2];if(xa-za>>>0<P>>>0){n[q[ra+36>>2]](ra,a,P)|0;return}b:{if(o[ra+75|0]<0){break b}xa=P;while(1){ya=xa;if(!ya){break b}xa=ya+ -1|0;if(r[xa+a|0]!=10){continue}break}if(n[q[ra+36>>2]](ra,a,ya)>>>0<ya>>>0){break a}P=P-ya|0;a=a+ya|0;za=q[ra+20>>2];}va(za,a,P);q[ra+20>>2]=q[ra+20>>2]+P;}}function Lv(a){var P=0;if(q[a+76>>2]<0){a:{if(o[a+75|0]==10){break a}P=q[a+20>>2];if(P>>>0>=t[a+16>>2]){break a}q[a+20>>2]=P+1;o[P|0]=10;return}ph(a);return}b:{c:{if(o[a+75|0]==10){break c}P=q[a+20>>2];if(P>>>0>=t[a+16>>2]){break c}q[a+20>>2]=P+1;o[P|0]=10;break b}ph(a);}}function Mv(a){var ra=0,Aa=0;ra=q[a+92>>2];if(ra){if(r[a+96|0]){if(ra){q[6658]=q[6658]+1;n[q[5256]](ra);}}q[a+92>>2]=0;}q[a+92>>2]=0;q[a+84>>2]=0;q[a+88>>2]=0;o[a+96|0]=1;while(1){ra=q[a+64>>2];if(ra){q[a+64>>2]=q[ra+8>>2];Aa=q[ra>>2];if(Aa){q[6658]=q[6658]+1;n[q[5256]](Aa);}if(ra){q[6658]=q[6658]+1;n[q[5256]](ra);}continue}break}while(1){ra=q[a+48>>2];if(ra){q[a+48>>2]=q[ra+8>>2];Aa=q[ra>>2];if(Aa){q[6658]=q[6658]+1;n[q[5256]](Aa);}if(ra){q[6658]=q[6658]+1;n[q[5256]](ra);}continue}break}while(1){ra=q[a+32>>2];if(ra){q[a+32>>2]=q[ra+8>>2];Aa=q[ra>>2];if(Aa){q[6658]=q[6658]+1;n[q[5256]](Aa);}if(ra){q[6658]=q[6658]+1;n[q[5256]](ra);}continue}break}}function Nv(a,Ba,Ca){var Da=0,Ea=x(0),Fa=x(0),Ga=0,Ha=0,Ia=x(0),Ja=x(0),Ka=x(0),La=x(0),Ma=x(0),Na=x(0),Oa=x(0);Da=P-16|0;P=Da;a:{b:{c:{d:{e:{if(q[Ca+100>>2]>=0){u[(q[Ba+108>>2]<<2)+Da>>2]=q[Ca+88>>2];break e}Ea=nb(Ca+24|0);Ga=Ca+72|0;Fa=nb(Ga);Ha=q[Ca+100>>2];u[(q[Ba+108>>2]<<2)+Da>>2]=Ea/Fa;if((Ha|0)<0){break d}}u[(q[Ba+112>>2]<<2)+Da>>2]=q[Ca+92>>2];break c}Ea=nb(Ca+40|0);Fa=nb(Ga);Ga=q[Ca+100>>2];u[(q[Ba+112>>2]<<2)+Da>>2]=Ea/Fa;if((Ga|0)<0){break b}}Ea=x(q[Ca+96>>2]);break a}Ea=x(nb(Ca+56|0)/nb(Ca+72|0));}u[(q[Ba+104>>2]<<2)+Da>>2]=Ea;Ea=u[Ba+20>>2];Fa=u[Ba+24>>2];Ia=u[Ba+16>>2];Ja=u[Ba>>2];Ka=u[Ba+4>>2];La=u[Ba+8>>2];Ma=u[Da>>2];Na=u[Da+4>>2];Oa=u[Da+8>>2];q[a+12>>2]=0;u[a+8>>2]=Fa+x(Oa*La);u[a+4>>2]=Ea+x(Na*Ka);u[a>>2]=Ia+x(Ma*Ja);P=Da+16|0;}function Ov(a,Ba,Ca){var Pa=0,Qa=0,Ra=0,Sa=0,Ta=0,Ua=x(0),Va=0,Wa=0,Xa=x(0),Ya=x(0),Za=0,_a=0,$a=0,ab=x(0),bb=x(0),cb=x(0),db=0,eb=0,fb=x(0),gb=x(0),hb=x(0);Qa=P-48|0;P=Qa;Sa=-246811958;Ta=1900671690;a:{if((Ca|0)>0){Pa=Ba;_a=1900671690;Wa=1900671690;Ra=-246811958;Va=-246811958;while(1){$a=q[Pa+8>>2];Ua=u[Pa+8>>2];Sa=(f(0,Sa),k())<Ua?$a:Sa;db=q[Pa+4>>2];Xa=u[Pa+4>>2];Ra=(f(0,Ra),k())<Xa?db:Ra;Za=q[Pa>>2];Ya=u[Pa>>2];Va=(f(0,Va),k())<Ya?Za:Va;Ta=Ua<(f(0,Ta),k())?$a:Ta;_a=Xa<(f(0,_a),k())?db:_a;Wa=Ya<(f(0,Wa),k())?Za:Wa;Pa=Pa+16|0;eb=eb+1|0;if((eb|0)!=(Ca|0)){continue}break}break a}Va=-246811958;Ra=-246811958;Wa=1900671690;_a=1900671690;}ab=(f(0,Ra),k());bb=(f(0,_a),k());Ua=x(ab-bb);cb=(f(0,Sa),k());fb=(f(0,Ta),k());Xa=x(cb-fb);Sa=Ua<Xa;gb=(f(0,Va),k());hb=(f(0,Wa),k());Ya=x(gb-hb);Ra=Ya<Xa;Ta=Ya<Ua;Pa=Ta?Sa?2:1:Ra<<1;q[a+112>>2]=Pa;Va=Ta?(Ra^1)<<1:Sa?1:2;if((Pa|0)==(Va|0)){Va=(Pa+1>>>0)%3|0;}q[a+104>>2]=Va;Sa=0;q[a+12>>2]=0;q[a+28>>2]=0;Ra=(Pa^3)-Va|0;q[a+108>>2]=Ra;u[a+24>>2]=x(cb+fb)*x(.5);u[a+20>>2]=x(ab+bb)*x(.5);u[a+16>>2]=x(gb+hb)*x(.5);Pa=(Pa|0)==((Ra+1|0)%3|0);Xa=Pa?x(Xa*x(9788566967472434e-20)):x(Xa*x(-9788566967472434e-20));u[a+8>>2]=Xa;Ua=Pa?x(Ua*x(9788566967472434e-20)):x(Ua*x(-9788566967472434e-20));u[a+4>>2]=Ua;Ya=Pa?x(Ya*x(9788566967472434e-20)):x(Ya*x(-9788566967472434e-20));u[a>>2]=Ya;q[Qa+36>>2]=0;o[Qa+40|0]=1;q[Qa+28>>2]=0;q[Qa+32>>2]=0;Wa=Xa!=x(0);ab=x(x(1)/Xa);_a=Ua!=x(0);bb=x(x(1)/Ua);$a=Ya!=x(0);cb=x(x(1)/Ya);b:{if((Ca|0)<1){break b}q[6657]=q[6657]+1;Pa=n[q[5255]](Ca<<4,16)|0;Ra=q[Qa+36>>2];db=q[Qa+28>>2];c:{d:{if((db|0)>=1){while(1){Ta=Sa<<4;Va=Ta+Pa|0;Ta=Ra+Ta|0;eb=q[Ta+4>>2];q[Va>>2]=q[Ta>>2];q[Va+4>>2]=eb;Za=q[Ta+12>>2];q[Va+8>>2]=q[Ta+8>>2];q[Va+12>>2]=Za;Sa=Sa+1|0;if((db|0)!=(Sa|0)){continue}break d}}if(!Ra){break c}}if(r[Qa+40|0]){if(Ra){q[6658]=q[6658]+1;n[q[5256]](Ra);}}q[Qa+36>>2]=0;}q[Qa+36>>2]=Pa;Sa=1;o[Qa+40|0]=1;q[Qa+32>>2]=Ca;Ra=q[Qa+12>>2];q[Pa>>2]=q[Qa+8>>2];q[Pa+4>>2]=Ra;Ra=q[Qa+20>>2];q[Pa+8>>2]=q[Qa+16>>2];q[Pa+12>>2]=Ra;if((Ca|0)==1){break b}while(1){Ra=q[Qa+12>>2];Pa=q[Qa+36>>2]+(Sa<<4)|0;q[Pa>>2]=q[Qa+8>>2];q[Pa+4>>2]=Ra;Ra=q[Qa+20>>2];q[Pa+8>>2]=q[Qa+16>>2];q[Pa+12>>2]=Ra;Sa=Sa+1|0;if((Sa|0)!=(Ca|0)){continue}break}}Xa=Wa?ab:Xa;ab=_a?bb:Ua;Ya=$a?cb:Ya;q[Qa+28>>2]=Ca;e:{if((Ca|0)<1){break e}Va=(Qa+8|0)+(q[a+104>>2]<<2)|0;Wa=(Qa+8|0)+(q[a+112>>2]<<2)|0;_a=(Qa+8|0)+(q[a+108>>2]<<2)|0;bb=u[a+24>>2];cb=u[a+20>>2];fb=u[a+16>>2];$a=q[Qa+36>>2];Ta=0;while(1){Ua=u[Ba>>2];gb=u[Ba+4>>2];hb=u[Ba+8>>2];q[Qa+20>>2]=0;u[Qa+16>>2]=Xa*x(hb-bb);u[Qa+12>>2]=ab*x(gb-cb);u[Qa+8>>2]=Ya*x(Ua-fb);Pa=$a+(Ta<<4)|0;Sa=Pa;Ua=u[_a>>2];f:{if(x(y(Ua))<x(2147483648)){Za=~~Ua;break f}Za=-2147483648;}q[Sa>>2]=Za;Sa=Pa;Ua=u[Wa>>2];g:{if(x(y(Ua))<x(2147483648)){Za=~~Ua;break g}Za=-2147483648;}q[Sa+4>>2]=Za;Ua=u[Va>>2];q[Pa+12>>2]=Ta;if(x(y(Ua))<x(2147483648)){Sa=~~Ua;}else {Sa=-2147483648;}q[Pa+8>>2]=Sa;Ba=Ba+16|0;Ta=Ta+1|0;if((Ta|0)!=(Ca|0)){continue}break}if((Ca|0)<2){break e}oe(Qa+24|0,Qa+8|0,0,Ca+ -1|0);}q[a+44>>2]=Ca;q[a+40>>2]=0;q[a+36>>2]=q[a+32>>2];Ba=q[a+84>>2];if((Ba|0)<(Ca|0)){if(q[a+88>>2]<(Ca|0)){h:{if(!Ca){Va=0;Pa=Ba;break h}q[6657]=q[6657]+1;Va=n[q[5255]](Ca<<2,16)|0;Pa=q[a+84>>2];}if((Pa|0)>=1){Sa=0;while(1){Ra=Sa<<2;q[Ra+Va>>2]=q[Ra+q[a+92>>2]>>2];Sa=Sa+1|0;if((Pa|0)!=(Sa|0)){continue}break}}Pa=q[a+92>>2];if(Pa){if(r[a+96|0]){if(Pa){q[6658]=q[6658]+1;n[q[5256]](Pa);}}q[a+92>>2]=0;}q[a+92>>2]=Va;q[a+88>>2]=Ca;o[a+96|0]=1;}while(1){q[q[a+92>>2]+(Ba<<2)>>2]=0;Ba=Ba+1|0;if((Ca|0)!=(Ba|0)){continue}break}}q[a+84>>2]=Ca;if((Ca|0)>=1){Wa=0;while(1){Ra=q[a+40>>2];i:{if(Ra){break i}Ta=q[a+36>>2];j:{if(Ta){q[a+36>>2]=q[Ta+8>>2];break j}q[6657]=q[6657]+1;Ta=n[q[5255]](12,16)|0;Ba=q[a+44>>2];q[Ta+8>>2]=0;q[Ta+4>>2]=Ba;q[6657]=q[6657]+1;q[Ta>>2]=n[q[5255]](w(Ba,112),16);q[Ta+8>>2]=q[a+32>>2];q[a+32>>2]=Ta;}Ba=0;Ra=q[Ta>>2];Sa=Ra;Pa=q[Ta+4>>2];if((Pa|0)<1){break i}while(1){Za=Sa;Sa=Sa+112|0;Ba=Ba+1|0;q[Za>>2]=(Ba|0)<(Pa|0)?Sa:0;if((Ba|0)!=(Pa|0)){continue}break}}q[a+40>>2]=q[Ra>>2];q[Ra+16>>2]=0;q[Ra>>2]=0;q[Ra+4>>2]=0;q[Ra+104>>2]=-1;q[Ra+8>>2]=0;q[Ra+12>>2]=0;Ba=q[Qa+36>>2]+(Wa<<4)|0;Pa=q[Ba+4>>2];q[Ra+88>>2]=q[Ba>>2];q[Ra+92>>2]=Pa;Pa=q[Ba+12>>2];q[Ra+96>>2]=q[Ba+8>>2];q[Ra+100>>2]=Pa;q[Ra+104>>2]=-1;q[q[a+92>>2]+(Wa<<2)>>2]=Ra;Wa=Wa+1|0;if((Wa|0)!=(Ca|0)){continue}break}}Ba=q[Qa+36>>2];if(Ba){if(r[Qa+40|0]){if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}q[Qa+36>>2]=0;}q[Qa+36>>2]=0;o[Qa+40|0]=1;q[Qa+28>>2]=0;q[Qa+32>>2]=0;q[a+100>>2]=-3;q[a+56>>2]=0;q[a+60>>2]=w(Ca,6);q[a+116>>2]=0;q[a+120>>2]=0;q[a+52>>2]=q[a+48>>2];q[Qa+16>>2]=0;q[Qa+20>>2]=0;q[Qa+8>>2]=0;q[Qa+12>>2]=0;qe(a,0,Ca,Qa+8|0);q[a+124>>2]=q[Qa+8>>2];a=q[Qa+36>>2];if(a){if(r[Qa+40|0]){if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}q[Qa+36>>2]=0;}P=Qa+48|0;}function Pv(a,Ba){var Ca=0;Ca=P-16|0;q[Ca+12>>2]=a;q[Ca+8>>2]=Ba;Ba=q[Ca+12>>2];a=q[Ca+8>>2];Ca=q[a+4>>2];q[Ba+696>>2]=q[a>>2];q[Ba+700>>2]=Ca;Ca=q[a+12>>2];q[Ba+704>>2]=q[a+8>>2];q[Ba+708>>2]=Ca;}function Qv(a,Ba,ib){var jb=0,kb=0,lb=0,mb=0,nb=0,ob=0,pb=0,qb=0,rb=0,sb=0,tb=0,ub=0,vb=0,wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=0,Cb=0,Eb=0,Fb=0,Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0,Nb=0,Ob=0,Pb=0;jb=P-128|0;P=jb;a:{if(!q[ib+4>>2]){break a}if(!q[Ba+4>>2]){a=q[ib+4>>2];q[Ba>>2]=q[ib>>2];q[Ba+4>>2]=a;a=q[ib+12>>2];q[Ba+8>>2]=q[ib+8>>2];q[Ba+12>>2]=a;break a}q[a+100>>2]=q[a+100>>2]+ -1;q[jb+124>>2]=0;q[jb+120>>2]=0;b:{if(Rv(Ba,ib,jb+124|0,jb+120|0)){Eb=q[jb+124>>2];nb=q[Eb+92>>2];yb=q[jb+120>>2];vb=q[yb+92>>2];ob=q[Eb+96>>2];xb=q[yb+96>>2];Ab=q[Eb+88>>2];Ob=q[yb+88>>2];q[jb+92>>2]=-1;ib=xb-ob|0;q[jb+88>>2]=ib;mb=vb-nb|0;q[jb+84>>2]=mb;kb=Ob-Ab|0;q[jb+80>>2]=kb;Ba=q[Eb+8>>2];q[jb+32>>2]=0;lb=ib;Hb=ib>>31;pb=mb;ub=mb>>31;rb=JB(ib,Hb,mb,ub);Ib=Q;ib=0-kb|0;sb=ib;wb=ib>>31;ib=JB(ib,wb,kb,kb>>31);mb=Q;Fb=JB(pb,ub,pb,ub);kb=ib-Fb|0;Fb=mb-(Q+(ib>>>0<Fb>>>0)|0)|0;ib=JB(lb,Hb,sb,wb);Hb=0-ib|0;Mb=0-(Q+(0<ib>>>0)|0)|0;if(Ba){ib=Ba;while(1){lb=q[ib+12>>2];mb=q[lb+92>>2]-nb|0;zb=mb;mb=mb>>31;tb=JB(zb,mb,sb,wb);Gb=Q;Pb=tb;tb=q[lb+88>>2]-Ab|0;Jb=tb;tb=tb>>31;Nb=JB(pb,ub,Jb,tb);c:{if((Pb|0)!=(0-Nb|0)|(0-(Q+(0<Nb>>>0)|0)|0)!=(Gb|0)){break c}mb=JB(rb,Ib,zb,mb);Gb=Q;tb=JB(Jb,tb,Hb,Mb);zb=tb+mb|0;mb=Q+Gb|0;mb=zb>>>0<tb>>>0?mb+1|0:mb;lb=q[lb+96>>2]-ob|0;tb=JB(kb,Fb,lb,lb>>31);zb=tb+zb|0;lb=Q+mb|0;lb=zb>>>0<tb>>>0?lb+1|0:lb;if((lb|0)<0?1:(lb|0)<=0?zb>>>0>=1?0:1:0){break c}if(qb){q[jb+64>>2]=-1;q[jb+68>>2]=-1;q[jb+56>>2]=0;q[jb+60>>2]=0;if((pe(qb,ib,jb+80|0,jb+56|0)|0)!=1){break c}}qb=ib;}ib=q[ib>>2];if((Ba|0)!=(ib|0)){continue}break}q[jb+32>>2]=qb;}mb=q[yb+8>>2];Ba=0;q[jb+8>>2]=0;if(mb){ib=mb;while(1){nb=q[ib+12>>2];lb=q[nb+92>>2]-vb|0;ob=lb;lb=lb>>31;Ab=JB(ob,lb,sb,wb);zb=Q;Jb=Ab;Ab=q[nb+88>>2]-Ob|0;tb=Ab;Ab=tb>>31;Gb=JB(pb,ub,tb,Ab);d:{if((Jb|0)!=(0-Gb|0)|(0-(Q+(0<Gb>>>0)|0)|0)!=(zb|0)){break d}lb=JB(rb,Ib,ob,lb);zb=Q;Ab=JB(tb,Ab,Hb,Mb);ob=Ab+lb|0;lb=Q+zb|0;lb=ob>>>0<Ab>>>0?lb+1|0:lb;tb=ob;nb=q[nb+96>>2]-xb|0;ob=JB(kb,Fb,nb,nb>>31);nb=tb+ob|0;lb=Q+lb|0;lb=nb>>>0<ob>>>0?lb+1|0:lb;if((lb|0)<0?1:(lb|0)<=0?nb>>>0>=1?0:1:0){break d}if(Ba){q[jb+64>>2]=-1;q[jb+68>>2]=-1;q[jb+56>>2]=0;q[jb+60>>2]=0;if((pe(Ba,ib,jb+80|0,jb+56|0)|0)!=2){break d}}Ba=ib;}ib=q[ib>>2];if((mb|0)!=(ib|0)){continue}break}q[jb+8>>2]=Ba;}e:{if(!(Ba|qb)){break e}xh(a,Eb,yb,jb+32|0,jb+8|0);Ba=q[jb+32>>2];if(Ba){Eb=q[Ba+12>>2];q[jb+124>>2]=Eb;}Ba=q[jb+8>>2];if(!Ba){break e}yb=q[Ba+12>>2];q[jb+120>>2]=yb;}Ib=q[yb+96>>2]+1|0;Fb=q[yb+88>>2];xb=q[yb+92>>2];break b}yb=q[jb+120>>2];Fb=q[yb+88>>2]+1|0;Ib=q[yb+96>>2];Eb=q[jb+124>>2];xb=q[yb+92>>2];}qb=Eb;wb=yb;ub=0;Ba=0;Hb=1;nb=0;lb=0;while(1){Ab=wb;pb=q[wb+96>>2];Ob=qb;kb=q[qb+96>>2];sb=q[qb+92>>2];ib=q[wb+92>>2];ob=q[qb+88>>2];mb=q[wb+88>>2];q[jb+116>>2]=-1;ib=ib-sb|0;q[jb+108>>2]=ib;pb=pb-kb|0;q[jb+112>>2]=pb;mb=mb-ob|0;q[jb+104>>2]=mb;sb=xb-sb|0;kb=Ib-kb|0;rb=w(sb,pb)-w(kb,ib)|0;vb=rb>>31;Mb=rb;q[jb+80>>2]=rb;q[jb+84>>2]=vb;tb=w(kb,mb);kb=Fb-ob|0;rb=tb-w(kb,pb)|0;ob=rb>>31;zb=rb;q[jb+88>>2]=rb;q[jb+92>>2]=ob;kb=w(ib,kb)-w(mb,sb)|0;rb=kb>>31;tb=kb;q[jb+96>>2]=kb;q[jb+100>>2]=rb;kb=mb;Gb=kb>>31;mb=JB(zb,ob,kb,Gb);Jb=Q;sb=ib;Nb=ib>>31;ib=JB(Mb,vb,ib,Nb);q[jb+72>>2]=mb-ib;q[jb+76>>2]=Jb-(Q+(mb>>>0<ib>>>0)|0);ib=pb;mb=ib>>31;pb=JB(Mb,vb,ib,mb);vb=Q;kb=JB(tb,rb,kb,Gb);q[jb+64>>2]=pb-kb;q[jb+68>>2]=vb-(Q+(pb>>>0<kb>>>0)|0);pb=JB(tb,rb,sb,Nb);kb=Q;ib=JB(ib,mb,zb,ob);q[jb+56>>2]=pb-ib;q[jb+60>>2]=kb-(Q+(pb>>>0<ib>>>0)|0);q[jb+48>>2]=0;q[jb+40>>2]=0;q[jb+44>>2]=0;q[jb+32>>2]=0;q[jb+36>>2]=0;rb=wh(a,0,qb,jb+104|0,jb+80|0,jb+56|0,jb+32|0);q[jb+24>>2]=0;q[jb+16>>2]=0;q[jb+20>>2]=0;q[jb+8>>2]=0;q[jb+12>>2]=0;ob=wh(a,1,wb,jb+104|0,jb+80|0,jb+56|0,jb+8|0);f:{if(!(ob|rb)){ib=re(a,qb,wb);q[ib+4>>2]=ib;q[ib>>2]=ib;q[qb+8>>2]=ib;ib=q[ib+8>>2];q[ib+4>>2]=ib;q[ib>>2]=ib;q[wb+8>>2]=ib;ib=0;break f}vb=rb?-1:1;if(!(!rb|!ob)){vb=Db(jb+32|0,jb+8|0);}g:{h:{if(Hb){break h}i:{if((vb|0)>=0){if(q[jb+24>>2]>-1){break h}if(!(q[jb+16>>2]|q[jb+20>>2])){break i}break h}if(q[jb+40>>2]|q[jb+44>>2]|q[jb+48>>2]>-1){break h}}sb=ub;pb=Ba;kb=nb;mb=lb;break g}kb=re(a,qb,wb);mb=kb;if(nb){q[nb+4>>2]=kb;mb=lb;}q[kb>>2]=nb;sb=q[kb+8>>2];pb=sb;if(ub){q[ub>>2]=sb;pb=Ba;}q[sb+4>>2]=ub;}q[jb+4>>2]=rb;q[jb>>2]=ob;ub=ob;if(!vb){xh(a,qb,wb,jb+4|0,jb);ub=q[jb>>2];}Ba=sb;j:{if((vb|0)<0){break j}Ba=sb;if(!ub){break j}k:{if(!Bb){break k}ib=q[Bb>>2];if((ob|0)==(ib|0)){break k}while(1){xb=q[ib+8>>2];lb=0;Ba=0;nb=q[ib>>2];if((nb|0)!=(ib|0)){q[nb+4>>2]=q[ib+4>>2];q[q[ib+4>>2]>>2]=nb;Ba=nb;}q[q[xb+12>>2]+8>>2]=Ba;Ba=q[xb>>2];if((Ba|0)!=(xb|0)){q[Ba+4>>2]=q[xb+4>>2];q[q[xb+4>>2]>>2]=Ba;lb=Ba;}q[q[ib+12>>2]+8>>2]=lb;q[ib+12>>2]=0;q[ib+16>>2]=0;q[ib+4>>2]=0;q[ib+8>>2]=0;q[ib>>2]=q[a+56>>2];q[a+56>>2]=ib;q[xb+12>>2]=0;q[xb+16>>2]=0;q[xb+4>>2]=0;q[xb+8>>2]=0;q[xb>>2]=q[a+56>>2];q[a+56>>2]=xb;q[a+116>>2]=q[a+116>>2]+ -1;ib=nb;if((ob|0)!=(ib|0)){continue}break}}l:{if(sb){if(!Bb){Bb=q[ob+4>>2];Kb=pb;}q[Bb>>2]=pb;q[pb+4>>2]=Bb;q[sb>>2]=ob;q[ob+4>>2]=sb;pb=0;break l}Kb=Bb?Kb:ob;}Ib=q[Ab+96>>2];xb=q[wb+92>>2];Fb=q[wb+88>>2];wb=q[ub+12>>2];q[jb+120>>2]=wb;Bb=q[ub+8>>2];Ba=0;}ub=Ba;nb=kb;m:{if((vb|0)>0){break m}ob=q[jb+4>>2];nb=kb;if(!ob){break m}n:{if(!Cb){break n}Ba=q[Cb+4>>2];if((rb|0)==(Ba|0)){break n}while(1){ib=Ba;nb=q[ib+8>>2];sb=q[ib+4>>2];Ba=0;vb=0;lb=q[ib>>2];if((lb|0)!=(ib|0)){q[lb+4>>2]=sb;q[q[ib+4>>2]>>2]=lb;vb=lb;}q[q[nb+12>>2]+8>>2]=vb;lb=q[nb>>2];if((lb|0)!=(nb|0)){q[lb+4>>2]=q[nb+4>>2];q[q[nb+4>>2]>>2]=lb;Ba=lb;}q[q[ib+12>>2]+8>>2]=Ba;q[ib+12>>2]=0;q[ib+16>>2]=0;q[ib+4>>2]=0;q[ib+8>>2]=0;q[ib>>2]=q[a+56>>2];q[a+56>>2]=ib;q[nb+12>>2]=0;q[nb+16>>2]=0;q[nb+4>>2]=0;q[nb+8>>2]=0;q[nb>>2]=q[a+56>>2];q[a+56>>2]=nb;q[a+116>>2]=q[a+116>>2]+ -1;Ba=sb;if((Ba|0)!=(rb|0)){continue}break}}o:{if(kb){if(!Cb){Cb=q[rb>>2];Lb=mb;}q[Cb+4>>2]=mb;q[mb>>2]=Cb;q[rb>>2]=kb;q[kb+4>>2]=rb;mb=0;break o}Lb=Cb?Lb:rb;}Ib=q[Ob+96>>2];xb=q[qb+92>>2];Fb=q[qb+88>>2];qb=q[ob+12>>2];q[jb+124>>2]=qb;Cb=q[ob+8>>2];nb=0;}ib=1;p:{if(!((qb|0)!=(Eb|0)|(wb|0)!=(yb|0))){q:{if(!Cb){q[mb>>2]=nb;q[nb+4>>2]=mb;q[qb+8>>2]=nb;break q}Ba=q[Cb+4>>2];if((Lb|0)!=(Ba|0)){while(1){ib=Ba;kb=q[ib+8>>2];qb=q[ib+4>>2];Ba=0;vb=0;lb=q[ib>>2];if((lb|0)!=(ib|0)){q[lb+4>>2]=qb;q[q[ib+4>>2]>>2]=lb;vb=lb;}q[q[kb+12>>2]+8>>2]=vb;lb=q[kb>>2];if((lb|0)!=(kb|0)){q[lb+4>>2]=q[kb+4>>2];q[q[kb+4>>2]>>2]=lb;Ba=lb;}q[q[ib+12>>2]+8>>2]=Ba;q[ib+12>>2]=0;q[ib+16>>2]=0;q[ib+4>>2]=0;q[ib+8>>2]=0;q[ib>>2]=q[a+56>>2];q[a+56>>2]=ib;q[kb+12>>2]=0;q[kb+16>>2]=0;q[kb+4>>2]=0;q[kb+8>>2]=0;q[kb>>2]=q[a+56>>2];q[a+56>>2]=kb;q[a+116>>2]=q[a+116>>2]+ -1;Ba=qb;if((Ba|0)!=(Lb|0)){continue}break}}if(!nb){break q}q[mb>>2]=Cb;q[Cb+4>>2]=mb;q[Lb>>2]=nb;q[nb+4>>2]=Lb;}if(!Bb){q[ub>>2]=pb;q[pb+4>>2]=ub;q[q[jb+120>>2]+8>>2]=ub;Bb=0;Ba=pb;lb=mb;ib=0;break f}ib=q[Bb>>2];if((Kb|0)!=(ib|0)){while(1){kb=q[ib+8>>2];lb=0;Ba=0;qb=q[ib>>2];if((qb|0)!=(ib|0)){q[qb+4>>2]=q[ib+4>>2];q[q[ib+4>>2]>>2]=qb;Ba=qb;}q[q[kb+12>>2]+8>>2]=Ba;Ba=q[kb>>2];if((Ba|0)!=(kb|0)){q[Ba+4>>2]=q[kb+4>>2];q[q[kb+4>>2]>>2]=Ba;lb=Ba;}q[q[ib+12>>2]+8>>2]=lb;q[ib+12>>2]=0;q[ib+16>>2]=0;q[ib+4>>2]=0;q[ib+8>>2]=0;q[ib>>2]=q[a+56>>2];q[a+56>>2]=ib;q[kb+12>>2]=0;q[kb+16>>2]=0;q[kb+4>>2]=0;q[kb+8>>2]=0;q[kb>>2]=q[a+56>>2];q[a+56>>2]=kb;q[a+116>>2]=q[a+116>>2]+ -1;ib=qb;if((Kb|0)!=(ib|0)){continue}break}}ib=0;r:{if(!ub){ub=0;break r}q[Bb>>2]=pb;q[pb+4>>2]=Bb;q[ub>>2]=Kb;q[Kb+4>>2]=ub;}break p}Hb=0;}Ba=pb;lb=mb;}if(!ib){break a}qb=q[jb+124>>2];wb=q[jb+120>>2];continue}}P=jb+128|0;}function Rv(a,Ba,ib,Db){var Qb=0,Rb=0,Sb=0,Tb=0,Ub=0,Vb=0,Wb=0,Xb=0,Yb=0,Zb=0,_b=0,$b=0,ac=0,bc=0,cc=0,dc=0,ec=0,fc=0,gc=0;Tb=q[a+12>>2];Wb=q[Ba+8>>2];a:{b:{if(q[Tb+88>>2]!=q[Wb+88>>2]|q[Tb+92>>2]!=q[Wb+92>>2]){break b}Qb=q[Wb+4>>2];if((Qb|0)==(Wb|0)){q[ib>>2]=Tb;Ba=q[Wb+8>>2];a=0;if(!Ba){break a}q[Db>>2]=q[Ba+12>>2];return 0}Tb=q[Wb>>2];q[Qb>>2]=Tb;q[Tb+4>>2]=Qb;if(q[Ba>>2]==(Wb|0)){Vb=Ba;Xb=Tb;Sb=q[Tb+88>>2];Rb=q[Qb+88>>2];if((Sb|0)<(Rb|0)|(q[Tb+92>>2]<q[Qb+92>>2]?(Sb|0)==(Rb|0):0)){Sb=Xb;}else {Sb=Qb;}q[Vb>>2]=Sb;}if(q[Ba+4>>2]!=(Wb|0)){break b}Sb=q[Tb+88>>2];Rb=q[Qb+88>>2];if(!((Sb|0)!=(Rb|0)|q[Tb+92>>2]<=q[Qb+92>>2]?(Sb|0)<=(Rb|0):0)){q[Ba+4>>2]=Tb;break b}q[Ba+4>>2]=Qb;}dc=q[Ba>>2];fc=q[a>>2];gc=q[a+4>>2];Sb=gc;ec=q[Ba+4>>2];Qb=ec;Wb=0;Xb=1;while(1){$b=q[Sb+88>>2];Rb=w(q[Qb+88>>2]-$b|0,Xb);c:{if((Rb|0)>=1){Vb=Sb;while(1){Tb=Qb;Ub=q[Qb+92>>2];Sb=Rb;while(1){d:{Rb=q[Vb+92>>2];$b=Ub-Rb|0;Yb=!_b<<2;Qb=q[Yb+Vb>>2];if((Qb|0)==(Vb|0)){break d}Zb=q[Qb+92>>2]-Rb|0;if((Zb|0)>0){break d}ac=q[Qb+88>>2];Rb=w(ac-q[Vb+88>>2]|0,Xb);if((Rb|0)>-1|(w(Sb,Zb)|0)>(w(Rb,$b)|0)?Rb:0){break d}Sb=w(q[Tb+88>>2]-ac|0,Xb);Vb=Qb;continue}break}Qb=q[Tb+Yb>>2];if((Tb|0)==(Qb|0)){break c}Yb=q[Qb+92>>2]-Ub|0;if((Yb|0)>-1){break c}Ub=q[Qb+88>>2];Rb=w(Ub-q[Vb+88>>2]|0,Xb);if((Rb|0)<1){break c}Ub=w(Ub-q[Tb+88>>2]|0,Xb);if(!Ub){continue}if((Ub|0)>-1){break c}if((w(Sb,Yb)|0)<(w(Ub,$b)|0)){continue}break}break c}if((Rb|0)<=-1){e:while(1){$b=q[Qb+92>>2];ac=((_b|0)!=0)<<2;Tb=q[ac+Qb>>2];while(1){Ub=Rb;Vb=Sb;Rb=q[Sb+92>>2];Yb=$b-Rb|0;f:{if((Qb|0)==(Tb|0)){break f}Zb=q[Tb+92>>2]-$b|0;if((Zb|0)<0){break f}bc=q[Tb+88>>2];Sb=w(bc-q[Qb+88>>2]|0,Xb);if((Sb|0)>-1|(w(Ub,Zb)|0)>(w(Sb,Yb)|0)?Sb:0){break f}Rb=w(bc-q[Vb+88>>2]|0,Xb);Qb=Tb;Sb=Vb;continue e}Sb=q[Vb+ac>>2];if((Vb|0)==(Sb|0)){Tb=Qb;break c}bc=q[Sb+92>>2]-Rb|0;if((bc|0)<1){Tb=Qb;break c}Zb=q[Sb+88>>2];Rb=w(q[Qb+88>>2]-Zb|0,Xb);if((Rb|0)>-1){Tb=Qb;break c}Zb=w(Zb-q[Vb+88>>2]|0,Xb);if(!Zb){continue}if((Zb|0)>-1){Tb=Qb;break c}if((w(Ub,bc)|0)<(w(Yb,Zb)|0)){continue}break}break}Tb=Qb;break c}Tb=q[Sb+92>>2];Rb=Sb;while(1){Vb=Rb;Rb=q[Rb+(!_b<<2)>>2];if(!((Rb|0)==(Sb|0)|($b|0)!=q[Rb+88>>2])){Ub=q[Rb+92>>2];Yb=(Ub|0)<=(Tb|0);Tb=Ub;if(Yb){continue}}break}Sb=q[Qb+92>>2];Rb=Qb;while(1){Tb=Rb;Rb=q[Rb+(((_b|0)!=0)<<2)>>2];if((Rb|0)==(Qb|0)|($b|0)!=q[Rb+88>>2]){break c}Ub=q[Rb+92>>2];Yb=(Ub|0)>=(Sb|0);Sb=Ub;if(Yb){continue}break}}Sb=_b?Vb:fc;Qb=_b?Tb:dc;cc=_b?cc:Vb;Wb=_b?Wb:Tb;Xb=_b?Xb:-1;_b=_b+1|0;if((_b|0)!=2){continue}break}q[Sb+4>>2]=Qb;q[Qb>>2]=Sb;q[cc>>2]=Wb;q[Wb+4>>2]=cc;if(q[dc+88>>2]<q[fc+88>>2]){q[a>>2]=dc;}if(q[ec+88>>2]>=q[gc+88>>2]){q[a+4>>2]=ec;}q[a+12>>2]=q[Ba+12>>2];q[ib>>2]=cc;a=1;}q[Db>>2]=Wb;return a}function Sv(a){a=a|0;return ie(a)|0}function Tv(a,Ba){a=a|0;Ba=Ba|0;var ib=0;a=n[q[5257]]((a+Ba|0)+3|0)|0;if(a){ib=(a+Ba|0)+3&0-Ba;q[ib+ -4>>2]=a;}return ib|0}function Uv(a){a=a|0;if(a){n[q[5258]](q[a+ -4>>2]);}}function Vv(a,Ba){var Db=0,hc=0,ic=x(0),jc=x(0),kc=x(0),lc=x(0),mc=x(0),nc=0,oc=x(0),pc=x(0),qc=x(0),rc=0,sc=0,tc=0,uc=0,vc=0,wc=0,xc=0,yc=0,zc=0,Ac=x(0),Bc=x(0),Cc=x(0),Dc=x(0),Ec=x(0),Fc=x(0),Gc=0,Hc=0,Ic=0;sc=q[a+4>>2];if((sc|0)>=1){while(1){a:{Db=vc;vc=Db+1|0;if((vc|0)>=(sc|0)){break a}hc=q[a+12>>2];wc=hc+(Db<<4)|0;Hc=wc;Db=vc;while(1){b:{xc=Db+1|0;if((xc|0)>=(sc|0)){break b}yc=(Db<<4)+hc|0;Ic=yc;zc=xc;while(1){Db=(zc<<4)+hc|0;jc=u[Db+4>>2];kc=u[yc>>2];oc=u[yc+4>>2];pc=u[Db>>2];qc=x(x(jc*kc)-x(oc*pc));lc=u[Db+8>>2];Ac=u[yc+8>>2];Bc=x(x(oc*lc)-x(Ac*jc));Cc=x(x(Ac*pc)-x(lc*kc));c:{if(!(x(x(qc*qc)+x(x(Bc*Bc)+x(Cc*Cc)))>x(9999999747378752e-20))){break c}ic=u[wc+4>>2];mc=u[wc>>2];Dc=x(x(pc*ic)-x(jc*mc));Ec=jc;jc=u[wc+8>>2];Fc=x(x(Ec*jc)-x(lc*ic));pc=x(x(lc*mc)-x(pc*jc));if(!(x(x(Dc*Dc)+x(x(Fc*Fc)+x(pc*pc)))>x(9999999747378752e-20))){break c}lc=x(x(oc*mc)-x(kc*ic));oc=x(x(Ac*ic)-x(oc*jc));kc=x(x(kc*jc)-x(Ac*mc));if(!(x(x(lc*lc)+x(x(oc*oc)+x(kc*kc)))>x(9999999747378752e-20))){break c}ic=x(x(jc*qc)+x(x(ic*Cc)+x(Bc*mc)));if(!(x(y(ic))>x(9.999999974752427e-7))){break c}ic=x(x(-1)/ic);mc=u[Db+12>>2];jc=u[Hc+12>>2];Ec=x(qc*jc);qc=u[Ic+12>>2];lc=x(ic*x(x(lc*mc)+x(Ec+x(Dc*qc))));kc=x(ic*x(x(kc*mc)+x(x(Cc*jc)+x(pc*qc))));ic=x(ic*x(x(oc*mc)+x(x(Bc*jc)+x(Fc*qc))));Db=0;tc=q[a+4>>2];if((tc|0)>0){while(1){nc=(Db<<4)+hc|0;if(!!(x(x(u[nc+12>>2]+x(x(x(ic*u[nc>>2])+x(kc*u[nc+4>>2]))+x(lc*u[nc+8>>2])))+x(-.009999999776482582))>x(0))){break c}Db=Db+1|0;if((tc|0)!=(Db|0)){continue}break}}hc=q[Ba+4>>2];d:{if((hc|0)!=q[Ba+8>>2]){break d}nc=hc?hc<<1:1;if((hc|0)>=(nc|0)){break d}Db=0;tc=0;if(nc){q[6657]=q[6657]+1;tc=n[q[5255]](nc<<4,16)|0;hc=q[Ba+4>>2];}if((hc|0)>=1){while(1){rc=Db<<4;uc=rc+tc|0;rc=rc+q[Ba+12>>2]|0;Gc=q[rc+4>>2];q[uc>>2]=q[rc>>2];q[uc+4>>2]=Gc;Gc=q[rc+12>>2];q[uc+8>>2]=q[rc+8>>2];q[uc+12>>2]=Gc;Db=Db+1|0;if((hc|0)!=(Db|0)){continue}break}}Db=q[Ba+12>>2];if(Db){if(r[Ba+16|0]){if(Db){q[6658]=q[6658]+1;n[q[5256]](Db);}}q[Ba+12>>2]=0;}q[Ba+12>>2]=tc;o[Ba+16|0]=1;q[Ba+8>>2]=nc;hc=q[Ba+4>>2];}Db=q[Ba+12>>2]+(hc<<4)|0;q[Db+12>>2]=0;u[Db+8>>2]=lc;u[Db+4>>2]=kc;u[Db>>2]=ic;q[Ba+4>>2]=q[Ba+4>>2]+1;}zc=zc+1|0;if((zc|0)==(sc|0)){break b}hc=q[a+12>>2];continue}}if((sc|0)==(xc|0)){break a}hc=q[a+12>>2];Db=xc;continue}}if((sc|0)!=(vc|0)){continue}break}}}function Wv(a,Ba){var Jc=0,Kc=x(0),Lc=0,Mc=0,Nc=x(0),Oc=x(0),Pc=0,Qc=0,Rc=0,Sc=x(0),Tc=0,Uc=x(0),Vc=0,Wc=0,Xc=0,Yc=x(0),Zc=x(0),_c=0,$c=0,ad=0,bd=0,cd=0,dd=0,ed=x(0);Tc=q[a+4>>2];if((Tc|0)>=1){while(1){a:{Rc=Wc;Wc=Rc+1|0;if((Wc|0)>=(Tc|0)){break a}Lc=q[a+12>>2];Vc=Lc+(Rc<<4)|0;cd=Vc;Jc=Wc;while(1){b:{Rc=Jc+1|0;if((Rc|0)>=(Tc|0)){break b}$c=(Jc<<4)+Lc|0;dd=$c;Xc=Rc;while(1){Sc=u[Vc>>2];Nc=x(u[$c>>2]-Sc);Jc=(Xc<<4)+Lc|0;Kc=u[Vc+4>>2];Uc=x(u[Jc+4>>2]-Kc);Oc=x(u[$c+4>>2]-Kc);Yc=x(u[Jc>>2]-Sc);ed=x(x(Nc*Uc)-x(Oc*Yc));Kc=u[cd+8>>2];Sc=x(u[dd+8>>2]-Kc);Kc=x(u[Jc+8>>2]-Kc);Yc=x(x(Sc*Yc)-x(Nc*Kc));Sc=x(x(Oc*Kc)-x(Sc*Uc));Kc=x(1);ad=0;while(1){Nc=x(ed*Kc);Uc=x(Sc*Kc);Oc=x(Yc*Kc);Kc=x(x(Nc*Nc)+x(x(Uc*Uc)+x(Oc*Oc)));c:{if(!(Kc>x(9999999747378752e-20))){break c}Kc=x(x(1)/x(E(Kc)));Zc=x(Nc*Kc);Nc=x(Oc*Kc);Oc=x(Uc*Kc);Pc=q[Ba+4>>2];if((Pc|0)>=1){Lc=q[Ba+12>>2];Jc=0;while(1){Mc=Lc+(Jc<<4)|0;if(!!(x(x(x(Oc*u[Mc>>2])+x(Nc*u[Mc+4>>2]))+x(Zc*u[Mc+8>>2]))>x(.9990000128746033))){break c}Jc=Jc+1|0;if((Pc|0)!=(Jc|0)){continue}break}}Kc=x(x(x(Oc*u[Vc>>2])+x(Nc*u[Vc+4>>2]))+x(Zc*u[cd+8>>2]));Mc=q[a+4>>2];if((Mc|0)>=1){Lc=q[a+12>>2];Jc=0;while(1){Qc=Lc+(Jc<<4)|0;if(!!(x(x(x(x(x(Oc*u[Qc>>2])+x(Nc*u[Qc+4>>2]))+x(Zc*u[Qc+8>>2]))-Kc)+x(-.009999999776482582))>x(0))){break c}Jc=Jc+1|0;if((Mc|0)!=(Jc|0)){continue}break}}Kc=x(-Kc);d:{if(q[Ba+8>>2]!=(Pc|0)){break d}_c=Pc?Pc<<1:1;if((Pc|0)>=(_c|0)){break d}Lc=0;bd=0;if(_c){q[6657]=q[6657]+1;bd=n[q[5255]](_c<<4,16)|0;Pc=q[Ba+4>>2];}if((Pc|0)>=1){while(1){Jc=Lc<<4;Mc=Jc+bd|0;Qc=Jc+q[Ba+12>>2]|0;Jc=q[Qc+4>>2];q[Mc>>2]=q[Qc>>2];q[Mc+4>>2]=Jc;Jc=q[Qc+12>>2];q[Mc+8>>2]=q[Qc+8>>2];q[Mc+12>>2]=Jc;Lc=Lc+1|0;if((Lc|0)!=(Pc|0)){continue}break}}Jc=q[Ba+12>>2];if(Jc){if(r[Ba+16|0]){if(Jc){q[6658]=q[6658]+1;n[q[5256]](Jc);}}q[Ba+12>>2]=0;}q[Ba+12>>2]=bd;o[Ba+16|0]=1;q[Ba+8>>2]=_c;Pc=q[Ba+4>>2];}Jc=q[Ba+12>>2]+(Pc<<4)|0;u[Jc+12>>2]=Kc;u[Jc+8>>2]=Zc;u[Jc+4>>2]=Nc;u[Jc>>2]=Oc;q[Ba+4>>2]=q[Ba+4>>2]+1;}Kc=x(-1);ad=ad+1|0;if((ad|0)!=2){continue}break}Xc=Xc+1|0;if((Xc|0)==(Tc|0)){break b}Lc=q[a+12>>2];continue}}if((Tc|0)==(Rc|0)){break a}Lc=q[a+12>>2];Jc=Rc;continue}}if((Tc|0)!=(Wc|0)){continue}break}}}function Xv(){var a=0;a=xa(8);q[6078]=a;I(a|0,0)|0;q[6081]=0;q[6082]=0;q[6080]=17116;q[6083]=0;q[6084]=0;q[6085]=0;q[6086]=0;q[6087]=0;q[6088]=0;W(24320);q[6090]=0;q[6091]=0;q[6089]=17116;q[6092]=0;q[6093]=0;q[6094]=0;q[6095]=0;q[6096]=0;q[6097]=0;W(24356);q[6099]=0;q[6100]=0;q[6098]=17116;q[6101]=0;q[6102]=0;q[6103]=0;q[6104]=0;q[6105]=0;q[6106]=0;W(24392);q[6108]=0;q[6109]=0;q[6107]=17116;q[6110]=0;q[6111]=0;q[6112]=0;q[6113]=0;q[6114]=0;q[6115]=0;W(24428);q[6117]=0;q[6118]=0;q[6116]=17116;q[6119]=0;q[6120]=0;q[6121]=0;q[6122]=0;q[6123]=0;q[6124]=0;W(24464);q[6126]=0;q[6127]=0;q[6125]=17116;q[6128]=0;q[6129]=0;q[6130]=0;q[6131]=0;q[6132]=0;q[6133]=0;W(24500);q[6135]=0;q[6136]=0;q[6134]=17116;q[6137]=0;q[6138]=0;q[6139]=0;q[6140]=0;q[6141]=0;q[6142]=0;W(24536);q[6144]=0;q[6145]=0;q[6143]=17116;q[6146]=0;q[6147]=0;q[6148]=0;q[6149]=0;q[6150]=0;q[6151]=0;W(24572);q[6153]=0;q[6154]=0;q[6152]=17116;q[6155]=0;q[6156]=0;q[6157]=0;q[6158]=0;q[6159]=0;q[6160]=0;W(24608);q[6162]=0;q[6163]=0;q[6161]=17116;q[6164]=0;q[6165]=0;q[6166]=0;q[6167]=0;q[6168]=0;q[6169]=0;W(24644);q[6171]=0;q[6172]=0;q[6170]=17116;q[6173]=0;q[6174]=0;q[6175]=0;q[6176]=0;q[6177]=0;q[6178]=0;W(24680);q[6180]=0;q[6181]=0;q[6179]=17116;q[6182]=0;q[6183]=0;q[6184]=0;q[6185]=0;q[6186]=0;q[6187]=0;W(24716);q[6189]=0;q[6190]=0;q[6188]=17116;q[6191]=0;q[6192]=0;q[6193]=0;q[6194]=0;q[6195]=0;q[6196]=0;W(24752);q[6198]=0;q[6199]=0;q[6197]=17116;q[6200]=0;q[6201]=0;q[6202]=0;q[6203]=0;q[6204]=0;q[6205]=0;W(24788);q[6207]=0;q[6208]=0;q[6206]=17116;q[6209]=0;q[6210]=0;q[6211]=0;q[6212]=0;q[6213]=0;q[6214]=0;W(24824);q[6216]=0;q[6217]=0;q[6215]=17116;q[6218]=0;q[6219]=0;q[6220]=0;q[6221]=0;q[6222]=0;q[6223]=0;W(24860);q[6225]=0;q[6226]=0;q[6224]=17116;q[6227]=0;q[6228]=0;q[6229]=0;q[6230]=0;q[6231]=0;q[6232]=0;W(24896);q[6234]=0;q[6235]=0;q[6233]=17116;q[6236]=0;q[6237]=0;q[6238]=0;q[6239]=0;q[6240]=0;q[6241]=0;W(24932);q[6243]=0;q[6244]=0;q[6242]=17116;q[6245]=0;q[6246]=0;q[6247]=0;q[6248]=0;q[6249]=0;q[6250]=0;W(24968);q[6252]=0;q[6253]=0;q[6251]=17116;q[6254]=0;q[6255]=0;q[6256]=0;q[6257]=0;q[6258]=0;q[6259]=0;W(25004);q[6261]=0;q[6262]=0;q[6260]=17116;q[6263]=0;q[6264]=0;q[6265]=0;q[6266]=0;q[6267]=0;q[6268]=0;W(25040);q[6270]=0;q[6271]=0;q[6269]=17116;q[6272]=0;q[6273]=0;q[6274]=0;q[6275]=0;q[6276]=0;q[6277]=0;W(25076);q[6279]=0;q[6280]=0;q[6278]=17116;q[6281]=0;q[6282]=0;q[6283]=0;q[6284]=0;q[6285]=0;q[6286]=0;W(25112);q[6288]=0;q[6289]=0;q[6287]=17116;q[6290]=0;q[6291]=0;q[6292]=0;q[6293]=0;q[6294]=0;q[6295]=0;W(25148);q[6297]=0;q[6298]=0;q[6296]=17116;q[6299]=0;q[6300]=0;q[6301]=0;q[6302]=0;q[6303]=0;q[6304]=0;W(25184);q[6306]=0;q[6307]=0;q[6305]=17116;q[6308]=0;q[6309]=0;q[6310]=0;q[6311]=0;q[6312]=0;q[6313]=0;W(25220);q[6315]=0;q[6316]=0;q[6314]=17116;q[6317]=0;q[6318]=0;q[6319]=0;q[6320]=0;q[6321]=0;q[6322]=0;W(25256);q[6324]=0;q[6325]=0;q[6323]=17116;q[6326]=0;q[6327]=0;q[6328]=0;q[6329]=0;q[6330]=0;q[6331]=0;W(25292);q[6333]=0;q[6334]=0;q[6332]=17116;q[6335]=0;q[6336]=0;q[6337]=0;q[6338]=0;q[6339]=0;q[6340]=0;W(25328);q[6342]=0;q[6343]=0;q[6341]=17116;q[6344]=0;q[6345]=0;q[6346]=0;q[6347]=0;q[6348]=0;q[6349]=0;W(25364);q[6351]=0;q[6352]=0;q[6350]=17116;q[6353]=0;q[6354]=0;q[6355]=0;q[6356]=0;q[6357]=0;q[6358]=0;W(25400);q[6360]=0;q[6361]=0;q[6359]=17116;q[6362]=0;q[6363]=0;q[6364]=0;q[6365]=0;q[6366]=0;q[6367]=0;W(25436);q[6369]=0;q[6370]=0;q[6368]=17116;q[6371]=0;q[6372]=0;q[6373]=0;q[6374]=0;q[6375]=0;q[6376]=0;W(25472);q[6378]=0;q[6379]=0;q[6377]=17116;q[6380]=0;q[6381]=0;q[6382]=0;q[6383]=0;q[6384]=0;q[6385]=0;W(25508);q[6387]=0;q[6388]=0;q[6386]=17116;q[6389]=0;q[6390]=0;q[6391]=0;q[6392]=0;q[6393]=0;q[6394]=0;W(25544);q[6396]=0;q[6397]=0;q[6395]=17116;q[6398]=0;q[6399]=0;q[6400]=0;q[6401]=0;q[6402]=0;q[6403]=0;W(25580);q[6405]=0;q[6406]=0;q[6404]=17116;q[6407]=0;q[6408]=0;q[6409]=0;q[6410]=0;q[6411]=0;q[6412]=0;W(25616);q[6414]=0;q[6415]=0;q[6413]=17116;q[6416]=0;q[6417]=0;q[6418]=0;q[6419]=0;q[6420]=0;q[6421]=0;W(25652);q[6423]=0;q[6424]=0;q[6422]=17116;q[6425]=0;q[6426]=0;q[6427]=0;q[6428]=0;q[6429]=0;q[6430]=0;W(25688);q[6432]=0;q[6433]=0;q[6431]=17116;q[6434]=0;q[6435]=0;q[6436]=0;q[6437]=0;q[6438]=0;q[6439]=0;W(25724);q[6441]=0;q[6442]=0;q[6440]=17116;q[6443]=0;q[6444]=0;q[6445]=0;q[6446]=0;q[6447]=0;q[6448]=0;W(25760);q[6450]=0;q[6451]=0;q[6449]=17116;q[6452]=0;q[6453]=0;q[6454]=0;q[6455]=0;q[6456]=0;q[6457]=0;W(25796);q[6459]=0;q[6460]=0;q[6458]=17116;q[6461]=0;q[6462]=0;q[6463]=0;q[6464]=0;q[6465]=0;q[6466]=0;W(25832);q[6468]=0;q[6469]=0;q[6467]=17116;q[6470]=0;q[6471]=0;q[6472]=0;q[6473]=0;q[6474]=0;q[6475]=0;W(25868);q[6477]=0;q[6478]=0;q[6476]=17116;q[6479]=0;q[6480]=0;q[6481]=0;q[6482]=0;q[6483]=0;q[6484]=0;W(25904);q[6486]=0;q[6487]=0;q[6485]=17116;q[6488]=0;q[6489]=0;q[6490]=0;q[6491]=0;q[6492]=0;q[6493]=0;W(25940);q[6495]=0;q[6496]=0;q[6494]=17116;q[6497]=0;q[6498]=0;q[6499]=0;q[6500]=0;q[6501]=0;q[6502]=0;W(25976);q[6504]=0;q[6505]=0;q[6503]=17116;q[6506]=0;q[6507]=0;q[6508]=0;q[6509]=0;q[6510]=0;q[6511]=0;W(26012);q[6513]=0;q[6514]=0;q[6512]=17116;q[6515]=0;q[6516]=0;q[6517]=0;q[6518]=0;q[6519]=0;q[6520]=0;W(26048);q[6522]=0;q[6523]=0;q[6521]=17116;q[6524]=0;q[6525]=0;q[6526]=0;q[6527]=0;q[6528]=0;q[6529]=0;W(26084);q[6531]=0;q[6532]=0;q[6530]=17116;q[6533]=0;q[6534]=0;q[6535]=0;q[6536]=0;q[6537]=0;q[6538]=0;W(26120);q[6540]=0;q[6541]=0;q[6539]=17116;q[6542]=0;q[6543]=0;q[6544]=0;q[6545]=0;q[6546]=0;q[6547]=0;W(26156);q[6549]=0;q[6550]=0;q[6548]=17116;q[6551]=0;q[6552]=0;q[6553]=0;q[6554]=0;q[6555]=0;q[6556]=0;W(26192);q[6558]=0;q[6559]=0;q[6557]=17116;q[6560]=0;q[6561]=0;q[6562]=0;q[6563]=0;q[6564]=0;q[6565]=0;W(26228);q[6567]=0;q[6568]=0;q[6566]=17116;q[6569]=0;q[6570]=0;q[6571]=0;q[6572]=0;q[6573]=0;q[6574]=0;W(26264);q[6576]=0;q[6577]=0;q[6575]=17116;q[6578]=0;q[6579]=0;q[6580]=0;q[6581]=0;q[6582]=0;q[6583]=0;W(26300);q[6585]=0;q[6586]=0;q[6584]=17116;q[6587]=0;q[6588]=0;q[6589]=0;q[6590]=0;q[6591]=0;q[6592]=0;W(26336);q[6594]=0;q[6595]=0;q[6593]=17116;q[6596]=0;q[6597]=0;q[6598]=0;q[6599]=0;q[6600]=0;q[6601]=0;W(26372);q[6603]=0;q[6604]=0;q[6602]=17116;q[6605]=0;q[6606]=0;q[6607]=0;q[6608]=0;q[6609]=0;q[6610]=0;W(26408);q[6612]=0;q[6613]=0;q[6611]=17116;q[6614]=0;q[6615]=0;q[6616]=0;q[6617]=0;q[6618]=0;q[6619]=0;W(26444);q[6621]=0;q[6622]=0;q[6620]=17116;q[6623]=0;q[6624]=0;q[6625]=0;q[6626]=0;q[6627]=0;q[6628]=0;W(26480);q[6630]=0;q[6631]=0;q[6629]=17116;q[6632]=0;q[6633]=0;q[6634]=0;q[6635]=0;q[6636]=0;q[6637]=0;W(26516);q[6639]=0;q[6640]=0;q[6638]=17116;q[6641]=0;q[6642]=0;q[6643]=0;q[6644]=0;q[6645]=0;q[6646]=0;W(26552);q[6648]=0;q[6649]=0;q[6647]=17116;q[6650]=0;q[6651]=0;q[6652]=0;q[6653]=0;q[6654]=0;q[6655]=0;W(26588);}function Yv(){}function Zv(q){q=q|0;q=26624;while(1){q=q+ -36|0;se(q);if((q|0)!=24320){continue}break}}function _v(Ba){Ba=Ba|0;Ba=q[6078];if(Ba){aa(Ba);}}function $v(Ba,fd,gd,hd){var id=0,jd=x(0),kd=x(0),ld=0,md=x(0),nd=x(0),od=x(0),pd=x(0),qd=x(0),rd=0;kd=u[gd>>2];a:{b:{if(!(u[fd>>2]<=kd)){jd=u[gd+4>>2];break b}jd=u[gd+4>>2];if(u[fd+4>>2]<=jd^1|u[fd+8>>2]<=u[gd+8>>2]^1|(u[fd+16>>2]>=u[gd+16>>2]^1|u[fd+20>>2]>=u[gd+20>>2]^1)){break b}id=0;if(u[fd+24>>2]>=u[gd+24>>2]){break a}}jd=x(jd-x(.05000000074505806));u[gd+4>>2]=jd;kd=x(kd-x(.05000000074505806));u[gd>>2]=kd;md=x(u[gd+8>>2]-x(.05000000074505806));u[gd+8>>2]=md;nd=x(u[gd+16>>2]+x(.05000000074505806));u[gd+16>>2]=nd;od=x(u[gd+20>>2]+x(.05000000074505806));u[gd+20>>2]=od;pd=x(u[gd+24>>2]+x(.05000000074505806));u[gd+24>>2]=pd;qd=u[hd>>2];id=qd>x(0);u[(id<<4)+gd>>2]=(id?nd:kd)+qd;kd=u[hd+4>>2];id=kd>x(0);u[(id?20:4)+gd>>2]=(id?od:jd)+kd;jd=u[hd+8>>2];hd=jd>x(0);u[(hd?24:8)+gd>>2]=(hd?pd:md)+jd;hd=Sc(Ba,fd);c:{if(!hd){hd=0;break c}ld=q[Ba+8>>2];if((ld|0)>=0){if(!ld){break c}while(1){id=q[hd+32>>2];if(!id){break c}hd=id;rd=rd+1|0;if((rd|0)!=(ld|0)){continue}break}break c}hd=q[Ba>>2];}id=q[gd+4>>2];q[fd>>2]=q[gd>>2];q[fd+4>>2]=id;id=q[gd+28>>2];q[fd+24>>2]=q[gd+24>>2];q[fd+28>>2]=id;id=q[gd+20>>2];q[fd+16>>2]=q[gd+16>>2];q[fd+20>>2]=id;id=q[gd+12>>2];q[fd+8>>2]=q[gd+8>>2];q[fd+12>>2]=id;Rc(Ba,hd,fd);id=1;}return id}function aw(Ba,fd){var gd=0;gd=P-16|0;q[gd+12>>2]=Ba;q[gd+8>>2]=fd;fd=q[gd+12>>2];Ba=q[gd+8>>2];gd=q[Ba+4>>2];q[fd+680>>2]=q[Ba>>2];q[fd+684>>2]=gd;gd=q[Ba+12>>2];q[fd+688>>2]=q[Ba+8>>2];q[fd+692>>2]=gd;}function bw(Ba,fd,hd){Ba=Ba|0;fd=fd|0;hd=hd|0;var sd=0,td=0,ud=0,vd=0,wd=0,xd=0;q[fd+16>>2]=q[Ba+20>>2];q[fd+20>>2]=q[Ba+24>>2];q[fd+24>>2]=q[Ba+28>>2];q[fd+28>>2]=q[Ba+32>>2];q[fd>>2]=q[Ba+4>>2];q[fd+4>>2]=q[Ba+8>>2];q[fd+8>>2]=q[Ba+12>>2];q[fd+12>>2]=q[Ba+16>>2];q[fd+32>>2]=q[Ba+36>>2];q[fd+36>>2]=q[Ba+40>>2];q[fd+40>>2]=q[Ba+44>>2];q[fd+44>>2]=q[Ba+48>>2];q[fd+48>>2]=q[Ba+56>>2];q[fd+52>>2]=r[Ba+60|0];sd=q[Ba+88>>2];q[fd+56>>2]=sd;a:{if(!sd){q[fd+64>>2]=0;break a}sd=n[q[q[hd>>2]+28>>2]](hd,q[Ba+96>>2])|0;q[fd+64>>2]=sd;if(!sd){break a}vd=q[Ba+88>>2];wd=n[q[q[hd>>2]+16>>2]](hd,48,vd)|0;td=q[Ba+96>>2];if((vd|0)>=1){sd=q[wd+8>>2];while(1){td=(ud<<6)+td|0;q[sd+16>>2]=q[td+16>>2];q[sd+20>>2]=q[td+20>>2];q[sd+24>>2]=q[td+24>>2];q[sd+28>>2]=q[td+28>>2];q[sd>>2]=q[td>>2];q[sd+4>>2]=q[td+4>>2];q[sd+8>>2]=q[td+8>>2];q[sd+12>>2]=q[td+12>>2];q[sd+32>>2]=q[td+32>>2];q[sd+36>>2]=q[td+36>>2];td=q[td+40>>2];q[sd+44>>2]=0;q[sd+40>>2]=td;sd=sd+48|0;td=q[Ba+96>>2];ud=ud+1|0;if((vd|0)!=(ud|0)){continue}break}}n[q[q[hd>>2]+20>>2]](hd,wd,16972,1497453121,td);}sd=q[Ba+128>>2];q[fd+60>>2]=sd;b:{if(!sd){q[fd+68>>2]=0;break b}sd=n[q[q[hd>>2]+28>>2]](hd,q[Ba+136>>2])|0;q[fd+68>>2]=sd;if(!sd){break b}vd=q[Ba+128>>2];wd=n[q[q[hd>>2]+16>>2]](hd,16,vd)|0;xd=q[Ba+136>>2];if((vd|0)>=1){sd=q[wd+8>>2];ud=0;while(1){td=(ud<<4)+xd|0;q[sd+12>>2]=q[td+12>>2];p[sd+6>>1]=s[td+6>>1];p[sd+8>>1]=s[td+8>>1];p[sd+10>>1]=s[td+10>>1];p[sd>>1]=s[td>>1];p[sd+2>>1]=s[td+2>>1];p[sd+4>>1]=s[td+4>>1];sd=sd+16|0;ud=ud+1|0;if((vd|0)!=(ud|0)){continue}break}}n[q[q[hd>>2]+20>>2]](hd,wd,16995,1497453121,xd);}q[fd+76>>2]=q[Ba+144>>2];sd=q[Ba+152>>2];q[fd+80>>2]=sd;if(!sd){q[fd+72>>2]=0;return 17039}sd=fd;fd=n[q[q[hd>>2]+28>>2]](hd,q[Ba+160>>2])|0;q[sd+72>>2]=fd;if(fd){td=q[Ba+152>>2];ud=n[q[q[hd>>2]+16>>2]](hd,20,td)|0;vd=q[Ba+160>>2];if((td|0)>=1){sd=q[ud+8>>2];Ba=0;while(1){fd=vd+(Ba<<5)|0;p[sd+14>>1]=s[fd+6>>1];p[sd+16>>1]=s[fd+8>>1];p[sd+18>>1]=s[fd+10>>1];p[sd+8>>1]=s[fd>>1];p[sd+10>>1]=s[fd+2>>1];p[sd+12>>1]=s[fd+4>>1];q[sd>>2]=q[fd+12>>2];q[sd+4>>2]=q[fd+16>>2];sd=sd+20|0;Ba=Ba+1|0;if((td|0)!=(Ba|0)){continue}break}}n[q[q[hd>>2]+20>>2]](hd,ud,17018,1497453121,vd);}return 17039}function cw(Ba,fd){Ba=Ba|0;fd=fd|0;var hd=0,yd=0,zd=0,Ad=0,Bd=0,Cd=0,Dd=0,Ed=0,Fd=0;Ed=P+ -64|0;P=Ed;u[Ba+20>>2]=v[fd+32>>3];u[Ba+24>>2]=v[fd+40>>3];u[Ba+28>>2]=v[fd+48>>3];u[Ba+32>>2]=v[fd+56>>3];u[Ba+4>>2]=v[fd>>3];u[Ba+8>>2]=v[fd+8>>3];u[Ba+12>>2]=v[fd+16>>3];u[Ba+16>>2]=v[fd+24>>3];u[Ba+36>>2]=v[fd+64>>3];u[Ba+40>>2]=v[fd+72>>3];u[Ba+44>>2]=v[fd+80>>3];u[Ba+48>>2]=v[fd+88>>3];q[Ba+56>>2]=q[fd+96>>2];o[Ba+60|0]=q[fd+100>>2]!=0;Dd=q[fd+104>>2];yd=Ed;q[yd+56>>2]=0;q[yd+60>>2]=0;q[yd+48>>2]=0;q[yd+52>>2]=0;q[yd+40>>2]=0;q[yd+44>>2]=0;q[yd+32>>2]=0;q[yd+36>>2]=0;q[yd+24>>2]=0;q[yd+28>>2]=0;q[yd+16>>2]=0;q[yd+20>>2]=0;q[yd+8>>2]=0;q[yd+12>>2]=0;q[yd>>2]=0;q[yd+4>>2]=0;Cd=q[Ba+88>>2];if((Cd|0)<(Dd|0)){if(q[Ba+92>>2]<(Dd|0)){if(Dd){q[6657]=q[6657]+1;Fd=n[q[5255]](Dd<<6,16)|0;yd=q[Ba+88>>2];}else {yd=Cd;}if((yd|0)>=1){while(1){hd=zd<<6;Bd=hd+Fd|0;Ad=hd+q[Ba+96>>2]|0;hd=q[Ad+4>>2];q[Bd>>2]=q[Ad>>2];q[Bd+4>>2]=hd;hd=q[Ad+60>>2];q[Bd+56>>2]=q[Ad+56>>2];q[Bd+60>>2]=hd;hd=q[Ad+52>>2];q[Bd+48>>2]=q[Ad+48>>2];q[Bd+52>>2]=hd;hd=q[Ad+44>>2];q[Bd+40>>2]=q[Ad+40>>2];q[Bd+44>>2]=hd;hd=q[Ad+36>>2];q[Bd+32>>2]=q[Ad+32>>2];q[Bd+36>>2]=hd;hd=q[Ad+28>>2];q[Bd+24>>2]=q[Ad+24>>2];q[Bd+28>>2]=hd;hd=q[Ad+20>>2];q[Bd+16>>2]=q[Ad+16>>2];q[Bd+20>>2]=hd;hd=q[Ad+12>>2];q[Bd+8>>2]=q[Ad+8>>2];q[Bd+12>>2]=hd;zd=zd+1|0;if((yd|0)!=(zd|0)){continue}break}}yd=q[Ba+96>>2];if(yd){if(r[Ba+100|0]){if(yd){q[6658]=q[6658]+1;n[q[5256]](yd);}}q[Ba+96>>2]=0;}q[Ba+96>>2]=Fd;q[Ba+92>>2]=Dd;o[Ba+100|0]=1;}while(1){yd=Ed;zd=q[yd+4>>2];hd=q[Ba+96>>2]+(Cd<<6)|0;q[hd>>2]=q[yd>>2];q[hd+4>>2]=zd;zd=q[yd+60>>2];q[hd+56>>2]=q[yd+56>>2];q[hd+60>>2]=zd;zd=q[yd+52>>2];q[hd+48>>2]=q[yd+48>>2];q[hd+52>>2]=zd;zd=q[yd+44>>2];q[hd+40>>2]=q[yd+40>>2];q[hd+44>>2]=zd;zd=q[yd+36>>2];q[hd+32>>2]=q[yd+32>>2];q[hd+36>>2]=zd;zd=q[yd+28>>2];q[hd+24>>2]=q[yd+24>>2];q[hd+28>>2]=zd;zd=q[yd+20>>2];q[hd+16>>2]=q[yd+16>>2];q[hd+20>>2]=zd;zd=q[yd+12>>2];q[hd+8>>2]=q[yd+8>>2];q[hd+12>>2]=zd;Cd=Cd+1|0;if((Dd|0)!=(Cd|0)){continue}break}}q[Ba+88>>2]=Dd;if((Dd|0)>=1){yd=q[Ba+96>>2];zd=q[fd+112>>2];Cd=0;while(1){hd=yd+(Cd<<6)|0;u[hd+16>>2]=v[zd+32>>3];u[hd+20>>2]=v[zd+40>>3];u[hd+24>>2]=v[zd+48>>3];u[hd+28>>2]=v[zd+56>>3];u[hd>>2]=v[zd>>3];u[hd+4>>2]=v[zd+8>>3];u[hd+8>>2]=v[zd+16>>3];u[hd+12>>2]=v[zd+24>>3];q[hd+32>>2]=q[zd+64>>2];q[hd+36>>2]=q[zd+68>>2];q[hd+40>>2]=q[zd+72>>2];zd=zd+80|0;Cd=Cd+1|0;if((Dd|0)!=(Cd|0)){continue}break}}Ad=q[fd+108>>2];q[Ed+8>>2]=0;q[Ed+12>>2]=0;q[Ed>>2]=0;q[Ed+4>>2]=0;zd=q[Ba+128>>2];if((zd|0)<(Ad|0)){if(q[Ba+132>>2]<(Ad|0)){a:{if(!Ad){Fd=0;yd=zd;break a}q[6657]=q[6657]+1;Fd=n[q[5255]](Ad<<4,16)|0;yd=q[Ba+128>>2];}if((yd|0)>=1){Cd=0;while(1){hd=Cd<<4;Dd=hd+Fd|0;Bd=hd+q[Ba+136>>2]|0;hd=q[Bd+4>>2];q[Dd>>2]=q[Bd>>2];q[Dd+4>>2]=hd;hd=q[Bd+12>>2];q[Dd+8>>2]=q[Bd+8>>2];q[Dd+12>>2]=hd;Cd=Cd+1|0;if((yd|0)!=(Cd|0)){continue}break}}yd=q[Ba+136>>2];if(yd){if(r[Ba+140|0]){if(yd){q[6658]=q[6658]+1;n[q[5256]](yd);}}q[Ba+136>>2]=0;}q[Ba+136>>2]=Fd;q[Ba+132>>2]=Ad;o[Ba+140|0]=1;}while(1){yd=q[Ed+4>>2];hd=q[Ba+136>>2]+(zd<<4)|0;q[hd>>2]=q[Ed>>2];q[hd+4>>2]=yd;yd=q[Ed+12>>2];q[hd+8>>2]=q[Ed+8>>2];q[hd+12>>2]=yd;zd=zd+1|0;if((Ad|0)!=(zd|0)){continue}break}}q[Ba+128>>2]=Ad;if((Ad|0)>=1){yd=q[Ba+136>>2];zd=q[fd+116>>2];Cd=0;while(1){hd=yd+(Cd<<4)|0;q[hd+12>>2]=q[zd+12>>2];p[hd+6>>1]=s[zd+6>>1];p[hd+8>>1]=s[zd+8>>1];p[hd+10>>1]=s[zd+10>>1];p[hd>>1]=s[zd>>1];p[hd+2>>1]=s[zd+2>>1];p[hd+4>>1]=s[zd+4>>1];zd=zd+16|0;Cd=Cd+1|0;if((Ad|0)!=(Cd|0)){continue}break}}q[Ba+144>>2]=q[fd+120>>2];Cd=q[Ba+152>>2];Ad=q[fd+124>>2];if((Cd|0)<(Ad|0)){if(q[Ba+156>>2]<(Ad|0)){b:{if(!Ad){Fd=0;yd=Cd;break b}q[6657]=q[6657]+1;Fd=n[q[5255]](Ad<<5,16)|0;yd=q[Ba+152>>2];}if((yd|0)>=1){zd=0;while(1){hd=zd<<5;Dd=hd+Fd|0;Bd=hd+q[Ba+160>>2]|0;hd=q[Bd+4>>2];q[Dd>>2]=q[Bd>>2];q[Dd+4>>2]=hd;hd=q[Bd+28>>2];q[Dd+24>>2]=q[Bd+24>>2];q[Dd+28>>2]=hd;hd=q[Bd+20>>2];q[Dd+16>>2]=q[Bd+16>>2];q[Dd+20>>2]=hd;hd=q[Bd+12>>2];q[Dd+8>>2]=q[Bd+8>>2];q[Dd+12>>2]=hd;zd=zd+1|0;if((yd|0)!=(zd|0)){continue}break}}yd=q[Ba+160>>2];if(yd){if(r[Ba+164|0]){if(yd){q[6658]=q[6658]+1;n[q[5256]](yd);}}q[Ba+160>>2]=0;}q[Ba+160>>2]=Fd;q[Ba+156>>2]=Ad;o[Ba+164|0]=1;}while(1){yd=q[Ed+4>>2];hd=q[Ba+160>>2]+(Cd<<5)|0;q[hd>>2]=q[Ed>>2];q[hd+4>>2]=yd;yd=q[Ed+28>>2];q[hd+24>>2]=q[Ed+24>>2];q[hd+28>>2]=yd;yd=q[Ed+20>>2];q[hd+16>>2]=q[Ed+16>>2];q[hd+20>>2]=yd;yd=q[Ed+12>>2];q[hd+8>>2]=q[Ed+8>>2];q[hd+12>>2]=yd;Cd=Cd+1|0;if((Ad|0)!=(Cd|0)){continue}break}}q[Ba+152>>2]=Ad;if((Ad|0)>=1){yd=q[Ba+160>>2];zd=q[fd+128>>2];Ba=0;while(1){fd=yd+(Ba<<5)|0;p[fd+6>>1]=s[zd+14>>1];p[fd+8>>1]=s[zd+16>>1];p[fd+10>>1]=s[zd+18>>1];p[fd>>1]=s[zd+8>>1];p[fd+2>>1]=s[zd+10>>1];p[fd+4>>1]=s[zd+12>>1];q[fd+12>>2]=q[zd>>2];q[fd+16>>2]=q[zd+4>>2];zd=zd+20|0;Ba=Ba+1|0;if((Ad|0)!=(Ba|0)){continue}break}}P=Ed- -64|0;}function dw(Ba,fd){Ba=Ba|0;fd=fd|0;var Gd=0,Hd=0,Id=0,Jd=0,Kd=0,Ld=0,Md=0,Nd=0,Od=0;Nd=P+ -64|0;P=Nd;q[Ba+20>>2]=q[fd+16>>2];q[Ba+24>>2]=q[fd+20>>2];q[Ba+28>>2]=q[fd+24>>2];q[Ba+32>>2]=q[fd+28>>2];q[Ba+4>>2]=q[fd>>2];q[Ba+8>>2]=q[fd+4>>2];q[Ba+12>>2]=q[fd+8>>2];q[Ba+16>>2]=q[fd+12>>2];q[Ba+36>>2]=q[fd+32>>2];q[Ba+40>>2]=q[fd+36>>2];q[Ba+44>>2]=q[fd+40>>2];q[Ba+48>>2]=q[fd+44>>2];q[Ba+56>>2]=q[fd+48>>2];o[Ba+60|0]=q[fd+52>>2]!=0;Md=q[fd+56>>2];Hd=Nd;q[Hd+56>>2]=0;q[Hd+60>>2]=0;q[Hd+48>>2]=0;q[Hd+52>>2]=0;q[Hd+40>>2]=0;q[Hd+44>>2]=0;q[Hd+32>>2]=0;q[Hd+36>>2]=0;q[Hd+24>>2]=0;q[Hd+28>>2]=0;q[Hd+16>>2]=0;q[Hd+20>>2]=0;q[Hd+8>>2]=0;q[Hd+12>>2]=0;q[Hd>>2]=0;q[Hd+4>>2]=0;Ld=q[Ba+88>>2];if((Ld|0)<(Md|0)){if(q[Ba+92>>2]<(Md|0)){if(Md){q[6657]=q[6657]+1;Od=n[q[5255]](Md<<6,16)|0;Hd=q[Ba+88>>2];}else {Hd=Ld;}if((Hd|0)>=1){while(1){Gd=Id<<6;Kd=Gd+Od|0;Jd=Gd+q[Ba+96>>2]|0;Gd=q[Jd+4>>2];q[Kd>>2]=q[Jd>>2];q[Kd+4>>2]=Gd;Gd=q[Jd+60>>2];q[Kd+56>>2]=q[Jd+56>>2];q[Kd+60>>2]=Gd;Gd=q[Jd+52>>2];q[Kd+48>>2]=q[Jd+48>>2];q[Kd+52>>2]=Gd;Gd=q[Jd+44>>2];q[Kd+40>>2]=q[Jd+40>>2];q[Kd+44>>2]=Gd;Gd=q[Jd+36>>2];q[Kd+32>>2]=q[Jd+32>>2];q[Kd+36>>2]=Gd;Gd=q[Jd+28>>2];q[Kd+24>>2]=q[Jd+24>>2];q[Kd+28>>2]=Gd;Gd=q[Jd+20>>2];q[Kd+16>>2]=q[Jd+16>>2];q[Kd+20>>2]=Gd;Gd=q[Jd+12>>2];q[Kd+8>>2]=q[Jd+8>>2];q[Kd+12>>2]=Gd;Id=Id+1|0;if((Hd|0)!=(Id|0)){continue}break}}Hd=q[Ba+96>>2];if(Hd){if(r[Ba+100|0]){if(Hd){q[6658]=q[6658]+1;n[q[5256]](Hd);}}q[Ba+96>>2]=0;}q[Ba+96>>2]=Od;q[Ba+92>>2]=Md;o[Ba+100|0]=1;}while(1){Hd=Nd;Id=q[Hd+4>>2];Gd=q[Ba+96>>2]+(Ld<<6)|0;q[Gd>>2]=q[Hd>>2];q[Gd+4>>2]=Id;Id=q[Hd+60>>2];q[Gd+56>>2]=q[Hd+56>>2];q[Gd+60>>2]=Id;Id=q[Hd+52>>2];q[Gd+48>>2]=q[Hd+48>>2];q[Gd+52>>2]=Id;Id=q[Hd+44>>2];q[Gd+40>>2]=q[Hd+40>>2];q[Gd+44>>2]=Id;Id=q[Hd+36>>2];q[Gd+32>>2]=q[Hd+32>>2];q[Gd+36>>2]=Id;Id=q[Hd+28>>2];q[Gd+24>>2]=q[Hd+24>>2];q[Gd+28>>2]=Id;Id=q[Hd+20>>2];q[Gd+16>>2]=q[Hd+16>>2];q[Gd+20>>2]=Id;Id=q[Hd+12>>2];q[Gd+8>>2]=q[Hd+8>>2];q[Gd+12>>2]=Id;Ld=Ld+1|0;if((Md|0)!=(Ld|0)){continue}break}}q[Ba+88>>2]=Md;if((Md|0)>=1){Hd=q[Ba+96>>2];Id=q[fd+64>>2];Ld=0;while(1){Gd=Hd+(Ld<<6)|0;q[Gd+16>>2]=q[Id+16>>2];q[Gd+20>>2]=q[Id+20>>2];q[Gd+24>>2]=q[Id+24>>2];q[Gd+28>>2]=q[Id+28>>2];q[Gd>>2]=q[Id>>2];q[Gd+4>>2]=q[Id+4>>2];q[Gd+8>>2]=q[Id+8>>2];q[Gd+12>>2]=q[Id+12>>2];q[Gd+32>>2]=q[Id+32>>2];q[Gd+36>>2]=q[Id+36>>2];q[Gd+40>>2]=q[Id+40>>2];Id=Id+48|0;Ld=Ld+1|0;if((Md|0)!=(Ld|0)){continue}break}}Jd=q[fd+60>>2];q[Nd+8>>2]=0;q[Nd+12>>2]=0;q[Nd>>2]=0;q[Nd+4>>2]=0;Id=q[Ba+128>>2];if((Id|0)<(Jd|0)){if(q[Ba+132>>2]<(Jd|0)){a:{if(!Jd){Od=0;Hd=Id;break a}q[6657]=q[6657]+1;Od=n[q[5255]](Jd<<4,16)|0;Hd=q[Ba+128>>2];}if((Hd|0)>=1){Ld=0;while(1){Gd=Ld<<4;Md=Gd+Od|0;Kd=Gd+q[Ba+136>>2]|0;Gd=q[Kd+4>>2];q[Md>>2]=q[Kd>>2];q[Md+4>>2]=Gd;Gd=q[Kd+12>>2];q[Md+8>>2]=q[Kd+8>>2];q[Md+12>>2]=Gd;Ld=Ld+1|0;if((Hd|0)!=(Ld|0)){continue}break}}Hd=q[Ba+136>>2];if(Hd){if(r[Ba+140|0]){if(Hd){q[6658]=q[6658]+1;n[q[5256]](Hd);}}q[Ba+136>>2]=0;}q[Ba+136>>2]=Od;q[Ba+132>>2]=Jd;o[Ba+140|0]=1;}while(1){Hd=q[Nd+4>>2];Gd=q[Ba+136>>2]+(Id<<4)|0;q[Gd>>2]=q[Nd>>2];q[Gd+4>>2]=Hd;Hd=q[Nd+12>>2];q[Gd+8>>2]=q[Nd+8>>2];q[Gd+12>>2]=Hd;Id=Id+1|0;if((Jd|0)!=(Id|0)){continue}break}}q[Ba+128>>2]=Jd;if((Jd|0)>=1){Hd=q[Ba+136>>2];Id=q[fd+68>>2];Ld=0;while(1){Gd=Hd+(Ld<<4)|0;q[Gd+12>>2]=q[Id+12>>2];p[Gd+6>>1]=s[Id+6>>1];p[Gd+8>>1]=s[Id+8>>1];p[Gd+10>>1]=s[Id+10>>1];p[Gd>>1]=s[Id>>1];p[Gd+2>>1]=s[Id+2>>1];p[Gd+4>>1]=s[Id+4>>1];Id=Id+16|0;Ld=Ld+1|0;if((Jd|0)!=(Ld|0)){continue}break}}q[Ba+144>>2]=q[fd+76>>2];Ld=q[Ba+152>>2];Jd=q[fd+80>>2];if((Ld|0)<(Jd|0)){if(q[Ba+156>>2]<(Jd|0)){b:{if(!Jd){Od=0;Hd=Ld;break b}q[6657]=q[6657]+1;Od=n[q[5255]](Jd<<5,16)|0;Hd=q[Ba+152>>2];}if((Hd|0)>=1){Id=0;while(1){Gd=Id<<5;Md=Gd+Od|0;Kd=Gd+q[Ba+160>>2]|0;Gd=q[Kd+4>>2];q[Md>>2]=q[Kd>>2];q[Md+4>>2]=Gd;Gd=q[Kd+28>>2];q[Md+24>>2]=q[Kd+24>>2];q[Md+28>>2]=Gd;Gd=q[Kd+20>>2];q[Md+16>>2]=q[Kd+16>>2];q[Md+20>>2]=Gd;Gd=q[Kd+12>>2];q[Md+8>>2]=q[Kd+8>>2];q[Md+12>>2]=Gd;Id=Id+1|0;if((Hd|0)!=(Id|0)){continue}break}}Hd=q[Ba+160>>2];if(Hd){if(r[Ba+164|0]){if(Hd){q[6658]=q[6658]+1;n[q[5256]](Hd);}}q[Ba+160>>2]=0;}q[Ba+160>>2]=Od;q[Ba+156>>2]=Jd;o[Ba+164|0]=1;}while(1){Hd=q[Nd+4>>2];Gd=q[Ba+160>>2]+(Ld<<5)|0;q[Gd>>2]=q[Nd>>2];q[Gd+4>>2]=Hd;Hd=q[Nd+28>>2];q[Gd+24>>2]=q[Nd+24>>2];q[Gd+28>>2]=Hd;Hd=q[Nd+20>>2];q[Gd+16>>2]=q[Nd+16>>2];q[Gd+20>>2]=Hd;Hd=q[Nd+12>>2];q[Gd+8>>2]=q[Nd+8>>2];q[Gd+12>>2]=Hd;Ld=Ld+1|0;if((Jd|0)!=(Ld|0)){continue}break}}q[Ba+152>>2]=Jd;if((Jd|0)>=1){Hd=q[Ba+160>>2];Id=q[fd+72>>2];Ba=0;while(1){fd=Hd+(Ba<<5)|0;p[fd+6>>1]=s[Id+14>>1];p[fd+8>>1]=s[Id+16>>1];p[fd+10>>1]=s[Id+18>>1];p[fd>>1]=s[Id+8>>1];p[fd+2>>1]=s[Id+10>>1];p[fd+4>>1]=s[Id+12>>1];q[fd+12>>2]=q[Id>>2];q[fd+16>>2]=q[Id+4>>2];Id=Id+20|0;Ba=Ba+1|0;if((Jd|0)!=(Ba|0)){continue}break}}P=Nd- -64|0;}function ew(Ba,fd,Pd,Qd,Rd,Sd){if(r[Ba+60|0]){Eh(Ba,fd,Pd,Qd,Rd,Sd,q[Ba+56>>2]);return}Fh(Ba,fd,Pd,Qd,Rd,Sd);}function fw(Ba,fd,Pd,Qd){var Rd=0;Rd=P-32|0;P=Rd;q[Rd+24>>2]=0;q[Rd+28>>2]=0;q[Rd+16>>2]=0;q[Rd+20>>2]=0;q[Rd+8>>2]=0;q[Rd+12>>2]=0;q[Rd>>2]=0;q[Rd+4>>2]=0;a:{if(r[Ba+60|0]){Eh(Ba,fd,Pd,Qd,Rd+16|0,Rd,q[Ba+56>>2]);break a}Fh(Ba,fd,Pd,Qd,Rd+16|0,Rd);}P=Rd+32|0;}function gw(Ba,fd,Pd,Qd){var Sd=0,Td=0,Ud=0,Vd=0,Wd=0;if(q[Ba+56>>2]>=1){Sd=q[Ba+96>>2];while(1){Td=0;a:{if(u[Pd>>2]>u[Sd+16>>2]){break a}Td=0;if(u[Qd>>2]<u[Sd>>2]){break a}Td=1;}Ud=0;Ud=u[Qd+8>>2]<u[Sd+8>>2]|u[Pd+8>>2]>u[Sd+24>>2]?Ud:Td;b:{c:{d:{if(!(u[Qd+4>>2]<u[Sd+4>>2]^1?!(u[Pd+4>>2]>u[Sd+20>>2]):0)){Td=q[Sd+32>>2]==-1;Ud=0;break d}Td=q[Sd+32>>2]==-1;if((Ud&Td)!=1){break d}n[q[q[fd>>2]+8>>2]](fd,q[Sd+36>>2],q[Sd+40>>2]);break c}if(Td|Ud){break c}Td=q[Sd+32>>2];Vd=Td+Vd|0;Sd=(Td<<6)+Sd|0;break b}Vd=Vd+1|0;Sd=Sd- -64|0;}Wd=Wd+1|0;if((Vd|0)<q[Ba+56>>2]){continue}break}}if(q[6077]<(Wd|0)){q[6077]=Wd;}}function hw(Ba,fd,Pd,Qd){var Xd=0,Yd=0,Zd=0,_d=0,$d=0,ae=0,be=0,ce=0,de=0,ee=0,fe=0;if(q[Ba+152>>2]>=1){while(1){ce=s[Pd>>1];Yd=q[Ba+160>>2]+(de<<5)|0;a:{if(ce>>>0>s[Yd+6>>1]){break a}ee=s[Qd>>1];if(ee>>>0<s[Yd>>1]){break a}fe=s[Pd+4>>1];if(fe>>>0>s[Yd+10>>1]){break a}ae=s[Qd+4>>1];if(ae>>>0<s[Yd+4>>1]){break a}_d=s[Pd+2>>1];if(_d>>>0>s[Yd+8>>1]){break a}Zd=s[Qd+2>>1];if(Zd>>>0<s[Yd+2>>1]){break a}b:{Xd=q[Yd+16>>2];if((Xd|0)<1){be=0;break b}$d=q[Yd+12>>2];Yd=Xd+$d|0;Xd=q[Ba+136>>2]+($d<<4)|0;be=0;while(1){ae=ce>>>0<=s[Xd+6>>1]&ee>>>0>=s[Xd>>1]&fe>>>0<=s[Xd+10>>1]&ae>>>0>=s[Xd+4>>1]&_d>>>0<=s[Xd+8>>1]&Zd>>>0>=s[Xd+2>>1];_d=q[Xd+12>>2];Zd=(_d|0)<0;if(!(Zd|!ae)){n[q[q[fd>>2]+8>>2]](fd,_d>>>21,_d&2097151);}c:{if(!(Zd&(ae^-1))){$d=$d+1|0;Xd=Xd+16|0;break c}Zd=q[Xd+12>>2];$d=$d-Zd|0;Xd=Xd-(Zd<<4)|0;}be=be+1|0;if(($d|0)>=(Yd|0)){break b}Zd=s[Qd+2>>1];_d=s[Pd+2>>1];ae=s[Qd+4>>1];fe=s[Pd+4>>1];ee=s[Qd>>1];ce=s[Pd>>1];continue}}if(q[6077]>=(be|0)){break a}q[6077]=be;}de=de+1|0;if((de|0)<q[Ba+152>>2]){continue}break}}}function iw(Ba,fd,Pd,Qd){var ge=x(0),he=x(0),ie=0,je=x(0),ke=0,le=x(0),me=x(0),ne=x(0),oe=x(0),pe=x(0),qe=0,re=x(0),se=x(0),te=x(0),ue=0,ve=0,we=0,xe=0,ye=0,ze=0,Ae=0,Be=0;ke=P-16|0;P=ke;a:{if(r[Ba+60|0]){le=u[Ba+28>>2];je=u[Ba+12>>2];ge=u[Pd+8>>2];ge=ge<je?je:ge;re=u[Ba+44>>2];ge=x(x((le<ge?le:ge)-je)*re);b:{if(ge<x(4294967296)&ge>=x(0)){ie=~~ge>>>0;break b}ie=0;}se=u[Ba+40>>2];oe=u[Ba+24>>2];ge=u[Ba+8>>2];te=u[Ba+36>>2];pe=u[Ba+20>>2];ne=u[Ba+4>>2];he=u[Pd>>2];me=u[Pd+4>>2];ue=ie&65534;p[ke+14>>1]=ue;Pd=ke;me=me<ge?ge:me;me=x(se*x((oe<me?oe:me)-ge));c:{if(me<x(4294967296)&me>=x(0)){ie=~~me>>>0;break c}ie=0;}ve=ie&65534;p[Pd+12>>1]=ve;Pd=ke;he=he<ne?ne:he;he=x(x((pe<he?pe:he)-ne)*te);d:{if(he<x(4294967296)&he>=x(0)){ie=~~he>>>0;break d}ie=0;}we=ie&65534;p[Pd+10>>1]=we;he=u[Qd+8>>2];he=he<je?je:he;je=x(x(re*x((le<he?le:he)-je))+x(1));e:{if(je<x(4294967296)&je>=x(0)){Pd=~~je>>>0;break e}Pd=0;}je=u[Qd>>2];le=u[Qd+4>>2];xe=Pd|1;p[ke+8>>1]=xe;Pd=ke;le=le<ge?ge:le;ge=x(x(se*x((oe<le?oe:le)-ge))+x(1));f:{if(ge<x(4294967296)&ge>=x(0)){Qd=~~ge>>>0;break f}Qd=0;}ye=Qd|1;p[Pd+6>>1]=ye;Pd=ke;ge=je<ne?ne:je;ge=x(x(te*x((pe<ge?pe:ge)-ne))+x(1));g:{if(ge<x(4294967296)&ge>=x(0)){Qd=~~ge>>>0;break g}Qd=0;}ze=Qd|1;p[Pd+4>>1]=ze;Pd=q[Ba+144>>2];if(Pd>>>0>2){break a}h:{switch(Pd-1|0){default:Qd=0;Ae=q[Ba+56>>2];if((Ae|0)>=1){Ba=q[Ba+136>>2];Pd=0;while(1){qe=q[Ba+12>>2];Be=(qe|0)<0;ie=we>>>0<=s[Ba+6>>1]&ze>>>0>=s[Ba>>1]&ue>>>0<=s[Ba+10>>1]&xe>>>0>=s[Ba+4>>1]&ve>>>0<=s[Ba+8>>1]&ye>>>0>=s[Ba+2>>1];if(!(Be|!ie)){n[q[q[fd>>2]+8>>2]](fd,qe>>>21,qe&2097151);}i:{if(!((ie^-1)&Be)){Pd=Pd+1|0;Ba=Ba+16|0;break i}ie=q[Ba+12>>2];Pd=Pd-ie|0;Ba=Ba-(ie<<4)|0;}Qd=Qd+1|0;if((Pd|0)<(Ae|0)){continue}break}}if(q[6077]>=(Qd|0)){break a}q[6077]=Qd;break a;case 0:hw(Ba,fd,ke+10|0,ke+4|0);break a;case 1:break h}}Gh(Ba,q[Ba+136>>2],fd,ke+10|0,ke+4|0);break a}gw(Ba,fd,Pd,Qd);}P=ke+16|0;}function jw(Ba){Ba=Ba|0;Ba=Uc(Ba);if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}function kw(Ba,fd,Pd,Qd,Ce){Ba=Ba|0;fd=fd|0;Pd=Pd|0;Qd=Qd|0;Ce=Ce|0;var De=0;De=P-32|0;P=De;q[De+28>>2]=Ba;q[De+24>>2]=fd;q[De+20>>2]=Pd;q[De+16>>2]=Qd;o[De+15|0]=Ce;Ba=Z(1312);Hf(Ba,q[De+28>>2],q[De+24>>2],q[De+20>>2],q[De+16>>2],o[De+15|0]&1);P=De+32|0;return Ba|0}function lw(Ba,fd,Pd){var Qd=x(0),Ce=x(0),Ee=x(0),Fe=x(0),Ge=x(0),He=x(0),Ie=x(0),Je=x(0),Ke=x(0),Le=x(0),Me=x(0),Ne=x(0),Oe=x(0),Pe=x(0);Ee=u[fd>>2];Fe=u[fd+4>>2];Ge=u[fd+8>>2];q[Ba+16>>2]=0;He=x(Ge-x(1));u[Ba+12>>2]=He;Fe=x(Fe-x(1));u[Ba+8>>2]=Fe;Ge=x(Ee-x(1));u[Ba+4>>2]=Ge;Ce=u[Pd>>2];Qd=u[Pd+4>>2];Ee=u[Pd+8>>2];o[Ba+60|0]=1;q[Ba+48>>2]=0;q[Ba+32>>2]=0;Me=x(Ee+x(1));u[Ba+28>>2]=Me;Ne=x(Qd+x(1));u[Ba+24>>2]=Ne;Ee=x(Ce+x(1));u[Ba+20>>2]=Ee;Ke=x(x(65533)/x(Me-He));u[Ba+44>>2]=Ke;Je=x(x(65533)/x(Ne-Fe));u[Ba+40>>2]=Je;Ie=x(x(65533)/x(Ee-Ge));u[Ba+36>>2]=Ie;Qd=x(x(He-He)*Ke);a:{if(Qd<x(4294967296)&Qd>=x(0)){fd=~~Qd>>>0;break a}fd=0;}Le=x((fd&65534)>>>0);Qd=Fe;Oe=Qd;Ce=x(x(Qd-Qd)*Je);b:{if(Ce<x(4294967296)&Ce>=x(0)){fd=~~Ce>>>0;break b}fd=0;}Ce=x(Oe+x(x((fd&65534)>>>0)/Je));Qd=Ge;Oe=Qd;Je=x(x(Qd-Qd)*Ie);c:{if(Je<x(4294967296)&Je>=x(0)){fd=~~Je>>>0;break c}fd=0;}Qd=x(x(Oe+x(x((fd&65534)>>>0)/Ie))-x(1));if(!!(Qd<Ge)){u[Ba+4>>2]=Qd;Ge=Qd;}Qd=x(Ce-x(1));if(!!(Qd<Fe)){u[Ba+8>>2]=Qd;Fe=Qd;}Qd=x(x(He+x(Le/Ke))-x(1));if(!!(Qd<He)){u[Ba+12>>2]=Qd;He=Qd;}q[Ba+48>>2]=0;Qd=x(Me-He);Pe=x(x(65533)/Qd);u[Ba+44>>2]=Pe;Ce=x(Ne-Fe);Le=x(x(65533)/Ce);u[Ba+40>>2]=Le;Ie=x(Ee-Ge);Ke=x(x(65533)/Ie);u[Ba+36>>2]=Ke;Qd=x(x(Pe*Qd)+x(1));d:{if(Qd<x(4294967296)&Qd>=x(0)){fd=~~Qd>>>0;break d}fd=0;}Je=x((fd|1)>>>0);Qd=Fe;Ce=x(x(Le*Ce)+x(1));e:{if(Ce<x(4294967296)&Ce>=x(0)){fd=~~Ce>>>0;break e}fd=0;}Le=x(Qd+x(x((fd|1)>>>0)/Le));Oe=Ee;Qd=Ge;Ie=x(x(Ke*Ie)+x(1));f:{if(Ie<x(4294967296)&Ie>=x(0)){fd=~~Ie>>>0;break f}fd=0;}Qd=x(x(Qd+x(x((fd|1)>>>0)/Ke))+x(1));if(!!(Oe<Qd)){u[Ba+20>>2]=Qd;Ee=Qd;}Qd=x(Le+x(1));if(!!(Ne<Qd)){u[Ba+24>>2]=Qd;Ne=Qd;}Qd=x(x(He+x(Je/Pe))+x(1));if(!!(Me<Qd)){u[Ba+28>>2]=Qd;Me=Qd;}q[Ba+48>>2]=0;u[Ba+44>>2]=x(65533)/x(Me-He);u[Ba+40>>2]=x(65533)/x(Ne-Fe);u[Ba+36>>2]=x(65533)/x(Ee-Ge);}function mw(Ba,fd,Pd){var Qe=0,Re=0,Se=0,Te=0,Ue=0,Ve=0,We=0,Xe=0,Ye=0,Ze=0,_e=0,$e=0;Ye=P-32|0;P=Ye;Ze=q[Ba+136>>2];Qe=q[(Ze+(Pd<<4)|0)+12>>2];_e=(Qe|0)>-1?1:0-Qe|0;Qe=q[((fd<<4)+Ze|0)+12>>2];$e=(Qe|0)>-1?1:0-Qe|0;if(($e|0)<=128){Se=q[Ba+152>>2];Qe=Se;a:{if((Qe|0)!=q[Ba+156>>2]){break a}Qe=Se;Ve=Qe?Qe<<1:1;if((Qe|0)>=(Ve|0)){break a}b:{if(!Ve){Qe=0;Te=Se;break b}q[6657]=q[6657]+1;Qe=n[q[5255]](Ve<<5,16)|0;Te=q[Ba+152>>2];}if((Te|0)>=1){while(1){Re=We<<5;Ue=Re+Qe|0;Re=Re+q[Ba+160>>2]|0;Xe=q[Re+4>>2];q[Ue>>2]=q[Re>>2];q[Ue+4>>2]=Xe;Xe=q[Re+28>>2];q[Ue+24>>2]=q[Re+24>>2];q[Ue+28>>2]=Xe;Xe=q[Re+20>>2];q[Ue+16>>2]=q[Re+16>>2];q[Ue+20>>2]=Xe;Xe=q[Re+12>>2];q[Ue+8>>2]=q[Re+8>>2];q[Ue+12>>2]=Xe;We=We+1|0;if((Te|0)!=(We|0)){continue}break}}Te=q[Ba+160>>2];if(Te){if(r[Ba+164|0]){if(Te){q[6658]=q[6658]+1;n[q[5256]](Te);}}q[Ba+160>>2]=0;}q[Ba+160>>2]=Qe;q[Ba+156>>2]=Ve;o[Ba+164|0]=1;Qe=q[Ba+152>>2];}q[Ba+152>>2]=Qe+1;Qe=Ye;Re=q[Qe+4>>2];Te=Se<<5;Se=Te+q[Ba+160>>2]|0;q[Se>>2]=q[Qe>>2];q[Se+4>>2]=Re;Re=q[Qe+28>>2];q[Se+24>>2]=q[Qe+24>>2];q[Se+28>>2]=Re;Re=q[Qe+20>>2];q[Se+16>>2]=q[Qe+16>>2];q[Se+20>>2]=Re;Re=q[Qe+12>>2];q[Se+8>>2]=q[Qe+8>>2];q[Se+12>>2]=Re;Qe=Te+q[Ba+160>>2]|0;Se=(fd<<4)+Ze|0;p[Qe>>1]=s[Se>>1];p[Qe+2>>1]=s[Se+2>>1];p[Qe+4>>1]=s[Se+4>>1];p[Qe+6>>1]=s[Se+6>>1];p[Qe+8>>1]=s[Se+8>>1];Se=s[Se+10>>1];q[Qe+16>>2]=$e;q[Qe+12>>2]=fd;p[Qe+10>>1]=Se;}if((_e|0)<=128){Se=q[Ba+152>>2];Qe=Se;c:{if((Qe|0)!=q[Ba+156>>2]){break c}Qe=Se;Ue=Qe?Qe<<1:1;if((Qe|0)>=(Ue|0)){break c}d:{if(!Ue){fd=0;Qe=Se;break d}q[6657]=q[6657]+1;fd=n[q[5255]](Ue<<5,16)|0;Qe=q[Ba+152>>2];}if((Qe|0)>=1){We=0;while(1){Re=We<<5;Te=Re+fd|0;Re=Re+q[Ba+160>>2]|0;Ve=q[Re+4>>2];q[Te>>2]=q[Re>>2];q[Te+4>>2]=Ve;Ve=q[Re+28>>2];q[Te+24>>2]=q[Re+24>>2];q[Te+28>>2]=Ve;Ve=q[Re+20>>2];q[Te+16>>2]=q[Re+16>>2];q[Te+20>>2]=Ve;Ve=q[Re+12>>2];q[Te+8>>2]=q[Re+8>>2];q[Te+12>>2]=Ve;We=We+1|0;if((Qe|0)!=(We|0)){continue}break}}Qe=q[Ba+160>>2];if(Qe){if(r[Ba+164|0]){if(Qe){q[6658]=q[6658]+1;n[q[5256]](Qe);}}q[Ba+160>>2]=0;}q[Ba+160>>2]=fd;q[Ba+156>>2]=Ue;o[Ba+164|0]=1;Qe=q[Ba+152>>2];}q[Ba+152>>2]=Qe+1;fd=Ye;Re=q[fd+4>>2];Se=Se<<5;Qe=Se+q[Ba+160>>2]|0;q[Qe>>2]=q[fd>>2];q[Qe+4>>2]=Re;Te=q[fd+28>>2];q[Qe+24>>2]=q[fd+24>>2];q[Qe+28>>2]=Te;Te=q[fd+20>>2];q[Qe+16>>2]=q[fd+16>>2];q[Qe+20>>2]=Te;Te=q[fd+12>>2];q[Qe+8>>2]=q[fd+8>>2];q[Qe+12>>2]=Te;fd=Se+q[Ba+160>>2]|0;Qe=(Pd<<4)+Ze|0;p[fd>>1]=s[Qe>>1];p[fd+2>>1]=s[Qe+2>>1];p[fd+4>>1]=s[Qe+4>>1];p[fd+6>>1]=s[Qe+6>>1];p[fd+8>>1]=s[Qe+8>>1];Qe=s[Qe+10>>1];q[fd+16>>2]=_e;q[fd+12>>2]=Pd;p[fd+10>>1]=Qe;}q[Ba+168>>2]=q[Ba+152>>2];P=Ye+32|0;}function nw(Ba,fd,Pd,af){var bf=x(0),cf=x(0),df=0,ef=x(0),ff=0,gf=x(0),hf=x(0),jf=0,kf=0,lf=0,mf=0,nf=0,of=0;a:{if(r[Ba+60|0]){hf=u[Ba+12>>2];cf=u[Ba+44>>2];bf=x(x(u[Pd+8>>2]-hf)*cf);b:{if(bf<x(4294967296)&bf>=x(0)){jf=~~bf>>>0;break b}jf=0;}ef=u[Ba+8>>2];bf=u[Ba+40>>2];gf=x(x(u[Pd+4>>2]-ef)*bf);c:{if(gf<x(4294967296)&gf>=x(0)){kf=~~gf>>>0;break c}kf=0;}cf=x(x(cf*x(u[af+8>>2]-hf))+x(1));d:{if(cf<x(4294967296)&cf>=x(0)){lf=~~cf>>>0;break d}lf=0;}bf=x(x(bf*x(u[af+4>>2]-ef))+x(1));e:{if(bf<x(4294967296)&bf>=x(0)){df=~~bf>>>0;break e}df=0;}ff=q[Ba+136>>2];mf=ff+(fd<<4)|0;of=s[mf>>1];ef=u[Ba+4>>2];bf=u[Ba+36>>2];cf=x(x(u[Pd>>2]-ef)*bf);f:{if(cf<x(4294967296)&cf>=x(0)){Ba=~~cf>>>0;break f}Ba=0;}nf=Ba&65534;Pd=of>>>0<=nf>>>0;bf=x(x(bf*x(u[af>>2]-ef))+x(1));g:{if(bf<x(4294967296)&bf>=x(0)){Ba=~~bf>>>0;break g}Ba=0;}if(!Pd){p[mf>>1]=nf;}Pd=ff+(fd<<4)|0;Ba=Ba|1;if(s[Pd+6>>1]<Ba>>>0){p[Pd+6>>1]=Ba;}Ba=kf&65534;if(s[Pd+2>>1]>Ba>>>0){p[Pd+2>>1]=Ba;}af=ff+(fd<<4)|0;Pd=af;Ba=df|1;if(s[Pd+8>>1]<Ba>>>0){p[Pd+8>>1]=Ba;}Ba=jf&65534;if(s[af+4>>1]>Ba>>>0){p[af+4>>1]=Ba;}fd=ff+(fd<<4)|0;Ba=lf|1;if(s[fd+10>>1]>=Ba>>>0){break a}p[fd+10>>1]=Ba;return}bf=u[Pd>>2];df=q[Ba+96>>2];Ba=df+(fd<<6)|0;if(!!(bf<u[Ba>>2])){u[Ba>>2]=bf;}bf=u[Pd+4>>2];if(!!(bf<u[Ba+4>>2])){u[Ba+4>>2]=bf;}bf=u[Pd+8>>2];Ba=df+(fd<<6)|0;if(!!(bf<u[Ba+8>>2])){u[Ba+8>>2]=bf;}bf=u[Pd+12>>2];if(!!(bf<u[Ba+12>>2])){u[Ba+12>>2]=bf;}Ba=df+(fd<<6)|0;bf=u[af>>2];if(!!(u[Ba+16>>2]<bf)){u[Ba+16>>2]=bf;}bf=u[af+4>>2];if(!!(u[Ba+20>>2]<bf)){u[Ba+20>>2]=bf;}fd=df+(fd<<6)|0;Ba=fd;bf=u[af+8>>2];if(!!(u[Ba+24>>2]<bf)){u[Ba+24>>2]=bf;}bf=u[af+12>>2];if(!(u[fd+28>>2]<bf)){break a}u[fd+28>>2]=bf;}}function ow(Ba,fd,Pd,af){var pf=0,qf=0,rf=0,sf=0,tf=0,uf=0,vf=0,wf=x(0),xf=x(0),yf=x(0),zf=x(0),Af=x(0),Bf=x(0),Cf=x(0),Df=x(0),Ef=x(0),Ff=0,Gf=x(0),Hf=x(0),If=x(0),Jf=0;pf=P-96|0;q[pf+24>>2]=0;q[pf+28>>2]=0;q[pf+16>>2]=0;q[pf+20>>2]=0;qf=(Pd|0)<=(fd|0);if(!qf){Ff=r[Ba+60|0];vf=fd;while(1){a:{if(Ff){sf=q[Ba+116>>2]+(vf<<4)|0;Af=u[Ba+44>>2];yf=u[Ba+12>>2];Bf=x(x(x(s[sf+4>>1])/Af)+yf);xf=u[Ba+40>>2];Gf=u[Ba+8>>2];wf=x(x(x(s[sf+2>>1])/xf)+Gf);Hf=u[Ba+36>>2];If=u[Ba+4>>2];zf=x(x(x(s[sf>>1])/Hf)+If);Af=x(x(x(s[sf+10>>1])/Af)+yf);yf=x(x(x(s[sf+8>>1])/xf)+Gf);xf=x(x(x(s[sf+6>>1])/Hf)+If);break a}sf=q[Ba+76>>2]+(vf<<6)|0;Bf=u[sf+8>>2];wf=u[sf+4>>2];zf=u[sf>>2];Af=u[sf+24>>2];yf=u[sf+20>>2];xf=u[sf+16>>2];}Cf=x(x(x(Af+Bf)*x(.5))+Cf);Df=x(x(x(yf+wf)*x(.5))+Df);Ef=x(x(x(xf+zf)*x(.5))+Ef);vf=vf+1|0;if((vf|0)!=(Pd|0)){continue}break}u[pf+24>>2]=Cf;u[pf+20>>2]=Df;u[pf+16>>2]=Ef;}Ff=Pd-fd|0;wf=x(x(1)/x(Ff|0));u[pf+24>>2]=wf*Cf;u[pf+20>>2]=wf*Df;u[pf+16>>2]=wf*Ef;sf=fd;if(!qf){af=af<<2;Af=u[af+(pf+16|0)>>2];Jf=af+pf|0;vf=fd;sf=vf;while(1){qf=r[Ba+60|0];b:{if(qf){af=q[Ba+116>>2]+(vf<<4)|0;wf=u[Ba+44>>2];zf=u[Ba+12>>2];Cf=x(x(x(s[af+4>>1])/wf)+zf);Bf=u[Ba+40>>2];yf=u[Ba+8>>2];Df=x(x(x(s[af+2>>1])/Bf)+yf);xf=u[Ba+36>>2];Gf=u[Ba+4>>2];Ef=x(x(x(s[af>>1])/xf)+Gf);wf=x(x(x(s[af+10>>1])/wf)+zf);zf=x(x(x(s[af+8>>1])/Bf)+yf);xf=x(x(x(s[af+6>>1])/xf)+Gf);break b}af=q[Ba+76>>2]+(vf<<6)|0;Cf=u[af+8>>2];Df=u[af+4>>2];Ef=u[af>>2];wf=u[af+24>>2];zf=u[af+20>>2];xf=u[af+16>>2];}Bf=xf;q[pf+12>>2]=0;u[pf+8>>2]=x(wf+Cf)*x(.5);u[pf+4>>2]=x(zf+Df)*x(.5);u[pf>>2]=x(Bf+Ef)*x(.5);if(!!(u[Jf>>2]>Af)){c:{if(qf){uf=q[Ba+116>>2];qf=uf+(vf<<4)|0;af=qf;rf=af+8|0;tf=q[rf+4>>2];q[pf+40>>2]=q[rf>>2];q[pf+44>>2]=tf;rf=q[af+4>>2];q[pf+32>>2]=q[af>>2];q[pf+36>>2]=rf;qf=uf;uf=sf<<4;qf=qf+uf|0;rf=q[qf+4>>2];q[af>>2]=q[qf>>2];q[af+4>>2]=rf;rf=q[qf+12>>2];q[af+8>>2]=q[qf+8>>2];q[af+12>>2]=rf;af=uf+q[Ba+116>>2]|0;uf=q[pf+36>>2];q[af>>2]=q[pf+32>>2];q[af+4>>2]=uf;qf=q[pf+44>>2];q[af+8>>2]=q[pf+40>>2];q[af+12>>2]=qf;break c}qf=q[Ba+76>>2];af=qf+(vf<<6)|0;uf=af+56|0;rf=q[uf+4>>2];q[pf+88>>2]=q[uf>>2];q[pf+92>>2]=rf;uf=q[af+52>>2];q[pf+80>>2]=q[af+48>>2];q[pf+84>>2]=uf;uf=q[af+44>>2];q[pf+72>>2]=q[af+40>>2];q[pf+76>>2]=uf;tf=q[af+36>>2];uf=pf- -64|0;rf=uf;q[rf>>2]=q[af+32>>2];q[rf+4>>2]=tf;rf=q[af+28>>2];q[pf+56>>2]=q[af+24>>2];q[pf+60>>2]=rf;rf=q[af+20>>2];q[pf+48>>2]=q[af+16>>2];q[pf+52>>2]=rf;rf=q[af+12>>2];q[pf+40>>2]=q[af+8>>2];q[pf+44>>2]=rf;rf=q[af+4>>2];q[pf+32>>2]=q[af>>2];q[pf+36>>2]=rf;rf=sf<<6;qf=qf+rf|0;tf=q[qf+4>>2];q[af>>2]=q[qf>>2];q[af+4>>2]=tf;tf=q[qf+12>>2];q[af+8>>2]=q[qf+8>>2];q[af+12>>2]=tf;tf=q[qf+20>>2];q[af+16>>2]=q[qf+16>>2];q[af+20>>2]=tf;tf=q[qf+28>>2];q[af+24>>2]=q[qf+24>>2];q[af+28>>2]=tf;tf=q[qf+36>>2];q[af+32>>2]=q[qf+32>>2];q[af+36>>2]=tf;tf=q[qf+44>>2];q[af+40>>2]=q[qf+40>>2];q[af+44>>2]=tf;tf=q[qf+52>>2];q[af+48>>2]=q[qf+48>>2];q[af+52>>2]=tf;tf=q[qf+60>>2];q[af+56>>2]=q[qf+56>>2];q[af+60>>2]=tf;af=q[Ba+76>>2]+rf|0;rf=q[pf+36>>2];q[af>>2]=q[pf+32>>2];q[af+4>>2]=rf;qf=q[pf+44>>2];q[af+8>>2]=q[pf+40>>2];q[af+12>>2]=qf;qf=q[pf+52>>2];q[af+16>>2]=q[pf+48>>2];q[af+20>>2]=qf;qf=q[pf+60>>2];q[af+24>>2]=q[pf+56>>2];q[af+28>>2]=qf;qf=q[uf+4>>2];q[af+32>>2]=q[uf>>2];q[af+36>>2]=qf;qf=q[pf+76>>2];q[af+40>>2]=q[pf+72>>2];q[af+44>>2]=qf;qf=q[pf+84>>2];q[af+48>>2]=q[pf+80>>2];q[af+52>>2]=qf;qf=q[pf+92>>2];q[af+56>>2]=q[pf+88>>2];q[af+60>>2]=qf;}sf=sf+1|0;}vf=vf+1|0;if((vf|0)!=(Pd|0)){continue}break}}Ba=(Ff>>1)+fd|0;af=Ba;Ba=(Ff|0)/3|0;return (sf|0)>=((Ba^-1)+Pd|0)?af:(sf|0)<=(Ba+fd|0)?af:sf}function pw(Ba,fd,Pd){var af=0,Kf=x(0),Lf=0,Mf=x(0),Nf=x(0),Of=x(0),Pf=x(0),Qf=x(0),Rf=x(0),Sf=x(0),Tf=x(0),Uf=x(0),Vf=x(0),Wf=x(0),Xf=x(0),Yf=0,Zf=x(0),_f=x(0),$f=0,ag=x(0);Yf=Pd-fd|0;a:{b:{c:{if((Pd|0)<=(fd|0)){Qf=x(Yf|0);break c}$f=r[Ba+60|0];af=fd;while(1){d:{if($f){Lf=q[Ba+116>>2]+(af<<4)|0;Of=u[Ba+44>>2];Pf=u[Ba+12>>2];Kf=x(x(x(s[Lf+4>>1])/Of)+Pf);Qf=u[Ba+40>>2];Sf=u[Ba+8>>2];Rf=x(x(x(s[Lf+2>>1])/Qf)+Sf);Wf=u[Ba+36>>2];Xf=u[Ba+4>>2];Uf=x(x(x(s[Lf>>1])/Wf)+Xf);Of=x(x(x(s[Lf+10>>1])/Of)+Pf);Pf=x(x(x(s[Lf+8>>1])/Qf)+Sf);Qf=x(x(x(s[Lf+6>>1])/Wf)+Xf);break d}Lf=q[Ba+76>>2]+(af<<6)|0;Kf=u[Lf+8>>2];Rf=u[Lf+4>>2];Uf=u[Lf>>2];Of=u[Lf+24>>2];Pf=u[Lf+20>>2];Qf=u[Lf+16>>2];}Mf=x(Mf+x(x(Of+Kf)*x(.5)));Nf=x(Nf+x(x(Pf+Rf)*x(.5)));Vf=x(Vf+x(x(Qf+Uf)*x(.5)));af=af+1|0;if((af|0)!=(Pd|0)){continue}break}Qf=x(Yf|0);Kf=x(0);if((Pd|0)>(fd|0)){break b}}Mf=x(0);Nf=x(0);break a}Kf=x(x(1)/Qf);Wf=x(Kf*Mf);Xf=x(Kf*Nf);ag=x(Kf*Vf);Nf=x(0);Lf=r[Ba+60|0];Mf=x(0);Kf=x(0);while(1){e:{if(Lf){af=q[Ba+116>>2]+(fd<<4)|0;Of=u[Ba+44>>2];Pf=u[Ba+12>>2];Vf=x(x(x(s[af+4>>1])/Of)+Pf);Sf=u[Ba+40>>2];Tf=u[Ba+8>>2];Rf=x(x(x(s[af+2>>1])/Sf)+Tf);Zf=u[Ba+36>>2];_f=u[Ba+4>>2];Uf=x(x(x(s[af>>1])/Zf)+_f);Of=x(x(x(s[af+10>>1])/Of)+Pf);Pf=x(x(x(s[af+8>>1])/Sf)+Tf);Sf=x(x(x(s[af+6>>1])/Zf)+_f);break e}af=q[Ba+76>>2]+(fd<<6)|0;Vf=u[af+8>>2];Rf=u[af+4>>2];Uf=u[af>>2];Of=u[af+24>>2];Pf=u[af+20>>2];Sf=u[af+16>>2];}Tf=Nf;Nf=x(x(x(Of+Vf)*x(.5))-Wf);Nf=x(Tf+x(Nf*Nf));Tf=Mf;Mf=x(x(x(Pf+Rf)*x(.5))-Xf);Mf=x(Tf+x(Mf*Mf));Tf=Kf;Kf=x(x(x(Sf+Uf)*x(.5))-ag);Kf=x(Tf+x(Kf*Kf));fd=fd+1|0;if((Pd|0)!=(fd|0)){continue}break}}Rf=x(x(1)/x(Qf+x(-1)));Mf=x(Rf*Mf);Nf=x(Rf*Nf);Kf=x(Rf*Kf);return Kf<Mf?Mf<Nf?2:1:(Kf<Nf)<<1}function qw(Ba){o[Ba+60|0]=0;q[Ba+52>>2]=287;q[Ba>>2]=16944;q[Ba+144>>2]=0;o[Ba+80|0]=1;q[Ba+76>>2]=0;o[Ba+100|0]=1;q[Ba+68>>2]=0;q[Ba+72>>2]=0;q[Ba+96>>2]=0;o[Ba+120|0]=1;q[Ba+88>>2]=0;q[Ba+92>>2]=0;q[Ba+116>>2]=0;o[Ba+140|0]=1;q[Ba+108>>2]=0;q[Ba+112>>2]=0;q[Ba+136>>2]=0;o[Ba+164|0]=1;q[Ba+128>>2]=0;q[Ba+132>>2]=0;q[Ba+160>>2]=0;q[Ba+168>>2]=0;q[Ba+152>>2]=0;q[Ba+156>>2]=0;q[Ba+4>>2]=-8388609;q[Ba+8>>2]=-8388609;q[Ba+12>>2]=-8388609;q[Ba+16>>2]=0;q[Ba+20>>2]=2139095039;q[Ba+24>>2]=2139095039;q[Ba+28>>2]=2139095039;q[Ba+32>>2]=0;}function rw(Ba,fd){Ba=Ba|0;fd=fd|0;n[q[q[Ba>>2]+8>>2]](Ba,fd,q[q[Ba+8>>2]+48>>2]);}function sw(Ba,fd,Pd){Ba=Ba|0;fd=fd|0;Pd=Pd|0;var bg=0;bg=P-32|0;P=bg;q[bg+28>>2]=Ba;q[bg+24>>2]=fd;o[bg+23|0]=Pd;Ba=Z(1312);Gf(Ba,q[bg+28>>2],q[bg+24>>2],o[bg+23|0]&1);P=bg+32|0;return Ba|0}function tw(Ba,fd,Pd){Ba=Ba|0;fd=fd|0;Pd=Pd|0;var cg=0;if((fd|0)!=(Pd|0)){cg=q[q[Ba+4>>2]+96>>2];n[q[q[cg>>2]+8>>2]](cg,q[fd+36>>2],q[Pd+36>>2])|0;Ba=q[Ba+4>>2];q[Ba+120>>2]=q[Ba+120>>2]+1;}}function uw(Ba,fd){Ba=Ba|0;if(q[Ba+16>>2]==(0-q[Ba+56>>2]|0)){Bh(Ba+4|0);Bh(Ba+44|0);o[Ba+153|0]=256;o[Ba+154|0]=1;q[Ba+124>>2]=0;q[Ba+104>>2]=0;q[Ba+116>>2]=10;q[Ba+120>>2]=1;q[Ba+108>>2]=1;q[Ba+112>>2]=0;q[Ba+84>>2]=0;q[Ba+88>>2]=0;q[Ba+92>>2]=0;q[Ba+128>>2]=0;q[Ba+132>>2]=0;q[Ba+136>>2]=0;q[Ba+140>>2]=0;q[Ba+144>>2]=0;q[Ba+148>>2]=0;}}function vw(Ba,fd,Pd){Ba=Ba|0;fd=fd|0;Pd=Pd|0;var dg=x(0),eg=x(0),fg=0,gg=x(0),hg=x(0),ig=x(0),jg=x(0),kg=x(0),lg=x(0);fg=q[Ba+44>>2];Ba=q[Ba+4>>2];a:{if(Ba){gg=u[Ba>>2];if(fg){dg=u[Ba+20>>2];eg=u[fg+20>>2];hg=dg>eg?dg:eg;dg=u[Ba+8>>2];eg=u[fg+8>>2];ig=dg<eg?dg:eg;dg=u[Ba+4>>2];eg=u[fg+4>>2];jg=dg<eg?dg:eg;dg=u[Ba+16>>2];eg=u[fg+16>>2];kg=dg>eg?dg:eg;dg=u[fg>>2];gg=gg<dg?gg:dg;dg=u[Ba+24>>2];eg=u[fg+24>>2];if(!(dg>eg)){dg=eg;break a}break a}eg=u[Ba+28>>2];dg=u[Ba+24>>2];hg=u[Ba+20>>2];kg=u[Ba+16>>2];lg=u[Ba+12>>2];ig=u[Ba+8>>2];jg=u[Ba+4>>2];break a}if(!fg){break a}eg=u[fg+28>>2];dg=u[fg+24>>2];hg=u[fg+20>>2];kg=u[fg+16>>2];lg=u[fg+12>>2];ig=u[fg+8>>2];jg=u[fg+4>>2];gg=u[fg>>2];}u[fd+12>>2]=lg;u[fd+8>>2]=ig;u[fd+4>>2]=jg;u[fd>>2]=gg;u[Pd+12>>2]=eg;u[Pd+8>>2]=dg;u[Pd+4>>2]=hg;u[Pd>>2]=kg;}function ww(Ba,fd){var Pd=0,mg=0,ng=0,og=0,pg=0,qg=0,rg=0,sg=0,tg=0,ug=0;tg=P-16|0;P=tg;Pd=q[Ba+96>>2];if(n[q[q[Pd>>2]+56>>2]](Pd)){Pd=q[Ba+96>>2];mg=n[q[q[Pd>>2]+28>>2]](Pd)|0;Pd=q[mg+4>>2];if((Pd|0)>=2){Wc(mg,tg+8|0,0,Pd+ -1|0);Pd=q[mg+4>>2];}if((Pd|0)>=1){while(1){sg=q[mg+12>>2]+(ug<<4)|0;og=q[sg+4>>2];qg=pg;pg=q[sg>>2];a:{b:{if((ng|0)==(og|0)?(qg|0)==(pg|0):0){break b}ng=q[pg+48>>2];qg=q[og+48>>2];if(u[ng>>2]<=u[qg+16>>2]^1|u[ng+16>>2]>=u[qg>>2]^1|(u[ng+4>>2]<=u[qg+20>>2]^1|u[ng+20>>2]>=u[qg+4>>2]^1)){break b}if(!(u[ng+8>>2]<=u[qg+24>>2])){break b}if(u[ng+24>>2]>=u[qg+8>>2]){break a}}Pd=q[Ba+96>>2];n[q[q[Pd>>2]+32>>2]](Pd,sg,fd);q[sg>>2]=0;q[sg+4>>2]=0;rg=rg+1|0;Pd=q[mg+4>>2];}ng=og;ug=ug+1|0;if((ug|0)<(Pd|0)){continue}break}if((Pd|0)>=2){Wc(mg,tg,0,Pd+ -1|0);Pd=q[mg+4>>2];}og=Pd-rg|0;if((rg|0)<=-1){if(q[mg+8>>2]<(og|0)){c:{if(!og){rg=0;Ba=Pd;break c}q[6657]=q[6657]+1;rg=n[q[5255]](og<<4,16)|0;Ba=q[mg+4>>2];}if((Ba|0)>=1){fd=0;while(1){ng=fd<<4;pg=ng+rg|0;ng=ng+q[mg+12>>2]|0;q[pg>>2]=q[ng>>2];q[pg+4>>2]=q[ng+4>>2];q[pg+8>>2]=q[ng+8>>2];q[pg+12>>2]=q[ng+12>>2];fd=fd+1|0;if((Ba|0)!=(fd|0)){continue}break}}Ba=q[mg+12>>2];if(Ba){if(r[mg+16|0]){if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}q[mg+12>>2]=0;}q[mg+12>>2]=rg;o[mg+16|0]=1;q[mg+8>>2]=og;}while(1){Ba=q[mg+12>>2]+(Pd<<4)|0;q[Ba>>2]=0;q[Ba+4>>2]=0;q[Ba+8>>2]=0;q[Ba+12>>2]=0;Pd=Pd+1|0;if((og|0)!=(Pd|0)){continue}break}}Pd=og;}q[mg+4>>2]=Pd;}P=tg+16|0;}function xw(Ba,fd){var vg=0,wg=0,xg=0,yg=0,zg=0,Ag=0,Bg=0,Cg=0,Dg=x(0);yg=P-32|0;P=yg;Ag=Ba+4|0;Ah(Ag,((w(q[Ba+112>>2],q[Ba+16>>2])|0)/100|0)+1|0);if(q[Ba+124>>2]){vg=((w(q[Ba+108>>2],q[Ba+56>>2])|0)/100|0)+1|0;Ah(Ba+44|0,vg);vg=q[Ba+124>>2]-vg|0;q[Ba+124>>2]=(vg|0)>0?vg:0;}vg=(q[Ba+104>>2]+1|0)%2|0;q[Ba+104>>2]=vg;wg=q[((vg<<2)+Ba|0)+84>>2];if(wg){zg=Ba+44|0;while(1){vg=q[wg+56>>2];xg=q[wg+52>>2];a:{if(xg){Bg=xg+56|0;break a}Bg=((q[wg+60>>2]<<2)+Ba|0)+84|0;}q[Bg>>2]=vg;xg=q[wg+56>>2];if(xg){q[xg+52>>2]=q[wg+52>>2];}q[wg+52>>2]=0;q[wg+56>>2]=q[Ba+92>>2];xg=q[Ba+92>>2];if(xg){q[xg+52>>2]=wg;}q[Ba+92>>2]=wg;Pc(Ag,q[wg+48>>2]);xg=q[wg+28>>2];q[yg+8>>2]=q[wg+24>>2];q[yg+12>>2]=xg;xg=q[wg+20>>2];q[yg>>2]=q[wg+16>>2];q[yg+4>>2]=xg;xg=q[wg+44>>2];q[yg+24>>2]=q[wg+40>>2];q[yg+28>>2]=xg;xg=q[wg+36>>2];q[yg+16>>2]=q[wg+32>>2];q[yg+20>>2]=xg;xg=Qc(zg,yg,wg);q[wg+60>>2]=2;q[wg+48>>2]=xg;wg=vg;if(wg){continue}break}o[Ba+154|0]=1;q[Ba+124>>2]=q[Ba+56>>2];}q[yg>>2]=16704;q[yg+4>>2]=Ba;b:{if(!r[Ba+153|0]){break b}Vc(Ag,q[Ba+4>>2],q[Ba+44>>2],yg);if(!r[Ba+153|0]){break b}vg=q[Ag>>2];Vc(Ag,vg,vg,yg);}c:{if(!r[Ba+154|0]){break c}vg=q[Ba+96>>2];Ag=n[q[q[vg>>2]+28>>2]](vg)|0;zg=q[Ag+4>>2];if((zg|0)<1){break c}xg=Ba+144|0;wg=q[Ba+120>>2];vg=(w(q[Ba+116>>2],zg)|0)/100|0;vg=(wg|0)>(vg|0)?wg:vg;Bg=(zg|0)<(vg|0)?zg:vg;d:{if((Bg|0)>=1){wg=0;while(1){vg=q[Ag+12>>2]+((q[Ba+144>>2]+wg|0)%(zg|0)<<4)|0;zg=q[vg>>2];Cg=q[zg+48>>2];xg=q[vg+4>>2];vg=q[xg+48>>2];e:{f:{if(u[Cg>>2]<=u[vg+16>>2]^1|u[Cg+16>>2]>=u[vg>>2]^1|(u[Cg+4>>2]<=u[vg+20>>2]^1|u[Cg+20>>2]>=u[vg+4>>2]^1)){break f}if(!(u[Cg+8>>2]<=u[vg+24>>2])){break f}if(u[Cg+24>>2]>=u[vg+8>>2]){break e}}vg=q[Ba+96>>2];n[q[q[vg>>2]+12>>2]](vg,zg,xg,fd)|0;wg=wg+ -1|0;Bg=Bg+ -1|0;}zg=q[Ag+4>>2];wg=wg+1|0;if((wg|0)<(Bg|0)){continue}break}xg=Ba+144|0;fd=0;if((zg|0)<=0){break d}}fd=(q[xg>>2]+Bg|0)%(zg|0)|0;}q[xg>>2]=fd;}o[Ba+154|0]=0;q[Ba+120>>2]=1;q[Ba+140>>2]=q[Ba+140>>2]+1;wg=q[Ba+132>>2];fd=Ba;vg=q[Ba+128>>2];Dg=x(0);g:{if(!vg){break g}Dg=x(x(wg>>>0)/x(vg>>>0));}u[fd+136>>2]=Dg;q[Ba+132>>2]=wg>>>1;q[Ba+128>>2]=vg>>>1;P=yg+32|0;}function yw(q,Ba){q=q|0;Ba=Ba|0;xw(q,Ba);ww(q,Ba);}function zw(Ba,fd,Eg,Fg,Gg){Ba=Ba|0;fd=fd|0;Eg=Eg|0;Fg=Fg|0;Gg=Gg|0;var Hg=0,Ig=0,Jg=x(0),Kg=x(0),Lg=x(0),Mg=x(0),Ng=x(0),Og=x(0),Pg=x(0),Qg=x(0),Rg=x(0),Sg=x(0),Tg=0;Gg=P-48|0;P=Gg;Hg=q[Eg+12>>2];q[Gg+24>>2]=q[Eg+8>>2];q[Gg+28>>2]=Hg;Hg=q[Eg+4>>2];q[Gg+16>>2]=q[Eg>>2];q[Gg+20>>2]=Hg;Hg=Fg;Ig=q[Hg+12>>2];q[Gg+40>>2]=q[Hg+8>>2];q[Gg+44>>2]=Ig;Ig=q[Hg+4>>2];q[Gg+32>>2]=q[Hg>>2];q[Gg+36>>2]=Ig;a:{if(q[fd+60>>2]==2){Pc(Ba+44|0,q[fd+48>>2]);q[fd+48>>2]=Qc(Ba+4|0,Gg+16|0,fd);Ig=1;break a}Ig=1;q[Ba+128>>2]=q[Ba+128>>2]+1;b:{Hg=q[fd+48>>2];if(u[Hg>>2]<=u[Gg+32>>2]^1|u[Hg+16>>2]>=u[Gg+16>>2]^1|(u[Hg+4>>2]<=u[Gg+36>>2]^1|u[Hg+20>>2]>=u[Gg+20>>2]^1)){break b}if(u[Hg+8>>2]<=u[Gg+40>>2]^1|u[Hg+24>>2]>=u[Gg+24>>2]^1){break b}Mg=u[fd+20>>2];Ng=u[fd+24>>2];Pg=u[Eg>>2];Qg=u[Eg+4>>2];Rg=u[Eg+8>>2];Og=u[fd+16>>2];Kg=u[fd+36>>2];Lg=u[fd+40>>2];Sg=u[fd+32>>2];Jg=u[Ba+100>>2];q[Gg+12>>2]=0;Lg=x(Jg*x(x(Lg-Ng)*x(.5)));u[Gg+8>>2]=Lg;Kg=x(Jg*x(x(Kg-Mg)*x(.5)));u[Gg+4>>2]=Kg;Jg=x(Jg*x(x(Sg-Og)*x(.5)));u[Gg>>2]=Jg;if(!!(x(Pg-Og)<x(0))){u[Gg>>2]=-Jg;}if(!!(x(Qg-Mg)<x(0))){u[Gg+4>>2]=-Kg;}if(!!(x(Rg-Ng)<x(0))){u[Gg+8>>2]=-Lg;}Ig=0;if(!$v(Ba+4|0,Hg,Gg+16|0,Gg)){break a}Ig=1;q[Ba+132>>2]=q[Ba+132>>2]+1;break a}te(Ba+4|0,Hg,Gg+16|0);q[Ba+132>>2]=q[Ba+132>>2]+1;}Tg=q[fd+56>>2];Hg=q[fd+52>>2];c:{if(Hg){Hg=Hg+56|0;break c}Hg=((q[fd+60>>2]<<2)+Ba|0)+84|0;}q[Hg>>2]=Tg;Hg=q[fd+56>>2];if(Hg){q[Hg+52>>2]=q[fd+52>>2];}Hg=q[Eg+4>>2];q[fd+16>>2]=q[Eg>>2];q[fd+20>>2]=Hg;Hg=q[Eg+12>>2];q[fd+24>>2]=q[Eg+8>>2];q[fd+28>>2]=Hg;Eg=q[Fg+4>>2];q[fd+32>>2]=q[Fg>>2];q[fd+36>>2]=Eg;Eg=q[Fg+12>>2];q[fd+40>>2]=q[Fg+8>>2];q[fd+44>>2]=Eg;Eg=q[Ba+104>>2];q[fd+60>>2]=Eg;q[fd+52>>2]=0;Eg=(Eg<<2)+Ba|0;q[fd+56>>2]=q[Eg+84>>2];Fg=q[Eg+84>>2];if(Fg){q[Fg+52>>2]=fd;}q[Eg+84>>2]=fd;d:{if(!Ig){break d}o[Ba+154|0]=1;if(r[Ba+153|0]){break d}q[Gg>>2]=16704;q[Gg+4>>2]=Ba;Vc(Ba+44|0,q[Ba+44>>2],q[fd+48>>2],Gg);Vc(Ba+4|0,q[Ba+4>>2],q[fd+48>>2],Gg);}P=Gg+48|0;}function Aw(Ba,fd,Eg,Fg){Ba=Ba|0;fd=fd|0;Eg=Eg|0;Fg=Fg|0;var Gg=0;Gg=P-48|0;P=Gg;q[Gg+44>>2]=Fg;q[Gg+40>>2]=16848;Fg=q[fd+12>>2];q[Gg+16>>2]=q[fd+8>>2];q[Gg+20>>2]=Fg;Fg=q[fd+4>>2];q[Gg+8>>2]=q[fd>>2];q[Gg+12>>2]=Fg;fd=q[Eg+12>>2];q[Gg+32>>2]=q[Eg+8>>2];q[Gg+36>>2]=fd;fd=q[Eg+4>>2];q[Gg+24>>2]=q[Eg>>2];q[Gg+28>>2]=fd;Zb(q[Ba+4>>2],Gg+8|0,Gg+40|0);Zb(q[Ba+44>>2],Gg+8|0,Gg+40|0);P=Gg+48|0;}function Bw(Ba,fd,Eg,Fg,Ug,Vg){Ba=Ba|0;fd=fd|0;Eg=Eg|0;Fg=Fg|0;Ug=Ug|0;Vg=Vg|0;var Wg=0,Xg=0,Yg=0;Eg=P-16|0;P=Eg;q[Eg+8>>2]=16776;q[Eg+12>>2]=Fg;Wg=Fg+4|0;Xg=Fg+20|0;Yg=q[Ba+168>>2];Ih(q[Ba+4>>2],fd,Wg,Xg,u[Fg+32>>2],Ug,Vg,Yg,Eg+8|0);Ih(q[Ba+44>>2],fd,Wg,Xg,u[Fg+32>>2],Ug,Vg,Yg,Eg+8|0);P=Eg+16|0;}function Cw(Ba,fd,Eg,Fg){Ba=Ba|0;fd=fd|0;Eg=Eg|0;Fg=Fg|0;Ba=q[fd+20>>2];q[Eg>>2]=q[fd+16>>2];q[Eg+4>>2]=Ba;Ba=q[fd+28>>2];q[Eg+8>>2]=q[fd+24>>2];q[Eg+12>>2]=Ba;Ba=q[fd+44>>2];q[Fg+8>>2]=q[fd+40>>2];q[Fg+12>>2]=Ba;Ba=q[fd+36>>2];q[Fg>>2]=q[fd+32>>2];q[Fg+4>>2]=Ba;}function Dw(Ba,fd,Eg){Ba=Ba|0;fd=fd|0;Eg=Eg|0;var Fg=0,Ug=0;Pc(q[fd+60>>2]==2?Ba+44|0:Ba+4|0,q[fd+48>>2]);Ug=q[fd+56>>2];Fg=q[fd+52>>2];a:{if(Fg){Fg=Fg+56|0;break a}Fg=((q[fd+60>>2]<<2)+Ba|0)+84|0;}q[Fg>>2]=Ug;Fg=q[fd+56>>2];if(Fg){q[Fg+52>>2]=q[fd+52>>2];}Fg=q[Ba+96>>2];n[q[q[Fg>>2]+16>>2]](Fg,fd,Eg);if(fd){q[6658]=q[6658]+1;n[q[5256]](fd);}o[Ba+154|0]=1;}function Ew(Ba,fd,Eg,Vg,Zg,_g,$g,ah){Ba=Ba|0;fd=fd|0;Eg=Eg|0;Vg=Vg|0;Zg=Zg|0;_g=_g|0;$g=$g|0;ah=ah|0;ah=P-48|0;P=ah;q[6657]=q[6657]+1;Vg=n[q[5255]](64,16)|0;q[Vg>>2]=Zg;q[Vg+8>>2]=$g;q[Vg+4>>2]=_g;Zg=q[fd+4>>2];q[Vg+16>>2]=q[fd>>2];q[Vg+20>>2]=Zg;Zg=q[fd+12>>2];q[Vg+24>>2]=q[fd+8>>2];q[Vg+28>>2]=Zg;Zg=q[Eg+4>>2];q[Vg+32>>2]=q[Eg>>2];q[Vg+36>>2]=Zg;Zg=q[Eg+12>>2];q[Vg+40>>2]=q[Eg+8>>2];q[Vg+44>>2]=Zg;q[Vg+52>>2]=0;q[Vg+56>>2]=0;Zg=q[fd+12>>2];q[ah+24>>2]=q[fd+8>>2];q[ah+28>>2]=Zg;Zg=q[fd+4>>2];q[ah+16>>2]=q[fd>>2];q[ah+20>>2]=Zg;fd=q[Eg+12>>2];q[ah+40>>2]=q[Eg+8>>2];q[ah+44>>2]=fd;fd=q[Eg+4>>2];q[ah+32>>2]=q[Eg>>2];q[ah+36>>2]=fd;q[Vg+60>>2]=q[Ba+104>>2];fd=q[Ba+148>>2]+1|0;q[Ba+148>>2]=fd;q[Vg+12>>2]=fd;q[Vg+48>>2]=Qc(Ba+4|0,ah+16|0,Vg);fd=q[Ba+104>>2];q[Vg+52>>2]=0;fd=(fd<<2)+Ba|0;q[Vg+56>>2]=q[fd+84>>2];Eg=q[fd+84>>2];if(Eg){q[Eg+52>>2]=Vg;}q[fd+84>>2]=Vg;if(!r[Ba+153|0]){q[ah+8>>2]=Vg;q[ah>>2]=16704;q[ah+4>>2]=Ba;Zb(q[Ba+4>>2],ah+16|0,ah);Zb(q[Ba+44>>2],ah+16|0,ah);}P=ah+48|0;return Vg|0}function Fw(q){q=q|0;aa(Jh(q));}function Gw(Ba){var fd=0,Eg=0,Vg=0,Zg=0,_g=0,$g=0;if(q[Ba+8>>2]<1){q[6657]=q[6657]+1;_g=n[q[5255]](20,16)|0;Eg=q[Ba+4>>2];a:{if((Eg|0)<1){break a}while(1){Vg=w(fd,20);Kh(Vg+_g|0,Vg+q[Ba+12>>2]|0);fd=fd+1|0;if((Eg|0)!=(fd|0)){continue}break}$g=q[Ba+4>>2];if(($g|0)<1){break a}Eg=0;while(1){fd=q[Ba+12>>2]+w(Eg,20)|0;Vg=fd;Zg=q[fd+12>>2];if(Zg){if(r[fd+16|0]){if(Zg){q[6658]=q[6658]+1;n[q[5256]](Zg);}}q[Vg+12>>2]=0;}o[fd+16|0]=1;q[Vg+12>>2]=0;q[fd+4>>2]=0;q[fd+8>>2]=0;Eg=Eg+1|0;if(($g|0)!=(Eg|0)){continue}break}}fd=q[Ba+12>>2];if(fd){if(r[Ba+16|0]){if(fd){q[6658]=q[6658]+1;n[q[5256]](fd);}}q[Ba+12>>2]=0;}q[Ba+12>>2]=_g;o[Ba+16|0]=1;q[Ba+8>>2]=1;}}function Hw(Ba){var ah=0,bh=0,ch=0,dh=0,eh=0,fh=0;bh=P-32|0;P=bh;q[Ba>>2]=16576;q[Ba+20>>2]=0;q[Ba+12>>2]=-1;q[Ba+16>>2]=0;q[Ba+4>>2]=0;q[Ba+8>>2]=0;q[Ba+36>>2]=0;o[Ba+40|0]=1;q[Ba+28>>2]=0;q[Ba+32>>2]=0;q[Ba+60>>2]=0;q[Ba+52>>2]=-1;q[Ba+56>>2]=0;q[Ba+44>>2]=0;q[Ba+48>>2]=0;q[Ba+76>>2]=0;o[Ba+80|0]=1;q[Ba+68>>2]=0;q[Ba+72>>2]=0;q[Ba+168>>2]=0;dh=1;o[Ba+172|0]=1;q[Ba+160>>2]=0;q[Ba+164>>2]=0;o[Ba+153|0]=256;o[Ba+154|0]=1;o[Ba+152|0]=1;q[Ba+124>>2]=0;q[Ba+100>>2]=0;q[Ba+104>>2]=0;q[Ba+136>>2]=0;q[Ba+128>>2]=0;q[Ba+132>>2]=0;q[Ba+116>>2]=10;q[Ba+120>>2]=1;q[Ba+108>>2]=1;q[Ba+112>>2]=0;q[6657]=q[6657]+1;ah=n[q[5255]](72,16)|0;Nh(ah);ch=q[Ba+160>>2];q[Ba+148>>2]=0;q[Ba+96>>2]=ah;q[Ba+140>>2]=0;q[Ba+144>>2]=0;q[Ba+84>>2]=0;q[Ba+88>>2]=0;q[Ba+92>>2]=0;q[bh+20>>2]=0;o[bh+24|0]=1;q[bh+12>>2]=0;q[bh+16>>2]=0;a:{if((ch|0)>=2){while(1){ah=q[Ba+168>>2]+w(dh,20)|0;fh=ah;eh=q[ah+12>>2];if(eh){if(r[ah+16|0]){if(eh){q[6658]=q[6658]+1;n[q[5256]](eh);}}q[fh+12>>2]=0;}o[ah+16|0]=1;q[fh+12>>2]=0;q[ah+4>>2]=0;q[ah+8>>2]=0;dh=dh+1|0;if((dh|0)!=(ch|0)){continue}break a}}if((ch|0)==1){break a}Gw(Ba+156|0);while(1){ah=ch;Kh(q[Ba+168>>2]+w(ah,20)|0,bh+8|0);ch=ah+1|0;if(ah){continue}break}}q[Ba+160>>2]=1;Ba=q[bh+20>>2];if(Ba){if(r[bh+24|0]){if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}q[bh+20>>2]=0;}P=bh+32|0;}function Iw(Ba,gh){Ba=Ba|0;gh=gh|0;Ba=q[Ba+4>>2];return (Ba|0)==q[gh>>2]|(Ba|0)==q[gh+4>>2]}function Jw(Ba,gh){Ba=Ba|0;gh=gh|0;var hh=0;hh=q[Ba+4>>2];if(!((hh|0)!=q[gh+4>>2]?(hh|0)!=q[gh>>2]:0)){hh=q[Ba+8>>2];n[q[q[hh>>2]+32>>2]](hh,gh,q[Ba+12>>2]);}return 0}function Kw(Ba,gh){Ba=Ba|0;gh=gh|0;q[Ba+68>>2]=gh;}function Lw(Ba,gh){Ba=Ba|0;gh=gh|0;q[Ba+24>>2]=gh;}function Mw(q){q=q|0;return q+4|0}function Nw(Ba,gh,ih){Ba=Ba|0;gh=gh|0;ih=ih|0;var jh=0,kh=0;q[6075]=q[6075]+1;jh=q[Ba+24>>2];a:{b:{if(jh){if(n[q[q[jh>>2]+8>>2]](jh,gh,ih)){break b}break a}if(!(q[ih+8>>2]&q[gh+4>>2])|!(q[gh+8>>2]&q[ih+4>>2])){break a}}kh=Rw(Ba,gh,ih);}return kh|0}function Ow(Ba,gh){Ba=Ba|0;gh=gh|0;var ih=0,lh=0,mh=0,nh=0,oh=0,ph=0,qh=0,rh=0,sh=0;lh=P-32|0;P=lh;q[lh+20>>2]=0;q[lh+12>>2]=0;q[lh+16>>2]=0;o[lh+24|0]=1;a:{if(q[Ba+8>>2]<1){break a}while(1){nh=q[Ba+16>>2]+(rh<<4)|0;b:{if((ih|0)!=(mh|0)){break b}ih=mh?mh<<1:1;if((mh|0)>=(ih|0)){ih=mh;break b}ph=0;sh=0;if(ih){q[6657]=q[6657]+1;sh=n[q[5255]](ih<<4,16)|0;mh=q[lh+12>>2];}if((mh|0)>=1){while(1){oh=ph<<4;qh=oh+sh|0;oh=oh+q[lh+20>>2]|0;q[qh>>2]=q[oh>>2];q[qh+4>>2]=q[oh+4>>2];q[qh+8>>2]=q[oh+8>>2];q[qh+12>>2]=q[oh+12>>2];ph=ph+1|0;if((ph|0)!=(mh|0)){continue}break}}mh=q[lh+20>>2];if(mh){if(r[lh+24|0]){if(mh){q[6658]=q[6658]+1;n[q[5256]](mh);}}q[lh+20>>2]=0;}q[lh+20>>2]=sh;o[lh+24|0]=1;q[lh+16>>2]=ih;ih=q[lh+12>>2];}ih=q[lh+20>>2]+(ih<<4)|0;q[ih>>2]=q[nh>>2];q[ih+4>>2]=q[nh+4>>2];q[ih+8>>2]=q[nh+8>>2];q[ih+12>>2]=q[nh+12>>2];nh=q[lh+12>>2];ih=nh+1|0;q[lh+12>>2]=ih;rh=rh+1|0;if((rh|0)<q[Ba+8>>2]){mh=q[lh+16>>2];continue}break}mh=0;if((nh|0)<0){break a}while(1){ih=q[lh+20>>2]+(mh<<4)|0;n[q[q[Ba>>2]+12>>2]](Ba,q[ih>>2],q[ih+4>>2],gh)|0;mh=mh+1|0;ih=q[lh+12>>2];if((mh|0)<(ih|0)){continue}break}}if(q[Ba+52>>2]>=1){gh=q[Ba+60>>2];ih=0;while(1){q[gh+(ih<<2)>>2]=-1;ih=ih+1|0;if((ih|0)<q[Ba+52>>2]){continue}break}ih=q[lh+12>>2];}if((ih|0)>=2){Wc(lh+8|0,lh,0,ih+ -1|0);ih=q[lh+12>>2];}mh=q[lh+20>>2];if((ih|0)>=1){ih=0;while(1){gh=(ih<<4)+mh|0;n[q[q[Ba>>2]+8>>2]](Ba,q[gh>>2],q[gh+4>>2])|0;mh=q[lh+20>>2];ih=ih+1|0;if((ih|0)<q[lh+12>>2]){continue}break}}if(mh){if(r[lh+24|0]){if(mh){q[6658]=q[6658]+1;n[q[5256]](mh);}}q[lh+20>>2]=0;}P=lh+32|0;}function Pw(Ba,gh,th){Ba=Ba|0;gh=gh|0;th=th|0;var uh=0,vh=0,wh=0;wh=P-16|0;P=wh;n[q[5253]](16084);if(q[Ba+8>>2]>=1){while(1){vh=q[Ba+16>>2]+(uh<<4)|0;a:{if(n[q[q[gh>>2]+8>>2]](gh,vh)){n[q[q[Ba>>2]+12>>2]](Ba,q[vh>>2],q[vh+4>>2],th)|0;q[6073]=q[6073]+ -1;break a}uh=uh+1|0;}if((uh|0)<q[Ba+8>>2]){continue}break}}n[q[5254]]();P=wh+16|0;}function Qw(Ba,gh,th,xh){Ba=Ba|0;gh=gh|0;th=th|0;xh=xh|0;var yh=0,zh=0,Ah=0,Bh=0,Ch=0,Dh=0,Eh=0;q[6074]=q[6074]+1;yh=q[gh+12>>2]>q[th+12>>2];Bh=yh?gh:th;zh=q[Bh+12>>2];Ch=yh?th:gh;Ah=q[Ch+12>>2];gh=zh<<16|Ah;gh=(gh<<15^-1)+gh|0;gh=w(gh>>>10^gh,9);gh=gh>>>6^gh;gh=(gh<<11^-1)+gh|0;Dh=q[Ba+12>>2]+ -1&(gh>>>16^gh);gh=q[q[Ba+40>>2]+(Dh<<2)>>2];a:{if((gh|0)==-1){break a}yh=q[Ba+16>>2];while(1){th=yh+(gh<<4)|0;if(!((zh|0)==q[q[th+4>>2]+12>>2]?(Ah|0)==q[q[th>>2]+12>>2]:0)){gh=q[q[Ba+60>>2]+(gh<<2)>>2];if((gh|0)!=-1){continue}break a}break}n[q[q[Ba>>2]+32>>2]](Ba,th,xh);Eh=q[(yh+(gh<<4)|0)+12>>2];zh=q[Ba+60>>2];b:{c:{Ah=q[Ba+40>>2]+(Dh<<2)|0;gh=q[Ah>>2];yh=th-q[Ba+16>>2]>>4;if((gh|0)==(yh|0)){gh=q[zh+(yh<<2)>>2];break c}while(1){th=gh;gh=q[zh+(gh<<2)>>2];if((yh|0)!=(gh|0)){continue}break}gh=q[zh+(yh<<2)>>2];if((th|0)==-1){break c}q[zh+(th<<2)>>2]=gh;break b}q[Ah>>2]=gh;}zh=q[Ba+8>>2]+ -1|0;gh=q[Ba+68>>2];if(gh){n[q[q[gh>>2]+12>>2]](gh,Ch,Bh,xh)|0;}if((zh|0)==(yh|0)){q[Ba+8>>2]=q[Ba+8>>2]+ -1;return Eh|0}Bh=q[Ba+60>>2];d:{e:{Ch=q[Ba+16>>2];xh=Ch+(zh<<4)|0;gh=q[q[xh+4>>2]+12>>2]<<16|q[q[xh>>2]+12>>2];gh=(gh<<15^-1)+gh|0;gh=w(gh>>>10^gh,9);gh=gh>>>6^gh;gh=(gh<<11^-1)+gh|0;Ah=q[Ba+12>>2]+ -1&(gh>>>16^gh);Dh=q[Ba+40>>2]+(Ah<<2)|0;gh=q[Dh>>2];if((zh|0)==(gh|0)){gh=q[Bh+(zh<<2)>>2];break e}while(1){th=gh;gh=q[Bh+(gh<<2)>>2];if((zh|0)!=(gh|0)){continue}break}gh=q[Bh+(zh<<2)>>2];if((th|0)==-1){break e}q[Bh+(th<<2)>>2]=gh;break d}q[Dh>>2]=gh;}th=q[xh+4>>2];gh=Ch+(yh<<4)|0;q[gh>>2]=q[xh>>2];q[gh+4>>2]=th;th=q[xh+12>>2];q[gh+8>>2]=q[xh+8>>2];q[gh+12>>2]=th;gh=q[Ba+40>>2]+(Ah<<2)|0;q[q[Ba+60>>2]+(yh<<2)>>2]=q[gh>>2];q[gh>>2]=yh;q[Ba+8>>2]=q[Ba+8>>2]+ -1;}return Eh|0}function Rw(Ba,gh,th){var xh=0,Fh=0,Gh=0,Hh=0,Ih=0,Jh=0,Kh=0,Lh=0,Nh=0,Oh=0;xh=q[gh+12>>2]>q[th+12>>2];Jh=xh?gh:th;Kh=q[Jh+12>>2];Lh=xh?th:gh;Gh=q[Lh+12>>2];gh=Kh<<16|Gh;gh=(gh<<15^-1)+gh|0;gh=w(gh>>>10^gh,9);gh=gh>>>6^gh;gh=(gh<<11^-1)+gh|0;Oh=gh>>>16^gh;xh=q[Ba+12>>2];Nh=Oh&xh+ -1;gh=q[q[Ba+40>>2]+(Nh<<2)>>2];a:{if((gh|0)!=-1){Fh=q[Ba+16>>2];while(1){Hh=gh<<4;th=Hh+Fh|0;if((Kh|0)==q[q[(Fh+Hh|0)+4>>2]+12>>2]?(Gh|0)==q[q[th>>2]+12>>2]:0){break a}gh=q[q[Ba+60>>2]+(gh<<2)>>2];if((gh|0)!=-1){continue}break}}gh=xh;Gh=q[Ba+8>>2];th=Gh;b:{if((gh|0)!=(th|0)){break b}th=xh;Fh=gh?gh<<1:1;if((gh|0)>=(Fh|0)){break b}c:{if(!Fh){th=0;gh=xh;break c}q[6657]=q[6657]+1;th=n[q[5255]](Fh<<4,16)|0;gh=q[Ba+8>>2];}Kh=gh;if((Kh|0)>=1){gh=0;while(1){Ih=gh<<4;Hh=Ih+th|0;Ih=Ih+q[Ba+16>>2]|0;q[Hh>>2]=q[Ih>>2];q[Hh+4>>2]=q[Ih+4>>2];q[Hh+8>>2]=q[Ih+8>>2];q[Hh+12>>2]=q[Ih+12>>2];gh=gh+1|0;if((Kh|0)!=(gh|0)){continue}break}}gh=q[Ba+16>>2];if(gh){if(r[Ba+20|0]){if(gh){q[6658]=q[6658]+1;n[q[5256]](gh);}}q[Ba+16>>2]=0;}q[Ba+16>>2]=th;q[Ba+12>>2]=Fh;o[Ba+20|0]=1;th=q[Ba+8>>2];gh=Fh;}q[Ba+8>>2]=th+1;Fh=q[Ba+16>>2];th=q[Ba+68>>2];if(th){n[q[q[th>>2]+8>>2]](th,Lh,Jh)|0;gh=q[Ba+12>>2];}th=Fh+(Gh<<4)|0;if((xh|0)<(gh|0)){Mh(Ba);Nh=q[Ba+12>>2]+ -1&Oh;}xh=q[Lh+12>>2]<q[Jh+12>>2];q[th>>2]=xh?Lh:Jh;gh=Fh+(Gh<<4)|0;q[gh+8>>2]=0;q[gh+12>>2]=0;q[gh+4>>2]=xh?Jh:Lh;gh=q[Ba+60>>2]+(Gh<<2)|0;Ba=q[Ba+40>>2]+(Nh<<2)|0;q[gh>>2]=q[Ba>>2];q[Ba>>2]=Gh;}return th}function Sw(Ba,gh,th){Ba=Ba|0;gh=gh|0;th=th|0;var Mh=0,Ph=0,Qh=0,Rh=0;q[6076]=q[6076]+1;Mh=q[gh+12>>2]>q[th+12>>2];Ph=q[(Mh?gh:th)+12>>2];Qh=q[(Mh?th:gh)+12>>2];gh=Qh|Ph<<16;gh=(gh<<15^-1)+gh|0;gh=w(gh>>>10^gh,9);gh=gh>>>6^gh;gh=(gh<<11^-1)+gh|0;gh=q[Ba+12>>2]+ -1&(gh>>>16^gh);a:{b:{if((gh|0)>=q[Ba+32>>2]){break b}gh=q[q[Ba+40>>2]+(gh<<2)>>2];if((gh|0)==-1){break b}th=q[Ba+16>>2];while(1){Rh=gh<<4;Mh=th+Rh|0;if(q[q[(th+Rh|0)+4>>2]+12>>2]==(Ph|0)?q[q[Mh>>2]+12>>2]==(Qh|0):0){break a}gh=q[q[Ba+60>>2]+(gh<<2)>>2];if((gh|0)!=-1){continue}break}}Mh=0;}return Mh|0}function Tw(Ba,gh,th){Ba=Ba|0;gh=gh|0;th=th|0;var Sh=0;Sh=P-16|0;P=Sh;q[Sh+12>>2]=gh;q[Sh+8>>2]=16412;n[q[q[Ba>>2]+48>>2]](Ba,Sh+8|0,th);P=Sh+16|0;}function Uw(Ba,gh,th){Ba=Ba|0;gh=gh|0;th=th|0;var Th=0;Th=P-16|0;P=Th;q[Th+12>>2]=th;q[Th+8>>2]=Ba;q[Th+4>>2]=gh;q[Th>>2]=16268;n[q[q[Ba>>2]+48>>2]](Ba,Th,th);P=Th+16|0;}function Vw(Ba,gh,th){Ba=Ba|0;gh=gh|0;th=th|0;a:{if(!th){break a}Ba=q[gh+8>>2];if(!Ba){break a}n[q[q[Ba>>2]>>2]](Ba)|0;n[q[q[th>>2]+60>>2]](th,q[gh+8>>2]);q[gh+8>>2]=0;}}function Ww(Ba){Ba=Ba|0;Ba=Lh(Ba);if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}function Xw(q){return 28}function Yw(Ba){Ba=Ba|0;return q[Ba+24>>2]}function Zw(Ba){Ba=Ba|0;Ba=Oh(Ba);if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}function _w(Ba,gh){Ba=Ba|0;gh=gh|0;var th=0,Uh=0,Vh=0,Wh=0,Xh=0;a:{if(r[Ba+164|0]){if(q[Ba+132>>2]>=(gh|0)){break a}if(gh){q[6657]=q[6657]+1;Vh=n[q[5255]](gh<<2,16)|0;}th=q[Ba+136>>2];Wh=q[Ba+128>>2];b:{c:{if((Wh|0)>=1){while(1){Xh=Uh<<2;q[Xh+Vh>>2]=q[th+Xh>>2];Uh=Uh+1|0;if((Wh|0)!=(Uh|0)){continue}break c}}if(!th){break b}}if(r[Ba+140|0]){if(th){q[6658]=q[6658]+1;n[q[5256]](th);}}q[Ba+136>>2]=0;}q[Ba+136>>2]=Vh;q[Ba+132>>2]=gh;o[Ba+140|0]=1;return}if(q[Ba+152>>2]>=(gh|0)){break a}if(gh){q[6657]=q[6657]+1;Vh=n[q[5255]](gh<<1,16)|0;}th=q[Ba+156>>2];Wh=q[Ba+148>>2];d:{e:{if((Wh|0)>=1){while(1){Xh=Uh<<1;p[Xh+Vh>>1]=s[th+Xh>>1];Uh=Uh+1|0;if((Wh|0)!=(Uh|0)){continue}break e}}if(!th){break d}}if(r[Ba+160|0]){if(th){q[6658]=q[6658]+1;n[q[5256]](th);}}q[Ba+156>>2]=0;}q[Ba+156>>2]=Vh;q[Ba+152>>2]=gh;o[Ba+160|0]=1;}}function $w(Ba,gh){Ba=Ba|0;gh=gh|0;var Yh=0,Zh=0,_h=0,$h=0,ai=0,bi=0;a:{if(r[Ba+165|0]){if(q[Ba+92>>2]>=(gh|0)){break a}if(gh){q[6657]=q[6657]+1;_h=n[q[5255]](gh<<4,16)|0;}else {_h=0;}ai=q[Ba+88>>2];if((ai|0)>=1){while(1){Zh=Yh<<4;$h=Zh+_h|0;Zh=Zh+q[Ba+96>>2]|0;bi=q[Zh+4>>2];q[$h>>2]=q[Zh>>2];q[$h+4>>2]=bi;bi=q[Zh+12>>2];q[$h+8>>2]=q[Zh+8>>2];q[$h+12>>2]=bi;Yh=Yh+1|0;if((ai|0)!=(Yh|0)){continue}break}}Yh=q[Ba+96>>2];if(Yh){if(r[Ba+100|0]){if(Yh){q[6658]=q[6658]+1;n[q[5256]](Yh);}}q[Ba+96>>2]=0;}q[Ba+96>>2]=_h;q[Ba+92>>2]=gh;o[Ba+100|0]=1;return}if(q[Ba+112>>2]>=(gh|0)){break a}if(gh){q[6657]=q[6657]+1;Zh=n[q[5255]](gh<<2,16)|0;}_h=q[Ba+116>>2];$h=q[Ba+108>>2];b:{c:{if(($h|0)>=1){while(1){ai=Yh<<2;q[ai+Zh>>2]=q[_h+ai>>2];Yh=Yh+1|0;if(($h|0)!=(Yh|0)){continue}break c}}if(!_h){break b}}if(r[Ba+120|0]){if(_h){q[6658]=q[6658]+1;n[q[5256]](_h);}}q[Ba+116>>2]=0;}q[Ba+116>>2]=Zh;q[Ba+112>>2]=gh;o[Ba+120|0]=1;}}function ax(Ba,gh,ci,di){var ei=0;ei=q[Ba+32>>2];q[ei>>2]=q[ei>>2]+1;Eb(Ba,gh);Eb(Ba,ci);Eb(Ba,di);}function bx(Ba,gh,ci){Ba=Ba|0;gh=gh|0;ci=ci|0;var di=0;di=q[Ba+56>>2];q[gh>>2]=q[Ba+52>>2];q[gh+4>>2]=di;di=q[Ba+64>>2];q[gh+8>>2]=q[Ba+60>>2];q[gh+12>>2]=di;gh=q[Ba+80>>2];q[ci+8>>2]=q[Ba+76>>2];q[ci+12>>2]=gh;gh=q[Ba+72>>2];q[ci>>2]=q[Ba+68>>2];q[ci+4>>2]=gh;}function cx(Ba,gh,ci){Ba=Ba|0;gh=gh|0;ci=ci|0;var fi=0;fi=q[gh+4>>2];q[Ba+52>>2]=q[gh>>2];q[Ba+56>>2]=fi;fi=q[gh+12>>2];q[Ba+60>>2]=q[gh+8>>2];q[Ba+64>>2]=fi;gh=q[ci+4>>2];q[Ba+68>>2]=q[ci>>2];q[Ba+72>>2]=gh;gh=q[ci+12>>2];q[Ba+76>>2]=q[ci+8>>2];q[Ba+80>>2]=gh;q[Ba+48>>2]=1;}function dx(Ba){Ba=Ba|0;return q[Ba+48>>2]==1|0}function ex(Ba){Ba=Ba|0;var gh=0;q[Ba>>2]=15804;gh=q[Ba+32>>2];if(gh){if(r[Ba+36|0]){if(gh){q[6658]=q[6658]+1;n[q[5256]](gh);}}q[Ba+32>>2]=0;}q[Ba+32>>2]=0;q[Ba+24>>2]=0;q[Ba+28>>2]=0;o[Ba+36|0]=1;if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}function fx(Ba,ci,gi){Ba=Ba|0;ci=ci|0;gi=gi|0;var hi=0,ii=0,ji=0,ki=0,li=0,mi=0,ni=0,oi=0,pi=0,qi=0,ri=0,si=0,ti=0,ui=0;ii=P-32|0;P=ii;hi=n[q[q[Ba>>2]+28>>2]](Ba)|0;q[ci>>2]=0;q[ci+20>>2]=hi;if(hi){ri=n[q[q[gi>>2]+16>>2]](gi,32,hi)|0;mi=q[ri+8>>2];q[ci>>2]=n[q[q[gi>>2]+28>>2]](gi,mi);ui=n[q[q[Ba>>2]+28>>2]](Ba)|0;if((ui|0)>0){while(1){n[q[q[Ba>>2]+16>>2]](Ba,ii+28|0,ii+4|0,ii+16|0,ii+8|0,ii+24|0,ii+20|0,ii,ii+12|0,qi);hi=q[ii>>2];q[mi+24>>2]=hi;ji=q[ii+4>>2];q[mi>>2]=0;q[mi+4>>2]=0;q[mi+28>>2]=ji;q[mi+8>>2]=0;q[mi+12>>2]=0;q[mi+16>>2]=0;q[mi+20>>2]=0;ji=q[ii+12>>2]+ -2|0;a:{if(ji>>>0>3){break a}b:{switch(ji-1|0){default:if(!hi){break a}ji=n[q[q[gi>>2]+16>>2]](gi,4,w(hi,3))|0;ni=q[ji+8>>2];q[mi+8>>2]=n[q[q[gi>>2]+28>>2]](gi,ni);if(q[ii>>2]>=1){hi=0;oi=q[ii+24>>2];while(1){li=ni+w(hi,12)|0;ki=oi+w(q[ii+20>>2],hi)|0;q[li>>2]=q[ki>>2];q[li+4>>2]=q[ki+4>>2];q[li+8>>2]=q[ki+8>>2];hi=hi+1|0;if((hi|0)<q[ii>>2]){continue}break}}n[q[q[gi>>2]+20>>2]](gi,ji,15614,1497453121,q[ji+8>>2]);break a;case 0:if(!hi){break a}li=n[q[q[gi>>2]+16>>2]](gi,8,hi)|0;ni=q[li+8>>2];q[mi+12>>2]=n[q[q[gi>>2]+28>>2]](gi,ni);hi=0;if(q[ii>>2]>=1){while(1){ji=ni+(hi<<3)|0;ki=q[ii+24>>2]+w(q[ii+20>>2],hi)|0;p[ji>>1]=s[ki>>1];p[ji+2>>1]=s[ki+2>>1];ki=s[ki+4>>1];p[ji+6>>1]=0;p[ji+4>>1]=ki;hi=hi+1|0;if((hi|0)<q[ii>>2]){continue}break}}n[q[q[gi>>2]+20>>2]](gi,li,15629,1497453121,q[li+8>>2]);break a;case 1:break a;case 2:break b}}if(!hi){break a}li=n[q[q[gi>>2]+16>>2]](gi,4,hi)|0;ni=q[li+8>>2];q[mi+16>>2]=n[q[q[gi>>2]+28>>2]](gi,ni);hi=0;if(q[ii>>2]>=1){while(1){ji=ni+(hi<<2)|0;ki=q[ii+24>>2]+w(q[ii+20>>2],hi)|0;o[ji|0]=r[ki|0];o[ji+1|0]=r[ki+1|0];ki=r[ki+2|0];o[ji+3|0]=0;o[ji+2|0]=ki;hi=hi+1|0;if((hi|0)<q[ii>>2]){continue}break}}n[q[q[gi>>2]+20>>2]](gi,li,15656,1497453121,q[li+8>>2]);}hi=q[ii+16>>2];c:{if(hi>>>0>1){break c}if(hi-1){hi=q[ii+4>>2];if(!hi){break c}ji=n[q[q[gi>>2]+16>>2]](gi,16,hi)|0;ni=q[ji+8>>2];q[mi>>2]=n[q[q[gi>>2]+28>>2]](gi,ni);oi=q[ii+4>>2];if((oi|0)>=1){hi=0;si=q[ii+8>>2];ti=q[ii+28>>2];while(1){li=ni+(hi<<4)|0;ki=ti+w(hi,si)|0;q[li>>2]=q[ki>>2];q[li+4>>2]=q[ki+4>>2];q[li+8>>2]=q[ki+8>>2];hi=hi+1|0;if((hi|0)<(oi|0)){continue}break}}n[q[q[gi>>2]+20>>2]](gi,ji,15679,1497453121,q[ji+8>>2]);break c}hi=q[ii+4>>2];if(!hi){break c}ki=n[q[q[gi>>2]+16>>2]](gi,32,hi)|0;ni=q[ki+8>>2];q[mi+4>>2]=n[q[q[gi>>2]+28>>2]](gi,ni);oi=q[ii+4>>2];if((oi|0)>=1){hi=0;si=q[ii+8>>2];ti=q[ii+28>>2];while(1){li=ti+w(hi,si)|0;pi=q[li+4>>2];ji=ni+(hi<<5)|0;q[ji>>2]=q[li>>2];q[ji+4>>2]=pi;pi=q[li+12>>2];q[ji+8>>2]=q[li+8>>2];q[ji+12>>2]=pi;pi=q[li+20>>2];q[ji+16>>2]=q[li+16>>2];q[ji+20>>2]=pi;hi=hi+1|0;if((hi|0)<(oi|0)){continue}break}}n[q[q[gi>>2]+20>>2]](gi,ki,15698,1497453121,q[ki+8>>2]);}n[q[q[Ba>>2]+24>>2]](Ba,qi);mi=mi+32|0;qi=qi+1|0;if((ui|0)!=(qi|0)){continue}break}}n[q[q[gi>>2]+20>>2]](gi,ri,15718,1497453121,q[ri+8>>2]);}q[ci+24>>2]=0;q[ci+4>>2]=q[Ba+4>>2];q[ci+8>>2]=q[Ba+8>>2];q[ci+12>>2]=q[Ba+12>>2];q[ci+16>>2]=q[Ba+16>>2];P=ii+32|0;return 15733}function gx(Ba,ci,gi,vi){Ba=Ba|0;ci=ci|0;gi=gi|0;vi=vi|0;var wi=0,xi=0,yi=0,zi=0,Ai=x(0),Bi=x(0),Ci=x(0),Di=x(0),Ei=x(0),Fi=x(0),Gi=0,Hi=0,Ii=0,Ji=0,Ki=0;gi=P-80|0;P=gi;Ki=n[q[q[Ba>>2]+28>>2]](Ba)|0;if((Ki|0)>=1){Ai=u[Ba+12>>2];Bi=u[Ba+8>>2];Ci=u[Ba+4>>2];while(1){n[q[q[Ba>>2]+16>>2]](Ba,gi+76|0,gi+52|0,gi- -64|0,gi+56|0,gi+72|0,gi+68|0,gi+48|0,gi+60|0,Ji);vi=q[gi+64>>2];a:{if(vi>>>0>1){break a}if(vi-1){vi=q[gi+60>>2]+ -2|0;if(vi>>>0>3){break a}b:{switch(vi-1|0){default:vi=0;if(q[gi+48>>2]<1){break a}while(1){yi=q[gi+76>>2];zi=q[gi+56>>2];wi=q[gi+72>>2]+w(q[gi+68>>2],vi)|0;xi=yi+w(zi,q[wi>>2])|0;Di=u[xi>>2];Ei=u[xi+4>>2];Fi=u[xi+8>>2];q[gi+12>>2]=0;u[gi+8>>2]=Ai*Fi;u[gi+4>>2]=Bi*Ei;u[gi>>2]=Ci*Di;xi=yi+w(zi,q[wi+4>>2])|0;Di=u[xi>>2];Ei=u[xi+4>>2];Fi=u[xi+8>>2];q[gi+28>>2]=0;u[gi+24>>2]=Ai*Fi;u[gi+20>>2]=Bi*Ei;u[gi+16>>2]=Ci*Di;wi=yi+w(zi,q[wi+8>>2])|0;Di=u[wi>>2];Ei=u[wi+4>>2];Fi=u[wi+8>>2];q[gi+44>>2]=0;u[gi+40>>2]=Ai*Fi;u[gi+36>>2]=Bi*Ei;u[gi+32>>2]=Ci*Di;n[q[q[ci>>2]+8>>2]](ci,gi,Ji,vi);vi=vi+1|0;if((vi|0)<q[gi+48>>2]){continue}break}break a;case 0:vi=0;if(q[gi+48>>2]<=0){break a}while(1){yi=q[gi+76>>2];zi=q[gi+56>>2];wi=q[gi+72>>2]+w(q[gi+68>>2],vi)|0;xi=yi+w(zi,s[wi>>1])|0;Di=u[xi>>2];Ei=u[xi+4>>2];Fi=u[xi+8>>2];q[gi+12>>2]=0;u[gi+8>>2]=Ai*Fi;u[gi+4>>2]=Bi*Ei;u[gi>>2]=Ci*Di;xi=yi+w(zi,s[wi+2>>1])|0;Di=u[xi>>2];Ei=u[xi+4>>2];Fi=u[xi+8>>2];q[gi+28>>2]=0;u[gi+24>>2]=Ai*Fi;u[gi+20>>2]=Bi*Ei;u[gi+16>>2]=Ci*Di;wi=yi+w(zi,s[wi+4>>1])|0;Di=u[wi>>2];Ei=u[wi+4>>2];Fi=u[wi+8>>2];q[gi+44>>2]=0;u[gi+40>>2]=Ai*Fi;u[gi+36>>2]=Bi*Ei;u[gi+32>>2]=Ci*Di;n[q[q[ci>>2]+8>>2]](ci,gi,Ji,vi);vi=vi+1|0;if((vi|0)<q[gi+48>>2]){continue}break}break a;case 1:break a;case 2:break b}}vi=0;if(q[gi+48>>2]<=0){break a}while(1){yi=q[gi+76>>2];zi=q[gi+56>>2];wi=q[gi+72>>2]+w(q[gi+68>>2],vi)|0;xi=yi+w(zi,r[wi|0])|0;Di=u[xi>>2];Ei=u[xi+4>>2];Fi=u[xi+8>>2];q[gi+12>>2]=0;u[gi+8>>2]=Ai*Fi;u[gi+4>>2]=Bi*Ei;u[gi>>2]=Ci*Di;xi=yi+w(zi,r[wi+1|0])|0;Di=u[xi>>2];Ei=u[xi+4>>2];Fi=u[xi+8>>2];q[gi+28>>2]=0;u[gi+24>>2]=Ai*Fi;u[gi+20>>2]=Bi*Ei;u[gi+16>>2]=Ci*Di;wi=yi+w(zi,r[wi+2|0])|0;Di=u[wi>>2];Ei=u[wi+4>>2];Fi=u[wi+8>>2];q[gi+44>>2]=0;u[gi+40>>2]=Ai*Fi;u[gi+36>>2]=Bi*Ei;u[gi+32>>2]=Ci*Di;n[q[q[ci>>2]+8>>2]](ci,gi,Ji,vi);vi=vi+1|0;if((vi|0)<q[gi+48>>2]){continue}break}break a}vi=q[gi+60>>2]+ -2|0;if(vi>>>0>3){break a}c:{switch(vi-1|0){default:vi=0;if(q[gi+48>>2]<1){break a}while(1){yi=q[gi+76>>2];zi=q[gi+56>>2];wi=q[gi+72>>2]+w(q[gi+68>>2],vi)|0;xi=yi+w(zi,q[wi>>2])|0;Gi=v[xi>>3];Hi=v[xi+8>>3];Ii=v[xi+16>>3];q[gi+12>>2]=0;u[gi+8>>2]=Ai*x(Ii);u[gi+4>>2]=Bi*x(Hi);u[gi>>2]=Ci*x(Gi);xi=yi+w(zi,q[wi+4>>2])|0;Gi=v[xi>>3];Hi=v[xi+8>>3];Ii=v[xi+16>>3];q[gi+28>>2]=0;u[gi+24>>2]=Ai*x(Ii);u[gi+20>>2]=Bi*x(Hi);u[gi+16>>2]=Ci*x(Gi);wi=yi+w(zi,q[wi+8>>2])|0;Gi=v[wi>>3];Hi=v[wi+8>>3];Ii=v[wi+16>>3];q[gi+44>>2]=0;u[gi+40>>2]=Ai*x(Ii);u[gi+36>>2]=Bi*x(Hi);u[gi+32>>2]=Ci*x(Gi);n[q[q[ci>>2]+8>>2]](ci,gi,Ji,vi);vi=vi+1|0;if((vi|0)<q[gi+48>>2]){continue}break}break a;case 0:vi=0;if(q[gi+48>>2]<=0){break a}while(1){yi=q[gi+76>>2];zi=q[gi+56>>2];wi=q[gi+72>>2]+w(q[gi+68>>2],vi)|0;xi=yi+w(zi,s[wi>>1])|0;Gi=v[xi>>3];Hi=v[xi+8>>3];Ii=v[xi+16>>3];q[gi+12>>2]=0;u[gi+8>>2]=Ai*x(Ii);u[gi+4>>2]=Bi*x(Hi);u[gi>>2]=Ci*x(Gi);xi=yi+w(zi,s[wi+2>>1])|0;Gi=v[xi>>3];Hi=v[xi+8>>3];Ii=v[xi+16>>3];q[gi+28>>2]=0;u[gi+24>>2]=Ai*x(Ii);u[gi+20>>2]=Bi*x(Hi);u[gi+16>>2]=Ci*x(Gi);wi=yi+w(zi,s[wi+4>>1])|0;Gi=v[wi>>3];Hi=v[wi+8>>3];Ii=v[wi+16>>3];q[gi+44>>2]=0;u[gi+40>>2]=Ai*x(Ii);u[gi+36>>2]=Bi*x(Hi);u[gi+32>>2]=Ci*x(Gi);n[q[q[ci>>2]+8>>2]](ci,gi,Ji,vi);vi=vi+1|0;if((vi|0)<q[gi+48>>2]){continue}break}break a;case 2:break c;case 1:break a}}vi=0;if(q[gi+48>>2]<=0){break a}while(1){yi=q[gi+76>>2];zi=q[gi+56>>2];wi=q[gi+72>>2]+w(q[gi+68>>2],vi)|0;xi=yi+w(zi,r[wi|0])|0;Gi=v[xi>>3];Hi=v[xi+8>>3];Ii=v[xi+16>>3];q[gi+12>>2]=0;u[gi+8>>2]=Ai*x(Ii);u[gi+4>>2]=Bi*x(Hi);u[gi>>2]=Ci*x(Gi);xi=yi+w(zi,r[wi+1|0])|0;Gi=v[xi>>3];Hi=v[xi+8>>3];Ii=v[xi+16>>3];q[gi+28>>2]=0;u[gi+24>>2]=Ai*x(Ii);u[gi+20>>2]=Bi*x(Hi);u[gi+16>>2]=Ci*x(Gi);wi=yi+w(zi,r[wi+2|0])|0;Gi=v[wi>>3];Hi=v[wi+8>>3];Ii=v[wi+16>>3];q[gi+44>>2]=0;u[gi+40>>2]=Ai*x(Ii);u[gi+36>>2]=Bi*x(Hi);u[gi+32>>2]=Ci*x(Gi);n[q[q[ci>>2]+8>>2]](ci,gi,Ji,vi);vi=vi+1|0;if((vi|0)<q[gi+48>>2]){continue}break}}n[q[q[Ba>>2]+24>>2]](Ba,Ji);Ji=Ji+1|0;if((Ki|0)!=(Ji|0)){continue}break}}P=gi+80|0;}function hx(Ba){Ba=Ba|0;var ci=x(0),gi=x(0);ci=u[Ba+32>>2];gi=x(n[q[q[Ba>>2]+48>>2]](Ba));x(n[q[q[Ba>>2]+48>>2]](Ba));x(n[q[q[Ba>>2]+48>>2]](Ba));return x(x(ci+gi))}function ix(Ba,vi,Li){Ba=Ba|0;vi=vi|0;Li=Li|0;var Mi=x(0),Ni=0,Oi=x(0),Pi=x(0),Qi=0,Ri=x(0),Si=x(0);Ni=P-16|0;P=Ni;n[q[q[vi>>2]+68>>2]](Ni,vi,Li);Qi=q[Ni+12>>2];q[Ba+8>>2]=q[Ni+8>>2];q[Ba+12>>2]=Qi;Qi=q[Ni+4>>2];q[Ba>>2]=q[Ni>>2];q[Ba+4>>2]=Qi;if(x(n[q[q[vi>>2]+48>>2]](vi))!=x(0)){Oi=u[Li+4>>2];Mi=u[Li>>2];Pi=u[Li+8>>2];Ri=x(n[q[q[vi>>2]+48>>2]](vi));vi=x(x(x(Mi*Mi)+x(Oi*Oi))+x(Pi*Pi))<x(1.4210854715202004e-14);Mi=vi?x(-1):Mi;Si=Mi;Pi=vi?x(-1):Pi;Oi=vi?x(-1):Oi;Mi=x(x(1)/x(E(x(x(Pi*Pi)+x(x(Mi*Mi)+x(Oi*Oi))))));u[Ba>>2]=u[Ba>>2]+x(Ri*x(Si*Mi));u[Ba+4>>2]=u[Ba+4>>2]+x(Ri*x(Oi*Mi));u[Ba+8>>2]=u[Ba+8>>2]+x(Ri*x(Pi*Mi));}P=Ni+16|0;}function jx(Ba,vi,Li){Ba=Ba|0;vi=vi|0;Li=Li|0;fb(Ba,vi,Li);q[vi+28>>2]=q[Ba+32>>2];q[vi+32>>2]=q[Ba+36>>2];q[vi+36>>2]=q[Ba+40>>2];q[vi+40>>2]=q[Ba+44>>2];q[vi+12>>2]=q[Ba+16>>2];q[vi+16>>2]=q[Ba+20>>2];q[vi+20>>2]=q[Ba+24>>2];q[vi+24>>2]=q[Ba+28>>2];Li=q[Ba+48>>2];q[vi+48>>2]=0;q[vi+44>>2]=Li;Ba=q[Ba+56>>2];q[vi+56>>2]=0;q[vi+52>>2]=Ba;return 15594}function kx(q){return 15584}function lx(q,Ba,vi,Li){q=q|0;Ba=Ba|0;vi=vi|0;Li=Li|0;var Ti=0,Ui=x(0),Vi=x(0),Wi=x(0),Xi=0,Yi=x(0),Zi=0,_i=x(0);if((Li|0)>=1){while(1){Ui=u[q+36>>2];Vi=u[q+32>>2];Zi=Xi<<4;Ti=Zi+Ba|0;Yi=u[Ti>>2];Wi=u[Ti+8>>2];_i=x(E(x(x(Yi*Yi)+x(Wi*Wi))));a:{if(_i!=x(0)){Vi=x(Vi/_i);Wi=x(Wi*Vi);Vi=x(Yi*Vi);Ui=u[Ti+4>>2]<x(0)?x(-Ui):Ui;break a}Wi=x(0);Ui=u[Ti+4>>2]<x(0)?x(-Ui):Ui;}Ti=vi+Zi|0;u[Ti+8>>2]=Wi;u[Ti+4>>2]=Ui;u[Ti>>2]=Vi;Xi=Xi+1|0;if((Xi|0)!=(Li|0)){continue}break}}}function mx(q,Ba,vi){q=q|0;Ba=Ba|0;vi=vi|0;var Li=x(0),$i=x(0),aj=x(0),bj=x(0),cj=x(0),dj=x(0);Li=u[Ba+36>>2];$i=u[Ba+32>>2];aj=u[vi>>2];bj=u[vi+8>>2];cj=x(E(x(x(aj*aj)+x(bj*bj))));a:{if(cj!=x(0)){$i=x($i/cj);dj=x(bj*$i);$i=x(aj*$i);Li=u[vi+4>>2]<x(0)?x(-Li):Li;break a}Li=u[vi+4>>2]<x(0)?x(-Li):Li;}u[q+8>>2]=dj;u[q+4>>2]=Li;u[q>>2]=$i;}function nx(Ba,vi,ej){Ba=Ba|0;vi=x(vi);ej=ej|0;var fj=x(0),gj=0,hj=x(0),ij=x(0),jj=x(0),kj=0;gj=P-16|0;P=gj;kj=q[Ba+44>>2];q[gj+8>>2]=q[Ba+40>>2];q[gj+12>>2]=kj;kj=q[Ba+36>>2];q[gj>>2]=q[Ba+32>>2];q[gj+4>>2]=kj;fj=x(n[q[q[Ba>>2]+48>>2]](Ba));jj=x(n[q[q[Ba>>2]+48>>2]](Ba));u[gj+8>>2]=x(n[q[q[Ba>>2]+48>>2]](Ba))+u[gj+8>>2];u[gj>>2]=fj+u[gj>>2];u[gj+4>>2]=jj+u[gj+4>>2];fj=x(vi*x(.5));jj=x(vi*x(.25));vi=x(vi/x(12));a:{b:{Ba=q[Ba+56>>2];if(Ba>>>0>2){break b}c:{switch(Ba-1|0){default:ij=fj;fj=u[gj+4>>2];hj=x(fj*fj);fj=x(ij*hj);ij=vi;vi=u[gj>>2];hj=x(x(jj*hj)+x(ij*x(vi*x(vi*x(4)))));ij=hj;break a;case 0:break b;case 1:break c}}hj=fj;fj=u[gj>>2];fj=x(fj*fj);ij=x(hj*fj);hj=vi;vi=u[gj+8>>2];fj=x(x(jj*fj)+x(hj*x(vi*x(vi*x(4)))));hj=fj;break a}hj=fj;fj=u[gj>>2];fj=x(fj*fj);hj=x(hj*fj);ij=vi;vi=u[gj+4>>2];fj=x(x(jj*fj)+x(ij*x(vi*x(vi*x(4)))));ij=fj;}q[ej+12>>2]=0;u[ej+8>>2]=ij;u[ej+4>>2]=hj;u[ej>>2]=fj;P=gj+16|0;}function ox(Ba,vi){var ej=x(0),lj=x(0),mj=x(0),nj=x(0);Aa(Ba);q[Ba+56>>2]=1;q[Ba>>2]=15456;ej=u[vi>>2];mj=u[vi+4>>2];lj=u[vi+8>>2];q[Ba+44>>2]=0;nj=x(lj*u[Ba+24>>2]);lj=u[Ba+48>>2];u[Ba+40>>2]=nj-lj;u[Ba+36>>2]=x(mj*u[Ba+20>>2])-lj;u[Ba+32>>2]=x(ej*u[Ba+16>>2])-lj;ej=u[vi>>2];mj=u[vi+8>>2];nj=u[vi+4>>2];ej=x(u[((ej<nj?(ej<mj^1)<<1:nj<mj?1:2)<<2)+vi>>2]*x(.10000000149011612));if(!!(ej<lj)){Xc(Ba,ej);}q[Ba+4>>2]=13;}function px(q){return 15436}function qx(q){q=q|0;return q+112|0}function rx(Ba,vi){Ba=Ba|0;vi=vi|0;var oj=0;oj=q[vi+4>>2];q[Ba+112>>2]=q[vi>>2];q[Ba+116>>2]=oj;oj=q[vi+12>>2];q[Ba+120>>2]=q[vi+8>>2];q[Ba+124>>2]=oj;}function sx(Ba,vi,pj,qj){Ba=Ba|0;vi=vi|0;pj=pj|0;qj=qj|0;var rj=x(0),sj=0,tj=x(0),uj=x(0),vj=x(0),wj=x(0),xj=0,yj=x(0),zj=0,Aj=0,Bj=x(0),Cj=0,Dj=0,Ej=0,Fj=0,Gj=0,Hj=0,Ij=0;sj=P-48|0;P=sj;yj=u[Ba+44>>2];tj=u[Ba+28>>2];vj=x(x(1)/u[Ba+120>>2]);wj=u[Ba+60>>2];rj=x(x(vj*u[qj+8>>2])+wj);rj=rj<tj?tj:rj;rj=yj<rj?yj:rj;Aj=(rj<x(0)?-.5:.5)+ +rj;a:{if(y(Aj)<2147483648){Cj=~~Aj;break a}Cj=-2147483648;}rj=x(x(vj*u[pj+8>>2])+wj);rj=rj<tj?tj:rj;rj=yj<rj?yj:rj;Aj=(rj<x(0)?-.5:.5)+ +rj;b:{if(y(Aj)<2147483648){Hj=~~Aj;break b}Hj=-2147483648;}yj=u[Ba+40>>2];tj=u[Ba+24>>2];vj=x(x(1)/u[Ba+116>>2]);wj=u[Ba+56>>2];rj=x(x(vj*u[qj+4>>2])+wj);rj=rj<tj?tj:rj;rj=yj<rj?yj:rj;Aj=(rj<x(0)?-.5:.5)+ +rj;c:{if(y(Aj)<2147483648){xj=~~Aj;break c}xj=-2147483648;}rj=x(x(vj*u[pj+4>>2])+wj);rj=rj<tj?tj:rj;rj=yj<rj?yj:rj;Aj=(rj<x(0)?-.5:.5)+ +rj;d:{if(y(Aj)<2147483648){zj=~~Aj;break d}zj=-2147483648;}yj=u[Ba+36>>2];tj=u[Ba+20>>2];vj=x(x(1)/u[Ba+112>>2]);wj=u[Ba+52>>2];rj=x(x(vj*u[qj>>2])+wj);rj=rj<tj?tj:rj;rj=yj<rj?yj:rj;Aj=(rj<x(0)?-.5:.5)+ +rj;e:{if(y(Aj)<2147483648){qj=~~Aj;break e}qj=-2147483648;}rj=x(x(vj*u[pj>>2])+wj);rj=rj<tj?tj:rj;rj=yj<rj?yj:rj;Aj=(rj<x(0)?-.5:.5)+ +rj;f:{if(y(Aj)<2147483648){pj=~~Aj;break f}pj=-2147483648;}Dj=q[Ba+72>>2]+ -1|0;Ej=q[Ba+68>>2]+ -1|0;Gj=q[Ba+108>>2];g:{if(Gj>>>0>2){Cj=0;zj=0;break g}Cj=Cj+1|0;Hj=Hj+ -1|0;xj=xj+1|0;zj=zj+ -1|0;qj=qj+1|0;pj=pj+ -1|0;h:{switch(Gj-1|0){default:Dj=(Cj|0)<(Dj|0)?Cj:Dj;Ej=(xj|0)<(Ej|0)?xj:Ej;Cj=(zj|0)>0?zj:0;zj=(Hj|0)>0?Hj:0;break g;case 0:Dj=(Cj|0)<(Dj|0)?Cj:Dj;Ej=(qj|0)<(Ej|0)?qj:Ej;Cj=(pj|0)>0?pj:0;zj=(Hj|0)>0?Hj:0;break g;case 1:break h}}Dj=(xj|0)<(Dj|0)?xj:Dj;Ej=(qj|0)<(Ej|0)?qj:Ej;Cj=(pj|0)>0?pj:0;zj=(zj|0)>0?zj:0;}if((zj|0)<(Dj|0)){while(1){Hj=Dj;if((Cj|0)>=(Ej|0)){zj=zj+1|0;}else {Ij=zj&1;Gj=zj+1|0;Bj=x(Gj|0);yj=x(zj|0);pj=Cj;while(1){i:{if(!(!r[Ba+106|0]|Ij?!(r[Ba+104|0]|(pj+zj&1?0:r[Ba+105|0])):0)){tj=x(n[q[q[Ba>>2]+68>>2]](Ba,pj,zj));qj=sj;j:{k:{l:{m:{n:{xj=q[Ba+108>>2];if(xj>>>0<=2){switch(xj-1|0){case 1:break l;case 0:break m;default:break n}}uj=u[sj+8>>2];tj=u[sj+4>>2];rj=u[sj>>2];break j}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+52>>2];q[sj+12>>2]=0;rj=x(tj-rj);u[sj>>2]=rj;uj=x(yj-x(wj*x(.5)));u[sj+8>>2]=uj;tj=x(x(pj|0)-x(vj*x(.5)));u[sj+4>>2]=tj;break j}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+56>>2];q[sj+12>>2]=0;tj=x(tj-rj);u[sj+4>>2]=tj;uj=x(yj-x(wj*x(.5)));u[sj+8>>2]=uj;rj=x(x(pj|0)-x(vj*x(.5)));break k}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+60>>2];q[sj+12>>2]=0;uj=x(tj-rj);u[sj+8>>2]=uj;tj=x(yj-x(wj*x(.5)));u[sj+4>>2]=tj;rj=x(x(pj|0)-x(vj*x(.5)));}u[qj>>2]=rj;}u[sj>>2]=rj*u[Ba+112>>2];u[sj+4>>2]=tj*u[Ba+116>>2];u[sj+8>>2]=uj*u[Ba+120>>2];tj=x(n[q[q[Ba>>2]+68>>2]](Ba,pj,Gj));qj=sj;o:{p:{q:{r:{s:{xj=q[Ba+108>>2];if(xj>>>0<=2){switch(xj-1|0){case 1:break q;case 0:break r;default:break s}}uj=u[sj+24>>2];tj=u[sj+20>>2];rj=u[sj+16>>2];break o}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+52>>2];q[sj+28>>2]=0;rj=x(tj-rj);u[sj+16>>2]=rj;uj=x(Bj-x(wj*x(.5)));u[sj+24>>2]=uj;tj=x(x(pj|0)-x(vj*x(.5)));u[sj+20>>2]=tj;break o}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+56>>2];q[sj+28>>2]=0;tj=x(tj-rj);u[sj+20>>2]=tj;uj=x(Bj-x(wj*x(.5)));u[sj+24>>2]=uj;rj=x(x(pj|0)-x(vj*x(.5)));break p}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+60>>2];q[sj+28>>2]=0;uj=x(tj-rj);u[sj+24>>2]=uj;tj=x(Bj-x(wj*x(.5)));u[sj+20>>2]=tj;rj=x(x(pj|0)-x(vj*x(.5)));}u[qj+16>>2]=rj;}u[sj+16>>2]=rj*u[Ba+112>>2];u[sj+20>>2]=tj*u[Ba+116>>2];u[sj+24>>2]=uj*u[Ba+120>>2];qj=pj+1|0;tj=x(n[q[q[Ba>>2]+68>>2]](Ba,qj,Gj));Fj=sj;t:{u:{v:{w:{x:{xj=q[Ba+108>>2];if(xj>>>0<=2){switch(xj-1|0){case 1:break v;case 0:break w;default:break x}}uj=u[sj+40>>2];tj=u[sj+36>>2];rj=u[sj+32>>2];break t}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+52>>2];q[sj+44>>2]=0;rj=x(tj-rj);u[sj+32>>2]=rj;uj=x(Bj-x(wj*x(.5)));u[sj+40>>2]=uj;tj=x(x(qj|0)-x(vj*x(.5)));u[sj+36>>2]=tj;break t}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+56>>2];q[sj+44>>2]=0;tj=x(tj-rj);u[sj+36>>2]=tj;uj=x(Bj-x(wj*x(.5)));u[sj+40>>2]=uj;rj=x(x(qj|0)-x(vj*x(.5)));break u}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+60>>2];q[sj+44>>2]=0;uj=x(tj-rj);u[sj+40>>2]=uj;tj=x(Bj-x(wj*x(.5)));u[sj+36>>2]=tj;rj=x(x(qj|0)-x(vj*x(.5)));}u[Fj+32>>2]=rj;}u[sj+32>>2]=rj*u[Ba+112>>2];u[sj+36>>2]=tj*u[Ba+116>>2];u[sj+40>>2]=uj*u[Ba+120>>2];n[q[q[vi>>2]+8>>2]](vi,sj,pj,zj);tj=x(n[q[q[Ba>>2]+68>>2]](Ba,qj,Gj));Fj=sj;y:{z:{A:{B:{C:{xj=q[Ba+108>>2];if(xj>>>0<=2){switch(xj-1|0){case 1:break A;case 0:break B;default:break C}}uj=u[sj+24>>2];tj=u[sj+20>>2];rj=u[sj+16>>2];break y}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+52>>2];q[sj+28>>2]=0;rj=x(tj-rj);u[sj+16>>2]=rj;uj=x(Bj-x(wj*x(.5)));u[sj+24>>2]=uj;tj=x(x(qj|0)-x(vj*x(.5)));u[sj+20>>2]=tj;break y}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+56>>2];q[sj+28>>2]=0;tj=x(tj-rj);u[sj+20>>2]=tj;uj=x(Bj-x(wj*x(.5)));u[sj+24>>2]=uj;rj=x(x(qj|0)-x(vj*x(.5)));break z}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+60>>2];q[sj+28>>2]=0;uj=x(tj-rj);u[sj+24>>2]=uj;tj=x(Bj-x(wj*x(.5)));u[sj+20>>2]=tj;rj=x(x(qj|0)-x(vj*x(.5)));}u[Fj+16>>2]=rj;}u[sj+16>>2]=rj*u[Ba+112>>2];u[sj+20>>2]=tj*u[Ba+116>>2];u[sj+24>>2]=uj*u[Ba+120>>2];tj=x(n[q[q[Ba>>2]+68>>2]](Ba,qj,zj));Fj=sj;D:{E:{F:{G:{H:{xj=q[Ba+108>>2];if(xj>>>0<=2){switch(xj-1|0){case 1:break F;case 0:break G;default:break H}}uj=u[sj+40>>2];tj=u[sj+36>>2];rj=u[sj+32>>2];break D}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+52>>2];q[sj+44>>2]=0;rj=x(tj-rj);u[sj+32>>2]=rj;uj=x(yj-x(wj*x(.5)));u[sj+40>>2]=uj;tj=x(x(qj|0)-x(vj*x(.5)));u[sj+36>>2]=tj;break D}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+56>>2];q[sj+44>>2]=0;tj=x(tj-rj);u[sj+36>>2]=tj;uj=x(yj-x(wj*x(.5)));u[sj+40>>2]=uj;rj=x(x(qj|0)-x(vj*x(.5)));break E}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+60>>2];q[sj+44>>2]=0;uj=x(tj-rj);u[sj+40>>2]=uj;tj=x(yj-x(wj*x(.5)));u[sj+36>>2]=tj;rj=x(x(qj|0)-x(vj*x(.5)));}u[Fj+32>>2]=rj;}break i}tj=x(n[q[q[Ba>>2]+68>>2]](Ba,pj,zj));qj=sj;I:{J:{K:{L:{M:{xj=q[Ba+108>>2];if(xj>>>0<=2){switch(xj-1|0){case 1:break K;case 0:break L;default:break M}}uj=u[sj+8>>2];tj=u[sj+4>>2];rj=u[sj>>2];break I}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+52>>2];q[sj+12>>2]=0;rj=x(tj-rj);u[sj>>2]=rj;uj=x(yj-x(wj*x(.5)));u[sj+8>>2]=uj;tj=x(x(pj|0)-x(vj*x(.5)));u[sj+4>>2]=tj;break I}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+56>>2];q[sj+12>>2]=0;tj=x(tj-rj);u[sj+4>>2]=tj;uj=x(yj-x(wj*x(.5)));u[sj+8>>2]=uj;rj=x(x(pj|0)-x(vj*x(.5)));break J}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+60>>2];q[sj+12>>2]=0;uj=x(tj-rj);u[sj+8>>2]=uj;tj=x(yj-x(wj*x(.5)));u[sj+4>>2]=tj;rj=x(x(pj|0)-x(vj*x(.5)));}u[qj>>2]=rj;}u[sj>>2]=rj*u[Ba+112>>2];u[sj+4>>2]=tj*u[Ba+116>>2];u[sj+8>>2]=uj*u[Ba+120>>2];tj=x(n[q[q[Ba>>2]+68>>2]](Ba,pj,Gj));qj=sj;N:{O:{P:{Q:{R:{xj=q[Ba+108>>2];if(xj>>>0<=2){switch(xj-1|0){case 1:break P;case 0:break Q;default:break R}}uj=u[sj+24>>2];tj=u[sj+20>>2];rj=u[sj+16>>2];break N}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+52>>2];q[sj+28>>2]=0;rj=x(tj-rj);u[sj+16>>2]=rj;uj=x(Bj-x(wj*x(.5)));u[sj+24>>2]=uj;tj=x(x(pj|0)-x(vj*x(.5)));u[sj+20>>2]=tj;break N}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+56>>2];q[sj+28>>2]=0;tj=x(tj-rj);u[sj+20>>2]=tj;uj=x(Bj-x(wj*x(.5)));u[sj+24>>2]=uj;rj=x(x(pj|0)-x(vj*x(.5)));break O}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+60>>2];q[sj+28>>2]=0;uj=x(tj-rj);u[sj+24>>2]=uj;tj=x(Bj-x(wj*x(.5)));u[sj+20>>2]=tj;rj=x(x(pj|0)-x(vj*x(.5)));}u[qj+16>>2]=rj;}u[sj+16>>2]=rj*u[Ba+112>>2];u[sj+20>>2]=tj*u[Ba+116>>2];u[sj+24>>2]=uj*u[Ba+120>>2];qj=pj+1|0;tj=x(n[q[q[Ba>>2]+68>>2]](Ba,qj,zj));Fj=sj;S:{T:{U:{V:{W:{xj=q[Ba+108>>2];if(xj>>>0<=2){switch(xj-1|0){case 1:break U;case 0:break V;default:break W}}uj=u[sj+40>>2];tj=u[sj+36>>2];rj=u[sj+32>>2];break S}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+52>>2];q[sj+44>>2]=0;rj=x(tj-rj);u[sj+32>>2]=rj;uj=x(yj-x(wj*x(.5)));u[sj+40>>2]=uj;tj=x(x(qj|0)-x(vj*x(.5)));u[sj+36>>2]=tj;break S}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+56>>2];q[sj+44>>2]=0;tj=x(tj-rj);u[sj+36>>2]=tj;uj=x(yj-x(wj*x(.5)));u[sj+40>>2]=uj;rj=x(x(qj|0)-x(vj*x(.5)));break T}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+60>>2];q[sj+44>>2]=0;uj=x(tj-rj);u[sj+40>>2]=uj;tj=x(yj-x(wj*x(.5)));u[sj+36>>2]=tj;rj=x(x(qj|0)-x(vj*x(.5)));}u[Fj+32>>2]=rj;}u[sj+32>>2]=rj*u[Ba+112>>2];u[sj+36>>2]=tj*u[Ba+116>>2];u[sj+40>>2]=uj*u[Ba+120>>2];n[q[q[vi>>2]+8>>2]](vi,sj,pj,zj);tj=x(n[q[q[Ba>>2]+68>>2]](Ba,qj,zj));Fj=sj;X:{Y:{Z:{_:{$:{xj=q[Ba+108>>2];if(xj>>>0<=2){switch(xj-1|0){case 1:break Z;case 0:break _;default:break $}}uj=u[sj+8>>2];tj=u[sj+4>>2];rj=u[sj>>2];break X}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+52>>2];q[sj+12>>2]=0;rj=x(tj-rj);u[sj>>2]=rj;uj=x(yj-x(wj*x(.5)));u[sj+8>>2]=uj;tj=x(x(qj|0)-x(vj*x(.5)));u[sj+4>>2]=tj;break X}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+56>>2];q[sj+12>>2]=0;tj=x(tj-rj);u[sj+4>>2]=tj;uj=x(yj-x(wj*x(.5)));u[sj+8>>2]=uj;rj=x(x(qj|0)-x(vj*x(.5)));break Y}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+60>>2];q[sj+12>>2]=0;uj=x(tj-rj);u[sj+8>>2]=uj;tj=x(yj-x(wj*x(.5)));u[sj+4>>2]=tj;rj=x(x(qj|0)-x(vj*x(.5)));}u[Fj>>2]=rj;}u[sj>>2]=rj*u[Ba+112>>2];u[sj+4>>2]=tj*u[Ba+116>>2];u[sj+8>>2]=uj*u[Ba+120>>2];tj=x(n[q[q[Ba>>2]+68>>2]](Ba,qj,Gj));Fj=sj;aa:{ba:{ca:{da:{ea:{xj=q[Ba+108>>2];if(xj>>>0<=2){switch(xj-1|0){case 1:break ca;case 0:break da;default:break ea}}uj=u[sj+40>>2];tj=u[sj+36>>2];rj=u[sj+32>>2];break aa}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+52>>2];q[sj+44>>2]=0;rj=x(tj-rj);u[sj+32>>2]=rj;uj=x(Bj-x(wj*x(.5)));u[sj+40>>2]=uj;tj=x(x(qj|0)-x(vj*x(.5)));u[sj+36>>2]=tj;break aa}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+56>>2];q[sj+44>>2]=0;tj=x(tj-rj);u[sj+36>>2]=tj;uj=x(Bj-x(wj*x(.5)));u[sj+40>>2]=uj;rj=x(x(qj|0)-x(vj*x(.5)));break ba}vj=u[Ba+84>>2];wj=u[Ba+88>>2];rj=u[Ba+60>>2];q[sj+44>>2]=0;uj=x(tj-rj);u[sj+40>>2]=uj;tj=x(Bj-x(wj*x(.5)));u[sj+36>>2]=tj;rj=x(x(qj|0)-x(vj*x(.5)));}u[Fj+32>>2]=rj;}}u[sj+32>>2]=rj*u[Ba+112>>2];u[sj+36>>2]=tj*u[Ba+116>>2];u[sj+40>>2]=uj*u[Ba+120>>2];n[q[q[vi>>2]+8>>2]](vi,sj,pj,zj);pj=qj;if((qj|0)!=(Ej|0)){continue}break}zj=Gj;}if((Hj|0)!=(zj|0)){continue}break}}P=sj+48|0;}function tx(Ba,vi,pj){Ba=Ba|0;vi=vi|0;pj=pj|0;var qj=0,Jj=x(0);qj=q[Ba+100>>2];a:{if(qj>>>0>5){break a}b:{switch(qj-1|0){default:return x(u[q[Ba+96>>2]+(w(q[Ba+68>>2],pj)+vi<<2)>>2]);case 4:return x(x(u[Ba+92>>2]*x(r[q[Ba+96>>2]+(w(q[Ba+68>>2],pj)+vi|0)|0])));case 0:case 1:case 3:break a;case 2:break b}}Jj=x(u[Ba+92>>2]*x(p[q[Ba+96>>2]+(w(q[Ba+68>>2],pj)+vi<<1)>>1]));}return x(Jj)}function ux(Ba,vi,pj,Kj){Ba=Ba|0;vi=vi|0;pj=pj|0;Kj=Kj|0;var Lj=x(0),Mj=x(0),Nj=x(0),Oj=x(0),Pj=x(0),Qj=x(0),Rj=x(0),Sj=x(0),Tj=x(0),Uj=x(0),Vj=x(0),Wj=x(0),Xj=x(0),Yj=x(0),Zj=x(0),_j=x(0),$j=x(0),ak=x(0),bk=x(0),ck=x(0),dk=x(0),ek=x(0),fk=x(0),gk=x(0);Qj=u[vi+56>>2];Tj=u[vi+36>>2];Uj=u[vi+40>>2];Rj=u[vi+52>>2];Nj=u[vi+20>>2];Oj=u[Ba+116>>2];Mj=u[Ba+24>>2];Pj=u[Ba+40>>2];Vj=u[vi+24>>2];Wj=u[Ba+120>>2];Xj=u[Ba+28>>2];Yj=u[Ba+44>>2];Zj=u[vi+32>>2];Sj=u[vi+48>>2];_j=u[vi>>2];$j=u[vi+4>>2];ak=u[vi+8>>2];bk=u[vi+16>>2];Lj=u[Ba+112>>2];ck=u[Ba+20>>2];dk=u[Ba+36>>2];ek=x(n[q[q[Ba>>2]+48>>2]](Ba));fk=x(n[q[q[Ba>>2]+48>>2]](Ba));gk=x(n[q[q[Ba>>2]+48>>2]](Ba));q[pj+12>>2]=0;Lj=x(x(Lj*x(dk-ck))*x(.5));Oj=x(x(Oj*x(Pj-Mj))*x(.5));Mj=x(x(Lj*x(y(bk)))+x(Oj*x(y(Nj))));Nj=x(x(Wj*x(Yj-Xj))*x(.5));Mj=x(fk+x(Mj+x(Nj*x(y(Vj)))));u[pj+4>>2]=Rj-Mj;Pj=x(ek+x(x(x(Lj*x(y(_j)))+x(Oj*x(y($j))))+x(Nj*x(y(ak)))));u[pj>>2]=Sj-Pj;Lj=x(gk+x(x(x(Lj*x(y(Zj)))+x(Oj*x(y(Tj))))+x(Nj*x(y(Uj)))));u[pj+8>>2]=Qj-Lj;q[Kj+12>>2]=0;u[Kj+8>>2]=Qj+Lj;u[Kj+4>>2]=Rj+Mj;u[Kj>>2]=Sj+Pj;}function vx(Ba){Ba=Ba|0;q[Ba>>2]=15324;if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}function wx(Ba){Ba=Ba|0;q[Ba>>2]=15324;return Ba|0}function xx(Ba,vi,pj,Kj,hk,ik,jk,kk,lk,mk){var nk=x(0),ok=x(0),pk=x(0),qk=x(0);q[Ba+112>>2]=1065353216;q[Ba+116>>2]=1065353216;q[Ba+108>>2]=kk;o[Ba+105|0]=0;o[Ba+106|0]=0;o[Ba+104|0]=mk;q[Ba+100>>2]=lk;u[Ba+92>>2]=hk;u[Ba+80>>2]=jk;u[Ba+76>>2]=ik;q[Ba+72>>2]=pj;q[Ba+68>>2]=vi;q[Ba+120>>2]=1065353216;q[Ba+124>>2]=0;q[Ba+96>>2]=Kj;q[Ba+4>>2]=24;hk=x(pj+ -1|0);u[Ba+88>>2]=hk;nk=x(vi+ -1|0);u[Ba+84>>2]=nk;a:{b:{c:{d:{e:{if(kk>>>0<=2){switch(kk-1|0){case 1:break c;case 0:break d;default:break e}}ok=u[Ba+44>>2];pk=u[Ba+28>>2];hk=u[Ba+40>>2];qk=u[Ba+24>>2];jk=u[Ba+36>>2];ik=u[Ba+20>>2];break a}q[Ba+48>>2]=0;u[Ba+44>>2]=hk;u[Ba+40>>2]=nk;u[Ba+36>>2]=jk;q[Ba+32>>2]=0;q[Ba+24>>2]=0;q[Ba+28>>2]=0;u[Ba+20>>2]=ik;ok=hk;hk=nk;break a}q[Ba+20>>2]=0;q[Ba+48>>2]=0;u[Ba+44>>2]=hk;u[Ba+40>>2]=jk;u[Ba+36>>2]=nk;q[Ba+28>>2]=0;q[Ba+32>>2]=0;u[Ba+24>>2]=ik;ok=hk;hk=jk;qk=ik;ik=x(0);break b}q[Ba+20>>2]=0;q[Ba+24>>2]=0;q[Ba+48>>2]=0;u[Ba+44>>2]=jk;u[Ba+40>>2]=hk;u[Ba+36>>2]=nk;q[Ba+32>>2]=0;u[Ba+28>>2]=ik;ok=jk;}pk=ik;jk=nk;ik=x(0);}q[Ba- -64>>2]=0;u[Ba+60>>2]=x(pk+ok)*x(.5);u[Ba+56>>2]=x(qk+hk)*x(.5);u[Ba+52>>2]=x(ik+jk)*x(.5);}function yx(Ba,vi,pj,Kj,hk,ik,jk,kk,lk,mk){q[Ba>>2]=14552;q[Ba+4>>2]=35;q[Ba+8>>2]=0;q[Ba+12>>2]=-1;q[Ba+16>>2]=0;q[Ba>>2]=15324;xx(Ba,vi,pj,Kj,hk,ik,jk,kk,lk,mk);}function zx(Ba,vi,pj,Kj){Ba=Ba|0;vi=vi|0;pj=pj|0;Kj=Kj|0;var hk=0,ik=0,jk=0,kk=0,lk=x(0),mk=0,rk=x(0),sk=x(0),tk=x(0),uk=0,vk=0,wk=0,xk=0,yk=0,zk=0,Ak=x(0),Bk=x(0),Ck=x(0),Dk=x(0),Ek=x(0),Fk=x(0),Gk=x(0),Hk=0,Ik=0,Jk=0;mk=P-32|0;P=mk;rk=u[vi+44>>2];sk=u[vi+28>>2];tk=u[vi+12>>2];lk=tk>x(0)?tk:x(0);lk=lk<sk?sk:lk;Fk=lk<rk?rk:lk;lk=tk<x(0)?tk:x(0);lk=sk<lk?sk:lk;Gk=rk<lk?rk:lk;zk=q[vi+40>>2];hk=q[vi+24>>2];xk=q[vi+8>>2];Ak=u[vi+8>>2];ik=Ak>x(-0xde0b6b000000000)?xk:-581039253;Bk=u[vi+24>>2];ik=Bk>(f(0,ik),k())?hk:ik;Ck=u[vi+40>>2];Hk=Ck>(f(0,ik),k())?zk:ik;jk=q[vi+36>>2];kk=q[vi+20>>2];yk=q[vi+4>>2];Dk=u[vi+4>>2];ik=Dk>x(-0xde0b6b000000000)?yk:-581039253;Ek=u[vi+20>>2];ik=Ek>(f(0,ik),k())?kk:ik;rk=u[vi+36>>2];Ik=rk>(f(0,ik),k())?jk:ik;uk=q[vi+32>>2];wk=q[vi+16>>2];vk=q[vi>>2];sk=u[vi>>2];ik=sk>x(-0xde0b6b000000000)?vk:-581039253;tk=u[vi+16>>2];ik=tk>(f(0,ik),k())?wk:ik;lk=u[vi+32>>2];Jk=lk>(f(0,ik),k())?uk:ik;vi=Ak<x(0xde0b6b000000000)?xk:1566444395;vi=Bk<(f(0,vi),k())?hk:vi;xk=Ck<(f(0,vi),k())?zk:vi;vi=Dk<x(0xde0b6b000000000)?yk:1566444395;vi=Ek<(f(0,vi),k())?kk:vi;yk=rk<(f(0,vi),k())?jk:vi;vi=sk<x(0xde0b6b000000000)?vk:1566444395;vi=tk<(f(0,vi),k())?wk:vi;ik=lk<(f(0,vi),k())?uk:vi;kk=q[Ba+4>>2];vi=q[kk+4>>2];a:{if((vi|0)!=q[kk+8>>2]){break a}uk=vi?vi<<1:1;if((vi|0)>=(uk|0)){break a}b:{if(!uk){wk=0;break b}q[6657]=q[6657]+1;wk=n[q[5255]](uk<<6,16)|0;vi=q[kk+4>>2];}if((vi|0)>=1){vk=0;while(1){Ba=vk<<6;hk=Ba+wk|0;jk=Ba+q[kk+12>>2]|0;Ba=q[jk+4>>2];q[hk>>2]=q[jk>>2];q[hk+4>>2]=Ba;Ba=q[jk+60>>2];q[hk+56>>2]=q[jk+56>>2];q[hk+60>>2]=Ba;Ba=q[jk+52>>2];q[hk+48>>2]=q[jk+48>>2];q[hk+52>>2]=Ba;Ba=q[jk+44>>2];q[hk+40>>2]=q[jk+40>>2];q[hk+44>>2]=Ba;Ba=q[jk+36>>2];q[hk+32>>2]=q[jk+32>>2];q[hk+36>>2]=Ba;Ba=q[jk+28>>2];q[hk+24>>2]=q[jk+24>>2];q[hk+28>>2]=Ba;Ba=q[jk+20>>2];q[hk+16>>2]=q[jk+16>>2];q[hk+20>>2]=Ba;Ba=q[jk+12>>2];q[hk+8>>2]=q[jk+8>>2];q[hk+12>>2]=Ba;vk=vk+1|0;if((vk|0)!=(vi|0)){continue}break}}Ba=q[kk+12>>2];if(Ba){if(r[kk+16|0]){if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}q[kk+12>>2]=0;}q[kk+12>>2]=wk;o[kk+16|0]=1;q[kk+8>>2]=uk;vi=q[kk+4>>2];}vi=q[kk+12>>2]+(vi<<6)|0;q[vi+40>>2]=Kj;q[vi+36>>2]=pj;q[vi+32>>2]=-1;q[vi+16>>2]=Jk;u[vi+12>>2]=Gk;q[vi+8>>2]=xk;q[vi+4>>2]=yk;q[vi>>2]=ik;u[vi+28>>2]=Fk;q[vi+24>>2]=Hk;q[vi+20>>2]=Ik;Ba=q[mk+16>>2];q[vi+44>>2]=q[mk+12>>2];q[vi+48>>2]=Ba;Ba=q[mk+24>>2];q[vi+52>>2]=q[mk+20>>2];q[vi+56>>2]=Ba;q[vi+60>>2]=q[mk+28>>2];q[kk+4>>2]=q[kk+4>>2]+1;P=mk+32|0;}function Ax(Ba,vi,pj,Kj){Ba=Ba|0;vi=vi|0;pj=pj|0;Kj=Kj|0;var Kk=x(0),Lk=0,Mk=0,Nk=0,Ok=x(0),Pk=0,Qk=x(0),Rk=0,Sk=0,Tk=0,Uk=x(0),Vk=x(0),Wk=x(0),Xk=x(0),Yk=0,Zk=0,_k=0,$k=x(0),al=x(0),bl=x(0),cl=0;Mk=q[vi+40>>2];Lk=q[vi+24>>2];Pk=q[vi+8>>2];Uk=u[vi+8>>2];Rk=Uk<x(0xde0b6b000000000)?Pk:1566444395;Qk=u[vi+24>>2];Rk=Qk<(f(0,Rk),k())?Lk:Rk;Ok=u[vi+40>>2];Kk=(f(0,Ok<(f(0,Rk),k())?Mk:Rk),k());Nk=Mk;Mk=Uk>x(-0xde0b6b000000000)?Pk:-581039253;Mk=Qk>(f(0,Mk),k())?Lk:Mk;Uk=(f(0,Ok>(f(0,Mk),k())?Nk:Mk),k());Pk=x(Uk-Kk)<x(.0020000000949949026);Mk=q[Ba+8>>2];$k=u[Mk+12>>2];al=u[Mk+44>>2];Kk=x(x((Pk?x(Kk+x(-.0010000000474974513)):Kk)-$k)*al);a:{if(Kk<x(4294967296)&Kk>=x(0)){Lk=~~Kk>>>0;break a}Lk=0;}Rk=Lk&65534;Lk=q[vi+36>>2];Sk=q[vi+20>>2];Yk=q[vi+4>>2];Qk=u[vi+4>>2];Nk=Qk<x(0xde0b6b000000000)?Yk:1566444395;Ok=u[vi+20>>2];Nk=Ok<(f(0,Nk),k())?Sk:Nk;Vk=u[vi+36>>2];Kk=(f(0,Vk<(f(0,Nk),k())?Lk:Nk),k());Nk=Lk;Lk=Qk>x(-0xde0b6b000000000)?Yk:-581039253;Lk=Ok>(f(0,Lk),k())?Sk:Lk;Qk=(f(0,Vk>(f(0,Lk),k())?Nk:Lk),k());Sk=x(Qk-Kk)<x(.0020000000949949026);Vk=u[Mk+8>>2];bl=u[Mk+40>>2];Kk=x(x((Sk?x(Kk+x(-.0010000000474974513)):Kk)-Vk)*bl);b:{if(Kk<x(4294967296)&Kk>=x(0)){Lk=~~Kk>>>0;break b}Lk=0;}Yk=Lk&65534;Lk=q[vi+32>>2];Nk=q[vi+16>>2];Zk=q[vi>>2];Ok=u[vi>>2];Tk=Ok<x(0xde0b6b000000000)?Zk:1566444395;Wk=u[vi+16>>2];Tk=Wk<(f(0,Tk),k())?Nk:Tk;Xk=u[vi+32>>2];Kk=(f(0,Xk<(f(0,Tk),k())?Lk:Tk),k());vi=Ok>x(-0xde0b6b000000000)?Zk:-581039253;vi=Wk>(f(0,vi),k())?Nk:vi;Ok=(f(0,Xk>(f(0,vi),k())?Lk:vi),k());Lk=x(Ok-Kk)<x(.0020000000949949026);Wk=u[Mk+4>>2];Xk=u[Mk+36>>2];Kk=x(x((Lk?x(Kk+x(-.0010000000474974513)):Kk)-Wk)*Xk);c:{if(Kk<x(4294967296)&Kk>=x(0)){vi=~~Kk>>>0;break c}vi=0;}Nk=vi&65534;Kk=x(x(x((Pk?x(Uk+x(.0010000000474974513)):Uk)-$k)*al)+x(1));d:{if(Kk<x(4294967296)&Kk>=x(0)){vi=~~Kk>>>0;break d}vi=0;}Zk=vi|1;Kk=x(x(x((Sk?x(Qk+x(.0010000000474974513)):Qk)-Vk)*bl)+x(1));e:{if(Kk<x(4294967296)&Kk>=x(0)){vi=~~Kk>>>0;break e}vi=0;}Sk=vi|1;Kk=x(x(x((Lk?x(Ok+x(.0010000000474974513)):Ok)-Wk)*Xk)+x(1));f:{if(Kk<x(4294967296)&Kk>=x(0)){vi=~~Kk>>>0;break f}vi=0;}Tk=vi|1;cl=pj<<21|Kj;Ba=q[Ba+4>>2];pj=q[Ba+4>>2];g:{if((pj|0)!=q[Ba+8>>2]){break g}Kj=pj?pj<<1:1;if((pj|0)>=(Kj|0)){break g}h:{if(!Kj){Mk=0;break h}q[6657]=q[6657]+1;Mk=n[q[5255]](Kj<<4,16)|0;pj=q[Ba+4>>2];}if((pj|0)>=1){vi=0;while(1){Lk=vi<<4;Pk=Lk+Mk|0;Lk=Lk+q[Ba+12>>2]|0;_k=q[Lk+4>>2];q[Pk>>2]=q[Lk>>2];q[Pk+4>>2]=_k;_k=q[Lk+12>>2];q[Pk+8>>2]=q[Lk+8>>2];q[Pk+12>>2]=_k;vi=vi+1|0;if((pj|0)!=(vi|0)){continue}break}}vi=q[Ba+12>>2];if(vi){if(r[Ba+16|0]){if(vi){q[6658]=q[6658]+1;n[q[5256]](vi);}}q[Ba+12>>2]=0;}q[Ba+12>>2]=Mk;o[Ba+16|0]=1;q[Ba+8>>2]=Kj;pj=q[Ba+4>>2];}vi=q[Ba+12>>2]+(pj<<4)|0;q[vi+12>>2]=cl;p[vi+6>>1]=Tk;p[vi+4>>1]=Rk;p[vi+2>>1]=Yk;p[vi>>1]=Nk;p[vi+10>>1]=Zk;p[vi+8>>1]=Sk;q[Ba+4>>2]=q[Ba+4>>2]+1;}function Bx(q,Ba,vi,pj){q=q|0;Ba=Ba|0;vi=vi|0;pj=pj|0;return Dh(q,Ba,vi,pj)|0}function Cx(Ba){Ba=Ba|0;Uc(Ba);if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}function Dx(q){q=q|0;Uc(q);return q|0}function Ex(Ba,vi,pj){Ba=Ba|0;vi=vi|0;pj=pj|0;var Kj=0,dl=x(0),el=x(0),fl=x(0);if(pj>>>0<=5){el=u[Ba+40>>2];fl=u[Ba+36>>2];dl=u[Ba+32>>2];Ba=1065353216;Kj=pj;a:{b:{c:{d:{switch(pj-1|0){case 0:pj=0;Ba=-1082130432;Kj=0;break a;case 1:pj=1065353216;break b;case 2:pj=-1082130432;break b;case 3:Kj=1065353216;break c;case 4:break d;default:break a}}Kj=-1082130432;}Ba=0;dl=el;pj=0;break a}Ba=0;dl=fl;Kj=0;}q[vi>>2]=Ba;u[vi+12>>2]=-dl;q[vi+8>>2]=Kj;q[vi+4>>2]=pj;}}function Fx(q,Ba,vi){q=q|0;Ba=Ba|0;vi=x(vi);var pj=x(0),gl=x(0),hl=0;pj=u[Ba>>2];gl=u[q+32>>2];a:{if(pj<=x(gl+vi)^1|pj>=x(x(-gl)-vi)^1){break a}pj=u[Ba+4>>2];gl=u[q+36>>2];if(pj<=x(gl+vi)^1|pj>=x(x(-gl)-vi)^1){break a}pj=u[Ba+8>>2];gl=u[q+40>>2];if(!(pj<=x(gl+vi))){break a}hl=pj>=x(x(-gl)-vi);}return hl|0}function Gx(Ba,vi,il,jl){Ba=Ba|0;vi=vi|0;il=il|0;jl=jl|0;var kl=0,ll=0,ml=0;kl=P-48|0;P=kl;n[q[q[Ba>>2]+124>>2]](Ba,kl+32|0,jl);jl=q[kl+32>>2];ll=q[kl+36>>2];ml=q[kl+40>>2];q[vi+12>>2]=0;q[vi+8>>2]=ml;q[vi+4>>2]=ll;q[vi>>2]=jl;q[kl+12>>2]=0;q[kl+8>>2]=ml^-2147483648;q[kl+4>>2]=ll^-2147483648;q[kl>>2]=jl^-2147483648;n[q[q[Ba>>2]+64>>2]](kl+16|0,Ba,kl);Ba=q[kl+28>>2];q[il+8>>2]=q[kl+24>>2];q[il+12>>2]=Ba;Ba=q[kl+20>>2];q[il>>2]=q[kl+16>>2];q[il+4>>2]=Ba;P=kl+48|0;}function Hx(Ba,vi,il){Ba=Ba|0;vi=vi|0;il=il|0;var jl=x(0),nl=x(0),ol=x(0),pl=x(0),ql=x(0),rl=x(0);nl=u[Ba+40>>2];jl=u[Ba+36>>2];ol=u[Ba+32>>2];pl=x(n[q[q[Ba>>2]+48>>2]](Ba));ql=x(n[q[q[Ba>>2]+48>>2]](Ba));rl=x(n[q[q[Ba>>2]+48>>2]](Ba));q[il+12>>2]=0;jl=x(jl+ql);Ba=vi>>>1&1;u[il+4>>2]=x(jl*x(Ba^1))-x(jl*x(Ba|0));jl=x(ol+pl);Ba=vi&1;u[il>>2]=x(jl*x(Ba^1))-x(jl*x(Ba|0));nl=x(nl+rl);Ba=vi>>>2&1;u[il+8>>2]=x(nl*x(Ba^1))-x(nl*x(Ba|0));}function Ix(Ba,vi,il,sl){Ba=Ba|0;vi=vi|0;il=il|0;sl=sl|0;var tl=0,ul=0;tl=Ba;if(vi>>>0<=11){vi=vi<<2;ul=q[vi+14940>>2];vi=q[vi+14892>>2];}else {vi=0;}n[q[q[Ba>>2]+108>>2]](tl,vi,il);n[q[q[Ba>>2]+108>>2]](Ba,ul,sl);}function Jx(q){return 8}function Kx(Ba,vi,il){Ba=Ba|0;vi=vi|0;il=il|0;if(vi>>>0<=5){q[il+12>>2]=0;Ba=vi<<2;q[il+8>>2]=q[Ba+14868>>2];q[il+4>>2]=q[Ba+14844>>2];q[il>>2]=q[Ba+14820>>2];}}function Lx(Ba,vi,il,sl){Ba=Ba|0;vi=vi|0;il=il|0;sl=sl|0;var vl=0,wl=0,xl=x(0),yl=0,zl=x(0),Al=x(0),Bl=x(0),Cl=x(0),Dl=x(0);if((sl|0)>=1){while(1){xl=u[Ba+32>>2];yl=wl<<4;vl=yl+vi|0;Bl=u[vl>>2];zl=u[Ba+36>>2];Cl=u[vl+4>>2];Al=u[Ba+40>>2];Dl=u[vl+8>>2];vl=il+yl|0;q[vl+12>>2]=0;u[vl+8>>2]=Dl>=x(0)?Al:x(-Al);u[vl+4>>2]=Cl>=x(0)?zl:x(-zl);u[vl>>2]=Bl>=x(0)?xl:x(-xl);wl=wl+1|0;if((wl|0)!=(sl|0)){continue}break}}}function Mx(Ba,vi,il){Ba=Ba|0;vi=vi|0;il=il|0;var sl=x(0),El=x(0),Fl=x(0),Gl=x(0),Hl=x(0),Il=x(0);sl=u[vi+32>>2];El=u[vi+36>>2];Fl=u[vi+40>>2];Gl=u[il>>2];Hl=u[il+4>>2];Il=u[il+8>>2];q[Ba+12>>2]=0;u[Ba+8>>2]=Il>=x(0)?Fl:x(-Fl);u[Ba+4>>2]=Hl>=x(0)?El:x(-El);u[Ba>>2]=Gl>=x(0)?sl:x(-sl);}function Nx(Ba,vi,il){Ba=Ba|0;vi=vi|0;il=il|0;var Jl=x(0),Kl=x(0),Ll=x(0),Ml=x(0),Nl=x(0),Ol=x(0),Pl=x(0),Ql=x(0),Rl=x(0);Jl=u[vi+36>>2];Kl=u[vi+40>>2];Ll=u[vi+32>>2];Ml=x(n[q[q[vi>>2]+48>>2]](vi));Nl=x(n[q[q[vi>>2]+48>>2]](vi));Ol=x(n[q[q[vi>>2]+48>>2]](vi));Pl=u[il>>2];Ql=u[il+4>>2];Rl=u[il+8>>2];q[Ba+12>>2]=0;Kl=x(Kl+Ol);u[Ba+8>>2]=Rl>=x(0)?Kl:x(-Kl);Jl=x(Jl+Nl);u[Ba+4>>2]=Ql>=x(0)?Jl:x(-Jl);Jl=x(Ll+Ml);u[Ba>>2]=Pl>=x(0)?Jl:x(-Jl);}function Ox(q){return 14816}function Px(Ba,vi,il){Ba=Ba|0;vi=x(vi);il=il|0;var Sl=x(0),Tl=x(0),Ul=x(0),Vl=x(0),Wl=x(0),Xl=x(0);Sl=u[Ba+40>>2];Tl=u[Ba+36>>2];Ul=u[Ba+32>>2];Vl=x(n[q[q[Ba>>2]+48>>2]](Ba));Wl=x(n[q[q[Ba>>2]+48>>2]](Ba));Xl=x(n[q[q[Ba>>2]+48>>2]](Ba));q[il+12>>2]=0;vi=x(vi/x(12));Ul=x(Ul+Vl);Ul=x(Ul+Ul);Ul=x(Ul*Ul);Tl=x(Tl+Wl);Tl=x(Tl+Tl);Tl=x(Tl*Tl);u[il+8>>2]=vi*x(Ul+Tl);Sl=x(Sl+Xl);Sl=x(Sl+Sl);Sl=x(Sl*Sl);u[il+4>>2]=vi*x(Ul+Sl);u[il>>2]=vi*x(Tl+Sl);}function Qx(Ba,vi){var il=x(0),Yl=x(0),Zl=x(0),_l=x(0);_c(Ba);q[Ba+4>>2]=0;q[Ba>>2]=14660;il=u[vi>>2];Zl=u[vi+4>>2];Yl=u[vi+8>>2];q[Ba+44>>2]=0;_l=x(Yl*u[Ba+24>>2]);Yl=u[Ba+48>>2];u[Ba+40>>2]=_l-Yl;u[Ba+36>>2]=x(Zl*u[Ba+20>>2])-Yl;u[Ba+32>>2]=x(il*u[Ba+16>>2])-Yl;il=u[vi>>2];Zl=u[vi+8>>2];_l=u[vi+4>>2];il=x(u[((il<_l?(il<Zl^1)<<1:_l<Zl?1:2)<<2)+vi>>2]*x(.10000000149011612));if(!!(il<Yl)){Xc(Ba,il);}}function Rx(Ba,vi,$l,am){Ba=Ba|0;vi=vi|0;$l=$l|0;var bm=x(0),cm=x(0),dm=x(0),em=x(0),fm=x(0);dm=u[Ba+24>>2];em=u[Ba+28>>2];fm=u[Ba+32>>2];bm=x(x(x(dm*u[vi>>2])+x(em*u[vi+4>>2]))+x(fm*u[vi+8>>2]));cm=u[Ba+20>>2];if(!!(bm>cm)){u[Ba+20>>2]=bm;$l=q[vi+12>>2];q[Ba+12>>2]=q[vi+8>>2];q[Ba+16>>2]=$l;$l=q[vi+4>>2];q[Ba+4>>2]=q[vi>>2];q[Ba+8>>2]=$l;cm=bm;}bm=x(x(x(dm*u[vi+16>>2])+x(em*u[vi+20>>2]))+x(fm*u[vi+24>>2]));if(!!(bm>cm)){u[Ba+20>>2]=bm;$l=q[vi+28>>2];q[Ba+12>>2]=q[vi+24>>2];q[Ba+16>>2]=$l;$l=q[vi+20>>2];q[Ba+4>>2]=q[vi+16>>2];q[Ba+8>>2]=$l;cm=bm;}bm=x(x(x(dm*u[vi+32>>2])+x(em*u[vi+36>>2]))+x(fm*u[vi+40>>2]));if(!!(bm>cm)){u[Ba+20>>2]=bm;$l=q[vi+44>>2];q[Ba+12>>2]=q[vi+40>>2];q[Ba+16>>2]=$l;$l=q[vi+36>>2];q[Ba+4>>2]=q[vi+32>>2];q[Ba+8>>2]=$l;}}function Sx(q){return 14528}function Tx(Ba){Ba=Ba|0;return q[Ba+96>>2]+4|0}function Ux(Ba,vi){Ba=Ba|0;vi=vi|0;var $l=0,am=0;am=q[vi+4>>2];$l=q[Ba+96>>2];q[$l+4>>2]=q[vi>>2];q[$l+8>>2]=am;am=q[vi+12>>2];q[$l+12>>2]=q[vi+8>>2];q[$l+16>>2]=am;Zc(Ba);}function Vx(Ba,vi,gm,hm){Ba=Ba|0;vi=vi|0;gm=gm|0;hm=hm|0;var im=0,jm=0,km=0,lm=0,mm=0,nm=0,om=0,pm=0;lm=P-80|0;P=lm;a:{if((hm|0)<=0){break a}while(1){q[((im<<4)+gm|0)+12>>2]=-581039253;im=im+1|0;if((im|0)!=(hm|0)){continue}break}if((hm|0)<1){break a}mm=lm- -64|0;pm=lm+40|4;while(1){q[lm+40>>2]=14472;jm=pm;q[jm+8>>2]=0;q[jm+12>>2]=0;q[jm>>2]=0;q[jm+4>>2]=0;q[lm+60>>2]=-581039253;nm=om<<4;im=nm+vi|0;km=q[im+12>>2];q[mm+8>>2]=q[im+8>>2];q[mm+12>>2]=km;km=q[im+4>>2];q[mm>>2]=q[im>>2];q[mm+4>>2]=km;im=lm;q[im+32>>2]=1566444395;q[im+36>>2]=0;q[im+24>>2]=1566444395;q[im+28>>2]=1566444395;km=q[Ba+96>>2];q[im+16>>2]=-581039253;q[im+20>>2]=0;q[im+8>>2]=-581039253;q[im+12>>2]=-581039253;n[q[q[km>>2]+8>>2]](km,im+40|0,im+8|0,im+24|0);im=gm+nm|0;nm=q[jm+12>>2];q[im+8>>2]=q[jm+8>>2];q[im+12>>2]=nm;km=q[jm+4>>2];q[im>>2]=q[jm>>2];q[im+4>>2]=km;om=om+1|0;if((om|0)!=(hm|0)){continue}break}}P=lm+80|0;}function Wx(Ba,vi,gm){Ba=Ba|0;vi=vi|0;gm=gm|0;var hm=0,qm=x(0),rm=x(0),sm=x(0),tm=x(0),um=0,vm=0,wm=0;hm=P-80|0;P=hm;q[Ba>>2]=0;q[Ba+4>>2]=0;q[Ba+8>>2]=0;q[Ba+12>>2]=0;rm=u[gm>>2];sm=u[gm+4>>2];tm=u[gm+8>>2];qm=x(x(x(rm*rm)+x(sm*sm))+x(tm*tm));a:{if(qm<x(9999999747378752e-20)){um=1065353216;qm=x(0);break a}qm=x(x(1)/x(E(qm)));vm=(j(x(tm*qm)),e(0));wm=(j(x(sm*qm)),e(0));um=(j(x(rm*qm)),e(0));qm=u[gm+12>>2];}q[hm+52>>2]=0;q[hm+56>>2]=0;u[hm+76>>2]=qm;q[hm+72>>2]=vm;q[hm+68>>2]=wm;q[hm+44>>2]=0;q[hm+48>>2]=0;q[hm+40>>2]=14472;q[hm+64>>2]=um;q[hm+60>>2]=-581039253;q[hm+32>>2]=1566444395;q[hm+36>>2]=0;q[hm+24>>2]=1566444395;q[hm+28>>2]=1566444395;vi=q[vi+96>>2];q[hm+16>>2]=-581039253;q[hm+20>>2]=0;q[hm+8>>2]=-581039253;q[hm+12>>2]=-581039253;n[q[q[vi>>2]+8>>2]](vi,hm+40|0,hm+8|0,hm+24|0);vi=q[hm+56>>2];q[Ba+8>>2]=q[hm+52>>2];q[Ba+12>>2]=vi;vi=q[hm+48>>2];q[Ba>>2]=q[hm+44>>2];q[Ba+4>>2]=vi;P=hm+80|0;}function Xx(Ba,vi,gm){Ba=Ba|0;vi=vi|0;gm=gm|0;fb(Ba,vi,gm);q[vi+28>>2]=q[Ba+32>>2];q[vi+32>>2]=q[Ba+36>>2];q[vi+36>>2]=q[Ba+40>>2];q[vi+40>>2]=q[Ba+44>>2];q[vi+12>>2]=q[Ba+16>>2];q[vi+16>>2]=q[Ba+20>>2];q[vi+20>>2]=q[Ba+24>>2];q[vi+24>>2]=q[Ba+28>>2];gm=q[Ba+48>>2];q[vi+48>>2]=0;q[vi+44>>2]=gm;Ba=q[Ba+56>>2];q[vi+56>>2]=0;q[vi+52>>2]=Ba;return 14273}function Yx(q){return 14260}function Zx(Ba,vi){Ba=Ba|0;vi=vi|0;var gm=0,xm=x(0),ym=x(0),zm=x(0),Am=x(0),Bm=x(0),Cm=x(0),Dm=x(0),Em=x(0),Fm=x(0);xm=u[Ba+16>>2];gm=Ba+32|0;ym=u[gm>>2];zm=u[Ba+20>>2];Am=u[Ba+36>>2];Bm=u[Ba+24>>2];Cm=u[Ba+40>>2];Ub(Ba,vi);Dm=u[vi>>2];Em=u[vi+4>>2];Fm=u[vi+8>>2];q[Ba+44>>2]=0;u[Ba+40>>2]=Fm*x(Cm/Bm);u[Ba+36>>2]=Em*x(Am/zm);u[gm>>2]=Dm*x(ym/xm);q[Ba+48>>2]=q[((q[Ba+56>>2]+2|0)%3<<2)+gm>>2];}function _x(Ba){var vi=0;vi=P-16|0;P=vi;q[vi+12>>2]=Ba;Ba=q[q[vi+12>>2]+68>>2];Ba=n[q[q[Ba>>2]+36>>2]](Ba)|0;P=vi+16|0;return Ba}function $x(Ba,Gm,Hm,Im){Ba=Ba|0;Gm=Gm|0;Hm=Hm|0;Im=Im|0;var Jm=x(0),Km=0,Lm=x(0),Mm=x(0),Nm=x(0),Om=x(0),Pm=0,Qm=x(0),Rm=x(0),Sm=x(0),Tm=x(0),Um=x(0),Vm=x(0),Wm=x(0),Xm=x(0),Ym=x(0),Zm=x(0);Pm=Ba+32|0;Km=q[Ba+56>>2];Jm=u[Pm+((Km+2|0)%3<<2)>>2];Ba=P-16|0;q[Ba+12>>2]=0;u[Ba+8>>2]=Jm;u[Ba+4>>2]=Jm;u[Ba>>2]=Jm;Km=Km<<2;u[Km+Ba>>2]=Jm+u[Km+Pm>>2];Qm=u[Gm+52>>2];Lm=u[Gm+24>>2];Tm=u[Gm+20>>2];Rm=u[Gm+56>>2];Mm=u[Gm+40>>2];Um=u[Gm+36>>2];Sm=u[Gm+48>>2];Vm=u[Gm+8>>2];Wm=u[Gm>>2];Xm=u[Gm+4>>2];Ym=u[Gm+16>>2];Zm=u[Gm+32>>2];Jm=u[Ba+8>>2];Nm=u[Ba>>2];Om=u[Ba+4>>2];q[Hm+12>>2]=0;Mm=x(x(x(Nm*x(y(Zm)))+x(Om*x(y(Um))))+x(Jm*x(y(Mm))));u[Hm+8>>2]=Rm-Mm;Lm=x(x(x(Nm*x(y(Ym)))+x(Om*x(y(Tm))))+x(Jm*x(y(Lm))));u[Hm+4>>2]=Qm-Lm;Jm=x(x(x(Nm*x(y(Wm)))+x(Om*x(y(Xm))))+x(Jm*x(y(Vm))));u[Hm>>2]=Sm-Jm;q[Im+12>>2]=0;u[Im+8>>2]=Rm+Mm;u[Im+4>>2]=Qm+Lm;u[Im>>2]=Sm+Jm;}function ay(Ba,Gm,Hm){Ba=Ba|0;Gm=x(Gm);Hm=Hm|0;var Im=x(0),_m=x(0),$m=x(0),an=0,bn=0,cn=0;cn=Ba+32|0;bn=q[Ba+56>>2];an=q[cn+((bn+2|0)%3<<2)>>2];Ba=P-16|0;q[Ba+12>>2]=0;q[Ba+8>>2]=an;q[Ba+4>>2]=an;q[Ba>>2]=an;an=bn<<2;bn=an+Ba|0;u[bn>>2]=u[an+cn>>2]+u[bn>>2];Im=u[Ba+8>>2];Gm=x(Gm*x(.0833333283662796));_m=u[Ba>>2];_m=x(_m+_m);_m=x(_m*_m);$m=u[Ba+4>>2];$m=x($m+$m);$m=x($m*$m);u[Hm+8>>2]=Gm*x(_m+$m);Im=x(Im+Im);Im=x(Im*Im);u[Hm+4>>2]=Gm*x(_m+Im);u[Hm>>2]=Gm*x($m+Im);}function by(Ba,Gm,Hm,dn){Ba=Ba|0;Gm=Gm|0;Hm=Hm|0;dn=dn|0;var en=0,fn=0,gn=0,hn=x(0),jn=0,kn=x(0),ln=x(0),mn=x(0),nn=x(0),on=0,pn=x(0),qn=x(0),rn=x(0),sn=x(0);en=P-16|0;if((dn|0)>=1){while(1){q[en+8>>2]=0;q[en+12>>2]=0;q[en>>2]=0;q[en+4>>2]=0;gn=q[Ba+56>>2];fn=gn<<2;jn=fn+en|0;fn=Ba+fn|0;kn=u[fn+32>>2];q[jn>>2]=q[fn+32>>2];nn=u[en>>2];jn=on<<4;fn=jn+Gm|0;hn=u[fn>>2];rn=u[en+4>>2];pn=u[fn+4>>2];sn=u[en+8>>2];qn=u[fn+8>>2];ln=x(x(x(nn*hn)+x(rn*pn))+x(sn*qn));mn=x(-0xde0b6b000000000);a:{if(!(ln>x(-0xde0b6b000000000))){break a}gn=Hm+jn|0;q[gn+12>>2]=q[en+12>>2];u[gn+8>>2]=sn;u[gn+4>>2]=rn;u[gn>>2]=nn;qn=u[fn+8>>2];pn=u[fn+4>>2];hn=u[fn>>2];gn=q[Ba+56>>2];kn=u[((gn<<2)+Ba|0)+32>>2];mn=ln;}nn=mn;q[en+8>>2]=0;q[en+12>>2]=0;q[en>>2]=0;q[en+4>>2]=0;u[(gn<<2)+en>>2]=-kn;kn=u[en>>2];ln=u[en+4>>2];mn=x(x(kn*hn)+x(ln*pn));hn=u[en+8>>2];if(!!(x(mn+x(hn*qn))>nn)){fn=Hm+jn|0;q[fn+12>>2]=q[en+12>>2];u[fn+8>>2]=hn;u[fn+4>>2]=ln;u[fn>>2]=kn;}on=on+1|0;if((on|0)!=(dn|0)){continue}break}}}function cy(Ba,Gm,Hm){Ba=Ba|0;Gm=Gm|0;Hm=Hm|0;var dn=0,tn=x(0),un=x(0),vn=x(0),wn=x(0),xn=x(0),yn=x(0),zn=0,An=x(0),Bn=x(0),Cn=x(0);dn=P-16|0;q[Ba>>2]=0;q[Ba+4>>2]=0;q[Ba+8>>2]=0;q[Ba+12>>2]=0;un=u[Hm>>2];xn=u[Hm+4>>2];tn=u[Hm+8>>2];vn=x(x(x(un*un)+x(xn*xn))+x(tn*tn));a:{if(vn<x(9999999747378752e-20)){vn=x(0);un=x(1);break a}wn=tn;tn=x(x(1)/x(E(vn)));yn=x(wn*tn);vn=x(xn*tn);un=x(un*tn);}q[dn+8>>2]=0;q[dn+12>>2]=0;q[dn>>2]=0;q[dn+4>>2]=0;Hm=q[Gm+56>>2]<<2;zn=Hm+dn|0;An=u[(Gm+Hm|0)+32>>2];u[zn>>2]=An;xn=x(-0xde0b6b000000000);Bn=u[dn>>2];Cn=u[dn+4>>2];wn=u[dn+8>>2];tn=x(x(x(un*Bn)+x(vn*Cn))+x(yn*wn));if(!!(tn>x(-0xde0b6b000000000))){q[Ba+12>>2]=q[dn+12>>2];u[Ba+8>>2]=wn;u[Ba+4>>2]=Cn;u[Ba>>2]=Bn;xn=tn;}q[dn+8>>2]=0;q[dn+12>>2]=0;q[dn>>2]=0;q[dn+4>>2]=0;u[zn>>2]=-An;wn=un;un=u[dn>>2];tn=u[dn+4>>2];wn=x(x(wn*un)+x(vn*tn));vn=u[dn+8>>2];if(!!(x(wn+x(yn*vn))>xn)){q[Ba+12>>2]=q[dn+12>>2];u[Ba+8>>2]=vn;u[Ba+4>>2]=tn;u[Ba>>2]=un;}}function dy(Ba,Gm,Hm){Aa(Ba);u[Ba+48>>2]=Gm;q[Ba>>2]=14136;q[Ba+56>>2]=1;q[Ba+4>>2]=10;q[Ba+44>>2]=0;u[Ba+40>>2]=Gm;u[Ba+36>>2]=Hm*x(.5);u[Ba+32>>2]=Gm;}function ey(Ba,Gm,Hm,Dn){Ba=Ba|0;Gm=Gm|0;Hm=Hm|0;Dn=Dn|0;var En=0,Fn=x(0),Gn=x(0),Hn=x(0),In=x(0),Jn=x(0),Kn=x(0),Ln=x(0),Mn=x(0),Nn=x(0),On=x(0),Pn=x(0),Qn=x(0),Rn=0,Sn=0,Tn=x(0),Un=x(0),Vn=x(0),Wn=x(0),Xn=0,Yn=0;En=P-80|0;P=En;Wn=x(n[q[q[Ba>>2]+48>>2]](Ba));while(1){q[En+72>>2]=0;q[En+76>>2]=0;q[En+64>>2]=0;q[En+68>>2]=0;Rn=Sn<<2;Xn=Rn+(En- -64|0)|0;q[Xn>>2]=1065353216;In=u[Gm+32>>2];Jn=u[Gm>>2];Kn=u[Gm+16>>2];Ln=u[Gm+36>>2];Mn=u[Gm+4>>2];Nn=u[Gm+20>>2];Fn=u[Gm+40>>2];Gn=u[Gm+8>>2];Hn=u[Gm+24>>2];q[En+44>>2]=0;On=Gn;Gn=u[En+64>>2];Pn=Hn;Hn=u[En+68>>2];Qn=Fn;Fn=u[En+72>>2];u[En+40>>2]=x(x(On*Gn)+x(Pn*Hn))+x(Qn*Fn);u[En+36>>2]=x(x(Gn*Mn)+x(Hn*Nn))+x(Fn*Ln);u[En+32>>2]=x(x(Jn*Gn)+x(Kn*Hn))+x(In*Fn);n[q[q[Ba>>2]+64>>2]](En+48|0,Ba,En+32|0);In=u[Gm+48>>2];Jn=u[Gm+8>>2];Kn=u[Gm>>2];Ln=u[Gm+4>>2];Mn=u[Gm+52>>2];Nn=u[Gm+24>>2];Qn=u[Gm+16>>2];Tn=u[Gm+20>>2];Gn=u[Gm+56>>2];Fn=u[Gm+40>>2];Hn=u[Gm+32>>2];Un=u[Gm+36>>2];q[En+44>>2]=0;On=Gn;Gn=u[En+48>>2];Vn=x(Hn*Gn);Hn=u[En+52>>2];Pn=Fn;Fn=u[En+56>>2];u[En+40>>2]=On+x(x(Vn+x(Un*Hn))+x(Pn*Fn));u[En+36>>2]=Mn+x(x(x(Gn*Qn)+x(Hn*Tn))+x(Fn*Nn));u[En+32>>2]=In+x(x(x(Gn*Kn)+x(Hn*Ln))+x(Fn*Jn));Yn=(En+32|0)+Rn|0;u[Dn+Rn>>2]=Wn+u[Yn>>2];q[Xn>>2]=-1082130432;In=u[Gm+32>>2];Jn=u[Gm>>2];Kn=u[Gm+16>>2];Ln=u[Gm+36>>2];Mn=u[Gm+4>>2];Nn=u[Gm+20>>2];Fn=u[Gm+40>>2];Gn=u[Gm+8>>2];Hn=u[Gm+24>>2];q[En+12>>2]=0;On=Gn;Gn=u[En+64>>2];Pn=Hn;Hn=u[En+68>>2];Qn=Fn;Fn=u[En+72>>2];u[En+8>>2]=x(x(On*Gn)+x(Pn*Hn))+x(Qn*Fn);u[En+4>>2]=x(x(Gn*Mn)+x(Hn*Nn))+x(Fn*Ln);u[En>>2]=x(x(Jn*Gn)+x(Kn*Hn))+x(In*Fn);n[q[q[Ba>>2]+64>>2]](En+16|0,Ba,En);In=u[Gm+48>>2];Jn=u[Gm+8>>2];Kn=u[Gm>>2];Ln=u[Gm+4>>2];Mn=u[Gm+52>>2];Nn=u[Gm+24>>2];Qn=u[Gm+16>>2];Tn=u[Gm+20>>2];Gn=u[Gm+56>>2];Fn=u[Gm+40>>2];Hn=u[Gm+32>>2];Un=u[Gm+36>>2];q[En+44>>2]=0;On=Gn;Gn=u[En+16>>2];Vn=x(Hn*Gn);Hn=u[En+20>>2];Pn=Fn;Fn=u[En+24>>2];u[En+40>>2]=On+x(x(Vn+x(Un*Hn))+x(Pn*Fn));u[En+36>>2]=Mn+x(x(x(Gn*Qn)+x(Hn*Tn))+x(Fn*Nn));u[En+32>>2]=In+x(x(x(Gn*Kn)+x(Hn*Ln))+x(Fn*Jn));u[Hm+Rn>>2]=u[Yn>>2]-Wn;Sn=Sn+1|0;if((Sn|0)!=3){continue}break}P=En+80|0;}function fy(Ba,Gm,Hm){Ba=Ba|0;Gm=Gm|0;Hm=Hm|0;var Dn=0,Zn=x(0),_n=x(0),$n=x(0),ao=0,bo=x(0),co=x(0),eo=x(0),fo=x(0);Dn=P-32|0;P=Dn;ao=q[Hm+12>>2];q[Dn+24>>2]=q[Hm+8>>2];q[Dn+28>>2]=ao;ao=q[Hm+4>>2];q[Dn+16>>2]=q[Hm>>2];q[Dn+20>>2]=ao;Zn=u[Dn+16>>2];$n=u[Dn+20>>2];_n=u[Dn+24>>2];if(!!(x(x(x(Zn*Zn)+x($n*$n))+x(_n*_n))<x(1.4210854715202004e-14))){q[Dn+24>>2]=-1082130432;q[Dn+28>>2]=0;q[Dn+16>>2]=-1082130432;q[Dn+20>>2]=-1082130432;_n=x(-1);$n=x(-1);Zn=x(-1);}bo=_n;_n=x(x(1)/x(E(x(x(x(Zn*Zn)+x($n*$n))+x(_n*_n)))));u[Dn+24>>2]=bo*_n;u[Dn+20>>2]=$n*_n;u[Dn+16>>2]=Zn*_n;eb(Dn,Gm,Dn+16|0);a:{b:{Hm=q[Gm+4>>2];if(Hm>>>0>13){break b}c:{switch(Hm-1|0){case 7:Zn=x(u[Gm+32>>2]*u[Gm+16>>2]);break a;default:Zn=u[Gm+48>>2];break a;case 0:Zn=u[Gm+48>>2];break a;case 12:Zn=u[Gm+48>>2];break a;case 10:Zn=u[Gm+48>>2];break a;case 9:Zn=u[Gm+48>>2];break a;case 1:case 2:case 5:case 6:case 8:case 11:break b;case 3:case 4:break c}}Zn=u[Gm+48>>2];break a}Zn=x(n[q[q[Gm>>2]+48>>2]](Gm));}$n=u[Dn>>2];_n=u[Dn+16>>2];bo=u[Dn+4>>2];co=u[Dn+20>>2];eo=u[Dn+8>>2];fo=u[Dn+24>>2];q[Ba+12>>2]=0;u[Ba+8>>2]=eo+x(Zn*fo);u[Ba+4>>2]=bo+x(Zn*co);u[Ba>>2]=$n+x(Zn*_n);P=Dn+32|0;}function gy(Ba,Gm,Hm,go,ho,io,jo){Ba=Ba|0;Gm=Gm|0;Hm=Hm|0;go=go|0;ho=ho|0;io=io|0;jo=jo|0;var ko=0,lo=x(0),mo=x(0),no=x(0),oo=x(0),po=x(0),qo=x(0),ro=x(0),so=x(0),to=x(0),uo=x(0),vo=x(0),wo=x(0),xo=x(0),yo=x(0),zo=x(0),Ao=x(0),Bo=x(0),Co=x(0),Do=x(0),Eo=x(0),Fo=x(0),Go=x(0),Ho=x(0),Io=x(0),Jo=x(0),Ko=x(0),Lo=x(0),Mo=x(0),No=x(0),Oo=x(0);ko=P-48|0;P=ko;oo=u[Gm+36>>2];po=u[Gm+20>>2];qo=u[Gm+40>>2];ro=u[Gm+24>>2];so=u[Gm+4>>2];to=u[Gm+8>>2];lo=u[Hm+8>>2];uo=u[Gm+32>>2];mo=u[Hm>>2];vo=u[Gm>>2];no=u[Hm+4>>2];wo=u[Gm+16>>2];q[ko+44>>2]=0;u[ko+32>>2]=x(x(vo*mo)+x(wo*no))+x(uo*lo);u[ko+40>>2]=x(x(mo*to)+x(no*ro))+x(lo*qo);u[ko+36>>2]=x(x(mo*so)+x(no*po))+x(lo*oo);n[q[q[Ba>>2]+64>>2]](ko+16|0,Ba,ko+32|0);to=u[Gm+56>>2];uo=u[Gm+40>>2];vo=u[Gm+36>>2];so=u[Gm+52>>2];wo=u[Gm+24>>2];xo=u[Gm+20>>2];yo=u[Gm+32>>2];ro=u[Gm+48>>2];zo=u[Gm+8>>2];Ao=u[Gm>>2];Bo=u[Gm+4>>2];Co=u[Gm+16>>2];lo=u[ko+24>>2];mo=u[ko+16>>2];no=u[ko+20>>2];q[ko+12>>2]=0;u[ko+8>>2]=-u[ko+40>>2];u[ko+4>>2]=-u[ko+36>>2];u[ko>>2]=-u[ko+32>>2];n[q[q[Ba>>2]+64>>2]](ko+16|0,Ba,ko);Do=u[Gm+56>>2];Eo=u[Gm+40>>2];Fo=u[Gm+36>>2];Go=u[Gm+52>>2];Ho=u[Gm+24>>2];Io=u[Gm+20>>2];Jo=u[Gm+32>>2];Ko=u[Gm+48>>2];Lo=u[Gm+8>>2];Mo=u[Gm>>2];No=u[Gm+4>>2];Oo=u[Gm+16>>2];oo=u[ko+24>>2];po=u[ko+16>>2];qo=u[ko+20>>2];ro=x(ro+x(x(x(mo*Ao)+x(no*Bo))+x(lo*zo)));so=x(so+x(x(x(mo*Co)+x(no*xo))+x(lo*wo)));lo=x(to+x(x(x(mo*yo)+x(no*vo))+x(lo*uo)));u[go>>2]=x(x(ro*u[Hm>>2])+x(so*u[Hm+4>>2]))+x(lo*u[Hm+8>>2]);mo=x(Ko+x(x(x(po*Mo)+x(qo*No))+x(oo*Lo)));no=x(Go+x(x(x(po*Oo)+x(qo*Io))+x(oo*Ho)));oo=x(Do+x(x(x(po*Jo)+x(qo*Fo))+x(oo*Eo)));u[ho>>2]=x(x(mo*u[Hm>>2])+x(no*u[Hm+4>>2]))+x(oo*u[Hm+8>>2]);q[jo+12>>2]=0;u[jo+8>>2]=oo;u[jo+4>>2]=no;u[jo>>2]=mo;q[io+12>>2]=0;u[io+8>>2]=lo;u[io+4>>2]=so;u[io>>2]=ro;po=u[go>>2];qo=u[ho>>2];if(!!(po>qo)){u[go>>2]=qo;u[ho>>2]=po;q[jo+12>>2]=0;u[jo+8>>2]=lo;u[jo+4>>2]=so;u[jo>>2]=ro;q[io+12>>2]=0;u[io+8>>2]=oo;u[io+4>>2]=no;u[io>>2]=mo;}P=ko+48|0;}function hy(Ba,Gm){Ba=Ba|0;Gm=Gm|0;var Hm=0,go=0,ho=0,io=0,jo=0,Po=0,Qo=0;Hm=(ho=Gm,io=n[q[q[Ba>>2]+52>>2]](Ba)|0,jo=1,go=q[q[Gm>>2]+16>>2],n[go](ho|0,io|0,jo|0)|0);jo=Gm,io=Hm,ho=n[q[q[Ba>>2]+56>>2]](Ba,q[Hm+8>>2],Gm)|0,Po=1346455635,Qo=Ba,go=q[q[Gm>>2]+20>>2],n[go](jo|0,io|0,ho|0,Po|0,Qo|0);}function iy(Ba){Ba=Ba|0;var Gm=0,Ro=x(0),So=x(0);Gm=P-32|0;P=Gm;n[q[q[Ba>>2]+12>>2]](Ba,Gm+16|0,Gm+12|0);P=Gm+32|0;Ro=u[Gm+16>>2];So=x(Ro*Ro);Ro=u[Gm+20>>2];So=x(So+x(Ro*Ro));Ro=u[Gm+24>>2];return x(x(u[Gm+12>>2]+x(E(x(So+x(Ro*Ro))))))}function jy(Ba,To){Ba=Ba|0;To=x(To);return x(x(x(n[q[q[Ba>>2]+16>>2]](Ba))*To))}function ky(Ba,To,Uo){Ba=Ba|0;To=To|0;Uo=Uo|0;var Vo=0,Wo=x(0),Xo=x(0),Yo=x(0),Zo=x(0),_o=x(0),$o=x(0),ap=x(0),bp=x(0);Vo=P-96|0;P=Vo;q[Vo+44>>2]=0;q[Vo+48>>2]=0;q[Vo+56>>2]=0;q[Vo+60>>2]=0;q[Vo+52>>2]=1065353216;q[Vo+76>>2]=0;q[Vo+80>>2]=0;q[Vo+72>>2]=1065353216;q[Vo+84>>2]=0;q[Vo+88>>2]=0;q[Vo+92>>2]=0;q[Vo+36>>2]=0;q[Vo+40>>2]=0;q[Vo+32>>2]=1065353216;q[Vo+64>>2]=0;q[Vo+68>>2]=0;n[q[q[Ba>>2]+8>>2]](Ba,Vo+32|0,Vo+16|0,Vo);Zo=u[Vo>>2];_o=u[Vo+16>>2];Wo=x(Zo-_o);Yo=x(Wo*Wo);Wo=u[Vo+4>>2];$o=u[Vo+20>>2];Xo=x(Wo-$o);bp=x(Yo+x(Xo*Xo));Xo=u[Vo+8>>2];Yo=u[Vo+24>>2];ap=x(Xo-Yo);u[Uo>>2]=x(E(x(bp+x(ap*ap))))*x(.5);q[To+12>>2]=0;u[To+8>>2]=x(Xo+Yo)*x(.5);u[To+4>>2]=x(Wo+$o)*x(.5);u[To>>2]=x(Zo+_o)*x(.5);P=Vo+96|0;}function ly(q){return 13732}function my(q){q=q|0;return q+20|0}function ny(Ba,To){Ba=Ba|0;To=To|0;var Uo=0;Uo=q[To+4>>2];q[Ba+20>>2]=q[To>>2];q[Ba+24>>2]=Uo;Uo=q[To+12>>2];q[Ba+28>>2]=q[To+8>>2];q[Ba+32>>2]=Uo;}function oy(q,Ba,To){Ba=x(Ba);}function py(q,Ba){q=q|0;Ba=Ba|0;Ub(q,Ba);Zc(q);}function qy(Ba,To,cp){Ba=Ba|0;To=x(To);cp=cp|0;var dp=0,ep=x(0),fp=x(0),gp=x(0),hp=x(0),ip=x(0),jp=x(0),kp=x(0);dp=P-96|0;P=dp;ep=x(n[q[q[Ba>>2]+48>>2]](Ba));q[dp+44>>2]=0;q[dp+48>>2]=0;q[dp+56>>2]=0;q[dp+60>>2]=0;q[dp+52>>2]=1065353216;q[dp+76>>2]=0;q[dp+80>>2]=0;q[dp+72>>2]=1065353216;q[dp+84>>2]=0;q[dp+88>>2]=0;q[dp+92>>2]=0;q[dp+36>>2]=0;q[dp+40>>2]=0;q[dp+32>>2]=1065353216;q[dp+64>>2]=0;q[dp+68>>2]=0;n[q[q[Ba>>2]+8>>2]](Ba,dp+32|0,dp+16|0,dp);hp=u[dp+24>>2];ip=u[dp+8>>2];fp=u[dp+16>>2];gp=u[dp>>2];jp=u[dp+20>>2];kp=u[dp+4>>2];q[cp+12>>2]=0;To=x(To*x(.0833333283662796));fp=x(ep+x(x(gp-fp)*x(.5)));fp=x(fp+fp);fp=x(fp*fp);gp=x(ep+x(x(kp-jp)*x(.5)));gp=x(gp+gp);gp=x(gp*gp);u[cp+8>>2]=To*x(fp+gp);ep=x(ep+x(x(ip-hp)*x(.5)));ep=x(ep+ep);ep=x(ep*ep);u[cp+4>>2]=To*x(fp+ep);u[cp>>2]=To*x(gp+ep);P=dp+96|0;}function ry(Ba,To,cp,lp){Ba=Ba|0;To=To|0;cp=cp|0;lp=lp|0;var mp=0,np=0,op=x(0),pp=0,qp=0,rp=0,sp=0,tp=0,up=0,vp=0,wp=0,xp=x(0),yp=0,zp=x(0),Ap=x(0),Bp=x(0);qp=P-2048|0;P=qp;a:{if((lp|0)<=0){break a}while(1){q[((mp<<4)+cp|0)+12>>2]=-581039253;mp=mp+1|0;if((mp|0)!=(lp|0)){continue}break}if((lp|0)<1){break a}while(1){if((n[q[q[Ba>>2]+96>>2]](Ba)|0)>=1){mp=up<<4;rp=mp+cp|0;wp=rp;vp=To+mp|0;yp=vp;sp=0;while(1){tp=128;b:{c:{if(((n[q[q[Ba>>2]+96>>2]](Ba)|0)-sp|0)>127){break c}tp=(n[q[q[Ba>>2]+96>>2]](Ba)|0)-sp|0;if((tp|0)>=1){break c}op=x(-3.4028234663852886e+38);np=-1;break b}mp=0;while(1){n[q[q[Ba>>2]+108>>2]](Ba,mp,(mp<<4)+qp|0);mp=mp+1|0;if((tp|0)!=(mp|0)){continue}break}zp=u[yp+8>>2];Ap=u[vp+4>>2];Bp=u[vp>>2];mp=0;np=-1;op=x(-3.4028234663852886e+38);while(1){pp=(mp<<4)+qp|0;xp=x(x(x(Bp*u[pp>>2])+x(Ap*u[pp+4>>2]))+x(zp*u[pp+8>>2]));pp=xp>op;op=pp?xp:op;np=pp?mp:np;mp=mp+1|0;if((tp|0)!=(mp|0)){continue}break}}if(!!(op>u[wp+12>>2])){mp=(np<<4)+qp|0;np=q[mp+12>>2];q[rp+8>>2]=q[mp+8>>2];q[rp+12>>2]=np;np=q[mp+4>>2];q[rp>>2]=q[mp>>2];q[rp+4>>2]=np;u[wp+12>>2]=op;}sp=sp+128|0;if((sp|0)<(n[q[q[Ba>>2]+96>>2]](Ba)|0)){continue}break}}up=up+1|0;if((up|0)!=(lp|0)){continue}break}}P=qp+2048|0;}function sy(Ba,To,cp){Ba=Ba|0;To=To|0;cp=cp|0;var lp=0,Cp=x(0),Dp=x(0),Ep=x(0),Fp=x(0),Gp=0,Hp=0,Ip=0,Jp=0,Kp=x(0),Lp=x(0),Mp=x(0);Gp=P-2048|0;P=Gp;q[Ba>>2]=0;q[Ba+4>>2]=0;q[Ba+8>>2]=0;q[Ba+12>>2]=0;Ep=u[cp>>2];Cp=u[cp+4>>2];Fp=u[cp+8>>2];Dp=x(x(x(Ep*Ep)+x(Cp*Cp))+x(Fp*Fp));Kp=x(1);a:{if(Dp<x(9999999747378752e-20)){break a}Dp=x(x(1)/x(E(Dp)));Lp=x(Fp*Dp);Mp=x(Cp*Dp);Kp=x(Ep*Dp);}Dp=Kp;if((n[q[q[To>>2]+96>>2]](To)|0)>=1){Fp=x(-0xde0b6b000000000);while(1){Hp=128;b:{c:{if(((n[q[q[To>>2]+96>>2]](To)|0)-Ip|0)>127){break c}Hp=(n[q[q[To>>2]+96>>2]](To)|0)-Ip|0;if((Hp|0)>=1){break c}Cp=x(-3.4028234663852886e+38);Jp=-1;break b}cp=0;lp=0;while(1){n[q[q[To>>2]+108>>2]](To,lp,(lp<<4)+Gp|0);lp=lp+1|0;if((Hp|0)!=(lp|0)){continue}break}Jp=-1;Cp=x(-3.4028234663852886e+38);while(1){lp=(cp<<4)+Gp|0;Ep=x(x(x(Dp*u[lp>>2])+x(Mp*u[lp+4>>2]))+x(Lp*u[lp+8>>2]));lp=Ep>Cp;Cp=lp?Ep:Cp;Jp=lp?cp:Jp;cp=cp+1|0;if((Hp|0)!=(cp|0)){continue}break}}if(!!(Cp>Fp)){lp=(Jp<<4)+Gp|0;cp=q[lp+12>>2];q[Ba+8>>2]=q[lp+8>>2];q[Ba+12>>2]=cp;cp=q[lp+4>>2];q[Ba>>2]=q[lp>>2];q[Ba+4>>2]=cp;Fp=Cp;}Ip=Ip+128|0;if((Ip|0)<(n[q[q[To>>2]+96>>2]](To)|0)){continue}break}}P=Gp+2048|0;}function ty(Ba){var To=0;To=q[Ba+52>>2];if(To){if(r[Ba+56|0]){if(To){q[6658]=q[6658]+1;n[q[5256]](To);}}q[Ba+52>>2]=0;}q[Ba+52>>2]=0;q[Ba+44>>2]=0;q[Ba+48>>2]=0;o[Ba+56|0]=1;To=q[Ba+32>>2];if(To){if(r[Ba+36|0]){if(To){q[6658]=q[6658]+1;n[q[5256]](To);}}q[Ba+32>>2]=0;}q[Ba+32>>2]=0;q[Ba+24>>2]=0;q[Ba+28>>2]=0;o[Ba+36|0]=1;To=q[Ba+12>>2];if(To){if(r[Ba+16|0]){if(To){q[6658]=q[6658]+1;n[q[5256]](To);}}q[Ba+12>>2]=0;}q[Ba+12>>2]=0;o[Ba+16|0]=1;q[Ba+4>>2]=0;q[Ba+8>>2]=0;}function uy(Ba,cp,Np){var Op=0,Pp=0,Qp=0,Rp=0,Sp=0,Tp=0,Up=x(0),Vp=0,Wp=0,Xp=x(0),Yp=0,Zp=x(0),_p=x(0),$p=x(0),aq=x(0),bq=0,cq=x(0),dq=x(0),eq=x(0),fq=x(0),gq=x(0),hq=x(0),iq=x(0),jq=x(0);Vp=P-32|0;P=Vp;Up=u[Np+8>>2];a:{if(!!(x(y(Up))>x(.7071067690849304))){Zp=u[Np+4>>2];_p=x(x(Up*Up)+x(Zp*Zp));$p=x(x(1)/x(E(_p)));cq=x(_p*$p);Xp=u[Np>>2];_p=x($p*x(-Up));eq=x(Xp*_p);$p=x(Zp*$p);aq=x($p*x(-Xp));Zp=x(0);break a}$p=u[Np>>2];Zp=u[Np+4>>2];Xp=x(x($p*$p)+x(Zp*Zp));_p=x(x(1)/x(E(Xp)));eq=x(Xp*_p);Zp=x(_p*x(-Zp));aq=x(Up*Zp);_p=x($p*_p);cq=x(_p*x(-Up));$p=x(0);}Pp=q[Ba+4>>2];b:{if((Pp|0)>=2){Op=q[Ba+12>>2];while(1){Tp=w(Rp,24);Qp=Tp+Op|0;if(!!(x(x(x(Zp*u[Qp>>2])+x(_p*u[Qp+4>>2]))+x($p*u[Qp+8>>2]))<x(x(x(Zp*u[Op>>2])+x(_p*u[Op+4>>2]))+x($p*u[Op+8>>2])))){Pp=q[Op+20>>2];q[Vp+24>>2]=q[Op+16>>2];q[Vp+28>>2]=Pp;Pp=q[Op+12>>2];q[Vp+16>>2]=q[Op+8>>2];q[Vp+20>>2]=Pp;Pp=q[Op+4>>2];q[Vp+8>>2]=q[Op>>2];q[Vp+12>>2]=Pp;Pp=q[Qp+4>>2];q[Op>>2]=q[Qp>>2];q[Op+4>>2]=Pp;Pp=q[Qp+12>>2];q[Op+8>>2]=q[Qp+8>>2];q[Op+12>>2]=Pp;Pp=q[Qp+20>>2];q[Op+16>>2]=q[Qp+16>>2];q[Op+20>>2]=Pp;Pp=q[Vp+12>>2];Qp=Tp+q[Ba+12>>2]|0;Op=Qp;q[Op>>2]=q[Vp+8>>2];q[Op+4>>2]=Pp;Op=q[Vp+28>>2];q[Qp+16>>2]=q[Vp+24>>2];q[Qp+20>>2]=Op;Op=q[Vp+20>>2];q[Qp+8>>2]=q[Vp+16>>2];q[Qp+12>>2]=Op;Pp=q[Ba+4>>2];Op=q[Ba+12>>2];}Rp=Rp+1|0;if((Rp|0)<(Pp|0)){continue}break}q[Op+16>>2]=-246811958;if((Pp|0)>=2){fq=u[Op+8>>2];gq=u[Op+4>>2];iq=u[Op>>2];Rp=1;while(1){Xp=x(0);Qp=w(Rp,24)+Op|0;Up=x(u[Qp>>2]-iq);hq=x(u[Qp+4>>2]-gq);jq=x(u[Qp+8>>2]-fq);dq=x(x(x(cq*Up)+x(aq*hq))+x(eq*jq));Up=x(x(x(Zp*Up)+x(_p*hq))+x($p*jq));if(!(x(x(dq*dq)+x(Up*Up))<x(1.1920928955078125e-7))){Xp=x(y(dq));c:{if(!!(Up>=x(0))){Up=x(x(Up-Xp)/x(Up+Xp));Xp=x(.7853981852531433);break c}Up=x(x(Up+Xp)/x(Xp-Up));Xp=x(2.356194496154785);}Up=x(Xp+x(Up*x(-.7853981852531433)));Xp=dq<x(0)?x(-Up):Up;}u[Qp+16>>2]=Xp;Rp=Rp+1|0;if((Rp|0)!=(Pp|0)){continue}break}}Qp=q[Op+12>>2];q[Vp+16>>2]=q[Op+8>>2];q[Vp+20>>2]=Qp;Qp=q[Op+4>>2];q[Vp+8>>2]=q[Op>>2];q[Vp+12>>2]=Qp;Ee(Ba,Vp+8|0,1,Pp+ -1|0);Qp=q[Ba+12>>2];Pp=q[cp+4>>2];d:{if((Pp|0)!=q[cp+8>>2]){break d}Wp=Pp?Pp<<1:1;if((Pp|0)>=(Wp|0)){break d}Op=0;Rp=0;if(Wp){q[6657]=q[6657]+1;Rp=n[q[5255]](w(Wp,24),16)|0;Pp=q[cp+4>>2];}if((Pp|0)>=1){while(1){Tp=w(Op,24);Sp=Tp+Rp|0;Tp=Tp+q[cp+12>>2]|0;bq=q[Tp+4>>2];q[Sp>>2]=q[Tp>>2];q[Sp+4>>2]=bq;Yp=q[Tp+20>>2];q[Sp+16>>2]=q[Tp+16>>2];q[Sp+20>>2]=Yp;Yp=q[Tp+12>>2];q[Sp+8>>2]=q[Tp+8>>2];q[Sp+12>>2]=Yp;Op=Op+1|0;if((Pp|0)!=(Op|0)){continue}break}}Op=q[cp+12>>2];if(Op){if(r[cp+16|0]){if(Op){q[6658]=q[6658]+1;n[q[5256]](Op);}}q[cp+12>>2]=0;}q[cp+12>>2]=Rp;o[cp+16|0]=1;q[cp+8>>2]=Wp;Pp=q[cp+4>>2];}Rp=q[Qp+4>>2];Op=q[cp+12>>2]+w(Pp,24)|0;q[Op>>2]=q[Qp>>2];q[Op+4>>2]=Rp;Pp=q[Qp+20>>2];q[Op+16>>2]=q[Qp+16>>2];q[Op+20>>2]=Pp;Pp=q[Qp+12>>2];q[Op+8>>2]=q[Qp+8>>2];q[Op+12>>2]=Pp;Pp=q[cp+4>>2]+1|0;q[cp+4>>2]=Pp;Qp=q[Ba+12>>2];e:{if(q[cp+8>>2]!=(Pp|0)){break e}Wp=Pp?Pp<<1:1;if((Pp|0)>=(Wp|0)){break e}Op=0;Rp=0;if(Wp){q[6657]=q[6657]+1;Rp=n[q[5255]](w(Wp,24),16)|0;Pp=q[cp+4>>2];}if((Pp|0)>=1){while(1){Tp=w(Op,24);Sp=Tp+Rp|0;Tp=Tp+q[cp+12>>2]|0;bq=q[Tp+4>>2];q[Sp>>2]=q[Tp>>2];q[Sp+4>>2]=bq;Yp=q[Tp+20>>2];q[Sp+16>>2]=q[Tp+16>>2];q[Sp+20>>2]=Yp;Yp=q[Tp+12>>2];q[Sp+8>>2]=q[Tp+8>>2];q[Sp+12>>2]=Yp;Op=Op+1|0;if((Pp|0)!=(Op|0)){continue}break}}Op=q[cp+12>>2];if(Op){if(r[cp+16|0]){if(Op){q[6658]=q[6658]+1;n[q[5256]](Op);}}q[cp+12>>2]=0;}q[cp+12>>2]=Rp;o[cp+16|0]=1;q[cp+8>>2]=Wp;Pp=q[cp+4>>2];}Rp=q[Qp+28>>2];Op=q[cp+12>>2]+w(Pp,24)|0;q[Op>>2]=q[Qp+24>>2];q[Op+4>>2]=Rp;Pp=q[Qp+44>>2];q[Op+16>>2]=q[Qp+40>>2];q[Op+20>>2]=Pp;Pp=q[Qp+36>>2];q[Op+8>>2]=q[Qp+32>>2];q[Op+12>>2]=Pp;Op=q[cp+4>>2]+1|0;q[cp+4>>2]=Op;if(q[Ba+4>>2]==2){break b}Tp=2;while(1){f:{if((Op|0)<2){break f}Qp=q[Ba+12>>2]+w(Tp,24)|0;Up=u[Qp+8>>2];_p=u[Qp+4>>2];$p=u[Qp>>2];Zp=u[Np+8>>2];Xp=u[Np+4>>2];dq=u[Np>>2];Pp=q[cp+12>>2];while(1){Sp=w(Op,24)+Pp|0;Rp=Sp+ -48|0;cq=u[Rp>>2];Sp=Sp+ -24|0;eq=x(cq-u[Sp>>2]);aq=u[Rp+4>>2];fq=x(aq-_p);aq=x(aq-u[Sp+4>>2]);cq=x(cq-$p);hq=x(x(x(eq*fq)-x(aq*cq))*Zp);iq=aq;aq=u[Rp+8>>2];gq=x(aq-Up);aq=x(aq-u[Sp+8>>2]);if(!(x(hq+x(x(dq*x(x(iq*gq)-x(aq*fq)))+x(Xp*x(x(aq*cq)-x(eq*gq)))))>x(0))){Op=Op+ -1|0;q[cp+4>>2]=Op;if((Op|0)>1){continue}break f}break}g:{if(q[cp+8>>2]!=(Op|0)){break g}Wp=Op<<1;if((Op|0)>=(Wp|0)){break g}q[6657]=q[6657]+1;Pp=n[q[5255]](w(Op,48),16)|0;Op=0;Yp=q[cp+4>>2];if((Yp|0)>=1){while(1){Rp=w(Op,24);Sp=Rp+Pp|0;Rp=Rp+q[cp+12>>2]|0;bq=q[Rp+4>>2];q[Sp>>2]=q[Rp>>2];q[Sp+4>>2]=bq;bq=q[Rp+20>>2];q[Sp+16>>2]=q[Rp+16>>2];q[Sp+20>>2]=bq;bq=q[Rp+12>>2];q[Sp+8>>2]=q[Rp+8>>2];q[Sp+12>>2]=bq;Op=Op+1|0;if((Yp|0)!=(Op|0)){continue}break}}Op=q[cp+12>>2];if(Op){if(r[cp+16|0]){if(Op){q[6658]=q[6658]+1;n[q[5256]](Op);}}q[cp+12>>2]=0;}q[cp+12>>2]=Pp;o[cp+16|0]=1;q[cp+8>>2]=Wp;Op=q[cp+4>>2];}Rp=q[Qp+4>>2];Op=w(Op,24)+Pp|0;q[Op>>2]=q[Qp>>2];q[Op+4>>2]=Rp;Pp=q[Qp+20>>2];q[Op+16>>2]=q[Qp+16>>2];q[Op+20>>2]=Pp;Pp=q[Qp+12>>2];q[Op+8>>2]=q[Qp+8>>2];q[Op+12>>2]=Pp;Op=q[cp+4>>2]+1|0;q[cp+4>>2]=Op;}if((Op|0)==1){Qp=q[Ba+12>>2]+w(Tp,24)|0;Op=1;if(q[cp+8>>2]==1){q[6657]=q[6657]+1;Sp=n[q[5255]](48,16)|0;Op=0;Wp=q[cp+4>>2];if((Wp|0)>=1){while(1){Pp=w(Op,24);Rp=Pp+Sp|0;Pp=Pp+q[cp+12>>2]|0;bq=q[Pp+4>>2];q[Rp>>2]=q[Pp>>2];q[Rp+4>>2]=bq;Yp=q[Pp+20>>2];q[Rp+16>>2]=q[Pp+16>>2];q[Rp+20>>2]=Yp;Yp=q[Pp+12>>2];q[Rp+8>>2]=q[Pp+8>>2];q[Rp+12>>2]=Yp;Op=Op+1|0;if((Wp|0)!=(Op|0)){continue}break}}Op=q[cp+12>>2];if(Op){if(r[cp+16|0]){if(Op){q[6658]=q[6658]+1;n[q[5256]](Op);}}q[cp+12>>2]=0;}q[cp+12>>2]=Sp;o[cp+16|0]=1;q[cp+8>>2]=2;Op=q[cp+4>>2];}Rp=q[Qp+4>>2];Op=q[cp+12>>2]+w(Op,24)|0;q[Op>>2]=q[Qp>>2];q[Op+4>>2]=Rp;Pp=q[Qp+20>>2];q[Op+16>>2]=q[Qp+16>>2];q[Op+20>>2]=Pp;Pp=q[Qp+12>>2];q[Op+8>>2]=q[Qp+8>>2];q[Op+12>>2]=Pp;Op=q[cp+4>>2]+1|0;q[cp+4>>2]=Op;}Tp=Tp+1|0;if((Tp|0)!=q[Ba+4>>2]){continue}break}break b}if((Pp|0)!=1){break b}Pp=q[cp+4>>2];while(1){Np=q[Ba+12>>2];h:{if(q[cp+8>>2]!=(Pp|0)){break h}Sp=Pp?Pp<<1:1;if((Pp|0)>=(Sp|0)){break h}Op=0;Rp=0;if(Sp){q[6657]=q[6657]+1;Rp=n[q[5255]](w(Sp,24),16)|0;Pp=q[cp+4>>2];}if((Pp|0)>=1){while(1){Qp=w(Op,24);Tp=Qp+Rp|0;Qp=Qp+q[cp+12>>2]|0;Yp=q[Qp+4>>2];q[Tp>>2]=q[Qp>>2];q[Tp+4>>2]=Yp;Wp=q[Qp+20>>2];q[Tp+16>>2]=q[Qp+16>>2];q[Tp+20>>2]=Wp;Wp=q[Qp+12>>2];q[Tp+8>>2]=q[Qp+8>>2];q[Tp+12>>2]=Wp;Op=Op+1|0;if((Pp|0)!=(Op|0)){continue}break}}Qp=q[cp+12>>2];if(Qp){if(r[cp+16|0]){if(Qp){q[6658]=q[6658]+1;n[q[5256]](Qp);}}q[cp+12>>2]=0;}q[cp+12>>2]=Rp;o[cp+16|0]=1;q[cp+8>>2]=Sp;Pp=q[cp+4>>2];}Qp=q[cp+12>>2]+w(Pp,24)|0;Op=Qp;Pp=q[Np+4>>2];q[Op>>2]=q[Np>>2];q[Op+4>>2]=Pp;Op=q[Np+20>>2];q[Qp+16>>2]=q[Np+16>>2];q[Qp+20>>2]=Op;Op=q[Np+12>>2];q[Qp+8>>2]=q[Np+8>>2];q[Qp+12>>2]=Op;Pp=q[cp+4>>2]+1|0;q[cp+4>>2]=Pp;bq=bq+1|0;if((bq|0)<q[Ba+4>>2]){continue}break}}P=Vp+32|0;}function vy(Ba,cp){Ba=Ba|0;cp=cp|0;var Np=0,kq=0,lq=0,mq=0,nq=0,oq=0,pq=0,qq=0,rq=0,sq=x(0),tq=0,uq=0,vq=x(0),wq=x(0),xq=0,yq=0,zq=0,Aq=0,Bq=x(0),Cq=x(0),Dq=0,Eq=0,Fq=0,Gq=0,Hq=0,Iq=x(0),Jq=x(0);Np=P-240|0;P=Np;kq=q[Ba+56>>2];if(kq){n[q[q[kq>>2]>>2]](kq)|0;kq=q[Ba+56>>2];if(kq){q[6658]=q[6658]+1;n[q[5256]](kq);}}q[6657]=q[6657]+1;kq=n[q[5255]](132,16)|0;jz(kq);q[Ba+56>>2]=kq;q[Np+228>>2]=0;o[Np+232|0]=1;q[Np+220>>2]=0;q[Np+224>>2]=0;while(1){if((tq|0)<(n[q[q[Ba>>2]+96>>2]](Ba)|0)){lq=q[Np+220>>2];kq=lq;a:{if((kq|0)!=q[Np+224>>2]){break a}kq=lq;rq=kq?kq<<1:1;if((kq|0)>=(rq|0)){break a}mq=0;pq=0;if(rq){q[6657]=q[6657]+1;pq=n[q[5255]](rq<<4,16)|0;kq=q[Np+220>>2];}nq=q[Np+228>>2];b:{c:{if((kq|0)>=1){while(1){qq=mq<<4;uq=qq+pq|0;qq=nq+qq|0;Eq=q[qq+4>>2];q[uq>>2]=q[qq>>2];q[uq+4>>2]=Eq;zq=q[qq+12>>2];q[uq+8>>2]=q[qq+8>>2];q[uq+12>>2]=zq;mq=mq+1|0;if((mq|0)!=(kq|0)){continue}break c}}if(!nq){break b}}if(r[Np+232|0]){if(nq){q[6658]=q[6658]+1;n[q[5256]](nq);}kq=q[Np+220>>2];}q[Np+228>>2]=0;}q[Np+228>>2]=pq;o[Np+232|0]=1;q[Np+224>>2]=rq;}q[Np+220>>2]=kq+1;nq=q[Np+156>>2];lq=lq<<4;kq=lq+q[Np+228>>2]|0;q[kq>>2]=q[Np+152>>2];q[kq+4>>2]=nq;rq=q[Np+164>>2];q[kq+8>>2]=q[Np+160>>2];q[kq+12>>2]=rq;n[q[q[Ba>>2]+108>>2]](Ba,tq,lq+q[Np+228>>2]|0);tq=tq+1|0;continue}break}o[Np+188|0]=1;q[Np+184>>2]=0;o[Np+208|0]=1;q[Np+176>>2]=0;q[Np+180>>2]=0;q[Np+204>>2]=0;q[Np+196>>2]=0;q[Np+200>>2]=0;q[Np+164>>2]=0;o[Np+168|0]=1;q[Np+156>>2]=0;q[Np+160>>2]=0;d:{if(cp){q[Np+60>>2]=0;o[Np+64|0]=1;q[Np+52>>2]=0;q[Np+56>>2]=0;Wv(Np+216|0,Np+48|0);q[Np+140>>2]=0;o[Np+144|0]=1;q[Np+132>>2]=0;q[Np+136>>2]=0;if(q[Np+52>>2]>=1){nq=0;while(1){cp=q[Np+60>>2]+(nq<<4)|0;q[Np+112>>2]=q[cp+8>>2];kq=q[cp+4>>2];q[Np+104>>2]=q[cp>>2];q[Np+108>>2]=kq;sq=x(u[cp+12>>2]-x(n[q[q[Ba>>2]+48>>2]](Ba)));kq=q[Np+132>>2];e:{if((kq|0)!=q[Np+136>>2]){break e}cp=kq?kq<<1:1;if((kq|0)>=(cp|0)){break e}mq=0;pq=0;if(cp){q[6657]=q[6657]+1;pq=n[q[5255]](cp<<4,16)|0;kq=q[Np+132>>2];}if((kq|0)>=1){while(1){lq=mq<<4;rq=lq+pq|0;qq=rq;lq=lq+q[Np+140>>2]|0;uq=q[lq+4>>2];q[qq>>2]=q[lq>>2];q[qq+4>>2]=uq;qq=q[lq+12>>2];q[rq+8>>2]=q[lq+8>>2];q[rq+12>>2]=qq;mq=mq+1|0;if((mq|0)!=(kq|0)){continue}break}}kq=q[Np+140>>2];if(kq){if(r[Np+144|0]){if(kq){q[6658]=q[6658]+1;n[q[5256]](kq);}}q[Np+140>>2]=0;}q[Np+140>>2]=pq;o[Np+144|0]=1;q[Np+136>>2]=cp;kq=q[Np+132>>2];}cp=q[Np+140>>2]+(kq<<4)|0;kq=q[Np+108>>2];q[cp>>2]=q[Np+104>>2];q[cp+4>>2]=kq;kq=q[Np+112>>2];u[cp+12>>2]=sq;q[cp+8>>2]=kq;q[Np+132>>2]=q[Np+132>>2]+1;nq=nq+1|0;if((nq|0)<q[Np+52>>2]){continue}break}}q[Np+116>>2]=0;o[Np+120|0]=1;q[Np+108>>2]=0;q[Np+112>>2]=0;Vv(Np+128|0,Np+104|0);vh(Np+152|0,q[Np+116>>2],q[Np+108>>2]);cp=q[Np+116>>2];if(cp){if(r[Np+120|0]){if(cp){q[6658]=q[6658]+1;n[q[5256]](cp);}}q[Np+116>>2]=0;}cp=q[Np+140>>2];if(cp){if(r[Np+144|0]){if(cp){q[6658]=q[6658]+1;n[q[5256]](cp);}}q[Np+140>>2]=0;}cp=q[Np+60>>2];if(!cp){break d}if(r[Np+64|0]){if(cp){q[6658]=q[6658]+1;n[q[5256]](cp);}}q[Np+60>>2]=0;break d}vh(Np+152|0,q[Np+228>>2],q[Np+220>>2]);}lq=0;rq=q[Np+196>>2];cp=0;f:{if((rq|0)<1){break f}q[6657]=q[6657]+1;Hq=n[q[5255]](rq<<4,16)|0;mq=0;while(1){kq=q[Np+52>>2];cp=(mq<<4)+Hq|0;q[cp>>2]=q[Np+48>>2];q[cp+4>>2]=kq;kq=q[Np+60>>2];q[cp+8>>2]=q[Np+56>>2];q[cp+12>>2]=kq;mq=mq+1|0;if((rq|0)!=(mq|0)){continue}break}cp=Hq;}Eq=cp;q[Np+140>>2]=0;o[Np+144|0]=1;q[Np+132>>2]=0;q[Np+136>>2]=0;o[Np+63|0]=0;o[Np+64|0]=0;o[Np+65|0]=0;o[Np+66|0]=0;q[Np+56>>2]=0;q[Np+60>>2]=0;q[Np+48>>2]=0;q[Np+52>>2]=0;g:{if((rq|0)<=-1){oq=rq;while(1){cp=w(oq,36)+lq|0;kq=cp;lq=q[kq+12>>2];if(lq){if(r[cp+16|0]){if(lq){q[6658]=q[6658]+1;n[q[5256]](lq);}}q[kq+12>>2]=0;}o[cp+16|0]=1;q[kq+12>>2]=0;q[cp+4>>2]=0;q[cp+8>>2]=0;cp=oq+1|0;if(cp>>>0<oq>>>0){break g}lq=q[Np+140>>2];oq=cp;continue}}if(!rq){break g}ei(Np+128|0,rq);kq=Np+48|3;lq=kq;while(1){cp=q[Np+140>>2]+w(oq,36)|0;q[cp+4>>2]=0;q[cp+8>>2]=0;o[cp+16|0]=1;q[cp+12>>2]=0;nq=r[kq+4|0]|r[kq+5|0]<<8|(r[kq+6|0]<<16|r[kq+7|0]<<24);qq=r[kq|0]|r[kq+1|0]<<8|(r[kq+2|0]<<16|r[kq+3|0]<<24);o[cp+20|0]=qq;o[cp+21|0]=qq>>>8;o[cp+22|0]=qq>>>16;o[cp+23|0]=qq>>>24;o[cp+24|0]=nq;o[cp+25|0]=nq>>>8;o[cp+26|0]=nq>>>16;o[cp+27|0]=nq>>>24;nq=r[lq+12|0]|r[lq+13|0]<<8|(r[lq+14|0]<<16|r[lq+15|0]<<24);qq=r[lq+8|0]|r[lq+9|0]<<8|(r[lq+10|0]<<16|r[lq+11|0]<<24);o[cp+28|0]=qq;o[cp+29|0]=qq>>>8;o[cp+30|0]=qq>>>16;o[cp+31|0]=qq>>>24;o[cp+32|0]=nq;o[cp+33|0]=nq>>>8;o[cp+34|0]=nq>>>16;o[cp+35|0]=nq>>>24;oq=oq+1|0;if((rq|0)!=(oq|0)){continue}break}}q[Np+132>>2]=rq;nq=q[Ba+56>>2];mq=q[nq+8>>2];qq=q[Np+156>>2];if((mq|0)<(qq|0)){if(q[nq+12>>2]<(qq|0)){h:{if(!qq){kq=0;cp=mq;break h}q[6657]=q[6657]+1;kq=n[q[5255]](qq<<4,16)|0;cp=q[nq+8>>2];}if((cp|0)>=1){lq=0;while(1){oq=lq<<4;uq=oq+kq|0;oq=oq+q[nq+16>>2]|0;pq=q[oq+4>>2];q[uq>>2]=q[oq>>2];q[uq+4>>2]=pq;zq=q[oq+12>>2];q[uq+8>>2]=q[oq+8>>2];q[uq+12>>2]=zq;lq=lq+1|0;if((cp|0)!=(lq|0)){continue}break}}cp=q[nq+16>>2];if(cp){if(r[nq+20|0]){if(cp){q[6658]=q[6658]+1;n[q[5256]](cp);}}q[nq+16>>2]=0;}q[nq+16>>2]=kq;q[nq+12>>2]=qq;o[nq+20|0]=1;}while(1){kq=q[Np+52>>2];cp=q[nq+16>>2]+(mq<<4)|0;q[cp>>2]=q[Np+48>>2];q[cp+4>>2]=kq;kq=q[Np+60>>2];q[cp+8>>2]=q[Np+56>>2];q[cp+12>>2]=kq;mq=mq+1|0;if((qq|0)!=(mq|0)){continue}break}}q[nq+8>>2]=qq;mq=0;if((qq|0)>0){while(1){kq=mq<<4;cp=kq+q[q[Ba+56>>2]+16>>2]|0;kq=kq+q[Np+164>>2]|0;lq=q[kq+4>>2];q[cp>>2]=q[kq>>2];q[cp+4>>2]=lq;lq=q[kq+12>>2];q[cp+8>>2]=q[kq+8>>2];q[cp+12>>2]=lq;mq=mq+1|0;if((qq|0)!=(mq|0)){continue}break}}if((rq|0)>=1){qq=0;while(1){nq=0;Aq=q[Np+184>>2]+w(q[q[Np+204>>2]+(qq<<2)>>2],12)|0;pq=Aq;while(1){yq=q[(w(q[pq+4>>2],12)+pq|0)+8>>2];tq=w(qq,36);cp=tq+q[Np+140>>2]|0;oq=cp;lq=q[cp+4>>2];i:{if((lq|0)!=q[cp+8>>2]){break i}zq=lq?lq<<1:1;if((lq|0)>=(zq|0)){break i}mq=0;kq=0;if(zq){q[6657]=q[6657]+1;kq=n[q[5255]](zq<<2,16)|0;lq=q[oq+4>>2];}uq=q[cp+12>>2];j:{k:{if((lq|0)>=1){while(1){xq=mq<<2;q[xq+kq>>2]=q[uq+xq>>2];mq=mq+1|0;if((mq|0)!=(lq|0)){continue}break k}}if(!uq){break j}}if(r[cp+16|0]){if(uq){q[6658]=q[6658]+1;n[q[5256]](uq);}}q[cp+12>>2]=0;lq=q[oq+4>>2];}o[cp+16|0]=1;q[cp+12>>2]=kq;q[cp+8>>2]=zq;}q[q[cp+12>>2]+(lq<<2)>>2]=yq;q[oq+4>>2]=q[oq+4>>2]+1;if((nq|0)<=1){kq=q[Np+164>>2];cp=kq+(yq<<4)|0;sq=u[cp+4>>2];kq=kq+(q[pq+8>>2]<<4)|0;vq=u[kq+4>>2];wq=u[cp>>2];Bq=u[kq>>2];Cq=u[cp+8>>2];Iq=u[kq+8>>2];cp=(Np+48|0)+(nq<<4)|0;q[cp+12>>2]=0;wq=x(Bq-wq);vq=x(vq-sq);Bq=x(Iq-Cq);sq=x(x(1)/x(E(x(x(x(wq*wq)+x(vq*vq))+x(Bq*Bq)))));u[cp+8>>2]=Bq*sq;u[cp+4>>2]=vq*sq;u[cp>>2]=wq*sq;nq=nq+1|0;}cp=w(q[pq+4>>2],12)+pq|0;pq=w(q[cp>>2],12)+cp|0;if((Aq|0)!=(pq|0)){continue}break}l:{if((nq|0)==2){sq=u[Np+52>>2];wq=u[Np+68>>2];vq=u[Np+64>>2];Bq=u[Np+56>>2];Cq=u[Np+48>>2];Iq=u[Np+72>>2];cp=(qq<<4)+Eq|0;q[cp+12>>2]=0;Jq=x(x(wq*Cq)-x(sq*vq));wq=x(x(sq*Iq)-x(Bq*wq));vq=x(x(Bq*vq)-x(Iq*Cq));sq=x(x(1)/x(E(x(x(Jq*Jq)+x(x(wq*wq)+x(vq*vq))))));u[cp+8>>2]=Jq*sq;u[cp+4>>2]=vq*sq;sq=x(wq*sq);u[cp>>2]=sq;oq=q[Np+140>>2];kq=tq+oq|0;u[kq+20>>2]=sq;q[kq+24>>2]=q[cp+4>>2];cp=q[cp+8>>2];q[kq+32>>2]=1900671690;q[kq+28>>2]=cp;break l}cp=(qq<<4)+Eq|0;q[cp>>2]=0;q[cp+4>>2]=0;q[cp+8>>2]=0;q[cp+12>>2]=0;oq=q[Np+140>>2];}cp=oq+tq|0;lq=q[cp+4>>2];m:{if((lq|0)<1){sq=x(1.0000000150474662e+30);break m}nq=q[cp+12>>2];kq=(qq<<4)+Eq|0;wq=u[kq+8>>2];vq=u[kq+4>>2];Bq=u[kq>>2];oq=q[q[Ba+56>>2]+16>>2];sq=x(1.0000000150474662e+30);mq=0;while(1){kq=oq+(q[nq+(mq<<2)>>2]<<4)|0;Cq=x(x(x(u[kq>>2]*Bq)+x(u[kq+4>>2]*vq))+x(u[kq+8>>2]*wq));sq=sq>Cq?Cq:sq;mq=mq+1|0;if((mq|0)<(lq|0)){continue}break}}u[cp+32>>2]=-sq;qq=qq+1|0;if((rq|0)!=(qq|0)){continue}break}}rq=0;n:{if(q[Np+132>>2]<=0){zq=0;break n}uq=0;zq=0;kq=0;while(1){o:{if((kq|0)!=(rq|0)){break o}kq=rq?rq<<1:1;if((rq|0)>=(kq|0)){kq=rq;break o}mq=0;lq=0;if(kq){q[6657]=q[6657]+1;lq=n[q[5255]](kq<<2,16)|0;}p:{q:{if(rq){while(1){cp=mq<<2;q[cp+lq>>2]=q[cp+uq>>2];mq=mq+1|0;if((rq|0)!=(mq|0)){continue}break q}}if(uq){break q}kq=1;break p}if(zq){q[6658]=q[6658]+1;n[q[5256]](zq);}}zq=lq;uq=lq;}q[(rq<<2)+uq>>2]=rq;rq=rq+1|0;if((rq|0)<q[Np+132>>2]){continue}break}while(1){cp=rq+ -1|0;kq=q[(cp<<2)+uq>>2];q[6657]=q[6657]+1;qq=n[q[5255]](4,16)|0;q[qq>>2]=kq;r:{s:{if((cp|0)<1){rq=cp;cp=qq;yq=1;break s}mq=q[Np+140>>2];kq=mq+w(kq,36)|0;sq=u[kq+20>>2];wq=u[kq+28>>2];vq=u[kq+24>>2];pq=rq+ -2|0;lq=1;rq=cp;kq=qq;yq=1;while(1){oq=q[(pq<<2)+uq>>2];cp=w(oq,36)+mq|0;t:{if(!(x(x(x(sq*u[cp+20>>2])+x(vq*u[cp+24>>2]))+x(wq*u[cp+28>>2]))>x(.9990000128746033))){nq=lq;cp=kq;break t}u:{v:{if((lq|0)!=(yq|0)){break v}nq=lq?lq<<1:1;if((lq|0)>=(nq|0)){break v}mq=0;cp=0;if(nq){q[6657]=q[6657]+1;cp=n[q[5255]](nq<<2,16)|0;}w:{x:{if((lq|0)>=1){while(1){tq=mq<<2;q[tq+cp>>2]=q[qq+tq>>2];mq=mq+1|0;if((mq|0)!=(lq|0)){continue}break x}}if(!qq){break w}}if(kq){q[6658]=q[6658]+1;n[q[5256]](kq);}}qq=cp;break u}nq=lq;cp=kq;}q[(yq<<2)+qq>>2]=oq;yq=yq+1|0;mq=0;if((rq|0)<1){break t}while(1){kq=(mq<<2)+uq|0;if((oq|0)!=q[kq>>2]){mq=mq+1|0;if((rq|0)!=(mq|0)){continue}break t}break}if((rq|0)<=(mq|0)){break t}lq=kq;rq=rq+ -1|0;kq=(rq<<2)+uq|0;q[lq>>2]=q[kq>>2];q[kq>>2]=oq;}if((pq|0)>=1){pq=pq+ -1|0;mq=q[Np+140>>2];kq=cp;lq=nq;continue}break}y:{if((yq|0)>1){oq=0;q[Np+116>>2]=0;o[Np+120|0]=1;q[Np+108>>2]=0;q[Np+112>>2]=0;q[Np+40>>2]=0;q[Np+44>>2]=0;q[Np+32>>2]=0;q[Np+36>>2]=0;sq=x(0);wq=x(0);vq=x(0);kq=0;while(1){lq=q[Np+140>>2]+w(q[(kq<<2)+qq>>2],36)|0;Bq=u[lq+24>>2];Cq=u[lq+28>>2];u[Np+32>>2]=u[lq+20>>2]+vq;u[Np+40>>2]=Cq+sq;u[Np+36>>2]=Bq+wq;pq=q[lq+4>>2];if((pq|0)>=1){tq=0;while(1){Fq=q[q[lq+12>>2]+(tq<<2)>>2];nq=q[q[Ba+56>>2]+16>>2]+(Fq<<4)|0;mq=q[nq+12>>2];q[Np+16>>2]=q[nq+8>>2];q[Np+20>>2]=mq;mq=q[nq+4>>2];q[Np+8>>2]=q[nq>>2];q[Np+12>>2]=mq;z:{if((oq|0)>=1){mq=0;nq=q[Np+116>>2];while(1){if((Fq|0)==q[(nq+w(mq,24)|0)+20>>2]){break z}mq=mq+1|0;if((mq|0)<(oq|0)){continue}break}}nq=q[Np+20>>2];q[Np+56>>2]=q[Np+16>>2];q[Np+60>>2]=nq;nq=q[Np+12>>2];q[Np+48>>2]=q[Np+8>>2];q[Np+52>>2]=nq;A:{if(q[Np+112>>2]!=(oq|0)){break A}Dq=oq?oq<<1:1;if((oq|0)>=(Dq|0)){break A}mq=0;nq=0;if(Dq){q[6657]=q[6657]+1;nq=n[q[5255]](w(Dq,24),16)|0;oq=q[Np+108>>2];}Aq=q[Np+116>>2];B:{C:{if((oq|0)>=1){while(1){pq=w(mq,24);xq=pq+nq|0;pq=pq+Aq|0;Gq=q[pq+4>>2];q[xq>>2]=q[pq>>2];q[xq+4>>2]=Gq;Gq=q[pq+20>>2];q[xq+16>>2]=q[pq+16>>2];q[xq+20>>2]=Gq;Gq=q[pq+12>>2];q[xq+8>>2]=q[pq+8>>2];q[xq+12>>2]=Gq;mq=mq+1|0;if((oq|0)!=(mq|0)){continue}break C}}if(!Aq){break B}}if(r[Np+120|0]){if(Aq){q[6658]=q[6658]+1;n[q[5256]](Aq);}oq=q[Np+108>>2];}q[Np+116>>2]=0;}q[Np+116>>2]=nq;o[Np+120|0]=1;q[Np+112>>2]=Dq;}nq=q[Np+116>>2]+w(oq,24)|0;oq=q[Np+52>>2];q[nq>>2]=q[Np+48>>2];q[nq+4>>2]=oq;oq=q[Np+60>>2];mq=q[Np+56>>2];pq=q[Np- -64>>2];q[nq+20>>2]=Fq;q[nq+16>>2]=pq;q[nq+8>>2]=mq;q[nq+12>>2]=oq;oq=q[Np+108>>2]+1|0;q[Np+108>>2]=oq;pq=q[lq+4>>2];}tq=tq+1|0;if((tq|0)<(pq|0)){continue}break}}sq=u[Np+40>>2];wq=u[Np+36>>2];vq=u[Np+32>>2];kq=kq+1|0;if((yq|0)!=(kq|0)){continue}break}q[Np+60>>2]=0;o[Np+64|0]=1;q[Np+52>>2]=0;q[Np+56>>2]=0;kq=q[Np+140>>2]+w(q[qq>>2],36)|0;q[Np+68>>2]=q[kq+20>>2];q[Np+72>>2]=q[kq+24>>2];q[Np+76>>2]=q[kq+28>>2];q[Np+80>>2]=q[kq+32>>2];Bq=vq;vq=x(x(1)/x(E(x(x(x(vq*vq)+x(wq*wq))+x(sq*sq)))));u[Np+32>>2]=Bq*vq;u[Np+36>>2]=wq*vq;u[Np+40>>2]=sq*vq;q[Np+20>>2]=0;o[Np+24|0]=1;q[Np+12>>2]=0;q[Np+16>>2]=0;uy(Np+104|0,Np+8|0,Np+32|0);if(q[Np+12>>2]<=0){oq=q[Np+108>>2];break y}kq=0;nq=q[Np+52>>2];while(1){tq=w(kq,24);Aq=tq+q[Np+20>>2]|0;D:{if(q[Np+56>>2]!=(nq|0)){break D}pq=nq?nq<<1:1;if((nq|0)>=(pq|0)){break D}mq=0;lq=0;if(pq){q[6657]=q[6657]+1;lq=n[q[5255]](pq<<2,16)|0;nq=q[Np+52>>2];}oq=q[Np+60>>2];E:{F:{if((nq|0)>=1){while(1){xq=mq<<2;q[xq+lq>>2]=q[oq+xq>>2];mq=mq+1|0;if((nq|0)!=(mq|0)){continue}break F}}if(!oq){break E}}if(r[Np+64|0]){if(oq){q[6658]=q[6658]+1;n[q[5256]](oq);}}q[Np+60>>2]=0;nq=q[Np+52>>2];}q[Np+60>>2]=lq;o[Np+64|0]=1;q[Np+56>>2]=pq;}q[q[Np+60>>2]+(nq<<2)>>2]=q[Aq+20>>2];nq=q[Np+52>>2]+1|0;q[Np+52>>2]=nq;oq=q[Np+108>>2];G:{if((oq|0)<1){break G}lq=q[(tq+q[Np+20>>2]|0)+20>>2];mq=0;pq=q[Np+116>>2];while(1){tq=pq+w(mq,24)|0;if((lq|0)!=q[tq+20>>2]){mq=mq+1|0;if((mq|0)<(oq|0)){continue}break G}break}q[tq+20>>2]=-1;}kq=kq+1|0;if((kq|0)<q[Np+12>>2]){continue}break}break y}kq=(yq|0)!=1;yq=1;if(kq){break r}break s}H:{if((oq|0)>=1){nq=0;tq=q[Np+140>>2];pq=q[Np+132>>2];Aq=q[Np+116>>2];while(1){xq=q[(Aq+w(nq,24)|0)+20>>2];I:{if((xq|0)==-1){break I}lq=0;if((pq|0)<1){break I}while(1){mq=0;J:{if((yq|0)>0){while(1){if(q[(mq<<2)+qq>>2]==(lq|0)){break J}mq=mq+1|0;if((yq|0)!=(mq|0)){continue}break}}kq=tq+w(lq,36)|0;Dq=q[kq+4>>2];if((Dq|0)<1){break J}Fq=q[kq+12>>2];mq=0;while(1){kq=1;if((xq|0)==q[Fq+(mq<<2)>>2]){break H}mq=mq+1|0;if((mq|0)<(Dq|0)){continue}break}}lq=lq+1|0;if((pq|0)!=(lq|0)){continue}break}}nq=nq+1|0;if((nq|0)<(oq|0)){continue}break}}di(q[Ba+56>>2]+24|0,Np+48|0);kq=0;}lq=q[Np+20>>2];if(lq){if(r[Np+24|0]){if(lq){q[6658]=q[6658]+1;n[q[5256]](lq);}}q[Np+20>>2]=0;}lq=q[Np+60>>2];if(lq){if(r[Np+64|0]){if(lq){q[6658]=q[6658]+1;n[q[5256]](lq);}}q[Np+60>>2]=0;}lq=q[Np+116>>2];if(lq){if(r[Np+120|0]){if(lq){q[6658]=q[6658]+1;n[q[5256]](lq);}}q[Np+116>>2]=0;}if(!(kq&(yq|0)>0)){break r}}tq=0;while(1){kq=q[(tq<<2)+qq>>2];q[Np+60>>2]=0;q[Np+52>>2]=0;q[Np+56>>2]=0;lq=q[Np+140>>2];o[Np+64|0]=1;kq=lq+w(kq,36)|0;lq=q[kq+4>>2];K:{if((lq|0)>=1){q[6657]=q[6657]+1;pq=lq<<2;oq=n[q[5255]](pq,16)|0;mq=0;nq=q[Np+60>>2];Aq=q[Np+52>>2];L:{M:{if((Aq|0)>=1){while(1){xq=mq<<2;q[xq+oq>>2]=q[nq+xq>>2];mq=mq+1|0;if((Aq|0)!=(mq|0)){continue}break M}}if(!nq){break L}}if(!r[Np+64|0]){break L}if(nq){q[6658]=q[6658]+1;n[q[5256]](nq);}}q[Np+60>>2]=oq;o[Np+64|0]=1;q[Np+56>>2]=lq;mq=0;_(oq,0,pq);q[Np+52>>2]=lq;nq=q[kq+12>>2];oq=q[Np+60>>2];while(1){pq=mq<<2;q[pq+oq>>2]=q[nq+pq>>2];mq=mq+1|0;if((lq|0)!=(mq|0)){continue}break}break K}q[Np+52>>2]=lq;}lq=q[kq+24>>2];q[Np+68>>2]=q[kq+20>>2];q[Np+72>>2]=lq;lq=q[kq+32>>2];q[Np+76>>2]=q[kq+28>>2];q[Np+80>>2]=lq;di(q[Ba+56>>2]+24|0,Np+48|0);kq=q[Np+60>>2];if(kq){if(r[Np+64|0]){if(kq){q[6658]=q[6658]+1;n[q[5256]](kq);}}q[Np+60>>2]=0;}tq=tq+1|0;if((tq|0)<(yq|0)){continue}break}}if(qq){if(cp){q[6658]=q[6658]+1;n[q[5256]](cp);}}if(rq){continue}break}rq=uq;}hz(q[Ba+56>>2]);if(rq){if(zq){q[6658]=q[6658]+1;n[q[5256]](zq);}}lq=q[Np+132>>2];if((lq|0)>=1){oq=0;while(1){Ba=q[Np+140>>2]+w(oq,36)|0;cp=Ba;kq=q[cp+12>>2];if(kq){if(r[Ba+16|0]){if(kq){q[6658]=q[6658]+1;n[q[5256]](kq);}}q[cp+12>>2]=0;}o[Ba+16|0]=1;q[cp+12>>2]=0;q[Ba+4>>2]=0;q[Ba+8>>2]=0;oq=oq+1|0;if((lq|0)!=(oq|0)){continue}break}}Ba=q[Np+140>>2];if(Ba){if(r[Np+144|0]){if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}q[Np+140>>2]=0;}if(Eq){if(Hq){q[6658]=q[6658]+1;n[q[5256]](Hq);}}ty(Np+152|0);Ba=q[Np+228>>2];if(Ba){if(r[Np+232|0]){if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}q[Np+228>>2]=0;}P=Np+240|0;return 1}function wy(Ba,cp,Kq){Ba=Ba|0;cp=cp|0;Kq=Kq|0;fb(Ba,cp,Kq);q[cp+12>>2]=q[Ba+72>>2];q[cp+16>>2]=q[Ba+76>>2];q[cp+20>>2]=q[Ba+80>>2];q[cp+24>>2]=q[Ba+84>>2];q[cp+28>>2]=q[Ba+52>>2];q[cp+32>>2]=q[Ba+56>>2];q[cp+36>>2]=q[Ba+60>>2];q[cp+40>>2]=q[Ba- -64>>2];Ba=q[Ba+68>>2];q[cp+48>>2]=0;q[cp+44>>2]=Ba;return 13248}function xy(q){return 13236}function yy(q){q=q|0;return q+72|0}function zy(Ba,cp){Ba=Ba|0;cp=cp|0;var Kq=0;Kq=q[cp+4>>2];q[Ba+72>>2]=q[cp>>2];q[Ba+76>>2]=Kq;Kq=q[cp+12>>2];q[Ba+80>>2]=q[cp+8>>2];q[Ba+84>>2]=Kq;}function Ay(Ba,cp,Lq,Mq){Ba=Ba|0;cp=cp|0;Lq=Lq|0;Mq=Mq|0;var Nq=0,Oq=x(0),Pq=x(0),Qq=x(0),Rq=x(0),Sq=x(0),Tq=x(0),Uq=x(0),Vq=x(0),Wq=x(0),Xq=x(0),Yq=x(0),Zq=x(0),_q=x(0),$q=x(0),ar=x(0),br=x(0);Nq=P-48|0;P=Nq;Tq=u[Mq>>2];Rq=u[Lq>>2];Qq=x(x(Tq-Rq)*x(.5));Sq=x(Qq*Qq);Pq=u[Mq+4>>2];Oq=u[Lq+4>>2];Qq=x(x(Pq-Oq)*x(.5));Wq=x(Sq+x(Qq*Qq));Sq=u[Mq+8>>2];Uq=u[Lq+8>>2];Qq=x(x(Sq-Uq)*x(.5));Qq=x(E(x(Wq+x(Qq*Qq))));Sq=x(x(Sq+Uq)*x(.5));Uq=x(x(Pq+Oq)*x(.5));Xq=x(x(Tq+Rq)*x(.5));Tq=u[Ba+60>>2];a:{if(!!(x(y(Tq))>x(.7071067690849304))){Rq=u[Ba+56>>2];Pq=x(x(Tq*Tq)+x(Rq*Rq));Oq=x(x(1)/x(E(Pq)));Yq=x(Pq*Oq);Vq=x(Rq*Oq);Pq=u[Ba+52>>2];Zq=x(Vq*x(-Pq));Oq=x(Oq*x(-Tq));_q=x(Pq*Oq);break a}Pq=u[Ba+52>>2];Rq=u[Ba+56>>2];Yq=x(x(Pq*Pq)+x(Rq*Rq));Oq=x(x(1)/x(E(Yq)));_q=x(Yq*Oq);ar=x(Oq*x(-Rq));Zq=x(Tq*ar);Oq=x(Pq*Oq);Yq=x(Oq*x(-Tq));}$q=u[Ba+68>>2];q[Nq+44>>2]=0;q[Nq+28>>2]=0;Wq=Sq;Sq=x(x(x(Tq*Sq)+x(x(Xq*Pq)+x(Uq*Rq)))-$q);$q=x(Wq-x(Tq*Sq));Vq=x(Qq*Vq);Wq=x($q-Vq);Tq=x(Qq*_q);_q=x(Wq-Tq);u[Nq+40>>2]=_q;Uq=x(Uq-x(Rq*Sq));Oq=x(Qq*Oq);br=x(Uq-Oq);Rq=x(Qq*Zq);Zq=x(br-Rq);u[Nq+36>>2]=Zq;Vq=x(Vq+$q);u[Nq+24>>2]=Vq-Tq;Oq=x(Oq+Uq);u[Nq+20>>2]=Oq-Rq;q[Nq+12>>2]=0;Pq=x(Xq-x(Pq*Sq));Sq=x(Qq*ar);Uq=x(Pq-Sq);Qq=x(Qq*Yq);Xq=x(Uq-Qq);u[Nq+32>>2]=Xq;Pq=x(Sq+Pq);u[Nq+16>>2]=Pq-Qq;Sq=x(Tq+Vq);u[Nq+8>>2]=Sq;Oq=x(Rq+Oq);u[Nq+4>>2]=Oq;Pq=x(Qq+Pq);u[Nq>>2]=Pq;n[q[q[cp>>2]+8>>2]](cp,Nq,0,0);q[Nq+44>>2]=0;u[Nq+40>>2]=Sq;u[Nq+36>>2]=Oq;q[Nq+28>>2]=0;u[Nq+24>>2]=Tq+Wq;u[Nq+20>>2]=Rq+br;u[Nq+32>>2]=Pq;u[Nq+16>>2]=Qq+Uq;q[Nq+12>>2]=0;u[Nq+8>>2]=_q;u[Nq+4>>2]=Zq;u[Nq>>2]=Xq;n[q[q[cp>>2]+8>>2]](cp,Nq,0,1);P=Nq+48|0;}function By(Ba,cp,Lq,Mq){Lq=Lq|0;Mq=Mq|0;q[Lq+8>>2]=-581039253;q[Lq+12>>2]=0;q[Lq>>2]=-581039253;q[Lq+4>>2]=-581039253;q[Mq+8>>2]=1566444395;q[Mq+12>>2]=0;q[Mq>>2]=1566444395;q[Mq+4>>2]=1566444395;}function Cy(Ba,cp,Lq){var Mq=x(0),cr=x(0),dr=x(0);q[Ba>>2]=14552;q[Ba+4>>2]=35;q[Ba+8>>2]=0;q[Ba+12>>2]=-1;q[Ba+16>>2]=0;q[Ba>>2]=13132;Mq=u[cp+8>>2];cr=u[cp>>2];dr=u[cp+4>>2];cp=q[cp+12>>2];q[Ba+80>>2]=1065353216;q[Ba+84>>2]=0;q[Ba+72>>2]=1065353216;q[Ba+76>>2]=1065353216;u[Ba+68>>2]=Lq;q[Ba- -64>>2]=cp;q[Ba+4>>2]=28;Lq=x(x(1)/x(E(x(x(x(cr*cr)+x(dr*dr))+x(Mq*Mq)))));u[Ba+60>>2]=Mq*Lq;u[Ba+56>>2]=dr*Lq;u[Ba+52>>2]=cr*Lq;}function Dy(Ba,cp,Lq,er){Ba=Ba|0;cp=cp|0;Lq=Lq|0;var fr=x(0),gr=x(0),hr=x(0),ir=x(0),jr=x(0);hr=u[Ba+88>>2];ir=u[Ba+92>>2];jr=u[Ba+96>>2];fr=x(x(x(hr*u[cp>>2])+x(ir*u[cp+4>>2]))+x(jr*u[cp+8>>2]));gr=u[Ba+84>>2];if(!!(fr>gr)){u[Ba+84>>2]=fr;Lq=q[cp+12>>2];q[Ba+12>>2]=q[cp+8>>2];q[Ba+16>>2]=Lq;Lq=q[cp+4>>2];q[Ba+4>>2]=q[cp>>2];q[Ba+8>>2]=Lq;gr=fr;}fr=x(x(x(hr*u[cp+16>>2])+x(ir*u[cp+20>>2]))+x(jr*u[cp+24>>2]));if(!!(fr>gr)){u[Ba+84>>2]=fr;Lq=q[cp+28>>2];q[Ba+12>>2]=q[cp+24>>2];q[Ba+16>>2]=Lq;Lq=q[cp+20>>2];q[Ba+4>>2]=q[cp+16>>2];q[Ba+8>>2]=Lq;gr=fr;}fr=x(x(x(hr*u[cp+32>>2])+x(ir*u[cp+36>>2]))+x(jr*u[cp+40>>2]));if(!!(fr>gr)){u[Ba+84>>2]=fr;Lq=q[cp+44>>2];q[Ba+12>>2]=q[cp+40>>2];q[Ba+16>>2]=Lq;Lq=q[cp+36>>2];q[Ba+4>>2]=q[cp+32>>2];q[Ba+8>>2]=Lq;}}function Ey(Ba,cp,Lq,er){Ba=Ba|0;cp=cp|0;Lq=Lq|0;er=er|0;var kr=0,lr=x(0),mr=x(0),nr=x(0),or=x(0),pr=0;lr=u[cp>>2];mr=u[cp+16>>2];or=lr<mr?lr:mr;nr=u[cp+32>>2];a:{if((or<nr?or:nr)>u[Ba+24>>2]){break a}kr=(lr>mr^1)<<4;if(u[(u[cp+kr>>2]>nr?kr:32)+cp>>2]<u[Ba+8>>2]){break a}lr=u[cp+8>>2];kr=cp+24|0;mr=u[kr>>2];or=lr<mr?lr:mr;pr=cp+40|0;nr=u[pr>>2];if((or<nr?or:nr)>u[Ba+32>>2]){break a}kr=lr>mr?cp+8|0:kr;if(u[(u[kr>>2]>nr?kr:pr)>>2]<u[Ba+16>>2]){break a}lr=u[cp+4>>2];kr=cp+20|0;mr=u[kr>>2];or=lr<mr?lr:mr;pr=cp+36|0;nr=u[pr>>2];if((or<nr?or:nr)>u[Ba+28>>2]){break a}kr=lr>mr?cp+4|0:kr;if(u[(u[kr>>2]>nr?kr:pr)>>2]<u[Ba+12>>2]){break a}Ba=q[Ba+4>>2];n[q[q[Ba>>2]+8>>2]](Ba,cp,Lq,er);}}function Fy(q){return 13108}function Gy(Ba,cp,Lq){Ba=Ba|0;cp=cp|0;Lq=Lq|0;var er=0,qr=0,rr=x(0),sr=x(0),tr=x(0),ur=x(0);er=P-160|0;P=er;q[er+152>>2]=0;q[er+144>>2]=0;q[er+148>>2]=0;q[er+136>>2]=0;q[er+140>>2]=0;q[er+44>>2]=0;q[er+48>>2]=0;q[er+56>>2]=0;q[er+60>>2]=0;qr=er- -64|0;q[qr>>2]=0;q[qr+4>>2]=0;q[er+76>>2]=0;q[er+80>>2]=0;q[er+72>>2]=1065353216;q[er+84>>2]=0;q[er+88>>2]=0;q[er+92>>2]=1065353216;q[er+96>>2]=0;qr=q[er+144>>2];q[er+100>>2]=q[er+140>>2];q[er+104>>2]=qr;qr=q[er+152>>2];q[er+108>>2]=q[er+148>>2];q[er+112>>2]=qr;q[er+36>>2]=0;q[er+40>>2]=0;q[er+32>>2]=13060;q[er+52>>2]=1065353216;q[er+116>>2]=-581039253;rr=u[Lq+4>>2];sr=u[Lq>>2];tr=u[Lq+8>>2];q[er+132>>2]=0;ur=x(tr*x(0));u[er+124>>2]=x(rr+x(sr*u[er+56>>2]))+ur;rr=x(rr*x(0));u[er+128>>2]=tr+x(x(sr*u[er+60>>2])+rr);u[er+120>>2]=x(sr+rr)+ur;q[er+24>>2]=1566444395;q[er+28>>2]=0;q[er+16>>2]=1566444395;q[er+20>>2]=1566444395;q[er+8>>2]=-581039253;q[er+12>>2]=0;q[er>>2]=-581039253;q[er+4>>2]=-581039253;n[q[q[cp>>2]+64>>2]](cp,er+32|0,er,er+16|0);cp=q[er+48>>2];q[Ba+8>>2]=q[er+44>>2];q[Ba+12>>2]=cp;cp=q[er+40>>2];q[Ba>>2]=q[er+36>>2];q[Ba+4>>2]=cp;P=er+160|0;}function Hy(Ba,cp){var Lq=0;Lq=P-16|0;P=Lq;q[Lq+12>>2]=Ba;q[Lq+8>>2]=cp;Ba=q[Lq+12>>2];q[Lq+4>>2]=Do(Ba,q[Lq+8>>2]);Co(Ba,q[Lq+4>>2]);P=Lq+16|0;}function Iy(Ba,cp,vr,wr){Ba=Ba|0;cp=cp|0;vr=vr|0;wr=wr|0;var xr=0;xr=P-48|0;P=xr;q[xr+12>>2]=cp;q[xr+8>>2]=12924;cp=q[vr+12>>2];q[xr+24>>2]=q[vr+8>>2];q[xr+28>>2]=cp;cp=q[vr+4>>2];q[xr+16>>2]=q[vr>>2];q[xr+20>>2]=cp;cp=q[wr+12>>2];q[xr+40>>2]=q[wr+8>>2];q[xr+44>>2]=cp;cp=q[wr+4>>2];q[xr+32>>2]=q[wr>>2];q[xr+36>>2]=cp;Ba=q[Ba+52>>2];n[q[q[Ba>>2]+8>>2]](Ba,xr+8|0,vr,wr);P=xr+48|0;}function Jy(Ba){Ba=Ba|0;return q[Ba+52>>2]+4|0}function Ky(Ba,cp,vr,wr){Ba=Ba|0;cp=cp|0;vr=vr|0;wr=wr|0;var yr=x(0),zr=x(0),Ar=x(0),Br=x(0),Cr=x(0),Dr=x(0),Er=x(0),Fr=x(0),Gr=x(0),Hr=x(0),Ir=x(0),Jr=x(0),Kr=x(0),Lr=x(0),Mr=x(0),Nr=x(0),Or=x(0),Pr=x(0),Qr=x(0),Rr=x(0),Sr=x(0),Tr=x(0),Ur=x(0),Vr=x(0),Wr=x(0),Xr=x(0),Yr=x(0),Zr=x(0);Ir=u[Ba+28>>2];Or=u[Ba+44>>2];Pr=u[Ba+24>>2];Qr=u[Ba+40>>2];Ar=u[Ba+20>>2];Rr=u[Ba+36>>2];Sr=x(n[q[q[Ba>>2]+48>>2]](Ba));Tr=x(n[q[q[Ba>>2]+48>>2]](Ba));Ur=x(n[q[q[Ba>>2]+48>>2]](Ba));Vr=u[cp+52>>2];Br=u[cp+24>>2];Cr=u[cp+20>>2];Dr=u[cp+56>>2];Er=u[Ba+24>>2];Fr=u[Ba+40>>2];Jr=u[Ba+28>>2];Wr=u[Ba+44>>2];Gr=u[cp+40>>2];yr=u[cp+36>>2];Xr=u[cp+48>>2];Kr=u[cp+8>>2];Lr=u[cp>>2];Mr=u[cp+4>>2];Nr=u[cp+16>>2];Yr=u[Ba+20>>2];Zr=u[Ba+36>>2];zr=u[cp+32>>2];q[vr+12>>2]=0;Hr=Dr;Dr=x(x(Zr+Yr)*x(.5));Er=x(x(Fr+Er)*x(.5));Fr=x(x(Wr+Jr)*x(.5));Jr=x(Hr+x(x(x(zr*Dr)+x(yr*Er))+x(Gr*Fr)));Ar=x(Sr+x(x(Rr-Ar)*x(.5)));Hr=x(Ar*x(y(zr)));zr=x(Tr+x(x(Qr-Pr)*x(.5)));Hr=x(Hr+x(zr*x(y(yr))));yr=x(Ur+x(x(Or-Ir)*x(.5)));Gr=x(Hr+x(yr*x(y(Gr))));u[vr+8>>2]=Jr-Gr;Ir=x(Vr+x(x(x(Dr*Nr)+x(Er*Cr))+x(Fr*Br)));Br=x(x(x(Ar*x(y(Nr)))+x(zr*x(y(Cr))))+x(yr*x(y(Br))));u[vr+4>>2]=Ir-Br;Cr=x(Xr+x(x(x(Dr*Lr)+x(Er*Mr))+x(Fr*Kr)));yr=x(x(x(Ar*x(y(Lr)))+x(zr*x(y(Mr))))+x(yr*x(y(Kr))));u[vr>>2]=Cr-yr;q[wr+12>>2]=0;u[wr+8>>2]=Gr+Jr;u[wr+4>>2]=Br+Ir;u[wr>>2]=yr+Cr;}function Ly(Ba,cp){q[Ba>>2]=14552;q[Ba+4>>2]=35;q[Ba+8>>2]=0;q[Ba+12>>2]=-1;q[Ba+16>>2]=0;q[Ba+52>>2]=cp;q[Ba>>2]=12804;q[Ba+4>>2]=21;if(n[q[q[cp>>2]+40>>2]](cp)){n[q[q[cp>>2]+48>>2]](cp,Ba+20|0,Ba+36|0);return}hi(Ba);}function My(Ba,cp,vr){Ba=Ba|0;cp=cp|0;vr=vr|0;var wr=0,_r=0,$r=0,as=0,bs=0,cs=0,ds=0,es=x(0),fs=x(0),gs=x(0),hs=x(0),is=0,js=0,ks=0,ls=0;$r=P-32|0;P=$r;q[Ba+60>>2]=q[Ba+60>>2]+1;cs=q[Ba+4>>2];n[q[q[cs>>2]+16>>2]](cs,$r+28|0,$r+24|0,$r+20|0,$r+16|0,$r+12|0,$r+8|0,$r+4|0,$r,cp);ds=q[$r+12>>2]+w(q[$r+8>>2],vr)|0;js=q[$r+20>>2];as=q[Ba+4>>2];cs=as+12|0;bs=q[$r+28>>2];_r=bs;ks=q[$r>>2];wr=ks+ -2|0;a:{if(wr>>>0<=1){is=s[ds+4>>1];if(!(wr-1)){break a}is=q[ds+8>>2];break a}is=r[ds+2|0];}ls=q[$r+16>>2];wr=_r+w(is,ls)|0;b:{if(!js){es=x(u[wr+4>>2]*u[as+8>>2]);fs=x(u[wr>>2]*u[as+4>>2]);gs=u[as+12>>2];_r=wr+8|0;break b}es=x(u[as+8>>2]*x(v[wr+8>>3]));fs=x(u[as+4>>2]*x(v[wr>>3]));gs=x(v[wr+16>>3]);_r=cs;}hs=u[_r>>2];q[Ba+56>>2]=0;u[Ba+48>>2]=es;u[Ba+44>>2]=fs;u[Ba+52>>2]=hs*gs;wr=ks+ -2|0;c:{if(wr>>>0<=1){_r=q[ds+4>>2];if(wr-1){break c}_r=s[ds+2>>1];break c}_r=r[ds+1|0];}wr=w(_r,ls)+bs|0;d:{if(js){es=x(u[as+8>>2]*x(v[wr+8>>3]));fs=x(u[as+4>>2]*x(v[wr>>3]));gs=x(v[wr+16>>3]);_r=cs;break d}es=x(u[wr+4>>2]*u[as+8>>2]);fs=x(u[wr>>2]*u[as+4>>2]);gs=u[as+12>>2];_r=wr+8|0;}hs=u[_r>>2];q[Ba+40>>2]=0;u[Ba+32>>2]=es;u[Ba+28>>2]=fs;u[Ba+36>>2]=hs*gs;wr=ks+ -2|0;e:{if(wr>>>0<=1){_r=q[ds>>2];if(wr-1){break e}_r=s[ds>>1];break e}_r=r[ds|0];}bs=w(_r,ls)+bs|0;f:{if(js){gs=x(v[bs+16>>3]);es=x(u[as+8>>2]*x(v[bs+8>>3]));fs=x(u[as+4>>2]*x(v[bs>>3]));break f}cs=bs+8|0;gs=u[as+12>>2];es=x(u[bs+4>>2]*u[as+8>>2]);fs=x(u[bs>>2]*u[as+4>>2]);}hs=u[cs>>2];q[Ba+24>>2]=0;u[Ba+16>>2]=es;cs=Ba+12|0;u[cs>>2]=fs;u[Ba+20>>2]=hs*gs;bs=q[Ba+8>>2];n[q[q[bs>>2]+8>>2]](bs,cs,cp,vr);Ba=q[Ba+4>>2];n[q[q[Ba>>2]+24>>2]](Ba,cp);P=$r+32|0;}function Ny(Ba,cp,vr){Ba=Ba|0;cp=cp|0;vr=vr|0;n[q[q[cp>>2]+68>>2]](Ba,cp,vr);}function Oy(q){q=q|0;return x(u[q+16>>2])}function Py(q,Ba){q=q|0;Ba=x(Ba);u[q+16>>2]=Ba;}function Qy(q){return 12780}function Ry(Ba,cp){Ba=Ba|0;cp=cp|0;var vr=0,ms=0,ns=0,os=0,ps=0,qs=0,rs=0,ss=0;vr=q[Ba+60>>2];if(vr){vr=(os=cp,ps=n[q[q[vr>>2]+8>>2]](vr)|0,qs=1,ns=q[q[cp>>2]+16>>2],n[ns](os|0,ps|0,qs|0)|0);ms=q[Ba+60>>2];qs=cp,ps=vr,os=n[q[q[ms>>2]+12>>2]](ms,q[vr+8>>2],cp)|0,rs=1346456916,ss=q[Ba+60>>2],ns=q[q[cp>>2]+20>>2],n[ns](qs|0,ps|0,os|0,rs|0,ss|0);}}function Sy(Ba,cp){Ba=Ba|0;cp=cp|0;var ts=0,us=0,vs=0,ws=0,xs=0,ys=0,zs=0,As=0;ts=q[Ba+56>>2];if(ts){ts=(ws=cp,xs=n[q[q[ts>>2]+12>>2]](ts)|0,ys=1,vs=q[q[cp>>2]+16>>2],n[vs](ws|0,xs|0,ys|0)|0);us=q[Ba+56>>2];ys=cp,xs=ts,ws=n[q[q[us>>2]+16>>2]](us,q[ts+8>>2],cp)|0,zs=1213612625,As=q[Ba+56>>2],vs=q[q[cp>>2]+20>>2],n[vs](ys|0,xs|0,ws|0,zs|0,As|0);}}function Ty(Ba,cp,Bs){Ba=Ba|0;cp=cp|0;Bs=Bs|0;var Cs=0,Ds=0,Es=0,Fs=0,Gs=0,Hs=0,Is=0,Js=0;fb(Ba,cp,Bs);Cs=q[Ba+52>>2];n[q[q[Cs>>2]+56>>2]](Cs,cp+12|0,Bs)|0;q[cp+52>>2]=q[Ba+16>>2];a:{b:{if(!q[Ba+56>>2]){break b}if(n[q[q[Bs>>2]+52>>2]](Bs)&1){break b}Cs=n[q[q[Bs>>2]+24>>2]](Bs,q[Ba+56>>2])|0;if(Cs){q[cp+44>>2]=0;q[cp+40>>2]=Cs;break a}Cs=n[q[q[Bs>>2]+28>>2]](Bs,q[Ba+56>>2])|0;q[cp+44>>2]=0;q[cp+40>>2]=Cs;Cs=q[Ba+56>>2];Cs=(Fs=Bs,Gs=n[q[q[Cs>>2]+12>>2]](Cs)|0,Hs=1,Es=q[q[Bs>>2]+16>>2],n[Es](Fs|0,Gs|0,Hs|0)|0);Ds=q[Ba+56>>2];Hs=Bs,Gs=Cs,Fs=n[q[q[Ds>>2]+16>>2]](Ds,q[Cs+8>>2],Bs)|0,Is=1213612625,Js=q[Ba+56>>2],Es=q[q[Bs>>2]+20>>2],n[Es](Hs|0,Gs|0,Fs|0,Is|0,Js|0);break a}q[cp+40>>2]=0;q[cp+44>>2]=0;}c:{d:{if(!q[Ba+60>>2]){break d}if(n[q[q[Bs>>2]+52>>2]](Bs)&2){break d}Cs=n[q[q[Bs>>2]+24>>2]](Bs,q[Ba+60>>2])|0;if(Cs){q[cp+48>>2]=Cs;break c}q[cp+48>>2]=n[q[q[Bs>>2]+28>>2]](Bs,q[Ba+60>>2]);Cs=q[Ba+60>>2];Cs=(Js=Bs,Is=n[q[q[Cs>>2]+8>>2]](Cs)|0,Fs=1,Es=q[q[Bs>>2]+16>>2],n[Es](Js|0,Is|0,Fs|0)|0);Ds=q[Ba+60>>2];Fs=Bs,Is=Cs,Js=n[q[q[Ds>>2]+12>>2]](Ds,q[Cs+8>>2],Bs)|0,Gs=1346456916,Hs=q[Ba+60>>2],Es=q[q[Bs>>2]+20>>2],n[Es](Fs|0,Is|0,Js|0,Gs|0,Hs|0);break c}q[cp+48>>2]=0;}q[cp+56>>2]=0;return 12256}function Uy(Ba,cp){Ba=Ba|0;cp=cp|0;var Bs=x(0),Ks=0,Ls=x(0);Ks=n[q[q[Ba>>2]+28>>2]](Ba)|0;Bs=x(u[Ks>>2]-u[cp>>2]);Ls=x(Bs*Bs);Bs=x(u[Ks+4>>2]-u[cp+4>>2]);Ls=x(Ls+x(Bs*Bs));Bs=x(u[Ks+8>>2]-u[cp+8>>2]);if(!!(x(Ls+x(Bs*Bs))>x(1.1920928955078125e-7))){gi(Ba,cp);if(r[Ba+65|0]){cp=q[Ba+56>>2];n[q[q[cp>>2]>>2]](cp)|0;cp=q[Ba+56>>2];if(cp){q[6658]=q[6658]+1;n[q[5256]](cp);}}q[6657]=q[6657]+1;cp=n[q[5255]](172,16)|0;Ks=Th(cp);q[Ba+56>>2]=cp;Sh(Ks,q[Ba+52>>2],r[Ba+64|0],Ba+20|0,Ba+36|0);o[Ba+65|0]=1;}}function Vy(Ba,cp,Ms,Ns){Ba=Ba|0;cp=cp|0;Ms=Ms|0;Ns=Ns|0;var Os=0,Ps=0;Os=P+ -64|0;P=Os;Ps=q[Ba+52>>2];q[Os+60>>2]=0;q[Os+8>>2]=cp;q[Os+4>>2]=Ps;q[Os>>2]=12644;iw(q[Ba+56>>2],Os,Ms,Ns);P=Os- -64|0;}function Wy(Ba,cp,Ms,Ns,Qs,Rs){var Ss=0,Ts=0;Ss=P-16|0;P=Ss;Ts=q[Ba+52>>2];q[Ss+8>>2]=cp;q[Ss+4>>2]=Ts;q[Ss>>2]=12496;ew(q[Ba+56>>2],Ss,Ms,Ns,Qs,Rs);P=Ss+16|0;}function Xy(Ba,cp,Ms,Ns){var Qs=0,Rs=0;Qs=P-16|0;P=Qs;Rs=q[Ba+52>>2];q[Qs+8>>2]=cp;q[Qs+4>>2]=Rs;q[Qs>>2]=12328;fw(q[Ba+56>>2],Qs,Ms,Ns);P=Qs+16|0;}function Yy(Ba){Ba=Ba|0;var cp=0;q[Ba>>2]=12172;if(r[Ba+65|0]){cp=q[Ba+56>>2];n[q[q[cp>>2]>>2]](cp)|0;cp=q[Ba+56>>2];if(cp){q[6658]=q[6658]+1;n[q[5256]](cp);}}if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}function Zy(Ba){Ba=Ba|0;var Ms=0;q[Ba>>2]=12172;if(r[Ba+65|0]){Ms=q[Ba+56>>2];n[q[q[Ms>>2]>>2]](Ms)|0;Ms=q[Ba+56>>2];if(Ms){q[6658]=q[6658]+1;n[q[5256]](Ms);}}return Ba|0}function _y(q){q=q|0;return x(x(u[q+32>>2]*u[q+16>>2]))}function $y(q,Ba){q=q|0;Ba=x(Ba);u[q+48>>2]=Ba;}function az(q){return 12156}function bz(Ba,Ns,Us){Ba=Ba|0;Ns=x(Ns);Us=Us|0;var Vs=x(0),Ws=x(0);Vs=x(n[q[q[Ba>>2]+48>>2]](Ba));Ws=x(n[q[q[Ba>>2]+48>>2]](Ba));q[Us+12>>2]=0;Ns=x(Ws*x(Vs*x(Ns*x(.4000000059604645))));u[Us+8>>2]=Ns;u[Us+4>>2]=Ns;u[Us>>2]=Ns;}function cz(Ba,Ns,Us){Ba=Ba|0;Ns=Ns|0;Us=Us|0;var Xs=x(0),Ys=0,Zs=x(0),_s=x(0),$s=0,at=x(0),bt=x(0);Ys=P-16|0;P=Ys;n[q[q[Ns>>2]+68>>2]](Ys,Ns,Us);$s=q[Ys+12>>2];q[Ba+8>>2]=q[Ys+8>>2];q[Ba+12>>2]=$s;$s=q[Ys+4>>2];q[Ba>>2]=q[Ys>>2];q[Ba+4>>2]=$s;Zs=u[Us+4>>2];Xs=u[Us>>2];_s=u[Us+8>>2];at=x(n[q[q[Ns>>2]+48>>2]](Ns));Ns=x(x(x(Xs*Xs)+x(Zs*Zs))+x(_s*_s))<x(1.4210854715202004e-14);Xs=Ns?x(-1):Xs;bt=Xs;_s=Ns?x(-1):_s;Zs=Ns?x(-1):Zs;Xs=x(x(1)/x(E(x(x(_s*_s)+x(x(Xs*Xs)+x(Zs*Zs))))));u[Ba>>2]=u[Ba>>2]+x(at*x(bt*Xs));u[Ba+4>>2]=u[Ba+4>>2]+x(at*x(Zs*Xs));u[Ba+8>>2]=u[Ba+8>>2]+x(at*x(_s*Xs));P=Ys+16|0;}function dz(q,Ba,Ns,Us){Ns=Ns|0;Us=Us|0;if((Us|0)>=1){_(Ns,0,Us<<4);}}function ez(Ba,Ns,Us){Ba=Ba|0;q[Ba>>2]=0;q[Ba+4>>2]=0;q[Ba+8>>2]=0;q[Ba+12>>2]=0;}function fz(Ba){var Ns=0,Us=0,ct=0,dt=0,et=0,ft=0,gt=0,ht=0,it=0;gt=q[Ba+4>>2];Us=q[Ba+48>>2];a:{if((gt|0)>=(Us|0)){break a}b:{if(q[Ba+8>>2]>=(Us|0)){dt=q[Ba+12>>2];break b}Ns=gt;if(Us){q[6657]=q[6657]+1;dt=n[q[5255]](Us<<2,16)|0;Ns=q[Ba+4>>2];}ft=q[Ba+12>>2];c:{d:{if((Ns|0)>=1){while(1){et=ct<<2;q[et+dt>>2]=q[ft+et>>2];ct=ct+1|0;if((ct|0)!=(Ns|0)){continue}break d}}if(ft){break d}break c}if(r[Ba+16|0]){if(ft){q[6658]=q[6658]+1;n[q[5256]](ft);}}}q[Ba+12>>2]=dt;o[Ba+16|0]=1;q[Ba+8>>2]=Us;}Ns=gt<<2;et=Us<<2;_(Ns+dt|0,0,et-Ns|0);q[Ba+4>>2]=Us;ft=q[Ba+24>>2];if((ft|0)<(Us|0)){e:{if(q[Ba+28>>2]>=(Us|0)){dt=q[Ba+32>>2];break e}ct=0;Ns=ft;dt=0;if(Us){q[6657]=q[6657]+1;dt=n[q[5255]](et,16)|0;Ns=q[Ba+24>>2];}ht=q[Ba+32>>2];f:{if((Ns|0)>=1){while(1){it=ct<<2;q[it+dt>>2]=q[ht+it>>2];ct=ct+1|0;if((ct|0)!=(Ns|0)){continue}break f}}if(ht){break f}q[Ba+32>>2]=dt;q[Ba+28>>2]=Us;o[Ba+36|0]=1;break e}if(r[Ba+36|0]){if(ht){q[6658]=q[6658]+1;n[q[5256]](ht);}}q[Ba+32>>2]=dt;o[Ba+36|0]=1;q[Ba+28>>2]=Us;}Ns=ft<<2;_(Ns+dt|0,0,et-Ns|0);}q[Ba+24>>2]=Us;if((Us|0)>=1){_(q[Ba+12>>2],255,et);_(q[Ba+32>>2],255,et);}if((gt|0)<1){break a}ft=q[Ba+32>>2];Us=q[Ba+72>>2];dt=q[Ba+12>>2];ct=0;while(1){et=ct<<2;Ns=et+Us|0;Ns=dt+(((s[Ns+2>>1]<<16)+p[Ns>>1]&q[Ba+48>>2]+ -1)<<2)|0;q[ft+et>>2]=q[Ns>>2];q[Ns>>2]=ct;ct=ct+1|0;if((gt|0)!=(ct|0)){continue}break}}}function gz(Ba,jt,kt){var lt=0,mt=0,nt=0,ot=0,pt=0,qt=0,rt=0,st=0,tt=0;a:{mt=p[jt>>1];qt=s[jt+2>>1];rt=q[Ba+48>>2];tt=mt+(qt<<16)&rt+ -1;b:{if(tt>>>0>=t[Ba+4>>2]){break b}lt=q[q[Ba+12>>2]+(tt<<2)>>2];if((lt|0)==-1){break b}st=q[Ba+72>>2];pt=mt&65535;while(1){nt=lt<<2;mt=nt+st|0;if((qt|0)==s[mt+2>>1]?(pt|0)==s[mt>>1]:0){break a}lt=q[nt+q[Ba+32>>2]>>2];if((lt|0)!=-1){continue}break}}st=q[Ba+44>>2];lt=st;c:{if((rt|0)!=(lt|0)){break c}lt=rt;qt=lt?lt<<1:1;if((lt|0)>=(qt|0)){break c}d:{if(!qt){lt=rt;break d}q[6657]=q[6657]+1;ot=n[q[5255]](qt<<2,16)|0;lt=q[Ba+44>>2];}mt=lt;if((mt|0)>=1){lt=0;while(1){nt=lt<<2;pt=nt+ot|0;nt=nt+q[Ba+52>>2]|0;nt=s[nt>>1]|s[nt+2>>1]<<16;p[pt>>1]=nt;p[pt+2>>1]=nt>>>16;lt=lt+1|0;if((mt|0)!=(lt|0)){continue}break}}mt=q[Ba+52>>2];if(mt){if(r[Ba+56|0]){if(mt){q[6658]=q[6658]+1;n[q[5256]](mt);}}q[Ba+52>>2]=0;}q[Ba+52>>2]=ot;q[Ba+48>>2]=qt;o[Ba+56|0]=1;lt=q[Ba+44>>2];}mt=q[Ba+52>>2]+(lt<<2)|0;kt=s[kt>>1]|s[kt+2>>1]<<16;p[mt>>1]=kt;p[mt+2>>1]=kt>>>16;q[Ba+44>>2]=q[Ba+44>>2]+1;ot=q[Ba- -64>>2];e:{if((ot|0)!=q[Ba+68>>2]){break e}pt=ot?ot<<1:1;if((ot|0)>=(pt|0)){break e}f:{if(!pt){nt=0;break f}q[6657]=q[6657]+1;nt=n[q[5255]](pt<<2,16)|0;ot=q[Ba+64>>2];}if((ot|0)>=1){lt=0;while(1){kt=lt<<2;mt=kt+nt|0;kt=kt+q[Ba+72>>2]|0;kt=s[kt>>1]|s[kt+2>>1]<<16;p[mt>>1]=kt;p[mt+2>>1]=kt>>>16;lt=lt+1|0;if((ot|0)!=(lt|0)){continue}break}}kt=q[Ba+72>>2];if(kt){if(r[Ba+76|0]){if(kt){q[6658]=q[6658]+1;n[q[5256]](kt);}}q[Ba+72>>2]=0;}q[Ba+72>>2]=nt;q[Ba+68>>2]=pt;o[Ba+76|0]=1;ot=q[Ba+64>>2];}mt=q[Ba+72>>2]+(ot<<2)|0;kt=s[jt>>1]|s[jt+2>>1]<<16;p[mt>>1]=kt;p[mt+2>>1]=kt>>>16;q[Ba+64>>2]=q[Ba+64>>2]+1;if((rt|0)<q[Ba+48>>2]){fz(Ba);tt=p[jt>>1]+(s[jt+2>>1]<<16)&q[Ba+48>>2]+ -1;}jt=q[Ba+32>>2]+(st<<2)|0;Ba=q[Ba+12>>2]+(tt<<2)|0;q[jt>>2]=q[Ba>>2];q[Ba>>2]=st;return}jt=q[Ba+52>>2]+(lt<<2)|0;Ba=s[kt>>1]|s[kt+2>>1]<<16;p[jt>>1]=Ba;p[jt+2>>1]=Ba>>>16;}function hz(Ba){var jt=0,kt=0,ut=0,vt=x(0),wt=0,xt=x(0),yt=0,zt=x(0),At=0,Bt=x(0),Ct=x(0),Dt=x(0),Et=0,Ft=x(0),Gt=x(0),Ht=0,It=x(0),Jt=0,Kt=0,Lt=0,Mt=0,Nt=x(0),Ot=x(0),Pt=0,Qt=0,Rt=0,St=x(0),Tt=x(0),Ut=x(0),Vt=x(0),Wt=x(0),Xt=x(0),Yt=x(0),Zt=x(0),_t=x(0);wt=P-96|0;P=wt;o[wt+52|0]=1;q[wt+48>>2]=0;o[wt+72|0]=1;q[wt+40>>2]=0;q[wt+44>>2]=0;q[wt+68>>2]=0;o[wt+92|0]=1;q[wt+60>>2]=0;q[wt+64>>2]=0;q[wt+88>>2]=0;q[wt+80>>2]=0;q[wt+84>>2]=0;q[wt+28>>2]=0;o[wt+32|0]=1;q[wt+20>>2]=0;q[wt+24>>2]=0;q[Ba+72>>2]=0;q[Ba+76>>2]=0;q[Ba+64>>2]=0;q[Ba+68>>2]=0;jt=q[Ba+28>>2];a:{if((jt|0)<1){break a}while(1){kt=q[Ba+36>>2];Pt=w(At,36);Qt=q[(kt+Pt|0)+4>>2];if((Qt|0)>=1){Jt=0;while(1){jt=q[(kt+Pt|0)+12>>2];kt=q[jt+(Jt<<2)>>2];Jt=Jt+1|0;Mt=(Qt|0)==(Jt|0);yt=q[jt+((Mt?0:Jt)<<2)>>2];p[wt+10>>1]=yt;p[wt+8>>1]=kt;Kt=0;ut=yt<<16>>16;jt=kt<<16>>16;if((ut|0)>(jt|0)){p[wt+10>>1]=kt;p[wt+8>>1]=yt;ut=kt;jt=yt;}yt=ut<<16;Et=jt<<16>>16;kt=yt+Et&q[wt+64>>2]+ -1;b:{if(kt>>>0>=t[wt+20>>2]){break b}kt=q[q[wt+28>>2]+(kt<<2)>>2];if((kt|0)==-1){break b}Ht=q[wt+48>>2];Lt=q[wt+88>>2];while(1){kt=kt<<2;Rt=kt+Lt|0;if(!(s[Rt+2>>1]==(ut&65535)?s[Rt>>1]==(jt&65535):0)){kt=q[kt+Ht>>2];if((kt|0)!=-1){continue}break b}break}Kt=kt+q[wt+68>>2]|0;}ut=q[Ba+16>>2];jt=ut+(yt>>16<<4)|0;ut=ut+(Et<<4)|0;vt=x(u[jt+8>>2]-u[ut+8>>2]);xt=x(u[jt>>2]-u[ut>>2]);zt=x(u[jt+4>>2]-u[ut+4>>2]);Ct=x(x(1)/x(E(x(x(x(xt*xt)+x(zt*zt))+x(vt*vt)))));vt=x(vt*Ct);zt=x(zt*Ct);xt=x(xt*Ct);jt=q[Ba+48>>2];c:{if((jt|0)>=1){yt=q[Ba+56>>2];kt=0;while(1){ut=yt+(kt<<4)|0;Ct=u[ut+8>>2];Ft=u[ut>>2];Dt=u[ut+4>>2];if((+x(y(x(Ct-vt)))>1e-6^1?!(+x(y(x(Ft-xt)))>1e-6|+x(y(x(Dt-zt)))>1e-6):0)|(+x(y(x(vt+Ct)))>1e-6^1?!(+x(y(x(xt+Ft)))>1e-6|+x(y(x(zt+Dt)))>1e-6):0)){break c}kt=kt+1|0;if((kt|0)<(jt|0)){continue}break}}d:{if(q[Ba+52>>2]!=(jt|0)){break d}ut=jt?jt<<1:1;if((jt|0)>=(ut|0)){break d}kt=0;yt=0;if(ut){q[6657]=q[6657]+1;yt=n[q[5255]](ut<<4,16)|0;jt=q[Ba+48>>2];}if((jt|0)>=1){while(1){Et=kt<<4;Ht=Et+yt|0;Et=Et+q[Ba+56>>2]|0;Rt=q[Et+4>>2];q[Ht>>2]=q[Et>>2];q[Ht+4>>2]=Rt;Lt=q[Et+12>>2];q[Ht+8>>2]=q[Et+8>>2];q[Ht+12>>2]=Lt;kt=kt+1|0;if((kt|0)!=(jt|0)){continue}break}}jt=q[Ba+56>>2];if(jt){if(r[Ba+60|0]){if(jt){q[6658]=q[6658]+1;n[q[5256]](jt);}}q[Ba+56>>2]=0;}q[Ba+56>>2]=yt;o[Ba+60|0]=1;q[Ba+52>>2]=ut;jt=q[Ba+48>>2];}jt=q[Ba+56>>2]+(jt<<4)|0;q[jt+12>>2]=0;u[jt+8>>2]=vt;u[jt+4>>2]=zt;u[jt>>2]=xt;q[Ba+48>>2]=q[Ba+48>>2]+1;}e:{if(Kt){p[Kt+2>>1]=At;break e}p[wt>>1]=At;p[wt+2>>1]=65535;gz(wt+16|0,wt+8|0,wt);}if(!Mt){kt=q[Ba+36>>2];continue}break}jt=q[Ba+28>>2];}At=At+1|0;if((At|0)<(jt|0)){continue}break}yt=0;if((jt|0)<1){break a}yt=(jt|0)>0;ut=q[Ba+16>>2];Pt=q[Ba+36>>2];At=0;while(1){kt=Pt+w(At,36)|0;Jt=q[kt+4>>2];if((Jt|0)>=3){Qt=Jt+ -1|0;Kt=q[kt+12>>2];Et=ut+(q[Kt>>2]<<4)|0;Lt=Et;xt=u[Ba+72>>2];Ct=u[Ba+68>>2];Dt=u[Ba+64>>2];kt=1;while(1){Mt=ut+(q[Kt+(kt<<2)>>2]<<4)|0;vt=u[Mt+8>>2];kt=kt+1|0;Ht=ut+(q[Kt+((kt|0)%(Jt|0)<<2)>>2]<<4)|0;zt=u[Ht+8>>2];Ft=u[Et>>2];St=u[Mt>>2];Tt=x(Ft-St);Bt=u[Et+4>>2];Ut=u[Ht+4>>2];Ot=x(Bt-Ut);Vt=u[Mt+4>>2];It=x(Bt-Vt);Wt=u[Ht>>2];Xt=x(Ft-Wt);Nt=x(x(Tt*Ot)-x(It*Xt));_t=It;It=u[Lt+8>>2];Yt=x(It-zt);Zt=x(It-vt);Ot=x(x(_t*Yt)-x(Zt*Ot));zt=x(x(x(It+vt)+zt)*x(.3333333432674408));vt=x(x(Zt*Xt)-x(Tt*Yt));vt=x(x(E(x(x(Nt*Nt)+x(x(Ot*Ot)+x(vt*vt)))))*x(.5));xt=x(xt+x(zt*vt));u[Ba+72>>2]=xt;Ct=x(Ct+x(x(x(Ut+x(Bt+Vt))*x(.3333333432674408))*vt));u[Ba+68>>2]=Ct;Dt=x(Dt+x(x(x(Wt+x(Ft+St))*x(.3333333432674408))*vt));u[Ba+64>>2]=Dt;Gt=x(Gt+vt);if((kt|0)!=(Qt|0)){continue}break}}At=At+1|0;if((At|0)!=(jt|0)){continue}break}}q[Ba+96>>2]=2139095039;vt=x(x(1)/Gt);Ct=x(vt*u[Ba+64>>2]);u[Ba+64>>2]=Ct;Dt=x(vt*u[Ba+68>>2]);u[Ba+68>>2]=Dt;Gt=x(vt*u[Ba+72>>2]);u[Ba+72>>2]=Gt;vt=x(3.4028234663852886e+38);zt=x(3.4028234663852886e+38);if(yt){yt=q[Ba+36>>2];ut=0;while(1){kt=yt+w(ut,36)|0;xt=x(y(x(u[kt+32>>2]+x(x(x(Ct*u[kt+20>>2])+x(Dt*u[kt+24>>2]))+x(Gt*u[kt+28>>2])))));if(!!(xt<zt)){u[Ba+96>>2]=xt;zt=xt;}ut=ut+1|0;if((ut|0)!=(jt|0)){continue}break}}ut=q[Ba+8>>2];f:{if((ut|0)<1){Ft=x(-3.4028234663852886e+38);xt=x(3.4028234663852886e+38);Ct=x(3.4028234663852886e+38);Dt=x(-3.4028234663852886e+38);Gt=x(-3.4028234663852886e+38);break f}yt=q[Ba+16>>2];Ct=x(3.4028234663852886e+38);Gt=x(-3.4028234663852886e+38);kt=0;Dt=x(-3.4028234663852886e+38);Ft=x(-3.4028234663852886e+38);xt=x(3.4028234663852886e+38);while(1){jt=yt+(kt<<4)|0;Bt=u[jt+8>>2];Gt=Bt>Gt?Bt:Gt;Ct=Bt<Ct?Bt:Ct;Bt=u[jt+4>>2];Dt=Bt>Dt?Bt:Dt;xt=Bt<xt?Bt:xt;Bt=u[jt>>2];Ft=Bt>Ft?Bt:Ft;vt=Bt<vt?Bt:vt;kt=kt+1|0;if((kt|0)<(ut|0)){continue}break}}kt=0;q[Ba+128>>2]=0;Bt=x(Gt-Ct);u[Ba+124>>2]=Bt;Nt=x(Dt-xt);u[Ba+120>>2]=Nt;jt=Ba+116|0;It=x(Ft-vt);u[jt>>2]=It;q[Ba+112>>2]=0;u[Ba+108>>2]=Ct+Gt;u[Ba+104>>2]=xt+Dt;u[Ba+100>>2]=vt+Ft;Lt=jt;jt=It<Nt?Nt<Bt?2:1:(It<Bt)<<1;ut=jt<<2;yt=Lt+ut|0;xt=u[yt>>2];vt=x(zt/x(1.7320507764816284));u[Ba+84>>2]=vt;u[Ba+88>>2]=vt;u[Ba+80>>2]=vt;ut=ut+(Ba+80|0)|0;zt=x(u[yt>>2]*x(.5));u[ut>>2]=zt;xt=x(x(x(xt*x(.5))-vt)*x(.0009765625));g:{h:{while(1){if(He(Ba)){break h}zt=x(zt-xt);u[ut>>2]=zt;kt=kt+1|0;if((kt|0)!=1024){continue}break}u[Ba+84>>2]=vt;u[Ba+88>>2]=vt;u[Ba+80>>2]=vt;break g}kt=1;At=Ba+80|0;ut=1<<jt&3;jt=At+((1<<ut&3)<<2)|0;yt=q[jt>>2];At=At+(ut<<2)|0;ut=q[At>>2];xt=x(x(u[Ba+96>>2]-vt)*x(.0009765625));u[At>>2]=xt+u[At>>2];vt=x(xt+u[jt>>2]);u[jt>>2]=vt;if(He(Ba)){while(1){zt=vt;if((kt|0)==1024){break g}ut=q[At>>2];u[At>>2]=xt+u[At>>2];vt=x(xt+u[jt>>2]);u[jt>>2]=vt;kt=kt+1|0;if(He(Ba)){continue}break}yt=(j(zt),e(0));}q[At>>2]=ut;q[jt>>2]=yt;}Di(wt+16|0);P=wt+96|0;}function iz(Ba){Ba=Ba|0;Ba=li(Ba);if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}function jz(Ba){q[Ba>>2]=11988;o[Ba+20|0]=1;q[Ba+16>>2]=0;o[Ba+40|0]=1;q[Ba+8>>2]=0;q[Ba+12>>2]=0;q[Ba+36>>2]=0;o[Ba+60|0]=1;q[Ba+28>>2]=0;q[Ba+32>>2]=0;q[Ba+56>>2]=0;q[Ba+48>>2]=0;q[Ba+52>>2]=0;}function kz(Ba,$t,au){Ba=Ba|0;$t=$t|0;au=au|0;fb(Ba,$t,au);q[$t+28>>2]=q[Ba+32>>2];q[$t+32>>2]=q[Ba+36>>2];q[$t+36>>2]=q[Ba+40>>2];q[$t+40>>2]=q[Ba+44>>2];q[$t+12>>2]=q[Ba+16>>2];q[$t+16>>2]=q[Ba+20>>2];q[$t+20>>2]=q[Ba+24>>2];q[$t+24>>2]=q[Ba+28>>2];au=q[Ba+48>>2];q[$t+48>>2]=0;q[$t+44>>2]=au;Ba=q[Ba+72>>2];q[$t+56>>2]=0;q[$t+52>>2]=Ba;return 11961}function lz(Ba,$t){Ba=Ba|0;q[Ba+8>>2]=0;q[Ba+12>>2]=0;q[Ba>>2]=0;q[Ba+4>>2]=1065353216;}function mz(q){return 11956}function nz(Ba,$t,au){Ba=Ba|0;$t=x($t);au=au|0;var bu=0,cu=x(0),du=x(0),eu=x(0),fu=x(0),gu=x(0),hu=x(0),iu=x(0);bu=P-96|0;P=bu;q[bu+44>>2]=0;q[bu+48>>2]=0;q[bu+56>>2]=0;q[bu+60>>2]=0;q[bu+52>>2]=1065353216;q[bu+76>>2]=0;q[bu+80>>2]=0;q[bu+72>>2]=1065353216;q[bu+84>>2]=0;q[bu+88>>2]=0;q[bu+92>>2]=0;q[bu+36>>2]=0;q[bu+40>>2]=0;q[bu+32>>2]=1065353216;q[bu+64>>2]=0;q[bu+68>>2]=0;n[q[q[Ba>>2]+8>>2]](Ba,bu+32|0,bu+16|0,bu);fu=u[bu+24>>2];gu=u[bu+8>>2];du=u[bu+16>>2];eu=u[bu>>2];hu=u[bu+20>>2];iu=u[bu+4>>2];cu=x(n[q[q[Ba>>2]+48>>2]](Ba));q[au+12>>2]=0;$t=x($t*x(.0833333283662796));du=x(cu+x(x(eu-du)*x(.5)));du=x(du+du);du=x(du*du);eu=x(cu+x(x(iu-hu)*x(.5)));eu=x(eu+eu);eu=x(eu*eu);u[au+8>>2]=$t*x(du+eu);cu=x(cu+x(x(gu-fu)*x(.5)));cu=x(cu+cu);cu=x(cu*cu);u[au+4>>2]=$t*x(du+cu);u[au>>2]=$t*x(eu+cu);P=bu+96|0;}function oz(Ba,$t){Ba=Ba|0;$t=$t|0;var au=x(0),ju=0,ku=0,lu=x(0);ku=q[Ba+72>>2]<<2;au=u[ku+$t>>2];ju=ku;ku=Ba+16|0;lu=x(u[Ba+64>>2]*x(au/u[ju+ku>>2]));u[Ba+64>>2]=lu;ju=q[Ba+68>>2]<<2;au=x(u[ju+$t>>2]/u[ku+ju>>2]);ju=q[Ba+76>>2]<<2;au=x(u[Ba+60>>2]*x(x(au+x(u[ju+$t>>2]/u[ku+ju>>2]))*x(.5)));u[Ba+60>>2]=au;u[Ba+56>>2]=au/x(E(x(x(lu*lu)+x(au*au))));Ub(Ba,$t);}function pz(Ba,$t,mu){Ba=Ba|0;$t=$t|0;mu=mu|0;var nu=x(0),ou=x(0),pu=x(0),qu=x(0),ru=x(0);Ie(Ba,$t,mu);if(x(n[q[q[$t>>2]+48>>2]]($t))!=x(0)){ou=u[mu+4>>2];nu=u[mu>>2];pu=u[mu+8>>2];qu=x(n[q[q[$t>>2]+48>>2]]($t));$t=x(x(x(nu*nu)+x(ou*ou))+x(pu*pu))<x(1.4210854715202004e-14);nu=$t?x(-1):nu;ru=nu;pu=$t?x(-1):pu;ou=$t?x(-1):ou;nu=x(x(1)/x(E(x(x(pu*pu)+x(x(nu*nu)+x(ou*ou))))));u[Ba>>2]=u[Ba>>2]+x(qu*x(ru*nu));u[Ba+4>>2]=u[Ba+4>>2]+x(qu*x(ou*nu));u[Ba+8>>2]=u[Ba+8>>2]+x(qu*x(pu*nu));}}function qz(Ba,$t,mu,su){Ba=Ba|0;$t=$t|0;mu=mu|0;su=su|0;var tu=0,uu=0,vu=0,wu=0;uu=P-16|0;P=uu;if((su|0)>=1){while(1){tu=vu<<4;Ie(uu,Ba,tu+$t|0);wu=q[uu+12>>2];tu=mu+tu|0;q[tu+8>>2]=q[uu+8>>2];q[tu+12>>2]=wu;wu=q[uu+4>>2];q[tu>>2]=q[uu>>2];q[tu+4>>2]=wu;vu=vu+1|0;if((vu|0)!=(su|0)){continue}break}}P=uu+16|0;}function rz(q,Ba,$t){q=q|0;Ba=Ba|0;$t=$t|0;Ie(q,Ba,$t);}function sz(Ba,$t){var mu=0,su=0,xu=0;a:{b:{c:{d:{if($t>>>0<=2){switch($t-1|0){case 1:break b;case 0:break c;default:break d}}mu=q[Ba+72>>2];xu=q[Ba+68>>2];$t=q[Ba+76>>2];break a}q[Ba+68>>2]=1;q[Ba+72>>2]=0;q[Ba+76>>2]=2;xu=1;$t=2;break a}q[Ba+68>>2]=0;q[Ba+72>>2]=1;q[Ba+76>>2]=2;mu=1;$t=2;break a}q[Ba+68>>2]=0;q[Ba+72>>2]=2;q[Ba+76>>2]=1;mu=2;$t=1;}su=Ba+32|0;q[su+(xu<<2)>>2]=q[Ba+60>>2];q[(mu<<2)+su>>2]=q[Ba+64>>2];q[($t<<2)+su>>2]=q[Ba+60>>2];}function tz(Ba,$t,yu){Aa(Ba);u[Ba+64>>2]=yu;u[Ba+60>>2]=$t;q[Ba>>2]=11836;q[Ba+76>>2]=2;q[Ba+68>>2]=0;q[Ba+72>>2]=1;q[Ba+4>>2]=11;u[Ba+40>>2]=$t;u[Ba+36>>2]=yu;u[Ba+32>>2]=$t;u[Ba+56>>2]=$t/x(E(x(x($t*$t)+x(yu*yu))));}function uz(q){return 24}function vz(q){q=q|0;return x(u[q+76>>2])}function wz(q,Ba){q=q|0;Ba=x(Ba);u[q+76>>2]=Ba;}function xz(q){return 11816}function yz(q){q=q|0;return q+184|0}function zz(Ba,$t,yu){Ba=Ba|0;$t=$t|0;yu=yu|0;var zu=0,Au=0,Bu=0,Cu=0,Du=0,Eu=0,Fu=0,Gu=0,Hu=0,Iu=0,Ju=0,Ku=0;fb(Ba,$t,yu);q[$t+20>>2]=q[Ba+76>>2];zu=q[Ba+20>>2];q[$t+12>>2]=0;q[$t+16>>2]=zu;if(zu){Cu=n[q[q[yu>>2]+16>>2]](yu,76,zu)|0;zu=q[Cu+8>>2];q[$t+12>>2]=n[q[q[yu>>2]+28>>2]](yu,zu);if(q[$t+16>>2]>0){while(1){Au=w(Du,80);Bu=Au+q[Ba+28>>2]|0;q[zu+72>>2]=q[Bu+72>>2];q[zu+64>>2]=n[q[q[yu>>2]+28>>2]](yu,q[Bu+64>>2]);if(!n[q[q[yu>>2]+24>>2]](yu,q[(Au+q[Ba+28>>2]|0)+64>>2])){Bu=q[(Au+q[Ba+28>>2]|0)+64>>2];Bu=(Gu=yu,Hu=n[q[q[Bu>>2]+52>>2]](Bu)|0,Iu=1,Fu=q[q[yu>>2]+16>>2],n[Fu](Gu|0,Hu|0,Iu|0)|0);Eu=q[(Au+q[Ba+28>>2]|0)+64>>2];Iu=yu,Hu=Bu,Gu=n[q[q[Eu>>2]+56>>2]](Eu,q[Bu+8>>2],yu)|0,Ju=1346455635,Ku=q[(Au+q[Ba+28>>2]|0)+64>>2],Fu=q[q[yu>>2]+20>>2],n[Fu](Iu|0,Hu|0,Gu|0,Ju|0,Ku|0);}Au=Au+q[Ba+28>>2]|0;q[zu+68>>2]=q[Au+68>>2];q[zu>>2]=q[Au>>2];q[zu+4>>2]=q[Au+4>>2];q[zu+8>>2]=q[Au+8>>2];q[zu+12>>2]=q[Au+12>>2];q[zu+16>>2]=q[Au+16>>2];q[zu+20>>2]=q[Au+20>>2];q[zu+24>>2]=q[Au+24>>2];q[zu+28>>2]=q[Au+28>>2];q[zu+32>>2]=q[Au+32>>2];q[zu+36>>2]=q[Au+36>>2];q[zu+40>>2]=q[Au+40>>2];q[zu+44>>2]=q[Au+44>>2];q[zu+48>>2]=q[Au+48>>2];q[zu+52>>2]=q[Au+52>>2];q[zu+56>>2]=q[Au+56>>2];q[zu+60>>2]=q[Au+60>>2];zu=zu+76|0;Du=Du+1|0;if((Du|0)<q[$t+16>>2]){continue}break}}n[q[q[yu>>2]+20>>2]](yu,Cu,11740,1497453121,q[Cu+8>>2]);}return 11765}function Az(Ba,$t){Ba=Ba|0;$t=$t|0;var yu=0,Lu=0,Mu=0,Nu=0,Ou=0,Pu=0,Qu=x(0),Ru=x(0),Su=x(0),Tu=x(0),Uu=x(0),Vu=x(0);yu=P-144|0;P=yu;if(q[Ba+20>>2]>=1){Nu=yu- -64|0;while(1){Ou=w(Pu,80);Lu=Ou+q[Ba+28>>2]|0;Mu=q[Lu+12>>2];q[yu+24>>2]=q[Lu+8>>2];q[yu+28>>2]=Mu;Mu=q[Lu+4>>2];q[yu+16>>2]=q[Lu>>2];q[yu+20>>2]=Mu;Mu=q[Lu+28>>2];q[yu+40>>2]=q[Lu+24>>2];q[yu+44>>2]=Mu;Mu=q[Lu+20>>2];q[yu+32>>2]=q[Lu+16>>2];q[yu+36>>2]=Mu;Mu=q[Lu+44>>2];q[yu+56>>2]=q[Lu+40>>2];q[yu+60>>2]=Mu;Mu=q[Lu+36>>2];q[yu+48>>2]=q[Lu+32>>2];q[yu+52>>2]=Mu;Mu=q[Lu+60>>2];q[Nu+8>>2]=q[Lu+56>>2];q[Nu+12>>2]=Mu;Mu=q[Lu+52>>2];q[Nu>>2]=q[Lu+48>>2];q[Nu+4>>2]=Mu;Lu=q[Lu+64>>2];Lu=n[q[q[Lu>>2]+28>>2]](Lu)|0;q[yu+8>>2]=q[Lu+8>>2];Mu=q[Lu+4>>2];q[yu>>2]=q[Lu>>2];q[yu+4>>2]=Mu;Qu=u[Ba+188>>2];Ru=u[$t+4>>2];Su=u[Ba+184>>2];Tu=u[$t>>2];u[yu+8>>2]=x(u[yu+8>>2]*u[$t+8>>2])/u[Ba+192>>2];q[yu+12>>2]=0;u[yu>>2]=x(Tu*u[yu>>2])/Su;u[yu+4>>2]=x(Ru*u[yu+4>>2])/Qu;Lu=q[(q[Ba+28>>2]+Ou|0)+64>>2];n[q[q[Lu>>2]+24>>2]](Lu,yu);Qu=u[Ba+184>>2];Ru=u[$t>>2];Su=u[Ba+188>>2];Tu=u[$t+4>>2];Uu=u[Ba+192>>2];Vu=u[$t+8>>2];q[yu+76>>2]=0;u[yu+72>>2]=x(Vu*u[yu+72>>2])/Uu;u[yu+68>>2]=x(Tu*u[yu+68>>2])/Su;u[yu+64>>2]=x(Ru*u[yu+64>>2])/Qu;Mu=q[yu+20>>2];Lu=q[Ba+28>>2]+Ou|0;q[Lu>>2]=q[yu+16>>2];q[Lu+4>>2]=Mu;Mu=q[yu+28>>2];q[Lu+8>>2]=q[yu+24>>2];q[Lu+12>>2]=Mu;Mu=q[yu+44>>2];q[Lu+24>>2]=q[yu+40>>2];q[Lu+28>>2]=Mu;Mu=q[yu+36>>2];q[Lu+16>>2]=q[yu+32>>2];q[Lu+20>>2]=Mu;Mu=q[yu+60>>2];q[Lu+40>>2]=q[yu+56>>2];q[Lu+44>>2]=Mu;Mu=q[yu+52>>2];q[Lu+32>>2]=q[yu+48>>2];q[Lu+36>>2]=Mu;Mu=q[Nu+12>>2];q[Lu+56>>2]=q[Nu+8>>2];q[Lu+60>>2]=Mu;Mu=q[Nu+4>>2];q[Lu+48>>2]=q[Nu>>2];q[Lu+52>>2]=Mu;if(q[Ba+68>>2]){Lu=q[(q[Ba+28>>2]+Ou|0)+64>>2];n[q[q[Lu>>2]+8>>2]](Lu,yu+16|0,yu+128|0,yu+112|0);Lu=q[yu+140>>2];q[yu+88>>2]=q[yu+136>>2];q[yu+92>>2]=Lu;Lu=q[yu+132>>2];q[yu+80>>2]=q[yu+128>>2];q[yu+84>>2]=Lu;Lu=q[yu+124>>2];q[yu+104>>2]=q[yu+120>>2];q[yu+108>>2]=Lu;Lu=q[yu+116>>2];q[yu+96>>2]=q[yu+112>>2];q[yu+100>>2]=Lu;te(q[Ba+68>>2],q[(q[Ba+28>>2]+Ou|0)+76>>2],yu+80|0);}Pu=Pu+1|0;if((Pu|0)<q[Ba+20>>2]){continue}break}}Lu=q[$t+4>>2];q[Ba+184>>2]=q[$t>>2];q[Ba+188>>2]=Lu;Lu=q[$t+12>>2];q[Ba+192>>2]=q[$t+8>>2];q[Ba+196>>2]=Lu;n[q[q[Ba>>2]+68>>2]](Ba);P=yu+144|0;}function Bz(Ba,$t,Wu){Ba=Ba|0;$t=x($t);Wu=Wu|0;var Xu=0,Yu=x(0),Zu=x(0),_u=x(0),$u=x(0);Xu=P-96|0;P=Xu;q[Xu+44>>2]=0;q[Xu+48>>2]=0;q[Xu+56>>2]=0;q[Xu+60>>2]=0;q[Xu+52>>2]=1065353216;q[Xu+76>>2]=0;q[Xu+80>>2]=0;q[Xu+72>>2]=1065353216;q[Xu+84>>2]=0;q[Xu+88>>2]=0;q[Xu+92>>2]=0;q[Xu+36>>2]=0;q[Xu+40>>2]=0;q[Xu+32>>2]=1065353216;q[Xu+64>>2]=0;q[Xu+68>>2]=0;n[q[q[Ba>>2]+8>>2]](Ba,Xu+32|0,Xu+16|0,Xu);Yu=u[Xu+24>>2];$u=u[Xu+8>>2];$t=x($t/x(12));Zu=x(x(u[Xu>>2]-u[Xu+16>>2])*x(.5));Zu=x(Zu+Zu);Zu=x(Zu*Zu);_u=x(x(u[Xu+4>>2]-u[Xu+20>>2])*x(.5));_u=x(_u+_u);_u=x(_u*_u);u[Wu+8>>2]=$t*x(Zu+_u);Yu=x(x($u-Yu)*x(.5));Yu=x(Yu+Yu);Yu=x(Yu*Yu);u[Wu+4>>2]=$t*x(Zu+Yu);u[Wu>>2]=$t*x(_u+Yu);P=Xu+96|0;}function Cz(Ba,$t,Wu,av){Ba=Ba|0;$t=$t|0;Wu=Wu|0;av=av|0;var bv=x(0),cv=0,dv=x(0),ev=x(0),fv=x(0),gv=x(0),hv=x(0),iv=x(0),jv=x(0),kv=x(0),lv=x(0),mv=x(0),nv=x(0),ov=x(0),pv=x(0),qv=x(0),rv=x(0),sv=x(0),tv=x(0),uv=x(0),vv=x(0),wv=x(0),xv=x(0),yv=x(0),zv=x(0);bv=u[Ba+44>>2];fv=u[Ba+60>>2];cv=q[Ba+20>>2];dv=u[Ba+40>>2];gv=u[Ba+56>>2];ev=u[Ba+36>>2];hv=u[Ba+52>>2];vv=x(n[q[q[Ba>>2]+48>>2]](Ba));wv=x(n[q[q[Ba>>2]+48>>2]](Ba));xv=x(n[q[q[Ba>>2]+48>>2]](Ba));yv=u[$t+52>>2];iv=u[$t+24>>2];nv=u[$t+20>>2];jv=u[$t+56>>2];ov=u[$t+40>>2];pv=u[$t+36>>2];zv=u[$t+48>>2];qv=u[$t+8>>2];rv=u[$t>>2];sv=u[$t+4>>2];tv=u[$t+16>>2];uv=u[$t+32>>2];q[Wu+12>>2]=0;kv=jv;jv=cv?x(x(hv+ev)*x(.5)):x(0);lv=cv?x(x(gv+dv)*x(.5)):x(0);mv=cv?x(x(fv+bv)*x(.5)):x(0);kv=x(kv+x(x(x(uv*jv)+x(pv*lv))+x(ov*mv)));ev=x(vv+(cv?x(x(hv-ev)*x(.5)):x(0)));dv=x(wv+(cv?x(x(gv-dv)*x(.5)):x(0)));bv=x(xv+(cv?x(x(fv-bv)*x(.5)):x(0)));fv=x(x(x(ev*x(y(uv)))+x(dv*x(y(pv))))+x(bv*x(y(ov))));u[Wu+8>>2]=kv-fv;gv=x(yv+x(x(x(jv*tv)+x(lv*nv))+x(mv*iv)));hv=x(x(x(ev*x(y(tv)))+x(dv*x(y(nv))))+x(bv*x(y(iv))));u[Wu+4>>2]=gv-hv;iv=x(zv+x(x(x(jv*rv)+x(lv*sv))+x(mv*qv)));bv=x(x(x(ev*x(y(rv)))+x(dv*x(y(sv))))+x(bv*x(y(qv))));u[Wu>>2]=iv-bv;q[av+12>>2]=0;u[av+8>>2]=fv+kv;u[av+4>>2]=hv+gv;u[av>>2]=bv+iv;}function Dz(Ba){Ba=Ba|0;var $t=x(0),Wu=0,av=0,Av=0,Bv=0;Wu=P-32|0;P=Wu;q[Ba+52>>2]=-581039253;q[Ba+56>>2]=-581039253;q[Ba+36>>2]=1566444395;q[Ba+40>>2]=1566444395;q[Ba+60>>2]=-581039253;q[Ba+64>>2]=0;q[Ba+44>>2]=1566444395;q[Ba+48>>2]=0;if(q[Ba+20>>2]>=1){while(1){Av=q[Ba+28>>2]+w(av,80)|0;Bv=q[Av+64>>2];n[q[q[Bv>>2]+8>>2]](Bv,Av,Wu+16|0,Wu);$t=u[Wu+16>>2];if(!!(u[Ba+36>>2]>$t)){u[Ba+36>>2]=$t;}$t=u[Wu>>2];if(!!(u[Ba+52>>2]<$t)){u[Ba+52>>2]=$t;}$t=u[Wu+20>>2];if(!!(u[Ba+40>>2]>$t)){u[Ba+40>>2]=$t;}$t=u[Wu+4>>2];if(!!(u[Ba+56>>2]<$t)){u[Ba+56>>2]=$t;}$t=u[Wu+24>>2];if(!!(u[Ba+44>>2]>$t)){u[Ba+44>>2]=$t;}$t=u[Wu+8>>2];if(!!(u[Ba+60>>2]<$t)){u[Ba+60>>2]=$t;}av=av+1|0;if((av|0)<q[Ba+20>>2]){continue}break}}P=Wu+32|0;}function Ez(Ba,Cv){Ba=Ba|0;Cv=Cv|0;var Dv=0;q[Ba+72>>2]=q[Ba+72>>2]+1;Dv=q[Ba+20>>2];if((Dv|0)>=1){while(1){Dv=Dv+ -1|0;if(q[(q[Ba+28>>2]+w(Dv,80)|0)+64>>2]==(Cv|0)){mi(Ba,Dv);}if((Dv|0)>0){continue}break}}n[q[q[Ba>>2]+68>>2]](Ba);}function Fz(Ba,Cv){var Ev=0,Fv=0,Gv=0,Hv=0,Iv=0,Jv=0,Kv=0;Hv=q[Ba+4>>2];a:{if((Hv|0)!=q[Ba+8>>2]){break a}Iv=Hv?Hv<<1:1;if((Hv|0)>=(Iv|0)){break a}if(Iv){q[6657]=q[6657]+1;Kv=n[q[5255]](w(Iv,80),16)|0;Hv=q[Ba+4>>2];}if((Hv|0)>=1){while(1){Ev=w(Jv,80);Fv=Ev+Kv|0;Ev=Ev+q[Ba+12>>2]|0;Gv=q[Ev+4>>2];q[Fv>>2]=q[Ev>>2];q[Fv+4>>2]=Gv;Gv=q[Ev+12>>2];q[Fv+8>>2]=q[Ev+8>>2];q[Fv+12>>2]=Gv;Gv=q[Ev+28>>2];q[Fv+24>>2]=q[Ev+24>>2];q[Fv+28>>2]=Gv;Gv=q[Ev+20>>2];q[Fv+16>>2]=q[Ev+16>>2];q[Fv+20>>2]=Gv;Gv=q[Ev+44>>2];q[Fv+40>>2]=q[Ev+40>>2];q[Fv+44>>2]=Gv;Gv=q[Ev+36>>2];q[Fv+32>>2]=q[Ev+32>>2];q[Fv+36>>2]=Gv;Gv=q[Ev+60>>2];q[Fv+56>>2]=q[Ev+56>>2];q[Fv+60>>2]=Gv;Gv=q[Ev+52>>2];q[Fv+48>>2]=q[Ev+48>>2];q[Fv+52>>2]=Gv;Gv=q[Ev+68>>2];q[Fv+64>>2]=q[Ev+64>>2];q[Fv+68>>2]=Gv;Gv=q[Ev+76>>2];q[Fv+72>>2]=q[Ev+72>>2];q[Fv+76>>2]=Gv;Jv=Jv+1|0;if((Jv|0)!=(Hv|0)){continue}break}}Ev=q[Ba+12>>2];if(Ev){if(r[Ba+16|0]){if(Ev){q[6658]=q[6658]+1;n[q[5256]](Ev);}}q[Ba+12>>2]=0;}q[Ba+12>>2]=Kv;o[Ba+16|0]=1;q[Ba+8>>2]=Iv;Hv=q[Ba+4>>2];}Ev=q[Ba+12>>2]+w(Hv,80)|0;Hv=q[Cv+4>>2];q[Ev>>2]=q[Cv>>2];q[Ev+4>>2]=Hv;Fv=q[Cv+12>>2];q[Ev+8>>2]=q[Cv+8>>2];q[Ev+12>>2]=Fv;Fv=q[Cv+28>>2];q[Ev+24>>2]=q[Cv+24>>2];q[Ev+28>>2]=Fv;Fv=q[Cv+20>>2];q[Ev+16>>2]=q[Cv+16>>2];q[Ev+20>>2]=Fv;Fv=q[Cv+44>>2];q[Ev+40>>2]=q[Cv+40>>2];q[Ev+44>>2]=Fv;Fv=q[Cv+36>>2];q[Ev+32>>2]=q[Cv+32>>2];q[Ev+36>>2]=Fv;Fv=q[Cv+60>>2];q[Ev+56>>2]=q[Cv+56>>2];q[Ev+60>>2]=Fv;Fv=q[Cv+52>>2];q[Ev+48>>2]=q[Cv+48>>2];q[Ev+52>>2]=Fv;Fv=q[Cv+76>>2];q[Ev+72>>2]=q[Cv+72>>2];q[Ev+76>>2]=Fv;Fv=q[Cv+68>>2];q[Ev+64>>2]=q[Cv+64>>2];q[Ev+68>>2]=Fv;q[Ba+4>>2]=q[Ba+4>>2]+1;}function Gz(Ba,Cv,Lv){var Mv=0,Nv=0,Ov=0,Pv=0,Qv=x(0),Rv=0;Mv=P-144|0;P=Mv;q[Ba+72>>2]=q[Ba+72>>2]+1;q[Mv+140>>2]=0;Nv=q[Cv+12>>2];q[Mv+72>>2]=q[Cv+8>>2];q[Mv+76>>2]=Nv;Nv=q[Cv+4>>2];q[Mv+64>>2]=q[Cv>>2];q[Mv+68>>2]=Nv;Nv=q[Cv+28>>2];q[Mv+88>>2]=q[Cv+24>>2];q[Mv+92>>2]=Nv;Nv=q[Cv+20>>2];q[Mv+80>>2]=q[Cv+16>>2];q[Mv+84>>2]=Nv;Nv=q[Cv+44>>2];q[Mv+104>>2]=q[Cv+40>>2];q[Mv+108>>2]=Nv;Nv=q[Cv+36>>2];q[Mv+96>>2]=q[Cv+32>>2];q[Mv+100>>2]=Nv;Nv=q[Cv+60>>2];q[Mv+120>>2]=q[Cv+56>>2];q[Mv+124>>2]=Nv;Nv=q[Cv+52>>2];Ov=q[Cv+48>>2];q[Mv+128>>2]=Lv;q[Mv+112>>2]=Ov;q[Mv+116>>2]=Nv;q[Mv+132>>2]=q[Lv+4>>2];u[Mv+136>>2]=n[q[q[Lv>>2]+48>>2]](Lv);n[q[q[Lv>>2]+8>>2]](Lv,Cv,Mv+48|0,Mv+32|0);Qv=u[Mv+48>>2];if(!!(u[Ba+36>>2]>Qv)){u[Ba+36>>2]=Qv;}Qv=u[Mv+32>>2];if(!!(u[Ba+52>>2]<Qv)){u[Ba+52>>2]=Qv;}Qv=u[Mv+52>>2];if(u[Ba+40>>2]>Qv){u[Ba+40>>2]=Qv;}Qv=u[Mv+36>>2];if(!!(u[Ba+56>>2]<Qv)){u[Ba+56>>2]=Qv;}Qv=u[Mv+56>>2];if(!!(u[Ba+44>>2]>Qv)){u[Ba+44>>2]=Qv;}Qv=u[Mv+40>>2];if(!!(u[Ba+60>>2]<Qv)){u[Ba+60>>2]=Qv;}Cv=q[Ba+68>>2];if(Cv){Lv=q[Mv+60>>2];q[Mv+8>>2]=q[Mv+56>>2];q[Mv+12>>2]=Lv;Lv=q[Mv+44>>2];q[Mv+24>>2]=q[Mv+40>>2];q[Mv+28>>2]=Lv;Lv=q[Mv+36>>2];q[Mv+16>>2]=q[Mv+32>>2];q[Mv+20>>2]=Lv;Lv=q[Mv+52>>2];q[Mv>>2]=q[Mv+48>>2];q[Mv+4>>2]=Lv;q[Mv+140>>2]=Qc(Cv,Mv,q[Ba+20>>2]);}Fz(Ba+16|0,Mv- -64|0);Lv=q[Ba+84>>2];a:{if((Lv|0)!=q[Ba+88>>2]){break a}Ov=Lv?Lv<<1:1;if((Lv|0)>=(Ov|0)){break a}Cv=0;if(Ov){q[6657]=q[6657]+1;Pv=n[q[5255]](Ov<<2,16)|0;Lv=q[Ba+84>>2];}Nv=q[Ba+92>>2];b:{c:{if((Lv|0)>=1){while(1){Rv=Cv<<2;q[Rv+Pv>>2]=q[Nv+Rv>>2];Cv=Cv+1|0;if((Lv|0)!=(Cv|0)){continue}break c}}if(!Nv){break b}}if(r[Ba+96|0]){if(Nv){q[6658]=q[6658]+1;n[q[5256]](Nv);}Lv=q[Ba+84>>2];}q[Ba+92>>2]=0;}q[Ba+92>>2]=Pv;q[Ba+88>>2]=Ov;o[Ba+96|0]=1;}q[q[Ba+92>>2]+(Lv<<2)>>2]=1056964608;q[Ba+84>>2]=Lv+1;Lv=q[Ba+124>>2];d:{if((Lv|0)!=q[Ba+128>>2]){break d}Ov=Lv?Lv<<1:1;if((Lv|0)>=(Ov|0)){break d}Cv=0;Pv=0;if(Ov){q[6657]=q[6657]+1;Pv=n[q[5255]](Ov<<2,16)|0;Lv=q[Ba+124>>2];}Nv=q[Ba+132>>2];e:{f:{if((Lv|0)>=1){while(1){Rv=Cv<<2;q[Rv+Pv>>2]=q[Nv+Rv>>2];Cv=Cv+1|0;if((Lv|0)!=(Cv|0)){continue}break f}}if(!Nv){break e}}if(r[Ba+136|0]){if(Nv){q[6658]=q[6658]+1;n[q[5256]](Nv);}Lv=q[Ba+124>>2];}q[Ba+132>>2]=0;}q[Ba+132>>2]=Pv;q[Ba+128>>2]=Ov;o[Ba+136|0]=1;}q[q[Ba+132>>2]+(Lv<<2)>>2]=0;q[Ba+124>>2]=Lv+1;Lv=q[Ba+104>>2];g:{if((Lv|0)!=q[Ba+108>>2]){break g}Ov=Lv?Lv<<1:1;if((Lv|0)>=(Ov|0)){break g}Cv=0;Pv=0;if(Ov){q[6657]=q[6657]+1;Pv=n[q[5255]](Ov<<2,16)|0;Lv=q[Ba+104>>2];}Nv=q[Ba+112>>2];h:{i:{if((Lv|0)>=1){while(1){Rv=Cv<<2;q[Rv+Pv>>2]=q[Nv+Rv>>2];Cv=Cv+1|0;if((Lv|0)!=(Cv|0)){continue}break i}}if(!Nv){break h}}if(r[Ba+116|0]){if(Nv){q[6658]=q[6658]+1;n[q[5256]](Nv);}Lv=q[Ba+104>>2];}q[Ba+112>>2]=0;}q[Ba+112>>2]=Pv;q[Ba+108>>2]=Ov;o[Ba+116|0]=1;}q[q[Ba+112>>2]+(Lv<<2)>>2]=0;q[Ba+104>>2]=Lv+1;Lv=q[Ba+144>>2];j:{if((Lv|0)!=q[Ba+148>>2]){break j}Ov=Lv?Lv<<1:1;if((Lv|0)>=(Ov|0)){break j}Cv=0;Pv=0;if(Ov){q[6657]=q[6657]+1;Pv=n[q[5255]](Ov<<2,16)|0;Lv=q[Ba+144>>2];}Nv=q[Ba+152>>2];k:{l:{if((Lv|0)>=1){while(1){Rv=Cv<<2;q[Rv+Pv>>2]=q[Nv+Rv>>2];Cv=Cv+1|0;if((Lv|0)!=(Cv|0)){continue}break l}}if(!Nv){break k}}if(r[Ba+156|0]){if(Nv){q[6658]=q[6658]+1;n[q[5256]](Nv);}Lv=q[Ba+144>>2];}q[Ba+152>>2]=0;}q[Ba+152>>2]=Pv;q[Ba+148>>2]=Ov;o[Ba+156|0]=1;}q[q[Ba+152>>2]+(Lv<<2)>>2]=0;q[Ba+144>>2]=Lv+1;Lv=q[Ba+164>>2];m:{if((Lv|0)!=q[Ba+168>>2]){break m}Ov=Lv?Lv<<1:1;if((Lv|0)>=(Ov|0)){break m}Cv=0;Pv=0;if(Ov){q[6657]=q[6657]+1;Pv=n[q[5255]](Ov<<2,16)|0;Lv=q[Ba+164>>2];}Nv=q[Ba+172>>2];n:{o:{if((Lv|0)>=1){while(1){Rv=Cv<<2;q[Rv+Pv>>2]=q[Nv+Rv>>2];Cv=Cv+1|0;if((Lv|0)!=(Cv|0)){continue}break o}}if(!Nv){break n}}if(r[Ba+176|0]){if(Nv){q[6658]=q[6658]+1;n[q[5256]](Nv);}}q[Ba+172>>2]=0;Lv=q[Ba+164>>2];}q[Ba+172>>2]=Pv;q[Ba+168>>2]=Ov;o[Ba+176|0]=1;}q[q[Ba+172>>2]+(Lv<<2)>>2]=2;q[Ba+164>>2]=q[Ba+164>>2]+1;P=Mv+144|0;}function Hz(Ba){Ba=Ba|0;Ba=oi(Ba);if(Ba){q[6658]=q[6658]+1;n[q[5256]](Ba);}}function Iz(q){return 11628}function Jz(q,Ba){return 0}function Kz(Ba){Ba=Ba|0;Ba=q[Ba+96>>2];return ((Ba|0)==4?4:((Ba|0)==3)<<1)|0}function Lz(Ba,Cv,Lv){Ba=Ba|0;Cv=Cv|0;Lv=Lv|0;Ba=(Cv<<4)+Ba|0;Cv=q[Ba+112>>2];q[Lv+8>>2]=q[Ba+108>>2];q[Lv+12>>2]=Cv;Cv=q[Ba+104>>2];q[Lv>>2]=q[Ba+100>>2];q[Lv+4>>2]=Cv;}function Mz(Ba,Cv,Lv,Sv){Ba=Ba|0;Cv=Cv|0;Lv=Lv|0;Sv=Sv|0;var Tv=0;a:{b:{c:{d:{Tv=q[Ba+96>>2]+ -2|0;e:{if(Tv>>>0>2){break e}f:{switch(Tv-1|0){case 0:if(Cv>>>0>2){break e}g:{switch(Cv-1|0){case 0:break c;case 1:break g;default:break d}}break b;case 1:break f;default:break d}}if(Cv>>>0>5){break e}h:{switch(Cv-1|0){case 2:Cv=q[Ba+104>>2];q[Lv>>2]=q[Ba+100>>2];q[Lv+4>>2]=Cv;Cv=q[Ba+112>>2];q[Lv+8>>2]=q[Ba+108>>2];q[Lv+12>>2]=Cv;break a;case 3:Cv=q[Ba+128>>2];q[Lv+8>>2]=q[Ba+124>>2];q[Lv+12>>2]=Cv;Cv=q[Ba+120>>2];q[Lv>>2]=q[Ba+116>>2];q[Lv+4>>2]=Cv;break a;case 1:break b;case 0:break c;case 4:break h;default:break d}}Cv=q[Ba+144>>2];q[Lv+8>>2]=q[Ba+140>>2];q[Lv+12>>2]=Cv;Cv=q[Ba+136>>2];q[Lv>>2]=q[Ba+132>>2];q[Lv+4>>2]=Cv;Cv=q[Ba+160>>2];q[Sv+8>>2]=q[Ba+156>>2];q[Sv+12>>2]=Cv;Cv=q[Ba+152>>2];q[Sv>>2]=q[Ba+148>>2];q[Sv+4>>2]=Cv;}return}Cv=q[Ba+104>>2];q[Lv>>2]=q[Ba+100>>2];q[Lv+4>>2]=Cv;Cv=q[Ba+112>>2];q[Lv+8>>2]=q[Ba+108>>2];q[Lv+12>>2]=Cv;Cv=q[Ba+128>>2];q[Sv+8>>2]=q[Ba+124>>2];q[Sv+12>>2]=Cv;Cv=q[Ba+120>>2];q[Sv>>2]=q[Ba+116>>2];q[Sv+4>>2]=Cv;return}Cv=q[Ba+128>>2];q[Lv+8>>2]=q[Ba+124>>2];q[Lv+12>>2]=Cv;Cv=q[Ba+120>>2];q[Lv>>2]=q[Ba+116>>2];q[Lv+4>>2]=Cv;Cv=q[Ba+144>>2];q[Sv+8>>2]=q[Ba+140>>2];q[Sv+12>>2]=Cv;Cv=q[Ba+136>>2];q[Sv>>2]=q[Ba+132>>2];q[Sv+4>>2]=Cv;return}Cv=q[Ba+144>>2];q[Lv+8>>2]=q[Ba+140>>2];q[Lv+12>>2]=Cv;Cv=q[Ba+136>>2];q[Lv>>2]=q[Ba+132>>2];q[Lv+4>>2]=Cv;Cv=q[Ba+112>>2];q[Sv+8>>2]=q[Ba+108>>2];q[Sv+12>>2]=Cv;Cv=q[Ba+104>>2];q[Sv>>2]=q[Ba+100>>2];q[Sv+4>>2]=Cv;return}Cv=q[Ba+160>>2];q[Sv+8>>2]=q[Ba+156>>2];q[Sv+12>>2]=Cv;Cv=q[Ba+152>>2];q[Sv>>2]=q[Ba+148>>2];q[Sv+4>>2]=Cv;}function Nz(Ba){Ba=Ba|0;Ba=q[Ba+96>>2]+ -2|0;if(Ba>>>0<=2){return q[(Ba<<2)+11648>>2]}return 0}function Oz(q,Ba,Cv,Lv){q=q|0;Ba=Ba|0;Cv=Cv|0;Lv=Lv|0;bi(q,Ba,Cv,Lv);}function Pz(Ba,Cv){var Lv=0,Sv=0;Lv=q[Ba+96>>2];q[Ba+96>>2]=Lv+1;Sv=q[Cv+12>>2];Lv=(Lv<<4)+Ba|0;q[Lv+108>>2]=q[Cv+8>>2];q[Lv+112>>2]=Sv;Sv=q[Cv+4>>2];q[Lv+100>>2]=q[Cv>>2];q[Lv+104>>2]=Sv;Zc(Ba);}function Qz(Ba,Cv,Uv){Ba=Ba|0;Cv=Cv|0;Uv=Uv|0;var Vv=0,Wv=x(0),Xv=x(0),Yv=x(0),Zv=x(0),_v=x(0),$v=x(0),aw=x(0),bw=x(0),cw=x(0),dw=x(0),ew=x(0),fw=x(0),gw=x(0),hw=x(0),iw=x(0),jw=x(0),kw=x(0),lw=x(0),mw=x(0),nw=x(0),ow=x(0),pw=0,qw=0,rw=0,sw=0,tw=x(0),uw=x(0),vw=x(0),ww=0,xw=0,yw=0;Vv=P-256|0;P=Vv;n[q[5253]](11420);q[Ba+4>>2]=q[Ba+4>>2]+1;rw=q[Uv+36>>2];ww=w(rw,80);xw=q[Ba+12>>2];yw=q[xw+4>>2];pw=q[(ww+q[yw+28>>2]|0)+64>>2];Uv=q[Ba+8>>2];sw=q[Cv+36>>2];Cv=q[q[Uv+4>>2]+28>>2]+w(sw,80)|0;qw=q[Cv+64>>2];Uv=q[Uv+12>>2];tw=u[Uv+52>>2];uw=u[Uv+56>>2];Xv=u[Uv+24>>2];Wv=u[Uv+20>>2];Yv=u[Uv+40>>2];Zv=u[Uv+36>>2];vw=u[Uv+48>>2];_v=u[Uv+8>>2];$v=u[Uv>>2];aw=u[Uv+4>>2];bw=u[Uv+16>>2];cw=u[Uv+32>>2];dw=u[Cv+32>>2];ew=u[Cv>>2];fw=u[Cv+16>>2];gw=u[Cv+56>>2];hw=u[Cv+48>>2];iw=u[Cv+52>>2];jw=u[Cv+36>>2];kw=u[Cv+4>>2];lw=u[Cv+20>>2];mw=u[Cv+40>>2];nw=u[Cv+8>>2];ow=u[Cv+24>>2];Uv=0;q[Vv+244>>2]=0;q[Vv+228>>2]=0;q[Vv+212>>2]=0;u[Vv+224>>2]=x(x(cw*nw)+x(Zv*ow))+x(Yv*mw);u[Vv+220>>2]=x(x(cw*kw)+x(Zv*lw))+x(Yv*jw);u[Vv+208>>2]=x(x(bw*nw)+x(Wv*ow))+x(Xv*mw);u[Vv+204>>2]=x(x(bw*kw)+x(Wv*lw))+x(Xv*jw);u[Vv+240>>2]=uw+x(x(x(cw*hw)+x(Zv*iw))+x(Yv*gw));u[Vv+236>>2]=tw+x(x(x(bw*hw)+x(Wv*iw))+x(Xv*gw));q[Vv+196>>2]=0;u[Vv+216>>2]=x(x(cw*ew)+x(Zv*fw))+x(Yv*dw);u[Vv+200>>2]=x(x(bw*ew)+x(Wv*fw))+x(Xv*dw);u[Vv+192>>2]=x(x($v*nw)+x(aw*ow))+x(_v*mw);u[Vv+188>>2]=x(x($v*kw)+x(aw*lw))+x(_v*jw);u[Vv+184>>2]=x(x($v*ew)+x(aw*fw))+x(_v*dw);u[Vv+232>>2]=vw+x(x(x($v*hw)+x(aw*iw))+x(_v*gw));Cv=q[xw+12>>2];tw=u[Cv+52>>2];uw=u[Cv+56>>2];Xv=u[Cv+24>>2];Wv=u[Cv+20>>2];Yv=u[Cv+40>>2];Zv=u[Cv+36>>2];vw=u[Cv+48>>2];_v=u[Cv+8>>2];$v=u[Cv>>2];aw=u[Cv+4>>2];bw=u[Cv+16>>2];cw=u[Cv+32>>2];Cv=q[yw+28>>2]+ww|0;dw=u[Cv+32>>2];ew=u[Cv>>2];fw=u[Cv+16>>2];gw=u[Cv+56>>2];hw=u[Cv+48>>2];iw=u[Cv+52>>2];jw=u[Cv+36>>2];kw=u[Cv+4>>2];lw=u[Cv+20>>2];mw=u[Cv+40>>2];nw=u[Cv+8>>2];ow=u[Cv+24>>2];q[Vv+180>>2]=0;q[Vv+164>>2]=0;q[Vv+148>>2]=0;u[Vv+160>>2]=x(x(cw*nw)+x(Zv*ow))+x(Yv*mw);u[Vv+156>>2]=x(x(cw*kw)+x(Zv*lw))+x(Yv*jw);u[Vv+144>>2]=x(x(bw*nw)+x(Wv*ow))+x(Xv*mw);u[Vv+140>>2]=x(x(bw*kw)+x(Wv*lw))+x(Xv*jw);u[Vv+176>>2]=uw+x(x(x(cw*hw)+x(Zv*iw))+x(Yv*gw));u[Vv+172>>2]=tw+x(x(x(bw*hw)+x(Wv*iw))+x(Xv*gw));q[Vv+132>>2]=0;u[Vv+152>>2]=x(x(cw*ew)+x(Zv*fw))+x(Yv*dw);u[Vv+136>>2]=x(x(bw*ew)+x(Wv*fw))+x(Xv*dw);u[Vv+128>>2]=x(x($v*nw)+x(aw*ow))+x(_v*mw);u[Vv+124>>2]=x(x($v*kw)+x(aw*lw))+x(_v*jw);u[Vv+120>>2]=x(x($v*ew)+x(aw*fw))+x(_v*dw);u[Vv+168>>2]=vw+x(x(x($v*hw)+x(aw*iw))+x(_v*gw));n[q[q[qw>>2]+8>>2]](qw,Vv+184|0,Vv+104|0,Vv+88|0);n[q[q[pw>>2]+8>>2]](pw,Vv+120|0,Vv+72|0,Vv+56|0);Wv=u[q[Ba+24>>2]+32>>2];Xv=x(u[Vv+104>>2]-Wv);u[Vv+104>>2]=Xv;u[Vv+108>>2]=u[Vv+108>>2]-Wv;u[Vv+112>>2]=u[Vv+112>>2]-Wv;u[Vv+88>>2]=Wv+u[Vv+88>>2];u[Vv+92>>2]=Wv+u[Vv+92>>2];u[Vv+96>>2]=Wv+u[Vv+96>>2];Cv=q[6047];a:{if(Cv){if(!n[Cv](qw,pw)){break a}Xv=u[Vv+104>>2];}if(!(u[Vv+88>>2]<u[Vv+72>>2]|Xv>u[Vv+56>>2])){Uv=1;}Cv=0;Cv=u[Vv+96>>2]<u[Vv+80>>2]|u[Vv+112>>2]>u[Vv+64>>2]?Cv:Uv;if(u[Vv+92>>2]<u[Vv+76>>2]|u[Vv+108>>2]>u[Vv+60>>2]|Cv^1){break a}Cv=q[Ba+8>>2];Uv=q[Cv+8>>2];q[Vv+48>>2]=-1;q[Vv+40>>2]=Uv;q[Vv+36>>2]=qw;q[Vv+32>>2]=Cv;q[Vv+44>>2]=Vv+184;q[Vv+52>>2]=sw;Cv=q[Ba+12>>2];Uv=q[Cv+8>>2];q[Vv+24>>2]=-1;q[Vv+16>>2]=Uv;q[Vv+12>>2]=pw;q[Vv+8>>2]=Cv;q[Vv+20>>2]=Vv+120;q[Vv+28>>2]=rw;Cv=Zz(q[Ba+28>>2],sw,rw);b:{if(!!(u[q[Ba+24>>2]+32>>2]>x(0))){Cv=q[Ba+16>>2];Uv=n[q[q[Cv>>2]+8>>2]](Cv,Vv+32|0,Vv+8|0,0,2)|0;break b}if(Cv){Uv=q[Cv+8>>2];break b}Cv=q[Ba+16>>2];Uv=n[q[q[Cv>>2]+8>>2]](Cv,Vv+32|0,Vv+8|0,q[Ba+32>>2],1)|0;Cv=q[Ba+28>>2];q[(n[q[q[Cv>>2]+12>>2]](Cv,sw,rw)|0)+8>>2]=Uv;}Cv=q[Ba+24>>2];pw=q[Cv+12>>2];qw=q[Cv+8>>2];q[Cv+12>>2]=Vv+8;q[Cv+8>>2]=Vv+32;n[q[q[Cv>>2]+8>>2]](Cv,-1,sw);Cv=q[Ba+24>>2];n[q[q[Cv>>2]+12>>2]](Cv,-1,rw);n[q[q[Uv>>2]+8>>2]](Uv,Vv+32|0,Vv+8|0,q[Ba+20>>2],q[Ba+24>>2]);Ba=q[Ba+24>>2];q[Ba+8>>2]=qw;q[Ba+12>>2]=pw;}n[q[5254]]();P=Vv+256|0;}function Rz(q,Ba,Cv,Uv,zw){return x(x(0))}



            function W(a){var b=0;while(1){q[a+4>>2]=0;q[a+8>>2]=0;b=q[a+24>>2];if(b){W(b);}a=q[a+28>>2];if(a){continue}break}}function X(a){a=a|0;aa(a);}function Y(a){a=a|0;var c=0;c=P-16|0;P=c;q[c+12>>2]=a;a=q[c+12>>2];if(a){n[q[q[a>>2]+4>>2]](a);}P=c+16|0;}function Z(a){var d=0;d=P-16|0;P=d;q[d+12>>2]=a;a=q[d+12>>2];q[6657]=q[6657]+1;a=n[q[5255]](a,16)|0;P=d+16|0;return a}function _(a,e,f){var g=0,h=0,i=0,j=0;a:{if(!f){break a}g=a+f|0;o[g+ -1|0]=e;o[a|0]=e;if(f>>>0<3){break a}o[g+ -2|0]=e;o[a+1|0]=e;o[g+ -3|0]=e;o[a+2|0]=e;if(f>>>0<7){break a}o[g+ -4|0]=e;o[a+3|0]=e;if(f>>>0<9){break a}g=0-a&3;h=g+a|0;e=w(e&255,16843009);q[h>>2]=e;f=f-g&-4;g=f+h|0;q[g+ -4>>2]=e;if(f>>>0<9){break a}q[h+8>>2]=e;q[h+4>>2]=e;q[g+ -8>>2]=e;q[g+ -12>>2]=e;if(f>>>0<25){break a}q[h+24>>2]=e;q[h+20>>2]=e;q[h+16>>2]=e;q[h+12>>2]=e;q[g+ -16>>2]=e;q[g+ -20>>2]=e;q[g+ -24>>2]=e;q[g+ -28>>2]=e;j=h&4|24;f=f-j|0;if(f>>>0<32){break a}g=e;i=e;e=h+j|0;while(1){q[e+24>>2]=i;q[e+28>>2]=g;q[e+16>>2]=i;q[e+20>>2]=g;q[e+8>>2]=i;q[e+12>>2]=g;q[e>>2]=i;q[e+4>>2]=g;e=e+32|0;f=f+ -32|0;if(f>>>0>31){continue}break}}return a}function $(a,f){var k=0,l=0,m=0,n=0,o=x(0),p=0;a:{k=(j(f),e(0));m=k&2147483647;if(m>>>0<=2139095040){n=(j(a),e(0));l=n&2147483647;if(l>>>0<2139095041){break a}}return x(a+f)}if((k|0)==1065353216){return mh(a)}p=k>>>30&2;k=p|n>>>31;b:{c:{d:{e:{if(!l){f:{switch(k-2|0){case 0:break e;case 1:break f;default:break d}}return x(-3.1415927410125732)}if((m|0)!=2139095040){if(!m|!(m+218103808>>>0>=l>>>0?(l|0)!=2139095040:0)){break b}g:{if(l+218103808>>>0<m>>>0){o=x(0);if(p){break g}}o=mh(x(y(x(a/f))));}a=o;if(k>>>0<=2){h:{switch(k-1|0){case 0:return x(-a);case 1:break h;default:break d}}return x(x(3.1415927410125732)-x(a+x(8.742277657347586e-8)))}return x(x(a+x(8.742277657347586e-8))+x(-3.1415927410125732))}if((l|0)==2139095040){break c}return u[(k<<2)+20576>>2]}a=x(3.1415927410125732);}return a}return u[(k<<2)+20560>>2]}return (n|0)<0?x(-1.5707963705062866):x(1.5707963705062866)}function aa(a){a=a|0;var e=0,f=0,r=0,s=0,u=0,v=0,w=0;a:{if(!a){break a}r=a+ -8|0;f=q[a+ -4>>2];a=f&-8;u=r+a|0;b:{if(f&1){break b}if(!(f&3)){break a}f=q[r>>2];r=r-f|0;if(r>>>0<t[6683]){break a}a=a+f|0;if(q[6684]!=(r|0)){if(f>>>0<=255){s=q[r+8>>2];f=f>>>3;e=q[r+12>>2];if((e|0)==(s|0)){q[6679]=q[6679]&LB(f);break b}q[s+12>>2]=e;q[e+8>>2]=s;break b}w=q[r+24>>2];f=q[r+12>>2];c:{if((r|0)!=(f|0)){e=q[r+8>>2];q[e+12>>2]=f;q[f+8>>2]=e;break c}d:{s=r+20|0;e=q[s>>2];if(e){break d}s=r+16|0;e=q[s>>2];if(e){break d}f=0;break c}while(1){v=s;f=e;s=f+20|0;e=q[s>>2];if(e){continue}s=f+16|0;e=q[f+16>>2];if(e){continue}break}q[v>>2]=0;}if(!w){break b}s=q[r+28>>2];e=(s<<2)+27020|0;e:{if(q[e>>2]==(r|0)){q[e>>2]=f;if(f){break e}q[6680]=q[6680]&LB(s);break b}q[w+(q[w+16>>2]==(r|0)?16:20)>>2]=f;if(!f){break b}}q[f+24>>2]=w;e=q[r+16>>2];if(e){q[f+16>>2]=e;q[e+24>>2]=f;}e=q[r+20>>2];if(!e){break b}q[f+20>>2]=e;q[e+24>>2]=f;break b}f=q[u+4>>2];if((f&3)!=3){break b}q[6681]=a;q[u+4>>2]=f&-2;q[r+4>>2]=a|1;q[a+r>>2]=a;return}if(u>>>0<=r>>>0){break a}f=q[u+4>>2];if(!(f&1)){break a}f:{if(!(f&2)){if(q[6685]==(u|0)){q[6685]=r;a=q[6682]+a|0;q[6682]=a;q[r+4>>2]=a|1;if(q[6684]!=(r|0)){break a}q[6681]=0;q[6684]=0;return}if(q[6684]==(u|0)){q[6684]=r;a=q[6681]+a|0;q[6681]=a;q[r+4>>2]=a|1;q[a+r>>2]=a;return}a=(f&-8)+a|0;g:{if(f>>>0<=255){e=q[u+8>>2];f=f>>>3;s=q[u+12>>2];if((e|0)==(s|0)){q[6679]=q[6679]&LB(f);break g}q[e+12>>2]=s;q[s+8>>2]=e;break g}w=q[u+24>>2];f=q[u+12>>2];h:{if((u|0)!=(f|0)){e=q[u+8>>2];q[e+12>>2]=f;q[f+8>>2]=e;break h}i:{s=u+20|0;e=q[s>>2];if(e){break i}s=u+16|0;e=q[s>>2];if(e){break i}f=0;break h}while(1){v=s;f=e;s=f+20|0;e=q[s>>2];if(e){continue}s=f+16|0;e=q[f+16>>2];if(e){continue}break}q[v>>2]=0;}if(!w){break g}s=q[u+28>>2];e=(s<<2)+27020|0;j:{if(q[e>>2]==(u|0)){q[e>>2]=f;if(f){break j}q[6680]=q[6680]&LB(s);break g}q[w+(q[w+16>>2]==(u|0)?16:20)>>2]=f;if(!f){break g}}q[f+24>>2]=w;e=q[u+16>>2];if(e){q[f+16>>2]=e;q[e+24>>2]=f;}e=q[u+20>>2];if(!e){break g}q[f+20>>2]=e;q[e+24>>2]=f;}q[r+4>>2]=a|1;q[a+r>>2]=a;if(q[6684]!=(r|0)){break f}q[6681]=a;return}q[u+4>>2]=f&-2;q[r+4>>2]=a|1;q[a+r>>2]=a;}if(a>>>0<=255){a=a>>>3;f=(a<<3)+26756|0;e=q[6679];a=1<<a;k:{if(!(e&a)){q[6679]=a|e;a=f;break k}a=q[f+8>>2];}q[f+8>>2]=r;q[a+12>>2]=r;q[r+12>>2]=f;q[r+8>>2]=a;return}q[r+16>>2]=0;q[r+20>>2]=0;f=r;s=a>>>8;e=0;l:{if(!s){break l}e=31;if(a>>>0>16777215){break l}e=s;s=s+1048320>>>16&8;e=e<<s;w=e+520192>>>16&4;e=e<<w;v=e+245760>>>16&2;e=(e<<v>>>15)-(v|(s|w))|0;e=(e<<1|a>>>e+21&1)+28|0;}q[f+28>>2]=e;v=(e<<2)+27020|0;s=q[6680];f=1<<e;m:{if(!(s&f)){q[6680]=f|s;q[v>>2]=r;q[r+12>>2]=r;q[r+24>>2]=v;q[r+8>>2]=r;break m}s=a<<((e|0)==31?0:25-(e>>>1)|0);f=q[v>>2];n:{while(1){e=f;if((q[f+4>>2]&-8)==(a|0)){break n}f=s>>>29;s=s<<1;v=e+(f&4)|0;f=q[v+16>>2];if(f){continue}break}q[v+16>>2]=r;q[r+12>>2]=r;q[r+24>>2]=e;q[r+8>>2]=r;break m}a=q[e+8>>2];q[a+12>>2]=r;q[e+8>>2]=r;q[r+24>>2]=0;q[r+12>>2]=e;q[r+8>>2]=a;}a=q[6687]+ -1|0;q[6687]=a;if(a){break a}r=27172;while(1){a=q[r>>2];r=a+8|0;if(a){continue}break}q[6687]=-1;}}function ba(a,t,y){var z=0,A=x(0),B=x(0),C=x(0),D=0,E=0,F=0,G=x(0),H=x(0),I=x(0),J=0,K=x(0),L=x(0),M=x(0),N=x(0),O=x(0),Q=x(0),R=x(0),S=x(0),T=x(0),U=x(0),V=x(0),W=x(0);F=P-16|0;P=F;E=q[a+844>>2];a:{if((E|0)<1){break a}while(1){K=u[t+48>>2];N=u[t+8>>2];O=u[t>>2];Q=u[t+4>>2];L=u[t+52>>2];R=u[t+24>>2];G=u[t+16>>2];S=u[t+20>>2];A=u[t+56>>2];B=u[t+40>>2];C=u[t+32>>2];M=u[t+36>>2];E=E+ -1|0;z=w(E,208)+a|0;q[z- -64>>2]=0;I=A;A=u[z+4>>2];H=x(C*A);C=u[z+8>>2];T=B;B=u[z+12>>2];M=x(I+x(x(H+x(M*C))+x(T*B)));u[z+60>>2]=M;L=x(L+x(x(x(A*G)+x(C*S))+x(B*R)));u[z+56>>2]=L;K=x(K+x(x(x(A*O)+x(C*Q))+x(B*N)));u[z+52>>2]=K;N=u[y+56>>2];O=u[y+40>>2];Q=u[y+32>>2];R=u[y+36>>2];G=u[y+52>>2];S=u[y+24>>2];U=u[y+16>>2];V=u[y+20>>2];A=u[y+48>>2];B=u[y+8>>2];C=u[y>>2];H=u[y+4>>2];q[z+48>>2]=0;I=A;A=u[z+20>>2];W=x(C*A);C=u[z+24>>2];T=B;B=u[z+28>>2];H=x(I+x(x(W+x(H*C))+x(T*B)));u[z+36>>2]=H;G=x(G+x(x(x(A*U)+x(C*V))+x(B*S)));u[z+40>>2]=G;A=x(N+x(x(x(A*Q)+x(C*R))+x(B*O)));u[z+44>>2]=A;u[z+84>>2]=x(x(x(K-H)*u[z+68>>2])+x(x(L-G)*u[z+72>>2]))+x(x(M-A)*u[z+76>>2]);q[z+168>>2]=q[z+168>>2]+1;if((E|0)>0){continue}break}t=q[a+844>>2];if((t|0)<1){break a}while(1){y=t;t=y+ -1|0;z=w(t,208)+a|0;E=z+4|0;A=u[z+84>>2];C=u[a+848>>2];b:{if(!(A<=C)){D=q[z+120>>2];c:{if(!D){break c}J=q[5779];if(!J){break c}n[J](D)|0;q[z+120>>2]=0;}z=a;D=q[z+844>>2];if((D|0)!=(y|0)){y=w(D+ -1|0,208)+a|0;va(E,y+4|0,208);q[y+168>>2]=0;q[y+120>>2]=0;q[y+132>>2]=0;q[y+136>>2]=0;q[y+140>>2]=0;q[y+144>>2]=0;y=q[a+844>>2];}y=y+ -1|0;q[z+844>>2]=y;if(y){break b}y=q[5782];if(!y){break b}q[F+12>>2]=a;n[y](F+12|0);break b}B=x(u[z+36>>2]-x(u[z+52>>2]-x(u[z+68>>2]*A)));I=x(B*B);B=x(u[z+40>>2]-x(u[z+56>>2]-x(A*u[z+72>>2])));A=x(u[z+44>>2]-x(u[z+60>>2]-x(A*u[z+76>>2])));if(!!(x(x(I+x(B*B))+x(A*A))>x(C*C))){D=q[z+120>>2];d:{if(!D){break d}J=q[5779];if(!J){break d}n[J](D)|0;q[z+120>>2]=0;}z=a;D=q[z+844>>2];if((D|0)!=(y|0)){y=w(D+ -1|0,208)+a|0;va(E,y+4|0,208);q[y+168>>2]=0;q[y+120>>2]=0;q[y+132>>2]=0;q[y+136>>2]=0;q[y+140>>2]=0;q[y+144>>2]=0;y=q[a+844>>2];}y=y+ -1|0;q[z+844>>2]=y;if(y){break b}y=q[5782];if(!y){break b}q[F+8>>2]=a;n[y](F+8|0);break b}y=q[5780];if(!y){break b}n[y](E,q[a+836>>2],q[a+840>>2])|0;}if((t|0)>0){continue}break}}P=F+16|0;}function ca(a,t,x,y){var X=0;X=P-16|0;q[X+12>>2]=a;q[X+8>>2]=t;q[X+4>>2]=x;q[X>>2]=y;a=q[X+12>>2];u[a>>2]=u[q[X+8>>2]>>2];u[a+4>>2]=u[q[X+4>>2]>>2];u[a+8>>2]=u[q[X>>2]>>2];u[a+12>>2]=0;}function da(a){a=a|0;return a|0}function ea(a,q){var t=0,y=0,P=0,Y=0,Z=0,_=0,$=0;a:{Z=(j(q),e(0));P=Z<<1;if(!(!P|(Z&2147483647)>>>0>2139095040)){$=(j(a),e(0));y=$>>>23&255;if((y|0)!=255){break a}}a=x(a*q);return x(a/a)}t=$<<1;if(t>>>0>P>>>0){_=Z>>>23&255;b:{if(!y){y=0;t=$<<9;if((t|0)>=0){while(1){y=y+ -1|0;t=t<<1;if((t|0)>-1){continue}break}}t=$<<1-y;break b}t=$&8388607|8388608;}P=t;c:{if(!_){_=0;Y=Z<<9;if((Y|0)>=0){while(1){_=_+ -1|0;Y=Y<<1;if((Y|0)>-1){continue}break}}Z=Z<<1-_;break c}Z=Z&8388607|8388608;}P=P-Z|0;Y=(P|0)>-1;if((y|0)>(_|0)){while(1){d:{if(!(Y&1)){break d}t=P;if(t){break d}return x(a*x(0))}t=t<<1;P=t-Z|0;Y=(P|0)>-1;y=y+ -1|0;if((y|0)>(_|0)){continue}break}y=_;}e:{if(!Y){break e}t=P;if(t){break e}return x(a*x(0))}f:{if(t>>>0>8388607){Y=t;break f}while(1){y=y+ -1|0;P=t>>>0<4194304;Y=t<<1;t=Y;if(P){continue}break}}t=$&-2147483648;return f(0,t|((y|0)>=1?Y+ -8388608|y<<23:Y>>>1-y)),k()}return (t|0)==(P|0)?x(a*x(0)):a}function fa(a){var q=x(0),aa=0,ba=0,ca=0,da=0;ba=P-16|0;P=ba;ca=(j(a),e(0));aa=ca&2147483647;a:{if(aa>>>0<=1061752794){q=x(1);if(aa>>>0<964689920){break a}q=Fa(+a);break a}if(aa>>>0<=1081824209){da=+a;if(aa>>>0>=1075235812){q=x(-Fa(((ca|0)<0?3.141592653589793:-3.141592653589793)+da));break a}if((ca|0)<=-1){q=Ea(da+1.5707963267948966);break a}q=Ea(1.5707963267948966-da);break a}if(aa>>>0<=1088565717){if(aa>>>0>=1085271520){q=Fa(((ca|0)<0?6.283185307179586:-6.283185307179586)+ +a);break a}if((ca|0)<=-1){q=Ea(-4.71238898038469- +a);break a}q=Ea(+a+ -4.71238898038469);break a}q=x(a-a);if(aa>>>0>=2139095040){break a}aa=nh(a,ba+8|0)&3;if(aa>>>0<=2){b:{switch(aa-1|0){default:q=Fa(v[ba+8>>3]);break a;case 0:q=Ea(-v[ba+8>>3]);break a;case 1:break b}}q=x(-Fa(v[ba+8>>3]));break a}q=Ea(v[ba+8>>3]);}a=q;P=ba+16|0;return a}function ga(a){var ea=0,fa=0,ga=0,ha=0;fa=P-16|0;P=fa;ha=(j(a),e(0));ea=ha&2147483647;a:{if(ea>>>0<=1061752794){if(ea>>>0<964689920){break a}a=Ea(+a);break a}if(ea>>>0<=1081824209){ga=+a;if(ea>>>0<=1075235811){if((ha|0)<=-1){a=x(-Fa(ga+1.5707963267948966));break a}a=Fa(ga+ -1.5707963267948966);break a}a=Ea(-(((ha|0)<0?3.141592653589793:-3.141592653589793)+ga));break a}if(ea>>>0<=1088565717){ga=+a;if(ea>>>0<=1085271519){if((ha|0)<=-1){a=Fa(ga+4.71238898038469);break a}a=x(-Fa(ga+ -4.71238898038469));break a}a=Ea(((ha|0)<0?6.283185307179586:-6.283185307179586)+ga);break a}if(ea>>>0>=2139095040){a=x(a-a);break a}ea=nh(a,fa+8|0)&3;if(ea>>>0<=2){b:{switch(ea-1|0){default:a=Ea(v[fa+8>>3]);break a;case 0:a=Fa(v[fa+8>>3]);break a;case 1:break b}}a=Ea(-v[fa+8>>3]);break a}a=x(-Fa(v[fa+8>>3]));}P=fa+16|0;return a}function ha(a,x,ia){if(!(r[a|0]&32)){Kv(x,ia,a);}}function ia(a,x){a=a|0;x=x|0;var ia=0;ia=P-16|0;P=ia;q[ia+12>>2]=a;q[ia+8>>2]=x;a=q[ia+12>>2];n[q[q[a>>2]+24>>2]](a,q[ia+8>>2]);P=ia+16|0;}function ja(a,ja){var ka=0,la=0,ma=x(0);ka=P+ -64|0;P=ka;q[ka+60>>2]=a;q[ka+56>>2]=ja;a=P-16|0;ja=q[ka+60>>2];q[a+12>>2]=ja;ma=u[q[a+12>>2]>>2];a=P-16|0;q[a+12>>2]=ja+16;ma=x(ma+u[q[a+12>>2]+4>>2]);a=P-16|0;q[a+12>>2]=ja+32;u[ka+52>>2]=ma+u[q[a+12>>2]+8>>2];a:{if(u[ka+52>>2]>x(0)){a=P-16|0;u[a+12>>2]=u[ka+52>>2]+x(1);u[ka+28>>2]=E(u[a+12>>2]);u[ka+44>>2]=u[ka+28>>2]*x(.5);u[ka+28>>2]=x(.5)/u[ka+28>>2];a=P-16|0;q[a+12>>2]=ja+32;ma=u[q[a+12>>2]+4>>2];a=P-16|0;q[a+12>>2]=ja+16;u[ka+32>>2]=x(ma-u[q[a+12>>2]+8>>2])*u[ka+28>>2];a=P-16|0;q[a+12>>2]=ja;ma=u[q[a+12>>2]+8>>2];a=P-16|0;q[a+12>>2]=ja+32;u[ka+36>>2]=x(ma-u[q[a+12>>2]>>2])*u[ka+28>>2];a=P-16|0;q[a+12>>2]=ja+16;ma=u[q[a+12>>2]>>2];a=P-16|0;q[a+12>>2]=ja;u[ka+40>>2]=x(ma-u[q[a+12>>2]+4>>2])*u[ka+28>>2];break a}a=ka;la=P-16|0;q[la+12>>2]=ja;ma=u[q[la+12>>2]>>2];la=P-16|0;q[la+12>>2]=ja+16;b:{if(ma<u[q[la+12>>2]+4>>2]){la=P-16|0;q[la+12>>2]=ja+16;ma=u[q[la+12>>2]+4>>2];la=P-16|0;q[la+12>>2]=ja+32;la=ma<u[q[la+12>>2]+8>>2]?2:1;break b}la=P-16|0;q[la+12>>2]=ja;ma=u[q[la+12>>2]>>2];la=P-16|0;q[la+12>>2]=ja+32;la=ma<u[q[la+12>>2]+8>>2]?2:0;}q[a+24>>2]=la;q[ka+20>>2]=(q[ka+24>>2]+1|0)%3;q[ka+16>>2]=(q[ka+24>>2]+2|0)%3;a=P-16|0;q[a+12>>2]=ja+(q[ka+24>>2]<<4);ma=u[q[a+12>>2]+(q[ka+24>>2]<<2)>>2];a=P-16|0;q[a+12>>2]=ja+(q[ka+20>>2]<<4);ma=x(ma-u[q[a+12>>2]+(q[ka+20>>2]<<2)>>2]);a=P-16|0;q[a+12>>2]=ja+(q[ka+16>>2]<<4);la=P-16|0;u[la+12>>2]=x(ma-u[q[a+12>>2]+(q[ka+16>>2]<<2)>>2])+x(1);u[ka+12>>2]=E(u[la+12>>2]);a=ka+32|0;u[a+(q[ka+24>>2]<<2)>>2]=u[ka+12>>2]*x(.5);u[ka+12>>2]=x(.5)/u[ka+12>>2];la=P-16|0;q[la+12>>2]=ja+(q[ka+16>>2]<<4);ma=u[q[la+12>>2]+(q[ka+20>>2]<<2)>>2];la=P-16|0;q[la+12>>2]=ja+(q[ka+20>>2]<<4);u[ka+44>>2]=x(ma-u[q[la+12>>2]+(q[ka+16>>2]<<2)>>2])*u[ka+12>>2];la=P-16|0;q[la+12>>2]=ja+(q[ka+20>>2]<<4);ma=u[q[la+12>>2]+(q[ka+24>>2]<<2)>>2];la=P-16|0;q[la+12>>2]=ja+(q[ka+24>>2]<<4);u[a+(q[ka+20>>2]<<2)>>2]=x(ma+u[q[la+12>>2]+(q[ka+20>>2]<<2)>>2])*u[ka+12>>2];la=P-16|0;q[la+12>>2]=ja+(q[ka+16>>2]<<4);ma=u[q[la+12>>2]+(q[ka+24>>2]<<2)>>2];la=P-16|0;q[la+12>>2]=ja+(q[ka+24>>2]<<4);u[a+(q[ka+16>>2]<<2)>>2]=x(ma+u[q[la+12>>2]+(q[ka+16>>2]<<2)>>2])*u[ka+12>>2];}a=ka+32|0;Td(q[ka+56>>2],a,a+4|0,a+8|0,a+12|0);P=ka- -64|0;}function ka(a){a=a|0;var ja=0,na=x(0);ja=P-16|0;P=ja;q[ja+12>>2]=a;na=cl(q[ja+12>>2]);P=ja+16|0;return x(na)}function la(a,x,oa,pa){a=a|0;x=x|0;oa=oa|0;pa=pa|0;var qa=0;qa=P-16|0;P=qa;q[qa+12>>2]=a;q[qa+8>>2]=x;q[qa+4>>2]=oa;q[qa>>2]=pa;a=q[qa+12>>2];n[q[q[a>>2]+8>>2]](a,q[qa+8>>2],q[qa+4>>2],q[qa>>2]);P=qa+16|0;}function ma(a,x){a=a|0;x=x|0;var oa=0;oa=P-16|0;P=oa;q[oa+12>>2]=a;q[oa+8>>2]=x;x=q[oa+8>>2];a=P-16|0;q[a+12>>2]=q[oa+12>>2];q[a+8>>2]=x;q[q[a+12>>2]+12>>2]=q[a+8>>2];P=oa+16|0;}function na(a){a=a|0;var x=0;x=P-16|0;P=x;q[x+12>>2]=a;a=P-16|0;q[a+12>>2]=q[x+12>>2];P=x+16|0;return q[q[a+12>>2]+12>>2]}function oa(a){a=a|0;var pa=0;pa=P-16|0;P=pa;q[pa+12>>2]=a;a=Sl(q[pa+12>>2])&1;P=pa+16|0;return a|0}function pa(a,ra,sa){a=a|0;ra=x(ra);sa=sa|0;var ta=0;ta=P-16|0;P=ta;q[ta+12>>2]=a;u[ta+8>>2]=ra;q[ta+4>>2]=sa;a=q[ta+12>>2];n[q[q[a>>2]+32>>2]](a,u[ta+8>>2],q[ta+4>>2]);P=ta+16|0;}function qa(a){a=a|0;var ra=0;ra=P-16|0;P=ra;q[ra+12>>2]=a;a=q[ra+12>>2];a=n[q[q[a>>2]+28>>2]](a)|0;P=ra+16|0;return a|0}function ra(a,sa,ua,va,wa){var xa=0,ya=0,za=0;xa=P-256|0;P=xa;if(!(wa&73728|(ua|0)<=(va|0))){wa=ua-va|0;ya=wa>>>0<256;_(xa,sa,ya?wa:256);sa=a;za=xa;if(!ya){ua=ua-va|0;while(1){ha(a,xa,256);wa=wa+ -256|0;if(wa>>>0>255){continue}break}wa=ua&255;}ha(sa,za,wa);}P=xa+256|0;}function sa(a,sa,ua){var va=0;va=P-32|0;P=va;q[va+28>>2]=sa;q[va+24>>2]=ua;u[va+20>>2]=u[q[va+28>>2]>>2]*u[q[va+24>>2]>>2];u[va+16>>2]=u[q[va+28>>2]+4>>2]*u[q[va+24>>2]>>2];u[va+12>>2]=u[q[va+28>>2]+8>>2]*u[q[va+24>>2]>>2];ca(a,va+20|0,va+16|0,va+12|0);P=va+32|0;}function ta(a,sa){var ua=0;ua=P-16|0;q[ua+12>>2]=a;q[ua+8>>2]=sa;a=q[ua+12>>2];return x(x(x(u[a>>2]*u[q[ua+8>>2]>>2])+x(u[a+4>>2]*u[q[ua+8>>2]+4>>2]))+x(u[a+8>>2]*u[q[ua+8>>2]+8>>2]))}function ua(a,sa,wa){}function va(a,sa,wa){var Aa=0,Ba=0;if(wa>>>0>=8192){K(a|0,sa|0,wa|0)|0;return}Aa=a+wa|0;a:{if(!((a^sa)&3)){b:{if((wa|0)<1){wa=a;break b}if(!(a&3)){wa=a;break b}wa=a;while(1){o[wa|0]=r[sa|0];sa=sa+1|0;wa=wa+1|0;if(wa>>>0>=Aa>>>0){break b}if(wa&3){continue}break}}a=Aa&-4;c:{if(a>>>0<64){break c}Ba=a+ -64|0;if(wa>>>0>Ba>>>0){break c}while(1){q[wa>>2]=q[sa>>2];q[wa+4>>2]=q[sa+4>>2];q[wa+8>>2]=q[sa+8>>2];q[wa+12>>2]=q[sa+12>>2];q[wa+16>>2]=q[sa+16>>2];q[wa+20>>2]=q[sa+20>>2];q[wa+24>>2]=q[sa+24>>2];q[wa+28>>2]=q[sa+28>>2];q[wa+32>>2]=q[sa+32>>2];q[wa+36>>2]=q[sa+36>>2];q[wa+40>>2]=q[sa+40>>2];q[wa+44>>2]=q[sa+44>>2];q[wa+48>>2]=q[sa+48>>2];q[wa+52>>2]=q[sa+52>>2];q[wa+56>>2]=q[sa+56>>2];q[wa+60>>2]=q[sa+60>>2];sa=sa- -64|0;wa=wa- -64|0;if(wa>>>0<=Ba>>>0){continue}break}}if(wa>>>0>=a>>>0){break a}while(1){q[wa>>2]=q[sa>>2];sa=sa+4|0;wa=wa+4|0;if(wa>>>0<a>>>0){continue}break}break a}if(Aa>>>0<4){wa=a;break a}Ba=Aa+ -4|0;if(Ba>>>0<a>>>0){wa=a;break a}wa=a;while(1){o[wa|0]=r[sa|0];o[wa+1|0]=r[sa+1|0];o[wa+2|0]=r[sa+2|0];o[wa+3|0]=r[sa+3|0];sa=sa+4|0;wa=wa+4|0;if(wa>>>0<=Ba>>>0){continue}break}}if(wa>>>0<Aa>>>0){while(1){o[wa|0]=r[sa|0];sa=sa+1|0;wa=wa+1|0;if((Aa|0)!=(wa|0)){continue}break}}}function wa(a,sa,wa){if(!wa){return (a|0)==(sa|0)}return !rv(q[a+4>>2],q[sa+4>>2])}function xa(a){var sa=0,wa=0;a=a?a:1;while(1){a:{sa=ie(a);if(sa){break a}wa=q[6678];if(!wa){break a}n[wa]();continue}break}return sa}function ya(a){var Ca=0;Ca=P-16|0;P=Ca;q[Ca+12>>2]=a;a=q[Ca+12>>2];Nq(a);q[(P-16|0)+12>>2]=a+48;P=Ca+16|0;}function za(a,Da){a=a|0;Da=Da|0;var Ea=0;Ea=P-16|0;q[Ea+12>>2]=a;q[Ea+8>>2]=Da;Da=q[Ea+12>>2];a=q[Ea+8>>2];Ea=q[a+4>>2];q[Da+48>>2]=q[a>>2];q[Da+52>>2]=Ea;Ea=q[a+12>>2];q[Da+56>>2]=q[a+8>>2];q[Da+60>>2]=Ea;}function Aa(a){q[a>>2]=13796;q[a+12>>2]=-1;q[a+4>>2]=35;q[a+8>>2]=0;q[a+48>>2]=1025758986;q[a+24>>2]=1065353216;q[a+28>>2]=0;q[a+16>>2]=1065353216;q[a+20>>2]=1065353216;q[a>>2]=13924;}function Ba(a){var Da=0;Da=P-16|0;P=Da;q[Da+12>>2]=a;a=q[Da+12>>2];Dq(a);u[Da+8>>2]=0;u[Da+4>>2]=0;u[Da>>2]=0;ca(a+48|0,Da+8|0,Da+4|0,Da);P=Da+16|0;}function Ca(a){a=a|0;var Fa=0;Fa=P-16|0;P=Fa;q[Fa+12>>2]=a;a=q[Fa+12>>2];q[(P-16|0)+12>>2]=a;P=Fa+16|0;return a|0}function Da(a){a=a|0;var Ga=0;Ga=P-16|0;P=Ga;q[Ga+12>>2]=a;a=q[Ga+12>>2];if(a){aa(a);}P=Ga+16|0;}function Ea(a){var Ha=0,Ia=0;Ha=a*a;Ia=Ha*a;return x(Ia*(Ha*Ha)*(Ha*2718311493989822e-21+ -.00019839334836096632)+(Ia*(Ha*.008333329385889463+ -.16666666641626524)+a))}function Fa(a){var Ja=0;a=a*a;Ja=a*a;return x(a*-.499999997251031+1+Ja*.04166662332373906+a*Ja*(a*2439044879627741e-20+ -.001388676377460993))}function Ga(a,Ka){var La=0,Ma=0,Na=0,Oa=x(0),Pa=0,Qa=0,Ra=x(0),Sa=0,Ta=0,Ua=0,Va=0,Wa=0,Xa=x(0),Ya=x(0),Za=x(0),_a=0;Ma=P-96|0;P=Ma;La=q[a+12>>2];n[q[q[La>>2]+8>>2]](La,q[a+8>>2]+4|0,Ma+80|0,Ma- -64|0);La=q[Ka+68>>2];n[q[q[La>>2]+16>>2]](La,q[q[a+8>>2]+188>>2],Ma+80|0,Ma- -64|0,q[Ka+24>>2]);La=q[Ka+24>>2];n[q[q[La>>2]+32>>2]](La,q[q[a+8>>2]+344>>2],Ka+28|0,La);Ka=q[a+8>>2];La=q[Ka+56>>2];q[a+132>>2]=q[Ka+52>>2];q[a+136>>2]=La;La=q[Ka+64>>2];q[a+140>>2]=q[Ka+60>>2];q[a+144>>2]=La;Ka=q[Ka+344>>2];if((n[q[q[Ka>>2]+36>>2]](Ka)|0)>=1){Ua=a+200|0;while(1){Ka=q[a+204>>2];if((Ka|0)<=-1){if(q[a+208>>2]<=-1){La=q[a+212>>2];if(La){if(r[a+216|0]){if(La){q[6658]=q[6658]+1;n[q[5256]](La);}}q[a+212>>2]=0;}o[a+216|0]=1;q[a+208>>2]=0;q[a+212>>2]=0;}while(1){q[q[a+212>>2]+(Ka<<2)>>2]=0;La=Ka+1|0;Na=La>>>0>=Ka>>>0;Ka=La;if(Na){continue}break}}q[a+204>>2]=0;Ka=q[q[a+8>>2]+344>>2];La=q[(n[q[q[Ka>>2]+28>>2]](Ka)|0)+12>>2]+(Pa<<4)|0;Ka=q[q[La+4>>2]>>2];Na=q[q[La>>2]>>2];a:{if((r[Na+204|0]&4?Na:0)|(r[Ka+204|0]&4?Ka:0)){break a}if(!n[q[q[a>>2]+56>>2]](a,Na,Ka)){break a}Ka=q[La+8>>2];if(Ka){n[q[q[Ka>>2]+16>>2]](Ka,Ua);}Sa=q[a+204>>2];if((Sa|0)<1){break a}Va=q[a+8>>2];Wa=q[a+212>>2];La=0;while(1){Qa=q[(La<<2)+Wa>>2];Ta=q[Qa+844>>2];if((Ta|0)>=1){Ra=q[Qa+836>>2]==(Va|0)?x(-1):x(1);Xa=x(-u[a+16>>2]);Ka=0;while(1){Na=w(Ka,208)+Qa|0;Oa=u[Na+84>>2];if(!!(Oa<Xa)){Ya=u[Na+76>>2];Za=u[Na+72>>2];u[a+132>>2]=x(x(Oa*x(Ra*u[Na+68>>2]))*x(.20000000298023224))+u[a+132>>2];u[a+136>>2]=x(x(Oa*x(Ra*Za))*x(.20000000298023224))+u[a+136>>2];u[a+140>>2]=x(x(Oa*x(Ra*Ya))*x(.20000000298023224))+u[a+140>>2];_a=1;}Ka=Ka+1|0;if((Ka|0)<(Ta|0)){continue}break}}La=La+1|0;if((La|0)<(Sa|0)){continue}break}}Pa=Pa+1|0;Ka=q[q[a+8>>2]+344>>2];if((Pa|0)<(n[q[q[Ka>>2]+36>>2]](Ka)|0)){continue}break}}Ka=q[a+8>>2];La=q[Ka+16>>2];q[Ma+8>>2]=q[Ka+12>>2];q[Ma+12>>2]=La;La=q[Ka+8>>2];q[Ma>>2]=q[Ka+4>>2];q[Ma+4>>2]=La;La=q[Ka+32>>2];q[Ma+24>>2]=q[Ka+28>>2];q[Ma+28>>2]=La;La=q[Ka+24>>2];q[Ma+16>>2]=q[Ka+20>>2];q[Ma+20>>2]=La;La=q[Ka+48>>2];q[Ma+40>>2]=q[Ka+44>>2];q[Ma+44>>2]=La;La=q[Ka+40>>2];q[Ma+32>>2]=q[Ka+36>>2];q[Ma+36>>2]=La;La=q[a+144>>2];q[Ma+56>>2]=q[a+140>>2];q[Ma+60>>2]=La;La=q[a+136>>2];q[Ma+48>>2]=q[a+132>>2];q[Ma+52>>2]=La;q[Ka+304>>2]=q[Ka+304>>2]+1;a=q[Ma+12>>2];q[Ka+12>>2]=q[Ma+8>>2];q[Ka+16>>2]=a;a=q[Ma+4>>2];q[Ka+4>>2]=q[Ma>>2];q[Ka+8>>2]=a;a=q[Ma+28>>2];q[Ka+28>>2]=q[Ma+24>>2];q[Ka+32>>2]=a;a=q[Ma+20>>2];q[Ka+20>>2]=q[Ma+16>>2];q[Ka+24>>2]=a;a=q[Ma+36>>2];q[Ka+36>>2]=q[Ma+32>>2];q[Ka+40>>2]=a;a=q[Ma+44>>2];q[Ka+44>>2]=q[Ma+40>>2];q[Ka+48>>2]=a;a=q[Ma+52>>2];q[Ka+52>>2]=q[Ma+48>>2];q[Ka+56>>2]=a;a=q[Ma+60>>2];q[Ka+60>>2]=q[Ma+56>>2];q[Ka+64>>2]=a;P=Ma+96|0;return _a}function Ha(a){F();}function Ia(a){a=a|0;var Ka=0,$a=x(0);Ka=P-16|0;P=Ka;q[Ka+12>>2]=a;a=q[Ka+12>>2];$a=x(n[q[q[a>>2]+48>>2]](a));P=Ka+16|0;return x($a)}function Ja(a,ab){a=a|0;ab=x(ab);var bb=0;bb=P-16|0;P=bb;q[bb+12>>2]=a;u[bb+8>>2]=ab;a=q[bb+12>>2];n[q[q[a>>2]+44>>2]](a,u[bb+8>>2]);P=bb+16|0;}function Ka(a,ab,cb){var db=0;db=P-32|0;P=db;q[db+28>>2]=ab;q[db+24>>2]=cb;u[db+20>>2]=u[q[db+28>>2]>>2]-u[q[db+24>>2]>>2];u[db+16>>2]=u[q[db+28>>2]+4>>2]-u[q[db+24>>2]+4>>2];u[db+12>>2]=u[q[db+28>>2]+8>>2]-u[q[db+24>>2]+8>>2];ca(a,db+20|0,db+16|0,db+12|0);P=db+32|0;}function La(a,ab,cb,eb,fb,gb){var hb=0,ib=0,jb=x(0),lb=x(0),mb=x(0),nb=x(0),ob=x(0),pb=x(0),qb=x(0),rb=x(0),sb=x(0),tb=x(0),ub=x(0);hb=P-400|0;P=hb;n[q[5253]](8549);ib=q[cb+12>>2];q[hb+336>>2]=q[cb+8>>2];q[hb+340>>2]=ib;ib=q[cb+4>>2];q[hb+328>>2]=q[cb>>2];q[hb+332>>2]=ib;ib=q[cb+28>>2];q[hb+352>>2]=q[cb+24>>2];q[hb+356>>2]=ib;ib=q[cb+20>>2];q[hb+344>>2]=q[cb+16>>2];q[hb+348>>2]=ib;ib=q[cb+44>>2];q[hb+368>>2]=q[cb+40>>2];q[hb+372>>2]=ib;ib=q[cb+36>>2];q[hb+360>>2]=q[cb+32>>2];q[hb+364>>2]=ib;ib=q[cb+60>>2];q[hb+384>>2]=q[cb+56>>2];q[hb+388>>2]=ib;ib=q[cb+52>>2];q[hb+376>>2]=q[cb+48>>2];q[hb+380>>2]=ib;ib=q[eb+12>>2];q[hb+272>>2]=q[eb+8>>2];q[hb+276>>2]=ib;ib=q[eb+4>>2];q[hb+264>>2]=q[eb>>2];q[hb+268>>2]=ib;ib=q[eb+28>>2];q[hb+288>>2]=q[eb+24>>2];q[hb+292>>2]=ib;ib=q[eb+20>>2];q[hb+280>>2]=q[eb+16>>2];q[hb+284>>2]=ib;ib=q[eb+44>>2];q[hb+304>>2]=q[eb+40>>2];q[hb+308>>2]=ib;ib=q[eb+36>>2];q[hb+296>>2]=q[eb+32>>2];q[hb+300>>2]=ib;ib=q[eb+60>>2];q[hb+320>>2]=q[eb+56>>2];q[hb+324>>2]=ib;ib=q[eb+52>>2];q[hb+312>>2]=q[eb+48>>2];q[hb+316>>2]=ib;kb(hb+328|0,hb+264|0,hb,hb+248|0);q[hb+228>>2]=0;jb=u[hb+248>>2];u[hb+224>>2]=jb*u[hb+8>>2];u[hb+220>>2]=jb*u[hb+4>>2];u[hb+216>>2]=jb*u[hb>>2];q[hb+208>>2]=0;q[hb+212>>2]=0;q[hb+200>>2]=0;q[hb+204>>2]=0;q[hb+52>>2]=0;q[hb+56>>2]=0;q[hb+60>>2]=0;q[hb+4>>2]=0;q[hb+8>>2]=0;q[hb>>2]=1065353216;q[hb+12>>2]=0;q[hb+16>>2]=0;q[hb+24>>2]=0;q[hb+28>>2]=0;q[hb+20>>2]=1065353216;q[hb+32>>2]=0;q[hb+36>>2]=0;q[hb+44>>2]=0;q[hb+48>>2]=0;q[hb+40>>2]=1065353216;ja(hb+328|0,hb+248|0);q[hb+28>>2]=0;jb=u[hb+248>>2];lb=u[hb+252>>2];pb=u[hb+256>>2];mb=u[hb+260>>2];ob=x(x(2)/x(x(x(x(jb*jb)+x(lb*lb))+x(pb*pb))+x(mb*mb)));qb=x(pb*ob);nb=x(lb*qb);rb=x(jb*ob);sb=x(mb*rb);u[hb+36>>2]=nb+sb;q[hb+44>>2]=0;q[hb+12>>2]=0;tb=x(jb*qb);ob=x(lb*ob);ub=x(mb*ob);u[hb+32>>2]=tb-ub;u[hb+24>>2]=nb-sb;nb=x(jb*ob);mb=x(mb*qb);u[hb+16>>2]=nb+mb;u[hb+8>>2]=tb+ub;u[hb+4>>2]=nb-mb;jb=x(jb*rb);lb=x(lb*ob);u[hb+40>>2]=x(1)-x(jb+lb);nb=jb;jb=x(pb*qb);u[hb+20>>2]=x(1)-x(nb+jb);u[hb>>2]=x(1)-x(lb+jb);ai(ab,hb,hb+200|0,hb+216|0,hb+248|0,hb+232|0);q[hb>>2]=10192;ib=q[cb+12>>2];q[hb+44>>2]=q[cb+8>>2];q[hb+48>>2]=ib;ib=q[cb+4>>2];q[hb+36>>2]=q[cb>>2];q[hb+40>>2]=ib;ib=q[cb+28>>2];q[hb+60>>2]=q[cb+24>>2];q[hb+64>>2]=ib;ib=q[cb+20>>2];q[hb+52>>2]=q[cb+16>>2];q[hb+56>>2]=ib;ib=q[cb+44>>2];q[hb+76>>2]=q[cb+40>>2];q[hb+80>>2]=ib;ib=q[cb+36>>2];q[hb+68>>2]=q[cb+32>>2];q[hb+72>>2]=ib;ib=q[cb+60>>2];q[hb+92>>2]=q[cb+56>>2];q[hb+96>>2]=ib;ib=q[cb+52>>2];q[hb+84>>2]=q[cb+48>>2];q[hb+88>>2]=ib;cb=q[eb+12>>2];q[hb+108>>2]=q[eb+8>>2];q[hb+112>>2]=cb;cb=q[eb+4>>2];q[hb+100>>2]=q[eb>>2];q[hb+104>>2]=cb;cb=q[eb+20>>2];q[hb+116>>2]=q[eb+16>>2];q[hb+120>>2]=cb;cb=q[eb+28>>2];q[hb+124>>2]=q[eb+24>>2];q[hb+128>>2]=cb;cb=q[eb+44>>2];q[hb+140>>2]=q[eb+40>>2];q[hb+144>>2]=cb;cb=q[eb+36>>2];q[hb+132>>2]=q[eb+32>>2];q[hb+136>>2]=cb;cb=q[eb+52>>2];q[hb+148>>2]=q[eb+48>>2];q[hb+152>>2]=cb;cb=q[eb+60>>2];q[hb+156>>2]=q[eb+56>>2];q[hb+160>>2]=cb;q[hb+184>>2]=fb;u[hb+188>>2]=gb;q[hb+192>>2]=ab;q[hb+180>>2]=a;gb=x(u[hb+148>>2]-u[hb+84>>2]);jb=x(u[hb+152>>2]-u[hb+88>>2]);lb=x(u[hb+156>>2]-u[hb+92>>2]);mb=x(x(1)/x(E(x(x(x(gb*gb)+x(jb*jb))+x(lb*lb)))));pb=x(lb*mb);qb=pb==x(0)?x(0xde0b6b000000000):x(x(1)/pb);u[hb+12>>2]=qb;ob=x(jb*mb);nb=ob==x(0)?x(0xde0b6b000000000):x(x(1)/ob);u[hb+8>>2]=nb;q[hb+28>>2]=qb<x(0);q[hb+24>>2]=nb<x(0);nb=gb;gb=x(gb*mb);u[hb+32>>2]=x(lb*pb)+x(x(nb*gb)+x(jb*ob));gb=gb==x(0)?x(0xde0b6b000000000):x(x(1)/gb);u[hb+4>>2]=gb;q[hb+20>>2]=gb<x(0);a=q[a+68>>2];n[q[q[a>>2]+24>>2]](a,hb+376|0,hb+312|0,hb,hb+248|0,hb+232|0);n[q[5254]]();P=hb+400|0;}function Ma(a,ab,cb,eb,fb){a=a|0;ab=ab|0;cb=cb|0;eb=eb|0;Dj(a,ab,cb,eb);}function Na(a,ab,cb){var eb=0,fb=x(0),gb=x(0),kb=x(0),vb=x(0),wb=0,xb=0,yb=0,zb=0,Ab=0,Bb=x(0),Cb=x(0);eb=P-48|0;P=eb;fb=u[ab+8>>2];gb=u[ab>>2];kb=u[ab+4>>2];q[cb+12>>2]=0;vb=fb;fb=x(x(1)/x(E(x(x(x(gb*gb)+x(kb*kb))+x(fb*fb)))));u[cb+8>>2]=vb*fb;u[cb+4>>2]=kb*fb;u[cb>>2]=gb*fb;ab=q[a+120>>2];yb=eb+32|0;wb=q[a+124>>2];xb=q[a>>2]+(wb>>1)|0;zb=xb;Ab=cb;if(wb&1){ab=q[ab+q[xb>>2]>>2];}n[ab](yb,zb,Ab);fb=u[cb>>2];gb=u[cb+4>>2];kb=u[cb+8>>2];q[eb+12>>2]=0;u[eb+8>>2]=-kb;u[eb+4>>2]=-gb;u[eb>>2]=-fb;Hj(eb+16|0,a,eb);fb=u[eb+16>>2];gb=u[eb+32>>2];kb=u[eb+20>>2];vb=u[eb+36>>2];Bb=u[eb+24>>2];Cb=u[eb+40>>2];q[cb+28>>2]=0;u[cb+24>>2]=Cb-Bb;u[cb+20>>2]=vb-kb;u[cb+16>>2]=gb-fb;P=eb+48|0;}function Oa(a,ab,cb,Db){q[a+44>>2]=0;q[a+36>>2]=0;q[a+40>>2]=1028443341;q[a+32>>2]=Db;q[a+28>>2]=cb;q[a+24>>2]=-1;p[a+20>>1]=1;q[a+16>>2]=2139095039;q[a+8>>2]=-1;q[a+12>>2]=-1;q[a>>2]=3532;q[a+4>>2]=ab;}function Pa(a,ab){}function Qa(a,ab,cb,Db,Eb){var Fb=0,Gb=x(0),Hb=x(0);Fb=P-32|0;P=Fb;q[Fb+28>>2]=a;q[Fb+24>>2]=ab;q[Fb+20>>2]=cb;q[Fb+16>>2]=Db;q[Fb+12>>2]=Eb;ab=P-16|0;a=q[Fb+28>>2];q[ab+12>>2]=a+(q[Fb+24>>2]<<4);Gb=u[q[ab+12>>2]+(q[Fb+20>>2]<<2)>>2];ab=P-16|0;q[ab+12>>2]=a+(q[Fb+16>>2]<<4);Gb=x(Gb*u[q[ab+12>>2]+(q[Fb+12>>2]<<2)>>2]);ab=P-16|0;q[ab+12>>2]=a+(q[Fb+24>>2]<<4);Hb=u[q[ab+12>>2]+(q[Fb+12>>2]<<2)>>2];ab=P-16|0;q[ab+12>>2]=a+(q[Fb+16>>2]<<4);P=Fb+32|0;return x(Gb-x(Hb*u[q[ab+12>>2]+(q[Fb+20>>2]<<2)>>2]))}function Ra(){var a=0;a=P-48|0;P=a;if(!(!!(r[21488]!=0)|o[21488]&1)){u[a+44>>2]=1;u[a+40>>2]=0;u[a+36>>2]=0;ca(21440,a+44|0,a+40|0,a+36|0);u[a+24>>2]=0;u[a+20>>2]=1;u[a+16>>2]=0;ca(21456,a+24|0,a+20|0,a+16|0);u[a+12>>2]=0;u[a+8>>2]=0;u[a+4>>2]=1;ca(21472,a+12|0,a+8|0,a+4|0);q[5372]=0;q[5372]=q[5372]|1;}P=a+48|0;return 21440}function Sa(ab){var cb=x(0),Db=0,Eb=0,Ib=x(0);Eb=(j(ab),e(0));Db=Eb&2147483647;if(Db>>>0>=1065353216){if((Db|0)==1065353216){return (Eb|0)<0?x(3.141592502593994):x(0)}return x(x(0)/x(ab-ab))}a:{if(Db>>>0<=1056964607){cb=x(1.570796251296997);if(Db>>>0<847249409){break a}cb=x(ab*ab);return x(x(x(x(7.549789415861596e-8)-x(x(x(cb*x(x(cb*x(x(cb*x(-.008656363002955914))+x(-.04274342209100723)))+x(.16666586697101593)))/x(x(cb*x(-.7066296339035034))+x(1)))*ab))-ab)+x(1.570796251296997))}if((Eb|0)<=-1){ab=x(x(ab+x(1))*x(.5));cb=x(E(ab));ab=x(x(1.570796251296997)-x(cb+x(x(cb*x(x(ab*x(x(ab*x(x(ab*x(-.008656363002955914))+x(-.04274342209100723)))+x(.16666586697101593)))/x(x(ab*x(-.7066296339035034))+x(1))))+x(-7.549789415861596e-8))));return x(ab+ab)}ab=x(x(x(1)-ab)*x(.5));Ib=x(E(ab));cb=(f(0,(j(Ib),e(0))&-4096),k());ab=x(x(x(x(x(ab*x(x(ab*x(x(ab*x(-.008656363002955914))+x(-.04274342209100723)))+x(.16666586697101593)))/x(x(ab*x(-.7066296339035034))+x(1)))*Ib)+x(x(ab-x(cb*cb))/x(Ib+cb)))+cb);cb=x(ab+ab);}return cb}function Ta(ab,Jb,Kb,Lb,Mb,Nb){var Ob=0,Pb=0,Qb=0,Rb=x(0),Sb=x(0),Tb=x(0),Ub=x(0),Vb=x(0),Wb=x(0),Xb=x(0),Yb=x(0),Zb=x(0),_b=0,$b=0;Ob=P-272|0;P=Ob;Pb=Kb;Qb=q[Pb+12>>2];q[Ob+216>>2]=q[Pb+8>>2];q[Ob+220>>2]=Qb;Qb=q[Pb+4>>2];q[Ob+208>>2]=q[Pb>>2];q[Ob+212>>2]=Qb;Qb=q[Pb+28>>2];q[Ob+232>>2]=q[Pb+24>>2];q[Ob+236>>2]=Qb;Qb=q[Pb+20>>2];q[Ob+224>>2]=q[Pb+16>>2];q[Ob+228>>2]=Qb;Qb=q[Pb+44>>2];q[Ob+248>>2]=q[Pb+40>>2];q[Ob+252>>2]=Qb;Qb=q[Pb+36>>2];q[Ob+240>>2]=q[Pb+32>>2];q[Ob+244>>2]=Qb;Qb=q[Pb+60>>2];q[Ob+264>>2]=q[Pb+56>>2];q[Ob+268>>2]=Qb;Qb=q[Pb+52>>2];q[Ob+256>>2]=q[Pb+48>>2];q[Ob+260>>2]=Qb;Pb=Lb;Qb=q[Pb+12>>2];q[Ob+152>>2]=q[Pb+8>>2];q[Ob+156>>2]=Qb;Qb=q[Pb+4>>2];q[Ob+144>>2]=q[Pb>>2];q[Ob+148>>2]=Qb;Qb=q[Pb+28>>2];q[Ob+168>>2]=q[Pb+24>>2];q[Ob+172>>2]=Qb;Qb=q[Pb+20>>2];q[Ob+160>>2]=q[Pb+16>>2];q[Ob+164>>2]=Qb;Qb=q[Pb+44>>2];q[Ob+184>>2]=q[Pb+40>>2];q[Ob+188>>2]=Qb;Qb=q[Pb+36>>2];q[Ob+176>>2]=q[Pb+32>>2];q[Ob+180>>2]=Qb;Qb=q[Pb+60>>2];q[Ob+200>>2]=q[Pb+56>>2];q[Ob+204>>2]=Qb;Qb=q[Pb+52>>2];q[Ob+192>>2]=q[Pb+48>>2];q[Ob+196>>2]=Qb;q[Ob+108>>2]=0;u[Ob+104>>2]=u[Ob+200>>2]-u[Ob+264>>2];u[Ob+100>>2]=u[Ob+196>>2]-u[Ob+260>>2];u[Ob+96>>2]=u[Ob+192>>2]-u[Ob+256>>2];kb(Ob+208|0,Ob+144|0,Ob+16|0,Ob+128|0);q[Ob+92>>2]=0;Rb=u[Ob+128>>2];u[Ob+88>>2]=Rb*u[Ob+24>>2];u[Ob+84>>2]=Rb*u[Ob+20>>2];u[Ob+80>>2]=Rb*u[Ob+16>>2];q[Ob+72>>2]=0;q[Ob+76>>2]=0;Pb=Ob- -64|0;q[Pb>>2]=0;q[Pb+4>>2]=0;ja(Ob+208|0,Ob+128|0);q[Ob+60>>2]=0;q[Ob+44>>2]=0;Rb=u[Ob+128>>2];Sb=u[Ob+132>>2];Ub=u[Ob+136>>2];Xb=u[Ob+140>>2];Wb=x(x(2)/x(x(x(x(Rb*Rb)+x(Sb*Sb))+x(Ub*Ub))+x(Xb*Xb)));Yb=x(Ub*Wb);Tb=x(Sb*Yb);Vb=x(Rb*Wb);Zb=x(Xb*Vb);u[Ob+52>>2]=Tb+Zb;u[Ob+40>>2]=Tb-Zb;Tb=x(Rb*Vb);Vb=Sb;Sb=x(Sb*Wb);Wb=x(Vb*Sb);u[Ob+56>>2]=x(1)-x(Tb+Wb);Ub=x(Ub*Yb);u[Ob+36>>2]=x(1)-x(Tb+Ub);q[Ob+28>>2]=0;Tb=x(Rb*Yb);Vb=x(Xb*Sb);u[Ob+48>>2]=Tb-Vb;Rb=x(Rb*Sb);Sb=x(Xb*Yb);u[Ob+32>>2]=Rb+Sb;u[Ob+24>>2]=Tb+Vb;u[Ob+20>>2]=Rb-Sb;u[Ob+16>>2]=x(1)-x(Wb+Ub);ai(Jb,Ob+16|0,Ob+96|0,Ob+80|0,Ob+128|0,Ob+112|0);if(q[ab+328>>2]>=1){Pb=Lb+48|0;Qb=Kb+48|0;Lb=0;while(1){Kb=q[q[ab+336>>2]+(Lb<<2)>>2];a:{if(!n[q[q[Mb>>2]+8>>2]](Mb,q[Kb+188>>2])){break a}_b=q[Kb+192>>2];$b=Kb+4|0;n[q[q[_b>>2]+8>>2]](_b,$b,Ob+16|0,Ob+96|0);q[Ob+28>>2]=0;q[Ob+108>>2]=0;u[Ob+24>>2]=u[Ob+24>>2]+u[Ob+136>>2];u[Ob+20>>2]=u[Ob+20>>2]+u[Ob+132>>2];u[Ob+16>>2]=u[Ob+16>>2]+u[Ob+128>>2];u[Ob+96>>2]=u[Ob+96>>2]+u[Ob+112>>2];u[Ob+100>>2]=u[Ob+100>>2]+u[Ob+116>>2];u[Ob+104>>2]=u[Ob+104>>2]+u[Ob+120>>2];q[Ob+12>>2]=1065353216;if(!bk(Qb,Pb,Ob+16|0,Ob+96|0,Ob+12|0,Ob+80|0)){break a}UA(Jb,Ob+208|0,Ob+144|0,Kb,q[Kb+192>>2],$b,Mb,Nb);}Lb=Lb+1|0;if((Lb|0)<q[ab+328>>2]){continue}break}}P=Ob+272|0;}function Ua(ab,Jb){var Kb=x(0),Lb=x(0),Mb=x(0),Nb=x(0),ac=x(0),bc=x(0),cc=x(0),dc=x(0),ec=x(0),fc=x(0),gc=x(0),hc=x(0),ic=x(0),jc=x(0),kc=x(0),lc=x(0),mc=x(0);if(!(!ab|!(q[ab+180>>2]&1))){kc=u[ab+172>>2];Kb=u[ab+44>>2];dc=u[ab+12>>2];ec=u[ab+28>>2];Mb=u[ab+36>>2];fc=u[ab+20>>2];lc=u[ab+168>>2];Lb=u[ab+40>>2];gc=u[ab+8>>2];hc=u[ab+24>>2];Nb=u[ab+164>>2];ic=u[ab+4>>2];q[Jb+12>>2]=0;jc=Mb;ac=Nb;Nb=u[Jb>>2];bc=u[Jb+4>>2];Mb=u[Jb+8>>2];cc=x(ac*x(x(x(ic*Nb)+x(fc*bc))+x(jc*Mb)));mc=Lb;Lb=x(lc*x(x(x(Nb*gc)+x(bc*hc))+x(Mb*Lb)));ac=Kb;Kb=x(kc*x(x(x(Nb*dc)+x(bc*ec))+x(Mb*Kb)));u[Jb+8>>2]=x(x(jc*cc)+x(mc*Lb))+x(ac*Kb);u[Jb+4>>2]=x(x(fc*cc)+x(hc*Lb))+x(ec*Kb);u[Jb>>2]=x(x(ic*cc)+x(gc*Lb))+x(dc*Kb);}}function Va(ab,Jb,nc){ab=ab|0;Jb=Jb|0;nc=nc|0;var oc=0,pc=0;q[Jb>>2]=n[q[q[nc>>2]+28>>2]](nc,q[ab+28>>2]);q[Jb+4>>2]=n[q[q[nc>>2]+28>>2]](nc,q[ab+32>>2]);oc=n[q[q[nc>>2]+40>>2]](nc,ab)|0;pc=n[q[q[nc>>2]+28>>2]](nc,oc)|0;q[Jb+8>>2]=pc;if(pc){n[q[q[nc>>2]+48>>2]](nc,oc);}q[Jb+12>>2]=q[ab+4>>2];q[Jb+24>>2]=r[ab+21|0];q[Jb+40>>2]=q[ab+24>>2];q[Jb+44>>2]=q[ab+16>>2];q[Jb+48>>2]=r[ab+20|0];q[Jb+20>>2]=q[ab+12>>2];q[Jb+16>>2]=q[ab+8>>2];q[Jb+28>>2]=q[ab+36>>2];oc=q[ab+40>>2];nc=0;q[Jb+36>>2]=0;q[Jb+32>>2]=oc;oc=q[ab+28>>2];pc=q[oc+548>>2];if((pc|0)>=1){oc=q[oc+556>>2];while(1){if(q[oc+(nc<<2)>>2]==(ab|0)){q[Jb+36>>2]=1;}nc=nc+1|0;if((nc|0)<(pc|0)){continue}break}}nc=q[ab+32>>2];oc=q[nc+548>>2];if((oc|0)>=1){pc=q[nc+556>>2];nc=0;while(1){if(q[pc+(nc<<2)>>2]==(ab|0)){q[Jb+36>>2]=1;}nc=nc+1|0;if((nc|0)<(oc|0)){continue}break}}return 3576}function Wa(ab){ab=ab|0;q[ab>>2]=3532;if(ab){q[6658]=q[6658]+1;n[q[5256]](ab);}}function Xa(ab,Jb,nc,qc,rc){var sc=x(0),tc=x(0),uc=x(0),vc=x(0),wc=x(0),xc=x(0),yc=x(0),zc=x(0),Ac=0,Bc=x(0),Cc=x(0);Ac=P-16|0;P=Ac;sc=u[ab+52>>2];tc=u[ab+56>>2];vc=u[ab+48>>2];uc=u[Jb>>2];wc=u[Jb+4>>2];xc=u[Jb+8>>2];q[rc+60>>2]=0;u[rc+56>>2]=tc+x(xc*qc);u[rc+52>>2]=sc+x(wc*qc);u[rc+48>>2]=vc+x(uc*qc);vc=u[nc>>2];yc=u[nc+4>>2];zc=u[nc+8>>2];sc=x(x(x(vc*vc)+x(yc*yc))+x(zc*zc));sc=sc>x(1.1920928955078125e-7)?x(E(sc)):x(0);tc=x(sc*qc)>x(.7853981852531433)?x(x(.7853981852531433)/qc):sc;a:{if(!!(tc<x(.0010000000474974513))){sc=x(x(qc*x(.5))+x(tc*x(x(x(x(qc*qc)*qc)*x(-.02083333395421505))*tc)));break a}sc=x(ga(x(x(tc*x(.5))*qc))/tc);}ja(ab,Ac);uc=u[Ac+12>>2];tc=fa(x(x(tc*qc)*x(.5)));wc=x(vc*sc);xc=u[Ac>>2];yc=x(yc*sc);Bc=u[Ac+4>>2];zc=x(zc*sc);Cc=u[Ac+8>>2];sc=x(x(x(x(uc*tc)-x(wc*xc))-x(yc*Bc))-x(zc*Cc));vc=x(x(x(x(zc*uc)+x(tc*Cc))+x(wc*Bc))-x(yc*xc));qc=x(x(x(x(tc*xc)+x(wc*uc))+x(yc*Cc))-x(zc*Bc));tc=x(x(x(zc*xc)+x(x(yc*uc)+x(tc*Bc)))-x(wc*Cc));uc=x(x(sc*sc)+x(x(vc*vc)+x(x(qc*qc)+x(tc*tc))));if(!!(uc>x(1.1920928955078125e-7))){uc=x(x(1)/x(E(uc)));sc=x(sc*uc);vc=x(vc*uc);tc=x(tc*uc);qc=x(qc*uc);uc=x(x(sc*sc)+x(x(vc*vc)+x(x(tc*tc)+x(qc*qc))));}b:{if(!!(uc>x(1.1920928955078125e-7))){q[rc+12>>2]=0;q[rc+44>>2]=0;q[rc+28>>2]=0;wc=x(x(2)/uc);uc=x(vc*wc);xc=x(tc*uc);yc=x(qc*wc);Bc=x(sc*yc);u[rc+36>>2]=xc+Bc;zc=x(qc*uc);wc=x(tc*wc);Cc=x(sc*wc);u[rc+32>>2]=zc-Cc;u[rc+24>>2]=xc-Bc;xc=x(qc*wc);sc=x(sc*uc);u[rc+16>>2]=xc+sc;u[rc+8>>2]=zc+Cc;u[rc+4>>2]=xc-sc;qc=x(qc*yc);sc=x(tc*wc);u[rc+40>>2]=x(1)-x(qc+sc);tc=qc;qc=x(vc*uc);u[rc+20>>2]=x(1)-x(tc+qc);u[rc>>2]=x(1)-x(sc+qc);break b}Jb=q[ab+4>>2];q[rc>>2]=q[ab>>2];q[rc+4>>2]=Jb;Jb=q[ab+12>>2];q[rc+8>>2]=q[ab+8>>2];q[rc+12>>2]=Jb;Jb=q[ab+20>>2];q[rc+16>>2]=q[ab+16>>2];q[rc+20>>2]=Jb;Jb=q[ab+28>>2];q[rc+24>>2]=q[ab+24>>2];q[rc+28>>2]=Jb;Jb=q[ab+36>>2];q[rc+32>>2]=q[ab+32>>2];q[rc+36>>2]=Jb;Jb=q[ab+44>>2];q[rc+40>>2]=q[ab+40>>2];q[rc+44>>2]=Jb;}P=Ac+16|0;}function Ya(ab,Jb,nc){var qc=0;qc=P-32|0;P=qc;q[qc+28>>2]=Jb;q[qc+24>>2]=nc;Jb=P-16|0;q[Jb+12>>2]=q[qc+28>>2];q[Jb+8>>2]=0;u[qc+20>>2]=ta(q[Jb+12>>2]+(q[Jb+8>>2]<<4)|0,q[qc+24>>2]);Jb=P-16|0;q[Jb+12>>2]=q[qc+28>>2];q[Jb+8>>2]=1;u[qc+16>>2]=ta(q[Jb+12>>2]+(q[Jb+8>>2]<<4)|0,q[qc+24>>2]);Jb=P-16|0;q[Jb+12>>2]=q[qc+28>>2];q[Jb+8>>2]=2;u[qc+12>>2]=ta(q[Jb+12>>2]+(q[Jb+8>>2]<<4)|0,q[qc+24>>2]);ca(ab,qc+20|0,qc+16|0,qc+12|0);P=qc+32|0;}function Za(ab,Jb){var nc=0;nc=P-16|0;q[nc+12>>2]=ab;q[nc+8>>2]=Jb;ab=q[nc+12>>2];u[ab>>2]=u[ab>>2]+u[q[nc+8>>2]>>2];u[ab+4>>2]=u[ab+4>>2]+u[q[nc+8>>2]+4>>2];u[ab+8>>2]=u[ab+8>>2]+u[q[nc+8>>2]+8>>2];}function _a(ab){var Jb=0;Jb=P-16|0;P=Jb;q[Jb+12>>2]=ab;ah(q[Jb+12>>2]);P=Jb+16|0;}function $a(ab,rc,Dc,Ec){ab=ab|0;rc=rc|0;Dc=x(Dc);Ec=Ec|0;var Fc=0;Fc=P-16|0;P=Fc;q[Fc+12>>2]=ab;q[Fc+8>>2]=rc;u[Fc+4>>2]=Dc;q[Fc>>2]=Ec;ab=q[Fc+12>>2];n[q[q[ab>>2]+28>>2]](ab,q[Fc+8>>2],u[Fc+4>>2],q[Fc>>2]);P=Fc+16|0;}function ab(ab,rc,Dc){ab=ab|0;rc=rc|0;Dc=Dc|0;var Ec=0,Gc=x(0);Ec=P-16|0;P=Ec;q[Ec+12>>2]=ab;q[Ec+8>>2]=rc;q[Ec+4>>2]=Dc;ab=q[Ec+12>>2];Gc=x(n[q[q[ab>>2]+32>>2]](ab,q[Ec+8>>2],q[Ec+4>>2]));P=Ec+16|0;return x(Gc)}function bb(ab,rc){ab=ab|0;rc=x(rc);var Dc=0;Dc=P-16|0;P=Dc;q[Dc+12>>2]=ab;u[Dc+8>>2]=rc;rc=u[Dc+8>>2];ab=P-16|0;q[ab+12>>2]=q[Dc+12>>2];u[ab+8>>2]=rc;u[q[ab+12>>2]+16>>2]=u[ab+8>>2];P=Dc+16|0;}function cb(ab){ab=ab|0;var rc=0;rc=P-16|0;P=rc;q[rc+12>>2]=ab;ab=P-16|0;q[ab+12>>2]=q[rc+12>>2];P=rc+16|0;return x(u[q[ab+12>>2]+16>>2])}function db(ab,Hc){ab=ab|0;Hc=Hc|0;var Ic=0;Ic=P-16|0;P=Ic;q[Ic+12>>2]=ab;o[Ic+11|0]=Hc;Hc=o[Ic+11|0]&1;ab=P-16|0;q[ab+12>>2]=q[Ic+12>>2];o[ab+11|0]=Hc;o[q[ab+12>>2]+21|0]=o[ab+11|0]&1;P=Ic+16|0;}function eb(ab,Hc,Jc){ab=ab|0;Hc=Hc|0;Jc=Jc|0;var Kc=0,Lc=x(0),Mc=x(0),Nc=0,Oc=x(0),Pc=x(0),Qc=x(0),Rc=0,Sc=x(0),Tc=0,Uc=x(0),Vc=0,Wc=x(0),Xc=0;Kc=P-48|0;P=Kc;a:{b:{Nc=q[Hc+4>>2];if(Nc>>>0>13){break b}c:{switch(Nc-1|0){case 7:q[ab>>2]=0;q[ab+4>>2]=0;q[ab+8>>2]=0;q[ab+12>>2]=0;break a;default:Sc=u[Hc+36>>2];Pc=u[Hc+40>>2];Oc=u[Jc+4>>2];Mc=u[Jc+8>>2];Qc=u[Hc+32>>2];Lc=u[Jc>>2];q[ab+12>>2]=0;u[ab>>2]=Lc>=x(0)?Qc:x(-Qc);u[ab+8>>2]=Mc>=x(0)?Pc:x(-Pc);u[ab+4>>2]=Oc>=x(0)?Sc:x(-Sc);break a;case 0:Pc=u[Jc>>2];Qc=u[Jc+4>>2];Lc=u[Jc+8>>2];Oc=x(x(x(Pc*u[Hc+76>>2])+x(Qc*u[Hc+80>>2]))+x(Lc*u[Hc+84>>2]));Mc=x(x(x(Pc*u[Hc+92>>2])+x(Qc*u[Hc+96>>2]))+x(Lc*u[Hc+100>>2]));Lc=x(x(x(Pc*u[Hc+60>>2])+x(Qc*u[Hc- -64>>2]))+x(Lc*u[Hc+68>>2]));Hc=(Hc+60|0)+((Lc<Oc?Oc<Mc?2:1:(Lc<Mc)<<1)<<4)|0;Nc=q[Hc+4>>2];Jc=q[Hc>>2];Hc=q[Hc+8>>2];q[ab+12>>2]=0;q[ab+8>>2]=Hc;q[ab>>2]=Jc;q[ab+4>>2]=Nc;break a;case 12:Nc=q[Hc+44>>2];q[Kc+40>>2]=q[Hc+40>>2];q[Kc+44>>2]=Nc;Nc=q[Hc+36>>2];q[Kc+32>>2]=q[Hc+32>>2];q[Kc+36>>2]=Nc;q[Kc+16>>2]=q[Jc>>2];Mc=u[Jc+4>>2];q[Kc+20>>2]=q[Jc+4>>2];Lc=u[Jc+8>>2];Jc=q[Jc+8>>2];q[Kc+28>>2]=0;q[Kc+24>>2]=Jc;Nc=2;Rc=q[Hc+56>>2];Hc=Rc+ -1|0;Jc=1;d:{if(Hc>>>0>1){break d}if(Hc-1){Vc=1;Jc=0;break d}Lc=Mc;Vc=2;Nc=1;Jc=0;}Hc=Nc;Pc=u[(Kc+32|0)+(Rc<<2)>>2];Nc=Jc<<2;Qc=u[(Nc|Kc+32)>>2];Oc=u[(Nc|Kc+16)>>2];Mc=x(E(x(x(Oc*Oc)+x(Lc*Lc))));e:{if(Mc!=x(0)){Mc=x(Qc/Mc);u[(Jc<<2|Kc)>>2]=Oc*Mc;Jc=Vc<<2;u[Jc+Kc>>2]=u[Jc+(Kc+16|0)>>2]<x(0)?x(-Pc):Pc;u[(Hc<<2)+Kc>>2]=Lc*Mc;Jc=Kc|4;Hc=Kc+8|0;break e}u[(Jc<<2|Kc)>>2]=Qc;Jc=Vc<<2;u[Jc+Kc>>2]=u[Jc+(Kc+16|0)>>2]<x(0)?x(-Pc):Pc;q[(Hc<<2)+Kc>>2]=0;Jc=Kc|4;Hc=Kc+8|0;}q[ab>>2]=q[Kc>>2];q[ab+4>>2]=q[Jc>>2];Hc=q[Hc>>2];q[ab+12>>2]=0;q[ab+8>>2]=Hc;break a;case 9:Nc=Hc;Xc=q[Hc+56>>2];Hc=Xc<<2;Pc=u[(Nc+Hc|0)+32>>2];Qc=u[Jc>>2];Oc=u[Jc+4>>2];Mc=u[Jc+8>>2];Lc=x(x(x(Qc*Qc)+x(Oc*Oc))+x(Mc*Mc));f:{if(Lc<x(1.4210854715202004e-14)){Oc=x(1);break f}Lc=x(x(1)/x(E(Lc)));Sc=x(Mc*Lc);Uc=x(Oc*Lc);Oc=x(Qc*Lc);}q[Kc+40>>2]=0;q[Kc+44>>2]=0;q[Kc+32>>2]=0;q[Kc+36>>2]=0;u[Hc+(Kc+32|0)>>2]=Pc;Lc=x(-0xde0b6b000000000);Jc=0;Rc=q[Kc+32>>2];Nc=q[Kc+36>>2];Hc=q[Kc+40>>2];Mc=x(x(x(Oc*u[Kc+32>>2])+x(Uc*u[Kc+36>>2]))+x(Sc*u[Kc+40>>2]));if(!!(Mc>x(-0xde0b6b000000000))){Vc=Hc;Tc=Nc;Lc=Mc;Jc=Rc;}q[Kc+40>>2]=0;q[Kc+44>>2]=0;q[Kc+32>>2]=0;q[Kc+36>>2]=0;u[(Kc+32|0)+(Xc<<2)>>2]=-Pc;Rc=q[Kc+40>>2];Pc=u[Kc+40>>2];Nc=q[Kc+32>>2];Qc=u[Kc+32>>2];Hc=q[Kc+36>>2];Mc=u[Kc+36>>2];q[ab+12>>2]=0;Xc=Rc;Rc=x(x(x(Oc*Qc)+x(Uc*Mc))+x(Sc*Pc))>Lc;q[ab+8>>2]=Rc?Xc:Vc;q[ab+4>>2]=Rc?Hc:Tc;q[ab>>2]=Rc?Nc:Jc;break a;case 4:Wc=u[Hc+16>>2];Uc=u[Hc+24>>2];Sc=u[Hc+20>>2];Rc=q[Hc+96>>2];Tc=-1;Nc=q[Hc+100>>2];if((Nc|0)>=1){Pc=x(u[Jc>>2]*Wc);Qc=x(u[Jc+8>>2]*Uc);Oc=x(u[Jc+4>>2]*Sc);Hc=0;Lc=x(-3.4028234663852886e+38);while(1){Jc=Rc+(Hc<<4)|0;Mc=x(x(x(Pc*u[Jc>>2])+x(Oc*u[Jc+4>>2]))+x(Qc*u[Jc+8>>2]));Jc=Mc>Lc;Lc=Jc?Mc:Lc;Tc=Jc?Hc:Tc;Hc=Hc+1|0;if((Nc|0)!=(Hc|0)){continue}break}}Hc=Rc+(Tc<<4)|0;Oc=u[Hc>>2];Mc=u[Hc+4>>2];Lc=u[Hc+8>>2];q[ab+12>>2]=0;u[ab+8>>2]=Uc*Lc;u[ab+4>>2]=Sc*Mc;u[ab>>2]=Wc*Oc;break a;case 1:case 2:case 5:case 6:case 8:case 10:case 11:break b;case 3:break c}}Wc=u[Hc+16>>2];Uc=u[Hc+24>>2];Sc=u[Hc+20>>2];Rc=q[Hc+108>>2];Tc=-1;Nc=q[Hc+100>>2];if((Nc|0)>=1){Pc=x(u[Jc>>2]*Wc);Qc=x(u[Jc+8>>2]*Uc);Oc=x(u[Jc+4>>2]*Sc);Hc=0;Lc=x(-3.4028234663852886e+38);while(1){Jc=Rc+(Hc<<4)|0;Mc=x(x(x(Pc*u[Jc>>2])+x(Oc*u[Jc+4>>2]))+x(Qc*u[Jc+8>>2]));Jc=Mc>Lc;Lc=Jc?Mc:Lc;Tc=Jc?Hc:Tc;Hc=Hc+1|0;if((Nc|0)!=(Hc|0)){continue}break}}Hc=Rc+(Tc<<4)|0;Oc=u[Hc>>2];Mc=u[Hc+4>>2];Lc=u[Hc+8>>2];q[ab+12>>2]=0;u[ab+8>>2]=Uc*Lc;u[ab+4>>2]=Sc*Mc;u[ab>>2]=Wc*Oc;break a}n[q[q[Hc>>2]+68>>2]](ab,Hc,Jc);}P=Kc+48|0;}function fb(ab,Hc,Jc){ab=ab|0;Hc=Hc|0;Jc=Jc|0;var Yc=0,Zc=0;Yc=n[q[q[Jc>>2]+40>>2]](Jc,ab)|0;Zc=n[q[q[Jc>>2]+28>>2]](Jc,Yc)|0;q[Hc>>2]=Zc;if(Zc){n[q[q[Jc>>2]+48>>2]](Jc,Yc);}ab=q[ab+4>>2];q[Hc+8>>2]=0;q[Hc+4>>2]=ab;return 13738}function gb(ab){var Hc=0,Jc=0,_c=0,$c=0,ad=0,bd=x(0),cd=x(0),dd=x(0),ed=x(0),fd=0,gd=x(0),hd=x(0),id=x(0),jd=0,kd=x(0),ld=x(0);_c=P-48|0;P=_c;a:{b:{Jc=q[ab+372>>2];Hc=q[Jc+32>>2]+ -1|0;c:{if(Hc>>>0>3){break c}d:{switch(Hc-1|0){default:$c=q[ab+364>>2];Hc=1;while(1){q[_c+40>>2]=0;q[_c+44>>2]=0;q[_c+32>>2]=0;q[_c+36>>2]=0;q[(_c+32|0)+(ad<<2)>>2]=1065353216;fd=(Hc<<2)+Jc|0;q[fd+16>>2]=0;$c=$c+ -1|0;q[ab+364>>2]=$c;$c=q[(($c<<2)+ab|0)+348>>2];q[fd>>2]=$c;q[Jc+32>>2]=Hc+1;Na(ab,_c+32|0,$c);if(gb(ab)){break b}Jc=q[ab+372>>2];Hc=q[Jc+32>>2]+ -1|0;q[Jc+32>>2]=Hc;$c=q[ab+364>>2];Hc=q[Jc+(Hc<<2)>>2];q[(($c<<2)+ab|0)+348>>2]=Hc;Jc=q[ab+372>>2];q[_c+28>>2]=0;u[_c+24>>2]=-u[_c+40>>2];u[_c+20>>2]=-u[_c+36>>2];u[_c+16>>2]=-u[_c+32>>2];fd=q[Jc+32>>2];jd=Jc+(fd<<2)|0;q[jd+16>>2]=0;q[ab+364>>2]=$c;q[jd>>2]=Hc;q[Jc+32>>2]=fd+1;Na(ab,_c+16|0,Hc);if(gb(ab)){break b}Jc=q[ab+372>>2];Hc=q[Jc+32>>2]+ -1|0;q[Jc+32>>2]=Hc;Jc=q[Jc+(Hc<<2)>>2];Hc=q[ab+364>>2];$c=Hc+1|0;q[ab+364>>2]=$c;q[((Hc<<2)+ab|0)+348>>2]=Jc;ad=ad+1|0;if((ad|0)==3){break c}Jc=q[ab+372>>2];Hc=q[Jc+32>>2];continue}case 0:Hc=q[Jc+4>>2];Jc=q[Jc>>2];bd=x(u[Hc+24>>2]-u[Jc+24>>2]);dd=x(u[Hc+20>>2]-u[Jc+20>>2]);cd=x(u[Hc+16>>2]-u[Jc+16>>2]);Jc=0;while(1){q[_c+40>>2]=0;q[_c+44>>2]=0;q[_c+32>>2]=0;q[_c+36>>2]=0;q[(_c+32|0)+(Jc<<2)>>2]=1065353216;q[_c+28>>2]=0;ed=u[_c+32>>2];gd=u[_c+40>>2];hd=x(x(bd*ed)-x(cd*gd));u[_c+20>>2]=hd;id=u[_c+36>>2];gd=x(x(dd*gd)-x(bd*id));u[_c+16>>2]=gd;ed=x(x(cd*id)-x(dd*ed));u[_c+24>>2]=ed;if(!!(x(x(ed*ed)+x(x(gd*gd)+x(hd*hd)))>x(0))){Hc=q[ab+372>>2];$c=q[Hc+32>>2];ad=($c<<2)+Hc|0;q[ad+16>>2]=0;fd=q[ab+364>>2]+ -1|0;q[ab+364>>2]=fd;jd=ad;ad=q[((fd<<2)+ab|0)+348>>2];q[jd>>2]=ad;q[Hc+32>>2]=$c+1;Na(ab,_c+16|0,ad);if(gb(ab)){break b}Hc=q[ab+372>>2];$c=q[Hc+32>>2]+ -1|0;q[Hc+32>>2]=$c;ad=q[ab+364>>2];$c=q[Hc+($c<<2)>>2];q[((ad<<2)+ab|0)+348>>2]=$c;Hc=q[ab+372>>2];q[_c+12>>2]=0;u[_c+8>>2]=-u[_c+24>>2];u[_c+4>>2]=-u[_c+20>>2];u[_c>>2]=-u[_c+16>>2];fd=q[Hc+32>>2];jd=Hc+(fd<<2)|0;q[jd+16>>2]=0;q[ab+364>>2]=ad;q[jd>>2]=$c;q[Hc+32>>2]=fd+1;Na(ab,_c,$c);if(gb(ab)){break b}Hc=q[ab+372>>2];$c=q[Hc+32>>2]+ -1|0;q[Hc+32>>2]=$c;Hc=q[Hc+($c<<2)>>2];$c=q[ab+364>>2];q[ab+364>>2]=$c+1;q[(($c<<2)+ab|0)+348>>2]=Hc;}Jc=Jc+1|0;if((Jc|0)!=3){continue}break}break c;case 1:Hc=q[Jc+4>>2];hd=u[Hc+20>>2];$c=q[Jc+8>>2];gd=u[$c+24>>2];ad=q[Jc>>2];bd=u[ad+24>>2];ed=u[Hc+24>>2];id=u[$c+20>>2];dd=u[ad+20>>2];kd=u[$c+16>>2];cd=u[ad+16>>2];ld=u[Hc+16>>2];q[_c+44>>2]=0;hd=x(hd-dd);gd=x(gd-bd);ed=x(ed-bd);id=x(id-dd);bd=x(x(hd*gd)-x(ed*id));u[_c+32>>2]=bd;dd=ed;ed=x(kd-cd);cd=x(ld-cd);dd=x(x(dd*ed)-x(cd*gd));u[_c+36>>2]=dd;cd=x(x(cd*id)-x(hd*ed));u[_c+40>>2]=cd;if(!(x(x(cd*cd)+x(x(bd*bd)+x(dd*dd)))>x(0))){break c}q[Jc+28>>2]=0;Hc=q[ab+364>>2]+ -1|0;q[ab+364>>2]=Hc;Hc=q[((Hc<<2)+ab|0)+348>>2];q[Jc+32>>2]=4;q[Jc+12>>2]=Hc;Na(ab,_c+32|0,Hc);if(gb(ab)){break b}Jc=q[ab+372>>2];Hc=q[Jc+32>>2]+ -1|0;q[Jc+32>>2]=Hc;$c=q[ab+364>>2];Hc=q[Jc+(Hc<<2)>>2];q[(($c<<2)+ab|0)+348>>2]=Hc;Jc=q[ab+372>>2];q[_c+28>>2]=0;u[_c+24>>2]=-u[_c+40>>2];u[_c+20>>2]=-u[_c+36>>2];u[_c+16>>2]=-u[_c+32>>2];ad=q[Jc+32>>2];fd=Jc+(ad<<2)|0;q[fd+16>>2]=0;q[ab+364>>2]=$c;q[fd>>2]=Hc;q[Jc+32>>2]=ad+1;Na(ab,_c+16|0,Hc);Hc=1;if(gb(ab)){break a}Jc=q[ab+372>>2];Hc=q[Jc+32>>2]+ -1|0;q[Jc+32>>2]=Hc;Jc=q[Jc+(Hc<<2)>>2];Hc=q[ab+364>>2];q[ab+364>>2]=Hc+1;q[((Hc<<2)+ab|0)+348>>2]=Jc;Hc=0;break a;case 2:break d}}ab=q[Jc>>2];$c=q[Jc+12>>2];bd=u[$c+16>>2];hd=x(u[ab+16>>2]-bd);ad=q[Jc+4>>2];dd=u[$c+20>>2];gd=x(u[ad+20>>2]-dd);Jc=q[Jc+8>>2];cd=u[$c+24>>2];ed=x(u[Jc+24>>2]-cd);id=x(u[ab+20>>2]-dd);kd=x(u[ad+24>>2]-cd);ld=x(u[Jc+16>>2]-bd);cd=x(u[ab+24>>2]-cd);bd=x(u[ad+16>>2]-bd);dd=x(u[Jc+20>>2]-dd);bd=x(x(x(x(hd*gd)*ed)+x(x(x(x(x(id*kd)*ld)+x(x(cd*bd)*dd))-x(x(hd*kd)*dd))-x(x(id*bd)*ed)))-x(x(cd*gd)*ld));Hc=1;if(bd!=x(0)&bd==bd){break a}}Hc=0;break a}Hc=1;}P=_c+48|0;return Hc}function hb(ab){ab=ab|0;var md=0;q[ab>>2]=4464;md=q[ab+296>>2];if(md){if(r[ab+300|0]){if(md){q[6658]=q[6658]+1;n[q[5256]](md);}}q[ab+296>>2]=0;}q[ab+296>>2]=0;q[ab+288>>2]=0;q[ab+292>>2]=0;o[ab+300|0]=1;return ab|0}function ib(ab,nd,od){var pd=0,qd=0;qd=P-256|0;P=qd;pd=q[nd+212>>2];a:{if((pd|0)>-1){break a}b:{pd=q[nd+252>>2];if(!(pd&2)){break b}pd=pd<<30>>31&nd;if(r[pd+204|0]&2?0:u[pd+404>>2]==x(0)){break b}pd=q[ab+8>>2];_(qd+8|0,0,244);el(qf(ab+4|0,qd+8|0),nd,od);q[nd+212>>2]=pd;break a}pd=q[ab+188>>2];if((pd|0)>-1){break a}q[ab+188>>2]=q[ab+8>>2];_(qd+8|0,0,244);nd=qf(ab+4|0,qd+8|0);q[nd+88>>2]=0;q[nd+92>>2]=0;q[nd+80>>2]=0;q[nd+84>>2]=0;q[nd+72>>2]=0;q[nd+76>>2]=0;q[nd+64>>2]=0;q[nd+68>>2]=0;q[nd+144>>2]=0;q[nd+148>>2]=0;q[nd+152>>2]=0;q[nd+156>>2]=0;q[nd+160>>2]=0;q[nd+164>>2]=0;q[nd+168>>2]=0;q[nd+172>>2]=0;q[nd+4>>2]=0;q[nd+8>>2]=0;q[nd>>2]=1065353216;q[nd+12>>2]=0;q[nd+16>>2]=0;q[nd+24>>2]=0;q[nd+28>>2]=0;q[nd+20>>2]=1065353216;q[nd+32>>2]=0;q[nd+36>>2]=0;q[nd+44>>2]=0;q[nd+48>>2]=0;q[nd+40>>2]=1065353216;q[nd+52>>2]=0;q[nd+56>>2]=0;q[nd+60>>2]=0;q[nd+136>>2]=0;q[nd+140>>2]=0;q[nd+240>>2]=0;q[nd+128>>2]=0;q[nd+132>>2]=0;q[nd+120>>2]=1065353216;q[nd+124>>2]=0;q[nd+112>>2]=1065353216;q[nd+116>>2]=1065353216;q[nd+104>>2]=1065353216;q[nd+108>>2]=0;q[nd+96>>2]=1065353216;q[nd+100>>2]=1065353216;q[nd+232>>2]=0;q[nd+236>>2]=0;q[nd+224>>2]=0;q[nd+228>>2]=0;q[nd+216>>2]=0;q[nd+220>>2]=0;q[nd+208>>2]=0;q[nd+212>>2]=0;q[nd+200>>2]=0;q[nd+204>>2]=0;q[nd+192>>2]=0;q[nd+196>>2]=0;q[nd+184>>2]=0;q[nd+188>>2]=0;q[nd+176>>2]=0;q[nd+180>>2]=0;pd=q[ab+188>>2];}P=qd+256|0;return pd}function jb(ab,nd,od,rd,sd){var td=x(0);td=x(1);a:{if(nd>od){break a}td=x(0);if(nd==od){break a}rd=x(rd/sd);if(!!(rd<x(0))){if(!(ab>=nd^1|x(nd-rd)>ab^1)){return x(x(nd-ab)/rd)}return ab<nd?x(0):x(1)}if(!(rd>x(0))){break a}if(!(ab<=od^1|x(od-rd)<ab^1)){return x(x(od-ab)/rd)}td=ab>od?x(0):x(1);}return td}function kb(ab,nd,od,rd){var sd=x(0),ud=0,vd=x(0),wd=x(0),xd=x(0),yd=x(0),zd=x(0),Ad=x(0),Bd=x(0),Cd=x(0),Dd=x(0),Ed=x(0),Fd=x(0),Gd=x(0),Hd=x(0),Id=x(0),Jd=x(0),Kd=x(0),Ld=x(0),Md=x(0),Nd=x(0),Od=x(0),Pd=x(0),Qd=x(0);ud=P+ -64|0;P=ud;Ed=u[nd+24>>2];Fd=u[nd+20>>2];Gd=u[nd+40>>2];Hd=u[nd+36>>2];yd=u[ab+40>>2];zd=u[ab+20>>2];Cd=u[ab+36>>2];Ad=u[ab+24>>2];Id=u[nd+8>>2];Jd=u[nd>>2];Kd=u[nd+4>>2];Ld=u[nd+16>>2];Md=u[nd+32>>2];vd=u[ab+8>>2];wd=u[ab+4>>2];Dd=u[ab+32>>2];Bd=u[ab+16>>2];xd=u[ab>>2];q[ud+60>>2]=0;q[ud+44>>2]=0;Od=x(x(zd*yd)-x(Ad*Cd));Pd=x(x(Ad*Dd)-x(yd*Bd));Qd=x(x(Cd*Bd)-x(zd*Dd));sd=x(x(1)/x(x(x(xd*Od)+x(wd*Pd))+x(vd*Qd)));Nd=x(x(x(Ad*wd)-x(zd*vd))*sd);Ad=x(x(x(Bd*vd)-x(Ad*xd))*sd);zd=x(x(x(zd*xd)-x(Bd*wd))*sd);u[ud+56>>2]=x(x(Md*Nd)+x(Hd*Ad))+x(Gd*zd);Bd=x(x(x(Cd*vd)-x(yd*wd))*sd);vd=x(x(x(yd*xd)-x(Dd*vd))*sd);wd=x(x(x(Dd*wd)-x(Cd*xd))*sd);u[ud+52>>2]=x(x(Md*Bd)+x(Hd*vd))+x(Gd*wd);u[ud+40>>2]=x(x(Nd*Ld)+x(Ad*Fd))+x(zd*Ed);u[ud+36>>2]=x(x(Bd*Ld)+x(vd*Fd))+x(wd*Ed);q[ud+28>>2]=0;xd=x(Od*sd);yd=x(Pd*sd);sd=x(Qd*sd);u[ud+48>>2]=x(x(Md*xd)+x(Hd*yd))+x(Gd*sd);u[ud+32>>2]=x(x(xd*Ld)+x(yd*Fd))+x(sd*Ed);u[ud+24>>2]=x(Id*zd)+x(x(Jd*Nd)+x(Kd*Ad));u[ud+20>>2]=x(Id*wd)+x(x(Jd*Bd)+x(Kd*vd));u[ud+16>>2]=x(Id*sd)+x(x(Jd*xd)+x(Kd*yd));ja(ud+16|0,ud);xd=u[ud>>2];wd=u[ud+4>>2];vd=u[ud+8>>2];yd=u[ud+12>>2];sd=x(x(1)/x(E(x(x(x(x(xd*xd)+x(wd*wd))+x(vd*vd))+x(yd*yd)))));vd=x(vd*sd);u[ud+8>>2]=vd;wd=x(wd*sd);u[ud+4>>2]=wd;xd=x(xd*sd);u[ud>>2]=xd;sd=x(yd*sd);u[ud+12>>2]=sd;sd=Sa(x(A(x(B(sd,x(-1))),x(1))));u[rd>>2]=sd+sd;q[od+12>>2]=0;u[od+8>>2]=vd;u[od+4>>2]=wd;u[od>>2]=xd;sd=x(x(x(xd*xd)+x(wd*wd))+x(vd*vd));a:{if(!!(sd<x(1.4210854715202004e-14))){q[od+8>>2]=0;q[od+12>>2]=0;q[od>>2]=1065353216;q[od+4>>2]=0;break a}sd=x(x(1)/x(E(sd)));u[od+8>>2]=vd*sd;u[od+4>>2]=wd*sd;u[od>>2]=xd*sd;}P=ud- -64|0;}function lb(ab,nd,od){var rd=0;rd=P-32|0;P=rd;q[rd+28>>2]=nd;q[rd+24>>2]=od;u[rd+20>>2]=u[q[rd+28>>2]>>2]*u[q[rd+24>>2]>>2];u[rd+16>>2]=u[q[rd+28>>2]+4>>2]*u[q[rd+24>>2]+4>>2];u[rd+12>>2]=u[q[rd+28>>2]+8>>2]*u[q[rd+24>>2]+8>>2];ca(ab,rd+20|0,rd+16|0,rd+12|0);P=rd+32|0;}function mb(ab){var nd=0;nd=q[6808];ab=nd+ab|0;if((ab|0)<=-1){q[6659]=48;return -1}a:{if(ab>>>0<=R()<<16>>>0){break a}if(L(ab|0)){break a}q[6659]=48;return -1}q[6808]=ab;return nd}function nb(ab){var od=0,Rd=0,Sd=0,Td=0,Ud=0,Vd=x(0);Sd=P-16|0;P=Sd;od=q[ab+12>>2];Rd=od;Ud=q[ab+8>>2];a:{if((od|0)>0?1:(od|0)>=0?Ud>>>0<0?0:1:0){Vd=x(x(x(+(Ud>>>0)+4294967296*+(Rd>>>0))*x(0x10000000000000000))+x(+t[ab>>2]+4294967296*+t[ab+4>>2]));break a}Td=q[ab+4>>2];od=q[ab>>2];ab=od;q[Sd>>2]=0-ab;q[Sd+4>>2]=0-(Td+(0<ab>>>0)|0);Rd=Rd^-1;ab=!(ab|Td);Td=Ud^-1;od=ab+Td|0;if(od>>>0<Td>>>0){Rd=Rd+1|0;}ab=Sd;q[ab+8>>2]=od;q[ab+12>>2]=Rd;Vd=x(-nb(ab));}P=Sd+16|0;return Vd}function ob(ab){ab=ab|0;if(ab){q[6658]=q[6658]+1;n[q[5256]](ab);}}function pb(ab,Wd,Xd,Yd,Zd,_d,$d,ae,be,ce,de,ee){var fe=0,ge=0,he=0,ie=0,je=0,ke=0;he=q[ab+68>>2];fe=he;a:{if((he|0)!=q[ab+72>>2]){break a}fe=he;ie=he?he<<1:1;if((he|0)>=(ie|0)){break a}if(ie){q[6657]=q[6657]+1;je=n[q[5255]](w(ie,152),16)|0;fe=q[ab+68>>2];}else {fe=he;}ge=fe;if((ge|0)>=1){fe=0;while(1){ke=w(fe,152);va(ke+je|0,q[ab+76>>2]+ke|0,152);fe=fe+1|0;if((ge|0)!=(fe|0)){continue}break}}ge=q[ab+76>>2];if(ge){if(r[ab+80|0]){if(ge){q[6658]=q[6658]+1;n[q[5256]](ge);}}q[ab+76>>2]=0;}q[ab+76>>2]=je;q[ab+72>>2]=ie;o[ab+80|0]=1;fe=q[ab+68>>2];}q[ab+68>>2]=fe+1;ge=q[ab+76>>2]+w(he,152)|0;q[ge+140>>2]=Zd;dl(ab,ge,Wd,Xd,Yd,_d,$d,ae,be,ce,de,ee);}function qb(ab,Wd,Xd,Yd,Zd,_d,$d,ae){var be=x(0),ce=0,de=x(0),ee=x(0),le=x(0),me=0,ne=x(0),oe=x(0),pe=x(0),qe=x(0),re=x(0),se=x(0),te=x(0),ue=x(0),ve=0,we=0,xe=0,ye=0,ze=0,Ae=0,Be=x(0),Ce=x(0),De=x(0);ce=P-16|0;ve=q[($d?20:16)+Yd>>2];me=q[($d?12:8)+Yd>>2];we=Zd<<2;q[me+we>>2]=q[_d>>2];xe=Zd+1|0;ye=xe<<2;q[ye+me>>2]=q[_d+4>>2];Ae=me;me=Zd+2|0;ze=me<<2;q[Ae+ze>>2]=q[_d+8>>2];u[ve+we>>2]=-u[_d>>2];u[ve+ye>>2]=-u[_d+4>>2];u[ve+ze>>2]=-u[_d+8>>2];if(!$d){oe=u[ab+1348>>2];ne=u[Xd+52>>2];pe=u[ab+1352>>2];qe=u[Xd+56>>2];Be=u[ab+1356>>2];le=u[Wd+56>>2];re=u[ab+1292>>2];se=u[ab+1284>>2];te=u[Wd+52>>2];ue=u[ab+1288>>2];Ce=u[Xd+48>>2];de=u[_d+8>>2];ee=u[_d+4>>2];De=u[Wd+48>>2];be=u[_d>>2];q[ce+12>>2]=0;se=x(se-De);te=x(ue-te);ue=x(x(ee*se)-x(be*te));u[ce+8>>2]=ue;le=x(re-le);re=x(x(be*le)-x(se*de));u[ce+4>>2]=re;le=x(x(te*de)-x(le*ee));u[ce>>2]=le;pe=x(pe-ne);qe=x(Be-qe);ne=x(x(de*pe)-x(ee*qe));oe=x(oe-Ce);ee=x(x(ee*oe)-x(pe*be));de=x(x(qe*be)-x(oe*de));if(!(!r[ab+1452|0]|ae)){be=u[ab+1444>>2];u[ce+8>>2]=ue*be;u[ce+4>>2]=re*be;u[ce>>2]=le*be;be=u[ab+1448>>2];ee=x(ee*be);ne=x(ne*be);de=x(de*be);}Xd=q[ce+4>>2];Wd=Zd<<2;ab=Wd+q[Yd+12>>2]|0;q[ab>>2]=q[ce>>2];q[ab+4>>2]=Xd;q[ab+8>>2]=q[ce+8>>2];ab=q[Yd+20>>2];u[ab+Wd>>2]=-ne;u[ab+(xe<<2)>>2]=-de;u[ab+(me<<2)>>2]=-ee;}}function rb(ab,Wd){var Xd=x(0),Yd=x(0),Zd=0,_d=x(0),$d=x(0),ae=x(0),Ee=0;Yd=u[((Wd<<2)+ab|0)+1192>>2];Zd=(Wd<<6)+ab|0;_d=u[Zd+868>>2];$d=u[Zd+872>>2];a:{if(_d>=$d){break a}if(!!(Yd<_d)){Xd=ea(x(_d-Yd),x(6.2831854820251465));b:{if(!!(Xd<x(-3.1415927410125732))){Xd=x(Xd+x(6.2831854820251465));break b}if(!(Xd>x(3.1415927410125732))){break b}Xd=x(Xd+x(-6.2831854820251465));}ae=x(y(Xd));Xd=ea(x($d-Yd),x(6.2831854820251465));c:{if(!!(Xd<x(-3.1415927410125732))){Xd=x(Xd+x(6.2831854820251465));break c}if(!(Xd>x(3.1415927410125732))){break c}Xd=x(Xd+x(-6.2831854820251465));}Yd=ae<x(y(Xd))?Yd:x(Yd+x(6.2831854820251465));break a}if(!(Yd>$d)){break a}Xd=ea(x(Yd-$d),x(6.2831854820251465));d:{if(!!(Xd<x(-3.1415927410125732))){Xd=x(Xd+x(6.2831854820251465));break d}if(!(Xd>x(3.1415927410125732))){break d}Xd=x(Xd+x(-6.2831854820251465));}ae=x(y(Xd));Xd=ea(x(Yd-_d),x(6.2831854820251465));e:{if(!!(Xd<x(-3.1415927410125732))){Xd=x(Xd+x(6.2831854820251465));break e}if(!(Xd>x(3.1415927410125732))){break e}Xd=x(Xd+x(-6.2831854820251465));}Yd=x(y(Xd))<ae?x(Yd+x(-6.2831854820251465)):Yd;}u[Zd+920>>2]=Yd;f:{g:{h:{if(!!(_d>$d)){Ee=((Wd<<6)+ab|0)+924|0;break h}if(!!(_d>Yd)){ab=(Wd<<6)+ab|0;Xd=x(Yd-_d);u[ab+916>>2]=Xd;q[ab+924>>2]=1;if(!!(Xd>x(3.1415927410125732))){u[ab+916>>2]=Xd+x(-6.2831854820251465);break g}if(!(Xd<x(-3.1415927410125732))){break g}u[ab+916>>2]=Xd+x(6.2831854820251465);break g}Zd=(Wd<<6)+ab|0;Ee=Zd+924|0;if(!($d<Yd)){break h}q[Zd+924>>2]=2;Xd=x(Yd-$d);u[Zd+916>>2]=Xd;if(!!(Xd>x(3.1415927410125732))){u[Zd+916>>2]=Xd+x(-6.2831854820251465);break g}if(!(Xd<x(-3.1415927410125732))){break g}u[Zd+916>>2]=Xd+x(6.2831854820251465);break g}q[Ee>>2]=0;Zd=0;if(!r[((Wd<<6)+ab|0)+912|0]){break f}}Zd=1;}return Zd}function sb(ab){}function tb(ab,Wd){var Fe=0,Ge=x(0),He=x(0);Fe=P-16|0;P=Fe;q[Fe+12>>2]=ab;q[Fe+8>>2]=Wd;Wd=P-16|0;ab=q[Fe+12>>2];q[Wd+12>>2]=ab;Ge=u[q[Wd+12>>2]+8>>2];Wd=P-16|0;q[Wd+12>>2]=q[Fe+8>>2];Ge=x(Ge*u[q[Wd+12>>2]>>2]);Wd=P-16|0;q[Wd+12>>2]=ab+16;He=u[q[Wd+12>>2]+8>>2];Wd=P-16|0;q[Wd+12>>2]=q[Fe+8>>2];Ge=x(Ge+x(He*u[q[Wd+12>>2]+4>>2]));Wd=P-16|0;q[Wd+12>>2]=ab+32;He=u[q[Wd+12>>2]+8>>2];ab=P-16|0;q[ab+12>>2]=q[Fe+8>>2];P=Fe+16|0;return x(Ge+x(He*u[q[ab+12>>2]+8>>2]))}function ub(ab,Wd){var Ie=0,Je=x(0),Ke=x(0);Ie=P-16|0;P=Ie;q[Ie+12>>2]=ab;q[Ie+8>>2]=Wd;Wd=P-16|0;ab=q[Ie+12>>2];q[Wd+12>>2]=ab;Je=u[q[Wd+12>>2]+4>>2];Wd=P-16|0;q[Wd+12>>2]=q[Ie+8>>2];Je=x(Je*u[q[Wd+12>>2]>>2]);Wd=P-16|0;q[Wd+12>>2]=ab+16;Ke=u[q[Wd+12>>2]+4>>2];Wd=P-16|0;q[Wd+12>>2]=q[Ie+8>>2];Je=x(Je+x(Ke*u[q[Wd+12>>2]+4>>2]));Wd=P-16|0;q[Wd+12>>2]=ab+32;Ke=u[q[Wd+12>>2]+4>>2];ab=P-16|0;q[ab+12>>2]=q[Ie+8>>2];P=Ie+16|0;return x(Je+x(Ke*u[q[ab+12>>2]+8>>2]))}function vb(ab,Wd){var Le=0,Me=x(0),Ne=x(0);Le=P-16|0;P=Le;q[Le+12>>2]=ab;q[Le+8>>2]=Wd;Wd=P-16|0;ab=q[Le+12>>2];q[Wd+12>>2]=ab;Me=u[q[Wd+12>>2]>>2];Wd=P-16|0;q[Wd+12>>2]=q[Le+8>>2];Me=x(Me*u[q[Wd+12>>2]>>2]);Wd=P-16|0;q[Wd+12>>2]=ab+16;Ne=u[q[Wd+12>>2]>>2];Wd=P-16|0;q[Wd+12>>2]=q[Le+8>>2];Me=x(Me+x(Ne*u[q[Wd+12>>2]+4>>2]));Wd=P-16|0;q[Wd+12>>2]=ab+32;Ne=u[q[Wd+12>>2]>>2];ab=P-16|0;q[ab+12>>2]=q[Le+8>>2];P=Le+16|0;return x(Me+x(Ne*u[q[ab+12>>2]+8>>2]))}function wb(ab){ab=ab|0;q[(P-16|0)+12>>2]=ab;F();}function xb(ab){ab=ab|0;var Wd=0;Wd=P-16|0;P=Wd;q[Wd+12>>2]=ab;ab=q[Wd+12>>2];Ca(ab);P=Wd+16|0;return ab|0}function yb(ab,Oe,Pe,Qe){var Re=0;Re=P-32|0;q[Re+28>>2]=ab;q[Re+24>>2]=Oe;q[Re+20>>2]=Pe;u[Re+16>>2]=Qe;ab=q[Re+28>>2];u[Re+12>>2]=x(1)-u[Re+16>>2];u[ab>>2]=x(u[Re+12>>2]*u[q[Re+24>>2]>>2])+x(u[Re+16>>2]*u[q[Re+20>>2]>>2]);u[ab+4>>2]=x(u[Re+12>>2]*u[q[Re+24>>2]+4>>2])+x(u[Re+16>>2]*u[q[Re+20>>2]+4>>2]);u[ab+8>>2]=x(u[Re+12>>2]*u[q[Re+24>>2]+8>>2])+x(u[Re+16>>2]*u[q[Re+20>>2]+8>>2]);}function zb(ab,Oe,Pe,Qe,Se,Te,Ue,Ve,We,Xe){var Ye=0;Ye=P-48|0;P=Ye;q[Ye+44>>2]=ab;q[Ye+40>>2]=Oe;q[Ye+36>>2]=Pe;q[Ye+32>>2]=Qe;q[Ye+28>>2]=Se;q[Ye+24>>2]=Te;q[Ye+20>>2]=Ue;q[Ye+16>>2]=Ve;q[Ye+12>>2]=We;q[Ye+8>>2]=Xe;ab=q[Ye+44>>2];ca(ab,q[Ye+40>>2],q[Ye+36>>2],q[Ye+32>>2]);ca(ab+16|0,q[Ye+28>>2],q[Ye+24>>2],q[Ye+20>>2]);ca(ab+32|0,q[Ye+16>>2],q[Ye+12>>2],q[Ye+8>>2]);P=Ye+48|0;}function Ab(ab){ab=ab|0;var Oe=0;Oe=P-16|0;P=Oe;q[Oe+12>>2]=ab;ab=P-16|0;q[ab+12>>2]=q[Oe+12>>2];P=Oe+16|0;return q[ab+12>>2]+32|0}function Bb(ab){var Pe=0,Qe=0,Se=x(0),Te=0;a:{b:{Te=(j(ab),e(0));Qe=Te&2147483647;if(Qe>>>0>=1065353216){if((Qe|0)!=1065353216){break b}return x(+ab*1.5707963267948966+7.52316384526264e-37)}if(Qe>>>0<=1056964607){if(Qe+ -8388608>>>0<956301312){break a}Se=x(ab*ab);return x(x(x(x(Se*x(x(Se*x(x(Se*x(-.008656363002955914))+x(-.04274342209100723)))+x(.16666586697101593)))/x(x(Se*x(-.7066296339035034))+x(1)))*ab)+ab)}ab=x(x(x(1)-x(y(ab)))*x(.5));Pe=E(+ab);Pe=Pe+Pe*+x(x(ab*x(x(ab*x(x(ab*x(-.008656363002955914))+x(-.04274342209100723)))+x(.16666586697101593)))/x(x(ab*x(-.7066296339035034))+x(1)));ab=x(1.5707963267948966-(Pe+Pe));return (Te|0)<0?x(-ab):ab}ab=x(x(0)/x(ab-ab));}return ab}function Cb(ab,Ue,Ve){var We=0,Xe=0,Ze=0;a:{if((Ue|0)==1&ab>>>0<0|Ue>>>0<1){We=ab;break a}while(1){We=KB(ab,Ue,10);Xe=Q;Ze=Xe;Xe=JB(We,Xe,10,0);Ve=Ve+ -1|0;o[Ve|0]=ab-Xe|48;Xe=(Ue|0)==9&ab>>>0>4294967295|Ue>>>0>9;ab=We;Ue=Ze;if(Xe){continue}break}}if(We){while(1){Ve=Ve+ -1|0;ab=(We>>>0)/10|0;o[Ve|0]=We-w(ab,10)|48;Ue=We>>>0>9;We=ab;if(Ue){continue}break}}return Ve}function Db(ab,Ue){var Ve=0,_e=0,$e=0,af=0,bf=0,cf=0,df=0,ef=0,ff=0,gf=0,hf=0,jf=0,kf=0,lf=0,mf=0,nf=0;kf=q[ab+16>>2];_e=q[Ue+16>>2];if((kf|0)!=(_e|0)){return kf-_e|0}if(!kf){return 0}bf=q[ab+4>>2];df=q[Ue+8>>2];ef=q[Ue+12>>2];jf=q[ab>>2];ff=JB(ef,0,jf,0);cf=Q;ef=JB(ef,$e,bf,0);Ve=ef+cf|0;_e=Q+af|0;af=Ve;Ve=Ve>>>0<ef>>>0?_e+1|0:_e;ef=0;bf=JB(df,ef,bf,$e);_e=af;af=Q;$e=_e+af|0;if($e>>>0<af>>>0){Ve=Ve+1|0;}_e=$e;af=Ve;$e=0;Ve=bf+ff|0;if(Ve>>>0<bf>>>0){$e=$e+1|0;}ff=$e;$e=$e+_e|0;_e=af;_e=$e>>>0<ff>>>0?_e+1|0:_e;af=$e;$e=Ve;ff=0;df=JB(jf,gf,df,ef);bf=ff+df|0;Ve=Q+Ve|0;Ve=bf>>>0<df>>>0?Ve+1|0:Ve;lf=bf;df=bf;bf=Ve;$e=($e|0)==(Ve|0)&df>>>0<ff>>>0|Ve>>>0<$e>>>0;Ve=af+$e|0;if(Ve>>>0<$e>>>0){_e=_e+1|0;}ff=Ve;df=_e;ef=Ve;jf=_e;$e=q[ab+8>>2];ab=q[ab+12>>2];Ve=q[Ue>>2];cf=q[Ue+4>>2];_e=0;gf=$e;af=JB(cf,_e,$e,0);Ue=Q;hf=ab;$e=0;cf=JB(cf,_e,ab,$e);ab=Ue+cf|0;_e=Q;_e=ab>>>0<cf>>>0?_e+1|0:_e;Ue=ab;cf=Ve;ab=JB(Ve,0,hf,$e);hf=Q;Ue=hf+Ue|0;Ve=_e;Ve=Ue>>>0<hf>>>0?Ve+1|0:Ve;$e=Ve;_e=0;Ve=ab+af|0;if(Ve>>>0<ab>>>0){_e=_e+1|0;}hf=_e;af=_e+Ue|0;_e=$e;_e=af>>>0<hf>>>0?_e+1|0:_e;Ue=af;af=-1;$e=_e;hf=Ue;Ue=0;gf=JB(cf,mf,gf,nf);ab=Ue+gf|0;_e=Ve;Ve=Ve+Q|0;Ve=ab>>>0<gf>>>0?Ve+1|0:Ve;gf=ab;cf=ab;ab=Ve;Ue=(_e|0)==(Ve|0)&cf>>>0<Ue>>>0|Ve>>>0<_e>>>0;_e=hf+Ue|0;if(_e>>>0<Ue>>>0){$e=$e+1|0;}Ve=_e;Ue=$e;a:{if(($e|0)==(jf|0)&ef>>>0<Ve>>>0|jf>>>0<$e>>>0){break a}af=1;if((Ue|0)==(df|0)&ff>>>0>_e>>>0|df>>>0>Ue>>>0){break a}af=-1;if((ab|0)==(bf|0)&lf>>>0<gf>>>0|bf>>>0<ab>>>0){break a}af=(ab|0)==(bf|0)&lf>>>0>gf>>>0|bf>>>0>ab>>>0;}return w(af,kf)}function Eb(ab,Ue){var of=0,pf=0,qf=0,rf=0,sf=0,tf=0;if(r[ab+164|0]){of=q[ab+128>>2];a:{if((of|0)!=q[ab+132>>2]){break a}qf=of?of<<1:1;if((of|0)>=(qf|0)){break a}if(qf){q[6657]=q[6657]+1;rf=n[q[5255]](qf<<2,16)|0;of=q[ab+128>>2];}pf=q[ab+136>>2];b:{c:{if((of|0)>=1){while(1){tf=sf<<2;q[tf+rf>>2]=q[pf+tf>>2];sf=sf+1|0;if((sf|0)!=(of|0)){continue}break c}}if(!pf){break b}}if(r[ab+140|0]){if(pf){q[6658]=q[6658]+1;n[q[5256]](pf);}}q[ab+136>>2]=0;of=q[ab+128>>2];}q[ab+136>>2]=rf;q[ab+132>>2]=qf;o[ab+140|0]=1;}pf=of<<2;of=q[ab+136>>2];q[pf+of>>2]=Ue;q[ab+128>>2]=q[ab+128>>2]+1;q[q[ab+32>>2]+4>>2]=of;return}of=q[ab+148>>2];d:{if((of|0)!=q[ab+152>>2]){break d}qf=of?of<<1:1;if((of|0)>=(qf|0)){break d}if(qf){q[6657]=q[6657]+1;rf=n[q[5255]](qf<<1,16)|0;of=q[ab+148>>2];}pf=q[ab+156>>2];e:{f:{if((of|0)>=1){while(1){tf=sf<<1;p[tf+rf>>1]=s[pf+tf>>1];sf=sf+1|0;if((sf|0)!=(of|0)){continue}break f}}if(!pf){break e}}if(r[ab+160|0]){if(pf){q[6658]=q[6658]+1;n[q[5256]](pf);}of=q[ab+148>>2];}q[ab+156>>2]=0;}q[ab+156>>2]=rf;q[ab+152>>2]=qf;o[ab+160|0]=1;}rf=q[ab+156>>2];p[rf+(of<<1)>>1]=Ue;q[ab+148>>2]=of+1;q[q[ab+32>>2]+4>>2]=rf;}function Fb(ab){var Ue=0;Ue=P-16|0;P=Ue;q[Ue+12>>2]=ab;ab=q[Ue+12>>2];q[(P-16|0)+12>>2]=ab;ih(ab);P=Ue+16|0;}function Gb(ab,uf,vf,wf,xf,yf,zf){var Af=x(0),Bf=x(0),Cf=0,Df=0,Ef=0,Ff=x(0),Gf=x(0),Hf=x(0),If=0;Cf=P-16|0;q[wf>>2]=2139095039;Df=-8388609;q[xf>>2]=-8388609;If=q[ab+8>>2];Af=x(-3.4028234663852886e+38);a:{if((If|0)<1){break a}Df=0;while(1){Ef=q[ab+16>>2]+(Df<<4)|0;Af=u[Ef>>2];Bf=u[Ef+4>>2];Ff=u[Ef+8>>2];Gf=x(x(x(x(Af*u[uf>>2])+x(Bf*u[uf+4>>2]))+x(Ff*u[uf+8>>2]))+u[uf+48>>2]);Hf=x(x(x(x(Af*u[uf+16>>2])+x(Bf*u[uf+20>>2]))+x(Ff*u[uf+24>>2]))+u[uf+52>>2]);Bf=x(x(x(x(Af*u[uf+32>>2])+x(Bf*u[uf+36>>2]))+x(Ff*u[uf+40>>2]))+u[uf+56>>2]);Af=x(x(x(Gf*u[vf>>2])+x(Hf*u[vf+4>>2]))+x(Bf*u[vf+8>>2]));if(!!(Af<u[wf>>2])){u[wf>>2]=Af;q[yf+12>>2]=0;u[yf+8>>2]=Bf;u[yf+4>>2]=Hf;u[yf>>2]=Gf;}if(!!(Af>u[xf>>2])){u[xf>>2]=Af;q[zf+12>>2]=0;u[zf+8>>2]=Bf;u[zf+4>>2]=Hf;u[zf>>2]=Gf;}Df=Df+1|0;if((If|0)!=(Df|0)){continue}break}Df=q[xf>>2];Af=u[xf>>2];}Bf=u[wf>>2];if(Bf>Af){q[wf>>2]=Df;u[xf>>2]=Bf;ab=q[yf+12>>2];q[Cf+8>>2]=q[yf+8>>2];q[Cf+12>>2]=ab;ab=q[yf+4>>2];q[Cf>>2]=q[yf>>2];q[Cf+4>>2]=ab;ab=q[zf+12>>2];q[yf+8>>2]=q[zf+8>>2];q[yf+12>>2]=ab;ab=q[zf+4>>2];q[yf>>2]=q[zf>>2];q[yf+4>>2]=ab;ab=q[Cf+12>>2];q[zf+8>>2]=q[Cf+8>>2];q[zf+12>>2]=ab;ab=q[Cf+4>>2];q[zf>>2]=q[Cf>>2];q[zf+4>>2]=ab;}}function Hb(ab,uf){ab=ab|0;uf=uf|0;var vf=0;vf=P-16|0;P=vf;q[vf+12>>2]=ab;q[vf+8>>2]=uf;ab=q[vf+12>>2];n[q[q[ab>>2]+8>>2]](ab,q[vf+8>>2]);P=vf+16|0;}function Ib(ab){ab=ab|0;var uf=0;uf=P-16|0;q[uf+12>>2]=ab;return q[uf+12>>2]}function Jb(ab,wf,xf,yf,zf){return x(x(1))}function Kb(ab,wf,xf,yf,zf){var Jf=x(0),Kf=x(0),Lf=x(0),Mf=x(0),Nf=x(0),Of=0,Pf=x(0),Qf=x(0),Rf=x(0),Sf=x(0),Tf=x(0),Uf=x(0),Vf=x(0),Wf=x(0),Xf=x(0),Yf=x(0),Zf=x(0),_f=x(0),$f=x(0),ag=x(0),bg=x(0),cg=x(0),dg=x(0),eg=x(0),fg=x(0);Of=r[zf+16|0]&-16;o[zf+16|0]=Of;dg=u[yf>>2];Qf=u[wf>>2];Vf=x(dg-Qf);Pf=u[ab>>2];Jf=x(Pf-Qf);eg=u[yf+4>>2];Rf=u[wf+4>>2];Wf=x(eg-Rf);Mf=u[ab+4>>2];Kf=x(Mf-Rf);fg=u[yf+8>>2];Sf=u[wf+8>>2];Xf=x(fg-Sf);Tf=u[ab+8>>2];Lf=x(Tf-Sf);Nf=x(x(x(Vf*Jf)+x(Wf*Kf))+x(Xf*Lf));ab=zf;$f=u[xf>>2];Yf=x($f-Qf);ag=u[xf+4>>2];Zf=x(ag-Rf);bg=u[xf+8>>2];_f=x(bg-Sf);Kf=x(x(x(Yf*Jf)+x(Zf*Kf))+x(_f*Lf));a:{if(!(Kf<=x(0)^1|Nf<=x(0)^1)){xf=q[wf+4>>2];q[zf>>2]=q[wf>>2];q[zf+4>>2]=xf;xf=q[wf+12>>2];q[zf+8>>2]=q[wf+8>>2];q[zf+12>>2]=xf;o[zf+16|0]=Of|1;Kf=x(0);Jf=x(0);Lf=x(1);break a}Jf=x(Pf-$f);Lf=x(Mf-ag);Uf=x(Tf-bg);cg=x(x(x(Vf*Jf)+x(Wf*Lf))+x(Xf*Uf));Lf=x(x(x(Yf*Jf)+x(Zf*Lf))+x(_f*Uf));if(!(Lf>=x(0)^1|cg<=Lf^1)){wf=q[xf+4>>2];q[zf>>2]=q[xf>>2];q[zf+4>>2]=wf;wf=q[xf+12>>2];q[zf+8>>2]=q[xf+8>>2];q[zf+12>>2]=wf;o[zf+16|0]=Of|2;Kf=x(1);Jf=x(0);Lf=x(0);break a}Uf=x(x(Kf*cg)-x(Lf*Nf));b:{if(Lf<=x(0)^1|Kf>=x(0)^1){break b}Jf=x(0);if(!(Uf<=x(0))){break b}q[zf+12>>2]=0;o[zf+16|0]=Of|3;Kf=x(Kf/x(Kf-Lf));u[zf+8>>2]=Sf+x(_f*Kf);u[zf+4>>2]=Rf+x(Zf*Kf);u[zf>>2]=Qf+x(Yf*Kf);Lf=x(x(1)-Kf);break a}Jf=x(Pf-dg);Mf=x(Mf-eg);Tf=x(Tf-fg);Pf=x(x(x(Yf*Jf)+x(Zf*Mf))+x(_f*Tf));Jf=x(x(x(Vf*Jf)+x(Wf*Mf))+x(Xf*Tf));if(!(Jf>=x(0)^1|Pf<=Jf^1)){wf=q[yf+4>>2];q[zf>>2]=q[yf>>2];q[zf+4>>2]=wf;wf=q[yf+12>>2];q[zf+8>>2]=q[yf+8>>2];q[zf+12>>2]=wf;o[zf+16|0]=Of|4;Jf=x(1);Kf=x(0);Lf=x(0);break a}Mf=x(x(Pf*Nf)-x(Kf*Jf));c:{if(Jf<=x(0)^1|Nf>=x(0)^1){break c}Kf=x(0);if(!(Mf<=x(0))){break c}q[zf+12>>2]=0;o[zf+16|0]=Of|5;Jf=x(Nf/x(Nf-Jf));u[zf+8>>2]=Sf+x(Xf*Jf);u[zf+4>>2]=Rf+x(Wf*Jf);u[zf>>2]=Qf+x(Vf*Jf);Lf=x(x(1)-Jf);break a}d:{Nf=x(x(Lf*Jf)-x(Pf*cg));if(!(Nf<=x(0))){break d}Kf=x(cg-Lf);if(!(Kf>=x(0))){break d}Jf=x(Pf-Jf);if(!(Jf>=x(0))){break d}q[zf+12>>2]=0;o[zf+16|0]=Of|6;Jf=x(Kf/x(Kf+Jf));u[zf+8>>2]=bg+x(x(fg-bg)*Jf);u[zf+4>>2]=ag+x(x(eg-ag)*Jf);u[zf>>2]=$f+x(x(dg-$f)*Jf);Kf=x(x(1)-Jf);Lf=x(0);break a}q[zf+12>>2]=0;o[zf+16|0]=Of|7;Kf=x(x(1)/x(Uf+x(Nf+Mf)));Jf=x(Uf*Kf);Kf=x(Mf*Kf);u[zf+8>>2]=x(Xf*Jf)+x(Sf+x(_f*Kf));u[zf+4>>2]=x(Wf*Jf)+x(Rf+x(Zf*Kf));u[zf>>2]=x(Vf*Jf)+x(Qf+x(Yf*Kf));Lf=x(x(x(1)-Kf)-Jf);}u[ab+20>>2]=Lf;q[zf+32>>2]=0;u[zf+28>>2]=Jf;u[zf+24>>2]=Kf;}function Lb(ab,wf,xf,yf,zf){var gg=0,hg=0,ig=x(0),jg=x(0),kg=x(0),lg=x(0),mg=x(0),ng=x(0),og=x(0),pg=x(0),qg=0,rg=x(0);gg=q[ab+18504>>2];if(gg){hg=q[gg+48>>2];if(hg){q[hg+44>>2]=q[gg+44>>2];}hg=q[gg+44>>2];if(hg){q[hg+48>>2]=q[gg+48>>2];}if(q[ab+18504>>2]==(gg|0)){q[ab+18504>>2]=q[gg+48>>2];}hg=ab+18508|0;q[hg>>2]=q[hg>>2]+ -1;q[gg+44>>2]=0;q[gg+48>>2]=q[ab+18496>>2];hg=q[ab+18496>>2];if(hg){q[hg+44>>2]=gg;}q[ab+18496>>2]=gg;hg=ab+18500|0;q[hg>>2]=q[hg>>2]+1;q[gg+28>>2]=yf;q[gg+24>>2]=xf;q[gg+20>>2]=wf;o[gg+55|0]=0;lg=u[xf+24>>2];rg=u[yf+24>>2];ig=u[wf+24>>2];mg=u[yf+20>>2];kg=u[wf+20>>2];ng=u[xf+20>>2];og=u[xf+16>>2];pg=u[yf+16>>2];jg=u[wf+16>>2];q[gg+12>>2]=0;og=x(og-jg);mg=x(mg-kg);ng=x(ng-kg);jg=x(pg-jg);kg=x(x(og*mg)-x(ng*jg));u[gg+8>>2]=kg;lg=x(lg-ig);pg=x(lg*jg);jg=x(rg-ig);ig=x(pg-x(og*jg));u[gg+4>>2]=ig;jg=x(x(ng*jg)-x(lg*mg));u[gg>>2]=jg;qg=2;a:{ig=x(E(x(x(x(jg*jg)+x(ig*ig))+x(kg*kg))));if(!(ig>x(9999999747378752e-20))){break a}hg=gg+16|0;b:{if(rd(gg,wf,xf,hg)){break b}if(rd(gg,xf,yf,hg)){break b}if(rd(gg,yf,wf,hg)){break b}u[gg+16>>2]=x(x(x(u[wf+16>>2]*u[gg>>2])+x(u[wf+20>>2]*u[gg+4>>2]))+x(u[wf+24>>2]*u[gg+8>>2]))/ig;}ig=x(x(1)/ig);u[gg>>2]=ig*u[gg>>2];u[gg+4>>2]=ig*u[gg+4>>2];u[gg+8>>2]=ig*u[gg+8>>2];if(zf){return gg}qg=3;if(!(u[hg>>2]>=x(-9999999747378752e-21))){break a}return gg}q[ab>>2]=qg;wf=q[gg+48>>2];if(wf){q[wf+44>>2]=q[gg+44>>2];}wf=q[gg+44>>2];if(wf){q[wf+48>>2]=q[gg+48>>2];}if(q[ab+18496>>2]==(gg|0)){q[ab+18496>>2]=q[gg+48>>2];}q[ab+18500>>2]=q[ab+18500>>2]+ -1;q[gg+44>>2]=0;q[gg+48>>2]=q[ab+18504>>2];wf=q[ab+18504>>2];if(wf){q[wf+44>>2]=gg;}q[ab+18504>>2]=gg;q[ab+18508>>2]=q[ab+18508>>2]+1;return 0}q[ab>>2]=5;return 0}function Mb(ab){var wf=0;q[ab+132>>2]=0;q[ab+136>>2]=0;q[ab>>2]=4464;q[ab+188>>2]=0;q[ab+192>>2]=0;q[ab+180>>2]=0;q[ab+184>>2]=1566444395;q[ab+164>>2]=1065353216;q[ab+168>>2]=1065353216;q[ab+276>>2]=0;q[ab+280>>2]=0;q[ab+268>>2]=1065353216;q[ab+272>>2]=0;q[ab+260>>2]=-1;q[ab+264>>2]=-1;q[ab+252>>2]=1;q[ab+256>>2]=0;q[ab+244>>2]=1036831949;q[ab+248>>2]=1176256512;q[ab+236>>2]=0;q[ab+240>>2]=0;q[ab+228>>2]=1056964608;q[ab+232>>2]=0;q[ab+220>>2]=1;q[ab+224>>2]=0;q[ab+212>>2]=-1;q[ab+216>>2]=-1;q[ab+204>>2]=1;q[ab+208>>2]=-1;q[ab+140>>2]=0;q[ab+144>>2]=0;q[ab+148>>2]=0;q[ab+152>>2]=0;q[ab+156>>2]=0;q[ab+160>>2]=0;q[ab+172>>2]=1065353216;q[ab+176>>2]=0;q[ab+196>>2]=0;q[ab+200>>2]=0;o[ab+300|0]=1;q[ab+304>>2]=0;q[ab+296>>2]=0;q[ab+288>>2]=0;q[ab+292>>2]=0;q[ab+8>>2]=0;q[ab+12>>2]=0;q[ab+4>>2]=1065353216;q[ab+16>>2]=0;q[ab+20>>2]=0;q[ab+28>>2]=0;q[ab+32>>2]=0;q[ab+24>>2]=1065353216;q[ab+36>>2]=0;q[ab+40>>2]=0;q[ab+48>>2]=0;q[ab+52>>2]=0;q[ab+44>>2]=1065353216;q[ab+56>>2]=0;q[ab+60>>2]=0;q[ab+72>>2]=0;q[ab+76>>2]=0;wf=ab- -64|0;q[wf>>2]=0;q[wf+4>>2]=1065353216;q[ab+80>>2]=0;q[ab+84>>2]=0;q[ab+88>>2]=1065353216;q[ab+100>>2]=0;q[ab+104>>2]=0;q[ab+92>>2]=0;q[ab+96>>2]=0;q[ab+128>>2]=0;q[ab+108>>2]=1065353216;q[ab+120>>2]=0;q[ab+124>>2]=0;q[ab+112>>2]=0;q[ab+116>>2]=0;}function Nb(ab){q[ab>>2]=1025;q[ab+120>>2]=0;q[ab+124>>2]=0;q[ab+128>>2]=0;q[ab+132>>2]=0;q[ab+136>>2]=0;q[ab+140>>2]=0;q[ab+144>>2]=0;q[ab+148>>2]=0;q[ab+152>>2]=0;q[ab+156>>2]=0;q[ab+160>>2]=0;q[ab+164>>2]=0;q[ab+168>>2]=0;q[ab+328>>2]=0;q[ab+332>>2]=0;q[ab+336>>2]=0;q[ab+340>>2]=0;q[ab+344>>2]=0;q[ab+348>>2]=0;q[ab+352>>2]=0;q[ab+356>>2]=0;q[ab+360>>2]=0;q[ab+364>>2]=0;q[ab+368>>2]=0;q[ab+372>>2]=0;q[ab+376>>2]=0;q[ab+536>>2]=0;q[ab+540>>2]=0;q[ab+544>>2]=0;q[ab+548>>2]=0;q[ab+552>>2]=0;q[ab+556>>2]=0;q[ab+560>>2]=0;q[ab+564>>2]=0;q[ab+568>>2]=0;q[ab+572>>2]=0;q[ab+576>>2]=0;q[ab+580>>2]=0;q[ab+584>>2]=0;q[ab+792>>2]=0;q[ab+784>>2]=0;q[ab+788>>2]=0;q[ab+776>>2]=0;q[ab+780>>2]=0;q[ab+768>>2]=0;q[ab+772>>2]=0;q[ab+760>>2]=0;q[ab+764>>2]=0;q[ab+752>>2]=0;q[ab+756>>2]=0;q[ab+744>>2]=0;q[ab+748>>2]=0;q[ab+836>>2]=0;q[ab+840>>2]=0;q[ab+864>>2]=0;q[ab+844>>2]=0;}function Ob(ab,xf,yf){var zf=x(0),sg=x(0),tg=x(0),ug=x(0),vg=x(0),wg=x(0),xg=x(0),yg=x(0),zg=x(0),Ag=x(0),Bg=x(0),Cg=x(0),Dg=x(0),Eg=x(0),Fg=x(0),Gg=x(0),Hg=x(0),Ig=x(0),Jg=x(0),Kg=x(0),Lg=x(0),Mg=x(0),Ng=x(0),Og=x(0);Ng=u[xf+52>>2];Og=u[xf+56>>2];Ag=u[ab+96>>2];Bg=u[ab+100>>2];Cg=u[ab+104>>2];zf=u[xf+20>>2];sg=u[xf+24>>2];Dg=u[ab- -64>>2];Eg=u[ab+80>>2];Fg=u[ab+52>>2];Gg=u[ab+68>>2];Hg=u[ab+84>>2];Ig=u[ab+56>>2];tg=u[xf+36>>2];Jg=u[ab+72>>2];ug=u[xf+40>>2];Kg=u[ab+88>>2];Mg=u[xf+48>>2];vg=u[xf+8>>2];wg=u[xf>>2];xg=u[xf+4>>2];yg=u[xf+16>>2];Lg=u[ab+48>>2];zg=u[xf+32>>2];q[ab+1124>>2]=0;q[ab+1108>>2]=0;q[ab+1092>>2]=0;q[ab+1076>>2]=0;u[ab+1104>>2]=x(x(Ig*zg)+x(Jg*tg))+x(Kg*ug);u[ab+1100>>2]=x(x(Fg*zg)+x(Gg*tg))+x(Hg*ug);u[ab+1096>>2]=x(x(Lg*zg)+x(Dg*tg))+x(Eg*ug);u[ab+1088>>2]=x(x(Ig*yg)+x(Jg*zf))+x(Kg*sg);u[ab+1084>>2]=x(x(Fg*yg)+x(Gg*zf))+x(Hg*sg);u[ab+1080>>2]=x(x(Lg*yg)+x(Dg*zf))+x(Eg*sg);u[ab+1072>>2]=x(x(wg*Ig)+x(xg*Jg))+x(vg*Kg);u[ab+1068>>2]=x(x(wg*Fg)+x(xg*Gg))+x(vg*Hg);u[ab+1064>>2]=x(x(Lg*wg)+x(Dg*xg))+x(Eg*vg);u[ab+1120>>2]=Og+x(x(x(zg*Ag)+x(tg*Bg))+x(ug*Cg));u[ab+1116>>2]=Ng+x(x(x(yg*Ag)+x(zf*Bg))+x(sg*Cg));u[ab+1112>>2]=Mg+x(x(x(wg*Ag)+x(xg*Bg))+x(vg*Cg));Ng=u[yf+52>>2];Og=u[yf+56>>2];Ag=u[ab+160>>2];Bg=u[ab+164>>2];Cg=u[ab+168>>2];zf=u[yf+20>>2];sg=u[yf+24>>2];Dg=u[ab+128>>2];Eg=u[ab+144>>2];Fg=u[ab+116>>2];Gg=u[ab+132>>2];Hg=u[ab+148>>2];Ig=u[ab+120>>2];Jg=u[ab+136>>2];tg=u[yf+36>>2];Kg=u[ab+152>>2];ug=u[yf+40>>2];Mg=u[yf+48>>2];vg=u[yf+8>>2];wg=u[yf>>2];xg=u[yf+4>>2];yg=u[yf+16>>2];Lg=u[ab+112>>2];zg=u[yf+32>>2];q[ab+1188>>2]=0;q[ab+1172>>2]=0;q[ab+1156>>2]=0;q[ab+1140>>2]=0;u[ab+1168>>2]=x(x(Ig*zg)+x(Jg*tg))+x(Kg*ug);u[ab+1164>>2]=x(x(Fg*zg)+x(Gg*tg))+x(Hg*ug);u[ab+1160>>2]=x(x(Lg*zg)+x(Dg*tg))+x(Eg*ug);u[ab+1152>>2]=x(x(Ig*yg)+x(Jg*zf))+x(Kg*sg);u[ab+1148>>2]=x(x(Fg*yg)+x(Gg*zf))+x(Hg*sg);u[ab+1144>>2]=x(x(Lg*yg)+x(Dg*zf))+x(Eg*sg);u[ab+1136>>2]=x(x(wg*Ig)+x(xg*Jg))+x(vg*Kg);u[ab+1132>>2]=x(x(wg*Fg)+x(xg*Gg))+x(vg*Hg);u[ab+1128>>2]=x(x(Lg*wg)+x(Dg*xg))+x(Eg*vg);u[ab+1184>>2]=Og+x(x(x(zg*Ag)+x(tg*Bg))+x(ug*Cg));u[ab+1180>>2]=Ng+x(x(x(yg*Ag)+x(zf*Bg))+x(sg*Cg));u[ab+1176>>2]=Mg+x(x(x(wg*Ag)+x(xg*Bg))+x(vg*Cg));Mm(ab);Nm(ab);if(r[ab+1301|0]){sg=u[q[ab+28>>2]+404>>2];zf=u[q[ab+32>>2]+404>>2];o[ab+1280|0]=sg<x(1.1920928955078125e-7)|zf<x(1.1920928955078125e-7);Mg=zf;zf=x(sg+zf);zf=zf>x(0)?x(Mg/zf):x(.5);u[ab+1272>>2]=zf;u[ab+1276>>2]=x(1)-zf;}}function Pb(ab){var xf=0,yf=x(0);xf=P-16|0;P=xf;q[xf+12>>2]=ab;yf=Ld(q[xf+12>>2]);ab=P-16|0;u[ab+12>>2]=yf;P=xf+16|0;return x(E(u[ab+12>>2]))}function Qb(ab,Pg,Qg,Rg,Sg){var Tg=0;Tg=P-32|0;P=Tg;q[Tg+28>>2]=ab;q[Tg+24>>2]=Pg;q[Tg+20>>2]=Qg;q[Tg+16>>2]=Rg;q[Tg+12>>2]=Sg;Td(q[Tg+28>>2],q[Tg+24>>2],q[Tg+20>>2],q[Tg+16>>2],q[Tg+12>>2]);P=Tg+32|0;}function Rb(ab,Pg){var Qg=0,Rg=0;Qg=P-16|0;P=Qg;q[Qg+12>>2]=ab;q[Qg+8>>2]=Pg;ab=q[Qg+12>>2];Tf(ab,q[Qg+8>>2]);Pg=q[Qg+8>>2];Rg=q[Pg+52>>2];q[ab+48>>2]=q[Pg+48>>2];q[ab+52>>2]=Rg;Rg=q[Pg+60>>2];q[ab+56>>2]=q[Pg+56>>2];q[ab+60>>2]=Rg;P=Qg+16|0;}function Sb(ab){ab=ab|0;var Pg=0;Pg=P-16|0;P=Pg;q[Pg+12>>2]=ab;ab=q[Pg+12>>2];if(ab){_a(ab);aa(ab);}P=Pg+16|0;}function Tb(ab){ab=ab|0;var Sg=0;Sg=P-16|0;P=Sg;q[Sg+12>>2]=ab;ab=P-16|0;q[ab+12>>2]=q[Sg+12>>2];P=Sg+16|0;return q[q[ab+12>>2]+4>>2]}function Ub(ab,Ug){ab=ab|0;Ug=Ug|0;var Vg=x(0),Wg=x(0),Xg=x(0);Vg=u[Ug>>2];Wg=u[Ug+4>>2];Xg=u[Ug+8>>2];q[ab+28>>2]=0;u[ab+24>>2]=y(Xg);u[ab+20>>2]=y(Wg);u[ab+16>>2]=y(Vg);}function Vb(ab){ab=ab|0;var Ug=0;q[ab>>2]=13280;Ug=q[ab+56>>2];if(Ug){n[q[q[Ug>>2]>>2]](Ug)|0;Ug=q[ab+56>>2];if(Ug){q[6658]=q[6658]+1;n[q[5256]](Ug);}}return ab|0}function Wb(ab){return 0}function Xb(ab){ab=ab|0;var Yg=0;Yg=P-16|0;P=Yg;q[Yg+12>>2]=ab;ab=P-16|0;q[ab+12>>2]=q[Yg+12>>2];P=Yg+16|0;return q[q[ab+12>>2]+204>>2]}function Yb(ab){ab=ab|0;var Zg=0;Zg=P-16|0;P=Zg;q[Zg+12>>2]=ab;ab=P-16|0;q[ab+12>>2]=q[Zg+12>>2];P=Zg+16|0;return q[ab+12>>2]+4|0}function Zb(ab,_g,$g){var ah=0,bh=0,ch=0,dh=0,eh=0,fh=0,gh=0,hh=0,ih=0,jh=x(0),kh=x(0),lh=x(0),mh=x(0),nh=x(0),oh=x(0),ph=0;gh=P-256|0;P=gh;a:{if(!ab){break a}jh=u[_g+24>>2];kh=u[_g+20>>2];lh=u[_g+16>>2];mh=u[_g+8>>2];nh=u[_g+4>>2];oh=u[_g>>2];q[gh>>2]=ab;bh=64;ah=gh;_g=1;while(1){b:{c:{d:{ab=_g+ -1|0;hh=ab<<2;ch=q[hh+ah>>2];e:{if(u[ch>>2]<=lh^1|u[ch+16>>2]>=oh^1|(u[ch+4>>2]<=kh^1|u[ch+20>>2]>=nh^1)){break e}if(u[ch+8>>2]<=jh^1|u[ch+24>>2]>=mh^1){break e}if(q[ch+40>>2]){ph=q[ch+36>>2];if((ab|0)!=(bh|0)){break d}eh=bh?bh<<1:1;if((_g|0)>(eh|0)){break d}ab=0;dh=0;if(eh){q[6657]=q[6657]+1;dh=n[q[5255]](eh<<2,16)|0;}f:{g:{if((bh|0)>=1){while(1){ih=ab<<2;q[ih+dh>>2]=q[ah+ih>>2];ab=ab+1|0;if((bh|0)!=(ab|0)){continue}break}if(fh){break g}break f}if(!ah|!fh){break f}}if(ah){q[6658]=q[6658]+1;n[q[5256]](ah);}}fh=1;break c}n[q[q[$g>>2]+12>>2]]($g,ch);}break b}eh=bh;dh=ah;}q[dh+hh>>2]=ph;ch=q[ch+40>>2];h:{if((_g|0)!=(eh|0)){bh=eh;ah=dh;break h}bh=_g?_g<<1:1;if((_g|0)>=(bh|0)){bh=_g;ah=dh;break h}ab=0;ah=0;if(bh){q[6657]=q[6657]+1;ah=n[q[5255]](bh<<2,16)|0;}i:{j:{if((_g|0)>=1){while(1){eh=ab<<2;q[eh+ah>>2]=q[dh+eh>>2];ab=ab+1|0;if((_g|0)!=(ab|0)){continue}break}if(fh){break j}break i}if(!dh|!fh){break i}}if(dh){q[6658]=q[6658]+1;n[q[5256]](dh);}}fh=1;}q[(_g<<2)+ah>>2]=ch;ab=_g+1|0;}_g=ab;if((_g|0)>0){continue}break}if(!ah|!fh){break a}if(ah){q[6658]=q[6658]+1;n[q[5256]](ah);}}P=gh+256|0;}function _b(ab){ab=ab|0;Vb(ab);if(ab){q[6658]=q[6658]+1;n[q[5256]](ab);}}function $b(ab){ab=ab|0;var _g=0;_g=P-16|0;P=_g;q[_g+12>>2]=ab;ab=P-16|0;q[ab+12>>2]=q[_g+12>>2];P=_g+16|0;return (q[q[ab+12>>2]+204>>2]&3)!=0|0}function ac(ab){ab=ab|0;var $g=0;$g=P-16|0;P=$g;q[$g+12>>2]=ab;ab=P-16|0;q[ab+12>>2]=q[$g+12>>2];P=$g+16|0;return (q[q[ab+12>>2]+204>>2]&1)!=0|0}function bc(ab){ab=ab|0;var qh=0;qh=P-16|0;P=qh;q[qh+12>>2]=ab;ab=P-16|0;q[ab+12>>2]=q[qh+12>>2];P=qh+16|0;return (q[q[ab+12>>2]+204>>2]&2)!=0|0}function cc(ab){ab=ab|0;return q[ab+16>>2]}function dc(ab,rh){ab=ab|0;rh=rh|0;var sh=0,th=0,uh=0,vh=0,wh=0;sh=q[ab+12>>2];if(!(!sh|!r[ab+8|0])){th=q[rh+4>>2];a:{if((th|0)!=q[rh+8>>2]){break a}uh=th?th<<1:1;if((th|0)>=(uh|0)){break a}if(uh){q[6657]=q[6657]+1;vh=n[q[5255]](uh<<2,16)|0;th=q[rh+4>>2];}if((th|0)>=1){sh=0;while(1){wh=sh<<2;q[wh+vh>>2]=q[q[rh+12>>2]+wh>>2];sh=sh+1|0;if((sh|0)!=(th|0)){continue}break}}sh=q[rh+12>>2];if(sh){if(r[rh+16|0]){if(sh){q[6658]=q[6658]+1;n[q[5256]](sh);}th=q[rh+4>>2];}q[rh+12>>2]=0;}q[rh+12>>2]=vh;o[rh+16|0]=1;q[rh+8>>2]=uh;sh=q[ab+12>>2];}q[q[rh+12>>2]+(th<<2)>>2]=sh;q[rh+4>>2]=th+1;}}function ec(ab){ab=ab|0;var rh=0;rh=P-16|0;P=rh;q[rh+12>>2]=ab;ab=uj(q[rh+12>>2])&1;P=rh+16|0;return ab|0}function fc(){if(!(!!(r[24144]!=0)|o[24144]&1)){q[5954]=1062847606;q[5955]=0;q[5952]=1042701022;q[5953]=1056964440;q[5950]=1062847606;q[5951]=0;q[5948]=-1093024784;q[5949]=1050556081;q[5946]=1062847606;q[5947]=0;q[5944]=-1093024784;q[5945]=-1096927567;q[5942]=1062847606;q[5943]=0;q[5940]=1042701022;q[5941]=-1090519208;q[5938]=1062847572;q[5939]=0;q[5936]=1057396286;q[5937]=0;q[5934]=1057396386;q[5935]=0;q[5932]=1060121912;q[5933]=1056964507;q[5930]=1057396420;q[5931]=0;q[5928]=-1098475836;q[5929]=1062148969;q[5926]=1057396386;q[5927]=0;q[5924]=-1084636143;q[5925]=0;q[5922]=1057396420;q[5923]=0;q[5920]=-1098475836;q[5921]=-1085334679;q[5918]=1057396386;q[5919]=0;q[5916]=1060121912;q[5917]=-1090519141;q[5914]=-2147483648;q[5915]=0;q[5912]=1058437413;q[5913]=1062149053;q[5910]=-2147483648;q[5911]=0;q[5908]=-2147483648;q[5909]=1065353216;q[5906]=-2147483648;q[5907]=0;q[5904]=-1089046235;q[5905]=1062149053;q[5902]=-2147483648;q[5903]=0;q[5900]=-1082951543;q[5901]=1050556148;q[5898]=-2147483648;q[5899]=0;q[5896]=-1082951543;q[5897]=-1096927500;q[5894]=0;q[5895]=0;q[5892]=-1089046235;q[5893]=-1085334595;q[5890]=0;q[5891]=0;q[5888]=0;q[5889]=-1082130432;q[5886]=0;q[5887]=0;q[5884]=1058437413;q[5885]=-1085334595;q[5882]=0;q[5883]=0;q[5880]=1064532105;q[5881]=-1096927500;q[5878]=0;q[5879]=0;q[5876]=1064532105;q[5877]=1050556148;q[5874]=-1090087228;q[5875]=0;q[5872]=1049007812;q[5873]=1062148969;q[5870]=-1090087262;q[5871]=0;q[5868]=-1087361736;q[5869]=1056964507;q[5866]=-1084636042;q[5867]=0;q[5864]=-1104782626;q[5865]=1056964440;q[5862]=-1090087262;q[5863]=0;q[5860]=-1087361736;q[5861]=-1090519141;q[5858]=-1084636076;q[5859]=0;q[5856]=-1090087362;q[5857]=-2147483648;q[5854]=-1090087262;q[5855]=0;q[5852]=1062847505;q[5853]=-2147483648;q[5850]=-1084636042;q[5851]=0;q[5848]=1054458864;q[5849]=1050556081;q[5846]=-1090087228;q[5847]=0;q[5844]=1049007812;q[5845]=-1085334679;q[5842]=-1084636042;q[5843]=0;q[5840]=-1104782626;q[5841]=-1090519208;q[5838]=-1084636042;q[5839]=0;q[5836]=1054458864;q[5837]=-1096927567;q[5834]=1065353216;q[5835]=0;q[5832]=-2147483648;q[5833]=0;q[5830]=1055193471;q[5831]=0;q[5828]=1063581978;q[5829]=0;q[5826]=1055193572;q[5827]=0;q[5824]=1049461434;q[5825]=1062847522;q[5822]=1055193572;q[5823]=0;q[5820]=-1086767520;q[5821]=1057396202;q[5818]=1055193572;q[5819]=0;q[5816]=-1086767520;q[5817]=-1090087446;q[5814]=1055193605;q[5815]=0;q[5812]=1049461434;q[5813]=-1084636126;q[5810]=-1092290076;q[5811]=0;q[5808]=1060716128;q[5809]=1057396202;q[5806]=-1092290043;q[5807]=0;q[5804]=-1098022214;q[5805]=1062847522;q[5802]=-1092290177;q[5803]=0;q[5800]=-1083901670;q[5801]=-2147483648;q[5798]=-1092290076;q[5799]=0;q[5796]=-1098022214;q[5797]=-1084636126;q[5794]=-1092290076;q[5795]=0;q[5792]=1060716128;q[5793]=-1090087446;q[5790]=-1082130432;q[5791]=0;q[5788]=0;q[5789]=-2147483648;q[6036]=0;q[6036]=q[6036]|1;}}function gc(ab,xh){ab=ab|0;xh=xh|0;var yh=0;yh=P-16|0;P=yh;q[yh+12>>2]=ab;o[yh+11|0]=xh;nc(q[yh+12>>2],o[yh+11|0]&1);P=yh+16|0;}function hc(ab){o[ab+356|0]=1;q[ab>>2]=0;o[ab+312|0]=0;q[ab+292>>2]=1566444395;q[ab+296>>2]=1566444395;q[ab+336>>2]=0;q[ab+340>>2]=0;q[ab+300>>2]=1566444395;q[ab+304>>2]=0;q[ab+344>>2]=0;q[ab+348>>2]=0;o[ab+352|0]=0;o[ab+332|0]=r[ab+332|0]&240;}function ic(ab){ab=ab|0;var xh=0;xh=P-16|0;P=xh;q[xh+12>>2]=ab;nc(q[xh+12>>2],0);P=xh+16|0;}function jc(ab,zh){ab=ab|0;zh=zh|0;var Ah=0;Ah=P-16|0;P=Ah;q[Ah+12>>2]=ab;q[Ah+8>>2]=zh;q[q[Ah+12>>2]+220>>2]=q[Ah+8>>2];P=Ah+16|0;}function kc(ab,zh){ab=ab|0;zh=zh|0;var Bh=0;Bh=P-16|0;P=Bh;q[Bh+12>>2]=ab;q[Bh+8>>2]=zh;ab=q[Bh+8>>2];zh=q[Bh+12>>2];if((q[zh+220>>2]&-2)!=4){q[zh+220>>2]=ab;}P=Bh+16|0;}function lc(ab){ab=ab|0;var zh=0;zh=P-16|0;P=zh;q[zh+12>>2]=ab;ab=P-16|0;q[ab+12>>2]=q[zh+12>>2];P=zh+16|0;return q[q[ab+12>>2]+220>>2]}function mc(ab){ab=ab|0;var Ch=0;Ch=P-16|0;P=Ch;q[Ch+12>>2]=ab;ab=P-16|0;q[ab+12>>2]=q[Ch+12>>2];P=Ch+16|0;return q[q[ab+12>>2]+192>>2]}function nc(ab,Dh){if(!(r[ab+204|0]&3?!Dh:0)){if((q[ab+220>>2]&-2)!=4){q[ab+220>>2]=1;}q[ab+224>>2]=0;}}function oc(ab,Dh,Eh){ab=ab|0;Dh=Dh|0;Eh=Eh|0;var Fh=0;Fh=P-16|0;P=Fh;q[Fh+12>>2]=ab;q[Fh+8>>2]=Dh;q[Fh+4>>2]=Eh;rk(q[Fh+12>>2],q[Fh+8>>2],q[Fh+4>>2]);P=Fh+16|0;}function pc(ab){var Dh=x(0);Dh=ea(x(u[ab>>2]-u[ab+4>>2]),x(6.2831854820251465));if(!!(Dh<x(-3.1415927410125732))){return x(Dh+x(6.2831854820251465))}return Dh>x(3.1415927410125732)^1?Dh:x(Dh+x(-6.2831854820251465))}function qc(ab){var Eh=x(0);Eh=ea(x(u[ab>>2]+u[ab+4>>2]),x(6.2831854820251465));if(!!(Eh<x(-3.1415927410125732))){return x(Eh+x(6.2831854820251465))}return Eh>x(3.1415927410125732)^1?Eh:x(Eh+x(-6.2831854820251465))}function rc(ab,Gh,Hh,Ih,Jh,Kh,Lh,Mh,Nh,Oh){var Ph=x(0),Qh=x(0),Rh=x(0),Sh=x(0),Th=x(0),Uh=x(0),Vh=x(0),Wh=x(0),Xh=x(0),Yh=x(0),Zh=x(0),_h=x(0),$h=0,ai=x(0),bi=x(0),ci=x(0),di=x(0),ei=x(0),fi=x(0),gi=x(0);$h=q[Kh+4>>2];q[ab>>2]=q[Kh>>2];q[ab+4>>2]=$h;$h=q[Kh+12>>2];q[ab+8>>2]=q[Kh+8>>2];q[ab+12>>2]=$h;_h=u[Gh+24>>2];Wh=u[Gh+20>>2];Sh=u[Gh+40>>2];Ph=u[Gh+36>>2];Xh=u[Gh+8>>2];Yh=u[Gh>>2];ai=u[Gh+4>>2];bi=u[Gh+16>>2];Qh=u[Gh+32>>2];Uh=u[Ih+4>>2];Th=u[Ih+8>>2];Zh=u[Ih>>2];q[ab+28>>2]=0;ci=Qh;Qh=u[ab+8>>2];Rh=u[ab+4>>2];Vh=x(x(Uh*Qh)-x(Th*Rh));di=Ph;Ph=Th;Th=u[ab>>2];Ph=x(x(Ph*Th)-x(Qh*Zh));Uh=x(x(Rh*Zh)-x(Uh*Th));Zh=x(x(x(ci*Vh)+x(di*Ph))+x(Sh*Uh));u[ab+24>>2]=Zh;_h=x(x(x(Vh*bi)+x(Ph*Wh))+x(Uh*_h));u[ab+20>>2]=_h;Uh=x(x(x(Vh*Yh)+x(ai*Ph))+x(Uh*Xh));u[ab+16>>2]=Uh;Xh=u[Hh+24>>2];Yh=u[Hh+20>>2];ai=u[Hh+40>>2];bi=u[Hh+36>>2];di=u[Hh+8>>2];ei=u[Hh>>2];fi=u[Hh+4>>2];gi=u[Hh+16>>2];Sh=u[Hh+32>>2];Vh=u[Jh+4>>2];Ph=u[Jh>>2];Wh=u[Jh+8>>2];q[ab+44>>2]=0;ci=Sh;Sh=x(x(Rh*Wh)-x(Qh*Vh));Qh=x(x(Qh*Ph)-x(Th*Wh));Rh=x(x(Th*Vh)-x(Rh*Ph));Th=x(x(x(ci*Sh)+x(bi*Qh))+x(ai*Rh));u[ab+40>>2]=Th;Vh=x(x(x(Sh*gi)+x(Qh*Yh))+x(Rh*Xh));u[ab+36>>2]=Vh;Qh=x(x(x(ei*Sh)+x(fi*Qh))+x(Rh*di));u[ab+32>>2]=Qh;Rh=u[Lh+8>>2];Ph=u[Lh+4>>2];Wh=u[Lh>>2];q[ab+60>>2]=0;Wh=x(Wh*Uh);u[ab+48>>2]=Wh;Ph=x(Ph*_h);u[ab+52>>2]=Ph;Rh=x(Rh*Zh);u[ab+56>>2]=Rh;Sh=u[Nh+8>>2];Xh=u[Nh+4>>2];Yh=u[Nh>>2];q[ab+76>>2]=0;Yh=x(Yh*Qh);u[ab+64>>2]=Yh;Xh=x(Xh*Vh);u[ab+68>>2]=Xh;Sh=x(Sh*Th);u[ab+72>>2]=Sh;u[ab+80>>2]=x(x(x(x(x(Uh*Wh)+x(_h*Ph))+x(Zh*Rh))+Mh)+Oh)+x(x(x(Qh*Yh)+x(Vh*Xh))+x(Th*Sh));}function sc(ab,Gh){var Hh=x(0),Ih=0,Jh=x(0),Kh=x(0),Lh=x(0);Hh=u[ab+404>>2];if(Hh!=x(0)){Jh=u[Gh>>2];Kh=u[Gh+4>>2];Lh=u[Gh+8>>2];q[ab+436>>2]=0;Hh=x(x(1)/Hh);u[ab+432>>2]=Lh*Hh;u[ab+428>>2]=Hh*Kh;u[ab+424>>2]=Hh*Jh;}Ih=q[Gh+4>>2];q[ab+440>>2]=q[Gh>>2];q[ab+444>>2]=Ih;Ih=q[Gh+12>>2];q[ab+448>>2]=q[Gh+8>>2];q[ab+452>>2]=Ih;}function tc(ab,Gh,Mh){Xa(ab+4|0,ab+372|0,ab+388|0,Gh,Mh);}function uc(ab,Gh,Mh,Nh,Oh,hi,ii,ji,ki,li){var mi=0;mi=P-48|0;P=mi;q[mi+40>>2]=ab;q[mi+36>>2]=Gh;q[mi+32>>2]=Mh;q[mi+28>>2]=Nh;q[mi+24>>2]=Oh;q[mi+20>>2]=hi;q[mi+16>>2]=ii;q[mi+12>>2]=ji;q[mi+8>>2]=ki;q[mi+4>>2]=li;ab=q[mi+40>>2];q[mi+44>>2]=ab;Mh=ab+48|0;Gh=ab;while(1){q[(P-16|0)+12>>2]=Gh;Nh=Gh+16|0;Gh=Nh;if((Mh|0)!=(Gh|0)){continue}break}zb(ab,q[mi+36>>2],q[mi+32>>2],q[mi+28>>2],q[mi+24>>2],q[mi+20>>2],q[mi+16>>2],q[mi+12>>2],q[mi+8>>2],q[mi+4>>2]);P=mi+48|0;}function vc(ab,Gh){var Mh=0;Mh=P-16|0;q[Mh+12>>2]=ab;q[Mh+8>>2]=Gh;ab=q[Mh+12>>2];u[ab>>2]=u[ab>>2]-u[q[Mh+8>>2]>>2];u[ab+4>>2]=u[ab+4>>2]-u[q[Mh+8>>2]+4>>2];u[ab+8>>2]=u[ab+8>>2]-u[q[Mh+8>>2]+8>>2];}function wc(ab){var Gh=0;Gh=P-16|0;P=Gh;q[Gh+12>>2]=ab;ab=q[Gh+12>>2];u[Gh+8>>2]=Pb(ab);ab=zp(ab,Gh+8|0);P=Gh+16|0;return ab}function xc(ab,Nh,Oh){var hi=0;hi=P-32|0;P=hi;q[hi+28>>2]=Nh;q[hi+24>>2]=Oh;Nh=q[hi+28>>2];u[hi+20>>2]=x(u[Nh+4>>2]*u[q[hi+24>>2]+8>>2])-x(u[Nh+8>>2]*u[q[hi+24>>2]+4>>2]);u[hi+16>>2]=x(u[Nh+8>>2]*u[q[hi+24>>2]>>2])-x(u[Nh>>2]*u[q[hi+24>>2]+8>>2]);u[hi+12>>2]=x(u[Nh>>2]*u[q[hi+24>>2]+4>>2])-x(u[Nh+4>>2]*u[q[hi+24>>2]>>2]);ca(ab,hi+20|0,hi+16|0,hi+12|0);P=hi+32|0;}function yc(ab,Nh,Oh,ii){var ji=0;ji=P-80|0;P=ji;q[ji+76>>2]=ab;q[ji+72>>2]=Nh;q[ji+68>>2]=Oh;u[ji+64>>2]=ii;ab=q[ji+76>>2];u[ji+44>>2]=0;u[ji+40>>2]=0;u[ji+36>>2]=0;Nh=ji+48|0;ca(Nh,ji+44|0,ji+40|0,ji+36|0);u[ji+12>>2]=0;u[ji+8>>2]=0;u[ji+4>>2]=0;Oh=ji+16|0;ca(Oh,ji+12|0,ji+8|0,ji+4|0);sq(ab,Nh,Oh);q[ab>>2]=1308;q[ab+84>>2]=q[ji+72>>2];Nh=q[ji+68>>2];Oh=q[Nh+4>>2];q[ab+88>>2]=q[Nh>>2];q[ab+92>>2]=Oh;Oh=q[Nh+12>>2];q[ab+96>>2]=q[Nh+8>>2];q[ab+100>>2]=Oh;u[ab+104>>2]=u[ji+64>>2];P=ji+80|0;}function zc(ab,Nh,Oh){var ii=0;ii=P-32|0;P=ii;q[ii+28>>2]=Nh;q[ii+24>>2]=Oh;u[ii+20>>2]=u[q[ii+28>>2]>>2]+u[q[ii+24>>2]>>2];u[ii+16>>2]=u[q[ii+28>>2]+4>>2]+u[q[ii+24>>2]+4>>2];u[ii+12>>2]=u[q[ii+28>>2]+8>>2]+u[q[ii+24>>2]+8>>2];ca(ab,ii+20|0,ii+16|0,ii+12|0);P=ii+32|0;}function Ac(ab,Nh,Oh,ki,li,ni,oi){var pi=0,qi=0;pi=P-32|0;P=pi;q[pi+28>>2]=ab;q[pi+24>>2]=Nh;u[pi+20>>2]=Oh;u[pi+16>>2]=ki;u[pi+12>>2]=li;u[pi+8>>2]=ni;q[pi+4>>2]=oi;Oh=u[pi+20>>2];oi=q[pi+24>>2];Nh=P-16|0;ab=q[pi+28>>2];q[Nh+12>>2]=ab+80;q[Nh+8>>2]=oi;u[q[q[Nh+12>>2]+12>>2]+(q[Nh+8>>2]<<2)>>2]=Oh;Oh=u[pi+16>>2];oi=q[pi+24>>2];Nh=P-16|0;q[Nh+12>>2]=ab+120;q[Nh+8>>2]=oi;u[q[q[Nh+12>>2]+12>>2]+(q[Nh+8>>2]<<2)>>2]=Oh;Oh=u[pi+12>>2];oi=q[pi+24>>2];Nh=P-16|0;q[Nh+12>>2]=ab+100;q[Nh+8>>2]=oi;u[q[q[Nh+12>>2]+12>>2]+(q[Nh+8>>2]<<2)>>2]=Oh;Oh=u[pi+8>>2];oi=q[pi+24>>2];Nh=P-16|0;q[Nh+12>>2]=ab+140;q[Nh+8>>2]=oi;u[q[q[Nh+12>>2]+12>>2]+(q[Nh+8>>2]<<2)>>2]=Oh;oi=q[pi+4>>2];qi=q[pi+24>>2];Nh=P-16|0;q[Nh+12>>2]=ab+160;q[Nh+8>>2]=qi;q[q[q[Nh+12>>2]+12>>2]+(q[Nh+8>>2]<<2)>>2]=oi;o[ab+180|0]=1;P=pi+32|0;}function Bc(ab,Nh){var Oh=0;Oh=P-16|0;P=Oh;q[Oh+12>>2]=ab;q[Oh+8>>2]=Nh;ab=q[Oh+12>>2];q[ab+304>>2]=q[ab+304>>2]+1;Rb(ab+4|0,q[Oh+8>>2]);P=Oh+16|0;}function Cc(ab,Nh){var ki=0,li=0;ki=P-16|0;P=ki;q[ki+12>>2]=ab;q[ki+8>>2]=Nh;ab=q[ki+12>>2];Lg(ab,q[ki+8>>2]);Nh=q[ki+8>>2];li=q[Nh+52>>2];q[ab+48>>2]=q[Nh+48>>2];q[ab+52>>2]=li;li=q[Nh+60>>2];q[ab+56>>2]=q[Nh+56>>2];q[ab+60>>2]=li;P=ki+16|0;}function Dc(ab){ab=ab|0;var Nh=0;Nh=P-16|0;q[Nh+12>>2]=ab;return q[q[Nh+12>>2]+8>>2]}function Ec(ab){ab=ab|0;var ni=0;ni=P-16|0;P=ni;q[ni+12>>2]=ab;ab=q[ni+12>>2];if(ab){Sd(ab);}P=ni+16|0;}function Fc(ab){var oi=0;oi=P-16|0;P=oi;q[oi+12>>2]=ab;ab=q[oi+12>>2];if(q[ab+12>>2]){if(o[ab+16|0]&1){zo(ab,q[ab+12>>2]);}q[ab+12>>2]=0;}P=oi+16|0;}function Gc(ab,ri){var si=0;si=P-16|0;q[si+12>>2]=ab;q[si+8>>2]=0;q[si+4>>2]=ri;q[si>>2]=q[si+8>>2];while(1){if(q[si>>2]<q[si+4>>2]){q[si>>2]=q[si>>2]+1;continue}break}}function Hc(ab,ri){ab=ab|0;ri=ri|0;var ti=0;ti=P-16|0;q[ti+12>>2]=ab;q[ti+8>>2]=ri;q[q[ti+12>>2]+8>>2]=q[ti+8>>2];}function Ic(ab,ri){ab=ab|0;ri=x(ri);var ui=0;ui=P-16|0;q[ui+12>>2]=ab;u[ui+8>>2]=ri;u[q[ui+12>>2]+4>>2]=u[ui+8>>2];}function Jc(ab){ab=ab|0;var ri=0;ri=P-16|0;q[ri+12>>2]=ab;return x(u[q[ri+12>>2]+4>>2])}function Kc(ab){ab=ab|0;var vi=0;vi=P-16|0;P=vi;q[vi+12>>2]=ab;ab=q[vi+12>>2];ab=n[q[q[ab>>2]+36>>2]](ab)|0;P=vi+16|0;return ab|0}function Lc(ab,wi){var xi=0;a:{if((wi|0)>=1024){ab=ab*8.98846567431158e+307;xi=wi+ -1023|0;if((xi|0)<1024){wi=xi;break a}ab=ab*8.98846567431158e+307;wi=((wi|0)<3069?wi:3069)+ -2046|0;break a}if((wi|0)>-1023){break a}ab=ab*2.2250738585072014e-308;xi=wi+1022|0;if((xi|0)>-1023){wi=xi;break a}ab=ab*2.2250738585072014e-308;wi=((wi|0)>-3066?wi:-3066)+2044|0;}f(0,0);f(1,wi+1023<<20);return ab*+g()}function Mc(ab,wi,yi,zi,Ai){var Bi=0,Ci=0,Di=0;Bi=q[ab+4>>2];Ci=Bi>>8;ab=q[ab>>2];Di=ab;if(Bi&1){Ci=q[q[yi>>2]+Ci>>2];}n[q[q[ab>>2]+24>>2]](Di,wi,yi+Ci|0,Bi&2?zi:2,Ai);}function Nc(ab,wi){var yi=x(0),zi=0,Ai=0,Ei=0,Fi=x(0),Gi=0,Hi=0,Ii=x(0),Ji=x(0),Ki=x(0),Li=0,Mi=x(0),Ni=0,Oi=x(0),Pi=x(0),Qi=x(0),Ri=x(0);Fi=x(1);a:{b:{Gi=(j(ab),e(0));c:{if((Gi|0)==1065353216){break c}Hi=(j(wi),e(0));Ai=Hi&2147483647;if(!Ai){break c}zi=Gi&2147483647;if(!(Ai>>>0<2139095041?zi>>>0<=2139095040:0)){return x(ab+wi)}Li=0;d:{if((Gi|0)>-1){break d}Li=2;if(Ai>>>0>1266679807){break d}Li=0;if(Ai>>>0<1065353216){break d}Ei=150-(Ai>>>23)|0;Ni=Ai>>>Ei;Li=0;if((Ai|0)!=Ni<<Ei){break d}Li=2-(Ni&1)|0;}Ei=Li;e:{if((Ai|0)!=1065353216){if((Ai|0)!=2139095040){break e}if((zi|0)==1065353216){break c}if(zi>>>0>=1065353217){return (Hi|0)>-1?wi:x(0)}return (Hi|0)>-1?x(0):x(-wi)}return (Hi|0)>-1?ab:x(x(1)/ab)}if((Hi|0)==1073741824){return x(ab*ab)}if(!((Hi|0)!=1056964608|(Gi|0)<0)){return x(E(ab))}yi=x(y(ab));if(!((zi|1073741824)!=2139095040?zi:0)){Fi=(Hi|0)<0?x(x(1)/yi):yi;if((Gi|0)>-1){break c}if(!(Ei|zi+ -1065353216)){ab=x(Fi-Fi);return x(ab/ab)}return (Ei|0)==1?x(-Fi):Fi}if(!((Gi|0)>-1|Ei>>>0>1)){if(Ei-1){ab=x(ab-ab);return x(ab/ab)}Fi=x(-1);}f:{if(Ai>>>0>=1291845633){if(zi>>>0<=1065353207){return (Hi|0)<0?x(x(Fi*x(1.0000000150474662e+30))*x(1.0000000150474662e+30)):x(x(Fi*x(1.0000000031710769e-30))*x(1.0000000031710769e-30))}if(zi>>>0>=1065353224){return (Hi|0)>0?x(x(Fi*x(1.0000000150474662e+30))*x(1.0000000150474662e+30)):x(x(Fi*x(1.0000000031710769e-30))*x(1.0000000031710769e-30))}ab=x(yi+x(-1));yi=x(ab*x(1.44268798828125));Ii=x(x(ab*x(7052607543300837e-21))+x(x(x(ab*ab)*x(x(.5)-x(ab*x(x(ab*x(-.25))+x(.3333333432674408)))))*x(-1.4426950216293335)));ab=(f(0,(j(x(yi+Ii)),e(0))&-4096),k());Mi=x(ab-yi);break f}Ai=zi>>>0<8388608;zi=Ai?(j(x(yi*x(16777216))),e(0)):zi;Gi=zi&8388607;Ei=Gi|1065353216;Ai=(zi>>23)+(Ai?-151:-127)|0;zi=0;g:{if(Gi>>>0<1885298){break g}if(Gi>>>0<6140887){zi=1;break g}Ei=Ei+ -8388608|0;Ai=Ai+1|0;}Gi=zi<<2;Mi=u[Gi+20608>>2];Ii=(f(0,Ei),k());Ji=u[Gi+20592>>2];Ki=x(Ii-Ji);Oi=x(x(1)/x(Ji+Ii));yi=x(Ki*Oi);ab=(f(0,(j(yi),e(0))&-4096),k());Pi=x(ab*ab);Qi=ab;Ri=Ki;Ki=(f(0,((Ei>>1&-536875008|536870912)+(zi<<21)|0)+4194304|0),k());Ii=x(Oi*x(x(Ri-x(ab*Ki))-x(ab*x(Ii-x(Ki-Ji)))));Ki=x(x(yi+ab)*Ii);ab=x(yi*yi);Ji=x(Ki+x(x(ab*ab)*x(x(ab*x(x(ab*x(x(ab*x(x(ab*x(x(ab*x(.20697501301765442))+x(.23066075146198273)))+x(.2727281153202057)))+x(.3333333432674408)))+x(.4285714328289032)))+x(.6000000238418579))));ab=(f(0,(j(x(x(Pi+x(3))+Ji)),e(0))&-4096),k());Ki=x(Qi*ab);yi=x(x(Ii*ab)+x(yi*x(Ji-x(x(ab+x(-3))-Pi))));ab=(f(0,(j(x(Ki+yi)),e(0))&-4096),k());Ji=x(ab*x(.9619140625));Ii=x(u[Gi+20600>>2]+x(x(x(yi-x(ab-Ki))*x(.9617967009544373))+x(ab*x(-.00011736857413779944))));yi=x(Ai|0);ab=(f(0,(j(x(x(Mi+x(Ji+Ii))+yi)),e(0))&-4096),k());Mi=x(x(x(ab-yi)-Mi)-Ji);}Ji=(f(0,Hi&-4096),k());yi=x(ab*Ji);ab=x(x(x(Ii-Mi)*wi)+x(x(wi-Ji)*ab));wi=x(yi+ab);Ei=(j(wi),e(0));if((Ei|0)>=1124073473){break b}zi=1124073472;h:{i:{if((Ei|0)==1124073472){if(!(x(ab+x(4.299566569443414e-8))>x(wi-yi))){break i}break b}zi=Ei&2147483647;if(!(ab<=x(wi-yi)^1|(Ei|0)!=-1021968384)|zi>>>0>=1125515265){break a}Ai=0;if(zi>>>0<1056964609){break h}}Hi=(8388608>>>(zi>>>23)+ -126)+Ei|0;zi=Hi>>>23&255;Ai=(Hi&8388607|8388608)>>>150-zi;Ai=(Ei|0)<0?0-Ai|0:Ai;yi=x(yi-(f(0,Hi&-8388608>>zi+ -127),k()));Ei=(j(x(ab+yi)),e(0));}wi=(f(0,Ei&-32768),k());Ii=x(wi*x(.693145751953125));yi=x(x(wi*x(14286065379565116e-22))+x(x(ab-x(wi-yi))*x(.6931471824645996)));ab=x(Ii+yi);wi=x(ab*ab);wi=x(ab-x(wi*x(x(wi*x(x(wi*x(x(wi*x(x(wi*x(4.138136944220605e-8))+x(-16533901998627698e-22)))+x(661375597701408e-19)))+x(-.0027777778450399637)))+x(.1666666716337204))));Ki=x(x(ab*wi)/x(wi+x(-2)));wi=x(yi-x(ab-Ii));ab=x(x(ab-x(Ki-x(wi+x(ab*wi))))+x(1));Ei=(j(ab),e(0))+(Ai<<23)|0;j:{if((Ei|0)<=8388607){ab=wv(ab,Ai);break j}ab=(f(0,Ei),k());}Fi=x(Fi*ab);}return Fi}return x(x(Fi*x(1.0000000150474662e+30))*x(1.0000000150474662e+30))}return x(x(Fi*x(1.0000000031710769e-30))*x(1.0000000031710769e-30))}function Oc(ab){var wi=0;wi=P-16|0;P=wi;u[wi+8>>2]=ab;u[wi+8>>2]=xo(u[wi+8>>2]);a:{if(u[wi+8>>2]<x(-3.1415927410125732)){u[wi+12>>2]=u[wi+8>>2]+x(6.2831854820251465);break a}if(u[wi+8>>2]>x(3.1415927410125732)){u[wi+12>>2]=u[wi+8>>2]-x(6.2831854820251465);break a}u[wi+12>>2]=u[wi+8>>2];}P=wi+16|0;return u[wi+12>>2]}function Pc(ab,Si){var Ti=0;Sc(ab,Si);Ti=q[ab+4>>2];if(Ti){q[6658]=q[6658]+1;n[q[5256]](Ti);}q[ab+4>>2]=Si;q[ab+12>>2]=q[ab+12>>2]+ -1;}function Qc(ab,Si,Ui){var Vi=0;Vi=q[ab+4>>2];a:{if(Vi){q[ab+4>>2]=0;break a}q[6657]=q[6657]+1;Vi=n[q[5255]](44,16)|0;q[Vi>>2]=0;q[Vi+4>>2]=0;q[Vi+40>>2]=0;q[Vi+32>>2]=0;q[Vi+36>>2]=0;q[Vi+24>>2]=0;q[Vi+28>>2]=0;q[Vi+16>>2]=0;q[Vi+20>>2]=0;q[Vi+8>>2]=0;q[Vi+12>>2]=0;}q[Vi+36>>2]=Ui;q[Vi+32>>2]=0;q[Vi+40>>2]=0;Ui=q[Si+4>>2];q[Vi>>2]=q[Si>>2];q[Vi+4>>2]=Ui;Ui=q[Si+12>>2];q[Vi+8>>2]=q[Si+8>>2];q[Vi+12>>2]=Ui;Ui=q[Si+20>>2];q[Vi+16>>2]=q[Si+16>>2];q[Vi+20>>2]=Ui;Ui=q[Si+28>>2];q[Vi+24>>2]=q[Si+24>>2];q[Vi+28>>2]=Ui;Rc(ab,q[ab>>2],Vi);q[ab+12>>2]=q[ab+12>>2]+1;return Vi}function Rc(ab,Si,Ui){var Wi=0,Xi=x(0),Yi=x(0),Zi=x(0),_i=0;if(!q[ab>>2]){q[ab>>2]=Ui;q[Ui+32>>2]=0;return}Wi=q[Si+40>>2];if(Wi){Yi=x(u[Ui>>2]+u[Ui+16>>2]);Xi=x(u[Ui+8>>2]+u[Ui+24>>2]);Zi=x(u[Ui+4>>2]+u[Ui+20>>2]);while(1){_i=Si+36|0;Si=q[Si+36>>2];Si=q[_i+((x(x(x(y(x(Yi-x(u[Si>>2]+u[Si+16>>2]))))+x(y(x(Zi-x(u[Si+4>>2]+u[Si+20>>2])))))+x(y(x(Xi-x(u[Si+8>>2]+u[Si+24>>2])))))<x(x(x(y(x(Yi-x(u[Wi>>2]+u[Wi+16>>2]))))+x(y(x(Zi-x(u[Wi+4>>2]+u[Wi+20>>2])))))+x(y(x(Xi-x(u[Wi+8>>2]+u[Wi+24>>2])))))^1)<<2)>>2];Wi=q[Si+40>>2];if(Wi){continue}break}}_i=q[Si+32>>2];Wi=q[ab+4>>2];a:{if(Wi){q[ab+4>>2]=0;break a}q[6657]=q[6657]+1;Wi=n[q[5255]](44,16)|0;q[Wi>>2]=0;q[Wi+4>>2]=0;q[Wi+40>>2]=0;q[Wi+32>>2]=0;q[Wi+36>>2]=0;q[Wi+24>>2]=0;q[Wi+28>>2]=0;q[Wi+16>>2]=0;q[Wi+20>>2]=0;q[Wi+8>>2]=0;q[Wi+12>>2]=0;}q[Wi+36>>2]=0;q[Wi+40>>2]=0;q[Wi+32>>2]=_i;Yi=u[Ui>>2];Xi=u[Si>>2];u[Wi>>2]=Yi<Xi?Yi:Xi;Yi=u[Ui+16>>2];Xi=u[Si+16>>2];u[Wi+16>>2]=Yi>Xi?Yi:Xi;Yi=u[Ui+4>>2];Xi=u[Si+4>>2];u[Wi+4>>2]=Yi<Xi?Yi:Xi;Yi=u[Ui+20>>2];Xi=u[Si+20>>2];u[Wi+20>>2]=Yi>Xi?Yi:Xi;Yi=u[Ui+8>>2];Xi=u[Si+8>>2];u[Wi+8>>2]=Yi<Xi?Yi:Xi;Yi=u[Ui+24>>2];Xi=u[Si+24>>2];u[Wi+24>>2]=Yi>Xi?Yi:Xi;b:{if(_i){q[(((q[q[Si+32>>2]+40>>2]==(Si|0))<<2)+_i|0)+36>>2]=Wi;q[Wi+36>>2]=Si;q[Si+32>>2]=Wi;q[Wi+40>>2]=Ui;q[Ui+32>>2]=Wi;Yi=u[Wi>>2];while(1){ab=Wi;Wi=_i;c:{if(u[Wi>>2]<=Yi^1|u[Wi+4>>2]<=u[ab+4>>2]^1|(u[Wi+8>>2]<=u[ab+8>>2]^1|u[Wi+16>>2]>=u[ab+16>>2]^1)){break c}if(!(u[Wi+20>>2]>=u[ab+20>>2])){break c}if(u[Wi+24>>2]>=u[ab+24>>2]){break b}}ab=q[Wi+36>>2];Yi=u[ab>>2];Si=q[Wi+40>>2];Xi=u[Si>>2];Yi=Yi<Xi?Yi:Xi;u[Wi>>2]=Yi;Xi=u[ab+16>>2];Zi=u[Si+16>>2];u[Wi+16>>2]=Xi>Zi?Xi:Zi;Xi=u[ab+4>>2];Zi=u[Si+4>>2];u[Wi+4>>2]=Xi<Zi?Xi:Zi;Xi=u[ab+20>>2];Zi=u[Si+20>>2];u[Wi+20>>2]=Xi>Zi?Xi:Zi;Xi=u[ab+8>>2];Zi=u[Si+8>>2];u[Wi+8>>2]=Xi<Zi?Xi:Zi;Xi=u[ab+24>>2];Zi=u[Si+24>>2];u[Wi+24>>2]=Xi>Zi?Xi:Zi;_i=q[Wi+32>>2];if(_i){continue}break}break b}q[Wi+36>>2]=Si;q[Si+32>>2]=Wi;q[Wi+40>>2]=Ui;q[Ui+32>>2]=Wi;q[ab>>2]=Wi;}}function Sc(ab,Si){var Ui=0,$i=0,aj=x(0),bj=x(0),cj=x(0),dj=x(0),ej=x(0),fj=x(0),gj=x(0),hj=x(0),ij=x(0),jj=x(0),kj=x(0),lj=x(0),mj=x(0);if(q[ab>>2]==(Si|0)){q[ab>>2]=0;return 0}$i=q[Si+32>>2];Ui=q[(((q[$i+40>>2]!=(Si|0))<<2)+$i|0)+36>>2];Si=q[$i+32>>2];a:{b:{if(Si){q[(((($i|0)==q[Si+40>>2])<<2)+Si|0)+36>>2]=Ui;q[Ui+32>>2]=Si;Ui=q[ab+4>>2];if(Ui){q[6658]=q[6658]+1;n[q[5256]](Ui);}q[ab+4>>2]=$i;while(1){mj=u[Si>>2];$i=q[Si+36>>2];aj=u[$i>>2];Ui=q[Si+40>>2];gj=u[Ui>>2];aj=aj<gj?aj:gj;u[Si>>2]=aj;gj=u[Si+16>>2];bj=u[$i+16>>2];hj=u[Ui+16>>2];bj=bj>hj?bj:hj;u[Si+16>>2]=bj;hj=u[Si+4>>2];cj=u[$i+4>>2];ij=u[Ui+4>>2];cj=cj<ij?cj:ij;u[Si+4>>2]=cj;ij=u[Si+20>>2];dj=u[$i+20>>2];jj=u[Ui+20>>2];dj=dj>jj?dj:jj;u[Si+20>>2]=dj;jj=u[Si+8>>2];ej=u[$i+8>>2];kj=u[Ui+8>>2];ej=ej<kj?ej:kj;u[Si+8>>2]=ej;kj=u[Si+24>>2];fj=u[$i+24>>2];lj=u[Ui+24>>2];fj=fj>lj?fj:lj;u[Si+24>>2]=fj;c:{if(ij!=dj|gj!=bj|(mj!=aj|hj!=cj)){break c}if(jj!=ej){break c}if(kj==fj){break a}}Si=q[Si+32>>2];if(Si){continue}break}break b}q[ab>>2]=Ui;q[Ui+32>>2]=0;Si=q[ab+4>>2];if(Si){q[6658]=q[6658]+1;n[q[5256]](Si);}q[ab+4>>2]=$i;}Si=q[ab>>2];}return Si}function Tc(ab,Si){var nj=0;if(q[Si+40>>2]){Tc(ab,q[Si+36>>2]);Tc(ab,q[Si+40>>2]);}if(q[ab>>2]==(Si|0)){q[ab>>2]=0;}nj=q[ab+4>>2];if(nj){q[6658]=q[6658]+1;n[q[5256]](nj);}q[ab+4>>2]=Si;}function Uc(ab){ab=ab|0;var Si=0;q[ab>>2]=16944;Si=q[ab+160>>2];if(Si){if(r[ab+164|0]){if(Si){q[6658]=q[6658]+1;n[q[5256]](Si);}}q[ab+160>>2]=0;}q[ab+160>>2]=0;q[ab+152>>2]=0;q[ab+156>>2]=0;o[ab+164|0]=1;Si=q[ab+136>>2];if(Si){if(r[ab+140|0]){if(Si){q[6658]=q[6658]+1;n[q[5256]](Si);}}q[ab+136>>2]=0;}q[ab+136>>2]=0;q[ab+128>>2]=0;q[ab+132>>2]=0;o[ab+140|0]=1;Si=q[ab+116>>2];if(Si){if(r[ab+120|0]){if(Si){q[6658]=q[6658]+1;n[q[5256]](Si);}}q[ab+116>>2]=0;}q[ab+116>>2]=0;q[ab+108>>2]=0;q[ab+112>>2]=0;o[ab+120|0]=1;Si=q[ab+96>>2];if(Si){if(r[ab+100|0]){if(Si){q[6658]=q[6658]+1;n[q[5256]](Si);}}q[ab+96>>2]=0;}q[ab+96>>2]=0;q[ab+88>>2]=0;q[ab+92>>2]=0;o[ab+100|0]=1;Si=q[ab+76>>2];if(Si){if(r[ab+80|0]){if(Si){q[6658]=q[6658]+1;n[q[5256]](Si);}}q[ab+76>>2]=0;}q[ab+76>>2]=0;q[ab+68>>2]=0;q[ab+72>>2]=0;o[ab+80|0]=1;return ab|0}function Vc(ab,oj,pj,qj){var rj=0,sj=0,tj=0,uj=0,vj=0,wj=0,xj=0,yj=0,zj=0,Aj=0;if(!(!oj|!pj)){if(!(q[ab+24>>2]>127|q[ab+28>>2]>127)){q[6657]=q[6657]+1;rj=n[q[5255]](1024,16)|0;vj=q[ab+24>>2];if((vj|0)>=1){while(1){sj=tj<<3;uj=sj+rj|0;sj=sj+q[ab+32>>2]|0;wj=q[sj+4>>2];q[uj>>2]=q[sj>>2];q[uj+4>>2]=wj;tj=tj+1|0;if((vj|0)!=(tj|0)){continue}break}}vj=q[ab+32>>2];if(vj){if(r[ab+36|0]){if(vj){q[6658]=q[6658]+1;n[q[5256]](vj);}}q[ab+32>>2]=0;}q[ab+32>>2]=rj;q[ab+28>>2]=128;o[ab+36|0]=1;}q[ab+24>>2]=128;rj=q[ab+32>>2];q[rj+4>>2]=pj;q[rj>>2]=oj;oj=124;rj=1;while(1){pj=q[ab+32>>2];vj=rj;rj=rj+ -1|0;wj=rj<<3;sj=pj+wj|0;uj=q[sj+4>>2];sj=q[sj>>2];if((rj|0)>(oj|0)){tj=q[ab+24>>2];oj=tj<<1;if(!((tj|0)>=(oj|0)|q[ab+28>>2]>=(oj|0))){a:{if(!tj){pj=0;break a}q[6657]=q[6657]+1;pj=n[q[5255]](tj<<4,16)|0;tj=0;yj=q[ab+24>>2];if((yj|0)<1){break a}while(1){xj=tj<<3;zj=xj+pj|0;xj=q[ab+32>>2]+xj|0;Aj=q[xj+4>>2];q[zj>>2]=q[xj>>2];q[zj+4>>2]=Aj;tj=tj+1|0;if((yj|0)!=(tj|0)){continue}break}}tj=q[ab+32>>2];if(tj){if(r[ab+36|0]){if(tj){q[6658]=q[6658]+1;n[q[5256]](tj);}}q[ab+32>>2]=0;}q[ab+32>>2]=pj;o[ab+36|0]=1;q[ab+28>>2]=oj;}q[ab+24>>2]=oj;oj=oj+ -4|0;}b:{if((sj|0)==(uj|0)){if(!q[sj+40>>2]){break b}pj=pj+wj|0;rj=q[sj+36>>2];q[pj+4>>2]=rj;q[pj>>2]=rj;pj=vj<<3;rj=pj+q[ab+32>>2]|0;uj=q[sj+40>>2];q[rj+4>>2]=uj;q[rj>>2]=uj;rj=q[sj+40>>2];pj=pj+q[ab+32>>2]|0;q[pj+8>>2]=q[sj+36>>2];q[pj+12>>2]=rj;rj=vj+2|0;break b}if(u[sj>>2]<=u[uj+16>>2]^1|u[sj+16>>2]>=u[uj>>2]^1|(u[sj+4>>2]<=u[uj+20>>2]^1|u[sj+20>>2]>=u[uj+4>>2]^1)){break b}if(u[sj+8>>2]<=u[uj+24>>2]^1|u[sj+24>>2]>=u[uj+8>>2]^1){break b}tj=q[uj+40>>2];if(q[sj+40>>2]){rj=q[sj+36>>2];if(tj){pj=pj+wj|0;q[pj+4>>2]=q[uj+36>>2];q[pj>>2]=rj;rj=q[sj+40>>2];pj=vj<<3;tj=pj+q[ab+32>>2]|0;q[tj+4>>2]=q[uj+36>>2];q[tj>>2]=rj;rj=q[sj+36>>2];tj=pj+q[ab+32>>2]|0;q[tj+12>>2]=q[uj+40>>2];q[tj+8>>2]=rj;rj=q[sj+40>>2];pj=pj+q[ab+32>>2]|0;q[pj+20>>2]=q[uj+40>>2];q[pj+16>>2]=rj;rj=vj+3|0;break b}pj=pj+wj|0;q[pj+4>>2]=uj;q[pj>>2]=rj;pj=q[sj+40>>2];rj=q[ab+32>>2]+(vj<<3)|0;q[rj+4>>2]=uj;q[rj>>2]=pj;rj=vj+1|0;break b}if(tj){pj=pj+wj|0;q[pj+4>>2]=q[uj+36>>2];q[pj>>2]=sj;pj=q[ab+32>>2]+(vj<<3)|0;q[pj+4>>2]=q[uj+40>>2];q[pj>>2]=sj;rj=vj+1|0;break b}n[q[q[qj>>2]+8>>2]](qj,sj,uj);}if(rj){continue}break}}}function Wc(ab,oj,pj,qj){var Bj=0,Cj=0,Dj=0,Ej=0,Fj=0,Gj=0,Hj=0,Ij=0,Jj=0,Kj=0,Lj=0,Mj=0,Nj=0,Oj=0,Pj=0,Qj=0,Rj=0;while(1){Pj=pj;Kj=q[ab+12>>2];Cj=Kj+((pj+qj|0)/2<<4)|0;Qj=q[Cj+8>>2];Ij=q[Cj+4>>2];Hj=q[Cj>>2];Cj=qj;while(1){Dj=-1;Fj=-1;Bj=(pj<<4)+Kj|0;Jj=q[Bj>>2];if(Jj){Fj=q[Jj+12>>2];}Dj=Hj?q[Hj+12>>2]:Dj;Ej=-1;Gj=-1;Lj=q[Bj+4>>2];if(Lj){Gj=q[Lj+12>>2];}Ej=Ij?q[Ij+12>>2]:Ej;a:{b:{if((Fj|0)>(Dj|0)){break b}if(!((Hj|0)!=(Jj|0)|(Gj|0)>(Ej|0))){if((Ij|0)!=(Lj|0)){break a}if(t[Bj+8>>2]>Qj>>>0){break b}break a}if((Hj|0)!=(Jj|0)|(Gj|0)<=(Ej|0)){break a}}pj=pj+1|0;continue}while(1){Rj=Cj<<4;Dj=Rj+Kj|0;Fj=-1;Ej=-1;Ej=Hj?q[Hj+12>>2]:Ej;Mj=q[Dj>>2];if(Mj){Fj=q[Mj+12>>2];}Gj=-1;Nj=-1;Nj=Ij?q[Ij+12>>2]:Nj;Oj=q[Dj+4>>2];if(Oj){Gj=q[Oj+12>>2];}c:{d:{if((Ej|0)>(Fj|0)){break d}if(!((Hj|0)!=(Mj|0)|(Nj|0)>(Gj|0))){if((Ij|0)!=(Oj|0)){break c}if(t[Dj+8>>2]<Qj>>>0){break d}break c}if((Hj|0)!=(Mj|0)|(Nj|0)<=(Gj|0)){break c}}Cj=Cj+ -1|0;continue}break}if((pj|0)<=(Cj|0)){Gj=q[Bj+8>>2];Ej=q[Bj+12>>2];Fj=q[Dj+4>>2];q[Bj>>2]=q[Dj>>2];q[Bj+4>>2]=Fj;Fj=q[Dj+12>>2];q[Bj+8>>2]=q[Dj+8>>2];q[Bj+12>>2]=Fj;Bj=q[ab+12>>2]+Rj|0;q[Bj+4>>2]=Lj;q[Bj+8>>2]=Gj;q[Bj+12>>2]=Ej;q[Bj>>2]=Jj;Cj=Cj+ -1|0;pj=pj+1|0;}if((pj|0)<=(Cj|0)){Kj=q[ab+12>>2];continue}break}if((Cj|0)>(Pj|0)){Wc(ab,oj,Pj,Cj);}if((pj|0)<(qj|0)){continue}break}}function Xc(ab,oj){ab=ab|0;oj=x(oj);var pj=x(0),qj=x(0),Sj=x(0),Tj=x(0),Uj=x(0),Vj=x(0),Wj=x(0),Xj=x(0);pj=x(n[q[q[ab>>2]+48>>2]](ab));qj=x(n[q[q[ab>>2]+48>>2]](ab));Sj=x(n[q[q[ab>>2]+48>>2]](ab));u[ab+48>>2]=oj;oj=u[ab+40>>2];Tj=u[ab+32>>2];Uj=u[ab+36>>2];Vj=x(n[q[q[ab>>2]+48>>2]](ab));Wj=x(n[q[q[ab>>2]+48>>2]](ab));Xj=x(n[q[q[ab>>2]+48>>2]](ab));q[ab+44>>2]=0;u[ab+36>>2]=x(qj+Uj)-Wj;u[ab+32>>2]=x(pj+Tj)-Vj;u[ab+40>>2]=x(Sj+oj)-Xj;}function Yc(ab){var oj=0;a:{b:{oj=q[ab+4>>2];if(oj>>>0>13){break b}c:{switch(oj+ -2|0){case 6:return x(u[ab+32>>2]*u[ab+16>>2]);case 0:case 1:case 4:case 5:case 7:case 10:break b;case 2:case 3:break c;default:break a}}break a}return x(n[q[q[ab>>2]+48>>2]](ab))}return u[ab+48>>2]}function Zc(ab){var Yj=0,Zj=x(0);Yj=P-96|0;P=Yj;o[ab+92|0]=1;if(!(!!(r[24288]!=0)|o[24288]&1)){q[6049]=0;q[6050]=0;q[6048]=1065353216;q[6051]=0;q[6052]=0;q[6054]=0;q[6055]=0;q[6053]=1065353216;q[6056]=0;q[6057]=0;q[6061]=0;q[6062]=0;q[6060]=-1082130432;q[6058]=1065353216;q[6059]=0;q[6063]=0;q[6064]=0;q[6066]=0;q[6067]=0;q[6065]=-1082130432;q[6068]=0;q[6069]=0;q[6070]=-1082130432;q[6071]=0;q[6072]=0;q[6072]=q[6072]|1;}Yj=_(Yj,0,96);n[q[q[ab>>2]+76>>2]](ab,24192,Yj,6);Zj=u[ab+48>>2];u[ab+76>>2]=u[Yj>>2]+Zj;u[ab+60>>2]=u[Yj+48>>2]-Zj;u[ab+80>>2]=Zj+u[Yj+20>>2];u[ab- -64>>2]=u[Yj+68>>2]-Zj;u[ab+84>>2]=Zj+u[Yj+40>>2];u[ab+68>>2]=u[Yj+88>>2]-Zj;P=Yj+96|0;}function _c(ab){Aa(ab);q[ab+56>>2]=0;q[ab>>2]=13280;return ab}function $c(ab,_j){var $j=0,ak=0;ak=P-16|0;P=ak;q[ak+12>>2]=ab;q[ak+8>>2]=_j;_j=P-16|0;ab=q[ak+12>>2];q[_j+12>>2]=ab;q[ak+4>>2]=q[q[_j+12>>2]+4>>2];_j=q[ak+4>>2];$j=P-16|0;q[$j+12>>2]=ab;if(q[q[$j+12>>2]+8>>2]==(_j|0)){$j=P-16|0;q[$j+12>>2]=ab;_j=q[q[$j+12>>2]+4>>2];$j=P-16|0;q[$j+12>>2]=ab;q[$j+8>>2]=_j;_j=ab;if(q[$j+8>>2]){$j=q[$j+8>>2]<<1;}else {$j=1;}Mg(_j,$j);}q[q[ab+12>>2]+(q[ab+4>>2]<<2)>>2]=q[q[ak+8>>2]>>2];q[ab+4>>2]=q[ab+4>>2]+1;P=ak+16|0;}function ad(ab,_j,bk){ab=ab|0;_j=_j|0;bk=bk|0;var ck=0;ck=P-16|0;P=ck;q[ck+12>>2]=ab;q[ck+8>>2]=_j;o[ck+7|0]=bk;Ge(q[ck+12>>2],q[ck+8>>2],o[ck+7|0]&1);P=ck+16|0;}function bd(ab){return 60}function cd(ab,_j){ab=ab|0;_j=_j|0;var bk=0;bk=P-16|0;P=bk;q[bk+12>>2]=ab;q[bk+8>>2]=_j;_j=q[bk+8>>2];ab=P-16|0;q[ab+12>>2]=q[bk+12>>2];q[ab+8>>2]=_j;q[q[ab+12>>2]+260>>2]=q[ab+8>>2];P=bk+16|0;}function dd(ab,_j){ab=ab|0;_j=_j|0;var dk=0;dk=P-16|0;P=dk;q[dk+12>>2]=ab;q[dk+8>>2]=_j;_j=q[dk+8>>2];ab=P-16|0;q[ab+12>>2]=q[dk+12>>2];q[ab+8>>2]=_j;q[q[ab+12>>2]+264>>2]=q[ab+8>>2];P=dk+16|0;}function ed(ab){ab=ab|0;var _j=0;_j=P-16|0;P=_j;q[_j+12>>2]=ab;ab=P-16|0;q[ab+12>>2]=q[_j+12>>2];P=_j+16|0;return q[q[ab+12>>2]+264>>2]}function fd(ab,ek){ab=ab|0;ek=x(ek);var fk=0;fk=P-16|0;P=fk;q[fk+12>>2]=ab;u[fk+8>>2]=ek;ek=u[fk+8>>2];ab=P-16|0;q[ab+12>>2]=q[fk+12>>2];u[ab+8>>2]=ek;u[q[ab+12>>2]+272>>2]=u[ab+8>>2];P=fk+16|0;}function gd(ab,ek,gk,hk){}function hd(ab,ek){ab=ab|0;ek=x(ek);var gk=0;gk=P-16|0;P=gk;q[gk+12>>2]=ab;u[gk+8>>2]=ek;ek=u[gk+8>>2];ab=P-16|0;q[ab+12>>2]=q[gk+12>>2];u[ab+8>>2]=ek;u[q[ab+12>>2]+276>>2]=u[ab+8>>2];P=gk+16|0;}function id(ab,ek){ab=ab|0;ek=ek|0;var hk=0;hk=P-16|0;P=hk;q[hk+12>>2]=ab;q[hk+8>>2]=ek;Bc(q[hk+12>>2],q[hk+8>>2]);P=hk+16|0;}function jd(ab,ek){ab=ab|0;ek=ek|0;var ik=0;ik=P-16|0;P=ik;q[ik+12>>2]=ab;q[ik+8>>2]=ek;ek=q[ik+8>>2];ab=P-16|0;q[ab+12>>2]=q[ik+12>>2];q[ab+8>>2]=ek;q[q[ab+12>>2]+204>>2]=q[ab+8>>2];P=ik+16|0;}function kd(ab,ek){ab=ab|0;ek=x(ek);var jk=0;jk=P-16|0;P=jk;q[jk+12>>2]=ab;u[jk+8>>2]=ek;GA(q[jk+12>>2],u[jk+8>>2]);P=jk+16|0;}function ld(ab,ek){ab=ab|0;ek=x(ek);var kk=0;kk=P-16|0;P=kk;q[kk+12>>2]=ab;u[kk+8>>2]=ek;TA(q[kk+12>>2],u[kk+8>>2]);P=kk+16|0;}function md(ab,ek){ab=ab|0;ek=x(ek);var lk=0;lk=P-16|0;P=lk;q[lk+12>>2]=ab;u[lk+8>>2]=ek;dB(q[lk+12>>2],u[lk+8>>2]);P=lk+16|0;}function nd(ab,ek,mk){ek=x(ek);mk=mk|0;q[mk>>2]=0;q[mk+4>>2]=0;q[mk+8>>2]=0;q[mk+12>>2]=0;}function od(ab,ek){ab=ab|0;ek=x(ek);var mk=0;mk=P-16|0;P=mk;q[mk+12>>2]=ab;u[mk+8>>2]=ek;uB(q[mk+12>>2],u[mk+8>>2]);P=mk+16|0;}function pd(ab,ek,nk,ok,pk){var qk=x(0);q[ab+32>>2]=nk;q[ab+28>>2]=ek;q[ab+24>>2]=ok;q[ab+20>>2]=pk;q[ab+4>>2]=0;q[ab+8>>2]=1065353216;q[ab>>2]=5064;q[ab+12>>2]=0;q[ab+16>>2]=0;q[ab+36>>2]=q[ek+4>>2];q[ab+40>>2]=q[nk+4>>2];u[ab+44>>2]=n[q[q[ek>>2]+48>>2]](ek);qk=x(n[q[q[nk>>2]+48>>2]](nk));q[ab+72>>2]=1;q[ab+76>>2]=1;q[ab+60>>2]=-1;o[ab+52|0]=0;u[ab+48>>2]=qk;return ab}function qd(ab,ek){var nk=0,ok=0,pk=0;a:{b:{c:{d:{e:{nk=q[ab>>2];f:{if((nk|0)>=4){if(r[ek|0]&8){pk=nk;break f}pk=nk+ -1|0;q[ab>>2]=pk;ok=(pk<<4)+ab|0;nk=q[ok+16>>2];q[ab+60>>2]=q[ok+12>>2];q[ab+64>>2]=nk;nk=q[ok+8>>2];q[ab+52>>2]=q[ok+4>>2];q[ab+56>>2]=nk;nk=q[ok+88>>2];q[ab+132>>2]=q[ok+84>>2];q[ab+136>>2]=nk;nk=q[ok+96>>2];q[ab+140>>2]=q[ok+92>>2];q[ab+144>>2]=nk;nk=q[ok+176>>2];q[ab+220>>2]=q[ok+172>>2];q[ab+224>>2]=nk;nk=q[ok+168>>2];q[ab+212>>2]=q[ok+164>>2];q[ab+216>>2]=nk;break f}pk=3;if((nk|0)!=3){break e}}if(r[ek|0]&4){break d}pk=pk+ -1|0;q[ab>>2]=pk;ok=(pk<<4)+ab|0;nk=q[ok+16>>2];q[ab+44>>2]=q[ok+12>>2];q[ab+48>>2]=nk;nk=q[ok+8>>2];q[ab+36>>2]=q[ok+4>>2];q[ab+40>>2]=nk;nk=q[ok+88>>2];q[ab+116>>2]=q[ok+84>>2];q[ab+120>>2]=nk;nk=q[ok+96>>2];q[ab+124>>2]=q[ok+92>>2];q[ab+128>>2]=nk;nk=q[ok+176>>2];q[ab+204>>2]=q[ok+172>>2];q[ab+208>>2]=nk;nk=q[ok+168>>2];q[ab+196>>2]=q[ok+164>>2];q[ab+200>>2]=nk;break d}pk=2;if((nk|0)<2){break c}}if(r[ek|0]&2){break b}pk=pk+ -1|0;q[ab>>2]=pk;ok=(pk<<4)+ab|0;nk=q[ok+16>>2];q[ab+28>>2]=q[ok+12>>2];q[ab+32>>2]=nk;nk=q[ok+8>>2];q[ab+20>>2]=q[ok+4>>2];q[ab+24>>2]=nk;nk=q[ok+88>>2];q[ab+100>>2]=q[ok+84>>2];q[ab+104>>2]=nk;nk=q[ok+96>>2];q[ab+108>>2]=q[ok+92>>2];q[ab+112>>2]=nk;nk=q[ok+176>>2];q[ab+188>>2]=q[ok+172>>2];q[ab+192>>2]=nk;nk=q[ok+168>>2];q[ab+180>>2]=q[ok+164>>2];q[ab+184>>2]=nk;break b}pk=1;if((nk|0)!=1){break a}}if(o[ek|0]&1){break a}ek=pk+ -1|0;q[ab>>2]=ek;nk=ek<<4;pk=nk+(ab+4|0)|0;ek=q[pk+4>>2];q[ab+4>>2]=q[pk>>2];q[ab+8>>2]=ek;ek=q[pk+12>>2];q[ab+12>>2]=q[pk+8>>2];q[ab+16>>2]=ek;pk=nk+(ab+84|0)|0;ek=q[pk+4>>2];q[ab+84>>2]=q[pk>>2];q[ab+88>>2]=ek;ek=q[pk+12>>2];q[ab+92>>2]=q[pk+8>>2];q[ab+96>>2]=ek;nk=nk+(ab+164|0)|0;ek=q[nk+12>>2];q[ab+172>>2]=q[nk+8>>2];q[ab+176>>2]=ek;ek=q[nk+4>>2];q[ab+164>>2]=q[nk>>2];q[ab+168>>2]=ek;}}function rd(ab,ek,rk,sk){var tk=x(0),uk=x(0),vk=x(0),wk=x(0),xk=x(0),yk=x(0),zk=x(0),Ak=x(0),Bk=x(0),Ck=x(0),Dk=x(0),Ek=x(0);xk=u[rk+24>>2];tk=u[ek+24>>2];Ak=x(xk-tk);yk=u[rk+16>>2];vk=u[ek+16>>2];Bk=x(yk-vk);uk=u[ab+4>>2];zk=u[rk+20>>2];wk=u[ek+20>>2];Ck=x(zk-wk);Dk=u[ab>>2];Ek=u[ab+8>>2];if(!(x(x(tk*x(x(Bk*uk)-x(Ck*Dk)))+x(x(vk*x(x(Ck*Ek)-x(Ak*uk)))+x(wk*x(x(Ak*Dk)-x(Bk*Ek)))))<x(0))){ab=0;}else {uk=x(x(x(vk*vk)+x(wk*wk))+x(tk*tk));a:{if(!!(x(x(x(vk*Bk)+x(wk*Ck))+x(tk*Ak))>x(0))){break a}uk=x(x(x(yk*yk)+x(zk*zk))+x(xk*xk));if(!!(x(x(x(yk*Bk)+x(zk*Ck))+x(xk*Ak))<x(0))){break a}uk=x(x(x(x(yk*yk)+x(zk*zk))+x(xk*xk))*x(x(x(vk*vk)+x(wk*wk))+x(tk*tk)));tk=x(x(x(yk*vk)+x(zk*wk))+x(xk*tk));tk=x(x(uk-x(tk*tk))/x(x(x(Bk*Bk)+x(Ck*Ck))+x(Ak*Ak)));uk=tk>x(0)?tk:x(0);}u[sk>>2]=E(uk);ab=1;}return ab}function sd(ab,ek,rk,sk,Fk,Gk){var Hk=0,Ik=0,Jk=0;a:{if(r[sk+55|0]==(ek|0)){break a}Hk=Fk<<2;Ik=q[Hk+4924>>2];if(!!(x(x(x(x(u[sk>>2]*u[rk+16>>2])+x(u[sk+4>>2]*u[rk+20>>2]))+x(u[sk+8>>2]*u[rk+24>>2]))-u[sk+16>>2])<x(-9999999747378752e-21))){ek=ab;ab=sk+20|0;ab=Lb(ek,q[ab+(Ik<<2)>>2],q[ab+Hk>>2],rk,0);if(!ab){break a}q[ab+32>>2]=sk;o[ab+52|0]=Fk;o[(sk+Fk|0)+52|0]=0;q[((Fk<<2)+sk|0)+32>>2]=ab;ek=q[Gk>>2];b:{if(ek){q[ek+36>>2]=ab;o[ek+53|0]=2;q[ab+40>>2]=ek;o[ab+54|0]=1;break b}q[Gk+4>>2]=ab;}q[Gk>>2]=ab;q[Gk+8>>2]=q[Gk+8>>2]+1;return 1}o[sk+55|0]=ek;if(!sd(ab,ek,rk,q[((Ik<<2)+sk|0)+32>>2],r[(sk+Ik|0)+52|0],Gk)){break a}Fk=ek;ek=q[Hk+4936>>2];if(!sd(ab,Fk,rk,q[((ek<<2)+sk|0)+32>>2],r[(ek+sk|0)+52|0],Gk)){break a}ek=q[sk+48>>2];if(ek){q[ek+44>>2]=q[sk+44>>2];}ek=q[sk+44>>2];if(ek){q[ek+48>>2]=q[sk+48>>2];}if(q[ab+18496>>2]==(sk|0)){q[ab+18496>>2]=q[sk+48>>2];}ek=ab+18500|0;q[ek>>2]=q[ek>>2]+ -1;q[sk+44>>2]=0;q[sk+48>>2]=q[ab+18504>>2];ek=q[ab+18504>>2];if(ek){q[ek+44>>2]=sk;}q[ab+18504>>2]=sk;Jk=1;ab=ab+18508|0;q[ab>>2]=q[ab>>2]+1;}return Jk}function td(ab,ek){var rk=x(0),sk=x(0),Fk=0,Gk=x(0),Kk=x(0),Lk=x(0),Mk=x(0),Nk=x(0),Ok=0,Pk=x(0),Qk=x(0),Rk=x(0),Sk=x(0),Tk=x(0),Uk=0;Ok=P-80|0;P=Ok;rk=u[ek+12>>2];Pk=u[ab+264>>2];sk=u[ek+8>>2];a:{if(!(u[ab+268>>2]!=rk|Pk!=sk|u[ab+260>>2]!=u[ek+4>>2])){if(u[ab+256>>2]==u[ek>>2]){break a}}Lk=u[ab+260>>2];Mk=u[ab+256>>2];Gk=u[ek>>2];Kk=u[ek+4>>2];Nk=x(x(x(Gk*Gk)+x(Kk*Kk))+x(sk*sk));b:{if(!!(Nk>x(0))){u[ab+268>>2]=rk;rk=x(x(1)/x(E(Nk)));Qk=x(sk*rk);u[ab+264>>2]=Qk;Nk=x(Kk*rk);u[ab+260>>2]=Nk;Rk=x(Gk*rk);u[ab+256>>2]=Rk;break b}q[ab+256>>2]=0;q[ab+260>>2]=0;q[ab+264>>2]=0;q[ab+268>>2]=0;Nk=x(0);}Fk=q[ab+8>>2];if(!Fk){break a}Sk=x(x(x(Rk*Rk)+x(Nk*Nk))+x(Qk*Qk));c:{if(Sk==x(0)){break c}Tk=x(x(x(Mk*Mk)+x(Lk*Lk))+x(Pk*Pk));if(Tk==x(0)){break c}Gk=x(x(1)/x(E(Sk)));rk=x(Qk*Gk);u[ab+264>>2]=rk;sk=x(Nk*Gk);u[ab+260>>2]=sk;Gk=x(Rk*Gk);u[ab+256>>2]=Gk;Kk=x(x(1)/x(E(Tk)));Pk=x(Pk*Kk);Nk=x(Lk*Kk);Lk=x(Mk*Kk);Kk=x(x(Pk*rk)+x(x(Nk*sk)+x(Lk*Gk)));if(!!(Kk<x(-.9999998807907104))){if(!!(x(y(rk))>x(.7071067690849304))){Lk=sk;sk=x(x(1)/x(E(x(x(sk*sk)+x(rk*rk)))));Kk=x(Lk*sk);Gk=x(sk*x(-rk));sk=x(0);rk=x(0);break c}rk=x(x(1)/x(E(x(x(sk*sk)+x(Gk*Gk)))));Gk=x(Gk*rk);sk=x(rk*x(-sk));Kk=x(0);rk=x(0);break c}Kk=x(Kk+x(1));Qk=x(E(x(Kk+Kk)));Mk=x(x(1)/Qk);Kk=x(x(x(Nk*Gk)-x(Lk*sk))*Mk);Gk=x(x(x(Lk*rk)-x(Pk*Gk))*Mk);sk=x(x(x(Pk*sk)-x(Nk*rk))*Mk);rk=x(Qk*x(.5));}ek=q[Fk+16>>2];q[Ok+24>>2]=q[Fk+12>>2];q[Ok+28>>2]=ek;ek=q[Fk+8>>2];q[Ok+16>>2]=q[Fk+4>>2];q[Ok+20>>2]=ek;ek=q[Fk+32>>2];q[Ok+40>>2]=q[Fk+28>>2];q[Ok+44>>2]=ek;ek=q[Fk+24>>2];q[Ok+32>>2]=q[Fk+20>>2];q[Ok+36>>2]=ek;ek=q[Fk+48>>2];q[Ok+56>>2]=q[Fk+44>>2];q[Ok+60>>2]=ek;ek=q[Fk+40>>2];q[Ok+48>>2]=q[Fk+36>>2];q[Ok+52>>2]=ek;ek=q[Fk+64>>2];q[Ok+72>>2]=q[Fk+60>>2];q[Ok+76>>2]=ek;Uk=q[Fk+56>>2];ek=Ok;q[ek+64>>2]=q[Fk+52>>2];q[ek+68>>2]=Uk;ja(ek+16|0,ek);q[ek+60>>2]=0;q[ek+44>>2]=0;Lk=u[ek+8>>2];Mk=u[ek+4>>2];Qk=u[ek+12>>2];Rk=u[ek>>2];Pk=x(x(sk*Lk)+x(x(x(rk*Mk)-x(Gk*Qk))-x(Kk*Rk)));Nk=x(x(Kk*Lk)+x(x(x(sk*Rk)+x(rk*Qk))+x(Gk*Mk)));Sk=x(x(Gk*Rk)+x(x(x(rk*Lk)-x(Kk*Qk))-x(sk*Mk)));sk=x(x(x(x(rk*Rk)-x(sk*Qk))-x(Gk*Lk))+x(Kk*Mk));rk=x(x(2)/x(x(Nk*Nk)+x(x(Sk*Sk)+x(x(sk*sk)+x(Pk*Pk)))));Gk=x(Sk*rk);Kk=x(Pk*Gk);Lk=x(sk*rk);Mk=x(Nk*Lk);u[ek+52>>2]=Kk+Mk;u[ek+40>>2]=Kk-Mk;Kk=x(sk*Gk);rk=x(Pk*rk);Mk=x(Nk*rk);u[ek+24>>2]=Kk+Mk;Lk=x(sk*Lk);Pk=x(Pk*rk);u[ek+56>>2]=x(1)-x(Lk+Pk);Qk=Lk;Lk=x(Sk*Gk);u[ek+36>>2]=x(1)-x(Qk+Lk);q[ek+28>>2]=0;u[ek+48>>2]=Kk-Mk;sk=x(sk*rk);rk=x(Nk*Gk);u[ek+32>>2]=sk+rk;u[ek+20>>2]=sk-rk;u[ek+16>>2]=x(1)-x(Pk+Lk);ab=q[ab+8>>2];q[ab+304>>2]=q[ab+304>>2]+1;Fk=q[ek+28>>2];q[ab+12>>2]=q[ek+24>>2];q[ab+16>>2]=Fk;Fk=q[ek+20>>2];q[ab+4>>2]=q[ek+16>>2];q[ab+8>>2]=Fk;Fk=q[ek+44>>2];q[ab+28>>2]=q[ek+40>>2];q[ab+32>>2]=Fk;Fk=q[ek+36>>2];q[ab+20>>2]=q[ek+32>>2];q[ab+24>>2]=Fk;Fk=q[ek+52>>2];q[ab+36>>2]=q[ek+48>>2];q[ab+40>>2]=Fk;Fk=q[ek+60>>2];q[ab+44>>2]=q[ek+56>>2];q[ab+48>>2]=Fk;Fk=q[ek+68>>2];q[ab+52>>2]=q[ek+64>>2];q[ab+56>>2]=Fk;Fk=q[ek+76>>2];q[ab+60>>2]=q[ek+72>>2];q[ab+64>>2]=Fk;}P=Ok+80|0;}function ud(ab,ek,Vk,Wk,Xk,Yk){var Zk=0,_k=0,$k=0,al=0,cl=0,dl=0;$k=q[ab+88>>2];Zk=$k;a:{if(($k|0)!=q[ab+92>>2]){break a}Zk=$k;al=$k?$k<<1:1;if(($k|0)>=(al|0)){break a}if(al){q[6657]=q[6657]+1;cl=n[q[5255]](w(al,152),16)|0;Zk=q[ab+88>>2];}else {Zk=$k;}_k=Zk;if((_k|0)>=1){Zk=0;while(1){dl=w(Zk,152);va(dl+cl|0,q[ab+96>>2]+dl|0,152);Zk=Zk+1|0;if((_k|0)!=(Zk|0)){continue}break}}_k=q[ab+96>>2];if(_k){if(r[ab+100|0]){if(_k){q[6658]=q[6658]+1;n[q[5256]](_k);}}q[ab+96>>2]=0;}q[ab+96>>2]=cl;q[ab+92>>2]=al;o[ab+100|0]=1;Zk=q[ab+88>>2];}q[ab+88>>2]=Zk+1;_k=q[ab+96>>2]+w($k,152)|0;q[_k+140>>2]=Xk;bl(ab,_k,ek,Vk,Wk,Yk);}function vd(ab,ek,Vk){var Wk=x(0),Xk=x(0),Yk=x(0),bl=x(0),el=x(0),fl=x(0),gl=x(0),hl=x(0),il=x(0),jl=x(0),kl=x(0),ll=x(0),ml=x(0),nl=x(0),ol=x(0),pl=x(0),ql=x(0),rl=x(0),sl=x(0);Wk=u[ab+552>>2];Xk=u[ek>>2];Yk=u[ab+568>>2];bl=u[ek+4>>2];el=u[ab+584>>2];fl=u[ek+8>>2];hl=u[ab+620>>2];il=u[ab+636>>2];gl=u[ab+652>>2];jl=x(x(x(hl*u[Vk>>2])+x(il*u[Vk+4>>2]))+x(gl*u[Vk+8>>2]));kl=u[ek+16>>2];ll=u[ek+20>>2];ml=u[ek+24>>2];nl=x(x(x(hl*u[Vk+16>>2])+x(il*u[Vk+20>>2]))+x(gl*u[Vk+24>>2]));ol=x(x(x(x(x(Wk*Xk)+x(Yk*bl))+x(el*fl))*jl)+x(x(x(x(Wk*kl)+x(Yk*ll))+x(el*ml))*nl));pl=Wk;Wk=u[ek+32>>2];ql=Yk;Yk=u[ek+36>>2];rl=el;el=u[ek+40>>2];gl=x(x(x(hl*u[Vk+32>>2])+x(il*u[Vk+36>>2]))+x(gl*u[Vk+40>>2]));hl=Xk;Xk=u[ab+556>>2];il=bl;bl=u[ab+572>>2];sl=fl;fl=u[ab+588>>2];return x($(x(ol+x(x(x(x(pl*Wk)+x(ql*Yk))+x(rl*el))*gl)),x(x(x(x(x(x(hl*Xk)+x(il*bl))+x(sl*fl))*jl)+x(x(x(x(kl*Xk)+x(ll*bl))+x(ml*fl))*nl))+x(x(x(x(Wk*Xk)+x(Yk*bl))+x(el*fl))*gl)))*u[ab+732>>2])}function wd(ab,ek,Vk,tl,ul){var vl=x(0),wl=x(0),xl=x(0),yl=x(0),zl=x(0),Al=0,Bl=x(0),Cl=x(0),Dl=x(0),El=x(0),Fl=x(0),Gl=x(0),Hl=x(0),Il=x(0),Jl=x(0),Kl=x(0),Ll=x(0),Ml=x(0),Nl=x(0),Ol=x(0),Pl=x(0),Ql=x(0),Rl=x(0),Sl=x(0),Tl=x(0),Ul=x(0),Vl=x(0),Wl=x(0),Xl=x(0),Yl=x(0),Zl=x(0),_l=x(0),$l=x(0),am=x(0),bm=x(0),cm=x(0),dm=x(0),em=x(0),fm=x(0),gm=x(0),hm=x(0),im=x(0),jm=x(0),km=x(0),lm=x(0),mm=x(0),nm=x(0),om=x(0),pm=x(0),qm=x(0),rm=x(0),sm=x(0),tm=x(0),um=x(0),vm=x(0),wm=x(0),xm=x(0),ym=x(0),zm=x(0),Am=x(0),Bm=x(0),Cm=x(0),Dm=x(0),Em=x(0),Fm=x(0),Gm=x(0),Hm=x(0),Im=x(0),Jm=x(0),Km=x(0),Lm=0,Mm=x(0),Nm=x(0),Om=x(0),Pm=x(0),Qm=x(0),Rm=x(0);Al=P-80|0;P=Al;o[ab+525|0]=0;o[ab+526|0]=0;q[ab+500>>2]=0;q[ab+504>>2]=0;a:{if(!(r[ab+527|0]|!r[ab+552|0])){Mm=u[Vk+52>>2];Nm=u[Vk+56>>2];Yl=u[ab+412>>2];Cl=u[ab+416>>2];Ml=u[ab+420>>2];Om=u[ek+52>>2];Pm=u[ek+56>>2];Ql=u[ab+348>>2];Nl=u[ab+352>>2];Vl=u[ab+356>>2];zl=u[Vk+20>>2];yl=u[Vk+24>>2];Bl=u[ek+20>>2];Jl=u[ek+24>>2];Zl=u[ab+308>>2];$l=u[ab+324>>2];am=u[ab+340>>2];bm=u[ab+316>>2];cm=u[ab+332>>2];dm=u[ab+304>>2];Kl=u[ek+36>>2];em=u[ab+320>>2];Fl=u[ek+40>>2];mm=u[ab+336>>2];nm=u[ab+372>>2];om=u[ab+388>>2];pm=u[ab+404>>2];qm=u[ab+368>>2];wm=u[ab+384>>2];xm=u[ab+400>>2];wl=u[ab+568>>2];Ol=u[ab+564>>2];vl=u[ab+556>>2];xl=u[ab+560>>2];Wl=u[Vk+36>>2];ym=u[ab+380>>2];Xl=u[Vk+40>>2];zm=u[ab+396>>2];Qm=u[Vk+48>>2];Sl=u[Vk+8>>2];Il=u[Vk+4>>2];Ll=u[Vk>>2];Rm=u[ek+48>>2];Gl=u[ek+8>>2];Pl=u[ek>>2];Tl=u[ek+4>>2];El=u[Vk+16>>2];Rl=u[ek+16>>2];Am=u[ab+300>>2];Dl=u[ek+32>>2];Hl=u[Vk+32>>2];Bm=u[ab+364>>2];q[Al+76>>2]=0;q[Al+60>>2]=0;q[Al+44>>2]=0;rm=x(x(x(Zl*Dl)+x($l*Kl))+x(am*Fl));Ul=x(x(2)/x(x(x(x(vl*vl)+x(xl*xl))+x(Ol*Ol))+x(wl*wl)));fm=x(vl*Ul);gm=x(vl*fm);_l=x(xl*Ul);hm=x(xl*_l);Cm=x(x(1)-x(gm+hm));sm=x(x(x(nm*Hl)+x(om*Wl))+x(pm*Xl));Ul=x(Ol*Ul);im=x(vl*Ul);jm=x(wl*_l);Dm=x(im+jm);tm=x(x(x(Bm*Hl)+x(ym*Wl))+x(zm*Xl));km=x(xl*Ul);lm=x(wl*fm);Em=x(km-lm);xl=x(x(x(qm*Hl)+x(wm*Wl))+x(xm*Xl));fm=x(x(Cm*sm)+x(x(Dm*tm)+x(Em*xl)));um=x(x(x(Am*Dl)+x(bm*Kl))+x(cm*Fl));Fm=x(im-jm);Ol=x(Ol*Ul);Gm=x(x(1)-x(hm+Ol));_l=x(vl*_l);Ul=x(wl*Ul);Hm=x(_l+Ul);vl=x(x(Fm*sm)+x(x(Gm*tm)+x(Hm*xl)));wl=x(x(x(dm*Dl)+x(em*Kl))+x(mm*Fl));Im=x(km+lm);Jm=x(_l-Ul);Km=x(x(1)-x(gm+Ol));Ol=x(x(Im*sm)+x(x(Jm*tm)+x(Km*xl)));u[Al+56>>2]=x(rm*fm)+x(x(um*vl)+x(wl*Ol));Ul=x(x(x(Zl*Rl)+x($l*Bl))+x(am*Jl));_l=x(x(x(Am*Rl)+x(bm*Bl))+x(cm*Jl));gm=x(x(x(dm*Rl)+x(em*Bl))+x(mm*Jl));u[Al+52>>2]=x(Ul*fm)+x(x(_l*vl)+x(gm*Ol));hm=x(x(x(nm*El)+x(om*zl))+x(pm*yl));im=x(x(x(Bm*El)+x(ym*zl))+x(zm*yl));jm=x(x(x(qm*El)+x(wm*zl))+x(xm*yl));km=x(x(Cm*hm)+x(x(Dm*im)+x(Em*jm)));lm=x(x(Fm*hm)+x(x(Gm*im)+x(Hm*jm)));vm=x(x(Im*hm)+x(x(Jm*im)+x(Km*jm)));u[Al+40>>2]=x(rm*km)+x(x(um*lm)+x(wl*vm));u[Al+36>>2]=x(Ul*km)+x(x(_l*lm)+x(gm*vm));Rl=x(-x(Om+x(x(x(Rl*Ql)+x(Bl*Nl))+x(Jl*Vl))));Bl=x(x(x(Pl*Zl)+x(Tl*$l))+x(Gl*am));Zl=x(Rm+x(x(x(Pl*Ql)+x(Tl*Nl))+x(Gl*Vl)));Fl=x(Pm+x(x(x(Dl*Ql)+x(Kl*Nl))+x(Fl*Vl)));Dl=x(x(x(Ul*Rl)-x(Bl*Zl))-x(rm*Fl));Jl=x(x(x(Am*Pl)+x(bm*Tl))+x(cm*Gl));Ql=x(x(x(_l*Rl)-x(Jl*Zl))-x(um*Fl));Kl=x(x(x(Pl*dm)+x(Tl*em))+x(Gl*mm));Gl=x(x(x(gm*Rl)-x(Kl*Zl))-x(wl*Fl));u[Al+72>>2]=x(x(Dl*fm)+x(x(Ql*vl)+x(Gl*Ol)))+x(x(x(sm*x(0))+x(x(tm*x(0))+x(xl*x(0))))+x(Nm+x(x(x(Hl*Yl)+x(Wl*Cl))+x(Xl*Ml))));u[Al+68>>2]=x(x(Dl*km)+x(x(Ql*lm)+x(Gl*vm)))+x(x(x(hm*x(0))+x(x(im*x(0))+x(jm*x(0))))+x(Mm+x(x(x(El*Yl)+x(zl*Cl))+x(yl*Ml))));q[Al+28>>2]=0;u[Al+48>>2]=x(Bl*fm)+x(x(Jl*vl)+x(Kl*Ol));u[Al+32>>2]=x(Bl*km)+x(x(Jl*lm)+x(Kl*vm));vl=x(x(x(Bm*Ll)+x(ym*Il))+x(zm*Sl));xl=x(x(x(Ll*qm)+x(Il*wm))+x(Sl*xm));zl=x(x(x(Ll*nm)+x(Il*om))+x(Sl*pm));yl=x(x(x(Dm*vl)+x(Em*xl))+x(Cm*zl));Fl=x(x(x(Gm*vl)+x(Hm*xl))+x(Fm*zl));El=wl;wl=x(x(x(Jm*vl)+x(Km*xl))+x(Im*zl));u[Al+24>>2]=x(rm*yl)+x(x(um*Fl)+x(El*wl));u[Al+20>>2]=x(Ul*yl)+x(x(_l*Fl)+x(gm*wl));u[Al+16>>2]=x(Bl*yl)+x(x(Jl*Fl)+x(Kl*wl));u[Al+64>>2]=x(x(Dl*yl)+x(x(Ql*Fl)+x(Gl*wl)))+x(x(x(x(vl*x(0))+x(xl*x(0)))+x(zl*x(0)))+x(Qm+x(x(x(Ll*Yl)+x(Il*Cl))+x(Sl*Ml))));ja(Al+16|0,Al);vl=u[Al>>2];wl=u[Al+4>>2];xl=u[Al+8>>2];zl=x(x(x(vl*vl)+x(wl*wl))+x(xl*xl));if(x(y(zl))<x(1.1920928955078125e-7)){break a}q[ab+472>>2]=0;zl=x(x(1)/x(E(zl)));u[ab+468>>2]=zl*xl;u[ab+464>>2]=zl*wl;u[ab+460>>2]=zl*vl;vl=Sa(x(A(x(B(u[Al+12>>2],x(-1))),x(1))));vl=x(vl+vl);u[ab+504>>2]=vl;if(x(y(vl))<x(1.1920928955078125e-7)){break a}o[ab+526|0]=1;break a}ja(ek,Al+16|0);ja(ab+300|0,Al);vl=u[Al+24>>2];wl=u[Al+8>>2];xl=u[Al+4>>2];yl=u[Al+20>>2];Fl=u[Al+12>>2];Sl=u[Al+28>>2];Il=u[Al+16>>2];Ll=u[Al>>2];ja(Vk,Al+16|0);ja(ab+364|0,Al);Rl=x(-0);Tl=x(1);Ol=x(x(x(Ll*vl)+x(x(Fl*yl)+x(Sl*xl)))-x(Il*wl));Gl=u[Al+28>>2];Pl=u[Al+8>>2];El=u[Al+12>>2];Dl=u[Al+24>>2];Hl=u[Al+16>>2];Yl=u[Al+4>>2];Cl=u[Al>>2];Ml=u[Al+20>>2];Bl=x(x(x(x(Gl*Pl)+x(El*Dl))+x(Hl*Yl))-x(Cl*Ml));Wl=x(x(x(x(Sl*Ll)+x(Il*Fl))+x(yl*wl))-x(vl*xl));Jl=x(x(x(x(Gl*El)-x(Cl*Hl))-x(Ml*Yl))-x(Pl*Dl));Xl=x(x(x(x(Sl*Fl)-x(Ll*Il))-x(yl*xl))-x(wl*vl));Kl=x(x(x(x(Gl*Cl)+x(Hl*El))+x(Ml*Pl))-x(Dl*Yl));Sl=x(x(x(x(Sl*wl)+x(Fl*vl))+x(Il*xl))-x(Ll*yl));Fl=x(x(x(Cl*Dl)+x(x(El*Ml)+x(Gl*Yl)))-x(Hl*Pl));Il=x(x(Ol*Bl)+x(x(x(Wl*Jl)-x(Xl*Kl))-x(Sl*Fl)));Ll=x(x(Wl*Fl)+x(x(x(Sl*Jl)-x(Xl*Bl))-x(Ol*Kl)));Gl=x(x(Sl*Bl)+x(x(x(Wl*Kl)+x(Xl*Jl))+x(Ol*Fl)));wl=x(Gl*x(0));xl=x(Il*x(0));vl=x(x(Ll+wl)-xl);Pl=x(x(Sl*Kl)+x(x(x(Ol*Jl)-x(Xl*Fl))-x(Wl*Bl)));wl=x(x(wl+xl)-Pl);yl=x(Pl*x(0));El=x(Ll*x(0));xl=x(x(x(-Il)-yl)-El);yl=x(x(Gl+yl)-El);El=x(x(Il*vl)+x(x(x(Gl*wl)-x(Ll*xl))-x(Pl*yl)));Dl=El;Cl=x(El*El);El=x(x(Pl*wl)+x(x(x(Gl*yl)-x(Il*xl))-x(Ll*vl)));vl=x(x(Ll*yl)+x(x(x(Gl*vl)-x(Pl*xl))-x(Il*wl)));wl=x(x(1)/x(E(x(Cl+x(x(El*El)+x(vl*vl))))));yl=x(Dl*wl);vl=x(vl*wl);xl=x(El*wl);wl=x(x(yl*x(0))+x(x(vl*x(0))+xl));if(!(wl<x(-.9999998807907104))){Tl=x(xl*x(0));wl=x(wl+x(1));wl=x(E(x(wl+wl)));xl=x(x(1)/wl);zl=x(x(vl-Tl)*xl);Rl=x(x(x(yl*x(0))-x(vl*x(0)))*xl);Ql=x(wl*x(.5));Tl=x(x(Tl-yl)*xl);}vl=x(x(1)/x(E(x(x(x(x(Rl*Rl)+x(Tl*Tl))+x(zl*zl))+x(Ql*Ql)))));Tl=x(Tl*vl);Yl=x(Ql*vl);El=x(zl*vl);Rl=x(Rl*vl);b:{c:{wl=u[ab+444>>2];Cl=u[ab+456>>2];Lm=wl>=Cl;if(!Lm){break c}Dl=u[ab+448>>2];if(!(Dl>=Cl)){break c}yl=Sa(x(A(x(B(Yl,x(-1))),x(1))));Hl=x(yl+yl);vl=x(0);d:{if(!(Hl>x(1.1920928955078125e-7))){break d}yl=x(x(1)/x(E(x(x(El*El)+x(x(Rl*Rl)+x(Tl*Tl))))));xl=x(El*yl);zl=x(Rl*yl);yl=x(Tl*yl);vl=wl;if(!(x(y(yl))>x(1.1920928955078125e-7))){break d}vl=x(x(xl*xl)/x(yl*yl));vl=x(E(x(x(vl+x(1))/x(x(vl/x(wl*wl))+x(x(1)/x(Dl*Dl))))));}Nl=u[ab+428>>2];Cl=x(vl*Nl);if(!(Hl>Cl)){break b}o[ab+526|0]=1;Ql=x(1);Ml=x(Hl-Cl);u[ab+504>>2]=Ml;u[ab+528>>2]=Hl<vl^1|Nl<x(.9999998807907104)^1?Ql:x(Ml/x(vl-Cl));if(!!(x(y(yl))>x(1.1920928955078125e-7))){vl=x(y(x(yl*x(x(Dl/wl)*x(x(-xl)/yl)))));vl=xl<x(0)?vl:x(-vl);wl=x(x(1)/x(E(x(x(x(zl*zl)+x(yl*yl))+x(vl*vl)))));xl=x(wl*x(-vl));yl=x(yl*wl);zl=x(zl*wl);}q[ab+536>>2]=0;q[ab+540>>2]=0;q[ab+472>>2]=0;q[ab+544>>2]=0;q[ab+548>>2]=0;vl=x(-yl);Dl=x(x(x(Jl*vl)-x(Bl*zl))+x(Kl*xl));Hl=x(x(Fl*zl)+x(x(Kl*vl)-x(Jl*xl)));Cl=x(x(x(Kl*zl)+x(Fl*yl))+x(Bl*xl));xl=x(x(Bl*yl)+x(x(Fl*x(-xl))-x(Jl*zl)));vl=x(x(Kl*Dl)+x(x(x(Jl*Hl)-x(Bl*Cl))-x(Fl*xl)));u[ab+468>>2]=vl;wl=x(x(Bl*xl)+x(x(x(Jl*Dl)-x(Fl*Cl))-x(Kl*Hl)));u[ab+464>>2]=wl;xl=x(x(Fl*Hl)+x(x(x(Jl*xl)-x(Kl*Cl))-x(Bl*Dl)));u[ab+460>>2]=xl;u[ab+492>>2]=x(1)/x(x(x(x(xl*x(x(x(xl*u[tl>>2])+x(u[tl+16>>2]*wl))+x(u[tl+32>>2]*vl)))+x(wl*x(x(x(xl*u[tl+4>>2])+x(wl*u[tl+20>>2]))+x(vl*u[tl+36>>2]))))+x(vl*x(x(x(xl*u[tl+8>>2])+x(wl*u[tl+24>>2]))+x(vl*u[tl+40>>2]))))+x(x(x(xl*x(x(x(xl*u[ul>>2])+x(wl*u[ul+16>>2]))+x(vl*u[ul+32>>2])))+x(wl*x(x(x(xl*u[ul+4>>2])+x(wl*u[ul+20>>2]))+x(vl*u[ul+36>>2]))))+x(vl*x(x(x(xl*u[ul+8>>2])+x(wl*u[ul+24>>2]))+x(vl*u[ul+40>>2])))));break b}zl=u[ek>>2];vl=u[ab+308>>2];Ml=u[ek+4>>2];xl=u[ab+324>>2];Ql=u[ek+8>>2];Hl=u[ab+340>>2];mm=x(x(x(zl*vl)+x(Ml*xl))+x(Ql*Hl));Nl=u[ab+364>>2];Vl=u[ab+380>>2];Zl=u[ab+396>>2];yl=x(x(x(Nl*u[Vk>>2])+x(Vl*u[Vk+4>>2]))+x(Zl*u[Vk+8>>2]));$l=u[ek+16>>2];am=u[ek+20>>2];bm=u[ek+24>>2];nm=x(x(x($l*vl)+x(am*xl))+x(bm*Hl));Dl=x(x(x(Nl*u[Vk+16>>2])+x(Vl*u[Vk+20>>2]))+x(Zl*u[Vk+24>>2]));cm=u[ek+32>>2];dm=u[ek+36>>2];em=u[ek+40>>2];om=x(x(x(cm*vl)+x(dm*xl))+x(em*Hl));Hl=x(x(x(Nl*u[Vk+32>>2])+x(Vl*u[Vk+36>>2]))+x(Zl*u[Vk+40>>2]));vl=x(x(x(mm*yl)+x(nm*Dl))+x(om*Hl));xl=u[ab+304>>2];Nl=u[ab+320>>2];Vl=u[ab+336>>2];Zl=x(x(x(zl*xl)+x(Ml*Nl))+x(Ql*Vl));pm=x(x(x($l*xl)+x(am*Nl))+x(bm*Vl));qm=x(x(x(cm*xl)+x(dm*Nl))+x(em*Vl));xl=x(x(x(Zl*yl)+x(pm*Dl))+x(qm*Hl));Nl=u[ab+300>>2];Ul=x(Nl*zl);zl=u[ab+316>>2];Vl=u[ab+332>>2];Ml=x(x(Ul+x(zl*Ml))+x(Vl*Ql));Ql=x(x(x(Nl*$l)+x(zl*am))+x(Vl*bm));Nl=x(x(x(Nl*cm)+x(zl*dm))+x(Vl*em));zl=x(x(x(Ml*yl)+x(Ql*Dl))+x(Nl*Hl));e:{if(!!(wl<Cl)){wl=u[ab+448>>2];if(!!(wl<Cl)){if(x(y(vl))<x(1.1920928955078125e-7)?!!(x(y(xl))<x(1.1920928955078125e-7)):0){break b}o[ab+526|0]=1;q[ab+472>>2]=0;u[ab+468>>2]=-x(x(Ql*yl)-x(Ml*Dl));u[ab+464>>2]=-x(x(Ml*Hl)-x(Nl*yl));u[ab+460>>2]=-x(x(Nl*Dl)-x(Ql*Hl));break b}if(x(y(vl))<x(1.1920928955078125e-7)?!!(x(y(zl))<x(1.1920928955078125e-7)):0){break e}o[ab+526|0]=1;if(!(wl>=Cl)){break e}Cl=$(vl,zl);if(!!(Cl>wl)){vl=ga(wl);zl=fa(wl);xl=x(0);break e}xl=x(0);if(!(Cl<x(-wl))){break e}zl=fa(wl);vl=x(-ga(wl));break e}if(x(y(xl))<x(1.1920928955078125e-7)?!!(x(y(zl))<x(1.1920928955078125e-7)):0){break e}o[ab+526|0]=1;if(!Lm){break e}Cl=$(xl,zl);if(!!(Cl>wl)){xl=ga(wl);zl=fa(wl);vl=x(0);break e}vl=x(0);if(!(Cl<x(-wl))){break e}zl=fa(wl);xl=x(-ga(wl));}q[ab+472>>2]=0;wl=x(x(om*vl)+x(x(qm*xl)+x(Nl*zl)));Cl=x(x(mm*vl)+x(x(Zl*xl)+x(Ml*zl)));xl=x(x(nm*vl)+x(x(pm*xl)+x(Ql*zl)));vl=x(x(1)/x(E(x(x(wl*wl)+x(x(Cl*Cl)+x(xl*xl))))));zl=x(xl*vl);Cl=x(Cl*vl);xl=x(x(yl*zl)-x(Dl*Cl));Ml=x(-xl);u[ab+468>>2]=Ml;wl=x(wl*vl);vl=x(x(Hl*Cl)-x(yl*wl));yl=x(-vl);u[ab+464>>2]=yl;wl=x(x(Dl*wl)-x(Hl*zl));zl=x(-wl);u[ab+460>>2]=zl;vl=x(E(x(x(x(wl*wl)+x(vl*vl))+x(xl*xl))));u[ab+504>>2]=vl;if(x(y(vl))<x(1.1920928955078125e-7)){break b}vl=x(x(1)/vl);u[ab+468>>2]=vl*Ml;u[ab+464>>2]=vl*yl;u[ab+460>>2]=vl*zl;}Dl=u[ab+452>>2];if(!!(Dl>=x(0))){yl=x(x(Ll*El)+x(x(Pl*Tl)+x(x(Gl*Yl)+x(Il*Rl))));vl=x(x(Il*Tl)+x(x(x(Ll*Yl)-x(Gl*El))-x(Pl*Rl)));wl=x(x(Pl*El)+x(x(x(Il*Yl)-x(Gl*Rl))-x(Ll*Tl)));xl=x(x(Ll*Rl)+x(x(x(Pl*Yl)-x(Gl*Tl))-x(Il*El)));zl=x(x(1)/x(E(x(x(yl*yl)+x(x(vl*vl)+x(x(wl*wl)+x(xl*xl)))))));vl=x(vl*zl);xl=x(xl*zl);wl=x(wl*zl);zl=x(yl*zl);yl=Sa(x(A(x(B(zl,x(-1))),x(1))));yl=x(yl+yl);if(!!(yl>x(3.1415927410125732))){zl=Sa(x(A(x(B(x(-zl),x(-1))),x(1))));yl=x(zl+zl);xl=x(-xl);wl=x(-wl);vl=x(-vl);}u[ab+512>>2]=yl;if(!!(yl>x(1.1920928955078125e-7))){zl=x(x(1)/x(E(x(x(x(wl*wl)+x(xl*xl))+x(vl*vl)))));vl=x(vl*zl);xl=x(xl*zl);wl=x(wl*zl);}Ll=u[ab+428>>2];Il=x(Dl*Ll);if(!!(yl>Il)){o[ab+525|0]=1;Gl=x(yl-Il);u[ab+508>>2]=Gl;ek=ab;El=x(1);f:{if(!(yl<Dl)){break f}El=x(1);if(!(Ll<x(.9999998807907104))){break f}El=x(Gl/x(Dl-Il));}u[ek+532>>2]=El;q[ab+488>>2]=0;zl=x(-xl);Il=x(x(x(Jl*zl)-x(Bl*wl))+x(Kl*vl));Ll=x(x(Fl*wl)+x(x(Kl*zl)-x(Jl*vl)));Gl=x(x(x(Kl*wl)+x(Fl*xl))+x(Bl*vl));Pl=x(x(Bl*xl)+x(x(Fl*x(-vl))-x(Jl*wl)));zl=x(x(Kl*Il)+x(x(x(Jl*Ll)-x(Bl*Gl))-x(Fl*Pl)));u[ab+484>>2]=zl;yl=x(x(Bl*Pl)+x(x(x(Jl*Il)-x(Fl*Gl))-x(Kl*Ll)));u[ab+480>>2]=yl;Bl=x(x(Fl*Ll)+x(x(x(Jl*Pl)-x(Kl*Gl))-x(Bl*Il)));u[ab+476>>2]=Bl;u[ab+496>>2]=x(1)/x(x(x(x(Bl*x(x(x(Bl*u[tl>>2])+x(u[tl+16>>2]*yl))+x(u[tl+32>>2]*zl)))+x(yl*x(x(x(Bl*u[tl+4>>2])+x(yl*u[tl+20>>2]))+x(zl*u[tl+36>>2]))))+x(zl*x(x(x(Bl*u[tl+8>>2])+x(yl*u[tl+24>>2]))+x(zl*u[tl+40>>2]))))+x(x(x(Bl*x(x(x(Bl*u[ul>>2])+x(yl*u[ul+16>>2]))+x(zl*u[ul+32>>2])))+x(yl*x(x(x(Bl*u[ul+4>>2])+x(yl*u[ul+20>>2]))+x(zl*u[ul+36>>2]))))+x(zl*x(x(x(Bl*u[ul+8>>2])+x(yl*u[ul+24>>2]))+x(zl*u[ul+40>>2])))));}if(!r[ab+526|0]){break a}q[ab+548>>2]=0;yl=x(-xl);zl=x(x(x(Xl*yl)-x(Sl*wl))+x(Wl*vl));yl=x(x(Ol*wl)+x(x(Wl*yl)-x(Xl*vl)));Bl=x(x(x(Wl*wl)+x(Ol*xl))+x(Sl*vl));vl=x(x(Sl*xl)+x(x(Ol*x(-vl))-x(Xl*wl)));u[ab+544>>2]=x(Wl*zl)+x(x(x(Xl*yl)-x(Sl*Bl))-x(Ol*vl));u[ab+540>>2]=x(Sl*vl)+x(x(x(Xl*zl)-x(Ol*Bl))-x(Wl*yl));u[ab+536>>2]=x(Ol*yl)+x(x(x(Xl*vl)-x(Wl*Bl))-x(Sl*zl));break a}q[ab+512>>2]=0;}P=Al+80|0;}function xd(ab,ek,Vk){var tl=x(0),ul=x(0),Sm=x(0),Tm=x(0),Um=x(0),Vm=x(0),Wm=x(0),Xm=x(0),Ym=x(0),Zm=x(0),_m=x(0),$m=x(0),an=x(0),bn=x(0),cn=x(0),dn=x(0),en=x(0),fn=x(0),gn=x(0),hn=x(0),jn=x(0),kn=x(0),ln=x(0),mn=x(0),nn=0,on=x(0),pn=0;nn=r[ab+180|0];a:{if(!(r[ab+48|0]?!nn:0)){kn=u[ek+52>>2];ln=u[ek+56>>2];Zm=u[ab+100>>2];_m=u[ab+104>>2];$m=u[ab+108>>2];tl=u[ek+20>>2];ul=u[ek+24>>2];an=u[ab+68>>2];hn=u[ab+84>>2];bn=u[ab+56>>2];cn=u[ab+72>>2];dn=u[ab+88>>2];jn=u[ab+60>>2];Sm=u[ek+36>>2];en=u[ab+76>>2];Wm=u[ek+40>>2];fn=u[ab+92>>2];mn=u[ek+48>>2];Um=u[ek+8>>2];Tm=u[ek>>2];Vm=u[ek+4>>2];Xm=u[ek+16>>2];gn=u[ab+52>>2];Ym=u[ek+32>>2];q[ab+884>>2]=0;q[ab+868>>2]=0;q[ab+852>>2]=0;q[ab+836>>2]=0;u[ab+864>>2]=x(x(jn*Ym)+x(en*Sm))+x(fn*Wm);u[ab+860>>2]=x(x(bn*Ym)+x(cn*Sm))+x(dn*Wm);u[ab+856>>2]=x(x(gn*Ym)+x(an*Sm))+x(hn*Wm);u[ab+848>>2]=x(x(jn*Xm)+x(en*tl))+x(fn*ul);u[ab+844>>2]=x(x(bn*Xm)+x(cn*tl))+x(dn*ul);u[ab+840>>2]=x(x(gn*Xm)+x(an*tl))+x(hn*ul);u[ab+832>>2]=x(x(Tm*jn)+x(Vm*en))+x(Um*fn);u[ab+828>>2]=x(x(Tm*bn)+x(Vm*cn))+x(Um*dn);u[ab+824>>2]=x(x(gn*Tm)+x(an*Vm))+x(hn*Um);u[ab+880>>2]=ln+x(x(x(Ym*Zm)+x(Sm*_m))+x(Wm*$m));u[ab+876>>2]=kn+x(x(x(Xm*Zm)+x(tl*_m))+x(ul*$m));u[ab+872>>2]=mn+x(x(x(Tm*Zm)+x(Vm*_m))+x(Um*$m));tl=u[Vk+16>>2];Vm=u[ab+164>>2];ul=u[Vk+20>>2];Xm=u[ab+168>>2];Sm=u[Vk+24>>2];Ym=u[ab+172>>2];Zm=x(x(x(tl*Vm)+x(ul*Xm))+x(Sm*Ym));_m=u[ab+124>>2];Wm=u[Vk+32>>2];$m=u[ab+140>>2];Um=u[Vk+36>>2];an=u[ab+156>>2];Tm=u[Vk+40>>2];hn=x(x(x(_m*Wm)+x($m*Um))+x(an*Tm));bn=u[ab+120>>2];cn=u[ab+136>>2];dn=u[ab+152>>2];jn=x(x(x(bn*Wm)+x(cn*Um))+x(dn*Tm));en=u[ab+116>>2];fn=u[ab+132>>2];gn=u[ab+148>>2];kn=x(x(x(en*Wm)+x(fn*Um))+x(gn*Tm));ln=x(x(x(_m*tl)+x($m*ul))+x(an*Sm));mn=x(x(x(bn*tl)+x(cn*ul))+x(dn*Sm));on=x(x(x(en*tl)+x(fn*ul))+x(gn*Sm));Tm=x(Tm*Ym);Wm=x(x(Wm*Vm)+x(Um*Xm));tl=u[Vk>>2];ul=u[Vk+4>>2];Sm=u[Vk+8>>2];Vm=x(x(x(tl*Vm)+x(ul*Xm))+x(Sm*Ym));Xm=x(x(x(tl*_m)+x(ul*$m))+x(Sm*an));Um=x(x(x(tl*bn)+x(ul*cn))+x(Sm*dn));tl=x(x(x(en*tl)+x(fn*ul))+x(gn*Sm));break a}kn=u[Vk+52>>2];ln=u[Vk+56>>2];Zm=u[ab+164>>2];_m=u[ab+168>>2];$m=u[ab+172>>2];tl=u[Vk+20>>2];ul=u[Vk+24>>2];an=u[ab+132>>2];hn=u[ab+148>>2];bn=u[ab+120>>2];cn=u[ab+136>>2];dn=u[ab+152>>2];jn=u[ab+124>>2];Sm=u[Vk+36>>2];en=u[ab+140>>2];Wm=u[Vk+40>>2];fn=u[ab+156>>2];mn=u[Vk+48>>2];Um=u[Vk+8>>2];Tm=u[Vk>>2];Vm=u[Vk+4>>2];Xm=u[Vk+16>>2];gn=u[ab+116>>2];Ym=u[Vk+32>>2];q[ab+884>>2]=0;q[ab+868>>2]=0;q[ab+852>>2]=0;q[ab+836>>2]=0;u[ab+864>>2]=x(x(jn*Ym)+x(en*Sm))+x(fn*Wm);u[ab+860>>2]=x(x(bn*Ym)+x(cn*Sm))+x(dn*Wm);u[ab+856>>2]=x(x(gn*Ym)+x(an*Sm))+x(hn*Wm);u[ab+848>>2]=x(x(jn*Xm)+x(en*tl))+x(fn*ul);u[ab+844>>2]=x(x(bn*Xm)+x(cn*tl))+x(dn*ul);u[ab+840>>2]=x(x(gn*Xm)+x(an*tl))+x(hn*ul);u[ab+832>>2]=x(x(Tm*jn)+x(Vm*en))+x(Um*fn);u[ab+828>>2]=x(x(Tm*bn)+x(Vm*cn))+x(Um*dn);u[ab+824>>2]=x(x(gn*Tm)+x(an*Vm))+x(hn*Um);u[ab+880>>2]=ln+x(x(x(Ym*Zm)+x(Sm*_m))+x(Wm*$m));u[ab+876>>2]=kn+x(x(x(Xm*Zm)+x(tl*_m))+x(ul*$m));u[ab+872>>2]=mn+x(x(x(Tm*Zm)+x(Vm*_m))+x(Um*$m));tl=u[ek+16>>2];Vm=u[ab+100>>2];ul=u[ek+20>>2];Xm=u[ab+104>>2];Sm=u[ek+24>>2];Ym=u[ab+108>>2];Zm=x(x(x(tl*Vm)+x(ul*Xm))+x(Sm*Ym));_m=u[ab+60>>2];Wm=u[ek+32>>2];$m=u[ab+76>>2];Um=u[ek+36>>2];an=u[ab+92>>2];Tm=u[ek+40>>2];hn=x(x(x(_m*Wm)+x($m*Um))+x(an*Tm));bn=u[ab+56>>2];cn=u[ab+72>>2];dn=u[ab+88>>2];jn=x(x(x(bn*Wm)+x(cn*Um))+x(dn*Tm));en=u[ab+52>>2];fn=u[ab+68>>2];gn=u[ab+84>>2];kn=x(x(x(en*Wm)+x(fn*Um))+x(gn*Tm));ln=x(x(x(_m*tl)+x($m*ul))+x(an*Sm));mn=x(x(x(bn*tl)+x(cn*ul))+x(dn*Sm));on=x(x(x(en*tl)+x(fn*ul))+x(gn*Sm));Tm=x(Tm*Ym);Wm=x(x(Wm*Vm)+x(Um*Xm));tl=u[ek>>2];ul=u[ek+4>>2];Sm=u[ek+8>>2];Vm=x(x(x(tl*Vm)+x(ul*Xm))+x(Sm*Ym));Xm=x(x(x(tl*_m)+x(ul*$m))+x(Sm*an));Um=x(x(x(tl*bn)+x(ul*cn))+x(Sm*dn));Vk=ek;tl=x(x(x(en*tl)+x(fn*ul))+x(gn*Sm));}ul=u[Vk+56>>2];Sm=u[Vk+52>>2];u[ab+936>>2]=u[Vk+48>>2]+Vm;q[ab+932>>2]=0;u[ab+928>>2]=hn;u[ab+924>>2]=jn;u[ab+920>>2]=kn;q[ab+916>>2]=0;u[ab+912>>2]=ln;u[ab+908>>2]=mn;u[ab+904>>2]=on;q[ab+900>>2]=0;u[ab+896>>2]=Xm;u[ab+892>>2]=Um;u[ab+888>>2]=tl;q[ab+948>>2]=0;u[ab+940>>2]=Zm+Sm;u[ab+944>>2]=ul+x(Wm+Tm);ek=q[ab+876>>2];q[ab+968>>2]=q[ab+872>>2];q[ab+972>>2]=ek;ek=q[ab+884>>2];q[ab+976>>2]=q[ab+880>>2];q[ab+980>>2]=ek;ek=q[ab+948>>2];q[ab+992>>2]=q[ab+944>>2];q[ab+996>>2]=ek;ek=q[ab+940>>2];q[ab+984>>2]=q[ab+936>>2];q[ab+988>>2]=ek;Sm=u[ab+840>>2];ek=q[ab+840>>2];ul=u[ab+856>>2];Vk=q[ab+856>>2];Wm=u[ab+824>>2];pn=q[ab+824>>2];q[ab+964>>2]=0;q[ab+960>>2]=Vk;q[ab+956>>2]=ek;q[ab+952>>2]=pn;ek=ab;b:{if(!(r[ab+48|0]?0:!nn)){Um=u[ab+976>>2];Tm=x(u[ab+992>>2]-Um);Ym=u[ab+972>>2];Vm=x(u[ab+988>>2]-Ym);Zm=u[ab+968>>2];tl=x(u[ab+984>>2]-Zm);break b}Um=u[ab+976>>2];Tm=x(Um-u[ab+992>>2]);Ym=u[ab+972>>2];Vm=x(Ym-u[ab+988>>2]);Zm=u[ab+968>>2];tl=x(Zm-u[ab+984>>2]);}u[ek+1016>>2]=tl;q[ab+1028>>2]=0;u[ab+1024>>2]=Tm;u[ab+1020>>2]=Vm;q[ab+1012>>2]=0;Xm=x(x(x(tl*Wm)+x(Vm*Sm))+x(Tm*ul));u[ab+1032>>2]=Xm;u[ab+1008>>2]=Um+x(Xm*ul);u[ab+1004>>2]=Ym+x(Xm*Sm);u[ab+1e3>>2]=Zm+x(Xm*Wm);u[ab+1036>>2]=x(x(tl*u[ab+828>>2])+x(Vm*u[ab+844>>2]))+x(Tm*u[ab+860>>2]);u[ab+1040>>2]=x(x(tl*u[ab+832>>2])+x(Vm*u[ab+848>>2]))+x(Tm*u[ab+864>>2]);}function yd(ab){return 52}function zd(){var ab=0;ab=P-16|0;P=ab;if(!(!!(r[23108]!=0)|o[23108]&1)){q[ab+8>>2]=0;q[ab+12>>2]=0;q[ab>>2]=0;q[ab+4>>2]=0;Xf(22432,ab);q[5777]=0;q[5777]=q[5777]|1;}q[ab+8>>2]=0;q[ab+12>>2]=0;q[ab>>2]=0;q[ab+4>>2]=0;Jd(22432,x(0),ab);P=ab+16|0;return 22432}function Ad(ek,Vk,qn){q[ek+28>>2]=qn;q[ek+24>>2]=-1;p[ek+20>>1]=1;q[ek+16>>2]=2139095039;q[ek+8>>2]=-1;q[ek+12>>2]=-1;q[ek>>2]=3532;q[ek+4>>2]=Vk;zd();q[ek+44>>2]=0;q[ek+36>>2]=0;q[ek+40>>2]=1028443341;q[ek+32>>2]=22432;}function Bd(ek,Vk){var qn=x(0),rn=x(0),sn=x(0),tn=x(0),un=0,vn=x(0);rn=u[((Vk<<2)+ek|0)+1364>>2];un=w(Vk,88)+ek|0;sn=u[un+968>>2];tn=u[un+972>>2];a:{if(sn>=tn){break a}if(!!(rn<sn)){qn=ea(x(sn-rn),x(6.2831854820251465));b:{if(!!(qn<x(-3.1415927410125732))){qn=x(qn+x(6.2831854820251465));break b}if(!(qn>x(3.1415927410125732))){break b}qn=x(qn+x(-6.2831854820251465));}vn=x(y(qn));qn=ea(x(tn-rn),x(6.2831854820251465));c:{if(!!(qn<x(-3.1415927410125732))){qn=x(qn+x(6.2831854820251465));break c}if(!(qn>x(3.1415927410125732))){break c}qn=x(qn+x(-6.2831854820251465));}rn=vn<x(y(qn))?rn:x(rn+x(6.2831854820251465));break a}if(!(rn>tn)){break a}qn=ea(x(rn-tn),x(6.2831854820251465));d:{if(!!(qn<x(-3.1415927410125732))){qn=x(qn+x(6.2831854820251465));break d}if(!(qn>x(3.1415927410125732))){break d}qn=x(qn+x(-6.2831854820251465));}vn=x(y(qn));qn=ea(x(rn-sn),x(6.2831854820251465));e:{if(!!(qn<x(-3.1415927410125732))){qn=x(qn+x(6.2831854820251465));break e}if(!(qn>x(3.1415927410125732))){break e}qn=x(qn+x(-6.2831854820251465));}rn=x(y(qn))<vn?x(rn+x(-6.2831854820251465)):rn;}u[un+1048>>2]=rn;if(!!(sn>tn)){ek=w(Vk,88)+ek|0;q[ek+1040>>2]=0;q[ek+1052>>2]=0;return}ek=w(Vk,88)+ek|0;u[ek+1040>>2]=rn-sn;if(sn==tn){q[ek+1052>>2]=3;return}q[ek+1052>>2]=4;u[ek+1044>>2]=rn-tn;}function Cd(ek,Vk,wn,xn,yn,zn,An,Bn,Cn,Dn,En,Fn,Gn){var Hn=x(0),In=x(0),Jn=x(0),Kn=x(0),Ln=x(0),Mn=x(0),Nn=0,On=0,Pn=0,Qn=0,Rn=x(0),Sn=x(0),Tn=x(0),Un=x(0),Vn=x(0),Wn=x(0),Xn=0,Yn=0,Zn=x(0),_n=x(0),$n=x(0),ao=x(0),bo=x(0),co=x(0),eo=x(0),fo=0,go=0,ho=0,io=x(0),jo=0,ko=x(0);On=P-16|0;P=On;Qn=q[Cn+24>>2];jo=r[Vk+44|0];Yn=q[Vk+56>>2];a:{if(Yn?0:!jo){break a}fo=q[(Fn?20:16)+Cn>>2];Xn=q[(Fn?12:8)+Cn>>2];Nn=w(Dn,Qn);Pn=Nn<<2;q[Xn+Pn>>2]=q[En>>2];go=Nn+1|0;Qn=go<<2;q[Qn+Xn>>2]=q[En+4>>2];ho=Nn+2|0;Dn=ho<<2;q[Xn+Dn>>2]=q[En+8>>2];u[Pn+fo>>2]=-u[En>>2];u[Qn+fo>>2]=-u[En+4>>2];u[Dn+fo>>2]=-u[En+8>>2];b:{if(Fn){break b}if(r[ek+1301|0]){In=u[ek+1112>>2];$n=u[wn+52>>2];Rn=u[ek+1116>>2];Wn=u[wn+56>>2];Ln=u[ek+1120>>2];ao=u[ek+1176>>2];bo=u[xn+52>>2];co=u[ek+1180>>2];eo=u[xn+56>>2];Mn=u[ek+1184>>2];Zn=u[ek+1276>>2];_n=u[ek+1272>>2];Sn=u[Vk+48>>2];Kn=u[Vk+52>>2];Jn=u[wn+48>>2];Tn=u[En>>2];Hn=u[xn+48>>2];Un=u[En+4>>2];Vn=u[En+8>>2];q[On+12>>2]=0;In=x(In-Jn);Rn=x(Rn-$n);Ln=x(Ln-Wn);io=x(x(x(Tn*In)+x(Un*Rn))+x(Vn*Ln));Jn=x(Tn*io);Wn=x(Kn-Sn);ao=x(ao-Hn);bo=x(co-bo);co=x(Mn-eo);Kn=x(x(x(Tn*ao)+x(Un*bo))+x(Vn*co));eo=x(Tn*Kn);ko=x(x(Jn+x(Tn*Wn))-eo);Hn=x(Un*io);Mn=x(Un*Kn);$n=x(x(Hn+x(Un*Wn))-Mn);In=x(x(In-Jn)+x(_n*ko));Jn=x(x(Rn-Hn)+x(_n*$n));Sn=x(x(Un*In)-x(Tn*Jn));u[On+8>>2]=Sn;Hn=x(Vn*io);Kn=x(Vn*Kn);Wn=x(x(Hn+x(Vn*Wn))-Kn);Hn=x(x(Ln-Hn)+x(_n*Wn));Rn=x(x(Tn*Hn)-x(Vn*In));u[On+4>>2]=Rn;Ln=x(x(Vn*Jn)-x(Un*Hn));u[On>>2]=Ln;In=x(x(ao-eo)-x(Zn*ko));Jn=x(x(bo-Mn)-x(Zn*$n));Mn=x(x(Un*In)-x(Tn*Jn));Hn=x(x(co-Kn)-x(Zn*Wn));In=x(x(Tn*Hn)-x(Vn*In));Kn=x(x(Vn*Jn)-x(Un*Hn));if(!(!r[ek+1280|0]|Gn)){u[On+8>>2]=_n*Sn;u[On+4>>2]=_n*Rn;u[On>>2]=_n*Ln;Mn=x(Zn*Mn);Kn=x(Zn*Kn);In=x(Zn*In);}ek=q[On+4>>2];wn=Nn<<2;xn=wn+q[Cn+12>>2]|0;q[xn>>2]=q[On>>2];q[xn+4>>2]=ek;q[xn+8>>2]=q[On+8>>2];ek=q[Cn+20>>2];u[ek+wn>>2]=-Kn;u[ek+(go<<2)>>2]=-In;u[ek+(ho<<2)>>2]=-Mn;break b}Pn=ek+1176|0;Kn=u[Pn>>2];Rn=u[wn+48>>2];Sn=u[En>>2];Xn=q[Cn+12>>2];Qn=Nn<<2;Gn=ek+1180|0;Ln=x(u[Gn>>2]-u[wn+52>>2]);In=u[En+8>>2];Dn=ek+1184|0;Hn=x(u[Dn>>2]-u[wn+56>>2]);Jn=u[En+4>>2];u[Xn+Qn>>2]=x(Ln*In)-x(Hn*Jn);wn=go<<2;Mn=x(Hn*Sn);Hn=x(Kn-Rn);u[wn+Xn>>2]=Mn-x(In*Hn);ek=ho<<2;u[ek+Xn>>2]=x(Hn*Jn)-x(Ln*Sn);Kn=u[Pn>>2];Rn=u[xn+48>>2];Sn=u[En>>2];Pn=Qn;Qn=q[Cn+20>>2];Ln=x(u[Gn>>2]-u[xn+52>>2]);In=u[En+8>>2];Hn=x(u[Dn>>2]-u[xn+56>>2]);Jn=u[En+4>>2];u[Pn+Qn>>2]=-x(x(Ln*In)-x(Hn*Jn));Mn=x(Hn*Sn);Hn=x(Kn-Rn);u[wn+Qn>>2]=-x(Mn-x(In*Hn));u[ek+Qn>>2]=-x(x(Hn*Jn)-x(Ln*Sn));}c:{if(!(!Yn|u[Vk>>2]!=u[Vk+4>>2])){wn=q[Cn+28>>2];q[wn+(Nn<<2)>>2]=0;break c}wn=q[Cn+28>>2];ek=Nn<<2;q[wn+ek>>2]=0;if(jo){q[ek+q[Cn+32>>2]>>2]=q[Vk+28>>2];if(Yn){break c}Hn=u[Vk+8>>2];Hn=jb(u[Vk+52>>2],u[Vk>>2],u[Vk+4>>2],Fn?Hn:x(-Hn),x(u[Cn>>2]*u[Vk+32>>2]));wn=Nn<<2;ek=wn+q[Cn+28>>2]|0;u[ek>>2]=x(Hn*u[Vk+8>>2])+u[ek>>2];u[wn+q[Cn+36>>2]>>2]=-u[Vk+12>>2];q[wn+q[Cn+40>>2]>>2]=q[Vk+12>>2];Pn=1;break a}if(Yn){break c}Pn=1;break a}Jn=x(u[Cn>>2]*u[Vk+32>>2]);Hn=u[Vk+48>>2];d:{if(!Fn){ek=(Nn<<2)+wn|0;u[ek>>2]=x(Jn*Hn)+u[ek>>2];break d}ek=(Nn<<2)+wn|0;u[ek>>2]=u[ek>>2]-x(Jn*Hn);}xn=Nn<<2;q[xn+q[Cn+32>>2]>>2]=q[Vk+36>>2];if(u[Vk>>2]==u[Vk+4>>2]){q[xn+q[Cn+36>>2]>>2]=-8388609;q[xn+q[Cn+40>>2]>>2]=2139095039;Pn=1;break a}Pn=1;ek=(Yn|0)==1;u[xn+q[Cn+36>>2]>>2]=ek?x(0):x(-3.4028234663852886e+38);u[xn+q[Cn+40>>2]>>2]=ek?x(3.4028234663852886e+38):x(0);Ln=u[Vk+40>>2];if(!(Ln>x(0))){break a}e:{if(Fn){In=u[En+8>>2];Mn=x(u[An+8>>2]*In);Kn=u[En>>2];Jn=u[En+4>>2];Hn=x(x(u[An>>2]*Kn)+x(u[An+4>>2]*Jn));break e}In=u[En+8>>2];Mn=x(u[yn+8>>2]*In);Bn=zn;Kn=u[En>>2];Jn=u[En+4>>2];Hn=x(x(u[yn>>2]*Kn)+x(u[yn+4>>2]*Jn));}Hn=x(x(Hn+Mn)-x(x(x(Kn*u[Bn>>2])+x(Jn*u[Bn+4>>2]))+x(In*u[Bn+8>>2])));if((Yn|0)==1){if(!(Hn<x(0))){break a}Hn=x(Hn*x(-Ln));ek=(Nn<<2)+wn|0;if(!(Hn>u[ek>>2])){break a}u[ek>>2]=Hn;break a}if(!(Hn>x(0))){break a}Hn=x(Hn*x(-Ln));ek=(Nn<<2)+wn|0;if(!(Hn<u[ek>>2])){break a}u[ek>>2]=Hn;}P=On+16|0;return Pn}function Dd(ek,Vk,wn){var xn=0,yn=x(0),zn=x(0),An=x(0),Bn=x(0),Cn=x(0),Dn=x(0),En=x(0),Fn=x(0),Gn=x(0),lo=x(0),mo=x(0),no=x(0),oo=x(0),po=x(0),qo=x(0),ro=x(0),so=x(0),to=x(0),uo=x(0),vo=x(0),wo=x(0);xn=q[ek+32>>2];Cn=u[xn+36>>2];Dn=u[xn+20>>2];En=u[xn+4>>2];Gn=u[xn+40>>2];Fn=u[xn+24>>2];qo=u[xn+8>>2];lo=u[xn+44>>2];An=u[xn+28>>2];ro=u[xn+12>>2];ek=q[ek+28>>2];oo=u[ek+36>>2];po=u[ek+4>>2];so=u[ek+20>>2];mo=u[ek+40>>2];to=u[ek+8>>2];uo=u[ek+24>>2];no=u[ek+44>>2];vo=u[ek+12>>2];wo=u[ek+28>>2];q[Vk+8>>2]=0;q[Vk+12>>2]=0;q[Vk>>2]=0;q[Vk+4>>2]=0;zn=u[wn+8>>2];yn=u[wn>>2];Bn=u[wn+4>>2];q[Vk+28>>2]=0;no=x(x(x(vo*yn)+x(wo*Bn))+x(no*zn));u[Vk+24>>2]=no;mo=x(x(x(to*yn)+x(uo*Bn))+x(mo*zn));u[Vk+20>>2]=mo;Bn=x(x(x(po*yn)+x(so*Bn))+x(oo*zn));u[Vk+16>>2]=Bn;zn=u[wn+8>>2];oo=u[wn+4>>2];yn=u[wn>>2];q[Vk+44>>2]=0;po=An;An=x(-oo);lo=x(x(x(po*An)-x(ro*yn))-x(lo*zn));u[Vk+40>>2]=lo;Gn=x(x(x(Fn*An)-x(qo*yn))-x(Gn*zn));u[Vk+36>>2]=Gn;zn=x(x(x(Dn*An)-x(En*yn))-x(Cn*zn));u[Vk+32>>2]=zn;yn=u[ek+456>>2];An=u[ek+460>>2];Cn=u[ek+464>>2];q[Vk+60>>2]=0;Cn=x(no*Cn);u[Vk+56>>2]=Cn;An=x(mo*An);u[Vk+52>>2]=An;yn=x(Bn*yn);u[Vk+48>>2]=yn;Dn=u[xn+456>>2];En=u[xn+460>>2];Fn=u[xn+464>>2];q[Vk+76>>2]=0;Fn=x(lo*Fn);u[Vk+72>>2]=Fn;En=x(Gn*En);u[Vk+68>>2]=En;Dn=x(zn*Dn);u[Vk+64>>2]=Dn;u[Vk+80>>2]=x(x(x(Bn*yn)+x(mo*An))+x(no*Cn))+x(x(x(zn*Dn)+x(Gn*En))+x(lo*Fn));}function Ed(ek,Vk,wn,xo,yo){var zo=0,Ao=0,Bo=0,Co=x(0),Do=x(0),Eo=x(0),Fo=x(0),Go=x(0),Ho=x(0);zo=P-128|0;P=zo;Ao=q[ek+28>>2];q[zo+80>>2]=q[Ao+4>>2];q[zo+84>>2]=q[Ao+20>>2];Bo=q[Ao+36>>2];q[zo+92>>2]=0;q[zo+88>>2]=Bo;q[zo+96>>2]=q[Ao+8>>2];q[zo+100>>2]=q[Ao+24>>2];Bo=q[Ao+40>>2];q[zo+108>>2]=0;q[zo+104>>2]=Bo;q[zo+112>>2]=q[Ao+12>>2];q[zo+116>>2]=q[Ao+28>>2];Bo=q[Ao+44>>2];q[zo+124>>2]=0;q[zo+120>>2]=Bo;ek=q[ek+32>>2];q[zo+32>>2]=q[ek+4>>2];q[zo+36>>2]=q[ek+20>>2];Bo=q[ek+36>>2];q[zo+44>>2]=0;q[zo+40>>2]=Bo;q[zo+48>>2]=q[ek+8>>2];q[zo+52>>2]=q[ek+24>>2];Bo=q[ek+40>>2];q[zo+60>>2]=0;q[zo+56>>2]=Bo;q[zo+64>>2]=q[ek+12>>2];q[zo+68>>2]=q[ek+28>>2];Bo=q[ek+44>>2];q[zo+76>>2]=0;q[zo+72>>2]=Bo;Co=u[Ao+52>>2];Do=u[Ao+56>>2];Eo=u[Ao+60>>2];Fo=u[xo>>2];Go=u[xo+4>>2];Ho=u[xo+8>>2];q[zo+28>>2]=0;u[zo+24>>2]=Ho-Eo;u[zo+20>>2]=Go-Do;u[zo+16>>2]=Fo-Co;Co=u[ek+52>>2];Do=u[ek+56>>2];Eo=u[ek+60>>2];Fo=u[yo>>2];Go=u[yo+4>>2];Ho=u[yo+8>>2];q[zo+12>>2]=0;u[zo+8>>2]=Ho-Eo;u[zo+4>>2]=Go-Do;u[zo>>2]=Fo-Co;rc(Vk,zo+80|0,zo+32|0,zo+16|0,zo,wn,Ao+456|0,u[Ao+404>>2],ek+456|0,u[ek+404>>2]);P=zo+128|0;}function Fd(ek){Ob(ek,q[ek+28>>2]+4|0,q[ek+32>>2]+4|0);}function Gd(ek){ek=ek|0;return q[ek+72>>2]}function Hd(ek){ek=ek|0;var Vk=0;Vk=P-16|0;P=Vk;q[Vk+12>>2]=ek;ek=q[Vk+12>>2];ek=n[q[q[ek>>2]+48>>2]](ek)&1;P=Vk+16|0;return ek|0}function Id(ek,wn){var xo=0,yo=0;a:{if(r[ek+204|0]&2){xo=q[ek+16>>2];q[ek+76>>2]=q[ek+12>>2];q[ek+80>>2]=xo;xo=q[ek+8>>2];q[ek+68>>2]=q[ek+4>>2];q[ek+72>>2]=xo;xo=q[ek+24>>2];q[ek+84>>2]=q[ek+20>>2];q[ek+88>>2]=xo;xo=q[ek+32>>2];q[ek+92>>2]=q[ek+28>>2];q[ek+96>>2]=xo;xo=q[ek+40>>2];q[ek+100>>2]=q[ek+36>>2];q[ek+104>>2]=xo;xo=q[ek+48>>2];q[ek+108>>2]=q[ek+44>>2];q[ek+112>>2]=xo;xo=q[ek+56>>2];q[ek+116>>2]=q[ek+52>>2];q[ek+120>>2]=xo;xo=q[ek+64>>2];q[ek+124>>2]=q[ek+60>>2];q[ek+128>>2]=xo;break a}xo=wn;yo=q[xo+4>>2];q[ek+68>>2]=q[xo>>2];q[ek+72>>2]=yo;yo=q[xo+12>>2];q[ek+76>>2]=q[xo+8>>2];q[ek+80>>2]=yo;yo=q[xo+28>>2];q[ek+92>>2]=q[xo+24>>2];q[ek+96>>2]=yo;yo=q[xo+20>>2];q[ek+84>>2]=q[xo+16>>2];q[ek+88>>2]=yo;yo=q[xo+36>>2];q[ek+100>>2]=q[xo+32>>2];q[ek+104>>2]=yo;yo=q[xo+44>>2];q[ek+108>>2]=q[xo+40>>2];q[ek+112>>2]=yo;yo=q[xo+60>>2];q[ek+124>>2]=q[xo+56>>2];q[ek+128>>2]=yo;yo=q[xo+52>>2];q[ek+116>>2]=q[xo+48>>2];q[ek+120>>2]=yo;}xo=q[ek+392>>2];q[ek+148>>2]=q[ek+388>>2];q[ek+152>>2]=xo;xo=q[ek+376>>2];q[ek+132>>2]=q[ek+372>>2];q[ek+136>>2]=xo;xo=q[ek+400>>2];q[ek+156>>2]=q[ek+396>>2];q[ek+160>>2]=xo;xo=q[ek+384>>2];q[ek+140>>2]=q[ek+380>>2];q[ek+144>>2]=xo;xo=q[wn+12>>2];q[ek+12>>2]=q[wn+8>>2];q[ek+16>>2]=xo;xo=q[wn+4>>2];q[ek+4>>2]=q[wn>>2];q[ek+8>>2]=xo;xo=q[wn+28>>2];q[ek+28>>2]=q[wn+24>>2];q[ek+32>>2]=xo;xo=q[wn+20>>2];q[ek+20>>2]=q[wn+16>>2];q[ek+24>>2]=xo;xo=q[wn+44>>2];q[ek+44>>2]=q[wn+40>>2];q[ek+48>>2]=xo;xo=q[wn+36>>2];q[ek+36>>2]=q[wn+32>>2];q[ek+40>>2]=xo;xo=q[wn+60>>2];q[ek+60>>2]=q[wn+56>>2];q[ek+64>>2]=xo;xo=q[wn+52>>2];q[ek+52>>2]=q[wn+48>>2];q[ek+56>>2]=xo;Kd(ek);}function Jd(ek,wn,Io){var Jo=x(0),Ko=0,Lo=x(0),Mo=x(0);Ko=q[ek+204>>2];a:{if(wn==x(0)){q[ek+204>>2]=Ko|1;break a}q[ek+204>>2]=Ko&-2;Jo=x(x(1)/wn);}u[ek+404>>2]=Jo;q[ek+436>>2]=0;u[ek+424>>2]=u[ek+440>>2]*wn;u[ek+432>>2]=u[ek+448>>2]*wn;u[ek+428>>2]=u[ek+444>>2]*wn;wn=u[Io+8>>2];Lo=u[Io+4>>2];Mo=u[Io>>2];u[ek+620>>2]=u[ek+408>>2]*Jo;u[ek+624>>2]=Jo*u[ek+412>>2];u[ek+628>>2]=Jo*u[ek+416>>2];q[ek+632>>2]=0;q[ek+468>>2]=0;u[ek+456>>2]=Mo!=x(0)?x(x(1)/Mo):x(0);u[ek+460>>2]=Lo!=x(0)?x(x(1)/Lo):x(0);u[ek+464>>2]=wn!=x(0)?x(x(1)/wn):x(0);}function Kd(ek){var wn=x(0),Io=x(0),No=x(0),Oo=x(0),Po=x(0),Qo=x(0),Ro=x(0),So=x(0),To=x(0),Uo=x(0),Vo=x(0),Wo=x(0),Xo=x(0),Yo=x(0),Zo=x(0);q[ek+368>>2]=0;q[ek+352>>2]=0;q[ek+336>>2]=0;Xo=u[ek+456>>2];wn=u[ek+36>>2];Io=x(Xo*wn);Yo=u[ek+460>>2];No=u[ek+40>>2];Oo=x(Yo*No);Zo=u[ek+464>>2];Po=u[ek+44>>2];Qo=x(Zo*Po);u[ek+364>>2]=x(x(Io*wn)+x(Oo*No))+x(Qo*Po);Uo=u[ek+20>>2];Vo=u[ek+24>>2];Wo=u[ek+28>>2];u[ek+360>>2]=x(x(Io*Uo)+x(Oo*Vo))+x(Qo*Wo);Ro=Io;Io=u[ek+4>>2];So=Oo;Oo=u[ek+8>>2];To=Qo;Qo=u[ek+12>>2];u[ek+356>>2]=x(x(Ro*Io)+x(So*Oo))+x(To*Qo);Ro=x(Xo*Uo);So=x(Yo*Vo);To=x(Zo*Wo);u[ek+348>>2]=x(x(wn*Ro)+x(No*So))+x(Po*To);u[ek+344>>2]=x(x(Ro*Uo)+x(So*Vo))+x(To*Wo);u[ek+340>>2]=x(x(Ro*Io)+x(So*Oo))+x(To*Qo);Ro=wn;wn=x(Io*Xo);So=No;No=x(Oo*Yo);To=Po;Po=x(Qo*Zo);u[ek+332>>2]=x(x(Ro*wn)+x(So*No))+x(To*Po);u[ek+328>>2]=x(x(wn*Uo)+x(No*Vo))+x(Po*Wo);u[ek+324>>2]=x(x(wn*Io)+x(No*Oo))+x(Po*Qo);}function Ld(ek){var _o=0,$o=x(0);_o=P-16|0;P=_o;q[_o+12>>2]=ek;ek=q[_o+12>>2];$o=ta(ek,ek);P=_o+16|0;return $o}function Md(ek,ap,bp){var cp=0;cp=P-48|0;P=cp;q[cp+44>>2]=ek;q[cp+40>>2]=ap;q[cp+36>>2]=bp;ek=q[cp+44>>2];if(u[ek+404>>2]!=x(0)){rg(ek,q[cp+40>>2]);ap=P-16|0;q[ap+12>>2]=ek+604;if(q[ap+12>>2]){ap=q[cp+36>>2];lb(cp,q[cp+40>>2],ek+408|0);bp=cp+16|0;xc(bp,ap,cp);sg(ek,bp);}}P=cp+48|0;}function Nd(ek,ap,bp){var dp=0,ep=0,fp=0,gp=0,hp=0;dp=P-32|0;P=dp;q[dp+28>>2]=ap;q[dp+24>>2]=bp;fp=q[dp+24>>2];ap=P-16|0;bp=q[dp+28>>2];q[ap+12>>2]=bp;q[ap+8>>2]=0;gp=q[ap+12>>2]+(q[ap+8>>2]<<4)|0;ap=P-16|0;q[ap+12>>2]=bp;q[ap+8>>2]=1;hp=q[ap+12>>2]+(q[ap+8>>2]<<4)|0;ap=P-16|0;q[ap+12>>2]=bp;q[ap+8>>2]=2;ep=dp+8|0;qo(ep,fp,gp,hp,q[ap+12>>2]+(q[ap+8>>2]<<4)|0);zc(ek,ep,bp+48|0);P=dp+32|0;}function Od(ek,ap){var bp=0,ip=0,jp=0;bp=P-96|0;P=bp;q[bp+92>>2]=ek;q[bp+88>>2]=ap;ap=bp+40|0;ip=q[bp+88>>2];To(ap,ip);jp=bp+8|0;zg(jp,ip+48|0);ip=bp+24|0;Ya(ip,ap,jp);Pd(ek,ap,ip);P=bp+96|0;}function Pd(ek,ap,kp){var lp=0;lp=P-16|0;P=lp;q[lp+12>>2]=ek;q[lp+8>>2]=ap;q[lp+4>>2]=kp;ek=q[lp+12>>2];Lg(ek,q[lp+8>>2]);ap=q[lp+4>>2];kp=q[ap+4>>2];q[ek+48>>2]=q[ap>>2];q[ek+52>>2]=kp;kp=q[ap+12>>2];q[ek+56>>2]=q[ap+8>>2];q[ek+60>>2]=kp;P=lp+16|0;}function Qd(ek,ap,kp){var mp=0;mp=P-32|0;P=mp;q[mp+28>>2]=ek;q[mp+24>>2]=ap;q[mp+20>>2]=kp;ap=P-16|0;ek=q[mp+28>>2];q[ap+12>>2]=ek;q[q[ap+12>>2]>>2]=1748;q[ek>>2]=1664;Cc(ek+4|0,q[mp+24>>2]);Cc(ek+68|0,q[mp+20>>2]);Cc(ek+132|0,q[mp+24>>2]);q[ek+196>>2]=0;P=mp+32|0;}function Rd(){var ek=0,ap=0;ek=P-48|0;P=ek;if(!(!!(r[22364]!=0)|o[22364]&1)){ap=es();u[ek+20>>2]=0;u[ek+16>>2]=0;u[ek+12>>2]=0;ca(ek+24|0,ek+20|0,ek+16|0,ek+12|0);Pd(22300,ap,ek+24|0);q[5591]=0;q[5591]=q[5591]|1;}P=ek+48|0;return 22300}function Sd(kp){var np=0;np=P-16|0;P=np;q[np+12>>2]=kp;kp=q[np+12>>2];if(kp){q[6658]=q[6658]+1;n[q[5256]](kp);}P=np+16|0;}function Td(kp,op,pp,qp,rp){var sp=0;sp=P-32|0;q[sp+28>>2]=kp;q[sp+24>>2]=op;q[sp+20>>2]=pp;q[sp+16>>2]=qp;q[sp+12>>2]=rp;kp=q[sp+28>>2];u[kp>>2]=u[q[sp+24>>2]>>2];u[kp+4>>2]=u[q[sp+20>>2]>>2];u[kp+8>>2]=u[q[sp+16>>2]>>2];u[kp+12>>2]=u[q[sp+12>>2]>>2];}function Ud(kp,op){kp=kp|0;op=x(op);var pp=0;pp=P-16|0;P=pp;q[pp+12>>2]=kp;u[pp+8>>2]=op;op=u[pp+8>>2];kp=P-16|0;q[kp+12>>2]=q[pp+12>>2];u[kp+8>>2]=op;u[q[kp+12>>2]+8>>2]=u[kp+8>>2];P=pp+16|0;}function Vd(kp,op){kp=kp|0;op=x(op);var qp=0;qp=P-16|0;P=qp;q[qp+12>>2]=kp;u[qp+8>>2]=op;op=u[qp+8>>2];kp=P-16|0;q[kp+12>>2]=q[qp+12>>2];u[kp+8>>2]=op;u[q[kp+12>>2]+4>>2]=u[kp+8>>2];P=qp+16|0;}function Wd(kp,op){kp=kp|0;op=x(op);var rp=0;rp=P-16|0;P=rp;q[rp+12>>2]=kp;u[rp+8>>2]=op;op=u[rp+8>>2];kp=P-16|0;q[kp+12>>2]=q[rp+12>>2];u[kp+8>>2]=op;u[q[kp+12>>2]>>2]=u[kp+8>>2];P=rp+16|0;}function Xd(kp){kp=kp|0;var op=0;op=P-16|0;P=op;q[op+12>>2]=kp;kp=P-16|0;q[kp+12>>2]=q[op+12>>2];P=op+16|0;return x(u[q[kp+12>>2]+8>>2])}function Yd(kp){kp=kp|0;var tp=0;tp=P-16|0;P=tp;q[tp+12>>2]=kp;kp=P-16|0;q[kp+12>>2]=q[tp+12>>2];P=tp+16|0;return x(u[q[kp+12>>2]+4>>2])}function Zd(kp){kp=kp|0;var up=0;up=P-16|0;P=up;q[up+12>>2]=kp;kp=P-16|0;q[kp+12>>2]=q[up+12>>2];P=up+16|0;return x(u[q[kp+12>>2]>>2])}function _d(kp,vp,wp){kp=kp|0;vp=vp|0;wp=x(wp);var xp=0;xp=P-16|0;P=xp;q[xp+12>>2]=kp;q[xp+8>>2]=vp;u[xp+4>>2]=wp;kp=q[xp+12>>2];n[q[q[kp>>2]+8>>2]](kp,q[xp+8>>2],u[xp+4>>2]);P=xp+16|0;}function $d(kp,vp){kp=kp|0;vp=vp|0;var wp=0;wp=P-16|0;q[wp+12>>2]=kp;q[wp+8>>2]=vp;q[q[wp+12>>2]+16>>2]=q[wp+8>>2];}function ae(kp){kp=kp|0;var vp=0;vp=P-16|0;q[vp+12>>2]=kp;return q[q[vp+12>>2]+16>>2]}function be(kp,yp){kp=kp|0;yp=yp|0;var zp=0;zp=P-16|0;q[zp+12>>2]=kp;q[zp+8>>2]=yp;p[q[zp+12>>2]+14>>1]=q[zp+8>>2];}function ce(kp){kp=kp|0;var yp=0;yp=P-16|0;q[yp+12>>2]=kp;return p[q[yp+12>>2]+14>>1]}function de(kp,Ap){kp=kp|0;Ap=Ap|0;var Bp=0;Bp=P-16|0;q[Bp+12>>2]=kp;q[Bp+8>>2]=Ap;p[q[Bp+12>>2]+12>>1]=q[Bp+8>>2];}function ee(kp){kp=kp|0;var Ap=0;Ap=P-16|0;q[Ap+12>>2]=kp;return p[q[Ap+12>>2]+12>>1]}function fe(kp,Cp){kp=kp|0;Cp=Cp|0;var Dp=0;Dp=P-16|0;P=Dp;q[Dp+12>>2]=kp;o[Dp+11|0]=Cp;Cp=o[Dp+11|0]&1;kp=P-16|0;q[kp+12>>2]=q[Dp+12>>2];o[kp+11|0]=Cp;o[q[kp+12>>2]+24|0]=o[kp+11|0]&1;P=Dp+16|0;}function ge(kp){kp=kp|0;var Cp=0;Cp=P-16|0;P=Cp;q[Cp+12>>2]=kp;kp=P-16|0;q[kp+12>>2]=q[Cp+12>>2];P=Cp+16|0;return q[q[kp+12>>2]+8>>2]!=0|0}function he(kp,Ep){kp=kp|0;Ep=Ep|0;var Fp=0;Fp=P-16|0;P=Fp;q[Fp+12>>2]=kp;q[Fp+8>>2]=Ep;kp=q[Fp+12>>2];n[q[q[kp>>2]+64>>2]](kp,q[Fp+8>>2]);P=Fp+16|0;}function ie(kp){kp=kp|0;var Ep=0,Gp=0,Hp=0,Ip=0,Jp=0,Kp=0,Lp=0,Mp=0,Np=0,Op=0,Pp=0;Pp=P-16|0;P=Pp;a:{b:{c:{d:{e:{f:{g:{h:{i:{j:{k:{if(kp>>>0<=244){Jp=q[6679];Kp=kp>>>0<11?16:kp+11&-8;kp=Kp>>>3;Ep=Jp>>>kp;if(Ep&3){Gp=kp+((Ep^-1)&1)|0;Ip=Gp<<3;Ep=q[Ip+26764>>2];kp=Ep+8|0;Hp=q[Ep+8>>2];Ip=Ip+26756|0;l:{if((Hp|0)==(Ip|0)){q[6679]=LB(Gp)&Jp;break l}q[Hp+12>>2]=Ip;q[Ip+8>>2]=Hp;}Gp=Gp<<3;q[Ep+4>>2]=Gp|3;Ep=Ep+Gp|0;q[Ep+4>>2]=q[Ep+4>>2]|1;break a}Mp=q[6681];if(Kp>>>0<=Mp>>>0){break k}if(Ep){Gp=2<<kp;kp=(0-Gp|Gp)&Ep<<kp;kp=(0-kp&kp)+ -1|0;Ep=kp>>>12&16;Gp=Ep;kp=kp>>>Ep;Ep=kp>>>5&8;Gp=Gp|Ep;kp=kp>>>Ep;Ep=kp>>>2&4;Gp=Gp|Ep;kp=kp>>>Ep;Ep=kp>>>1&2;Gp=Gp|Ep;kp=kp>>>Ep;Ep=kp>>>1&1;Gp=(Gp|Ep)+(kp>>>Ep)|0;Hp=Gp<<3;Ep=q[Hp+26764>>2];kp=q[Ep+8>>2];Hp=Hp+26756|0;m:{if((kp|0)==(Hp|0)){Jp=LB(Gp)&Jp;q[6679]=Jp;break m}q[kp+12>>2]=Hp;q[Hp+8>>2]=kp;}kp=Ep+8|0;q[Ep+4>>2]=Kp|3;Lp=Ep+Kp|0;Gp=Gp<<3;Ip=Gp-Kp|0;q[Lp+4>>2]=Ip|1;q[Ep+Gp>>2]=Ip;if(Mp){Gp=Mp>>>3;Ep=(Gp<<3)+26756|0;Hp=q[6684];Gp=1<<Gp;n:{if(!(Gp&Jp)){q[6679]=Gp|Jp;Gp=Ep;break n}Gp=q[Ep+8>>2];}q[Ep+8>>2]=Hp;q[Gp+12>>2]=Hp;q[Hp+12>>2]=Ep;q[Hp+8>>2]=Gp;}q[6684]=Lp;q[6681]=Ip;break a}Op=q[6680];if(!Op){break k}kp=(Op&0-Op)+ -1|0;Ep=kp>>>12&16;Gp=Ep;kp=kp>>>Ep;Ep=kp>>>5&8;Gp=Gp|Ep;kp=kp>>>Ep;Ep=kp>>>2&4;Gp=Gp|Ep;kp=kp>>>Ep;Ep=kp>>>1&2;Gp=Gp|Ep;kp=kp>>>Ep;Ep=kp>>>1&1;Ep=q[((Gp|Ep)+(kp>>>Ep)<<2)+27020>>2];Hp=(q[Ep+4>>2]&-8)-Kp|0;Gp=Ep;while(1){o:{kp=q[Gp+16>>2];if(!kp){kp=q[Gp+20>>2];if(!kp){break o}}Ip=(q[kp+4>>2]&-8)-Kp|0;Gp=Ip>>>0<Hp>>>0;Hp=Gp?Ip:Hp;Ep=Gp?kp:Ep;Gp=kp;continue}break}Np=q[Ep+24>>2];Ip=q[Ep+12>>2];if((Ip|0)!=(Ep|0)){kp=q[Ep+8>>2];q[kp+12>>2]=Ip;q[Ip+8>>2]=kp;break b}Gp=Ep+20|0;kp=q[Gp>>2];if(!kp){kp=q[Ep+16>>2];if(!kp){break j}Gp=Ep+16|0;}while(1){Lp=Gp;Ip=kp;Gp=kp+20|0;kp=q[Gp>>2];if(kp){continue}Gp=Ip+16|0;kp=q[Ip+16>>2];if(kp){continue}break}q[Lp>>2]=0;break b}Kp=-1;if(kp>>>0>4294967231){break k}Ep=kp+11|0;Kp=Ep&-8;Mp=q[6680];if(!Mp){break k}Gp=0-Kp|0;Ep=Ep>>>8;Jp=0;p:{if(!Ep){break p}Jp=31;if(Kp>>>0>16777215){break p}Hp=Ep+1048320>>>16&8;Ep=Ep<<Hp;kp=Ep+520192>>>16&4;Jp=Ep<<kp;Ep=Jp+245760>>>16&2;kp=(Jp<<Ep>>>15)-(Ep|(kp|Hp))|0;Jp=(kp<<1|Kp>>>kp+21&1)+28|0;}Hp=q[(Jp<<2)+27020>>2];q:{r:{s:{if(!Hp){kp=0;break s}Ep=Kp<<((Jp|0)==31?0:25-(Jp>>>1)|0);kp=0;while(1){t:{Lp=(q[Hp+4>>2]&-8)-Kp|0;if(Lp>>>0>=Gp>>>0){break t}Ip=Hp;Gp=Lp;if(Gp){break t}Gp=0;kp=Hp;break r}Lp=q[Hp+20>>2];Hp=q[((Ep>>>29&4)+Hp|0)+16>>2];kp=Lp?(Lp|0)==(Hp|0)?kp:Lp:kp;Ep=Ep<<((Hp|0)!=0);if(Hp){continue}break}}if(!(kp|Ip)){kp=2<<Jp;kp=(0-kp|kp)&Mp;if(!kp){break k}kp=(kp&0-kp)+ -1|0;Ep=kp>>>12&16;Hp=Ep;kp=kp>>>Ep;Ep=kp>>>5&8;Hp=Hp|Ep;kp=kp>>>Ep;Ep=kp>>>2&4;Hp=Hp|Ep;kp=kp>>>Ep;Ep=kp>>>1&2;Hp=Hp|Ep;kp=kp>>>Ep;Ep=kp>>>1&1;kp=q[((Hp|Ep)+(kp>>>Ep)<<2)+27020>>2];}if(!kp){break q}}while(1){Hp=(q[kp+4>>2]&-8)-Kp|0;Ep=Hp>>>0<Gp>>>0;Gp=Ep?Hp:Gp;Ip=Ep?kp:Ip;Ep=q[kp+16>>2];if(Ep){kp=Ep;}else {kp=q[kp+20>>2];}if(kp){continue}break}}if(!Ip|Gp>>>0>=q[6681]-Kp>>>0){break k}Lp=q[Ip+24>>2];Ep=q[Ip+12>>2];if((Ip|0)!=(Ep|0)){kp=q[Ip+8>>2];q[kp+12>>2]=Ep;q[Ep+8>>2]=kp;break c}Hp=Ip+20|0;kp=q[Hp>>2];if(!kp){kp=q[Ip+16>>2];if(!kp){break i}Hp=Ip+16|0;}while(1){Jp=Hp;Ep=kp;Hp=kp+20|0;kp=q[Hp>>2];if(kp){continue}Hp=Ep+16|0;kp=q[Ep+16>>2];if(kp){continue}break}q[Jp>>2]=0;break c}Ep=q[6681];if(Ep>>>0>=Kp>>>0){kp=q[6684];Gp=Ep-Kp|0;u:{if(Gp>>>0>=16){q[6681]=Gp;Hp=kp+Kp|0;q[6684]=Hp;q[Hp+4>>2]=Gp|1;q[kp+Ep>>2]=Gp;q[kp+4>>2]=Kp|3;break u}q[6684]=0;q[6681]=0;q[kp+4>>2]=Ep|3;Ep=kp+Ep|0;q[Ep+4>>2]=q[Ep+4>>2]|1;}kp=kp+8|0;break a}Hp=q[6682];if(Hp>>>0>Kp>>>0){Ep=Hp-Kp|0;q[6682]=Ep;kp=q[6685];Gp=kp+Kp|0;q[6685]=Gp;q[Gp+4>>2]=Ep|1;q[kp+4>>2]=Kp|3;kp=kp+8|0;break a}kp=0;Ip=Kp+47|0;Gp=Ip;if(q[6797]){Ep=q[6799];}else {q[6800]=-1;q[6801]=-1;q[6798]=4096;q[6799]=4096;q[6797]=Pp+12&-16^1431655768;q[6802]=0;q[6790]=0;Ep=4096;}Jp=Gp+Ep|0;Lp=0-Ep|0;Gp=Jp&Lp;if(Gp>>>0<=Kp>>>0){break a}Ep=q[6789];if(Ep){Mp=q[6787];Np=Mp+Gp|0;if(Np>>>0<=Mp>>>0|Np>>>0>Ep>>>0){break a}}if(r[27160]&4){break f}v:{w:{Ep=q[6685];if(Ep){kp=27164;while(1){Mp=q[kp>>2];if(Mp+q[kp+4>>2]>>>0>Ep>>>0?Mp>>>0<=Ep>>>0:0){break w}kp=q[kp+8>>2];if(kp){continue}break}}Ep=mb(0);if((Ep|0)==-1){break g}Jp=Gp;kp=q[6798];Hp=kp+ -1|0;if(Hp&Ep){Jp=(Gp-Ep|0)+(Ep+Hp&0-kp)|0;}if(Jp>>>0<=Kp>>>0|Jp>>>0>2147483646){break g}kp=q[6789];if(kp){Hp=q[6787];Lp=Hp+Jp|0;if(Lp>>>0<=Hp>>>0|Lp>>>0>kp>>>0){break g}}kp=mb(Jp);if((Ep|0)!=(kp|0)){break v}break e}Jp=Lp&Jp-Hp;if(Jp>>>0>2147483646){break g}Ep=mb(Jp);if((Ep|0)==(q[kp>>2]+q[kp+4>>2]|0)){break h}kp=Ep;}Ep=kp;if(!(Kp+48>>>0<=Jp>>>0|Jp>>>0>2147483646|(kp|0)==-1)){kp=q[6799];kp=kp+(Ip-Jp|0)&0-kp;if(kp>>>0>2147483646){break e}if((mb(kp)|0)!=-1){Jp=kp+Jp|0;break e}mb(0-Jp|0);break g}if((Ep|0)!=-1){break e}break g}Ip=0;break b}Ep=0;break c}if((Ep|0)!=-1){break e}}q[6790]=q[6790]|4;}if(Gp>>>0>2147483646){break d}Ep=mb(Gp);kp=mb(0);if(Ep>>>0>=kp>>>0|(Ep|0)==-1|(kp|0)==-1){break d}Jp=kp-Ep|0;if(Jp>>>0<=Kp+40>>>0){break d}}kp=q[6787]+Jp|0;q[6787]=kp;if(kp>>>0>t[6788]){q[6788]=kp;}x:{y:{z:{Gp=q[6685];if(Gp){kp=27164;while(1){Hp=q[kp>>2];Ip=q[kp+4>>2];if((Hp+Ip|0)==(Ep|0)){break z}kp=q[kp+8>>2];if(kp){continue}break}break y}kp=q[6683];if(!(Ep>>>0>=kp>>>0?kp:0)){q[6683]=Ep;}kp=0;q[6792]=Jp;q[6791]=Ep;q[6687]=-1;q[6688]=q[6797];q[6794]=0;while(1){Gp=kp<<3;Hp=Gp+26756|0;q[Gp+26764>>2]=Hp;q[Gp+26768>>2]=Hp;kp=kp+1|0;if((kp|0)!=32){continue}break}kp=Jp+ -40|0;Gp=Ep+8&7?-8-Ep&7:0;Hp=kp-Gp|0;q[6682]=Hp;Gp=Ep+Gp|0;q[6685]=Gp;q[Gp+4>>2]=Hp|1;q[(kp+Ep|0)+4>>2]=40;q[6686]=q[6801];break x}if(r[kp+12|0]&8|Ep>>>0<=Gp>>>0|Hp>>>0>Gp>>>0){break y}q[kp+4>>2]=Ip+Jp;kp=Gp+8&7?-8-Gp&7:0;Ep=kp+Gp|0;q[6685]=Ep;Hp=q[6682]+Jp|0;kp=Hp-kp|0;q[6682]=kp;q[Ep+4>>2]=kp|1;q[(Gp+Hp|0)+4>>2]=40;q[6686]=q[6801];break x}Ip=q[6683];if(Ep>>>0<Ip>>>0){q[6683]=Ep;Ip=0;}Hp=Ep+Jp|0;kp=27164;A:{B:{C:{D:{E:{F:{while(1){if((Hp|0)!=q[kp>>2]){kp=q[kp+8>>2];if(kp){continue}break F}break}if(!(r[kp+12|0]&8)){break E}}kp=27164;while(1){Hp=q[kp>>2];if(Hp>>>0<=Gp>>>0){Ip=Hp+q[kp+4>>2]|0;if(Ip>>>0>Gp>>>0){break D}}kp=q[kp+8>>2];continue}}q[kp>>2]=Ep;q[kp+4>>2]=q[kp+4>>2]+Jp;Np=(Ep+8&7?-8-Ep&7:0)+Ep|0;q[Np+4>>2]=Kp|3;Ep=Hp+(Hp+8&7?-8-Hp&7:0)|0;kp=(Ep-Np|0)-Kp|0;Lp=Kp+Np|0;if((Ep|0)==(Gp|0)){q[6685]=Lp;kp=q[6682]+kp|0;q[6682]=kp;q[Lp+4>>2]=kp|1;break B}if(q[6684]==(Ep|0)){q[6684]=Lp;kp=q[6681]+kp|0;q[6681]=kp;q[Lp+4>>2]=kp|1;q[kp+Lp>>2]=kp;break B}Gp=q[Ep+4>>2];if((Gp&3)==1){Op=Gp&-8;G:{if(Gp>>>0<=255){Ip=Gp>>>3;Gp=q[Ep+8>>2];Hp=q[Ep+12>>2];if((Hp|0)==(Gp|0)){q[6679]=q[6679]&LB(Ip);break G}q[Gp+12>>2]=Hp;q[Hp+8>>2]=Gp;break G}Mp=q[Ep+24>>2];Jp=q[Ep+12>>2];H:{if((Jp|0)!=(Ep|0)){Gp=q[Ep+8>>2];q[Gp+12>>2]=Jp;q[Jp+8>>2]=Gp;break H}I:{Hp=Ep+20|0;Kp=q[Hp>>2];if(Kp){break I}Hp=Ep+16|0;Kp=q[Hp>>2];if(Kp){break I}Jp=0;break H}while(1){Gp=Hp;Jp=Kp;Hp=Kp+20|0;Kp=q[Hp>>2];if(Kp){continue}Hp=Jp+16|0;Kp=q[Jp+16>>2];if(Kp){continue}break}q[Gp>>2]=0;}if(!Mp){break G}Gp=q[Ep+28>>2];Hp=(Gp<<2)+27020|0;J:{if(q[Hp>>2]==(Ep|0)){q[Hp>>2]=Jp;if(Jp){break J}q[6680]=q[6680]&LB(Gp);break G}q[Mp+(q[Mp+16>>2]==(Ep|0)?16:20)>>2]=Jp;if(!Jp){break G}}q[Jp+24>>2]=Mp;Gp=q[Ep+16>>2];if(Gp){q[Jp+16>>2]=Gp;q[Gp+24>>2]=Jp;}Gp=q[Ep+20>>2];if(!Gp){break G}q[Jp+20>>2]=Gp;q[Gp+24>>2]=Jp;}Ep=Ep+Op|0;kp=kp+Op|0;}q[Ep+4>>2]=q[Ep+4>>2]&-2;q[Lp+4>>2]=kp|1;q[kp+Lp>>2]=kp;if(kp>>>0<=255){Ep=kp>>>3;kp=(Ep<<3)+26756|0;Gp=q[6679];Ep=1<<Ep;K:{if(!(Gp&Ep)){q[6679]=Ep|Gp;Ep=kp;break K}Ep=q[kp+8>>2];}q[kp+8>>2]=Lp;q[Ep+12>>2]=Lp;q[Lp+12>>2]=kp;q[Lp+8>>2]=Ep;break B}Gp=Lp;Hp=kp>>>8;Ep=0;L:{if(!Hp){break L}Ep=31;if(kp>>>0>16777215){break L}Ip=Hp+1048320>>>16&8;Hp=Hp<<Ip;Ep=Hp+520192>>>16&4;Kp=Hp<<Ep;Hp=Kp+245760>>>16&2;Ep=(Kp<<Hp>>>15)-(Hp|(Ep|Ip))|0;Ep=(Ep<<1|kp>>>Ep+21&1)+28|0;}q[Gp+28>>2]=Ep;q[Lp+16>>2]=0;q[Lp+20>>2]=0;Gp=(Ep<<2)+27020|0;Hp=q[6680];Ip=1<<Ep;M:{if(!(Hp&Ip)){q[6680]=Hp|Ip;q[Gp>>2]=Lp;break M}Hp=kp<<((Ep|0)==31?0:25-(Ep>>>1)|0);Ep=q[Gp>>2];while(1){Gp=Ep;if((q[Ep+4>>2]&-8)==(kp|0)){break C}Ep=Hp>>>29;Hp=Hp<<1;Ip=(Ep&4)+Gp|0;Ep=q[Ip+16>>2];if(Ep){continue}break}q[Ip+16>>2]=Lp;}q[Lp+24>>2]=Gp;q[Lp+12>>2]=Lp;q[Lp+8>>2]=Lp;break B}kp=Jp+ -40|0;Hp=Ep+8&7?-8-Ep&7:0;Lp=kp-Hp|0;q[6682]=Lp;Hp=Ep+Hp|0;q[6685]=Hp;q[Hp+4>>2]=Lp|1;q[(kp+Ep|0)+4>>2]=40;q[6686]=q[6801];kp=(Ip+(Ip+ -39&7?39-Ip&7:0)|0)+ -47|0;Hp=kp>>>0<Gp+16>>>0?Gp:kp;q[Hp+4>>2]=27;kp=q[6794];q[Hp+16>>2]=q[6793];q[Hp+20>>2]=kp;kp=q[6792];q[Hp+8>>2]=q[6791];q[Hp+12>>2]=kp;q[6793]=Hp+8;q[6792]=Jp;q[6791]=Ep;q[6794]=0;kp=Hp+24|0;while(1){q[kp+4>>2]=7;Ep=kp+8|0;kp=kp+4|0;if(Ep>>>0<Ip>>>0){continue}break}if((Gp|0)==(Hp|0)){break x}q[Hp+4>>2]=q[Hp+4>>2]&-2;Ip=Hp-Gp|0;q[Gp+4>>2]=Ip|1;q[Hp>>2]=Ip;if(Ip>>>0<=255){Ep=Ip>>>3;kp=(Ep<<3)+26756|0;Hp=q[6679];Ep=1<<Ep;N:{if(!(Hp&Ep)){q[6679]=Ep|Hp;Ep=kp;break N}Ep=q[kp+8>>2];}q[kp+8>>2]=Gp;q[Ep+12>>2]=Gp;q[Gp+12>>2]=kp;q[Gp+8>>2]=Ep;break x}q[Gp+16>>2]=0;q[Gp+20>>2]=0;Ep=Gp;Hp=Ip>>>8;kp=0;O:{if(!Hp){break O}kp=31;if(Ip>>>0>16777215){break O}Jp=Hp+1048320>>>16&8;Hp=Hp<<Jp;kp=Hp+520192>>>16&4;Lp=Hp<<kp;Hp=Lp+245760>>>16&2;kp=(Lp<<Hp>>>15)-(Hp|(kp|Jp))|0;kp=(kp<<1|Ip>>>kp+21&1)+28|0;}q[Ep+28>>2]=kp;Ep=(kp<<2)+27020|0;Hp=q[6680];Jp=1<<kp;P:{if(!(Hp&Jp)){q[6680]=Hp|Jp;q[Ep>>2]=Gp;q[Gp+24>>2]=Ep;break P}kp=Ip<<((kp|0)==31?0:25-(kp>>>1)|0);Ep=q[Ep>>2];while(1){Hp=Ep;if((Ip|0)==(q[Ep+4>>2]&-8)){break A}Ep=kp>>>29;kp=kp<<1;Jp=Hp+(Ep&4)|0;Ep=q[Jp+16>>2];if(Ep){continue}break}q[Jp+16>>2]=Gp;q[Gp+24>>2]=Hp;}q[Gp+12>>2]=Gp;q[Gp+8>>2]=Gp;break x}kp=q[Gp+8>>2];q[kp+12>>2]=Lp;q[Gp+8>>2]=Lp;q[Lp+24>>2]=0;q[Lp+12>>2]=Gp;q[Lp+8>>2]=kp;}kp=Np+8|0;break a}kp=q[Hp+8>>2];q[kp+12>>2]=Gp;q[Hp+8>>2]=Gp;q[Gp+24>>2]=0;q[Gp+12>>2]=Hp;q[Gp+8>>2]=kp;}kp=q[6682];if(kp>>>0<=Kp>>>0){break d}Ep=kp-Kp|0;q[6682]=Ep;kp=q[6685];Gp=kp+Kp|0;q[6685]=Gp;q[Gp+4>>2]=Ep|1;q[kp+4>>2]=Kp|3;kp=kp+8|0;break a}q[6659]=48;kp=0;break a}Q:{if(!Lp){break Q}kp=q[Ip+28>>2];Hp=(kp<<2)+27020|0;R:{if(q[Hp>>2]==(Ip|0)){q[Hp>>2]=Ep;if(Ep){break R}Mp=LB(kp)&Mp;q[6680]=Mp;break Q}q[Lp+(q[Lp+16>>2]==(Ip|0)?16:20)>>2]=Ep;if(!Ep){break Q}}q[Ep+24>>2]=Lp;kp=q[Ip+16>>2];if(kp){q[Ep+16>>2]=kp;q[kp+24>>2]=Ep;}kp=q[Ip+20>>2];if(!kp){break Q}q[Ep+20>>2]=kp;q[kp+24>>2]=Ep;}S:{if(Gp>>>0<=15){kp=Gp+Kp|0;q[Ip+4>>2]=kp|3;kp=kp+Ip|0;q[kp+4>>2]=q[kp+4>>2]|1;break S}q[Ip+4>>2]=Kp|3;Hp=Ip+Kp|0;q[Hp+4>>2]=Gp|1;q[Gp+Hp>>2]=Gp;if(Gp>>>0<=255){Ep=Gp>>>3;kp=(Ep<<3)+26756|0;Gp=q[6679];Ep=1<<Ep;T:{if(!(Gp&Ep)){q[6679]=Ep|Gp;Ep=kp;break T}Ep=q[kp+8>>2];}q[kp+8>>2]=Hp;q[Ep+12>>2]=Hp;q[Hp+12>>2]=kp;q[Hp+8>>2]=Ep;break S}Ep=Hp;Kp=Gp>>>8;kp=0;U:{if(!Kp){break U}kp=31;if(Gp>>>0>16777215){break U}Jp=Kp+1048320>>>16&8;Kp=Kp<<Jp;kp=Kp+520192>>>16&4;Lp=Kp<<kp;Kp=Lp+245760>>>16&2;kp=(Lp<<Kp>>>15)-(Kp|(kp|Jp))|0;kp=(kp<<1|Gp>>>kp+21&1)+28|0;}q[Ep+28>>2]=kp;q[Hp+16>>2]=0;q[Hp+20>>2]=0;Ep=(kp<<2)+27020|0;V:{Kp=1<<kp;W:{if(!(Kp&Mp)){q[6680]=Kp|Mp;q[Ep>>2]=Hp;break W}kp=Gp<<((kp|0)==31?0:25-(kp>>>1)|0);Kp=q[Ep>>2];while(1){Ep=Kp;if((q[Ep+4>>2]&-8)==(Gp|0)){break V}Kp=kp>>>29;kp=kp<<1;Jp=(Kp&4)+Ep|0;Kp=q[Jp+16>>2];if(Kp){continue}break}q[Jp+16>>2]=Hp;}q[Hp+24>>2]=Ep;q[Hp+12>>2]=Hp;q[Hp+8>>2]=Hp;break S}kp=q[Ep+8>>2];q[kp+12>>2]=Hp;q[Ep+8>>2]=Hp;q[Hp+24>>2]=0;q[Hp+12>>2]=Ep;q[Hp+8>>2]=kp;}kp=Ip+8|0;break a}X:{if(!Np){break X}kp=q[Ep+28>>2];Gp=(kp<<2)+27020|0;Y:{if(q[Gp>>2]==(Ep|0)){q[Gp>>2]=Ip;if(Ip){break Y}q[6680]=LB(kp)&Op;break X}q[Np+(q[Np+16>>2]==(Ep|0)?16:20)>>2]=Ip;if(!Ip){break X}}q[Ip+24>>2]=Np;kp=q[Ep+16>>2];if(kp){q[Ip+16>>2]=kp;q[kp+24>>2]=Ip;}kp=q[Ep+20>>2];if(!kp){break X}q[Ip+20>>2]=kp;q[kp+24>>2]=Ip;}Z:{if(Hp>>>0<=15){kp=Hp+Kp|0;q[Ep+4>>2]=kp|3;kp=kp+Ep|0;q[kp+4>>2]=q[kp+4>>2]|1;break Z}q[Ep+4>>2]=Kp|3;Kp=Ep+Kp|0;q[Kp+4>>2]=Hp|1;q[Hp+Kp>>2]=Hp;if(Mp){Gp=Mp>>>3;kp=(Gp<<3)+26756|0;Ip=q[6684];Gp=1<<Gp;_:{if(!(Gp&Jp)){q[6679]=Gp|Jp;Gp=kp;break _}Gp=q[kp+8>>2];}q[kp+8>>2]=Ip;q[Gp+12>>2]=Ip;q[Ip+12>>2]=kp;q[Ip+8>>2]=Gp;}q[6684]=Kp;q[6681]=Hp;}kp=Ep+8|0;}P=Pp+16|0;return kp|0}function je(kp){kp=kp|0;var Qp=0;Qp=P-16|0;P=Qp;q[Qp+12>>2]=kp;kp=P-16|0;q[kp+12>>2]=q[Qp+12>>2];P=Qp+16|0;return q[kp+12>>2]+48|0}function ke(kp,Rp,Sp,Tp,Up,Vp){var Wp=0,Xp=0,Yp=0;Wp=q[kp+4>>2];Xp=Wp>>8;kp=q[kp>>2];Yp=kp;if(Wp&1){Xp=q[q[Tp>>2]+Xp>>2];}n[q[q[kp>>2]+20>>2]](Yp,Rp,Sp,Tp+Xp|0,Wp&2?Up:2,Vp);}function le(kp,Rp,Sp,Tp){o[kp+53|0]=1;a:{if(q[kp+4>>2]!=(Sp|0)){break a}o[kp+52|0]=1;Sp=q[kp+16>>2];if(!Sp){q[kp+36>>2]=1;q[kp+24>>2]=Tp;q[kp+16>>2]=Rp;if((Tp|0)!=1|q[kp+48>>2]!=1){break a}o[kp+54|0]=1;return}if((Rp|0)==(Sp|0)){Sp=q[kp+24>>2];if((Sp|0)==2){q[kp+24>>2]=Tp;Sp=Tp;}if(q[kp+48>>2]!=1|(Sp|0)!=1){break a}o[kp+54|0]=1;return}o[kp+54|0]=1;q[kp+36>>2]=q[kp+36>>2]+1;}}function me(kp,Rp,Sp){var Tp=0;Tp=q[kp+16>>2];if(!Tp){q[kp+36>>2]=1;q[kp+24>>2]=Sp;q[kp+16>>2]=Rp;return}a:{if((Rp|0)==(Tp|0)){if(q[kp+24>>2]!=2){break a}q[kp+24>>2]=Sp;return}o[kp+54|0]=1;q[kp+24>>2]=2;q[kp+36>>2]=q[kp+36>>2]+1;}}function ne(kp,Rp,Sp,Up){var Vp=0,Zp=0,_p=0,$p=0,aq=0,bq=0,cq=0,dq=0,eq=0,fq=0,gq=0,hq=0,iq=0,jq=0,kq=0,lq=0;Zp=P-80|0;P=Zp;q[Zp+76>>2]=20620;lq=Zp+55|0;iq=Zp+56|0;a:{b:{c:while(1){d:{if((fq|0)<0){break d}if((Vp|0)>(2147483647-fq|0)){q[6659]=61;fq=-1;break d}fq=Vp+fq|0;}e:{f:{g:{h:{i:{j:{k:{l:{m:{n:{o:{p:{q:{bq=q[Zp+76>>2];Vp=bq;aq=r[Vp|0];if(aq){while(1){r:{s:{_p=aq&255;t:{if(!_p){aq=Vp;break t}if((_p|0)!=37){break s}aq=Vp;while(1){if(r[Vp+1|0]!=37){break t}_p=Vp+2|0;q[Zp+76>>2]=_p;aq=aq+1|0;$p=r[Vp+2|0];Vp=_p;if(($p|0)==37){continue}break}}Vp=aq-bq|0;if(kp){ha(kp,bq,Vp);}if(Vp){continue c}gq=-1;aq=1;_p=Zp;Vp=q[Zp+76>>2];if(!(r[Vp+2|0]!=36|o[q[Zp+76>>2]+1|0]+ -48>>>0>=10)){gq=o[Vp+1|0]+ -48|0;jq=1;aq=3;}Vp=aq+Vp|0;q[_p+76>>2]=Vp;aq=0;hq=o[Vp|0];$p=hq+ -32|0;u:{if($p>>>0>31){_p=Vp;break u}_p=Vp;$p=1<<$p;if(!($p&75913)){break u}while(1){_p=Vp+1|0;q[Zp+76>>2]=_p;aq=$p|aq;hq=o[Vp+1|0];$p=hq+ -32|0;if($p>>>0>31){break u}Vp=_p;$p=1<<$p;if($p&75913){continue}break}}v:{if((hq|0)==42){cq=Zp;w:{x:{if(o[_p+1|0]+ -48>>>0>=10){break x}Vp=q[Zp+76>>2];if(r[Vp+2|0]!=36){break x}q[((o[Vp+1|0]<<2)+Up|0)+ -192>>2]=10;eq=q[((o[Vp+1|0]<<3)+Sp|0)+ -384>>2];jq=1;Vp=Vp+3|0;break w}if(jq){break b}jq=0;eq=0;if(kp){Vp=q[Rp>>2];q[Rp>>2]=Vp+4;eq=q[Vp>>2];}Vp=q[Zp+76>>2]+1|0;}q[cq+76>>2]=Vp;if((eq|0)>-1){break v}eq=0-eq|0;aq=aq|8192;break v}eq=rh(Zp+76|0);if((eq|0)<0){break b}Vp=q[Zp+76>>2];}$p=-1;y:{if(r[Vp|0]!=46){break y}if(r[Vp+1|0]==42){z:{if(o[Vp+2|0]+ -48>>>0>=10){break z}Vp=q[Zp+76>>2];if(r[Vp+3|0]!=36){break z}q[((o[Vp+2|0]<<2)+Up|0)+ -192>>2]=10;$p=q[((o[Vp+2|0]<<3)+Sp|0)+ -384>>2];Vp=Vp+4|0;q[Zp+76>>2]=Vp;break y}if(jq){break b}if(kp){Vp=q[Rp>>2];q[Rp>>2]=Vp+4;$p=q[Vp>>2];}else {$p=0;}Vp=q[Zp+76>>2]+2|0;q[Zp+76>>2]=Vp;break y}q[Zp+76>>2]=Vp+1;$p=rh(Zp+76|0);Vp=q[Zp+76>>2];}_p=0;while(1){kq=_p;dq=-1;if(o[Vp|0]+ -65>>>0>57){break a}hq=Vp+1|0;q[Zp+76>>2]=hq;_p=o[Vp|0];Vp=hq;_p=r[(_p+w(kq,58)|0)+17087|0];if(_p+ -1>>>0<8){continue}break}if(!_p){break a}A:{B:{C:{if((_p|0)==19){if((gq|0)<=-1){break C}break a}if((gq|0)<0){break B}q[(gq<<2)+Up>>2]=_p;Vp=(gq<<3)+Sp|0;_p=q[Vp+4>>2];q[Zp+64>>2]=q[Vp>>2];q[Zp+68>>2]=_p;}Vp=0;if(!kp){continue c}break A}if(!kp){break e}qh(Zp- -64|0,_p,Rp);hq=q[Zp+76>>2];}cq=aq&-65537;aq=aq&8192?cq:aq;dq=0;gq=17121;_p=iq;Vp=o[hq+ -1|0];Vp=kq?(Vp&15)==3?Vp&-33:Vp:Vp;hq=Vp+ -88|0;if(hq>>>0<=32){break r}D:{E:{F:{G:{cq=Vp+ -65|0;if(cq>>>0>6){if((Vp|0)!=83){break f}if(!$p){break G}_p=q[Zp+64>>2];break E}switch(cq-1|0){case 1:break F;case 0:case 2:break f;default:break q}}Vp=0;ra(kp,32,eq,0,aq);break D}q[Zp+12>>2]=0;q[Zp+8>>2]=q[Zp+64>>2];q[Zp+64>>2]=Zp+8;$p=-1;_p=Zp+8|0;}Vp=0;H:{while(1){bq=q[_p>>2];if(!bq){break H}bq=th(Zp+4|0,bq);cq=(bq|0)<0;if(!(cq|bq>>>0>$p-Vp>>>0)){_p=_p+4|0;Vp=Vp+bq|0;if($p>>>0>Vp>>>0){continue}break H}break}dq=-1;if(cq){break a}}ra(kp,32,eq,Vp,aq);if(!Vp){Vp=0;break D}$p=0;_p=q[Zp+64>>2];while(1){bq=q[_p>>2];if(!bq){break D}bq=th(Zp+4|0,bq);$p=bq+$p|0;if(($p|0)>(Vp|0)){break D}ha(kp,Zp+4|0,bq);_p=_p+4|0;if($p>>>0<Vp>>>0){continue}break}}ra(kp,32,eq,Vp,aq^8192);Vp=(eq|0)>(Vp|0)?eq:Vp;continue c}_p=Vp+1|0;q[Zp+76>>2]=_p;aq=r[Vp+1|0];Vp=_p;continue}break}switch(hq-1|0){case 28:break i;case 21:break j;case 23:break l;case 22:break m;case 11:case 16:break n;case 10:break o;case 26:break p;case 8:case 12:case 13:case 14:break q;case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:case 9:case 15:case 17:case 18:case 19:case 20:case 24:case 25:case 27:case 29:case 30:break f;default:break k}}dq=fq;if(kp){break a}if(!jq){break e}Vp=1;while(1){kp=q[(Vp<<2)+Up>>2];if(kp){qh((Vp<<3)+Sp|0,kp,Rp);dq=1;Vp=Vp+1|0;if((Vp|0)!=10){continue}break a}break}dq=1;if(Vp>>>0>9){break a}dq=-1;if(q[(Vp<<2)+Up>>2]){break a}while(1){Vp=Vp+1|0;if(q[(Vp<<2)+Up>>2]?0:(Vp|0)!=10){continue}break}dq=Vp>>>0<10?-1:1;break a}Vp=n[737](kp,v[Zp+64>>3],eq,$p,aq,Vp)|0;continue}Vp=q[Zp+64>>2];bq=Vp?Vp:17131;Vp=Bv(bq,$p);_p=Vp?Vp:$p+bq|0;aq=cq;$p=Vp?Vp-bq|0:$p;break f}o[Zp+55|0]=q[Zp+64>>2];$p=1;bq=lq;aq=cq;break f}cq=q[Zp+68>>2];Vp=cq;bq=q[Zp+64>>2];if((Vp|0)<-1?1:(Vp|0)<=-1?bq>>>0>4294967295?0:1:0){Vp=0-(Vp+(0<bq>>>0)|0)|0;bq=0-bq|0;q[Zp+64>>2]=bq;q[Zp+68>>2]=Vp;dq=1;gq=17121;break h}if(aq&2048){dq=1;gq=17122;break h}dq=aq&1;gq=dq?17123:17121;break h}bq=Hv(q[Zp+64>>2],q[Zp+68>>2],iq);if(!(aq&8)){break g}Vp=iq-bq|0;$p=($p|0)>(Vp|0)?$p:Vp+1|0;break g}$p=$p>>>0>8?$p:8;aq=aq|8;Vp=120;}bq=Fv(q[Zp+64>>2],q[Zp+68>>2],iq,Vp&32);if(!(aq&8)|!(q[Zp+64>>2]|q[Zp+68>>2])){break g}gq=(Vp>>>4)+17121|0;dq=2;break g}Vp=0;_p=kq&255;if(_p>>>0>7){continue}I:{switch(_p-1|0){default:q[q[Zp+64>>2]>>2]=fq;continue;case 0:q[q[Zp+64>>2]>>2]=fq;continue;case 1:_p=q[Zp+64>>2];q[_p>>2]=fq;q[_p+4>>2]=fq>>31;continue;case 2:p[q[Zp+64>>2]>>1]=fq;continue;case 3:o[q[Zp+64>>2]]=fq;continue;case 5:q[q[Zp+64>>2]>>2]=fq;continue;case 4:continue;case 6:break I}}_p=q[Zp+64>>2];q[_p>>2]=fq;q[_p+4>>2]=fq>>31;continue}bq=q[Zp+64>>2];Vp=q[Zp+68>>2];gq=17121;}bq=Cb(bq,Vp,iq);}aq=($p|0)>-1?aq&-65537:aq;Vp=q[Zp+64>>2];cq=q[Zp+68>>2];J:{if(!(!!(Vp|cq)|$p)){bq=iq;$p=0;break J}Vp=!(Vp|cq)+(iq-bq|0)|0;$p=($p|0)>(Vp|0)?$p:Vp;}}cq=_p-bq|0;$p=($p|0)<(cq|0)?cq:$p;_p=$p+dq|0;Vp=(eq|0)<(_p|0)?_p:eq;ra(kp,32,Vp,_p,aq);ha(kp,gq,dq);ra(kp,48,Vp,_p,aq^65536);ra(kp,48,$p,cq,0);ha(kp,bq,cq);ra(kp,32,Vp,_p,aq^8192);continue}break}dq=0;break a}dq=-1;}P=Zp+80|0;return dq}function oe(kp,Rp,Sp,Up){var mq=0,nq=0,oq=0,pq=0,qq=0,rq=0,sq=0,tq=0,uq=0,vq=0,wq=0;qq=P-16|0;P=qq;oq=q[kp+12>>2];pq=oq+((Sp+Up|0)/2<<4)|0;vq=q[pq+8>>2];tq=q[pq+4>>2];uq=q[pq>>2];pq=Sp;rq=Up;while(1){a:{mq=(pq<<4)+oq|0;nq=q[mq+4>>2];b:{if((nq|0)<(tq|0)){break b}if((nq|0)!=(tq|0)){break a}nq=q[mq>>2];if((nq|0)<(uq|0)){break b}if((nq|0)!=(uq|0)|q[mq+8>>2]>=(vq|0)){break a}}pq=pq+1|0;continue}while(1){c:{wq=rq<<4;nq=wq+oq|0;sq=q[nq+4>>2];d:{if((tq|0)<(sq|0)){break d}if((tq|0)!=(sq|0)){break c}sq=q[nq>>2];if((uq|0)<(sq|0)){break d}if((uq|0)!=(sq|0)|(vq|0)>=q[nq+8>>2]){break c}}rq=rq+ -1|0;continue}break}if((pq|0)<=(rq|0)){oq=q[mq+12>>2];q[qq+8>>2]=q[mq+8>>2];q[qq+12>>2]=oq;oq=q[mq+4>>2];q[qq>>2]=q[mq>>2];q[qq+4>>2]=oq;oq=q[nq+4>>2];q[mq>>2]=q[nq>>2];q[mq+4>>2]=oq;oq=q[nq+12>>2];q[mq+8>>2]=q[nq+8>>2];q[mq+12>>2]=oq;oq=q[qq+4>>2];mq=q[kp+12>>2]+wq|0;q[mq>>2]=q[qq>>2];q[mq+4>>2]=oq;nq=q[qq+12>>2];q[mq+8>>2]=q[qq+8>>2];q[mq+12>>2]=nq;rq=rq+ -1|0;pq=pq+1|0;}if((pq|0)<=(rq|0)){oq=q[kp+12>>2];continue}break}if((rq|0)>(Sp|0)){oe(kp,Rp,Sp,rq);}if((pq|0)<(Up|0)){oe(kp,Rp,pq,Up);}P=qq+16|0;}function pe(kp,Rp,Sp,Up){var xq=0,yq=0,zq=0,Aq=0,Bq=0,Cq=0,Dq=0,Eq=0,Fq=0,Gq=0,Hq=0,Iq=0;yq=q[kp+4>>2];a:{if(q[kp>>2]==(Rp|0)){xq=2;if((Rp|0)!=(yq|0)){break a}yq=q[Rp+12>>2];Rp=q[q[Rp+8>>2]+12>>2];Aq=q[Rp+96>>2];Fq=q[yq+96>>2]-Aq|0;kp=q[kp+12>>2];xq=q[Rp+92>>2];Bq=q[kp+92>>2]-xq|0;xq=q[yq+92>>2]-xq|0;Aq=q[kp+96>>2]-Aq|0;Cq=w(Fq,Bq)-w(xq,Aq)|0;zq=Cq;Eq=Cq>>31;Cq=q[Sp+8>>2];Gq=q[Up+4>>2];Hq=q[Sp+4>>2];Iq=q[Up+8>>2];Dq=w(Cq,Gq)-w(Hq,Iq)|0;Dq=JB(zq,Eq,Dq,Dq>>31);Eq=Q;zq=xq;xq=q[kp+88>>2];kp=q[Rp+88>>2];xq=xq-kp|0;yq=q[yq+88>>2]-kp|0;kp=w(zq,xq)-w(yq,Bq)|0;Rp=kp;zq=kp>>31;Up=q[Up>>2];Sp=q[Sp>>2];kp=w(Up,Hq)-w(Sp,Gq)|0;Bq=JB(Rp,zq,kp,kp>>31);Rp=Bq+Dq|0;kp=Q+Eq|0;kp=Rp>>>0<Bq>>>0?kp+1|0:kp;zq=Rp;Rp=w(yq,Aq)-w(xq,Fq)|0;xq=Rp;yq=Rp>>31;Rp=w(Sp,Iq)-w(Up,Cq)|0;Sp=JB(xq,yq,Rp,Rp>>31);Rp=zq+Sp|0;kp=Q+kp|0;kp=Rp>>>0<Sp>>>0?kp+1|0:kp;return ((kp|0)>0?1:(kp|0)>=0?Rp>>>0<=0?0:1:0)?2:1}xq=(Rp|0)==(yq|0);}return xq}function qe(kp,Rp,Sp,Up){var Jq=0,Kq=0,Lq=0,Mq=0,Nq=0,Oq=0,Pq=0,Qq=0;Nq=P-16|0;P=Nq;Jq=Sp-Rp|0;a:{if(Jq>>>0<=2){b:{switch(Jq-1|0){default:q[Up>>2]=0;q[Up+4>>2]=0;q[Up+8>>2]=0;q[Up+12>>2]=0;break a;case 1:Jq=q[q[kp+92>>2]+(Rp<<2)>>2];Rp=q[Jq+204>>2];c:{Mq=q[Jq+88>>2];Lq=q[Jq+200>>2];Kq=q[Jq+92>>2];if(!((Mq|0)!=(Lq|0)|(Kq|0)!=(Rp|0))){Rp=Kq;if(q[Jq+96>>2]==q[Jq+208>>2]){break c}}Sp=Jq+112|0;Rp=Kq-Rp|0;Kq=Mq-Lq|0;d:{if(!(Rp|Kq)){Kq=q[Jq+96>>2]>q[Jq+208>>2];Rp=Kq?Sp:Jq;q[Rp+4>>2]=Rp;q[Rp>>2]=Rp;q[Up+8>>2]=Rp;q[Up+4>>2]=Rp;q[Up>>2]=Rp;Sp=Kq?Jq:Sp;Jq=Rp;break d}q[Jq+4>>2]=Sp;q[Jq>>2]=Sp;q[Jq+116>>2]=Jq;q[Jq+112>>2]=Jq;Mq=(Rp|0)<0;Lq=Mq&!Kq;Kq=(Kq|0)<0;Lq=Lq|Kq;q[Up+4>>2]=Lq?Sp:Jq;q[Up>>2]=Lq?Jq:Sp;if(!(Kq&!Rp?0:!Mq)){q[Up+8>>2]=Jq;Rp=Sp;break d}q[Up+8>>2]=Sp;Rp=Jq;}q[Up+12>>2]=Rp;kp=re(kp,Jq,Sp);q[kp+4>>2]=kp;q[kp>>2]=kp;q[Jq+8>>2]=kp;kp=q[kp+8>>2];q[kp+4>>2]=kp;q[kp>>2]=kp;q[Sp+8>>2]=kp;break a}q[Jq+8>>2]=0;q[Jq+4>>2]=Jq;q[Jq>>2]=Jq;q[Up+12>>2]=Jq;q[Up+8>>2]=Jq;q[Up+4>>2]=Jq;q[Up>>2]=Jq;break a;case 0:break b}}kp=q[q[kp+92>>2]+(Rp<<2)>>2];q[kp+8>>2]=0;q[kp+4>>2]=kp;q[kp>>2]=kp;q[Up+12>>2]=kp;q[Up+8>>2]=kp;q[Up+4>>2]=kp;q[Up>>2]=kp;break a}Kq=((Jq|0)/2|0)+Rp|0;Jq=Kq;e:{if((Jq|0)>=(Sp|0)){break e}Lq=q[kp+92>>2];Jq=q[(Lq+(Kq<<2)|0)+ -4>>2];Oq=q[Jq+88>>2];Pq=q[Jq+96>>2];Qq=q[Jq+92>>2];Jq=Kq;while(1){Mq=q[(Jq<<2)+Lq>>2];if((Oq|0)!=q[Mq+88>>2]|(Qq|0)!=q[Mq+92>>2]|(Pq|0)!=q[Mq+96>>2]){break e}Jq=Jq+1|0;if((Jq|0)!=(Sp|0)){continue}break}Jq=Sp;}qe(kp,Rp,Kq,Up);q[Nq+8>>2]=0;q[Nq+12>>2]=0;q[Nq>>2]=0;q[Nq+4>>2]=0;qe(kp,Jq,Sp,Nq);Qv(kp,Up,Nq);}P=Nq+16|0;}function re(kp,Rp,Sp){var Up=0,Rq=0,Sq=0,Tq=0,Uq=0,Vq=0;Sq=q[kp+56>>2];a:{if(Sq){break a}Up=q[kp+52>>2];b:{if(Up){q[kp+52>>2]=q[Up+8>>2];break b}q[6657]=q[6657]+1;Up=n[q[5255]](12,16)|0;Rq=q[kp+60>>2];q[Up+8>>2]=0;q[Up+4>>2]=Rq;q[6657]=q[6657]+1;q[Up>>2]=n[q[5255]](w(Rq,24),16);q[Up+8>>2]=q[kp+48>>2];q[kp+48>>2]=Up;}Sq=q[Up>>2];Tq=q[Up+4>>2];if((Tq|0)<1){break a}Up=0;Rq=Sq;while(1){Uq=Rq;Rq=Rq+24|0;Up=Up+1|0;q[Uq>>2]=(Up|0)<(Tq|0)?Rq:0;if((Up|0)!=(Tq|0)){continue}break}}q[kp+56>>2]=q[Sq>>2];q[Sq+16>>2]=0;q[Sq+20>>2]=0;q[Sq+8>>2]=0;q[Sq+12>>2]=0;q[Sq>>2]=0;q[Sq+4>>2]=0;Tq=q[kp+56>>2];c:{if(Tq){break c}Up=q[kp+52>>2];d:{if(Up){q[kp+52>>2]=q[Up+8>>2];break d}q[6657]=q[6657]+1;Up=n[q[5255]](12,16)|0;Rq=q[kp+60>>2];q[Up+8>>2]=0;q[Up+4>>2]=Rq;q[6657]=q[6657]+1;q[Up>>2]=n[q[5255]](w(Rq,24),16);q[Up+8>>2]=q[kp+48>>2];q[kp+48>>2]=Up;}Tq=q[Up>>2];Vq=q[Up+4>>2];if((Vq|0)<1){break c}Up=0;Rq=Tq;while(1){Uq=Rq;Rq=Rq+24|0;Up=Up+1|0;q[Uq>>2]=(Up|0)<(Vq|0)?Rq:0;if((Up|0)!=(Vq|0)){continue}break}}q[kp+56>>2]=q[Tq>>2];q[Tq>>2]=0;q[Tq+4>>2]=0;q[Sq+8>>2]=Tq;q[Tq+8>>2]=Sq;Rq=q[kp+100>>2];q[Sq+20>>2]=Rq;q[Tq+20>>2]=Rq;q[Sq+12>>2]=Sp;q[Tq+12>>2]=Rp;q[Sq+16>>2]=0;q[Tq+16>>2]=0;Rp=q[kp+116>>2];Sp=Rp+1|0;q[kp+116>>2]=Sp;if((Rp|0)>=q[kp+120>>2]){q[kp+120>>2]=Sp;}return Sq}function se(kp){var Rp=0;Rp=q[kp+24>>2];if(Rp){se(Rp);aa(Rp);}q[kp+24>>2]=0;Rp=q[kp+28>>2];if(Rp){se(Rp);aa(Rp);}q[kp+28>>2]=0;}function te(kp,Sp,Wq){var Xq=0,Yq=0,Zq=0,_q=0;Yq=Sc(kp,Sp);a:{if(!Yq){Yq=0;break a}Zq=q[kp+8>>2];if((Zq|0)>=0){if(!Zq){break a}while(1){Xq=q[Yq+32>>2];if(!Xq){break a}Yq=Xq;_q=_q+1|0;if((Zq|0)!=(_q|0)){continue}break}break a}Yq=q[kp>>2];}Xq=q[Wq+4>>2];q[Sp>>2]=q[Wq>>2];q[Sp+4>>2]=Xq;Xq=q[Wq+28>>2];q[Sp+24>>2]=q[Wq+24>>2];q[Sp+28>>2]=Xq;Xq=q[Wq+20>>2];q[Sp+16>>2]=q[Wq+16>>2];q[Sp+20>>2]=Xq;Xq=q[Wq+12>>2];q[Sp+8>>2]=q[Wq+8>>2];q[Sp+12>>2]=Xq;Rc(kp,Yq,Sp);}function ue(kp){var Sp=0;Sp=q[kp>>2];if(Sp){Tc(kp,Sp);}Sp=q[kp+4>>2];if(Sp){q[6658]=q[6658]+1;n[q[5256]](Sp);}q[kp+4>>2]=0;q[kp+8>>2]=-1;Sp=q[kp+32>>2];if(Sp){if(r[kp+36|0]){if(Sp){q[6658]=q[6658]+1;n[q[5256]](Sp);}}q[kp+32>>2]=0;}q[kp+16>>2]=0;q[kp+32>>2]=0;q[kp+24>>2]=0;q[kp+28>>2]=0;o[kp+36|0]=1;}function ve(kp,Wq,$q){var ar=0,br=0,cr=0,dr=x(0),er=0,fr=x(0),gr=x(0),hr=0,ir=0,jr=x(0),kr=x(0),lr=x(0),mr=0,nr=0,or=0,pr=x(0),qr=0;er=P-32|0;P=er;mr=q[kp+56>>2];a:{if(($q-Wq|0)==1){b:{if(r[kp+60|0]){Wq=q[kp+116>>2]+(Wq<<4)|0;ar=Wq;ir=q[ar+4>>2];$q=q[kp+136>>2]+(mr<<4)|0;br=$q;q[br>>2]=q[ar>>2];q[br+4>>2]=ir;break b}Wq=q[kp+76>>2]+(Wq<<6)|0;br=Wq;ir=q[br+4>>2];$q=q[kp+96>>2]+(mr<<6)|0;ar=$q;q[ar>>2]=q[br>>2];q[ar+4>>2]=ir;ar=q[br+60>>2];q[$q+56>>2]=q[br+56>>2];q[$q+60>>2]=ar;ar=q[br+52>>2];q[$q+48>>2]=q[br+48>>2];q[$q+52>>2]=ar;ar=q[br+44>>2];q[$q+40>>2]=q[br+40>>2];q[$q+44>>2]=ar;ar=q[br+36>>2];q[$q+32>>2]=q[br+32>>2];q[$q+36>>2]=ar;ar=q[br+28>>2];q[$q+24>>2]=q[br+24>>2];q[$q+28>>2]=ar;ar=q[br+20>>2];q[$q+16>>2]=q[br+16>>2];q[$q+20>>2]=ar;}br=q[Wq+12>>2];q[$q+8>>2]=q[Wq+8>>2];q[$q+12>>2]=br;q[kp+56>>2]=q[kp+56>>2]+1;break a}or=ow(kp,Wq,$q,pw(kp,Wq,$q));ir=q[kp+56>>2];c:{if(r[kp+60|0]){fr=u[kp+40>>2];gr=u[kp+8>>2];jr=u[kp+24>>2];kr=u[kp+44>>2];lr=u[kp+12>>2];pr=u[kp+28>>2];br=q[kp+136>>2]+(ir<<4)|0;ar=br;dr=x(x(u[kp+20>>2]-u[kp+4>>2])*u[kp+36>>2]);d:{if(dr<x(4294967296)&dr>=x(0)){cr=~~dr>>>0;break d}cr=0;}p[ar>>1]=cr&65534;ar=br;dr=x(x(pr-lr)*kr);e:{if(dr<x(4294967296)&dr>=x(0)){cr=~~dr>>>0;break e}cr=0;}p[ar+4>>1]=cr&65534;dr=x(x(jr-gr)*fr);f:{if(dr<x(4294967296)&dr>=x(0)){ar=~~dr>>>0;break f}ar=0;}p[br+2>>1]=ar&65534;break c}hr=q[kp+24>>2];br=q[kp+96>>2]+(ir<<6)|0;q[br>>2]=q[kp+20>>2];q[br+4>>2]=hr;ar=q[kp+32>>2];q[br+8>>2]=q[kp+28>>2];q[br+12>>2]=ar;}br=q[kp+56>>2];g:{if(r[kp+60|0]){jr=u[kp+40>>2];dr=u[kp+8>>2];kr=u[kp+44>>2];fr=u[kp+12>>2];br=q[kp+136>>2]+(br<<4)|0;ar=br;gr=u[kp+4>>2];gr=x(x(x(gr-gr)*u[kp+36>>2])+x(1));h:{if(gr<x(4294967296)&gr>=x(0)){cr=~~gr>>>0;break h}cr=0;}p[ar+6>>1]=cr|1;ar=br;fr=x(x(x(fr-fr)*kr)+x(1));i:{if(fr<x(4294967296)&fr>=x(0)){cr=~~fr>>>0;break i}cr=0;}p[ar+10>>1]=cr|1;dr=x(x(x(dr-dr)*jr)+x(1));j:{if(dr<x(4294967296)&dr>=x(0)){ar=~~dr>>>0;break j}ar=0;}p[br+8>>1]=ar|1;break g}hr=q[kp+8>>2];br=q[kp+96>>2]+(br<<6)|0;q[br+16>>2]=q[kp+4>>2];q[br+20>>2]=hr;ar=q[kp+16>>2];q[br+24>>2]=q[kp+12>>2];q[br+28>>2]=ar;}hr=q[kp+56>>2];if(($q|0)>(Wq|0)){br=Wq;while(1){k:{if(r[kp+60|0]){ar=q[kp+116>>2]+(br<<4)|0;cr=s[ar+4>>1];nr=s[ar+2>>1];qr=s[ar>>1];dr=u[kp+44>>2];fr=u[kp+40>>2];gr=u[kp+36>>2];q[er+28>>2]=0;jr=u[kp+4>>2];u[er+16>>2]=x(x(qr>>>0)/gr)+jr;kr=u[kp+8>>2];u[er+20>>2]=x(x(nr>>>0)/fr)+kr;lr=u[kp+12>>2];u[er+24>>2]=x(x(cr>>>0)/dr)+lr;cr=s[ar+6>>1];nr=s[ar+8>>1];ar=s[ar+10>>1];q[er+12>>2]=0;u[er+8>>2]=lr+x(x(ar>>>0)/dr);u[er+4>>2]=kr+x(x(nr>>>0)/fr);u[er>>2]=jr+x(x(cr>>>0)/gr);break k}ar=q[kp+76>>2]+(br<<6)|0;cr=q[ar+12>>2];q[er+24>>2]=q[ar+8>>2];q[er+28>>2]=cr;cr=q[ar+4>>2];q[er+16>>2]=q[ar>>2];q[er+20>>2]=cr;cr=q[ar+28>>2];q[er+8>>2]=q[ar+24>>2];q[er+12>>2]=cr;cr=q[ar+20>>2];q[er>>2]=q[ar+16>>2];q[er+4>>2]=cr;}nw(kp,hr,er+16|0,er);hr=q[kp+56>>2];br=br+1|0;if((br|0)!=($q|0)){continue}break}}ar=hr+1|0;q[kp+56>>2]=ar;ve(kp,Wq,or);hr=q[kp+56>>2];ve(kp,or,$q);br=r[kp+60|0];Wq=q[kp+56>>2]-mr|0;if(!(!br|(Wq|0)<129)){mw(kp,ar,hr);br=r[kp+60|0];}if(br&255){q[(q[kp+136>>2]+(ir<<4)|0)+12>>2]=0-Wq;break a}q[(q[kp+96>>2]+(ir<<6)|0)+32>>2]=Wq;}P=er+32|0;}function we(kp,Wq,$q){var rr=0,sr=0,tr=0,ur=0,vr=x(0),wr=0,xr=x(0),yr=x(0),zr=x(0),Ar=x(0),Br=x(0),Cr=0;a:{if(r[kp+165|0]){rr=q[kp+88>>2];if(!(!$q|(rr|0)<1)){tr=q[kp+96>>2];yr=u[kp+168>>2];zr=u[Wq+8>>2];Ar=u[Wq+4>>2];Br=u[Wq>>2];$q=0;while(1){sr=tr+($q<<4)|0;vr=x(u[sr>>2]-Br);xr=x(vr*vr);vr=x(u[sr+4>>2]-Ar);xr=x(xr+x(vr*vr));vr=x(u[sr+8>>2]-zr);if(x(xr+x(vr*vr))<=yr){break a}$q=$q+1|0;if(($q|0)<(rr|0)){continue}break}}$q=q[kp+32>>2];q[$q+12>>2]=q[$q+12>>2]+1;b:{if(q[kp+92>>2]!=(rr|0)){break b}sr=rr?rr<<1:1;if((rr|0)>=(sr|0)){break b}if(sr){q[6657]=q[6657]+1;ur=n[q[5255]](sr<<4,16)|0;rr=q[kp+88>>2];}if((rr|0)>=1){$q=0;while(1){tr=$q<<4;wr=tr+ur|0;tr=tr+q[kp+96>>2]|0;Cr=q[tr+4>>2];q[wr>>2]=q[tr>>2];q[wr+4>>2]=Cr;Cr=q[tr+12>>2];q[wr+8>>2]=q[tr+8>>2];q[wr+12>>2]=Cr;$q=$q+1|0;if((rr|0)!=($q|0)){continue}break}}$q=q[kp+96>>2];if($q){if(r[kp+100|0]){if($q){q[6658]=q[6658]+1;n[q[5256]]($q);}}q[kp+96>>2]=0;}q[kp+96>>2]=ur;q[kp+92>>2]=sr;o[kp+100|0]=1;rr=q[kp+88>>2];}$q=q[kp+96>>2]+(rr<<4)|0;rr=q[Wq+4>>2];q[$q>>2]=q[Wq>>2];q[$q+4>>2]=rr;rr=q[Wq+12>>2];q[$q+8>>2]=q[Wq+8>>2];q[$q+12>>2]=rr;Wq=q[kp+88>>2];q[kp+88>>2]=Wq+1;q[q[kp+32>>2]+16>>2]=q[kp+96>>2];return Wq}c:{rr=q[kp+108>>2];if(!$q|(rr|0)<1){break c}tr=q[kp+116>>2];yr=u[kp+168>>2];zr=u[Wq+8>>2];Ar=u[Wq+4>>2];Br=u[Wq>>2];$q=0;while(1){sr=tr+($q<<2)|0;vr=x(u[sr>>2]-Br);xr=x(vr*vr);vr=x(u[sr+4>>2]-Ar);xr=x(xr+x(vr*vr));vr=x(u[sr+8>>2]-zr);if(!(x(xr+x(vr*vr))<=yr)){$q=$q+3|0;if(($q|0)<(rr|0)){continue}break c}break}return ($q>>>0)/3|0}sr=q[kp+112>>2];d:{if((sr|0)!=(rr|0)){break d}sr=rr?rr<<1:1;if((rr|0)>=(sr|0)){sr=rr;break d}$q=0;if(sr){q[6657]=q[6657]+1;ur=n[q[5255]](sr<<2,16)|0;rr=q[kp+108>>2];}tr=q[kp+116>>2];e:{f:{if((rr|0)>=1){while(1){wr=$q<<2;q[wr+ur>>2]=q[tr+wr>>2];$q=$q+1|0;if((rr|0)!=($q|0)){continue}break f}}if(!tr){break e}}if(r[kp+120|0]){if(tr){q[6658]=q[6658]+1;n[q[5256]](tr);}rr=q[kp+108>>2];}q[kp+116>>2]=0;}q[kp+116>>2]=ur;q[kp+112>>2]=sr;o[kp+120|0]=1;}ur=q[kp+116>>2];q[ur+(rr<<2)>>2]=q[Wq>>2];$q=rr+1|0;q[kp+108>>2]=$q;g:{if(($q|0)!=(sr|0)){rr=ur;tr=sr;sr=$q;break g}tr=sr?sr<<1:1;if((sr|0)>=(tr|0)){rr=ur;tr=sr;break g}$q=0;rr=0;if(tr){q[6657]=q[6657]+1;rr=n[q[5255]](tr<<2,16)|0;sr=q[kp+108>>2];ur=q[kp+116>>2];}h:{i:{if((sr|0)>=1){while(1){wr=$q<<2;q[wr+rr>>2]=q[ur+wr>>2];$q=$q+1|0;if((sr|0)!=($q|0)){continue}break i}}if(!ur){break h}}if(r[kp+120|0]){if(ur){q[6658]=q[6658]+1;n[q[5256]](ur);}sr=q[kp+108>>2];}q[kp+116>>2]=0;}q[kp+116>>2]=rr;q[kp+112>>2]=tr;o[kp+120|0]=1;}q[(sr<<2)+rr>>2]=q[Wq+4>>2];$q=sr+1|0;q[kp+108>>2]=$q;j:{if(($q|0)!=(tr|0)){ur=rr;tr=$q;break j}sr=tr?tr<<1:1;if((tr|0)>=(sr|0)){ur=rr;break j}$q=0;ur=0;if(sr){q[6657]=q[6657]+1;ur=n[q[5255]](sr<<2,16)|0;tr=q[kp+108>>2];rr=q[kp+116>>2];}k:{l:{if((tr|0)>=1){while(1){wr=$q<<2;q[wr+ur>>2]=q[rr+wr>>2];$q=$q+1|0;if((tr|0)!=($q|0)){continue}break l}}if(!rr){break k}}if(r[kp+120|0]){if(rr){q[6658]=q[6658]+1;n[q[5256]](rr);}tr=q[kp+108>>2];}q[kp+116>>2]=0;}q[kp+116>>2]=ur;q[kp+112>>2]=sr;o[kp+120|0]=1;}q[(tr<<2)+ur>>2]=q[Wq+8>>2];Wq=tr+1|0;q[kp+108>>2]=Wq;kp=q[kp+32>>2];q[kp+16>>2]=ur;q[kp+12>>2]=q[kp+12>>2]+1;$q=((Wq|0)/3|0)+ -1|0;}return $q}function xe(kp,Wq,$q){var Dr=0,Er=0,Fr=0,Gr=0;q[kp>>2]=15916;o[kp+36|0]=1;q[kp+12>>2]=1065353216;q[kp+16>>2]=0;q[kp+4>>2]=1065353216;q[kp+8>>2]=1065353216;q[kp+32>>2]=0;q[kp+48>>2]=0;q[kp+24>>2]=0;q[kp+28>>2]=0;o[kp+100|0]=1;q[kp+96>>2]=0;o[kp+120|0]=1;q[kp+88>>2]=0;q[kp+92>>2]=0;q[kp+116>>2]=0;o[kp+140|0]=1;q[kp+108>>2]=0;q[kp+112>>2]=0;q[kp+136>>2]=0;o[kp+160|0]=1;q[kp+128>>2]=0;q[kp+132>>2]=0;q[kp+168>>2]=0;o[kp+164|0]=Wq;q[kp+148>>2]=0;q[kp+152>>2]=0;q[kp+156>>2]=0;o[kp+165|0]=$q;q[6657]=q[6657]+1;Fr=n[q[5255]](32,16)|0;Gr=q[kp+24>>2];if((Gr|0)>=1){while(1){Wq=Er<<5;$q=Wq+Fr|0;Wq=Wq+q[kp+32>>2]|0;Dr=q[Wq+4>>2];q[$q>>2]=q[Wq>>2];q[$q+4>>2]=Dr;Dr=q[Wq+28>>2];q[$q+24>>2]=q[Wq+24>>2];q[$q+28>>2]=Dr;Dr=q[Wq+20>>2];q[$q+16>>2]=q[Wq+16>>2];q[$q+20>>2]=Dr;Dr=q[Wq+12>>2];q[$q+8>>2]=q[Wq+8>>2];q[$q+12>>2]=Dr;Er=Er+1|0;if((Gr|0)!=(Er|0)){continue}break}}Wq=q[kp+32>>2];if(Wq){if(r[kp+36|0]){if(Wq){q[6658]=q[6658]+1;n[q[5256]](Wq);}}q[kp+32>>2]=0;}q[kp+32>>2]=Fr;o[kp+36|0]=1;q[kp+28>>2]=1;Wq=Fr+(q[kp+24>>2]<<5)|0;q[Wq+24>>2]=2;q[Wq+28>>2]=0;q[Wq+16>>2]=0;q[Wq+20>>2]=16;q[Wq+8>>2]=12;q[Wq+12>>2]=0;q[Wq>>2]=0;q[Wq+4>>2]=0;q[kp+24>>2]=q[kp+24>>2]+1;$q=r[kp+164|0];Fr=q[($q?128:148)+kp>>2];Wq=q[kp+32>>2];q[Wq+24>>2]=$q?2:3;q[Wq+4>>2]=0;Er=12;q[Wq+8>>2]=$q?12:6;q[Wq>>2]=(Fr|0)/3;a:{if(r[kp+165|0]){Er=16;kp=q[kp+88>>2];break a}kp=q[kp+108>>2]/3|0;}q[Wq+20>>2]=Er;q[Wq+16>>2]=0;q[Wq+12>>2]=kp;}function ye(kp,Wq){kp=kp|0;Wq=x(Wq);var $q=0;$q=P-16|0;P=$q;q[$q+12>>2]=kp;u[$q+8>>2]=Wq;kp=P-16|0;u[kp+12>>2]=u[$q+8>>2];u[5249]=u[kp+12>>2];P=$q+16|0;}function ze(kp,Wq){kp=kp|0;Wq=Wq|0;var Hr=0;Hr=P-16|0;P=Hr;q[Hr+12>>2]=kp;q[Hr+8>>2]=Wq;kp=q[Hr+12>>2];n[q[q[kp>>2]+40>>2]](kp,q[Hr+8>>2]);P=Hr+16|0;}function Ae(kp,Wq,Ir,Jr){kp=kp|0;Wq=Wq|0;Ir=Ir|0;Jr=Jr|0;var Kr=0;Kr=P-16|0;P=Kr;q[Kr+12>>2]=kp;q[Kr+8>>2]=Wq;q[Kr+4>>2]=Ir;q[Kr>>2]=Jr;kp=q[Kr+12>>2];n[q[q[kp>>2]+36>>2]](kp,q[Kr+8>>2],q[Kr+4>>2],q[Kr>>2]);P=Kr+16|0;}function Be(kp){kp=kp|0;var Wq=0;Wq=P-16|0;P=Wq;q[Wq+12>>2]=kp;kp=_x(q[Wq+12>>2]);P=Wq+16|0;return kp|0}function Ce(kp,Ir,Jr,Lr,Mr,Nr,Or){kp=kp|0;Ir=Ir|0;Jr=Jr|0;Lr=Lr|0;Mr=Mr|0;Nr=Nr|0;Or=Or|0;var Pr=0;Pr=P-32|0;P=Pr;q[Pr+28>>2]=kp;q[Pr+24>>2]=Ir;q[Pr+20>>2]=Jr;q[Pr+16>>2]=Lr;q[Pr+12>>2]=Mr;q[Pr+8>>2]=Nr;q[Pr+4>>2]=Or;WA(q[Pr+24>>2],q[Pr+20>>2],q[Pr+16>>2],q[Pr+12>>2],q[Pr+8>>2],q[Pr+4>>2]);P=Pr+32|0;}function De(kp,Ir,Jr,Lr){kp=kp|0;Ir=Ir|0;Jr=Jr|0;Lr=Lr|0;var Mr=0;Mr=P-16|0;P=Mr;q[Mr+12>>2]=kp;q[Mr+8>>2]=Ir;q[Mr+4>>2]=Jr;q[Mr>>2]=Lr;kp=q[Mr+12>>2];n[q[q[kp>>2]+32>>2]](kp,q[Mr+8>>2],q[Mr+4>>2],q[Mr>>2]);P=Mr+16|0;}function Ee(kp,Ir,Jr,Lr){var Nr=x(0),Or=0,Qr=0,Rr=0,Sr=0,Tr=0,Ur=x(0),Vr=x(0),Wr=0,Xr=x(0),Yr=x(0),Zr=x(0),_r=x(0),$r=0,as=0,bs=x(0),cs=x(0),ds=x(0);Tr=P-32|0;P=Tr;Qr=q[kp+12>>2];Rr=Qr+w((Jr+Lr|0)/2|0,24)|0;$r=q[Rr+20>>2];Xr=u[Rr+16>>2];bs=u[Rr+8>>2];cs=u[Rr+4>>2];ds=u[Rr>>2];Rr=Jr;Wr=Lr;while(1){Yr=u[Ir>>2];Ur=x(ds-Yr);Vr=x(Ur*Ur);Zr=u[Ir+4>>2];Ur=x(cs-Zr);Vr=x(Vr+x(Ur*Ur));_r=u[Ir+8>>2];Ur=x(bs-_r);Ur=x(Vr+x(Ur*Ur));while(1){a:{Or=w(Rr,24)+Qr|0;Nr=u[Or+16>>2];b:{if(Nr!=Xr){if(Nr<Xr){break b}break a}Nr=x(u[Or>>2]-Yr);Vr=x(Nr*Nr);Nr=x(u[Or+4>>2]-Zr);Vr=x(Vr+x(Nr*Nr));Nr=x(u[Or+8>>2]-_r);Nr=x(Vr+x(Nr*Nr));if(((Nr!=Ur?Nr<Ur:q[Or+20>>2]<($r|0))|0)!=1){break a}}Rr=Rr+1|0;continue}break}while(1){c:{as=w(Wr,24);Sr=as+Qr|0;Nr=u[Sr+16>>2];d:{if(Xr!=Nr){if(Xr<Nr){break d}break c}Nr=x(u[Sr>>2]-Yr);Vr=x(Nr*Nr);Nr=x(u[Sr+4>>2]-Zr);Vr=x(Vr+x(Nr*Nr));Nr=x(u[Sr+8>>2]-_r);Nr=x(Vr+x(Nr*Nr));if(((Ur!=Nr?Ur<Nr:($r|0)<q[Sr+20>>2])|0)!=1){break c}}Wr=Wr+ -1|0;continue}break}if((Rr|0)<=(Wr|0)){Qr=q[Or+20>>2];q[Tr+24>>2]=q[Or+16>>2];q[Tr+28>>2]=Qr;Qr=q[Or+12>>2];q[Tr+16>>2]=q[Or+8>>2];q[Tr+20>>2]=Qr;Qr=q[Or+4>>2];q[Tr+8>>2]=q[Or>>2];q[Tr+12>>2]=Qr;Qr=q[Sr+4>>2];q[Or>>2]=q[Sr>>2];q[Or+4>>2]=Qr;Qr=q[Sr+12>>2];q[Or+8>>2]=q[Sr+8>>2];q[Or+12>>2]=Qr;Qr=q[Sr+20>>2];q[Or+16>>2]=q[Sr+16>>2];q[Or+20>>2]=Qr;Qr=q[Tr+12>>2];Or=q[kp+12>>2]+as|0;q[Or>>2]=q[Tr+8>>2];q[Or+4>>2]=Qr;Sr=q[Tr+28>>2];q[Or+16>>2]=q[Tr+24>>2];q[Or+20>>2]=Sr;Sr=q[Tr+20>>2];q[Or+8>>2]=q[Tr+16>>2];q[Or+12>>2]=Sr;Wr=Wr+ -1|0;Rr=Rr+1|0;}if((Rr|0)<=(Wr|0)){Qr=q[kp+12>>2];continue}break}if((Wr|0)>(Jr|0)){Ee(kp,Ir,Jr,Wr);}if((Rr|0)<(Lr|0)){Ee(kp,Ir,Rr,Lr);}P=Tr+32|0;}function Fe(kp){kp=kp|0;var Ir=0;Ir=P-16|0;P=Ir;q[Ir+12>>2]=kp;kp=P-16|0;q[kp+12>>2]=q[Ir+12>>2];P=Ir+16|0;return q[q[kp+12>>2]+24>>2]}function Ge(kp,Jr,Lr){var es=0;es=P-16|0;P=es;q[es+12>>2]=kp;q[es+8>>2]=Jr;o[es+7|0]=Lr;kp=q[es+12>>2];a:{if(o[es+7|0]&1){$c(kp+284|0,es+8|0);break a}Hy(kp+284|0,es+8|0);}Jr=P-16|0;q[Jr+12>>2]=kp+284;q[kp+280>>2]=q[q[Jr+12>>2]+4>>2]>0;P=es+16|0;}function He(kp){var Jr=x(0),Lr=x(0),fs=x(0),gs=0,hs=0,is=0,js=0,ks=0,ls=0,ms=0;js=q[kp+28>>2];ls=(js|0)<1;while(1){a:{if(gs>>>0>7){break a}b:{switch(gs-1|0){default:Jr=x(u[kp+88>>2]+u[kp+72>>2]);Lr=x(u[kp+84>>2]+u[kp+68>>2]);fs=x(u[kp+80>>2]+u[kp+64>>2]);break a;case 0:Jr=x(u[kp+72>>2]-u[kp+88>>2]);Lr=x(u[kp+84>>2]+u[kp+68>>2]);fs=x(u[kp+80>>2]+u[kp+64>>2]);break a;case 1:Jr=x(u[kp+88>>2]+u[kp+72>>2]);Lr=x(u[kp+68>>2]-u[kp+84>>2]);fs=x(u[kp+80>>2]+u[kp+64>>2]);break a;case 2:Jr=x(u[kp+72>>2]-u[kp+88>>2]);Lr=x(u[kp+68>>2]-u[kp+84>>2]);fs=x(u[kp+80>>2]+u[kp+64>>2]);break a;case 3:Jr=x(u[kp+88>>2]+u[kp+72>>2]);Lr=x(u[kp+84>>2]+u[kp+68>>2]);fs=x(u[kp+64>>2]-u[kp+80>>2]);break a;case 4:Jr=x(u[kp+72>>2]-u[kp+88>>2]);Lr=x(u[kp+84>>2]+u[kp+68>>2]);fs=x(u[kp+64>>2]-u[kp+80>>2]);break a;case 5:Jr=x(u[kp+88>>2]+u[kp+72>>2]);Lr=x(u[kp+68>>2]-u[kp+84>>2]);fs=x(u[kp+64>>2]-u[kp+80>>2]);break a;case 6:break b}}Jr=x(u[kp+72>>2]-u[kp+88>>2]);Lr=x(u[kp+68>>2]-u[kp+84>>2]);fs=x(u[kp+64>>2]-u[kp+80>>2]);}c:{if(!ls){ms=q[kp+36>>2];ks=0;hs=0;while(1){is=w(hs,36)+ms|0;if(!!(x(u[is+32>>2]+x(x(x(fs*u[is+20>>2])+x(Lr*u[is+24>>2]))+x(Jr*u[is+28>>2])))>x(0))){break c}hs=hs+1|0;if((hs|0)<(js|0)){continue}break}}ks=1;gs=gs+1|0;if((gs|0)!=8){continue}}break}return ks}function Ie(kp,ns,os){var ps=x(0),qs=x(0),rs=x(0),ss=0,ts=0,us=0,vs=x(0),ws=x(0);qs=x(u[ns+64>>2]*x(.5));ss=q[ns+68>>2];us=q[ns+72>>2];ts=us<<2;ps=u[os>>2];rs=x(ps*ps);ps=u[os+4>>2];rs=x(rs+x(ps*ps));ps=u[os+8>>2];a:{b:{if(!!(u[ts+os>>2]>x(u[ns+56>>2]*x(E(x(rs+x(ps*ps))))))){q[(ss<<2)+kp>>2]=0;u[kp+ts>>2]=qs;os=q[ns+76>>2];break b}ps=u[(ss<<2)+os>>2];ts=os;os=q[ns+76>>2];vs=u[ts+(os<<2)>>2];ws=x(E(x(x(ps*ps)+x(vs*vs))));if(!!(ws>x(1.1920928955078125e-7))){rs=ps;ps=x(u[ns+60>>2]/ws);u[(ss<<2)+kp>>2]=rs*ps;u[(us<<2)+kp>>2]=-qs;qs=x(vs*ps);break a}q[(ss<<2)+kp>>2]=0;u[(us<<2)+kp>>2]=-qs;}qs=x(0);}u[(os<<2)+kp>>2]=qs;}function Je(kp){kp=kp|0;return q[kp+96>>2]}function Ke(kp){var ns=0,os=0,xs=0,ys=0,zs=0,As=0,Bs=0,Cs=0,Ds=0;Bs=q[kp+28>>2];os=q[kp+12>>2];a:{if((Bs|0)>=(os|0)){break a}b:{if(q[kp+32>>2]>=(os|0)){ns=q[kp+36>>2];break b}xs=Bs;if(os){q[6657]=q[6657]+1;ns=n[q[5255]](os<<2,16)|0;xs=q[kp+28>>2];}zs=q[kp+36>>2];c:{if((xs|0)>=1){while(1){As=ys<<2;q[As+ns>>2]=q[zs+As>>2];ys=ys+1|0;if((ys|0)!=(xs|0)){continue}break c}}if(zs){break c}q[kp+36>>2]=ns;q[kp+32>>2]=os;o[kp+40|0]=1;break b}if(r[kp+40|0]){if(zs){q[6658]=q[6658]+1;n[q[5256]](zs);}}q[kp+36>>2]=ns;o[kp+40|0]=1;q[kp+32>>2]=os;}xs=Bs<<2;As=os<<2;_(xs+ns|0,0,As-xs|0);q[kp+28>>2]=os;zs=q[kp+48>>2];if((zs|0)<(os|0)){d:{if(q[kp+52>>2]>=(os|0)){ns=q[kp+56>>2];break d}ys=0;xs=zs;ns=0;if(os){q[6657]=q[6657]+1;ns=n[q[5255]](As,16)|0;xs=q[kp+48>>2];}Cs=q[kp+56>>2];e:{if((xs|0)>=1){while(1){Ds=ys<<2;q[Ds+ns>>2]=q[Cs+Ds>>2];ys=ys+1|0;if((ys|0)!=(xs|0)){continue}break e}}if(Cs){break e}q[kp+56>>2]=ns;q[kp+52>>2]=os;o[kp+60|0]=1;break d}if(r[kp+60|0]){if(Cs){q[6658]=q[6658]+1;n[q[5256]](Cs);}}q[kp+56>>2]=ns;o[kp+60|0]=1;q[kp+52>>2]=os;}xs=zs<<2;_(xs+ns|0,0,As-xs|0);}q[kp+48>>2]=os;if((os|0)>=1){_(q[kp+36>>2],255,As);_(q[kp+56>>2],255,As);}if((Bs|0)<1){break a}xs=q[kp+56>>2];zs=q[kp+16>>2];os=q[kp+36>>2];ys=0;while(1){ns=zs+w(ys,12)|0;ns=q[ns+4>>2]<<16|q[ns>>2];ns=(ns<<15^-1)+ns|0;ns=w(ns>>>10^ns,9);ns=ns>>>6^ns;ns=(ns<<11^-1)+ns|0;ns=os+((q[kp+12>>2]+ -1&(ns>>>16^ns))<<2)|0;q[xs+(ys<<2)>>2]=q[ns>>2];q[ns>>2]=ys;ys=ys+1|0;if((Bs|0)!=(ys|0)){continue}break}}}function Le(kp){kp=kp|0;var Es=0,Fs=0,Gs=0,Hs=0;q[kp>>2]=11052;Gs=q[kp+52>>2];if((Gs|0)>=1){while(1){Hs=Es<<2;Fs=q[Hs+q[kp+60>>2]>>2];if(Fs){n[q[q[Fs>>2]>>2]](Fs)|0;Fs=q[kp+4>>2];n[q[q[Fs>>2]+60>>2]](Fs,q[q[kp+60>>2]+Hs>>2]);}Es=Es+1|0;if((Gs|0)!=(Es|0)){continue}break}}Es=q[kp+60>>2];if(Es){if(r[kp- -64|0]){if(Es){q[6658]=q[6658]+1;n[q[5256]](Es);}}q[kp+60>>2]=0;}q[kp+60>>2]=0;q[kp+52>>2]=0;q[kp+56>>2]=0;o[kp- -64|0]=1;Es=q[kp+40>>2];if(Es){if(r[kp+44|0]){if(Es){q[6658]=q[6658]+1;n[q[5256]](Es);}}q[kp+40>>2]=0;}q[kp+40>>2]=0;q[kp+32>>2]=0;q[kp+36>>2]=0;o[kp+44|0]=1;Es=q[kp+20>>2];if(Es){if(r[kp+24|0]){if(Es){q[6658]=q[6658]+1;n[q[5256]](Es);}}q[kp+20>>2]=0;}q[kp+20>>2]=0;q[kp+12>>2]=0;q[kp+16>>2]=0;o[kp+24|0]=1;return kp|0}function Me(kp,Is,Js,Ks,Ls){q[kp>>2]=17096;q[kp+4>>2]=q[Is>>2];q[kp>>2]=5592;o[kp+24|0]=1;q[kp>>2]=11052;q[kp+20>>2]=0;o[kp+44|0]=1;q[kp+12>>2]=0;q[kp+16>>2]=0;q[kp+40>>2]=0;o[kp- -64|0]=1;q[kp+32>>2]=0;q[kp+36>>2]=0;q[kp+60>>2]=0;o[kp+68|0]=Ls;q[kp+52>>2]=0;q[kp+56>>2]=0;Is=q[Is+4>>2];o[kp+76|0]=0;q[kp+72>>2]=Is;q[kp+80>>2]=q[q[(Ls?Ks:Js)+4>>2]+72>>2];wi(kp,Js,Ks);}function Ne(kp,Is,Js,Ks,Ls,Ms,Ns,Os,Ps,Qs,Rs){var Ss=x(0),Ts=x(0),Us=x(0),Vs=x(0),Ws=x(0),Xs=x(0),Ys=x(0),Zs=x(0),_s=x(0),$s=x(0),at=x(0),bt=x(0),ct=x(0),dt=x(0);Os=(Os<<2)+Qs|0;Ys=u[Os>>2];Zs=x(u[Qs+48>>2]-u[Ps+48>>2]);at=u[Os+16>>2];bt=x(u[Qs+52>>2]-u[Ps+52>>2]);ct=u[Os+32>>2];dt=x(u[Qs+56>>2]-u[Ps+56>>2]);Us=x(x(x(Ys*Zs)+x(at*bt))+x(ct*dt));Ns=(Ns<<2)+Ps|0;_s=u[Ns>>2];Vs=u[Ns+16>>2];Xs=u[Ns+32>>2];$s=x(x(x(_s*Zs)+x(Vs*bt))+x(Xs*dt));Ws=x(x(x(_s*Ys)+x(Vs*at))+x(Xs*ct));Ts=x(x(1)-x(Ws*Ws));a:{if(Ts==x(0)){break a}Ts=x(x($s-x(Ws*Us))/Ts);Ss=x(-Js);if(Ts<Ss){break a}Ss=Ts;if(!(Ss>Js)){break a}Ss=Js;}Ts=x(x(Ws*Ss)-Us);Us=x(-Ls);b:{c:{if(!!(Ts<Us)){Ls=x($s-x(Ws*Ls));Ss=x(-Js);if(Ls<Ss){Ts=Us;break b}if(!(Ls>Js)){Ts=Us;Ss=Ls;break b}Ls=Us;break c}if(!(Ts>Ls)){break b}Us=x(x(Ws*Ls)+$s);Ss=x(-Js);if(Us<Ss){Ts=Ls;break b}if(!(Us>Js)){Ts=Ls;Ss=Us;break b}}Ts=Ls;Ss=Js;}Us=x(ct*Ts);Js=x(Us+x(dt-x(Xs*Ss)));Ws=x(Ys*Ts);Ls=x(Ws+x(Zs-x(_s*Ss)));Ts=x(at*Ts);Ss=x(Ts+x(bt-x(Vs*Ss)));$s=x(x(Js*Js)+x(x(Ls*Ls)+x(Ss*Ss)));Ys=x(E($s));Zs=x(x(Ys-Ks)-Ms);if(!(Zs>Rs)){d:{if(!!($s<=x(1.4210854715202004e-14))){if(!!(x(y(Xs))>x(.7071067690849304))){q[kp>>2]=0;Ks=x(x(1)/x(E(x(x(Vs*Vs)+x(Xs*Xs)))));Js=x(Vs*Ks);u[kp+8>>2]=Js;Ss=x(Ks*x(-Xs));u[kp+4>>2]=Ss;Ks=x(0);break d}q[kp+8>>2]=0;Js=x(x(1)/x(E(x(x(_s*_s)+x(Vs*Vs)))));Ss=x(_s*Js);u[kp+4>>2]=Ss;Ks=x(Js*x(-Vs));u[kp>>2]=Ks;Js=x(0);break d}q[kp+12>>2]=0;Ks=x(x(-1)/Ys);Js=x(Js*Ks);u[kp+8>>2]=Js;Ss=x(Ss*Ks);u[kp+4>>2]=Ss;Ks=x(Ls*Ks);u[kp>>2]=Ks;}Ls=u[Qs+48>>2];Rs=u[Qs+52>>2];Vs=u[Qs+56>>2];q[Is+12>>2]=0;u[Is+8>>2]=x(Us+Vs)+x(Js*Ms);u[Is+4>>2]=x(Ts+Rs)+x(Ss*Ms);u[Is>>2]=x(Ws+Ls)+x(Ks*Ms);}return Zs}function Oe(kp,Is,Js,Ks,Ls,Ms,Ns){var Os=x(0),Ps=x(0),Qs=x(0),Rs=x(0),et=x(0),ft=x(0),gt=x(0),ht=x(0);Os=u[Ks>>2];Rs=u[Ks+4>>2];et=u[Ks+8>>2];gt=x(x(x(u[Js>>2]*Os)+x(u[Js+4>>2]*Rs))+x(u[Js+8>>2]*et));Ps=x(x(x(Os*u[kp>>2])+x(Rs*u[kp+16>>2]))+x(et*u[kp+32>>2]));Qs=u[Ls+80>>2];ft=x(Ps*(Ps<x(0)?x(-Qs):Qs));Ps=x(x(x(Os*u[kp+4>>2])+x(Rs*u[kp+20>>2]))+x(et*u[kp+36>>2]));Qs=u[Ls+84>>2];ft=x(ft+x(Ps*(Ps<x(0)?x(-Qs):Qs)));Ps=x(x(x(Os*u[kp+8>>2])+x(Rs*u[kp+24>>2]))+x(et*u[kp+40>>2]));Qs=u[Ls+88>>2];Ps=x(ft+x(Ps*(Ps<x(0)?x(-Qs):Qs)));Qs=u[Ls+96>>2];ft=Ps>Qs?Ps:Qs;Ps=x(x(x(Os*u[Is>>2])+x(Rs*u[Is+16>>2]))+x(et*u[Is+32>>2]));Qs=u[Ms+80>>2];ht=x(Ps*(Ps<x(0)?x(-Qs):Qs));Ps=x(x(x(Os*u[Is+4>>2])+x(Rs*u[Is+20>>2]))+x(et*u[Is+36>>2]));Qs=u[Ms+84>>2];Os=x(x(x(Os*u[Is+8>>2])+x(Rs*u[Is+24>>2]))+x(et*u[Is+40>>2]));Rs=u[Ms+88>>2];Os=x(x(ht+x(Ps*(Ps<x(0)?x(-Qs):Qs)))+x(Os*(Os<x(0)?x(-Rs):Rs)));Rs=u[Ms+96>>2];Os=x(ft+(Os>Rs?Os:Rs));Rs=x(gt+Os);Os=x(Os-gt);return (Rs<Os?Rs:Os)>Ns^1}function Pe(kp,Is,Js,Ks,Ls,Ms){var Ns=0,it=x(0),jt=0,kt=x(0),lt=x(0),mt=x(0),nt=x(0),ot=x(0),pt=x(0),qt=x(0),rt=x(0),st=x(0),tt=x(0),ut=x(0),vt=x(0),wt=0,xt=x(0),yt=x(0),zt=x(0),At=x(0),Bt=0,Ct=x(0),Dt=x(0),Et=x(0),Ft=x(0),Gt=x(0),Ht=x(0),It=x(0),Jt=0,Kt=x(0),Lt=x(0),Mt=x(0);Ns=P-656|0;P=Ns;jt=q[Ks+12>>2];Bt=q[Ks+4>>2];wt=q[Bt+4>>2];a:{if((wt|0)<=19){u[Ns+652>>2]=Ms;q[Ns+648>>2]=0;q[Ns+480>>2]=7628;q[Ns+644>>2]=q[Ls+4>>2];o[Ns+452|0]=0;q[Ns+428>>2]=953267991;q[Ns+32>>2]=4956;wt=Ns+96|0;q[wt+20>>2]=0;q[wt+16>>2]=Bt;q[wt+12>>2]=kp;q[wt+8>>2]=Ns+32;q[wt+4>>2]=Ns+120;q[wt>>2]=7992;b:{if(!n[q[q[wt>>2]+8>>2]](wt,Is,Js,jt,jt,Ns+480|0)){break b}Ms=u[Ns+612>>2];it=u[Ns+616>>2];kt=u[Ns+620>>2];lt=x(x(x(Ms*Ms)+x(it*it))+x(kt*kt));if(!(lt>x(9999999747378752e-20))){break b}mt=u[Ns+644>>2];if(!(mt<u[Ls+4>>2])){break b}nt=kt;kt=x(x(1)/x(E(lt)));u[Ns+620>>2]=nt*kt;u[Ns+616>>2]=it*kt;u[Ns+612>>2]=Ms*kt;kp=q[Ks+8>>2];q[Ns+52>>2]=0;q[Ns+48>>2]=kp;Is=q[Ns+624>>2];kp=Ns- -64|0;q[kp>>2]=q[Ns+620>>2];q[kp+4>>2]=Is;kp=q[Ns+612>>2];Is=q[Ns+616>>2];Js=q[Ns+640>>2];q[Ns+80>>2]=q[Ns+636>>2];q[Ns+84>>2]=Js;q[Ns+56>>2]=kp;q[Ns+60>>2]=Is;kp=q[Ns+632>>2];q[Ns+72>>2]=q[Ns+628>>2];q[Ns+76>>2]=kp;u[Ns+88>>2]=mt;x(n[q[q[Ls>>2]+12>>2]](Ls,Ns+48|0,1));}break a}Jt=wt+ -21|0;if(Jt>>>0<=8){c:{if(Jt>>>0>7){break c}d:{switch(Jt-1|0){default:it=u[jt+20>>2];kt=u[jt+36>>2];lt=u[jt+24>>2];vt=u[jt+52>>2];qt=u[jt+56>>2];mt=u[jt+40>>2];nt=u[jt+32>>2];tt=u[jt+16>>2];pt=u[jt>>2];ot=u[jt+4>>2];rt=u[jt+48>>2];ut=u[jt+8>>2];st=u[Is+52>>2];yt=u[Is+56>>2];zt=u[Is+48>>2];q[Ns+60>>2]=0;vt=x(-vt);At=x(x(x(lt*vt)-x(ut*rt))-x(mt*qt));u[Ns+56>>2]=At+x(x(x(ut*zt)+x(lt*st))+x(mt*yt));xt=x(x(x(it*vt)-x(ot*rt))-x(kt*qt));u[Ns+52>>2]=xt+x(x(x(ot*zt)+x(it*st))+x(kt*yt));vt=x(x(x(tt*vt)-x(pt*rt))-x(nt*qt));u[Ns+48>>2]=vt+x(x(x(pt*zt)+x(tt*st))+x(nt*yt));qt=u[Js+52>>2];rt=u[Js+56>>2];st=u[Js+48>>2];q[Ns+108>>2]=0;u[Ns+104>>2]=At+x(x(x(ut*st)+x(lt*qt))+x(mt*rt));u[Ns+100>>2]=xt+x(x(x(ot*st)+x(it*qt))+x(kt*rt));u[Ns+96>>2]=vt+x(x(x(pt*st)+x(tt*qt))+x(nt*rt));qt=u[Js+20>>2];rt=u[Js+36>>2];st=u[Js+24>>2];yt=u[Js+40>>2];zt=u[Js+32>>2];vt=u[Js>>2];At=u[Js+16>>2];xt=u[Js+4>>2];Ct=u[Js+8>>2];q[Ns+524>>2]=0;q[Ns+528>>2]=0;q[Ns+508>>2]=0;q[Ns+532>>2]=0;q[Ns+536>>2]=0;q[Ns+540>>2]=0;u[Ns+520>>2]=x(x(ut*Ct)+x(lt*st))+x(mt*yt);u[Ns+516>>2]=x(x(ut*xt)+x(lt*qt))+x(mt*rt);u[Ns+504>>2]=x(x(ot*Ct)+x(it*st))+x(kt*yt);u[Ns+500>>2]=x(x(ot*xt)+x(it*qt))+x(kt*rt);q[Ns+492>>2]=0;u[Ns+512>>2]=x(x(ut*vt)+x(lt*At))+x(mt*zt);u[Ns+496>>2]=x(x(ot*vt)+x(it*At))+x(kt*zt);u[Ns+488>>2]=x(x(pt*Ct)+x(tt*st))+x(nt*yt);u[Ns+484>>2]=x(x(pt*xt)+x(tt*qt))+x(nt*rt);u[Ns+480>>2]=x(x(pt*vt)+x(tt*At))+x(nt*zt);Ks=q[Ks+8>>2];Ji(Ns+120|0,kp,Is,Js,jt,x(n[q[q[Bt>>2]+48>>2]](Bt)));q[Ns+340>>2]=Bt;q[Ns+336>>2]=Ks;q[Ns+120>>2]=9160;q[Ns+332>>2]=Ls;Is=q[Ls+4>>2];u[Ns+328>>2]=Ms;q[Ns+320>>2]=Is;n[q[q[kp>>2]+8>>2]](kp,Ns+480|0,Ns+32|0,Ns+16|0);Wy(Bt,Ns+120|0,Ns+48|0,Ns+96|0,Ns+32|0,Ns+16|0);break a;case 0:case 1:case 2:case 3:case 4:case 5:break c;case 6:break d}}u[Ns+292>>2]=Ms;q[Ns+288>>2]=0;q[Ns+120>>2]=7628;q[Ns+284>>2]=q[Ls+4>>2];wt=Ns+48|0;q[wt+20>>2]=Bt;q[wt+16>>2]=0;q[wt+12>>2]=kp;q[wt+4>>2]=0;q[wt+8>>2]=0;q[wt>>2]=7992;e:{if(!n[q[q[wt>>2]+8>>2]](wt,Is,Js,jt,jt,Ns+120|0)){break e}Ms=u[Ns+252>>2];it=u[Ns+256>>2];kt=u[Ns+260>>2];lt=x(x(x(Ms*Ms)+x(it*it))+x(kt*kt));if(!(lt>x(9999999747378752e-20))){break e}mt=u[Ns+284>>2];if(!(mt<u[Ls+4>>2])){break e}nt=kt;kt=x(x(1)/x(E(lt)));u[Ns+260>>2]=nt*kt;u[Ns+256>>2]=it*kt;u[Ns+252>>2]=Ms*kt;kp=q[Ks+8>>2];q[Ns+484>>2]=0;q[Ns+480>>2]=kp;kp=q[Ns+264>>2];q[Ns+496>>2]=q[Ns+260>>2];q[Ns+500>>2]=kp;kp=q[Ns+252>>2];Is=q[Ns+256>>2];Js=q[Ns+280>>2];q[Ns+512>>2]=q[Ns+276>>2];q[Ns+516>>2]=Js;q[Ns+488>>2]=kp;q[Ns+492>>2]=Is;kp=q[Ns+272>>2];q[Ns+504>>2]=q[Ns+268>>2];q[Ns+508>>2]=kp;u[Ns+520>>2]=mt;x(n[q[q[Ls>>2]+12>>2]](Ls,Ns+480|0,1));}break a}yt=u[Js+52>>2];zt=u[Js+56>>2];Mt=u[jt+52>>2];kt=u[jt+56>>2];tt=u[Is+52>>2];vt=u[Is+56>>2];mt=u[jt+20>>2];nt=u[jt+36>>2];ot=u[jt+24>>2];ut=u[jt+40>>2];At=u[Js+48>>2];xt=u[jt+48>>2];Ct=u[Is+48>>2];lt=u[jt+32>>2];pt=u[jt>>2];qt=u[jt+16>>2];rt=u[jt+4>>2];st=u[jt+8>>2];it=u[Js+20>>2];Dt=u[Js+36>>2];Ft=u[Js+24>>2];Gt=u[Js+40>>2];Ht=u[Js+32>>2];It=u[Js>>2];Et=u[Js+16>>2];Kt=u[Js+4>>2];Lt=u[Js+8>>2];q[Ns+524>>2]=0;q[Ns+528>>2]=0;q[Ns+508>>2]=0;q[Ns+532>>2]=0;q[Ns+536>>2]=0;q[Ns+540>>2]=0;u[Ns+520>>2]=x(x(st*Lt)+x(ot*Ft))+x(ut*Gt);u[Ns+516>>2]=x(x(st*Kt)+x(ot*it))+x(ut*Dt);u[Ns+504>>2]=x(x(rt*Lt)+x(mt*Ft))+x(nt*Gt);u[Ns+500>>2]=x(x(rt*Kt)+x(mt*it))+x(nt*Dt);q[Ns+492>>2]=0;u[Ns+512>>2]=x(x(st*It)+x(ot*Et))+x(ut*Ht);u[Ns+496>>2]=x(x(rt*It)+x(mt*Et))+x(nt*Ht);u[Ns+488>>2]=x(x(pt*Lt)+x(qt*Ft))+x(lt*Gt);u[Ns+484>>2]=x(x(pt*Kt)+x(qt*it))+x(lt*Dt);u[Ns+480>>2]=x(x(pt*It)+x(qt*Et))+x(lt*Ht);Ks=q[Ks+8>>2];Ji(Ns+120|0,kp,Is,Js,jt,x(n[q[q[Bt>>2]+48>>2]](Bt)));q[Ns+340>>2]=Bt;q[Ns+336>>2]=Ks;q[Ns+120>>2]=9372;q[Ns+332>>2]=Ls;Is=q[Ls+4>>2];u[Ns+328>>2]=Ms;q[Ns+320>>2]=Is;n[q[q[kp>>2]+8>>2]](kp,Ns+480|0,Ns+48|0,Ns+96|0);q[Ns+44>>2]=0;Dt=x(-Mt);Ft=x(x(x(ot*Dt)-x(st*xt))-x(ut*kt));Ms=x(Ft+x(x(x(st*Ct)+x(ot*tt))+x(ut*vt)));u[Ns+40>>2]=Ms;Gt=x(x(x(mt*Dt)-x(rt*xt))-x(nt*kt));it=x(Gt+x(x(x(rt*Ct)+x(mt*tt))+x(nt*vt)));u[Ns+36>>2]=it;xt=x(x(x(qt*Dt)-x(pt*xt))-x(lt*kt));kt=x(xt+x(x(x(pt*Ct)+x(qt*tt))+x(lt*vt)));u[Ns+32>>2]=kt;tt=kt;lt=x(xt+x(x(x(pt*At)+x(qt*yt))+x(lt*zt)));if(!!(lt<kt)){u[Ns+32>>2]=lt;tt=lt;}pt=it;mt=x(Gt+x(x(x(rt*At)+x(mt*yt))+x(nt*zt)));if(!!(mt<it)){u[Ns+36>>2]=mt;pt=mt;}nt=x(Ft+x(x(x(st*At)+x(ot*yt))+x(ut*zt)));ot=Ms;if(!!(nt<ot)){u[Ns+40>>2]=nt;ot=nt;}q[Ns+28>>2]=0;u[Ns+24>>2]=Ms;u[Ns+20>>2]=it;u[Ns+16>>2]=kt;if(!!(kt<lt)){u[Ns+16>>2]=lt;kt=lt;}if(!!(it<mt)){u[Ns+20>>2]=mt;it=mt;}if(!!(Ms<nt)){u[Ns+24>>2]=nt;Ms=nt;}u[Ns+32>>2]=u[Ns+48>>2]+tt;u[Ns+36>>2]=u[Ns+52>>2]+pt;u[Ns+40>>2]=u[Ns+56>>2]+ot;u[Ns+16>>2]=u[Ns+96>>2]+kt;u[Ns+20>>2]=u[Ns+100>>2]+it;u[Ns+24>>2]=u[Ns+104>>2]+Ms;n[q[q[Bt>>2]+64>>2]](Bt,Ns+120|0,Ns+32|0,Ns+16|0);break a}if((wt|0)!=31){break a}n[q[5253]](8529);qt=u[Is+56>>2];rt=u[Is+52>>2];st=u[Is+36>>2];yt=u[Is+20>>2];zt=u[Is+40>>2];vt=u[Is+24>>2];it=u[jt+32>>2];kt=u[jt>>2];lt=u[jt+16>>2];At=u[Is+32>>2];xt=u[Is>>2];Ct=u[Is+16>>2];Dt=u[jt+56>>2];Et=u[jt+52>>2];Ft=u[jt+48>>2];Gt=u[Is+48>>2];mt=u[jt+36>>2];nt=u[jt+4>>2];tt=u[jt+20>>2];Ht=u[Is+4>>2];pt=u[jt+40>>2];It=u[Is+8>>2];ot=u[jt+8>>2];ut=u[jt+24>>2];q[Ns+180>>2]=0;q[Ns+164>>2]=0;q[Ns+148>>2]=0;u[Ns+160>>2]=x(x(ot*It)+x(ut*vt))+x(pt*zt);u[Ns+156>>2]=x(x(ot*Ht)+x(ut*yt))+x(pt*st);u[Ns+144>>2]=x(x(nt*It)+x(tt*vt))+x(mt*zt);u[Ns+140>>2]=x(x(nt*Ht)+x(tt*yt))+x(mt*st);Et=x(-Et);u[Ns+176>>2]=x(x(x(ut*Et)-x(ot*Ft))-x(pt*Dt))+x(x(x(ot*Gt)+x(ut*rt))+x(pt*qt));u[Ns+172>>2]=x(x(x(tt*Et)-x(nt*Ft))-x(mt*Dt))+x(x(x(nt*Gt)+x(tt*rt))+x(mt*qt));q[Ns+132>>2]=0;u[Ns+152>>2]=x(x(ot*xt)+x(ut*Ct))+x(pt*At);u[Ns+136>>2]=x(x(nt*xt)+x(tt*Ct))+x(mt*At);u[Ns+128>>2]=x(x(kt*It)+x(lt*vt))+x(it*zt);u[Ns+124>>2]=x(x(kt*Ht)+x(lt*yt))+x(it*st);u[Ns+120>>2]=x(x(kt*xt)+x(lt*Ct))+x(it*At);u[Ns+168>>2]=x(x(x(lt*Et)-x(kt*Ft))-x(it*Dt))+x(x(x(kt*Gt)+x(lt*rt))+x(it*qt));n[q[q[kp>>2]+8>>2]](kp,Ns+120|0,Ns+48|0,Ns+96|0);qt=u[Js+56>>2];rt=u[Js+52>>2];st=u[Js+36>>2];yt=u[Js+20>>2];zt=u[Js+40>>2];vt=u[Js+24>>2];it=u[jt+32>>2];kt=u[jt>>2];lt=u[jt+16>>2];At=u[Js+32>>2];xt=u[Js>>2];Ct=u[Js+16>>2];Dt=u[jt+56>>2];Et=u[jt+52>>2];Ft=u[jt+48>>2];Gt=u[Js+48>>2];mt=u[jt+36>>2];nt=u[jt+4>>2];tt=u[jt+20>>2];Ht=u[Js+4>>2];pt=u[jt+40>>2];It=u[Js+8>>2];ot=u[jt+8>>2];ut=u[jt+24>>2];q[Ns+180>>2]=0;q[Ns+164>>2]=0;q[Ns+148>>2]=0;u[Ns+160>>2]=x(x(ot*It)+x(ut*vt))+x(pt*zt);u[Ns+156>>2]=x(x(ot*Ht)+x(ut*yt))+x(pt*st);u[Ns+144>>2]=x(x(nt*It)+x(tt*vt))+x(mt*zt);u[Ns+140>>2]=x(x(nt*Ht)+x(tt*yt))+x(mt*st);Et=x(-Et);u[Ns+176>>2]=x(x(x(ut*Et)-x(ot*Ft))-x(pt*Dt))+x(x(x(ot*Gt)+x(ut*rt))+x(pt*qt));u[Ns+172>>2]=x(x(x(tt*Et)-x(nt*Ft))-x(mt*Dt))+x(x(x(nt*Gt)+x(tt*rt))+x(mt*qt));q[Ns+132>>2]=0;u[Ns+152>>2]=x(x(ot*xt)+x(ut*Ct))+x(pt*At);u[Ns+136>>2]=x(x(nt*xt)+x(tt*Ct))+x(mt*At);u[Ns+128>>2]=x(x(kt*It)+x(lt*vt))+x(it*zt);u[Ns+124>>2]=x(x(kt*Ht)+x(lt*yt))+x(it*st);u[Ns+120>>2]=x(x(kt*xt)+x(lt*Ct))+x(it*At);u[Ns+168>>2]=x(x(x(lt*Et)-x(kt*Ft))-x(it*Dt))+x(x(x(kt*Gt)+x(lt*rt))+x(it*qt));n[q[q[kp>>2]+8>>2]](kp,Ns+120|0,Ns+32|0,Ns+16|0);it=u[Ns+32>>2];if(!!(it<u[Ns+48>>2])){u[Ns+48>>2]=it;}it=u[Ns+36>>2];if(!!(it<u[Ns+52>>2])){u[Ns+52>>2]=it;}it=u[Ns+40>>2];if(!!(it<u[Ns+56>>2])){u[Ns+56>>2]=it;}it=u[Ns+44>>2];if(!!(it<u[Ns+60>>2])){u[Ns+60>>2]=it;}it=u[Ns+16>>2];if(!!(u[Ns+96>>2]<it)){u[Ns+96>>2]=it;}it=u[Ns+20>>2];if(!!(u[Ns+100>>2]<it)){u[Ns+100>>2]=it;}it=u[Ns+24>>2];if(!!(u[Ns+104>>2]<it)){u[Ns+104>>2]=it;}it=u[Ns+28>>2];if(!!(u[Ns+108>>2]<it)){u[Ns+108>>2]=it;}q[Ns+512>>2]=Ls;q[Ns+508>>2]=jt;u[Ns+500>>2]=Ms;q[Ns+496>>2]=Js;q[Ns+492>>2]=Is;q[Ns+488>>2]=kp;q[Ns+484>>2]=Ks;q[Ns+480>>2]=9588;q[Ns+504>>2]=Bt;kp=q[Bt+68>>2];f:{if(!kp){if(q[Bt+20>>2]<1){break f}Js=0;while(1){kp=q[Bt+28>>2]+w(Js,80)|0;Is=q[kp+64>>2];Ks=q[kp+12>>2];q[Ns+128>>2]=q[kp+8>>2];q[Ns+132>>2]=Ks;Ks=q[kp+4>>2];q[Ns+120>>2]=q[kp>>2];q[Ns+124>>2]=Ks;Ks=q[kp+28>>2];q[Ns+144>>2]=q[kp+24>>2];q[Ns+148>>2]=Ks;Ks=q[kp+20>>2];q[Ns+136>>2]=q[kp+16>>2];q[Ns+140>>2]=Ks;Ks=q[kp+44>>2];q[Ns+160>>2]=q[kp+40>>2];q[Ns+164>>2]=Ks;Ks=q[kp+36>>2];q[Ns+152>>2]=q[kp+32>>2];q[Ns+156>>2]=Ks;Ks=q[kp+60>>2];q[Ns+176>>2]=q[kp+56>>2];q[Ns+180>>2]=Ks;Ks=q[kp+52>>2];q[Ns+168>>2]=q[kp+48>>2];q[Ns+172>>2]=Ks;Gi(Ns+480|0,Js,Ns+120|0,Is);Js=Js+1|0;if((Js|0)<q[Bt+20>>2]){continue}break}break f}Is=q[Ns+60>>2];q[Ns+128>>2]=q[Ns+56>>2];q[Ns+132>>2]=Is;Is=q[Ns+108>>2];q[Ns+144>>2]=q[Ns+104>>2];q[Ns+148>>2]=Is;Is=q[Ns+100>>2];q[Ns+136>>2]=q[Ns+96>>2];q[Ns+140>>2]=Is;Is=q[Ns+52>>2];q[Ns+120>>2]=q[Ns+48>>2];q[Ns+124>>2]=Is;Zb(q[kp>>2],Ns+120|0,Ns+480|0);}n[q[5254]]();}P=Ns+656|0;}function Qe(kp,Is,Js,Ks){var Ls=0,Ms=0,Nt=x(0),Ot=x(0),Pt=x(0),Qt=x(0),Rt=x(0),St=x(0),Tt=0,Ut=x(0),Vt=x(0),Wt=0,Xt=x(0),Yt=x(0),Zt=x(0),_t=x(0),$t=x(0),au=x(0),bu=x(0),cu=x(0),du=x(0),eu=x(0),fu=0,gu=x(0),hu=x(0),iu=x(0),ju=x(0),ku=x(0),lu=x(0),mu=x(0),nu=x(0),ou=x(0),pu=x(0),qu=x(0),ru=x(0),su=x(0);Ls=P-688|0;P=Ls;Aa(Ls+632|0);q[Ls+660>>2]=0;q[Ls+664>>2]=0;q[Ls+656>>2]=1065353216;q[Ls+668>>2]=0;q[Ls+672>>2]=0;q[Ls+676>>2]=0;q[Ls+680>>2]=0;q[Ls+684>>2]=0;q[Ls+648>>2]=1065353216;q[Ls+652>>2]=1065353216;q[Ls+636>>2]=8;q[Ls+632>>2]=12036;Ms=q[Js+12>>2];Tt=q[Js+4>>2];Wt=q[Tt+4>>2];a:{if((Wt|0)<=19){q[Ls+624>>2]=0;q[Ls+628>>2]=0;q[Ls+456>>2]=7628;q[Ls+620>>2]=q[Ks+4>>2];o[Ls+428|0]=0;q[Ls+404>>2]=953267991;Wt=Ls+80|0;q[Wt+12>>2]=Tt;q[Wt+8>>2]=Ls+632;q[Wt+4>>2]=Ls+96;q[Wt>>2]=6924;fu=Ls- -64|0;q[fu+12>>2]=Tt;q[fu+8>>2]=Ls+632;q[fu+4>>2]=Ls+96;q[fu>>2]=7880;Tt=q[Ks+20>>2]&8?fu:Wt;b:{if(!n[q[q[Tt>>2]+8>>2]](Tt,kp,Is,Ms,Ms,Ls+456|0)){break b}Ot=u[Ls+588>>2];Qt=u[Ls+592>>2];Nt=u[Ls+596>>2];Pt=x(x(x(Ot*Ot)+x(Qt*Qt))+x(Nt*Nt));if(!(Pt>x(9999999747378752e-20))){break b}Yt=u[Ls+620>>2];if(!(Yt<u[Ks+4>>2])){break b}Rt=Nt;Nt=x(x(1)/x(E(Pt)));u[Ls+596>>2]=Rt*Nt;u[Ls+592>>2]=Qt*Nt;u[Ls+588>>2]=Ot*Nt;kp=q[Js+8>>2];q[Ls+36>>2]=0;q[Ls+32>>2]=kp;kp=q[Ls+600>>2];q[Ls+48>>2]=q[Ls+596>>2];q[Ls+52>>2]=kp;kp=q[Ls+592>>2];q[Ls+40>>2]=q[Ls+588>>2];q[Ls+44>>2]=kp;u[Ls+56>>2]=Yt;x(n[q[q[Ks>>2]+12>>2]](Ks,Ls+32|0,1));}break a}if(Wt+ -21>>>0<=8){Vt=u[Ms+20>>2];Rt=u[Ms+36>>2];St=u[Ms+24>>2];Nt=u[Ms+52>>2];Pt=u[Ms+56>>2];Ut=u[Ms+40>>2];Xt=u[Ms+32>>2];Zt=u[Ms+16>>2];_t=u[Ms>>2];du=u[Ms+4>>2];Ot=u[Ms+48>>2];eu=u[Ms+8>>2];Yt=u[kp+52>>2];au=u[kp+56>>2];Qt=u[kp+48>>2];q[Ls+468>>2]=0;hu=x(-Nt);ju=x(St*hu);ku=x(Ut*Pt);$t=x(x(ju-x(eu*Ot))-ku);lu=x(St*Yt);mu=x(Ut*au);u[Ls+464>>2]=$t+x(x(x(eu*Qt)+lu)+mu);nu=x(Vt*hu);ou=x(Rt*Pt);gu=x(x(nu-x(du*Ot))-ou);pu=x(Vt*Yt);qu=x(Rt*au);u[Ls+460>>2]=gu+x(x(x(du*Qt)+pu)+qu);ru=x(x(x(Zt*hu)-x(_t*Ot))-x(Xt*Pt));u[Ls+456>>2]=ru+x(x(x(_t*Qt)+x(Zt*Yt))+x(Xt*au));bu=u[Is+52>>2];cu=u[Is+56>>2];Nt=u[Is+48>>2];q[Ls+44>>2]=0;iu=$t;su=x(eu*Nt);eu=x(St*bu);$t=x(Ut*cu);u[Ls+40>>2]=iu+x(x(su+eu)+$t);iu=gu;St=x(du*Nt);du=x(Vt*bu);gu=x(Rt*cu);u[Ls+36>>2]=iu+x(x(St+du)+gu);u[Ls+32>>2]=ru+x(x(x(_t*Nt)+x(Zt*bu))+x(Xt*cu));if(q[Tt+4>>2]==21){kp=q[Js+8>>2];Ki(Ls+96|0,Ls+456|0,Ls+32|0,q[Ks+20>>2]);q[Ls+148>>2]=Tt;q[Ls+144>>2]=kp;q[Ls+140>>2]=Ks;q[Ls+96>>2]=8600;kp=q[Ms+12>>2];q[Ls+160>>2]=q[Ms+8>>2];q[Ls+164>>2]=kp;kp=q[Ms+4>>2];q[Ls+152>>2]=q[Ms>>2];q[Ls+156>>2]=kp;kp=q[Ms+28>>2];q[Ls+176>>2]=q[Ms+24>>2];q[Ls+180>>2]=kp;kp=q[Ms+20>>2];q[Ls+168>>2]=q[Ms+16>>2];q[Ls+172>>2]=kp;kp=q[Ms+44>>2];q[Ls+192>>2]=q[Ms+40>>2];q[Ls+196>>2]=kp;kp=q[Ms+36>>2];q[Ls+184>>2]=q[Ms+32>>2];q[Ls+188>>2]=kp;kp=q[Ms+60>>2];q[Ls+208>>2]=q[Ms+56>>2];q[Ls+212>>2]=kp;kp=q[Ms+52>>2];q[Ls+200>>2]=q[Ms+48>>2];q[Ls+204>>2]=kp;q[Ls+136>>2]=q[Ks+4>>2];Xy(Tt,Ls+96|0,Ls+456|0,Ls+32|0);break a}Vt=u[Ms+32>>2];Rt=u[Ms+16>>2];St=u[Ms>>2];Ut=u[Ms+4>>2];Xt=u[Ms+8>>2];q[Ls+92>>2]=0;Zt=x(x(ju-x(Xt*Ot))-ku);u[Ls+88>>2]=x(x(x(Qt*Xt)+lu)+mu)+Zt;_t=x(x(nu-x(Ut*Ot))-ou);u[Ls+84>>2]=x(x(x(Qt*Ut)+pu)+qu)+_t;Ot=x(x(x(Rt*hu)-x(St*Ot))-x(Vt*Pt));u[Ls+80>>2]=x(x(x(Qt*St)+x(Yt*Rt))+x(au*Vt))+Ot;q[Ls+76>>2]=0;u[Ls+72>>2]=x(x(x(Nt*Xt)+eu)+$t)+Zt;u[Ls+68>>2]=x(x(x(Nt*Ut)+du)+gu)+_t;u[Ls+64>>2]=x(x(x(Nt*St)+x(bu*Rt))+x(cu*Vt))+Ot;kp=q[Js+8>>2];Ki(Ls+96|0,Ls+80|0,Ls- -64|0,q[Ks+20>>2]);q[Ls+148>>2]=Tt;q[Ls+144>>2]=kp;q[Ls+140>>2]=Ks;q[Ls+96>>2]=8600;kp=q[Ms+12>>2];q[Ls+160>>2]=q[Ms+8>>2];q[Ls+164>>2]=kp;kp=q[Ms+4>>2];q[Ls+152>>2]=q[Ms>>2];q[Ls+156>>2]=kp;kp=q[Ms+28>>2];q[Ls+176>>2]=q[Ms+24>>2];q[Ls+180>>2]=kp;kp=q[Ms+20>>2];q[Ls+168>>2]=q[Ms+16>>2];q[Ls+172>>2]=kp;kp=q[Ms+44>>2];q[Ls+192>>2]=q[Ms+40>>2];q[Ls+196>>2]=kp;kp=q[Ms+36>>2];q[Ls+184>>2]=q[Ms+32>>2];q[Ls+188>>2]=kp;kp=q[Ms+60>>2];q[Ls+208>>2]=q[Ms+56>>2];q[Ls+212>>2]=kp;kp=q[Ms+52>>2];q[Ls+200>>2]=q[Ms+48>>2];q[Ls+204>>2]=kp;q[Ls+136>>2]=q[Ks+4>>2];kp=q[Ls+92>>2];q[Ls+24>>2]=q[Ls+88>>2];q[Ls+28>>2]=kp;kp=q[Ls+84>>2];q[Ls+16>>2]=q[Ls+80>>2];q[Ls+20>>2]=kp;Ot=u[Ls+64>>2];if(!!(Ot<u[Ls+16>>2])){u[Ls+16>>2]=Ot;}Qt=u[Ls+68>>2];if(!!(Qt<u[Ls+20>>2])){u[Ls+20>>2]=Qt;}Nt=u[Ls+72>>2];if(!!(Nt<u[Ls+24>>2])){u[Ls+24>>2]=Nt;}Pt=u[Ls+76>>2];if(!!(Pt<u[Ls+28>>2])){u[Ls+28>>2]=Pt;}kp=q[Ls+92>>2];q[Ls+8>>2]=q[Ls+88>>2];q[Ls+12>>2]=kp;kp=q[Ls+84>>2];q[Ls>>2]=q[Ls+80>>2];q[Ls+4>>2]=kp;if(!!(u[Ls>>2]<Ot)){u[Ls>>2]=Ot;}if(!!(u[Ls+4>>2]<Qt)){u[Ls+4>>2]=Qt;}if(!!(u[Ls+8>>2]<Nt)){u[Ls+8>>2]=Nt;}if(!!(u[Ls+12>>2]<Pt)){u[Ls+12>>2]=Pt;}n[q[q[Tt>>2]+64>>2]](Tt,Ls+96|0,Ls+16|0,Ls);break a}if((Wt|0)!=31){break a}Wt=q[Tt+68>>2];Js=q[Js+8>>2];q[Ls+120>>2]=Ks;q[Ls+116>>2]=Is;q[Ls+112>>2]=kp;q[Ls+108>>2]=Ms;q[Ls+104>>2]=Tt;q[Ls+100>>2]=Js;q[Ls+96>>2]=8784;if(Wt){Ot=u[Ms+20>>2];Qt=u[Ms+36>>2];Nt=u[Ms+24>>2];Pt=u[Ms+52>>2];St=u[kp+52>>2];Yt=u[Ms+40>>2];au=u[Ms+56>>2];Ut=u[kp+56>>2];Xt=u[Ms>>2];bu=u[Ms+16>>2];cu=u[Ms+32>>2];Zt=u[Ms+4>>2];Rt=u[Ms+8>>2];Vt=u[Ms+48>>2];_t=u[kp+48>>2];q[Ls+468>>2]=0;$t=Rt;Rt=x(_t-Vt);St=x(St-Pt);Ut=x(Ut-au);u[Ls+464>>2]=x(x($t*Rt)+x(Nt*St))+x(Yt*Ut);u[Ls+460>>2]=x(x(Rt*Zt)+x(St*Ot))+x(Ut*Qt);u[Ls+456>>2]=x(x(Rt*Xt)+x(St*bu))+x(Ut*cu);Rt=u[Is+52>>2];St=u[Is+56>>2];Ut=u[Ms>>2];Xt=u[Ms+4>>2];Zt=u[Ms+8>>2];_t=u[Is+48>>2];q[Ls+44>>2]=0;Vt=x(_t-Vt);$t=Nt;Nt=x(Rt-Pt);Pt=x(St-au);u[Ls+40>>2]=x(x(Zt*Vt)+x($t*Nt))+x(Yt*Pt);u[Ls+36>>2]=x(x(Vt*Xt)+x(Nt*Ot))+x(Pt*Qt);u[Ls+32>>2]=x(x(Vt*Ut)+x(Nt*bu))+x(Pt*cu);VA(q[Wt>>2],Ls+456|0,Ls+32|0,Ls+96|0);break a}Is=q[Tt+20>>2];if((Is|0)<1){break a}kp=0;while(1){Hi(Ls+96|0,kp);kp=kp+1|0;if((Is|0)!=(kp|0)){continue}break}}P=Ls+688|0;}function Re(kp,Is){kp=kp|0;Is=Is|0;var Js=0,Ks=0,tu=0,uu=0,vu=0,wu=0,xu=0;Ks=q[Is+188>>2];if(Ks){Js=q[kp+68>>2];Js=n[q[q[Js>>2]+36>>2]](Js)|0;n[q[q[Js>>2]+40>>2]](Js,Ks,q[kp+24>>2]);Js=q[kp+68>>2];n[q[q[Js>>2]+12>>2]](Js,Ks,q[kp+24>>2]);q[Is+188>>2]=0;}Js=q[Is+216>>2];Ks=q[kp+8>>2];a:{if(!((Js|0)<0|(Js|0)>=(Ks|0))){tu=q[kp+16>>2];uu=Js<<2;vu=tu+uu|0;wu=q[vu>>2];xu=tu;Ks=Ks+ -1|0;tu=Ks<<2;q[vu>>2]=q[xu+tu>>2];q[tu+q[kp+16>>2]>>2]=wu;q[kp+8>>2]=Ks;if((Js|0)>=(Ks|0)){break a}q[q[uu+q[kp+16>>2]>>2]+216>>2]=Js;break a}if((Ks|0)<1){break a}tu=q[kp+16>>2];Js=0;while(1){uu=tu+(Js<<2)|0;if(q[uu>>2]!=(Is|0)){Js=Js+1|0;if((Ks|0)!=(Js|0)){continue}break a}break}if((Ks|0)<=(Js|0)){break a}Ks=Ks+ -1|0;Js=Ks<<2;q[uu>>2]=q[Js+tu>>2];q[Js+q[kp+16>>2]>>2]=Is;q[kp+8>>2]=Ks;}q[Is+216>>2]=-1;}function Se(kp){kp=kp|0;var Is=0,yu=0,zu=0,Au=0,Bu=0;q[kp>>2]=8188;Is=q[kp+16>>2];yu=q[kp+8>>2];if((yu|0)>=1){while(1){Bu=q[(zu<<2)+Is>>2];Au=q[Bu+188>>2];if(Au){Is=q[kp+68>>2];Is=n[q[q[Is>>2]+36>>2]](Is)|0;n[q[q[Is>>2]+40>>2]](Is,Au,q[kp+24>>2]);Is=q[kp+68>>2];n[q[q[Is>>2]+12>>2]](Is,Au,q[kp+24>>2]);q[Bu+188>>2]=0;yu=q[kp+8>>2];Is=q[kp+16>>2];}zu=zu+1|0;if((zu|0)<(yu|0)){continue}break}}if(Is){if(r[kp+20|0]){if(Is){q[6658]=q[6658]+1;n[q[5256]](Is);}}q[kp+16>>2]=0;}q[kp+16>>2]=0;q[kp+8>>2]=0;q[kp+12>>2]=0;o[kp+20|0]=1;return kp|0}function Te(kp,Cu,Du,Eu,Fu,Gu){kp=kp|0;Cu=Cu|0;Du=Du|0;Eu=Eu|0;Fu=Fu|0;Gu=Gu|0;var Hu=0,Iu=0,Ju=x(0),Ku=x(0),Lu=0,Mu=x(0),Nu=0,Ou=x(0),Pu=x(0),Qu=x(0),Ru=0,Su=0,Tu=x(0),Uu=x(0),Vu=x(0),Wu=x(0),Xu=x(0),Yu=x(0);Hu=P-288|0;P=Hu;hc(q[kp+4>>2]);Ju=u[Cu+52>>2];Ku=u[Du+52>>2];Mu=u[Eu+52>>2];Ou=u[Fu+52>>2];Pu=u[Cu+56>>2];Qu=u[Du+56>>2];Tu=u[Eu+56>>2];Uu=u[Fu+56>>2];Vu=u[Cu+48>>2];Wu=u[Du+48>>2];Xu=u[Eu+48>>2];Yu=u[Fu+48>>2];o[Hu+264|0]=0;q[Hu+260>>2]=1566444395;q[Hu+224>>2]=7932;Su=pd(Hu+144|0,q[kp+8>>2],q[kp+12>>2],q[kp+4>>2],0);q[Hu+136>>2]=1566444395;kp=Cu;Iu=q[kp+12>>2];q[Hu+16>>2]=q[kp+8>>2];q[Hu+20>>2]=Iu;Iu=q[kp+4>>2];q[Hu+8>>2]=q[kp>>2];q[Hu+12>>2]=Iu;Iu=q[kp+28>>2];q[Hu+32>>2]=q[kp+24>>2];q[Hu+36>>2]=Iu;Iu=q[kp+20>>2];q[Hu+24>>2]=q[kp+16>>2];q[Hu+28>>2]=Iu;Iu=q[kp+44>>2];q[Hu+48>>2]=q[kp+40>>2];q[Hu+52>>2]=Iu;Iu=q[kp+36>>2];q[Hu+40>>2]=q[kp+32>>2];q[Hu+44>>2]=Iu;Nu=q[kp+60>>2];Iu=Hu- -64|0;q[Iu>>2]=q[kp+56>>2];q[Iu+4>>2]=Nu;Iu=q[kp+52>>2];q[Hu+56>>2]=q[kp+48>>2];q[Hu+60>>2]=Iu;kp=Eu;Iu=q[kp+12>>2];q[Hu+80>>2]=q[kp+8>>2];q[Hu+84>>2]=Iu;Iu=q[kp+4>>2];q[Hu+72>>2]=q[kp>>2];q[Hu+76>>2]=Iu;Iu=q[kp+20>>2];q[Hu+88>>2]=q[kp+16>>2];q[Hu+92>>2]=Iu;Iu=q[kp+28>>2];q[Hu+96>>2]=q[kp+24>>2];q[Hu+100>>2]=Iu;Iu=q[kp+44>>2];q[Hu+112>>2]=q[kp+40>>2];q[Hu+116>>2]=Iu;Iu=q[kp+36>>2];q[Hu+104>>2]=q[kp+32>>2];q[Hu+108>>2]=Iu;Iu=q[kp+52>>2];q[Hu+120>>2]=q[kp+48>>2];q[Hu+124>>2]=Iu;Iu=q[kp+60>>2];q[Hu+128>>2]=q[kp+56>>2];q[Hu+132>>2]=Iu;Ma(Su,Hu+8|0,Hu+224|0,0);kp=q[Hu+256>>2];q[Hu+280>>2]=q[Hu+252>>2];q[Hu+284>>2]=kp;kp=q[Hu+248>>2];q[Hu+272>>2]=q[Hu+244>>2];q[Hu+276>>2]=kp;Lu=0;a:{if(!r[Hu+264|0]){break a}Pu=x(x(Qu-Pu)-x(Uu-Tu));Ou=x(x(Ku-Ju)-x(Ou-Mu));Qu=x(x(Wu-Vu)-x(Yu-Xu));Nu=q[Hu+232>>2];Iu=q[Hu+236>>2];Ru=q[Hu+228>>2];Mu=u[Hu+260>>2];b:{c:{if(!(Mu>x(.0010000000474974513))){Ju=x(0);Ku=u[Hu+240>>2];break c}kp=0;Ku=x(0);while(1){Lu=0;if((kp|0)==32){break a}Ju=x(Ku-x(Mu/x(x(Pu*(f(0,Iu),k()))+x(x(Ou*(f(0,Nu),k()))+x(Qu*(f(0,Ru),k()))))));Lu=0;if(Ju<=Ku){break a}Lu=0;if(Ju<x(0)){break a}Lu=0;if(Ju>x(1)){break a}n[q[q[Gu>>2]>>2]](Gu,Ju);Ku=x(x(1)-Ju);u[Hu+56>>2]=x(Ku*u[Cu+48>>2])+x(Ju*u[Du+48>>2]);u[Hu+60>>2]=x(Ku*u[Cu+52>>2])+x(Ju*u[Du+52>>2]);u[Hu+64>>2]=x(Ku*u[Cu+56>>2])+x(Ju*u[Du+56>>2]);u[Hu+120>>2]=x(Ku*u[Eu+48>>2])+x(Ju*u[Fu+48>>2]);u[Hu+124>>2]=x(Ku*u[Eu+52>>2])+x(Ju*u[Fu+52>>2]);u[Hu+128>>2]=x(Ku*u[Eu+56>>2])+x(Ju*u[Fu+56>>2]);Ma(Su,Hu+8|0,Hu+224|0,0);Lu=0;if(!r[Hu+264|0]){break a}Mu=u[Hu+260>>2];if(!!(Mu<x(0))){u[Gu+164>>2]=Ju;kp=q[Hu+228>>2];Cu=q[Hu+232>>2];Du=q[Hu+240>>2];q[Gu+140>>2]=q[Hu+236>>2];q[Gu+144>>2]=Du;q[Gu+132>>2]=kp;q[Gu+136>>2]=Cu;kp=q[Hu+256>>2];q[Gu+156>>2]=q[Hu+252>>2];q[Gu+160>>2]=kp;kp=q[Hu+248>>2];q[Gu+148>>2]=q[Hu+244>>2];q[Gu+152>>2]=kp;break b}kp=kp+1|0;Iu=q[Hu+256>>2];q[Hu+280>>2]=q[Hu+252>>2];q[Hu+284>>2]=Iu;Iu=q[Hu+248>>2];q[Hu+272>>2]=q[Hu+244>>2];q[Hu+276>>2]=Iu;Ru=q[Hu+228>>2];Nu=q[Hu+232>>2];Iu=q[Hu+236>>2];Ku=Ju;if(Mu>x(.0010000000474974513)){continue}break}Ku=u[Hu+240>>2];}Lu=0;if(x(x(Pu*(f(0,Iu),k()))+x(x(Ou*(f(0,Nu),k()))+x(Qu*(f(0,Ru),k()))))>=x(-u[Gu+172>>2])){break a}q[Gu+132>>2]=Ru;u[Gu+164>>2]=Ju;u[Gu+144>>2]=Ku;q[Gu+140>>2]=Iu;q[Gu+136>>2]=Nu;kp=q[Hu+276>>2];q[Gu+148>>2]=q[Hu+272>>2];q[Gu+152>>2]=kp;kp=q[Hu+284>>2];q[Gu+156>>2]=q[Hu+280>>2];q[Gu+160>>2]=kp;}Lu=1;}Iu=Lu;P=Hu+288|0;return Iu|0}function Ue(kp,Cu,Du,Eu){kp=kp|0;Cu=Cu|0;Du=Du|0;Eu=Eu|0;n[q[q[kp>>2]+80>>2]](kp,Cu,Du,Eu);}function Ve(kp){kp=kp|0;var Cu=0;q[kp+8>>2]=7012;q[kp>>2]=6984;Cu=q[kp+56>>2];n[q[q[Cu>>2]+20>>2]](Cu,q[kp+72>>2]);Cu=q[kp+56>>2];n[q[q[Cu>>2]+16>>2]](Cu,q[kp+72>>2]);return kp|0}function We(kp,Du,Eu,Fu,Gu){var Zu=0;q[kp>>2]=17096;q[kp+4>>2]=q[Du>>2];q[kp>>2]=5592;q[kp>>2]=6984;Du=q[Du>>2];q[kp+60>>2]=0;q[kp+56>>2]=Du;q[kp+8>>2]=7012;Zu=Gu?Eu:Fu;q[kp+48>>2]=Zu;Eu=Gu?Fu:Eu;q[kp+44>>2]=Eu;Du=n[q[q[Du>>2]+12>>2]](Du,q[Eu+8>>2],q[Zu+8>>2])|0;q[kp+72>>2]=Du;Eu=q[kp+56>>2];n[q[q[Eu>>2]+20>>2]](Eu,Du);o[kp+76|0]=Gu;}



            function bj(a,b,c,d){var e=0,f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=0,p=0,s=0,t=0,u=0;t=P-16|0;P=t;cj(a,b,c);j=q[a+8>>2];n[q[5253]](6764);a:{if(!r[a+64|0]){a=n[q[q[b>>2]+44>>2]](b)|0;b=n[q[q[b>>2]+36>>2]](b)|0;n[q[q[d>>2]+8>>2]](d,q[c+16>>2],q[c+8>>2],a,b,-1);break a}p=q[a+28>>2];if((p|0)>=2){Ye(a+24|0,t,0,p+ -1|0);}if((j|0)<1){break a}k=1;while(1){b=q[a+16>>2];s=q[b+(g<<3)>>2];u=1;b:{if((g|0)>=(j|0)){break b}while(1){h=q[q[c+16>>2]+(q[((g<<3)+b|0)+4>>2]<<2)>>2];f=q[a+48>>2];c:{if((f|0)!=q[a+52>>2]){break c}e=f?f<<1:1;if((f|0)>=(e|0)){break c}b=0;i=0;if(e){q[6657]=q[6657]+1;i=n[q[5255]](e<<2,16)|0;f=q[a+48>>2];}if((f|0)>=1){while(1){l=b<<2;q[l+i>>2]=q[q[a+56>>2]+l>>2];b=b+1|0;if((f|0)!=(b|0)){continue}break}}b=q[a+56>>2];if(b){if(r[a+60|0]){if(b){q[6658]=q[6658]+1;n[q[5256]](b);}f=q[a+48>>2];}q[a+56>>2]=0;}q[a+56>>2]=i;o[a+60|0]=1;q[a+52>>2]=e;}q[q[a+56>>2]+(f<<2)>>2]=h;q[a+48>>2]=f+1;b=q[h+220>>2];u=((b|0)==5|(b|0)==2)&u;g=g+1|0;if((j|0)==(g|0)){g=j;break b}b=q[a+16>>2];if((s|0)==q[b+(g<<3)>>2]){continue}break}}i=0;e=0;d:{if((m|0)>=(p|0)){break d}l=q[a+36>>2];h=l+(m<<2)|0;b=q[h>>2];f=q[q[b+836>>2]+208>>2];if((f|0)<=-1){f=q[q[b+840>>2]+208>>2];}b=m;e=0;if((f|0)!=(s|0)){break d}while(1){b=b+1|0;if((b|0)<(p|0)){k=q[l+(b<<2)>>2];e=q[q[k+836>>2]+208>>2];if((e|0)<=-1){e=q[q[k+840>>2]+208>>2];}if((e|0)==(s|0)){continue}}break}i=b-m|0;k=b;e=h;}if(!u){n[q[q[d>>2]+8>>2]](d,q[a+56>>2],q[a+48>>2],e,i,s);}b=q[a+48>>2];if((b|0)<=-1){if(q[a+52>>2]<=-1){e=q[a+56>>2];if(e){if(r[a+60|0]){if(e){q[6658]=q[6658]+1;n[q[5256]](e);}}q[a+56>>2]=0;}o[a+60|0]=1;q[a+52>>2]=0;q[a+56>>2]=0;}while(1){q[q[a+56>>2]+(b<<2)>>2]=0;e=b+1|0;h=e>>>0>=b>>>0;b=e;if(h){continue}break}}m=i?k:m;q[a+48>>2]=0;if((g|0)<(j|0)){continue}break}}n[q[5254]]();P=t+16|0;}function cj(a,b,c){var d=0,v=0,w=0,x=0,y=0,z=0,A=0,B=0,C=0,D=0,E=0,F=0;F=P-16|0;P=F;n[q[5253]](6736);d=q[a+28>>2];if((d|0)<=-1){if(q[a+32>>2]<=-1){v=q[a+36>>2];if(v){if(r[a+40|0]){if(v){q[6658]=q[6658]+1;n[q[5256]](v);}}q[a+36>>2]=0;}q[a+32>>2]=0;q[a+36>>2]=0;o[a+40|0]=1;}while(1){q[q[a+36>>2]+(d<<2)>>2]=0;v=d+1|0;w=v>>>0>=d>>>0;d=v;if(w){continue}break}}q[a+28>>2]=0;fA(a+4|0);D=q[a+8>>2];if((D|0)>=1){w=0;while(1){z=q[a+16>>2];v=w;C=q[z+(v<<3)>>2];while(1){A=w;w=w+1|0;if((C|0)==q[(w<<3)+z>>2]?(w|0)<(D|0):0){continue}break}a:{y=(v|0)>(A|0);if(y){break a}B=q[c+16>>2];E=1;d=v;while(1){x=q[(q[((d<<3)+z|0)+4>>2]<<2)+B>>2];if((C|0)==q[x+208>>2]){x=q[x+220>>2];E=(x|0)!=4&((x|0)!=1&E);}x=(d|0)<(A|0);d=d+1|0;if(x){continue}break}if(!E){if(y){break a}while(1){d=q[q[c+16>>2]+(q[((v<<3)+z|0)+4>>2]<<2)>>2];if(!((C|0)!=q[d+208>>2]|q[d+220>>2]!=2)){if((q[d+220>>2]&-2)!=4){q[d+220>>2]=3;}q[d+224>>2]=0;}if((v|0)>=(A|0)){break a}v=v+1|0;z=q[a+16>>2];continue}}if(y){break a}while(1){d=q[q[c+16>>2]+(q[((v<<3)+z|0)+4>>2]<<2)>>2];if((C|0)==q[d+208>>2]){if((q[d+220>>2]&-2)!=4){q[d+220>>2]=2;}}if((v|0)>=(A|0)){break a}v=v+1|0;z=q[a+16>>2];continue}}if((w|0)<(D|0)){continue}break}}A=n[q[q[b>>2]+36>>2]](b)|0;if((A|0)>=1){w=0;while(1){x=n[q[q[b>>2]+40>>2]](b,w)|0;d=q[x+840>>2];v=q[x+836>>2];b:{if(!d|q[d+220>>2]==2?!(q[v+220>>2]!=2?v:0):0){break b}c=q[v+204>>2];if(!(!(c&2)|c&4|q[v+220>>2]==2)){nc(d,0);}c=q[d+204>>2];if(!(!(c&2)|c&4|q[d+220>>2]==2)){nc(v,0);}if(!r[a+64|0]){break b}if(!n[q[q[b>>2]+28>>2]](b,v,d)){break b}c=q[a+28>>2];c:{if((c|0)!=q[a+32>>2]){break c}y=c?c<<1:1;if((c|0)>=(y|0)){break c}d=0;B=0;if(y){q[6657]=q[6657]+1;B=n[q[5255]](y<<2,16)|0;c=q[a+28>>2];}if((c|0)>=1){while(1){v=d<<2;q[v+B>>2]=q[v+q[a+36>>2]>>2];d=d+1|0;if((d|0)!=(c|0)){continue}break}}v=q[a+36>>2];if(v){if(r[a+40|0]){if(v){q[6658]=q[6658]+1;n[q[5256]](v);}c=q[a+28>>2];}q[a+36>>2]=0;}q[a+36>>2]=B;o[a+40|0]=1;q[a+32>>2]=y;}q[q[a+36>>2]+(c<<2)>>2]=x;q[a+28>>2]=c+1;}w=w+1|0;if((A|0)!=(w|0)){continue}break}}n[q[5254]]();P=F+16|0;}function dj(a,b){a=a|0;b=b|0;var c=0,n=0,o=0,G=0,H=0,I=0,J=0,K=0,L=0;J=q[b+8>>2];if((J|0)>=1){L=q[b+16>>2];b=0;while(1){n=q[(o<<2)+L>>2];a:{if(!(r[n+204|0]&3)){c=b;G=q[a+16>>2];K=b<<3;H=G+K|0;I=q[H>>2];if((I|0)!=(b|0)){while(1){c=(I<<3)+G|0;q[H>>2]=q[c>>2];c=q[c>>2];H=(c<<3)+G|0;I=q[H>>2];if((c|0)!=(I|0)){continue}break}}q[n+208>>2]=c;q[(G+K|0)+4>>2]=o;q[n+212>>2]=-1;b=b+1|0;break a}q[n+208>>2]=-1;q[n+212>>2]=-2;}o=o+1|0;if((o|0)<(J|0)){continue}break}}}function ej(a,b,M){a=a|0;b=b|0;M=M|0;var N=0,O=0,P=0,Q=0;P=q[b+8>>2];a:{if((P|0)<1){M=0;break a}Q=q[b+16>>2];M=0;while(1){N=q[(O<<2)+Q>>2];if(!(r[N+204|0]&3)){q[N+208>>2]=M;M=M+1|0;}q[N+268>>2]=1065353216;q[N+212>>2]=-1;O=O+1|0;if((O|0)<(P|0)){continue}break}}gA(a+4|0,M);fj(a,b);}function fj(a,b){var M=0,R=0,S=0,T=0,U=0,V=0,W=0;b=q[b+68>>2];b=n[q[q[b>>2]+36>>2]](b)|0;U=n[q[q[b>>2]+36>>2]](b)|0;a:{if(!U){break a}W=n[q[q[b>>2]+20>>2]](b)|0;if((U|0)<1){break a}while(1){b=(V<<4)+W|0;M=q[q[b>>2]>>2];b:{if(!M){break b}b=q[q[b+4>>2]>>2];if(!b|q[M+204>>2]&7|r[b+204|0]&7){break b}b=q[b+208>>2];S=q[a+16>>2];T=q[M+208>>2];R=S+(T<<3)|0;M=q[R>>2];if((M|0)!=(T|0)){while(1){M=(M<<3)+S|0;q[R>>2]=q[M>>2];T=q[M>>2];R=(T<<3)+S|0;M=q[R>>2];if((M|0)!=(T|0)){continue}break}}R=(b<<3)+S|0;M=q[R>>2];if((M|0)!=(b|0)){while(1){b=(M<<3)+S|0;q[R>>2]=q[b>>2];b=q[b>>2];R=(b<<3)+S|0;M=q[R>>2];if((b|0)!=(M|0)){continue}break}}if((b|0)==(T|0)){break b}M=(T<<3)+S|0;q[M>>2]=b;b=(b<<3)+S|0;q[b+4>>2]=q[b+4>>2]+q[M+4>>2];}V=V+1|0;if((V|0)!=(U|0)){continue}break}}}function gj(a){a=a|0;aa(Ze(a));}function hj(a){q[a>>2]=6720;q[a+16>>2]=0;o[a+20|0]=1;q[a+8>>2]=0;q[a+12>>2]=0;q[a+36>>2]=0;o[a+40|0]=1;o[a+60|0]=1;q[a+28>>2]=0;q[a+32>>2]=0;q[a+56>>2]=0;o[a+64|0]=1;q[a+48>>2]=0;q[a+52>>2]=0;}function ij(a,b,X,Y){a=a|0;b=b|0;X=X|0;Y=Y|0;var Z=0;Z=q[b>>2];Z=n[q[q[Z>>2]+56>>2]](Z,28)|0;aj(Z,b,X,Y,r[a+4|0],q[a+8>>2],q[a+12>>2]);return Z|0}function jj(a,b,r,X){a=a|0;b=b|0;r=r|0;X=X|0;a=q[b>>2];a=n[q[q[a>>2]+56>>2]](a,16)|0;lB(a,b,r,X);return a|0}function kj(a,b,X,Y){a=a|0;b=b|0;X=X|0;Y=Y|0;var _=0;_=q[b>>2];_=n[q[q[_>>2]+56>>2]](_,20)|0;vA(_,q[b+4>>2],b,X,Y,r[a+4|0]);return _|0}function lj(a,b,r,X){a=a|0;b=b|0;r=r|0;X=X|0;a=q[b>>2];a=n[q[q[a>>2]+56>>2]](a,16)|0;zj(a,b,r,X);return a|0}function mj(a,b,r,X){a=a|0;b=b|0;a=q[b>>2];a=n[q[q[a>>2]+56>>2]](a,8)|0;q[a>>2]=17096;q[a+4>>2]=q[b>>2];q[a>>2]=5500;return a|0}function nj(a,b,r,X){a=a|0;b=b|0;r=r|0;X=X|0;a=q[b>>2];a=n[q[q[a>>2]+56>>2]](a,84)|0;Me(a,b,r,X,1);return a|0}function oj(a,b,r,X){a=a|0;b=b|0;r=r|0;X=X|0;a=q[b>>2];a=n[q[q[a>>2]+56>>2]](a,116)|0;Vz(a,b,r,X);return a|0}function pj(a,b,r,X){a=a|0;b=b|0;r=r|0;X=X|0;a=q[b>>2];a=n[q[q[a>>2]+56>>2]](a,84)|0;Me(a,b,r,X,0);return a|0}function qj(a,b,r,X){a=a|0;b=b|0;r=r|0;X=X|0;a=q[b>>2];a=n[q[q[a>>2]+56>>2]](a,80)|0;We(a,b,r,X,1);return a|0}function rj(a,b,r,X){a=a|0;b=b|0;r=r|0;X=X|0;a=q[b>>2];a=n[q[q[a>>2]+56>>2]](a,80)|0;We(a,b,r,X,0);return a|0}function sj(a,b,r){a=a|0;b=b|0;r=r|0;var X=0;X=(b|0)!=8;if(!(X|(r|0)!=8)){return q[a+56>>2]}if(!((r|0)!=1|X)){return q[a+72>>2]}if(!((b|0)!=1|(r|0)!=8)){return q[a+76>>2]}if(!(b|r)){return q[a+68>>2]}if(!((r|0)!=28|(b|0)>19)){return q[a+84>>2]}if(!((b|0)!=28|(r|0)>19)){return q[a+80>>2]}a:{if((b|0)<=19){if((r|0)<=19){return q[a+28>>2]}if(r+ -21>>>0>8){break a}return q[a+32>>2]}if(!((r|0)>19|b+ -21>>>0>8)){return q[a+36>>2]}if((b|0)!=31){break a}if((r|0)==31){return q[a+44>>2]}return q[a+40>>2]}if((r|0)==31){return q[a+48>>2]}return q[a+52>>2]}function tj(a,b,r){a=a|0;b=b|0;r=r|0;var Y=0;Y=(b|0)!=8;if(!(Y|(r|0)!=8)){return q[a+56>>2]}if(!((r|0)!=1|Y)){return q[a+72>>2]}if(!((b|0)!=1|(r|0)!=8)){return q[a+76>>2]}if(!((r|0)!=28|(b|0)>19)){return q[a+84>>2]}if(!((b|0)!=28|(r|0)>19)){return q[a+80>>2]}a:{if((b|0)<=19){if((r|0)<=19){return q[a+28>>2]}if(r+ -21>>>0>8){break a}return q[a+32>>2]}if(!((r|0)>19|b+ -21>>>0>8)){return q[a+36>>2]}if((b|0)!=31){break a}if((r|0)==31){return q[a+44>>2]}return q[a+40>>2]}if((r|0)==31){return q[a+48>>2]}return q[a+52>>2]}function uj(a){var b=0,r=0,$=0;b=P-16|0;P=b;q[b+12>>2]=a;a=0;r=P-16|0;$=q[b+12>>2];q[r+12>>2]=$;if(q[q[r+12>>2]+220>>2]!=2){a=P-16|0;q[a+12>>2]=$;a=q[q[a+12>>2]+220>>2]!=5;}P=b+16|0;return a&1}function vj(a){a=a|0;aa(_e(a));}function wj(a,aa,ba,ca,da){a=a|0;aa=aa|0;ba=ba|0;ca=ca|0;da=da|0;var ea=0,fa=x(0),ga=x(0),ha=x(0),ia=x(0),ja=0,ka=x(0),la=x(0),ma=x(0),na=x(0),oa=0;ca=P-32|0;P=ca;a=q[a+12>>2];a:{if(!a){break a}q[da+4>>2]=a;ea=q[aa+12>>2];ja=q[ba+12>>2];la=x(u[ea+48>>2]-u[ja+48>>2]);ha=x(u[ea+52>>2]-u[ja+52>>2]);ia=x(u[ea+56>>2]-u[ja+56>>2]);fa=x(x(x(la*la)+x(ha*ha))+x(ia*ia));ea=q[ba+4>>2];ka=u[ea+16>>2];ga=u[ea+32>>2];aa=q[aa+4>>2];ma=u[aa+16>>2];na=u[aa+32>>2];ea=q[a+844>>2];if((ea|0)>=1){aa=0;while(1){ea=a+w(aa,208)|0;ja=q[ea+120>>2];b:{if(!ja){break b}oa=q[5779];if(!oa){break b}n[oa](ja)|0;q[ea+120>>2]=0;}aa=aa+1|0;ea=q[a+844>>2];if((aa|0)<(ea|0)){continue}break}}fa=x(E(fa));ka=x(ga*ka);ga=x(na*ma);c:{if(!ea){break c}aa=q[5782];if(!aa){break c}q[ca+16>>2]=a;n[aa](ca+16|0);}q[a+844>>2]=0;ga=x(ga+ka);if(fa>x(ga+u[da+32>>2])){break a}q[ca+24>>2]=0;q[ca+28>>2]=0;q[ca+16>>2]=1065353216;q[ca+20>>2]=0;ga=x(fa-ga);d:{if(!(fa>x(1.1920928955078125e-7))){fa=x(1);ia=x(0);ha=x(0);break d}q[ca+28>>2]=0;fa=x(x(1)/fa);ia=x(ia*fa);u[ca+24>>2]=ia;ha=x(ha*fa);u[ca+20>>2]=ha;fa=x(la*fa);u[ca+16>>2]=fa;}a=q[ba+12>>2];la=u[a+52>>2];ma=u[a+56>>2];na=u[a+48>>2];q[ca+12>>2]=0;u[ca>>2]=na+x(ka*fa);u[ca+8>>2]=ma+x(ka*ia);u[ca+4>>2]=la+x(ka*ha);n[q[q[da>>2]+16>>2]](da,ca+16|0,ca,ga);}P=ca+32|0;}function xj(a){a=a|0;var ba=0,ca=0;q[a>>2]=5668;a:{if(!r[a+8|0]){break a}ba=q[a+12>>2];if(!ba){break a}ca=q[a+4>>2];n[q[q[ca>>2]+16>>2]](ca,ba);}aa(a);}function yj(a){a=a|0;var aa=0,da=0;q[a>>2]=5668;a:{if(!r[a+8|0]){break a}aa=q[a+12>>2];if(!aa){break a}da=q[a+4>>2];n[q[q[da>>2]+16>>2]](da,aa);}return a|0}function zj(a,pa,qa,ra){q[a>>2]=17096;q[a+4>>2]=q[pa>>2];q[a>>2]=5592;q[a+12>>2]=0;o[a+8|0]=0;q[a>>2]=5668;pa=q[a+4>>2];pa=n[q[q[pa>>2]+12>>2]](pa,q[qa+8>>2],q[ra+8>>2])|0;o[a+8|0]=1;q[a+12>>2]=pa;}function Aj(a,q,pa,qa,ra){}function Bj(a,pa,qa,ra){a=a|0;pa=pa|0;qa=qa|0;ra=x(ra);var sa=0;sa=q[pa+4>>2];q[a+4>>2]=q[pa>>2];q[a+8>>2]=sa;sa=q[pa+12>>2];q[a+12>>2]=q[pa+8>>2];q[a+16>>2]=sa;pa=q[qa+4>>2];q[a+20>>2]=q[qa>>2];q[a+24>>2]=pa;pa=q[qa+12>>2];q[a+28>>2]=q[qa+8>>2];q[a+32>>2]=pa;o[a+40|0]=1;u[a+36>>2]=ra;}function Cj(a,pa,qa,ra,ta,ua,va,wa,xa,ya){a=a|0;pa=pa|0;qa=qa|0;ra=ra|0;ta=ta|0;ua=ua|0;va=va|0;wa=wa|0;xa=xa|0;ya=ya|0;var za=x(0),Aa=x(0),Ba=0,Ca=x(0),Da=0,Ea=x(0),Fa=x(0),Ga=x(0),Ha=x(0),Ia=x(0),Ja=0,Ka=x(0),La=x(0),Na=x(0),Oa=0,Pa=x(0),Qa=x(0),Ra=0,Sa=0,Ta=0,Ua=x(0),Va=x(0),Wa=x(0),Xa=x(0);a=P-4240|0;P=a;Ta=q[qa+4>>2]+ -17>>>0<=1?q[ra+4>>2]+ -17>>>0<2:Ta;while(1){fc();Ga=u[ta+32>>2];Ha=u[ta+16>>2];Ia=u[ta>>2];Ea=u[ta+36>>2];Ka=u[ta+20>>2];La=u[ta+4>>2];Aa=u[ta+40>>2];za=u[ta+24>>2];Na=u[ta+8>>2];Ja=Oa<<4;Ba=Ja+(a+1264|0)|0;q[Ba+12>>2]=0;Ca=u[Ja+23156>>2];Fa=x(-Ca);Qa=x(za*Fa);za=u[Ja+23152>>2];Pa=Aa;Aa=u[Ja+23160>>2];u[Ba+8>>2]=x(Qa-x(Na*za))-x(Pa*Aa);u[Ba+4>>2]=x(x(Ka*Fa)-x(za*La))-x(Aa*Ea);u[Ba>>2]=x(x(Ha*Fa)-x(za*Ia))-x(Aa*Ga);Fa=u[ua+40>>2];Ga=u[ua+8>>2];Ha=u[ua+24>>2];Ia=u[ua+36>>2];Ea=u[ua+4>>2];Ka=u[ua+20>>2];La=u[ua+32>>2];Na=u[ua>>2];Pa=u[ua+16>>2];Ja=Ja+(a+272|0)|0;q[Ja+12>>2]=0;u[Ja>>2]=x(x(za*Na)+x(Ca*Pa))+x(Aa*La);u[Ja+4>>2]=x(x(za*Ea)+x(Ca*Ka))+x(Aa*Ia);u[Ja+8>>2]=x(x(za*Ga)+x(Ca*Ha))+x(Aa*Fa);Oa=Oa+1|0;if((Oa|0)!=42){continue}break}Ja=42;Sa=n[q[q[qa>>2]+84>>2]](qa)|0;if((Sa|0)>=1){Oa=0;while(1){n[q[q[qa>>2]+88>>2]](qa,Oa,a+3248|0);Fa=u[ta+8>>2];Ga=u[ta>>2];Ha=u[ta+4>>2];Ia=u[ta+24>>2];Ea=u[ta+16>>2];Ka=u[ta+20>>2];Ca=u[ta+40>>2];za=u[ta+32>>2];Aa=u[ta+36>>2];q[a+3260>>2]=0;La=za;za=u[a+3248>>2];Na=Aa;Aa=u[a+3252>>2];Pa=Ca;Ca=u[a+3256>>2];u[a+3256>>2]=x(x(La*za)+x(Na*Aa))+x(Pa*Ca);u[a+3252>>2]=x(x(za*Ea)+x(Aa*Ka))+x(Ca*Ia);u[a+3248>>2]=x(x(Ga*za)+x(Ha*Aa))+x(Fa*Ca);fc();Ra=q[a+3260>>2];Ba=Ja<<4;Da=Ba+23160|0;q[Da>>2]=q[a+3256>>2];q[Da+4>>2]=Ra;Ra=q[a+3252>>2];Da=Ba+23152|0;q[Da>>2]=q[a+3248>>2];q[Da+4>>2]=Ra;Ga=u[ta+40>>2];Ha=u[ta+24>>2];Ia=u[ta+8>>2];Ea=u[ta+36>>2];Ka=u[ta+20>>2];La=u[ta+4>>2];Aa=u[ta+32>>2];za=u[ta+16>>2];Na=u[ta>>2];Da=Ba+(a+1264|0)|0;q[Da+12>>2]=0;Ca=u[a+3252>>2];Fa=x(-Ca);Qa=x(za*Fa);za=u[a+3248>>2];Pa=Aa;Aa=u[a+3256>>2];u[Da>>2]=x(Qa-x(Na*za))-x(Pa*Aa);u[Da+4>>2]=x(x(Ka*Fa)-x(za*La))-x(Aa*Ea);u[Da+8>>2]=x(x(Ha*Fa)-x(za*Ia))-x(Aa*Ga);Fa=u[ua+32>>2];Ga=u[ua>>2];Ha=u[ua+16>>2];Ia=u[ua+36>>2];Ea=u[ua+4>>2];Ka=u[ua+20>>2];La=u[ua+40>>2];Na=u[ua+8>>2];Pa=u[ua+24>>2];Ba=Ba+(a+272|0)|0;q[Ba+12>>2]=0;u[Ba+8>>2]=x(x(za*Na)+x(Ca*Pa))+x(Aa*La);u[Ba+4>>2]=x(x(za*Ea)+x(Ca*Ka))+x(Aa*Ia);u[Ba>>2]=x(x(za*Ga)+x(Ca*Ha))+x(Aa*Fa);Ja=Ja+1|0;Oa=Oa+1|0;if((Sa|0)!=(Oa|0)){continue}break}}Sa=n[q[q[ra>>2]+84>>2]](ra)|0;if((Sa|0)>=1){Oa=0;while(1){n[q[q[ra>>2]+88>>2]](ra,Oa,a+3248|0);Fa=u[ua+8>>2];Ga=u[ua>>2];Ha=u[ua+4>>2];Ia=u[ua+24>>2];Ea=u[ua+16>>2];Ka=u[ua+20>>2];Ca=u[ua+40>>2];za=u[ua+32>>2];Aa=u[ua+36>>2];q[a+3260>>2]=0;La=za;za=u[a+3248>>2];Na=Aa;Aa=u[a+3252>>2];Pa=Ca;Ca=u[a+3256>>2];u[a+3256>>2]=x(x(La*za)+x(Na*Aa))+x(Pa*Ca);u[a+3252>>2]=x(x(za*Ea)+x(Aa*Ka))+x(Ca*Ia);u[a+3248>>2]=x(x(Ga*za)+x(Ha*Aa))+x(Fa*Ca);fc();Ra=q[a+3260>>2];Ba=Ja<<4;Da=Ba+23160|0;q[Da>>2]=q[a+3256>>2];q[Da+4>>2]=Ra;Ra=q[a+3252>>2];Da=Ba+23152|0;q[Da>>2]=q[a+3248>>2];q[Da+4>>2]=Ra;Ga=u[ta+40>>2];Ha=u[ta+24>>2];Ia=u[ta+8>>2];Ea=u[ta+36>>2];Ka=u[ta+20>>2];La=u[ta+4>>2];Aa=u[ta+32>>2];za=u[ta+16>>2];Na=u[ta>>2];Da=Ba+(a+1264|0)|0;q[Da+12>>2]=0;Ca=u[a+3252>>2];Fa=x(-Ca);Qa=x(za*Fa);za=u[a+3248>>2];Pa=Aa;Aa=u[a+3256>>2];u[Da>>2]=x(Qa-x(Na*za))-x(Pa*Aa);u[Da+4>>2]=x(x(Ka*Fa)-x(za*La))-x(Aa*Ea);u[Da+8>>2]=x(x(Ha*Fa)-x(za*Ia))-x(Aa*Ga);Fa=u[ua+32>>2];Ga=u[ua>>2];Ha=u[ua+16>>2];Ia=u[ua+36>>2];Ea=u[ua+4>>2];Ka=u[ua+20>>2];La=u[ua+40>>2];Na=u[ua+8>>2];Pa=u[ua+24>>2];Ba=Ba+(a+272|0)|0;q[Ba+12>>2]=0;u[Ba+8>>2]=x(x(za*Na)+x(Ca*Pa))+x(Aa*La);u[Ba+4>>2]=x(x(za*Ea)+x(Ca*Ka))+x(Aa*Ia);u[Ba>>2]=x(x(za*Ga)+x(Ca*Ha))+x(Aa*Fa);Ja=Ja+1|0;Oa=Oa+1|0;if((Sa|0)!=(Oa|0)){continue}break}}n[q[q[qa>>2]+76>>2]](qa,a+1264|0,a+3248|0,Ja);n[q[q[ra>>2]+76>>2]](ra,a+272|0,a+2256|0,Ja);a:{if((Ja|0)<1){za=x(0xde0b6b000000000);Aa=x(0);Ka=x(0);Ca=x(0);La=x(0);Fa=x(0);Na=x(0);Pa=x(0);break a}Oa=0;za=x(0xde0b6b000000000);Pa=x(0);Na=x(0);Fa=x(0);La=x(0);Ca=x(0);Ka=x(0);Aa=x(0);while(1){fc();Ba=Oa<<4;Ga=u[Ba+23152>>2];Ha=u[Ba+23156>>2];Ia=Ta?x(0):u[Ba+23160>>2];b:{if(!(+x(x(x(Ga*Ga)+x(Ha*Ha))+x(Ia*Ia))>.01)){break b}Da=Ba+(a+2256|0)|0;Ea=u[Da>>2];Qa=u[Da+4>>2];Ua=u[Da+8>>2];Da=Ba+(a+3248|0)|0;Va=u[Da>>2];Wa=u[Da+4>>2];Xa=u[Da+8>>2];Ea=x(x(x(Ga*x(x(x(x(x(Ea*u[ua>>2])+x(Qa*u[ua+4>>2]))+x(Ua*u[ua+8>>2]))+u[ua+48>>2])-x(x(x(x(Va*u[ta>>2])+x(Wa*u[ta+4>>2]))+x(Xa*u[ta+8>>2]))+u[ta+48>>2])))+x(Ha*x(x(x(x(x(Ea*u[ua+16>>2])+x(Qa*u[ua+20>>2]))+x(Ua*u[ua+24>>2]))+u[ua+52>>2])-x(x(x(x(Va*u[ta+16>>2])+x(Wa*u[ta+20>>2]))+x(Xa*u[ta+24>>2]))+u[ta+52>>2]))))+x(Ia*(Ta?x(0):x(x(x(x(x(Ea*u[ua+32>>2])+x(Qa*u[ua+36>>2]))+x(Ua*u[ua+40>>2]))+u[ua+56>>2])-x(x(x(x(Va*u[ta+32>>2])+x(Wa*u[ta+36>>2]))+x(Xa*u[ta+40>>2]))+u[ta+56>>2])))));if(!(Ea<za)){break b}Pa=u[Ba+23164>>2];Aa=Ga;Ka=Aa;Ca=Ha;La=Ca;Fa=Ia;Na=Fa;za=Ea;}Oa=Oa+1|0;if((Oa|0)!=(Ja|0)){continue}break}}Yc(qa);Yc(ra);Ja=0;if(!(za<x(0))){Ga=Yc(qa);Ha=Yc(ra);pa=pd(a+192|0,qa,ra,pa,0);Ia=u[ta+52>>2];Ea=u[ta+56>>2];Qa=u[ta+48>>2];ra=q[ta+12>>2];qa=a- -64|0;q[qa>>2]=q[ta+8>>2];q[qa+4>>2]=ra;qa=q[ta+4>>2];q[a+56>>2]=q[ta>>2];q[a+60>>2]=qa;qa=q[ta+28>>2];q[a+80>>2]=q[ta+24>>2];q[a+84>>2]=qa;qa=q[ta+20>>2];q[a+72>>2]=q[ta+16>>2];q[a+76>>2]=qa;qa=q[ta+40>>2];ra=q[ta+44>>2];Oa=q[ta+32>>2];ta=q[ta+36>>2];q[a+116>>2]=0;za=x(za+x(x(Ga+Ha)+x(.5)));u[a+112>>2]=Ea+x(Na*za);u[a+108>>2]=Ia+x(La*za);q[a+96>>2]=qa;q[a+100>>2]=ra;u[a+104>>2]=Qa+x(Ka*za);q[a+88>>2]=Oa;q[a+92>>2]=ta;qa=q[ua+12>>2];q[a+128>>2]=q[ua+8>>2];q[a+132>>2]=qa;qa=q[ua+4>>2];q[a+120>>2]=q[ua>>2];q[a+124>>2]=qa;qa=q[ua+28>>2];q[a+144>>2]=q[ua+24>>2];q[a+148>>2]=qa;qa=q[ua+20>>2];q[a+136>>2]=q[ua+16>>2];q[a+140>>2]=qa;qa=q[ua+44>>2];q[a+160>>2]=q[ua+40>>2];q[a+164>>2]=qa;qa=q[ua+36>>2];q[a+152>>2]=q[ua+32>>2];q[a+156>>2]=qa;qa=q[ua+60>>2];q[a+176>>2]=q[ua+56>>2];q[a+180>>2]=qa;qa=q[ua+52>>2];q[a+168>>2]=q[ua+48>>2];q[a+172>>2]=qa;q[a+184>>2]=1566444395;o[a+48|0]=0;q[a+8>>2]=5232;q[pa+16>>2]=0;u[pa+12>>2]=-Na;u[pa+8>>2]=-La;u[pa+4>>2]=-Ka;Ma(pa,a+56|0,a+8|0,ya);pa=r[a+48|0];if(pa){Ga=u[a+44>>2];Ha=u[a+32>>2];Ia=u[a+36>>2];Ea=u[a+28>>2];q[wa+12>>2]=0;za=x(za-Ga);u[wa>>2]=Ea-x(Ka*za);u[wa+8>>2]=Ia-x(Na*za);u[wa+4>>2]=Ha-x(La*za);qa=q[a+40>>2];q[xa+8>>2]=q[a+36>>2];q[xa+12>>2]=qa;qa=q[a+32>>2];q[xa>>2]=q[a+28>>2];q[xa+4>>2]=qa;u[va+12>>2]=Pa;u[va+8>>2]=Fa;u[va+4>>2]=Ca;u[va>>2]=Aa;}Ja=(pa|0)!=0;}P=a+4240|0;return Ja|0}function Dj(a,pa,qa,ra){var ta=0,ua=x(0),va=x(0),wa=x(0),xa=0,ya=x(0),Ma=x(0),Ya=x(0),Za=x(0),_a=x(0),$a=x(0),ab=x(0),bb=0,cb=x(0),db=0,fb=x(0),gb=x(0),hb=0,ib=x(0),jb=x(0),kb=x(0),lb=x(0),mb=x(0),nb=x(0),ob=x(0),pb=x(0),qb=x(0),rb=x(0),sb=x(0),tb=x(0),ub=x(0),vb=x(0),wb=0,xb=0,yb=x(0),zb=x(0),Ab=x(0),Bb=x(0),Cb=x(0),Db=x(0),Eb=x(0),Fb=x(0),Gb=x(0),Hb=x(0),Ib=x(0),Jb=x(0),Kb=x(0),Lb=x(0),Mb=x(0),Nb=x(0),Ob=x(0),Pb=x(0),Qb=x(0),Rb=x(0);ta=P-272|0;P=ta;q[a+56>>2]=0;q[ta+264>>2]=0;q[ta+268>>2]=0;q[ta+256>>2]=0;q[ta+260>>2]=0;xa=q[pa+12>>2];q[ta+168>>2]=q[pa+8>>2];q[ta+172>>2]=xa;xa=q[pa+4>>2];q[ta+160>>2]=q[pa>>2];q[ta+164>>2]=xa;xa=q[pa+28>>2];q[ta+184>>2]=q[pa+24>>2];q[ta+188>>2]=xa;xa=q[pa+20>>2];q[ta+176>>2]=q[pa+16>>2];q[ta+180>>2]=xa;xa=q[pa+44>>2];q[ta+200>>2]=q[pa+40>>2];q[ta+204>>2]=xa;xa=q[pa+36>>2];q[ta+192>>2]=q[pa+32>>2];q[ta+196>>2]=xa;xa=q[pa+60>>2];q[ta+216>>2]=q[pa+56>>2];q[ta+220>>2]=xa;xa=q[pa+52>>2];q[ta+208>>2]=q[pa+48>>2];q[ta+212>>2]=xa;xa=q[pa+76>>2];q[ta+104>>2]=q[pa+72>>2];q[ta+108>>2]=xa;xa=q[pa+68>>2];q[ta+96>>2]=q[pa+64>>2];q[ta+100>>2]=xa;xa=q[pa+92>>2];q[ta+120>>2]=q[pa+88>>2];q[ta+124>>2]=xa;xa=q[pa+84>>2];q[ta+112>>2]=q[pa+80>>2];q[ta+116>>2]=xa;xa=q[pa+108>>2];q[ta+136>>2]=q[pa+104>>2];q[ta+140>>2]=xa;xa=q[pa+100>>2];q[ta+128>>2]=q[pa+96>>2];q[ta+132>>2]=xa;xa=q[pa+124>>2];q[ta+152>>2]=q[pa+120>>2];q[ta+156>>2]=xa;xa=q[pa+116>>2];q[ta+144>>2]=q[pa+112>>2];q[ta+148>>2]=xa;ua=u[ta+212>>2];va=u[ta+148>>2];lb=x(x(ua+va)*x(.5));u[ta+212>>2]=ua-lb;ua=u[ta+216>>2];wa=u[ta+152>>2];mb=x(x(ua+wa)*x(.5));u[ta+216>>2]=ua-mb;u[ta+148>>2]=va-lb;u[ta+152>>2]=wa-mb;ua=u[ta+208>>2];va=u[ta+144>>2];nb=x(x(ua+va)*x(.5));u[ta+208>>2]=ua-nb;u[ta+144>>2]=va-nb;hb=q[q[a+28>>2]+4>>2]+ -17>>>0<=1?q[q[a+32>>2]+4>>2]+ -17>>>0<2:hb;Za=u[a+44>>2];ua=u[a+48>>2];q[5785]=q[5785]+1;q[a+68>>2]=0;q[a+12>>2]=0;q[a+16>>2]=0;q[a+4>>2]=0;q[a+8>>2]=1065353216;q[a+60>>2]=-1;q[a+64>>2]=0;wb=r[a+52|0];hc(q[a+24>>2]);_a=wb?x(0):ua;xa=a+4|0;va=x(0xde0b6b000000000);while(1){Ya=u[pa+32>>2];ab=u[pa+16>>2];cb=u[pa>>2];$a=u[pa+36>>2];gb=u[pa+20>>2];ib=u[pa+4>>2];jb=u[pa+40>>2];ua=u[a+12>>2];Ma=u[pa+24>>2];ya=u[a+8>>2];kb=u[pa+8>>2];wa=u[a+4>>2];q[ta+252>>2]=0;fb=Ma;Ma=x(-ya);u[ta+248>>2]=x(x(fb*Ma)-x(wa*kb))-x(ua*jb);u[ta+244>>2]=x(x(gb*Ma)-x(wa*ib))-x(ua*$a);u[ta+240>>2]=x(x(ab*Ma)-x(wa*cb))-x(ua*Ya);Ma=u[pa+96>>2];Ya=u[pa+64>>2];ab=u[pa+80>>2];cb=u[pa+100>>2];$a=u[pa+68>>2];gb=u[pa+84>>2];ib=u[pa+104>>2];jb=u[pa+72>>2];kb=u[pa+88>>2];q[ta+236>>2]=0;u[ta+232>>2]=x(x(wa*jb)+x(ya*kb))+x(ua*ib);u[ta+228>>2]=x(x(wa*$a)+x(ya*gb))+x(ua*cb);u[ta+224>>2]=x(x(wa*Ya)+x(ya*ab))+x(ua*Ma);eb(ta+80|0,q[a+28>>2],ta+240|0);eb(ta- -64|0,q[a+32>>2],ta+224|0);q[ta+60>>2]=0;ua=u[ta+80>>2];ya=u[ta+84>>2];Ma=u[ta+88>>2];wa=x(x(x(x(ua*u[ta+192>>2])+x(ya*u[ta+196>>2]))+x(Ma*u[ta+200>>2]))+u[ta+216>>2]);u[ta+56>>2]=wa;ab=x(x(x(x(ua*u[ta+176>>2])+x(ya*u[ta+180>>2]))+x(Ma*u[ta+184>>2]))+u[ta+212>>2]);u[ta+52>>2]=ab;cb=x(x(x(x(ua*u[ta+160>>2])+x(ya*u[ta+164>>2]))+x(Ma*u[ta+168>>2]))+u[ta+208>>2]);u[ta+48>>2]=cb;q[ta+44>>2]=0;ua=u[ta+64>>2];Ma=u[ta+68>>2];Ya=u[ta+72>>2];ya=x(x(x(x(ua*u[ta+128>>2])+x(Ma*u[ta+132>>2]))+x(Ya*u[ta+136>>2]))+u[ta+152>>2]);u[ta+40>>2]=ya;$a=x(x(x(x(ua*u[ta+112>>2])+x(Ma*u[ta+116>>2]))+x(Ya*u[ta+120>>2]))+u[ta+148>>2]);u[ta+36>>2]=$a;ua=x(x(x(x(ua*u[ta+96>>2])+x(Ma*u[ta+100>>2]))+x(Ya*u[ta+104>>2]))+u[ta+144>>2]);u[ta+32>>2]=ua;if(hb){q[ta+40>>2]=0;q[ta+56>>2]=0;ya=x(0);wa=x(0);}q[ta+28>>2]=0;wa=x(wa-ya);u[ta+24>>2]=wa;ua=x(cb-ua);u[ta+16>>2]=ua;ya=x(ab-$a);u[ta+20>>2]=ya;a:{b:{ua=x(x(x(ua*u[a+4>>2])+x(ya*u[a+8>>2]))+x(wa*u[a+12>>2]));if(!(ua>x(0)^1|x(ua*ua)>x(va*u[pa+128>>2])^1)){q[a+68>>2]=10;break b}if(bf(q[a+24>>2],ta+16|0)){db=1;q[a+68>>2]=1;bb=2;break a}ua=x(va-ua);if(!!(ua<=x(va*x(9.999999974752427e-7)))){bb=2;q[a+68>>2]=ua<=x(0)?2:11;db=1;break a}ef(q[a+24>>2],ta+16|0,ta+48|0,ta+32|0);if(!cf(q[a+24>>2],ta)){q[a+68>>2]=3;break b}ua=u[ta>>2];wa=x(ua*ua);ua=u[ta+4>>2];wa=x(wa+x(ua*ua));ua=u[ta+8>>2];ua=x(wa+x(ua*ua));if(!!(ua<x(9.999999974752427e-7))){bb=q[ta+4>>2];q[xa>>2]=q[ta>>2];q[xa+4>>2]=bb;bb=q[ta+12>>2];q[xa+8>>2]=q[ta+8>>2];q[xa+12>>2]=bb;q[a+68>>2]=6;break b}c:{if(!!(x(va-ua)<=x(va*x(1.1920928955078125e-7)))){q[a+68>>2]=12;db=1;bb=2;break c}bb=q[ta+4>>2];q[xa>>2]=q[ta>>2];q[xa+4>>2]=bb;bb=q[ta+12>>2];q[xa+8>>2]=q[ta+8>>2];q[xa+12>>2]=bb;xb=q[a+64>>2];q[a+64>>2]=xb+1;bb=2;if((xb|0)>1e3){break c}if(q[q[a+24>>2]>>2]!=4){bb=0;break c}q[a+68>>2]=13;}va=ua;break a}db=1;bb=2;}if(!bb){continue}break}ua=x(0);wa=wb?x(0):Za;ya=x(wa+_a);hb=0;bb=0;if(db&1){af(q[a+24>>2],ta+240|0,ta+224|0);db=q[xa+12>>2];q[ta+264>>2]=q[xa+8>>2];q[ta+268>>2]=db;db=q[xa+4>>2];q[ta+256>>2]=q[xa>>2];q[ta+260>>2]=db;ua=u[a+4>>2];Ma=u[a+8>>2];Ya=u[a+12>>2];Za=x(x(x(ua*ua)+x(Ma*Ma))+x(Ya*Ya));if(!!(Za<x(9.999999974752427e-7))){q[a+68>>2]=5;}db=1;d:{if(!(Za>x(1.4210854715202004e-14))){db=2;ua=x(0);break d}Za=x(x(1)/x(E(Za)));u[ta+256>>2]=Za*u[ta+256>>2];u[ta+260>>2]=Za*u[ta+260>>2];u[ta+264>>2]=Za*u[ta+264>>2];ab=x(E(va));va=x(wa/ab);u[ta+240>>2]=u[ta+240>>2]-x(va*ua);u[ta+244>>2]=u[ta+244>>2]-x(va*Ma);u[ta+248>>2]=u[ta+248>>2]-x(va*Ya);va=x(_a/ab);u[ta+224>>2]=x(va*ua)+u[ta+224>>2];u[ta+228>>2]=x(va*Ma)+u[ta+228>>2];u[ta+232>>2]=x(va*Ya)+u[ta+232>>2];bb=1;ua=x(x(x(1)/Za)-ya);}q[a+60>>2]=db;}if(!(!q[a+68>>2]|(!q[a+72>>2]|!q[a+20>>2]))){hb=x(ya+ua)<u[5251];}e:{f:{g:{db=bb^1;if(db?0:!hb){break g}hb=q[a+20>>2];if(!hb){break g}q[5784]=q[5784]+1;q[xa+8>>2]=0;q[xa+12>>2]=0;q[xa>>2]=0;q[xa+4>>2]=0;if(n[q[q[hb>>2]+8>>2]](hb,q[a+24>>2],q[a+28>>2],q[a+32>>2],ta+160|0,ta+96|0,xa,ta+80|0,ta- -64|0,ra)){Ya=x(0);va=u[ta+64>>2];Za=u[ta+80>>2];_a=x(va-Za);ab=u[ta+68>>2];cb=u[ta+84>>2];Ma=x(ab-cb);$a=u[ta+72>>2];gb=u[ta+88>>2];wa=x($a-gb);ya=x(x(x(_a*_a)+x(Ma*Ma))+x(wa*wa));if(!!(ya<=x(1.4210854715202004e-14))){Ya=u[a+16>>2];_a=u[a+4>>2];Ma=u[a+8>>2];wa=u[a+12>>2];ya=x(x(x(_a*_a)+x(Ma*Ma))+x(wa*wa));}if(!!(ya>x(1.4210854715202004e-14))){q[a+60>>2]=3;va=x(Za-va);fb=x(va*va);va=x(cb-ab);fb=x(fb+x(va*va));va=x(gb-$a);va=x(-x(E(x(fb+x(va*va)))));if(!((ua>va^-1)&(db^1))){ra=q[ta+92>>2];q[ta+248>>2]=q[ta+88>>2];q[ta+252>>2]=ra;ra=q[ta+76>>2];q[ta+232>>2]=q[ta+72>>2];q[ta+236>>2]=ra;ra=q[ta+84>>2];q[ta+240>>2]=q[ta+80>>2];q[ta+244>>2]=ra;ra=q[ta+68>>2];q[ta+224>>2]=q[ta+64>>2];q[ta+228>>2]=ra;u[ta+268>>2]=Ya;ua=x(x(1)/x(E(ya)));u[ta+264>>2]=wa*ua;u[ta+260>>2]=Ma*ua;u[ta+256>>2]=_a*ua;ua=va;break f}q[a+60>>2]=8;if(bb){break f}break e}q[a+60>>2]=9;if(bb){break f}break e}Ma=u[a+4>>2];Ya=u[a+8>>2];Za=u[a+12>>2];if(!!(x(x(x(Ma*Ma)+x(Ya*Ya))+x(Za*Za))>x(0))){va=x(u[ta+80>>2]-u[ta+64>>2]);$a=x(va*va);va=x(u[ta+84>>2]-u[ta+68>>2]);$a=x($a+x(va*va));va=x(u[ta+88>>2]-u[ta+72>>2]);va=x(x(E(x($a+x(va*va))))-ya);if(!((va<ua^-1)&(db^1))){ra=q[ta+92>>2];q[ta+248>>2]=q[ta+88>>2];q[ta+252>>2]=ra;ra=q[ta+76>>2];q[ta+232>>2]=q[ta+72>>2];q[ta+236>>2]=ra;u[ta+248>>2]=u[ta+248>>2]-x(wa*Za);u[ta+232>>2]=x(_a*Za)+u[ta+232>>2];ra=q[ta+68>>2];q[ta+224>>2]=q[ta+64>>2];q[ta+228>>2]=ra;ra=q[ta+84>>2];q[ta+240>>2]=q[ta+80>>2];q[ta+244>>2]=ra;u[ta+224>>2]=x(_a*Ma)+u[ta+224>>2];u[ta+228>>2]=x(_a*Ya)+u[ta+228>>2];u[ta+240>>2]=u[ta+240>>2]-x(wa*Ma);u[ta+244>>2]=u[ta+244>>2]-x(wa*Ya);ra=q[xa+12>>2];q[ta+264>>2]=q[xa+8>>2];q[ta+268>>2]=ra;ra=q[xa+4>>2];q[ta+256>>2]=q[xa>>2];q[ta+260>>2]=ra;wa=u[ta+256>>2];ya=u[ta+260>>2];_a=u[ta+264>>2];ua=x(x(1)/x(E(x(x(x(wa*wa)+x(ya*ya))+x(_a*_a)))));u[ta+264>>2]=_a*ua;u[ta+260>>2]=ya*ua;u[ta+256>>2]=wa*ua;q[a+60>>2]=6;ua=va;break f}q[a+60>>2]=5;if(bb){break f}break e}if(bb){break f}break e}if(!bb){break e}}if(x(ua*ua)<u[pa+128>>2]^1?!(ua<x(0)):0){break e}ra=q[ta+260>>2];q[xa>>2]=q[ta+256>>2];q[xa+4>>2]=ra;ra=q[ta+268>>2];q[xa+8>>2]=q[ta+264>>2];q[xa+12>>2]=ra;u[a+56>>2]=ua;_a=u[pa+32>>2];Ma=u[pa>>2];Ya=u[pa+16>>2];Za=u[pa+36>>2];ab=u[pa+4>>2];cb=u[pa+20>>2];wa=u[pa+40>>2];va=u[pa+8>>2];ya=u[pa+24>>2];q[ta+92>>2]=0;$a=va;va=u[ta+256>>2];fb=ya;ya=u[ta+260>>2];gb=wa;wa=u[ta+264>>2];u[ta+88>>2]=x(x($a*va)+x(fb*ya))+x(gb*wa);u[ta+84>>2]=x(x(va*ab)+x(ya*cb))+x(wa*Za);u[ta+80>>2]=x(x(Ma*va)+x(Ya*ya))+x(_a*wa);_a=u[pa+96>>2];Ma=u[pa+80>>2];Ya=u[pa+64>>2];Za=u[pa+100>>2];ab=u[pa+84>>2];cb=u[pa+68>>2];$a=u[pa+104>>2];gb=u[pa+88>>2];ib=u[pa+72>>2];q[ta+76>>2]=0;ya=x(-ya);u[ta+72>>2]=x(x(gb*ya)-x(va*ib))-x(wa*$a);u[ta+68>>2]=x(x(ab*ya)-x(va*cb))-x(wa*Za);u[ta+64>>2]=x(x(Ma*ya)-x(va*Ya))-x(wa*_a);eb(ta+48|0,q[a+28>>2],ta+80|0);eb(ta+32|0,q[a+32>>2],ta- -64|0);va=u[ta+264>>2];gb=u[ta+216>>2];ib=u[ta+200>>2];jb=u[ta+192>>2];kb=u[ta+196>>2];yb=u[ta+152>>2];zb=u[ta+136>>2];Ab=u[ta+128>>2];Bb=u[ta+132>>2];Cb=u[ta+212>>2];Db=u[ta+184>>2];Eb=u[ta+176>>2];Fb=u[ta+180>>2];Gb=u[ta+148>>2];Hb=u[ta+120>>2];Ib=u[ta+112>>2];Jb=u[ta+116>>2];Kb=u[ta+208>>2];Lb=u[ta+168>>2];_a=u[ta+56>>2];Mb=u[ta+160>>2];Ma=u[ta+48>>2];Nb=u[ta+164>>2];Ya=u[ta+52>>2];Ob=u[ta+144>>2];Pb=u[ta+104>>2];Za=u[ta+40>>2];Qb=u[ta+96>>2];ab=u[ta+32>>2];Rb=u[ta+100>>2];cb=u[ta+36>>2];ya=u[ta+260>>2];wa=u[ta+256>>2];ob=u[pa+32>>2];pb=u[pa+16>>2];qb=u[pa>>2];rb=u[pa+36>>2];sb=u[pa+20>>2];tb=u[pa+4>>2];ub=u[pa+40>>2];$a=u[pa+24>>2];vb=u[pa+8>>2];q[ta+92>>2]=0;fb=$a;$a=x(-ya);u[ta+88>>2]=x(x(fb*$a)-x(wa*vb))-x(va*ub);u[ta+84>>2]=x(x(sb*$a)-x(wa*tb))-x(va*rb);u[ta+80>>2]=x(x(pb*$a)-x(wa*qb))-x(va*ob);ob=u[pa+96>>2];pb=u[pa+64>>2];qb=u[pa+80>>2];rb=u[pa+100>>2];sb=u[pa+68>>2];tb=u[pa+84>>2];ub=u[pa+104>>2];vb=u[pa+72>>2];fb=u[pa+88>>2];q[ta+76>>2]=0;u[ta+72>>2]=x(x(wa*vb)+x(ya*fb))+x(va*ub);u[ta+68>>2]=x(x(wa*sb)+x(ya*tb))+x(va*rb);u[ta+64>>2]=x(x(wa*pb)+x(ya*qb))+x(va*ob);eb(ta+48|0,q[a+28>>2],ta+80|0);eb(ta+32|0,q[a+32>>2],ta- -64|0);$a=x(x(x(x(x(Cb+x(x(x(Ma*Eb)+x(Ya*Fb))+x(_a*Db)))-x(Gb+x(x(x(ab*Ib)+x(cb*Jb))+x(Za*Hb))))*$a)-x(wa*x(x(Kb+x(x(x(Ma*Mb)+x(Ya*Nb))+x(_a*Lb)))-x(Ob+x(x(x(ab*Qb)+x(cb*Rb))+x(Za*Pb))))))-x(va*x(x(gb+x(x(x(Ma*jb)+x(Ya*kb))+x(_a*ib)))-x(yb+x(x(x(ab*Ab)+x(cb*Bb))+x(Za*zb))))));va=u[ta+48>>2];wa=u[ta+52>>2];ya=u[ta+56>>2];_a=u[ta+32>>2];Ma=u[ta+36>>2];Ya=u[ta+40>>2];Za=u[ta+256>>2];ab=u[ta+260>>2];fb=x(x(x(x(x(x(x(va*u[ta+160>>2])+x(wa*u[ta+164>>2]))+x(ya*u[ta+168>>2]))+u[ta+208>>2])-x(x(x(x(_a*u[ta+96>>2])+x(Ma*u[ta+100>>2]))+x(Ya*u[ta+104>>2]))+u[ta+144>>2]))*Za)+x(x(x(x(x(x(va*u[ta+176>>2])+x(wa*u[ta+180>>2]))+x(ya*u[ta+184>>2]))+u[ta+212>>2])-x(x(x(x(_a*u[ta+112>>2])+x(Ma*u[ta+116>>2]))+x(Ya*u[ta+120>>2]))+u[ta+148>>2]))*ab));wa=x(x(x(x(x(va*u[ta+192>>2])+x(wa*u[ta+196>>2]))+x(ya*u[ta+200>>2]))+u[ta+216>>2])-x(x(x(x(_a*u[ta+128>>2])+x(Ma*u[ta+132>>2]))+x(Ya*u[ta+136>>2]))+u[ta+152>>2]));va=u[ta+264>>2];if(!!($a>x(fb+x(wa*va)))){q[a+60>>2]=10;u[ta+264>>2]=-va;u[ta+260>>2]=-ab;u[ta+256>>2]=-Za;}q[ta+92>>2]=0;u[ta+88>>2]=mb+u[ta+232>>2];u[ta+84>>2]=lb+u[ta+228>>2];u[ta+80>>2]=nb+u[ta+224>>2];n[q[q[qa>>2]+16>>2]](qa,ta+256|0,ta+80|0,ua);}P=ta+272|0;}function Ej(a,pa,qa,ra,eb,Sb,Tb,Ub,Vb){q[a+72>>2]=1;q[a+76>>2]=1;q[a+60>>2]=-1;o[a+52|0]=0;u[a+48>>2]=Tb;u[a+44>>2]=Sb;q[a+40>>2]=eb;q[a+36>>2]=ra;q[a+32>>2]=qa;q[a+28>>2]=pa;q[a+24>>2]=Ub;q[a+20>>2]=Vb;q[a+4>>2]=0;q[a+8>>2]=1065353216;q[a>>2]=5064;q[a+12>>2]=0;q[a+16>>2]=0;return a}function Fj(a,pa,qa,ra,eb,Sb){var Tb=x(0),Ub=0,Vb=x(0),Wb=x(0),Xb=x(0),Yb=0,Zb=x(0),_b=x(0),$b=x(0),ac=0,bc=x(0),cc=x(0),dc=x(0),ec=0,fc=x(0),gc=x(0),hc=x(0),ic=x(0),jc=x(0),kc=x(0),lc=x(0),mc=x(0),nc=x(0),oc=x(0),pc=x(0),qc=x(0),rc=x(0),sc=x(0),tc=x(0),uc=x(0),vc=x(0),wc=x(0),xc=x(0),yc=x(0),zc=x(0),Ac=x(0),Bc=0,Cc=x(0),Dc=x(0),Ec=x(0),Fc=0,Gc=0;Ub=P-48|0;P=Ub;o[Ub+24|0]=0;Yb=q[a+12>>2];q[Sb+8>>2]=q[a+8>>2];q[Sb+12>>2]=Yb;Yb=q[a+4>>2];q[Sb>>2]=q[a>>2];q[Sb+4>>2]=Yb;o[Sb+16|0]=r[Sb+16|0]|15;vc=u[a+8>>2];fc=u[pa+8>>2];rc=x(vc-fc);gc=u[qa+8>>2];cc=x(gc-fc);wc=u[ra>>2];hc=u[pa>>2];ic=x(wc-hc);xc=u[eb+4>>2];jc=u[pa+4>>2];kc=x(xc-jc);lc=u[ra+4>>2];mc=x(lc-jc);Zb=u[eb>>2];nc=x(Zb-hc);_b=x(x(ic*kc)-x(mc*nc));oc=u[qa>>2];pc=x(oc-hc);yc=u[eb+8>>2];$b=x(yc-fc);Wb=u[ra+8>>2];Xb=x(Wb-fc);Tb=x(x(mc*$b)-x(Xb*kc));qc=u[qa+4>>2];bc=x(qc-jc);Vb=x(x(Xb*nc)-x(ic*$b));dc=x(x(cc*_b)+x(x(pc*Tb)+x(bc*Vb)));zc=u[a>>2];sc=x(zc-hc);Ac=u[a+4>>2];tc=x(Ac-jc);Bc=x(dc*dc)<x(9.99999905104687e-9)?-1:x(x(x(rc*_b)+x(x(sc*Tb)+x(tc*Vb)))*dc)<x(0);Cc=x(x(bc*Xb)-x(cc*mc));Dc=x(x(cc*ic)-x(pc*Xb));Ec=x(x(pc*mc)-x(bc*ic));uc=x(x(x(Cc*nc)+x(Dc*kc))+x(Ec*$b));Tb=Xb;Xb=x(x(bc*nc)-x(pc*kc));bc=x(x(cc*kc)-x(bc*$b));dc=x(x(pc*$b)-x(cc*nc));$b=x(x(Tb*Xb)+x(x(ic*bc)+x(mc*dc)));Tb=x(lc-qc);lc=x(Zb-oc);Zb=x(wc-oc);Vb=x(xc-qc);_b=x(x(Tb*lc)-x(Zb*Vb));Wb=x(Wb-gc);cc=x(Wb*Vb);Vb=x(yc-gc);Tb=x(cc-x(Tb*Vb));Vb=x(x(Zb*Vb)-x(Wb*lc));Wb=x(x(x(fc-gc)*_b)+x(x(x(hc-oc)*Tb)+x(x(jc-qc)*Vb)));Fc=x(Wb*Wb)<x(9.99999905104687e-9)?-1:x(x(x(x(vc-gc)*_b)+x(x(x(zc-oc)*Tb)+x(x(Ac-qc)*Vb)))*Wb)<x(0);Gc=x($b*$b)<x(9.99999905104687e-9)?-1:x(x(x(rc*Xb)+x(x(sc*bc)+x(tc*dc)))*$b)<x(0);ac=x(uc*uc)<x(9.99999905104687e-9)?-1:x(x(x(x(sc*Cc)+x(tc*Dc))+x(Ec*rc))*uc)<x(0);Yb=Fc|(Gc|(ac|Bc));a:{if((Yb|0)<=-1){o[Sb+36|0]=1;break a}if(!Yb){break a}Vb=x(3.4028234663852886e+38);b:{if(!ac){break b}Kb(a,pa,qa,ra,Ub+8|0);Zb=u[Ub+8>>2];Tb=x(Zb-u[a>>2]);Vb=x(Tb*Tb);_b=u[Ub+12>>2];Tb=x(_b-u[a+4>>2]);Vb=x(Vb+x(Tb*Tb));Wb=u[Ub+16>>2];Tb=x(Wb-u[a+8>>2]);Tb=x(Vb+x(Tb*Tb));Vb=x(3.4028234663852886e+38);if(!(Tb<x(3.4028234663852886e+38))){break b}q[Sb+12>>2]=q[Ub+20>>2];u[Sb+8>>2]=Wb;u[Sb+4>>2]=_b;u[Sb>>2]=Zb;Yb=r[Ub+24|0];o[Sb+16|0]=Yb&1|r[Sb+16|0]&240|Yb&2|Yb&4;ec=q[Ub+36>>2];ac=q[Ub+32>>2];Yb=q[Ub+28>>2];q[Sb+32>>2]=0;q[Sb+28>>2]=ec;q[Sb+20>>2]=Yb;q[Sb+24>>2]=ac;Vb=Tb;}c:{if(!Bc){break c}Kb(a,pa,ra,eb,Ub+8|0);Zb=u[Ub+8>>2];Tb=x(Zb-u[a>>2]);Xb=x(Tb*Tb);_b=u[Ub+12>>2];Tb=x(_b-u[a+4>>2]);Xb=x(Xb+x(Tb*Tb));Wb=u[Ub+16>>2];Tb=x(Wb-u[a+8>>2]);Tb=x(Xb+x(Tb*Tb));if(!(Tb<Vb)){break c}q[Sb+12>>2]=q[Ub+20>>2];u[Sb+8>>2]=Wb;u[Sb+4>>2]=_b;u[Sb>>2]=Zb;Yb=r[Ub+24|0];ac=Yb<<1;o[Sb+16|0]=ac&8|(ac&4|(Yb&1|r[Sb+16|0]&240));ec=q[Ub+36>>2];ac=q[Ub+32>>2];Yb=q[Ub+28>>2];q[Sb+24>>2]=0;q[Sb+28>>2]=ac;q[Sb+32>>2]=ec;q[Sb+20>>2]=Yb;Vb=Tb;}d:{if(!Gc){break d}Kb(a,pa,eb,qa,Ub+8|0);Zb=u[Ub+8>>2];Tb=x(Zb-u[a>>2]);Xb=x(Tb*Tb);_b=u[Ub+12>>2];Tb=x(_b-u[a+4>>2]);Xb=x(Xb+x(Tb*Tb));Wb=u[Ub+16>>2];Tb=x(Wb-u[a+8>>2]);Tb=x(Xb+x(Tb*Tb));if(!(Tb<Vb)){break d}q[Sb+12>>2]=q[Ub+20>>2];u[Sb+8>>2]=Wb;u[Sb+4>>2]=_b;u[Sb>>2]=Zb;pa=r[Ub+24|0];o[Sb+16|0]=pa&1|r[Sb+16|0]&240|pa>>>1&2|pa<<2&8;Yb=q[Ub+36>>2];pa=q[Ub+28>>2];q[Sb+32>>2]=q[Ub+32>>2];q[Sb+28>>2]=0;q[Sb+24>>2]=Yb;q[Sb+20>>2]=pa;Vb=Tb;}if(!Fc){ec=1;break a}Kb(a,qa,eb,ra,Ub+8|0);ec=1;Zb=u[Ub+8>>2];Tb=x(Zb-u[a>>2]);Xb=x(Tb*Tb);_b=u[Ub+12>>2];Tb=x(_b-u[a+4>>2]);Xb=x(Xb+x(Tb*Tb));Wb=u[Ub+16>>2];Tb=x(Wb-u[a+8>>2]);if(!(x(Xb+x(Tb*Tb))<Vb)){break a}q[Sb+12>>2]=q[Ub+20>>2];u[Sb+8>>2]=Wb;u[Sb+4>>2]=_b;u[Sb>>2]=Zb;a=r[Ub+24|0];o[Sb+16|0]=a&4|r[Sb+16|0]&240|a<<1&2|a<<2&8;pa=q[Ub+36>>2];a=q[Ub+28>>2];q[Sb+32>>2]=q[Ub+32>>2];q[Sb+28>>2]=pa;q[Sb+24>>2]=a;q[Sb+20>>2]=0;}P=Ub+48|0;return ec}function Gj(a,pa,qa,ra,eb,Sb,Hc,Ic,Jc,Kc){a=a|0;pa=pa|0;qa=qa|0;ra=ra|0;eb=eb|0;Sb=Sb|0;Hc=Hc|0;Ic=Ic|0;Jc=Jc|0;Kc=Kc|0;var Lc=x(0),Mc=x(0),Nc=x(0),Oc=x(0),Pc=x(0),Qc=x(0);Kc=P-80|0;P=Kc;Lc=u[eb+52>>2];Mc=u[Sb+52>>2];Nc=u[eb+56>>2];Oc=u[Sb+56>>2];Pc=u[eb+48>>2];Qc=u[Sb+48>>2];a=0;q[Kc+76>>2]=0;u[Kc+64>>2]=Qc-Pc;u[Kc+72>>2]=Oc-Nc;u[Kc+68>>2]=Mc-Lc;pa=1;a:{if(!Jj(qa,eb,ra,Sb,Kc- -64|0,Kc+8|0)){pa=0;if(!Lj(qa,eb,ra,Sb,Kc- -64|0,Kc+8|0)){break a}}a=q[Kc+16>>2];q[Ic>>2]=q[Kc+12>>2];q[Ic+4>>2]=a;a=q[Kc+24>>2];q[Ic+8>>2]=q[Kc+20>>2];q[Ic+12>>2]=a;a=q[Kc+40>>2];q[Jc+8>>2]=q[Kc+36>>2];q[Jc+12>>2]=a;a=q[Kc+32>>2];q[Jc>>2]=q[Kc+28>>2];q[Jc+4>>2]=a;a=q[Kc+56>>2];q[Hc+8>>2]=q[Kc+52>>2];q[Hc+12>>2]=a;a=q[Kc+48>>2];q[Hc>>2]=q[Kc+44>>2];q[Hc+4>>2]=a;a=pa;}P=Kc+80|0;return a|0}function Hj(a,pa,qa){var ra=0,eb=x(0),Sb=x(0),Hc=x(0),Ic=0,Jc=x(0),Kc=x(0),Rc=x(0),Sc=x(0),Tc=x(0),Uc=x(0),Vc=x(0),Wc=x(0),Xc=x(0),Yc=0,Zc=0,_c=x(0),$c=x(0),ad=x(0);ra=P-32|0;P=ra;Yc=q[pa+124>>2];Zc=q[pa+4>>2]+(Yc>>1)|0;Ic=q[pa+120>>2];Ic=Yc&1?q[q[Zc>>2]+Ic>>2]:Ic;Jc=u[pa+16>>2];Kc=u[pa+12>>2];Rc=u[pa+32>>2];Sc=u[pa+24>>2];Tc=u[pa+28>>2];Uc=u[pa+48>>2];Vc=u[pa+40>>2];Wc=u[pa+44>>2];Xc=u[pa+8>>2];eb=u[qa+8>>2];Sb=u[qa>>2];Hc=u[qa+4>>2];q[ra+12>>2]=0;u[ra+8>>2]=x(x(Sb*Vc)+x(Hc*Wc))+x(eb*Uc);u[ra+4>>2]=x(x(Sb*Sc)+x(Hc*Tc))+x(eb*Rc);u[ra>>2]=x(x(Xc*Sb)+x(Kc*Hc))+x(Jc*eb);n[Ic](ra+16|0,Zc,ra);Jc=u[pa+104>>2];Kc=u[pa- -64>>2];Rc=u[pa+60>>2];Sc=u[pa+108>>2];Tc=u[pa+80>>2];Uc=u[pa+72>>2];Vc=u[pa+76>>2];Wc=u[pa+112>>2];Xc=u[pa+96>>2];_c=u[pa+88>>2];$c=u[pa+92>>2];ad=u[pa+56>>2];eb=u[ra+24>>2];Sb=u[ra+16>>2];Hc=u[ra+20>>2];q[a+12>>2]=0;u[a+8>>2]=Wc+x(x(x(Sb*_c)+x(Hc*$c))+x(eb*Xc));u[a+4>>2]=Sc+x(x(x(Sb*Uc)+x(Hc*Vc))+x(eb*Tc));u[a>>2]=Jc+x(x(x(Sb*ad)+x(Hc*Rc))+x(eb*Kc));P=ra+32|0;}function Ij(a,pa,qa){var bd=0,cd=x(0),dd=0,ed=x(0),fd=0,gd=0,hd=x(0),id=0,jd=x(0),kd=0,ld=x(0),md=x(0),nd=x(0),od=x(0),pd=x(0),qd=x(0),rd=0,td=x(0),ud=0,vd=0,wd=x(0),xd=x(0);rd=P-16|0;P=rd;a:{b:{fd=q[pa+372>>2];if(t[fd+32>>2]<2){break b}if(!gb(pa)){break b}bd=q[a+18496>>2];if(bd){id=q[a+18508>>2];gd=q[a+18500>>2];while(1){dd=q[bd+48>>2];if(dd){q[dd+44>>2]=q[bd+44>>2];}dd=q[bd+44>>2];if(dd){q[dd+48>>2]=q[bd+48>>2];}if(q[a+18496>>2]==(bd|0)){q[a+18496>>2]=q[bd+48>>2];}q[bd+44>>2]=0;q[bd+48>>2]=q[a+18504>>2];dd=q[a+18504>>2];if(dd){q[dd+44>>2]=bd;}gd=gd+ -1|0;q[a+18504>>2]=bd;id=id+1|0;bd=q[a+18496>>2];if(bd){continue}break}q[a+18508>>2]=id;q[a+18500>>2]=gd;}q[a+18492>>2]=0;q[a>>2]=0;dd=q[fd>>2];gd=q[fd+12>>2];ed=u[gd+16>>2];td=x(u[dd+16>>2]-ed);bd=q[fd+4>>2];pd=u[gd+20>>2];hd=x(u[bd+20>>2]-pd);kd=q[fd+8>>2];cd=u[gd+24>>2];qd=x(u[kd+24>>2]-cd);ld=x(u[dd+20>>2]-pd);md=x(u[bd+24>>2]-cd);nd=x(u[kd+16>>2]-ed);jd=x(u[dd+24>>2]-cd);ed=x(u[bd+16>>2]-ed);cd=x(u[kd+20>>2]-pd);c:{if(!(x(x(x(x(td*hd)*qd)+x(x(x(x(x(ld*md)*nd)+x(x(jd*ed)*cd))-x(x(td*md)*cd))-x(x(ld*ed)*qd)))-x(x(jd*hd)*nd))<x(0))){gd=bd;bd=dd;break c}q[fd+4>>2]=dd;q[fd>>2]=bd;gd=q[fd+16>>2];q[fd+16>>2]=q[fd+20>>2];q[fd+20>>2]=gd;gd=dd;}ud=Lb(a,bd,gd,kd,1);kd=Lb(a,q[fd+4>>2],q[fd>>2],q[fd+12>>2],1);gd=Lb(a,q[fd+8>>2],q[fd+4>>2],q[fd+12>>2],1);dd=Lb(a,q[fd>>2],q[fd+8>>2],q[fd+12>>2],1);if(q[a+18500>>2]!=4){break b}bd=q[a+18496>>2];hd=u[bd+16>>2];id=q[bd+48>>2];if(id){hd=x(hd*hd);while(1){cd=u[id+16>>2];cd=x(cd*cd);qa=cd<hd;bd=qa?id:bd;hd=qa?cd:hd;id=q[id+48>>2];if(id){continue}break}hd=u[bd+16>>2];}qa=q[bd+28>>2];vd=q[bd+24>>2];fd=q[bd+20>>2];cd=u[bd+12>>2];qd=u[bd+8>>2];jd=u[bd+4>>2];ed=u[bd>>2];q[ud+32>>2]=kd;o[ud+52|0]=0;q[kd+32>>2]=ud;o[kd+52|0]=0;q[ud+36>>2]=gd;o[ud+53|0]=0;q[gd+32>>2]=ud;o[gd+52|0]=1;q[ud+40>>2]=dd;o[ud+54|0]=0;q[dd+32>>2]=ud;o[dd+52|0]=2;q[kd+36>>2]=dd;o[kd+53|0]=2;q[dd+40>>2]=kd;o[dd+54|0]=1;q[kd+40>>2]=gd;o[kd+54|0]=1;q[gd+36>>2]=kd;o[gd+53|0]=258;o[gd+54|0]=1;q[gd+40>>2]=dd;q[dd+36>>2]=gd;o[dd+53|0]=2;q[a>>2]=0;gd=0;while(1){d:{e:{dd=q[a+18492>>2];if(dd>>>0<=127){id=0;q[rd+8>>2]=0;q[rd>>2]=0;q[rd+4>>2]=0;q[a+18492>>2]=dd+1;gd=gd+1|0;o[bd+55|0]=gd;dd=(dd<<5)+a|0;kd=dd+60|0;Na(pa,bd,kd);if(!(x(x(x(x(u[bd>>2]*u[dd+76>>2])+x(u[bd+4>>2]*u[dd+80>>2]))+x(u[bd+8>>2]*u[dd+84>>2]))-u[bd+16>>2])>x(9999999747378752e-20))){q[a>>2]=7;break d}while(1){dd=sd(a,gd,kd,q[((id<<2)+bd|0)+32>>2],r[(bd+id|0)+52|0],rd);if(!dd){break e}id=id+1|0;if(id>>>0<3){continue}break}break e}q[a>>2]=6;break d}if(!(dd&t[rd+8>>2]>2)){q[a>>2]=4;break d}dd=q[rd>>2];qa=q[rd+4>>2];q[dd+36>>2]=qa;o[dd+53|0]=2;q[qa+40>>2]=dd;o[qa+54|0]=1;qa=q[bd+48>>2];if(qa){q[qa+44>>2]=q[bd+44>>2];}qa=q[bd+44>>2];if(qa){q[qa+48>>2]=q[bd+48>>2];}if(q[a+18496>>2]==(bd|0)){q[a+18496>>2]=q[bd+48>>2];}q[a+18500>>2]=q[a+18500>>2]+ -1;q[bd+44>>2]=0;q[bd+48>>2]=q[a+18504>>2];qa=q[a+18504>>2];if(qa){q[qa+44>>2]=bd;}q[a+18504>>2]=bd;q[a+18508>>2]=q[a+18508>>2]+1;bd=q[a+18496>>2];hd=u[bd+16>>2];id=q[bd+48>>2];if(id){hd=x(hd*hd);while(1){cd=u[id+16>>2];cd=x(cd*cd);qa=cd<hd;bd=qa?id:bd;hd=qa?cd:hd;id=q[id+48>>2];if(id){continue}break}hd=u[bd+16>>2];}qa=q[bd+28>>2];vd=q[bd+24>>2];fd=q[bd+20>>2];cd=u[bd+12>>2];qd=u[bd+8>>2];jd=u[bd+4>>2];ed=u[bd>>2];if((gd|0)!=255){continue}}break}u[a+56>>2]=hd;u[a+40>>2]=ed;q[a+4>>2]=fd;u[a+52>>2]=cd;u[a+48>>2]=qd;u[a+44>>2]=jd;q[a+36>>2]=3;q[a+12>>2]=qa;q[a+8>>2]=vd;wd=x(ed*hd);ld=x(u[vd+16>>2]-wd);pd=x(jd*hd);md=x(u[qa+20>>2]-pd);ed=x(u[vd+20>>2]-pd);nd=x(u[qa+16>>2]-wd);cd=x(x(ld*md)-x(ed*nd));xd=x(cd*cd);td=x(qd*hd);jd=x(u[qa+24>>2]-td);od=x(ed*jd);ed=x(u[vd+24>>2]-td);cd=x(od-x(ed*md));od=x(cd*cd);cd=x(x(ed*nd)-x(ld*jd));hd=x(E(x(xd+x(od+x(cd*cd)))));u[a+20>>2]=hd;ld=x(u[qa+16>>2]-wd);md=x(u[fd+20>>2]-pd);ed=x(u[qa+20>>2]-pd);nd=x(u[fd+16>>2]-wd);cd=x(x(ld*md)-x(ed*nd));xd=x(cd*cd);jd=x(u[fd+24>>2]-td);od=x(ed*jd);ed=x(u[qa+24>>2]-td);cd=x(od-x(ed*md));od=x(cd*cd);cd=x(x(ed*nd)-x(ld*jd));qd=x(E(x(xd+x(od+x(cd*cd)))));u[a+24>>2]=qd;ld=x(u[fd+16>>2]-wd);md=x(u[vd+20>>2]-pd);ed=x(u[fd+20>>2]-pd);nd=x(u[vd+16>>2]-wd);cd=x(x(ld*md)-x(ed*nd));xd=x(cd*cd);jd=x(u[vd+24>>2]-td);od=x(ed*jd);ed=x(u[fd+24>>2]-td);cd=x(od-x(ed*md));od=x(cd*cd);cd=x(x(ed*nd)-x(ld*jd));cd=x(E(x(xd+x(od+x(cd*cd)))));ed=x(cd+x(hd+qd));u[a+28>>2]=cd/ed;u[a+24>>2]=qd/ed;u[a+20>>2]=hd/ed;a=q[a>>2];break a}q[a>>2]=8;ld=u[qa>>2];md=u[qa+4>>2];cd=u[qa+8>>2];q[a+52>>2]=0;nd=x(-cd);u[a+48>>2]=nd;jd=x(-md);u[a+44>>2]=jd;ed=x(-ld);u[a+40>>2]=ed;cd=x(E(x(x(x(ld*ld)+x(md*md))+x(cd*cd))));f:{if(!!(cd>x(0))){cd=x(x(1)/cd);u[a+48>>2]=cd*nd;u[a+44>>2]=cd*jd;u[a+40>>2]=cd*ed;break f}q[a+48>>2]=0;q[a+40>>2]=1065353216;q[a+44>>2]=0;}q[a+52>>2]=0;q[a+56>>2]=0;q[a+36>>2]=1;pa=q[fd>>2];q[a+20>>2]=1065353216;q[a+4>>2]=pa;a=8;}P=rd+16|0;return a}function Jj(a,pa,qa,sd,yd,zd){var Ad=0,Bd=x(0),Cd=x(0),Dd=x(0),Ed=x(0),Fd=x(0),Gd=x(0),Hd=x(0),Id=x(0),Jd=x(0),Kd=x(0),Ld=x(0),Md=x(0),Nd=x(0),Od=x(0),Pd=x(0),Qd=x(0),Rd=x(0),Sd=x(0),Td=x(0),Ud=0,Vd=x(0),Wd=0,Xd=x(0),Yd=x(0),Zd=x(0),_d=x(0),$d=0,ae=0;Ad=P-19040|0;P=Ad;q[zd>>2]=0;q[zd+4>>2]=0;q[zd+32>>2]=0;q[zd+24>>2]=0;q[zd+28>>2]=0;q[zd+16>>2]=0;q[zd+20>>2]=0;q[zd+8>>2]=0;q[zd+12>>2]=0;q[Ad+18916>>2]=qa;q[Ad+18912>>2]=a;Bd=u[sd+20>>2];Cd=u[sd+36>>2];Dd=u[pa+20>>2];Ed=u[pa+36>>2];Fd=u[sd+24>>2];Hd=u[pa+24>>2];Gd=u[sd+40>>2];Id=u[pa+40>>2];Jd=u[sd+32>>2];Kd=u[sd>>2];Ld=u[sd+16>>2];Md=u[sd+4>>2];Nd=u[pa+32>>2];Od=u[pa>>2];Pd=u[pa+16>>2];Rd=u[pa+4>>2];Qd=u[sd+8>>2];Sd=u[pa+8>>2];q[Ad+18964>>2]=0;q[Ad+18948>>2]=0;q[Ad+18932>>2]=0;Td=x(x(x(Sd*Qd)+x(Hd*Fd))+x(Id*Gd));u[Ad+18960>>2]=Td;Vd=x(x(x(Rd*Qd)+x(Dd*Fd))+x(Ed*Gd));u[Ad+18956>>2]=Vd;Fd=x(x(x(Od*Qd)+x(Pd*Fd))+x(Nd*Gd));u[Ad+18952>>2]=Fd;Gd=x(x(x(Sd*Md)+x(Hd*Bd))+x(Id*Cd));u[Ad+18944>>2]=Gd;Qd=x(x(x(Rd*Md)+x(Dd*Bd))+x(Ed*Cd));u[Ad+18940>>2]=Qd;Bd=x(x(x(Od*Md)+x(Pd*Bd))+x(Nd*Cd));u[Ad+18936>>2]=Bd;Cd=x(x(x(Kd*Sd)+x(Ld*Hd))+x(Jd*Id));u[Ad+18928>>2]=Cd;Dd=x(x(x(Kd*Rd)+x(Ld*Dd))+x(Jd*Ed));u[Ad+18924>>2]=Dd;Ed=x(x(x(Kd*Od)+x(Ld*Pd))+x(Jd*Nd));u[Ad+18920>>2]=Ed;Hd=u[pa+20>>2];Id=u[pa+36>>2];Jd=u[pa+24>>2];Kd=u[pa+52>>2];Ld=u[sd+52>>2];Md=u[pa+40>>2];Nd=u[pa+56>>2];Od=u[sd+56>>2];Pd=u[pa>>2];Rd=u[pa+16>>2];Sd=u[pa+32>>2];Xd=u[pa+4>>2];Yd=u[pa+8>>2];Zd=u[pa+48>>2];_d=u[sd+48>>2];q[Ad+19036>>2]=0;q[Ad+19028>>2]=0;q[Ad+19012>>2]=0;u[Ad+19008>>2]=Td;u[Ad+19004>>2]=Gd;u[Ad+19e3>>2]=Cd;q[Ad+18996>>2]=0;u[Ad+18992>>2]=Vd;u[Ad+18988>>2]=Qd;u[Ad+18984>>2]=Dd;q[Ad+18980>>2]=0;u[Ad+18976>>2]=Fd;u[Ad+18972>>2]=Bd;Bd=x(_d-Zd);Cd=x(Ld-Kd);Dd=x(Od-Nd);u[Ad+19024>>2]=x(x(Yd*Bd)+x(Jd*Cd))+x(Md*Dd);u[Ad+19020>>2]=x(x(Bd*Xd)+x(Cd*Hd))+x(Dd*Id);u[Ad+19016>>2]=x(x(Bd*Pd)+x(Cd*Rd))+x(Dd*Sd);q[Ad+19032>>2]=252;u[Ad+18968>>2]=Ed;a=Ad+18664|0;q[a>>2]=0;q[a+4>>2]=0;q[Ad+18656>>2]=0;q[Ad+18660>>2]=0;q[Ad+18892>>2]=0;q[Ad+18896>>2]=0;q[Ad+18904>>2]=2;q[Ad+18672>>2]=0;Bd=u[yd>>2];Cd=u[yd+4>>2];Dd=u[yd+8>>2];q[Ad+28>>2]=0;u[Ad+24>>2]=-Dd;u[Ad+20>>2]=-Cd;u[Ad+16>>2]=-Bd;a=gf(Ad+18528|0,Ad+18912|0,Ad+16|0)+ -1|0;a:{if(a>>>0>1){break a}b:{if(a-1){a=Ad+18520|0;q[a>>2]=0;q[a+4>>2]=0;a=Ad- -64|0;q[a>>2]=0;q[a+4>>2]=0;q[Ad+72>>2]=0;q[Ad+18512>>2]=0;q[Ad+18516>>2]=0;q[Ad+18508>>2]=0;q[Ad+16>>2]=9;q[Ad+56>>2]=0;q[Ad+60>>2]=0;sd=0;while(1){a=(w(0-sd|0,56)+Ad|0)+14296|0;q[a+4200>>2]=0;qa=q[Ad+18520>>2];q[a+4204>>2]=qa;a=a+4156|0;if(qa){q[qa+44>>2]=a;}q[Ad+18520>>2]=a;sd=sd+1|0;if((sd|0)!=256){continue}break}q[Ad+18524>>2]=256;Bd=u[yd>>2];Cd=u[yd+4>>2];Dd=u[yd+8>>2];q[Ad+12>>2]=0;u[Ad+8>>2]=-Dd;u[Ad+4>>2]=-Cd;u[Ad>>2]=-Bd;if((Ij(Ad+16|0,Ad+18528|0,Ad)|0)!=9){if(!q[Ad+52>>2]){Bd=x(0);Cd=x(0);Dd=x(0);break b}Dd=x(0);sd=0;Cd=x(0);Bd=x(0);while(1){a=q[Ad+19032>>2];qa=Ad;yd=q[Ad+19036>>2];Ud=q[Ad+18912>>2]+(yd>>1)|0;$d=Ud;Wd=(Ad+16|0)+(sd<<2)|0;ae=q[Wd+4>>2];if(yd&1){a=q[a+q[Ud>>2]>>2];}n[a](qa,$d,ae);Ed=u[Wd+20>>2];Dd=x(Dd+x(Ed*u[Ad+8>>2]));Cd=x(Cd+x(Ed*u[Ad+4>>2]));Bd=x(Bd+x(u[Ad>>2]*Ed));sd=sd+1|0;if(sd>>>0<t[Ad+52>>2]){continue}break}break b}q[zd>>2]=3;break a}q[zd>>2]=2;break a}Ud=1;q[zd>>2]=1;Ed=u[pa+48>>2];Fd=u[pa+8>>2];Hd=u[pa>>2];Gd=u[pa+4>>2];Id=u[pa+52>>2];Jd=u[pa+24>>2];Kd=u[pa+16>>2];Ld=u[pa+20>>2];Md=u[pa+56>>2];Nd=u[pa+40>>2];Od=u[pa+32>>2];Pd=u[pa+36>>2];q[zd+16>>2]=0;u[zd+12>>2]=Md+x(x(x(Bd*Od)+x(Cd*Pd))+x(Dd*Nd));u[zd+8>>2]=Id+x(x(x(Bd*Kd)+x(Cd*Ld))+x(Dd*Jd));u[zd+4>>2]=Ed+x(x(x(Bd*Hd)+x(Cd*Gd))+x(Dd*Fd));Id=u[pa+48>>2];Jd=u[pa+8>>2];Kd=u[pa>>2];Ld=u[pa+4>>2];Md=u[pa+52>>2];Nd=u[pa+24>>2];Od=u[pa+16>>2];Pd=u[pa+20>>2];Rd=u[pa+56>>2];Qd=u[pa+40>>2];Sd=u[pa+32>>2];Td=u[pa+36>>2];Fd=u[Ad+60>>2];Hd=u[Ad- -64>>2];Gd=u[Ad+56>>2];Ed=u[Ad+72>>2];q[zd+48>>2]=0;q[zd+32>>2]=0;u[zd+52>>2]=-Ed;u[zd+44>>2]=-Hd;u[zd+40>>2]=-Fd;u[zd+36>>2]=-Gd;Bd=x(Bd-x(Gd*Ed));Cd=x(Cd-x(Ed*Fd));Dd=x(Dd-x(Ed*Hd));u[zd+28>>2]=Rd+x(x(x(Sd*Bd)+x(Td*Cd))+x(Qd*Dd));u[zd+24>>2]=Md+x(x(x(Bd*Od)+x(Cd*Pd))+x(Dd*Nd));u[zd+20>>2]=Id+x(x(x(Bd*Kd)+x(Cd*Ld))+x(Dd*Jd));}P=Ad+19040|0;return Ud}function Kj(a,pa,qa,sd,yd,zd){var be=0,ce=x(0),de=x(0),ee=x(0),fe=x(0),ge=x(0),he=x(0),ie=x(0),je=x(0),ke=x(0),le=x(0),me=x(0),ne=0,oe=0,pe=0,qe=x(0),re=x(0),se=x(0),te=x(0),ue=x(0),ve=x(0),we=x(0),xe=0,ye=x(0),ze=x(0),Ae=x(0),Be=x(0),Ce=0;be=P-96|0;P=be;q[be+92>>2]=sd;q[be+88>>2]=qa;q[be+84>>2]=pa;q[be+80>>2]=a;ce=u[sd>>2];ee=u[a>>2];de=u[sd+4>>2];qe=u[a+4>>2];he=u[sd+8>>2];re=u[a+8>>2];q[be+44>>2]=0;ie=x(re-he);u[be+40>>2]=ie;je=x(qe-de);u[be+36>>2]=je;le=x(ee-ce);u[be+32>>2]=le;se=u[pa>>2];te=u[pa+4>>2];ye=u[pa+8>>2];q[be+60>>2]=0;ke=x(ye-he);u[be+56>>2]=ke;ue=x(te-de);u[be+52>>2]=ue;ve=x(se-ce);u[be+48>>2]=ve;ze=u[qa>>2];Ae=u[qa+4>>2];Be=u[qa+8>>2];q[be+76>>2]=0;we=x(Be-he);u[be+72>>2]=we;me=x(Ae-de);u[be+68>>2]=me;fe=x(ze-ce);u[be+64>>2]=fe;ge=x(-1);ke=x(x(x(x(le*ue)*we)+x(x(x(x(x(je*ke)*fe)+x(x(ie*ve)*me))-x(x(le*ke)*me))-x(x(je*ve)*we)))-x(x(ie*ue)*fe));a:{if(ke==x(0)|ke!=ke){break a}ue=x(qe-te);ve=x(se-ze);se=x(ee-se);te=x(te-Ae);me=x(re*x(x(ue*ve)-x(se*te)));fe=ee;ee=x(re-ye);re=x(ye-Be);if(!(x(ke*x(me+x(x(fe*x(x(ee*te)-x(ue*re)))+x(qe*x(x(se*re)-x(ee*ve))))))<=x(0))){break a}q[be+24>>2]=0;q[be+16>>2]=0;q[be+20>>2]=0;q[be+12>>2]=0;while(1){ne=xe<<2;oe=q[ne+4912>>2];pe=(be+32|0)+(oe<<4)|0;ee=u[pe+8>>2];qe=u[pe+4>>2];fe=x(x(x(je*ee)-x(ie*qe))*ce);ce=u[pe>>2];b:{if(!(x(ke*x(x(fe+x(de*x(x(ie*ce)-x(ee*le))))+x(x(x(qe*le)-x(je*ce))*he)))>x(0))){break b}pe=oe<<2;ce=ff(q[ne+(be+80|0)>>2],q[pe+(be+80|0)>>2],sd,be+16|0,be+12|0);if(ce<ge^1?!(ge<x(0)):0){break b}Ce=1<<oe;oe=q[be+12>>2];q[zd>>2]=((Ce&oe<<30>>31)+(oe<<1&8)|0)+(0-(oe&1)&1<<xe);q[yd+ne>>2]=q[be+16>>2];q[yd+pe>>2]=q[be+20>>2];q[(q[pe+4912>>2]<<2)+yd>>2]=0;q[yd+12>>2]=q[be+24>>2];ge=ce;}xe=xe+1|0;if((xe|0)!=3){ne=(be+32|0)+(xe<<4)|0;le=u[ne>>2];ie=u[ne+8>>2];je=u[ne+4>>2];he=u[sd+8>>2];de=u[sd+4>>2];ce=u[sd>>2];continue}break}if(!(ge<x(0))){break a}q[zd>>2]=15;ge=u[qa+4>>2];ce=u[pa+8>>2];de=u[sd>>2];he=u[qa+8>>2];ie=u[pa>>2];je=u[sd+4>>2];me=x(x(x(ge*ce)*de)+x(x(he*ie)*je));fe=ce;ce=u[qa>>2];ee=x(ge*ie);ge=u[sd+8>>2];ee=x(x(me-x(je*x(fe*ce)))-x(ee*ge));fe=ge;ge=u[pa+4>>2];ge=x(x(x(ee+x(fe*x(ce*ge)))-x(de*x(he*ge)))/ke);u[yd>>2]=ge;ce=u[a+4>>2];de=u[qa+8>>2];he=u[sd>>2];ie=u[a+8>>2];je=u[qa>>2];le=u[sd+4>>2];me=x(x(x(ce*de)*he)+x(x(ie*je)*le));fe=de;de=u[a>>2];ee=x(ce*je);ce=u[sd+8>>2];ee=x(x(me-x(le*x(fe*de)))-x(ee*ce));fe=ce;ce=u[qa+4>>2];ce=x(x(x(ee+x(fe*x(de*ce)))-x(he*x(ie*ce)))/ke);u[yd+4>>2]=ce;de=u[pa+4>>2];he=u[a+8>>2];ie=u[sd>>2];je=u[pa+8>>2];le=u[a>>2];ee=u[sd+4>>2];we=x(x(x(de*he)*ie)+x(x(je*le)*ee));fe=he;he=u[pa>>2];me=x(de*le);de=u[sd+8>>2];ee=x(x(we-x(ee*x(fe*he)))-x(me*de));fe=de;de=u[a+4>>2];ke=x(x(x(ee+x(fe*x(he*de)))-x(ie*x(je*de)))/ke);u[yd+8>>2]=ke;u[yd+12>>2]=x(1)-x(x(ge+ce)+ke);ge=x(0);}P=be+96|0;return ge}function Lj(a,pa,qa,sd,yd,zd){var De=0,Ee=x(0),Fe=x(0),Ge=x(0),He=x(0),Ie=x(0),Je=x(0),Ke=x(0),Le=x(0),Me=x(0),Ne=x(0),Oe=0,Pe=x(0),Qe=x(0),Re=x(0),Se=x(0),Te=x(0),Ue=x(0),Ve=x(0),We=x(0),Xe=x(0),Ye=x(0),Ze=0,_e=0,$e=x(0),af=x(0),bf=x(0),cf=x(0),df=0;De=P-544|0;P=De;q[zd>>2]=0;q[zd+4>>2]=0;q[zd+32>>2]=0;q[zd+24>>2]=0;q[zd+28>>2]=0;q[zd+16>>2]=0;q[zd+20>>2]=0;q[zd+8>>2]=0;q[zd+12>>2]=0;q[De+388>>2]=qa;q[De+384>>2]=a;Ge=u[sd+20>>2];He=u[sd+36>>2];Ie=u[pa+20>>2];Je=u[pa+36>>2];Ke=u[sd+24>>2];Ee=u[pa+24>>2];Fe=u[sd+40>>2];Le=u[pa+40>>2];Me=u[sd+32>>2];Ne=u[sd>>2];Pe=u[sd+16>>2];Qe=u[sd+4>>2];Re=u[pa+32>>2];Te=u[pa>>2];Ue=u[pa+16>>2];Ve=u[pa+4>>2];Se=u[sd+8>>2];We=u[pa+8>>2];q[De+436>>2]=0;q[De+420>>2]=0;q[De+404>>2]=0;Xe=x(x(x(We*Se)+x(Ee*Ke))+x(Le*Fe));u[De+432>>2]=Xe;Ye=x(x(x(Ve*Se)+x(Ie*Ke))+x(Je*Fe));u[De+428>>2]=Ye;Ke=x(x(x(Te*Se)+x(Ue*Ke))+x(Re*Fe));u[De+424>>2]=Ke;Fe=x(x(x(We*Qe)+x(Ee*Ge))+x(Le*He));u[De+416>>2]=Fe;Se=x(x(x(Ve*Qe)+x(Ie*Ge))+x(Je*He));u[De+412>>2]=Se;Ge=x(x(x(Te*Qe)+x(Ue*Ge))+x(Re*He));u[De+408>>2]=Ge;He=x(x(x(Ne*We)+x(Pe*Ee))+x(Me*Le));u[De+400>>2]=He;Ie=x(x(x(Ne*Ve)+x(Pe*Ie))+x(Me*Je));u[De+396>>2]=Ie;Je=x(x(x(Ne*Te)+x(Pe*Ue))+x(Me*Re));u[De+392>>2]=Je;Ee=u[pa+20>>2];Le=u[pa+36>>2];Me=u[pa+24>>2];Ne=u[pa+52>>2];Pe=u[sd+52>>2];Qe=u[pa+40>>2];Re=u[pa+56>>2];Te=u[sd+56>>2];Ue=u[pa>>2];Ve=u[pa+16>>2];We=u[pa+32>>2];$e=u[pa+4>>2];af=u[pa+8>>2];bf=u[pa+48>>2];cf=u[sd+48>>2];q[De+508>>2]=0;q[De+500>>2]=0;q[De+484>>2]=0;u[De+480>>2]=Xe;u[De+476>>2]=Fe;u[De+472>>2]=He;q[De+468>>2]=0;u[De+464>>2]=Ye;u[De+460>>2]=Se;u[De+456>>2]=Ie;q[De+452>>2]=0;u[De+448>>2]=Ke;u[De+444>>2]=Ge;Ge=x(cf-bf);He=x(Pe-Ne);Ie=x(Te-Re);u[De+496>>2]=x(x(af*Ge)+x(Me*He))+x(Qe*Ie);u[De+492>>2]=x(x(Ge*$e)+x(He*Ee))+x(Ie*Le);u[De+488>>2]=x(x(Ge*Ue)+x(He*Ve))+x(Ie*We);q[De+504>>2]=251;u[De+440>>2]=Je;q[De+136>>2]=0;q[De+140>>2]=0;q[De+128>>2]=0;q[De+132>>2]=0;q[De+364>>2]=0;q[De+368>>2]=0;q[De+376>>2]=2;q[De+144>>2]=0;a:{b:{a=gf(De,De+384|0,yd);if(!a){Oe=q[De+372>>2];if(!q[Oe+32>>2]){Ge=x(0);He=x(0);Ie=x(0);Je=x(0);Ke=x(0);Ee=x(0);break b}Ee=x(0);sd=0;Ke=x(0);Je=x(0);Ie=x(0);He=x(0);Ge=x(0);while(1){qa=sd<<2;yd=qa+Oe|0;Fe=u[yd+16>>2];a=q[De+504>>2];Oe=De+528|0;Ze=q[De+508>>2];_e=q[De+384>>2]+(Ze>>1)|0;df=_e;yd=q[yd>>2];if(Ze&1){a=q[a+q[_e>>2]>>2];}n[a](Oe,df,yd);yd=q[De+508>>2];a=q[De+388>>2]+(yd>>1)|0;Pe=x(Fe*u[De+536>>2]);Qe=x(Fe*u[De+532>>2]);Re=x(Fe*u[De+528>>2]);qa=q[qa+q[De+372>>2]>>2];Le=u[qa+8>>2];Me=u[qa>>2];Ne=x(-u[qa+4>>2]);Oe=q[De+504>>2];Oe=yd&1?q[q[a>>2]+Oe>>2]:Oe;Ee=x(Ee+Pe);Ke=x(Ke+Qe);Je=x(Je+Re);q[De+524>>2]=0;u[De+520>>2]=x(x(u[De+428>>2]*Ne)-x(Me*u[De+424>>2]))-x(Le*u[De+432>>2]);u[De+516>>2]=x(x(u[De+412>>2]*Ne)-x(Me*u[De+408>>2]))-x(Le*u[De+416>>2]);u[De+512>>2]=x(x(u[De+396>>2]*Ne)-x(Me*u[De+392>>2]))-x(Le*u[De+400>>2]);n[Oe](De+528|0,a,De+512|0);Le=u[De+528>>2];Me=u[De+532>>2];Ne=u[De+536>>2];Ie=x(Ie+x(Fe*x(x(x(x(Le*u[De+472>>2])+x(Me*u[De+476>>2]))+x(Ne*u[De+480>>2]))+u[De+496>>2])));He=x(He+x(Fe*x(x(x(x(Le*u[De+456>>2])+x(Me*u[De+460>>2]))+x(Ne*u[De+464>>2]))+u[De+492>>2])));Ge=x(Ge+x(Fe*x(x(x(x(Le*u[De+440>>2])+x(Me*u[De+444>>2]))+x(Ne*u[De+448>>2]))+u[De+488>>2])));sd=sd+1|0;Oe=q[De+372>>2];if(sd>>>0<t[Oe+32>>2]){continue}break}break b}q[zd>>2]=(a|0)==1?1:2;break a}Fe=u[pa+48>>2];Le=u[pa+8>>2];Me=u[pa>>2];Ne=u[pa+4>>2];Pe=u[pa+52>>2];Qe=u[pa+24>>2];Re=u[pa+16>>2];Te=u[pa+20>>2];Ue=u[pa+56>>2];Ve=u[pa+40>>2];Se=u[pa+32>>2];We=u[pa+36>>2];q[zd+16>>2]=0;u[zd+12>>2]=Ue+x(x(x(Je*Se)+x(Ke*We))+x(Ee*Ve));u[zd+8>>2]=Pe+x(x(x(Je*Re)+x(Ke*Te))+x(Ee*Qe));u[zd+4>>2]=Fe+x(x(x(Je*Me)+x(Ke*Ne))+x(Ee*Le));Le=u[pa+48>>2];Me=u[pa+8>>2];Ne=u[pa>>2];Pe=u[pa+4>>2];Qe=u[pa+52>>2];Re=u[pa+24>>2];Te=u[pa+16>>2];Ue=u[pa+20>>2];Ve=u[pa+56>>2];Se=u[pa+40>>2];We=u[pa+32>>2];Xe=u[pa+36>>2];Je=x(Je-Ge);Ke=x(Ke-He);Ee=x(Ee-Ie);Fe=x(E(x(x(x(Je*Je)+x(Ke*Ke))+x(Ee*Ee))));u[zd+52>>2]=Fe;q[zd+48>>2]=0;q[zd+32>>2]=0;Ye=Ee;Ee=Fe>x(9999999747378752e-20)?x(x(1)/Fe):x(1);u[zd+44>>2]=Ye*Ee;u[zd+40>>2]=Ke*Ee;u[zd+36>>2]=Je*Ee;u[zd+28>>2]=Ve+x(x(x(Ge*We)+x(He*Xe))+x(Ie*Se));u[zd+24>>2]=Qe+x(x(x(Ge*Te)+x(He*Ue))+x(Ie*Re));u[zd+20>>2]=Le+x(x(x(Ge*Ne)+x(He*Pe))+x(Ie*Me));Oe=1;}P=De+544|0;return Oe}function Mj(a,pa){a=a|0;pa=pa|0;var qa=0;qa=pa;pa=q[a+8>>2];n[q[pa+64>>2]](qa,pa,q[a+4>>2]);return 0}function Nj(a){a=a|0;if(!q[a+12>>2]){return 0}return q[a+20>>2]}function Oj(a,pa){a=a|0;pa=pa|0;return q[q[a+20>>2]+(pa<<2)>>2]}function Pj(a){a=a|0;return q[a+12>>2]}function Qj(a,pa){a=a|0;pa=pa|0;var sd=0;a:{if(!pa){break a}a=q[a+68>>2];sd=q[a+16>>2];if(sd>>>0>pa>>>0|w(q[a>>2],q[a+4>>2])+sd>>>0<=pa>>>0){break a}q[pa>>2]=q[a+12>>2];q[a+12>>2]=pa;q[a+8>>2]=q[a+8>>2]+1;return}if(pa){q[6658]=q[6658]+1;n[q[5256]](pa);}}function Rj(a,pa){a=a|0;pa=pa|0;var yd=0;a=q[a+68>>2];yd=q[a+12>>2];if(yd){q[a+12>>2]=q[yd>>2];q[a+8>>2]=q[a+8>>2]+ -1;return yd|0}q[6657]=q[6657]+1;return n[q[5255]](pa,16)|0}function Sj(a,pa,zd,ef){a=a|0;pa=pa|0;zd=zd|0;ef=ef|0;var ff=0;ff=P-16|0;P=ff;q[ff+8>>2]=a;q[ff+4>>2]=zd;q[ff>>2]=4820;n[q[q[pa>>2]+48>>2]](pa,ff,ef);P=ff+16|0;}function Tj(a,pa,zd){a=a|0;pa=pa|0;zd=zd|0;var ef=0;a:{b:{a=q[pa+220>>2]+ -2|0;if(a>>>0>3){break b}c:{switch(a-1|0){case 0:case 1:break b;default:break c}}ef=q[zd+220>>2]+ -2|0;if(ef>>>0>3){break b}a=0;switch(ef-1|0){case 0:case 1:break b;default:break a}}d:{if(q[pa+280>>2]){if(!n[q[q[pa>>2]+12>>2]](pa,zd)){break d}}a=1;if(!q[zd+280>>2]){break a}if(n[q[q[zd>>2]+12>>2]](zd,pa)){break a}}a=0;}return a|0}function Uj(a,pa,zd){a=a|0;pa=pa|0;zd=zd|0;a=0;pa=q[pa+204>>2];a:{if(pa&4){break a}zd=q[zd+204>>2];if(zd&4){break a}if(!(pa&3)){return 1}a=!(zd&3);}return a|0}function Vj(a,pa,zd,gf,hf){a=a|0;pa=pa|0;zd=zd|0;gf=gf|0;hf=hf|0;var jf=0,kf=0;jf=P-16|0;P=jf;q[jf+12>>2]=gf;q[jf+8>>2]=a;gf=q[q[zd+4>>2]+4>>2];kf=q[q[pa+4>>2]+4>>2];a:{if((hf|0)==1){a=q[((w(kf,144)+a|0)+(gf<<2)|0)+76>>2];a=n[q[q[a>>2]+8>>2]](a,jf+8|0,pa,zd)|0;break a}a=q[((w(kf,144)+a|0)+(gf<<2)|0)+5260>>2];a=n[q[q[a>>2]+8>>2]](a,jf+8|0,pa,zd)|0;}P=jf+16|0;return a|0}function Wj(a,pa){a=a|0;pa=pa|0;var zd=0,gf=0,hf=0,lf=0,mf=0,nf=0,of=0;q[5783]=q[5783]+ -1;n[q[q[a>>2]+20>>2]](a,pa);zd=q[pa+864>>2];hf=zd<<2;lf=q[a+20>>2];gf=hf+lf|0;nf=q[gf>>2];of=gf;gf=q[a+12>>2]+ -1|0;mf=gf<<2;q[of>>2]=q[lf+mf>>2];q[q[a+20>>2]+mf>>2]=nf;q[q[q[a+20>>2]+hf>>2]+864>>2]=zd;q[a+12>>2]=gf;a:{if(!pa){break a}a=q[a+72>>2];zd=q[a+16>>2];if(zd>>>0>pa>>>0|zd+w(q[a>>2],q[a+4>>2])>>>0<=pa>>>0){break a}q[pa>>2]=q[a+12>>2];q[a+12>>2]=pa;q[a+8>>2]=q[a+8>>2]+1;return}if(pa){q[6658]=q[6658]+1;n[q[5256]](pa);}}function Xj(a,pa){a=a|0;pa=pa|0;var pf=0,qf=0,rf=0,sf=0;a=P-16|0;P=a;pf=q[pa+844>>2];if((pf|0)>=1){while(1){pf=w(qf,208)+pa|0;rf=q[pf+120>>2];a:{if(!rf){break a}sf=q[5779];if(!sf){break a}n[sf](rf)|0;q[pf+120>>2]=0;}qf=qf+1|0;pf=q[pa+844>>2];if((qf|0)<(pf|0)){continue}break}}b:{if(!pf){break b}pf=q[5782];if(!pf){break b}q[a+12>>2]=pa;n[pf](a+12|0);}q[pa+844>>2]=0;P=a+16|0;}function Yj(a,pa,tf){a=a|0;pa=pa|0;tf=tf|0;var uf=0,vf=0,wf=0,xf=x(0),yf=x(0),zf=0,Af=0;wf=P-16|0;P=wf;q[5783]=q[5783]+1;if(q[a+4>>2]&2){vf=q[pa+192>>2];xf=x(n[q[q[vf>>2]+20>>2]](vf,u[5249]));u[wf+12>>2]=xf;vf=q[tf+192>>2];yf=x(n[q[q[vf>>2]+20>>2]](vf,u[5249]));u[wf+8>>2]=yf;vf=xf<yf?wf+12|0:wf+8|0;}else {vf=20996;}zf=q[vf>>2];xf=u[tf+184>>2];yf=u[pa+184>>2];uf=q[a+72>>2];vf=q[uf+12>>2];a:{b:{if(vf){q[uf+12>>2]=q[vf>>2];q[uf+8>>2]=q[uf+8>>2]+ -1;break b}vf=0;if(r[a+4|0]&4){break a}q[6657]=q[6657]+1;vf=n[q[5255]](868,16)|0;}q[vf>>2]=1025;q[vf+168>>2]=0;uf=vf;q[uf+160>>2]=0;q[uf+164>>2]=0;q[uf+152>>2]=0;q[uf+156>>2]=0;q[uf+144>>2]=0;q[uf+148>>2]=0;q[uf+136>>2]=0;q[uf+140>>2]=0;q[uf+128>>2]=0;q[uf+132>>2]=0;q[uf+120>>2]=0;q[uf+124>>2]=0;q[uf+328>>2]=0;q[uf+332>>2]=0;q[uf+336>>2]=0;q[uf+340>>2]=0;q[uf+344>>2]=0;q[uf+348>>2]=0;q[uf+352>>2]=0;q[uf+356>>2]=0;q[uf+360>>2]=0;q[uf+364>>2]=0;q[uf+368>>2]=0;q[uf+372>>2]=0;q[uf+376>>2]=0;q[uf+536>>2]=0;q[uf+540>>2]=0;q[uf+544>>2]=0;q[uf+548>>2]=0;q[uf+552>>2]=0;q[uf+556>>2]=0;q[uf+560>>2]=0;q[uf+564>>2]=0;q[uf+568>>2]=0;q[uf+572>>2]=0;q[uf+576>>2]=0;q[uf+580>>2]=0;q[uf+584>>2]=0;q[uf+792>>2]=0;q[uf+784>>2]=0;q[uf+788>>2]=0;q[uf+776>>2]=0;q[uf+780>>2]=0;q[uf+768>>2]=0;q[uf+772>>2]=0;q[uf+760>>2]=0;q[uf+764>>2]=0;q[uf+752>>2]=0;q[uf+756>>2]=0;q[uf+744>>2]=0;q[uf+748>>2]=0;q[uf+836>>2]=pa;q[uf+840>>2]=tf;q[uf+844>>2]=0;q[uf+848>>2]=zf;u[uf+852>>2]=yf<xf?yf:xf;tf=q[a+12>>2];q[uf+864>>2]=tf;c:{if(q[a+16>>2]!=(tf|0)){break c}Af=tf?tf<<1:1;if((tf|0)>=(Af|0)){break c}d:{if(!Af){zf=0;break d}q[6657]=q[6657]+1;zf=n[q[5255]](Af<<2,16)|0;tf=q[a+12>>2];}if((tf|0)>=1){pa=0;while(1){uf=pa<<2;q[uf+zf>>2]=q[q[a+20>>2]+uf>>2];pa=pa+1|0;if((tf|0)!=(pa|0)){continue}break}}pa=q[a+20>>2];if(pa){if(r[a+24|0]){if(pa){q[6658]=q[6658]+1;n[q[5256]](pa);}tf=q[a+12>>2];}q[a+20>>2]=0;}q[a+20>>2]=zf;q[a+16>>2]=Af;o[a+24|0]=1;}q[q[a+20>>2]+(tf<<2)>>2]=vf;q[a+12>>2]=tf+1;}P=wf+16|0;return vf|0}function Zj(a){a=a|0;var pa=0;q[a>>2]=4712;pa=q[a+20>>2];if(pa){if(r[a+24|0]){if(pa){q[6658]=q[6658]+1;n[q[5256]](pa);}}q[a+20>>2]=0;}q[a+20>>2]=0;q[a+12>>2]=0;q[a+16>>2]=0;o[a+24|0]=1;aa(a);}function _j(a){a=a|0;var tf=0;q[a>>2]=4712;tf=q[a+20>>2];if(tf){if(r[a+24|0]){if(tf){q[6658]=q[6658]+1;n[q[5256]](tf);}}q[a+20>>2]=0;}q[a+20>>2]=0;q[a+12>>2]=0;q[a+16>>2]=0;o[a+24|0]=1;return a|0}function $j(a,Bf,Cf){a=a|0;Bf=Bf|0;Cf=Cf|0;var Df=0,Ef=0,Ff=0,Gf=0,Hf=x(0);Df=P-96|0;P=Df;Ef=q[q[a>>2]>>2];Ff=q[q[a+4>>2]>>2];a:{if(!n[q[q[Bf>>2]+24>>2]](Bf,Ef,Ff)){break a}Gf=q[Ef+192>>2];q[Df+88>>2]=-1;q[Df+92>>2]=-1;q[Df+84>>2]=Ef+4;q[Df+80>>2]=Ef;q[Df+76>>2]=Gf;q[Df+72>>2]=0;Gf=q[Ff+192>>2];q[Df+64>>2]=-1;q[Df+68>>2]=-1;q[Df+60>>2]=Ff+4;q[Df+56>>2]=Ff;q[Df+52>>2]=Gf;q[Df+48>>2]=0;if(!q[a+8>>2]){Bf=n[q[q[Bf>>2]+8>>2]](Bf,Df+72|0,Df+48|0,0,1)|0;q[a+8>>2]=Bf;if(!Bf){break a}}Bf=Df+8|0;q[Bf+32>>2]=0;q[Bf+12>>2]=Df+48;q[Bf+8>>2]=Df+72;q[Bf+4>>2]=0;q[Bf>>2]=7820;a=q[a+8>>2];if(q[Cf+8>>2]==1){n[q[q[a>>2]+8>>2]](a,Df+72|0,Df+48|0,Cf,Bf);break a}Hf=x(n[q[q[a>>2]+12>>2]](a,Ef,Ff,Cf,Bf));if(!(u[Cf+12>>2]>Hf)){break a}u[Cf+12>>2]=Hf;}P=Df+96|0;}function ak(a,Bf){var Cf=0,If=0,Jf=0;q[a+4>>2]=2;q[a>>2]=4712;q[a+10444>>2]=Bf;q[a+64>>2]=231;o[a+24|0]=1;q[a+20>>2]=0;q[a+60>>2]=0;q[a+28>>2]=7820;q[a+12>>2]=0;q[a+16>>2]=0;q[a+68>>2]=n[q[q[Bf>>2]+12>>2]](Bf);q[a+72>>2]=n[q[q[Bf>>2]+8>>2]](Bf);while(1){Bf=0;while(1){If=(w(Cf,144)+a|0)+(Bf<<2)|0;Jf=q[a+10444>>2];q[If+76>>2]=n[q[q[Jf>>2]+16>>2]](Jf,Cf,Bf);Jf=If+5260|0;If=q[a+10444>>2];q[Jf>>2]=n[q[q[If>>2]+20>>2]](If,Cf,Bf);Bf=Bf+1|0;if((Bf|0)!=36){continue}break}Cf=Cf+1|0;if((Cf|0)!=36){continue}break}}function bk(a,Bf,Kf,Lf,Mf,Nf){var Of=x(0),Pf=x(0),Qf=0,Rf=x(0),Sf=x(0),Tf=x(0),Uf=x(0),Vf=x(0),Wf=x(0),Xf=x(0),Yf=x(0),Zf=x(0),_f=x(0),$f=0,ag=0,bg=0,cg=0,dg=x(0),eg=0,fg=0,gg=0,hg=0,ig=0;Qf=P-16|0;Rf=u[Lf>>2];Of=u[Kf>>2];Sf=x(x(Rf+Of)*x(.5));Pf=x(u[Bf>>2]-Sf);Rf=x(Rf-Of);_f=x(Rf*x(.5));$f=Pf>_f;Rf=x(Rf*x(-.5));ag=Pf<Rf;Of=u[Lf+4>>2];Tf=u[Kf+4>>2];Uf=x(x(Of+Tf)*x(.5));Xf=x(u[Bf+4>>2]-Uf);Of=x(Of-Tf);Vf=x(Of*x(-.5));bg=Xf<Vf;Tf=x(Of*x(.5));cg=Xf>Tf;Of=u[Lf+8>>2];Wf=u[Kf+8>>2];Zf=x(x(Of+Wf)*x(.5));Yf=x(u[Bf+8>>2]-Zf);Of=x(Of-Wf);dg=x(Of*x(-.5));Lf=Yf<dg;Wf=x(Of*x(.5));Bf=ag|$f<<3|bg<<1|cg<<4|Lf<<2|(Yf>Wf)<<5;Sf=x(u[a>>2]-Sf);Kf=Sf>_f;eg=Sf<Rf;Uf=x(u[a+4>>2]-Uf);fg=Uf<Vf;gg=Uf>Tf;Vf=x(u[a+8>>2]-Zf);hg=Vf<dg;ig=eg|Kf<<3|fg<<1|gg<<4|hg<<2|(Vf>Wf)<<5;if(!(Bf&ig)){Rf=u[Mf>>2];q[Qf+8>>2]=0;q[Qf+12>>2]=0;q[Qf>>2]=0;q[Qf+4>>2]=0;Zf=x(Pf-Sf);Of=x(-Sf);a=Qf|4;a:{if(!!eg){Pf=x(x(Of-_f)/Zf);if(!(Pf>=x(0))){Pf=x(0);break a}q[a>>2]=0;q[a+4>>2]=0;q[a+8>>2]=0;q[Qf>>2]=1065353216;break a}Pf=x(0);if(!ag){break a}Of=x(x(Of-_f)/Zf);if(!(Of<Rf)){break a}Rf=Of;}Xf=x(Xf-Uf);Of=x(-Uf);b:{c:{if(fg){Of=x(x(Of-Tf)/Xf);if(!(Pf<=Of)){break c}q[Qf+8>>2]=0;q[Qf+12>>2]=0;q[Qf>>2]=0;q[Qf+4>>2]=1065353216;break b}if(!bg){break c}Of=x(x(Of-Tf)/Xf);if(!(Of<Rf)){break c}Rf=Of;}Of=Pf;}Yf=x(Yf-Vf);Pf=x(-Vf);d:{e:{if(!!hg){Pf=x(x(Pf-Wf)/Yf);if(!(Of<=Pf)){break e}q[Qf+8>>2]=1065353216;q[Qf+12>>2]=0;q[Qf>>2]=0;q[Qf+4>>2]=0;break d}if(!Lf){break e}Pf=x(x(Pf-Wf)/Yf);if(!(Pf<Rf)){break e}Rf=Pf;}Pf=Of;}f:{g:{if(!!Kf){Of=x(x(_f-Sf)/Zf);if(!(Pf<=Of)){break g}q[a>>2]=0;q[a+4>>2]=0;q[a+8>>2]=0;q[Qf>>2]=-1082130432;break f}if(!$f){break g}Of=x(x(_f-Sf)/Zf);if(!(Of<Rf)){break g}Rf=Of;}Of=Pf;}h:{i:{if(!!gg){Pf=x(x(Tf-Uf)/Xf);if(!(Of<=Pf)){break i}q[Qf+8>>2]=0;q[Qf+12>>2]=0;q[Qf>>2]=0;q[Qf+4>>2]=-1082130432;break h}if(!cg){break i}Pf=x(x(Tf-Uf)/Xf);if(!(Pf<Rf)){break i}Rf=Pf;}Pf=Of;}j:{k:{if(ig&32){Of=x(x(Wf-Vf)/Yf);if(!(Pf<=Of)){break k}q[Qf+8>>2]=-1082130432;q[Qf+12>>2]=0;q[Qf>>2]=0;q[Qf+4>>2]=0;break j}if(!(Bf&32)){break k}Of=x(x(Wf-Vf)/Yf);if(!(Of<Rf)){break k}Rf=Of;}Of=Pf;}if(!!(Of<=Rf)){u[Mf>>2]=Of;a=q[Qf+12>>2];q[Nf+8>>2]=q[Qf+8>>2];q[Nf+12>>2]=a;a=q[Qf+4>>2];q[Nf>>2]=q[Qf>>2];q[Nf+4>>2]=a;return 1}}return 0}function ck(a,Bf,Kf,Lf){a=a|0;Bf=Bf|0;Kf=Kf|0;Lf=Lf|0;var Mf=0,Nf=0,jg=0,kg=0,lg=0;lg=q[Bf>>2];Lf=Lf?Lf:q[a+188>>2];Mf=q[a+328>>2];a:{if((Mf|0)<1){break a}jg=q[a+336>>2];while(1){kg=(Nf<<2)+jg|0;if(q[kg>>2]!=(lg|0)){Nf=Nf+1|0;if((Mf|0)!=(Nf|0)){continue}break a}break}if((Nf|0)>=(Mf|0)){break a}Mf=Mf+ -1|0;q[kg>>2]=q[(Mf<<2)+jg>>2];q[a+328>>2]=Mf;a=q[a+344>>2];n[q[q[a>>2]+12>>2]](a,Lf,Bf,Kf)|0;}}function dk(a,Bf,Kf,Lf,mg){a=a|0;Bf=Bf|0;Kf=Kf|0;Lf=x(Lf);mg=mg|0;var ng=0;ng=P-48|0;P=ng;q[ng+44>>2]=a;q[ng+40>>2]=Bf;q[ng+36>>2]=Kf;u[ng+32>>2]=Lf;q[ng+28>>2]=mg;a=q[ng+44>>2];DB(a);q[a>>2]=1032;q[(P-16|0)+12>>2]=a+60;q[(P-16|0)+12>>2]=a+76;q[(P-16|0)+12>>2]=a+92;q[(P-16|0)+12>>2]=a+112;Fb(a+128|0);q[(P-16|0)+12>>2]=a+152;q[a+176>>2]=q[ng+28>>2];u[a+56>>2]=.019999999552965164;u[ng+16>>2]=0;u[ng+12>>2]=0;u[ng+8>>2]=0;ca(a+60|0,ng+16|0,ng+12|0,ng+8|0);o[a+170|0]=1;q[a+8>>2]=q[ng+40>>2];u[a+52>>2]=u[ng+32>>2];u[a+48>>2]=0;q[a+12>>2]=q[ng+36>>2];o[a+171|0]=1;u[a+172>>2]=0;u[a+16>>2]=0;u[a+20>>2]=0;u[a+44>>2]=29.399999618530273;u[a+24>>2]=55;u[a+28>>2]=10;o[a+168|0]=0;o[a+169|0]=0;o[a+180|0]=1;Bf=P-16|0;u[Bf+12>>2]=45;zh(a,x(u[Bf+12>>2]*x(.01745329238474369)));u[a+108>>2]=0;o[a+181|0]=0;o[a+182|0]=0;P=ng+48|0;return a|0}function ek(a,Bf,Kf){a=a|0;Bf=Bf|0;Kf=Kf|0;var Lf=0,mg=0,og=0,pg=0,qg=0,rg=0;Kf=Kf?Kf:q[a+188>>2];pg=q[Bf>>2];Lf=q[a+328>>2];a:{b:{if((Lf|0)<1){break b}og=q[a+336>>2];while(1){if(q[og+(mg<<2)>>2]!=(pg|0)){mg=mg+1|0;if((mg|0)!=(Lf|0)){continue}break b}break}if((Lf|0)!=(mg|0)){break a}}c:{if(q[a+332>>2]!=(Lf|0)){break c}og=Lf?Lf<<1:1;if((Lf|0)>=(og|0)){break c}if(og){q[6657]=q[6657]+1;qg=n[q[5255]](og<<2,16)|0;Lf=q[a+328>>2];}if((Lf|0)>=1){mg=0;while(1){rg=mg<<2;q[rg+qg>>2]=q[q[a+336>>2]+rg>>2];mg=mg+1|0;if((mg|0)!=(Lf|0)){continue}break}}mg=q[a+336>>2];if(mg){if(r[a+340|0]){if(mg){q[6658]=q[6658]+1;n[q[5256]](mg);}Lf=q[a+328>>2];}q[a+336>>2]=0;}q[a+336>>2]=qg;o[a+340|0]=1;q[a+332>>2]=og;}q[q[a+336>>2]+(Lf<<2)>>2]=pg;q[a+328>>2]=Lf+1;a=q[a+344>>2];n[q[q[a>>2]+8>>2]](a,Kf,Bf)|0;}}function fk(a){a=a|0;a=hf(a);if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}function gk(a){var Bf=0;Mb(a);q[a+336>>2]=0;o[a+340|0]=1;q[a+328>>2]=0;q[a+332>>2]=0;q[a+252>>2]=4;q[a>>2]=4600;q[6657]=q[6657]+1;Bf=n[q[5255]](72,16)|0;Nh(Bf);q[a+344>>2]=Bf;}function hk(a,Kf,sg,tg){a=a|0;Kf=Kf|0;sg=sg|0;tg=tg|0;var ug=0,vg=0;sg=q[a+328>>2];a:{if((sg|0)<1){break a}tg=q[a+336>>2];vg=q[Kf>>2];Kf=0;while(1){ug=(Kf<<2)+tg|0;if(q[ug>>2]!=(vg|0)){Kf=Kf+1|0;if((sg|0)!=(Kf|0)){continue}break a}break}if((Kf|0)>=(sg|0)){break a}Kf=sg+ -1|0;q[ug>>2]=q[(Kf<<2)+tg>>2];q[a+328>>2]=Kf;}}function ik(a,Kf,sg){a=a|0;Kf=Kf|0;sg=sg|0;var tg=0,wg=0,xg=0,yg=0;wg=q[Kf>>2];sg=q[a+328>>2];a:{b:{if((sg|0)<1){break b}tg=q[a+336>>2];Kf=0;while(1){if(q[tg+(Kf<<2)>>2]!=(wg|0)){Kf=Kf+1|0;if((sg|0)!=(Kf|0)){continue}break b}break}if((Kf|0)!=(sg|0)){break a}}c:{if(q[a+332>>2]!=(sg|0)){break c}tg=sg?sg<<1:1;if((sg|0)>=(tg|0)){break c}if(tg){q[6657]=q[6657]+1;xg=n[q[5255]](tg<<2,16)|0;sg=q[a+328>>2];}if((sg|0)>=1){Kf=0;while(1){yg=Kf<<2;q[yg+xg>>2]=q[q[a+336>>2]+yg>>2];Kf=Kf+1|0;if((sg|0)!=(Kf|0)){continue}break}}Kf=q[a+336>>2];if(Kf){if(r[a+340|0]){if(Kf){q[6658]=q[6658]+1;n[q[5256]](Kf);}sg=q[a+328>>2];}q[a+336>>2]=0;}q[a+336>>2]=xg;q[a+332>>2]=tg;o[a+340|0]=1;}q[q[a+336>>2]+(sg<<2)>>2]=wg;q[a+328>>2]=sg+1;}}function jk(a){a=a|0;var Kf=0;q[a>>2]=4556;Kf=q[a+336>>2];if(Kf){if(r[a+340|0]){if(Kf){q[6658]=q[6658]+1;n[q[5256]](Kf);}}q[a+336>>2]=0;}q[a+336>>2]=0;q[a+328>>2]=0;q[a+332>>2]=0;o[a+340|0]=1;hb(a);if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}function kk(a){a=a|0;var sg=0;q[a>>2]=4556;sg=q[a+336>>2];if(sg){if(r[a+340|0]){if(sg){q[6658]=q[6658]+1;n[q[5256]](sg);}}q[a+336>>2]=0;}q[a+336>>2]=0;q[a+328>>2]=0;q[a+332>>2]=0;o[a+340|0]=1;hb(a);return a|0}function lk(a){Mb(a);o[a+340|0]=1;q[a>>2]=4556;q[a+336>>2]=0;q[a+328>>2]=0;q[a+332>>2]=0;q[a+252>>2]=4;}function mk(a){return 264}function nk(a,zg){a=a|0;zg=zg|0;var Ag=0,Bg=0,Cg=0,Dg=0,Eg=0,Fg=0,Gg=0;Ag=(Cg=zg,Dg=n[q[q[a>>2]+16>>2]](a)|0,Eg=1,Bg=q[q[zg>>2]+16>>2],n[Bg](Cg|0,Dg|0,Eg|0)|0);Eg=zg,Dg=Ag,Cg=n[q[q[a>>2]+20>>2]](a,q[Ag+8>>2],zg)|0,Fg=1245859651,Gg=a,Bg=q[q[zg>>2]+20>>2],n[Bg](Eg|0,Dg|0,Cg|0,Fg|0,Gg|0);}function ok(a){a=a|0;var zg=0;q[a>>2]=4464;zg=q[a+296>>2];if(zg){if(r[a+300|0]){if(zg){q[6658]=q[6658]+1;n[q[5256]](zg);}}q[a+296>>2]=0;}q[a+296>>2]=0;q[a+288>>2]=0;q[a+292>>2]=0;o[a+300|0]=1;if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}function pk(a,Hg){var Ig=x(0),Jg=x(0),Kg=0,Lg=0,Mg=x(0),Ng=0,Og=x(0),Pg=x(0),Qg=x(0);Ng=q[a+844>>2];a:{if((Ng|0)<1){Lg=-1;break a}Og=u[Hg+8>>2];Pg=u[Hg+4>>2];Qg=u[Hg>>2];Jg=u[a+848>>2];Jg=x(Jg*Jg);Hg=0;Lg=-1;while(1){Kg=w(Hg,208)+a|0;Ig=x(u[Kg+4>>2]-Qg);Mg=x(Ig*Ig);Ig=x(u[Kg+8>>2]-Pg);Mg=x(Mg+x(Ig*Ig));Ig=x(u[Kg+12>>2]-Og);Ig=x(Mg+x(Ig*Ig));Kg=Ig<Jg;Jg=Kg?Ig:Jg;Lg=Kg?Hg:Lg;Hg=Hg+1|0;if((Ng|0)!=(Hg|0)){continue}break}}return Lg}function qk(a,q){var Hg=x(0),Rg=x(0),Sg=x(0),Tg=x(0),Ug=x(0),Vg=x(0),Wg=x(0),Xg=x(0),Yg=x(0),Zg=x(0),_g=x(0),$g=x(0),ah=x(0),bh=x(0),ch=x(0),dh=x(0),eh=x(0),fh=0,gh=x(0),hh=x(0),ih=x(0),jh=x(0),kh=x(0),lh=x(0),mh=x(0),nh=x(0),oh=x(0),ph=x(0),qh=x(0),rh=x(0),sh=x(0),th=x(0),uh=0,vh=x(0),wh=x(0),xh=x(0),yh=x(0),zh=x(0),Ah=x(0),Bh=0;Hg=u[a+84>>2];Rg=u[q+80>>2];fh=Hg<Rg;uh=fh?0:-1;Tg=u[a+292>>2];Hg=fh?Hg:Rg;fh=Tg<Hg;Bh=fh?1:uh;Rg=u[a+500>>2];Hg=fh?Tg:Hg;fh=Rg<Hg;uh=u[a+708>>2]<(fh?Rg:Hg);fh=uh?3:fh?2:Bh;Wg=u[q>>2];a:{b:{c:{d:{if(r[21e3]){if(!fh){bh=u[a+636>>2];gh=u[a+428>>2];Ug=x(bh-gh);eh=u[a+632>>2];hh=u[a+424>>2];Tg=x(eh-hh);Sg=u[a+628>>2];lh=u[a+420>>2];Zg=x(Sg-lh);Hg=u[q+8>>2];Rg=u[q+4>>2];break d}Vg=u[a+212>>2];Xg=x(Wg-Vg);eh=u[a+632>>2];hh=u[a+424>>2];Tg=x(eh-hh);Rg=u[q+4>>2];$g=u[a+216>>2];Hg=x(Rg-$g);Sg=u[a+628>>2];lh=u[a+420>>2];Zg=x(Sg-lh);Ug=x(x(Xg*Tg)-x(Hg*Zg));Yg=x(Ug*Ug);bh=u[a+636>>2];gh=u[a+428>>2];Ug=x(bh-gh);_g=x(Hg*Ug);Hg=u[q+8>>2];ih=u[a+220>>2];ch=x(Hg-ih);dh=x(_g-x(ch*Tg));Xg=x(x(ch*Zg)-x(Xg*Ug));Ah=x(Yg+x(x(dh*dh)+x(Xg*Xg)));if((fh|0)!=1){break d}Wg=x(Wg-u[a+4>>2]);Hg=x(Hg-u[a+12>>2]);Rg=x(Rg-u[a+8>>2]);Zg=x(0);break c}e:{f:{g:{if(!fh){ih=u[a+428>>2];Xg=u[a+636>>2];Zg=x(ih-Xg);$g=u[a+424>>2];ch=u[a+632>>2];kh=x($g-ch);Vg=u[a+420>>2];dh=u[a+628>>2];mh=x(Vg-dh);gh=u[q+8>>2];Tg=x(gh-Xg);hh=u[q+4>>2];rh=x(hh-ch);sh=x(Wg-dh);Rg=x(gh-ih);Hg=x(hh-$g);Ug=x(Wg-Vg);break g}oh=u[a+212>>2];eh=x(Wg-oh);$g=u[a+424>>2];ch=u[a+632>>2];kh=x($g-ch);hh=u[q+4>>2];ph=u[a+216>>2];bh=x(hh-ph);Vg=u[a+420>>2];dh=u[a+628>>2];mh=x(Vg-dh);Hg=x(x(eh*kh)-x(bh*mh));Rg=x(Hg*Hg);ih=u[a+428>>2];Xg=u[a+636>>2];Zg=x(ih-Xg);gh=u[q+8>>2];Sg=u[a+220>>2];lh=x(gh-Sg);Hg=x(x(bh*Zg)-x(lh*kh));Tg=x(Hg*Hg);Hg=x(x(lh*mh)-x(eh*Zg));Tg=x(Rg+x(Tg+x(Hg*Hg)));Ug=x(Wg-Vg);nh=x(ph-ch);Hg=x(hh-$g);vh=x(oh-dh);Rg=x(x(Ug*nh)-x(Hg*vh));Yg=x(Rg*Rg);wh=x(Sg-Xg);Rg=x(gh-ih);_g=x(x(Hg*wh)-x(Rg*nh));ah=x(_g*_g);_g=x(x(Rg*vh)-x(Ug*wh));_g=x(Yg+x(ah+x(_g*_g)));_g=Tg>_g?Tg:_g;Tg=x(ph-$g);sh=x(Wg-dh);ah=x(oh-Vg);rh=x(hh-ch);jh=x(x(Tg*sh)-x(ah*rh));qh=x(jh*jh);jh=x(Sg-ih);Yg=Tg;Tg=x(gh-Xg);Yg=x(x(jh*rh)-x(Yg*Tg));ah=x(x(ah*Tg)-x(jh*sh));ah=x(qh+x(x(Yg*Yg)+x(ah*ah)));Ah=_g>ah?_g:ah;if((fh|0)!=1){break g}_g=u[a+4>>2];xh=x(_g-dh);Yg=x(Wg-_g);ah=u[a+12>>2];yh=x(ah-Xg);jh=u[a+8>>2];zh=x(jh-ch);qh=x(gh-ah);th=x(hh-jh);Zg=x(0);break f}_g=u[a+4>>2];Yg=x(Wg-_g);jh=u[a+8>>2];th=x(hh-jh);Sg=x(x(Yg*kh)-x(th*mh));bh=x(Sg*Sg);ah=u[a+12>>2];qh=x(gh-ah);Sg=x(x(th*Zg)-x(qh*kh));Zg=x(x(qh*mh)-x(Yg*Zg));Zg=x(bh+x(x(Sg*Sg)+x(Zg*Zg)));zh=x(jh-ch);xh=x(_g-dh);Sg=x(x(Ug*zh)-x(Hg*xh));bh=x(Sg*Sg);yh=x(ah-Xg);Sg=x(x(Hg*yh)-x(Rg*zh));eh=x(Sg*Sg);Sg=x(x(Rg*xh)-x(Ug*yh));Sg=x(bh+x(eh+x(Sg*Sg)));Zg=Zg>Sg?Zg:Sg;kh=x(jh-$g);mh=x(_g-Vg);Sg=x(x(kh*sh)-x(mh*rh));bh=x(Sg*Sg);nh=x(ah-ih);Sg=x(x(nh*rh)-x(kh*Tg));eh=x(Sg*Sg);Sg=x(x(mh*Tg)-x(nh*sh));Sg=x(bh+x(eh+x(Sg*Sg)));Zg=Zg>Sg?Zg:Sg;Sg=u[a+220>>2];lh=x(gh-Sg);ph=u[a+216>>2];bh=x(hh-ph);oh=u[a+212>>2];eh=x(Wg-oh);if((fh|0)==2){Xg=x(ah-Sg);ch=x(jh-ph);dh=x(_g-oh);Tg=x(0);break e}wh=x(Sg-Xg);nh=x(ph-ch);vh=x(oh-dh);}Hg=x(x(Yg*nh)-x(th*vh));Rg=x(Hg*Hg);Hg=x(x(th*wh)-x(qh*nh));Ug=x(Hg*Hg);Hg=x(x(qh*vh)-x(Yg*wh));Hg=x(Rg+x(Ug+x(Hg*Hg)));Rg=x(x(eh*zh)-x(bh*xh));Ug=x(Rg*Rg);Rg=x(x(bh*yh)-x(lh*zh));Xg=x(Rg*Rg);Rg=x(x(lh*xh)-x(eh*yh));Rg=x(Ug+x(Xg+x(Rg*Rg)));Hg=Hg>Rg?Hg:Rg;ch=x(jh-ph);dh=x(_g-oh);Rg=x(x(ch*sh)-x(dh*rh));Ug=x(Rg*Rg);Xg=x(ah-Sg);Rg=x(x(Xg*rh)-x(ch*Tg));kh=x(Rg*Rg);Rg=x(x(dh*Tg)-x(Xg*sh));Rg=x(Ug+x(kh+x(Rg*Rg)));Tg=Hg>Rg?Hg:Rg;Ug=x(0);if(uh){break a}nh=x(ah-ih);kh=x(jh-$g);mh=x(_g-Vg);Rg=x(gh-ih);Hg=x(hh-$g);Ug=x(Wg-Vg);}Wg=x(ph-$g);Vg=x(oh-Vg);$g=x(x(Yg*Wg)-x(th*Vg));_g=x($g*$g);$g=x(Sg-ih);Wg=x(x(th*$g)-x(qh*Wg));Sg=x(Wg*Wg);Wg=x(x(qh*Vg)-x(Yg*$g));Wg=x(_g+x(Sg+x(Wg*Wg)));Vg=x(x(eh*kh)-x(bh*mh));Yg=x(Vg*Vg);Vg=x(x(bh*nh)-x(lh*kh));Sg=x(Vg*Vg);Vg=x(x(lh*mh)-x(eh*nh));Vg=x(Yg+x(Sg+x(Vg*Vg)));Wg=Wg>Vg?Wg:Vg;Vg=x(x(ch*Ug)-x(dh*Hg));Hg=x(x(Xg*Hg)-x(ch*Rg));Yg=x(Hg*Hg);Hg=x(x(dh*Rg)-x(Xg*Ug));Hg=x(x(Vg*Vg)+x(Yg+x(Hg*Hg)));Ug=Wg>Hg?Wg:Hg;break a}Wg=x(Wg-u[a+4>>2]);Rg=x(Rg-u[a+8>>2]);Vg=x(x(Wg*Tg)-x(Rg*Zg));Hg=x(Hg-u[a+12>>2]);Tg=x(x(Rg*Ug)-x(Hg*Tg));Yg=x(Tg*Tg);Tg=x(x(Hg*Zg)-x(Wg*Ug));Zg=x(x(Vg*Vg)+x(Yg+x(Tg*Tg)));ih=u[a+220>>2];$g=u[a+216>>2];Vg=u[a+212>>2];Tg=x(0);if((fh|0)==2){break b}}Tg=x(eh-$g);Ug=x(Sg-Vg);Xg=x(x(Wg*Tg)-x(Rg*Ug));Yg=x(Xg*Xg);Xg=x(bh-ih);Tg=x(x(Rg*Xg)-x(Hg*Tg));Sg=x(Tg*Tg);Tg=x(x(Hg*Ug)-x(Wg*Xg));Tg=x(Yg+x(Sg+x(Tg*Tg)));Ug=x(0);if(uh){break a}}Ug=x(hh-$g);Vg=x(lh-Vg);$g=x(x(Wg*Ug)-x(Rg*Vg));Yg=Rg;Rg=x(gh-ih);Ug=x(x(Yg*Rg)-x(Hg*Ug));Hg=x(x(Hg*Vg)-x(Wg*Rg));Ug=x(x($g*$g)+x(x(Ug*Ug)+x(Hg*Hg)));}Hg=x(y(Ah));a=Hg>x(-0xde0b6b000000000);q=a?0:-1;Rg=x(y(Zg));Hg=a?Hg:x(-0xde0b6b000000000);a=Rg>Hg;q=a?1:q;Tg=x(y(Tg));Hg=a?Rg:Hg;a=Tg>Hg;return x(y(Ug))>(a?Tg:Hg)?3:a?2:q}function rk(a,Ch,Dh){var Eh=0,Fh=0;Eh=P-16|0;P=Eh;q[Eh+12>>2]=a;q[Eh+8>>2]=Ch;q[Eh+4>>2]=Dh;Ch=q[Eh+8>>2];Fh=q[Ch+4>>2];a=q[Eh+12>>2];Dh=a;q[Dh+164>>2]=q[Ch>>2];q[Dh+168>>2]=Fh;Dh=q[Ch+12>>2];q[a+172>>2]=q[Ch+8>>2];q[a+176>>2]=Dh;Ch=Eh;Fh=P-16|0;q[Fh+12>>2]=q[Eh+8>>2];Dh=1;a:{if(u[q[Fh+12>>2]>>2]!=x(1)){break a}Fh=P-16|0;q[Fh+12>>2]=q[Eh+8>>2];Dh=1;if(u[q[Fh+12>>2]+4>>2]!=x(1)){break a}Dh=P-16|0;q[Dh+12>>2]=q[Eh+8>>2];Dh=u[q[Dh+12>>2]+8>>2]!=x(1);}o[Ch+3|0]=Dh;if(o[Eh+3|0]&1){Ch=q[Eh+4>>2];}else {Ch=0;}q[a+180>>2]=Ch;P=Eh+16|0;}function sk(a,Ch,Dh){a=a|0;Ch=Ch|0;Dh=Dh|0;var Gh=0,Hh=x(0),Ih=x(0),Jh=x(0),Kh=x(0),Lh=x(0),Mh=x(0),Nh=0,Oh=x(0),Ph=x(0),Qh=x(0),Rh=x(0),Sh=x(0),Th=x(0);Ih=x(1);Gh=q[Ch>>2];a:{if((Gh|0)==q[a+84>>2]|r[Gh+204|0]&4){break a}b:{if(Dh){Jh=u[Ch+16>>2];Kh=u[Ch+12>>2];Hh=u[Ch+8>>2];break b}Hh=u[Ch+8>>2];Lh=u[Ch+12>>2];Mh=u[Ch+16>>2];Jh=x(x(x(Hh*u[Gh+36>>2])+x(Lh*u[Gh+40>>2]))+x(Mh*u[Gh+44>>2]));Kh=x(x(x(Hh*u[Gh+20>>2])+x(Lh*u[Gh+24>>2]))+x(Mh*u[Gh+28>>2]));Hh=x(x(x(u[Gh+4>>2]*Hh)+x(u[Gh+8>>2]*Lh))+x(u[Gh+12>>2]*Mh));}if(x(x(x(Hh*u[a+88>>2])+x(Kh*u[a+92>>2]))+x(Jh*u[a+96>>2]))<u[a+104>>2]){break a}Nh=q[Ch+40>>2];q[a+80>>2]=Gh;q[a+4>>2]=Nh;c:{if(Dh){Dh=q[Ch+12>>2];q[a+48>>2]=q[Ch+8>>2];q[a+52>>2]=Dh;Dh=q[Ch+20>>2];q[a+56>>2]=q[Ch+16>>2];q[a+60>>2]=Dh;break c}Hh=u[Gh+8>>2];Lh=u[Gh+12>>2];Mh=u[Gh+20>>2];Oh=u[Gh+24>>2];Ph=u[Gh+28>>2];Qh=u[Gh+36>>2];Rh=u[Gh+40>>2];Ih=u[Ch+12>>2];Sh=u[Gh+44>>2];Jh=u[Ch+16>>2];Th=u[Gh+4>>2];Kh=u[Ch+8>>2];q[a+60>>2]=0;u[a+56>>2]=x(x(Kh*Qh)+x(Ih*Rh))+x(Jh*Sh);u[a+52>>2]=x(x(Kh*Mh)+x(Ih*Oh))+x(Jh*Ph);u[a+48>>2]=x(x(Th*Kh)+x(Hh*Ih))+x(Lh*Jh);}Gh=q[Ch+28>>2];Dh=a- -64|0;q[Dh>>2]=q[Ch+24>>2];q[Dh+4>>2]=Gh;Dh=q[Ch+36>>2];q[a+72>>2]=q[Ch+32>>2];q[a+76>>2]=Dh;Ih=u[Ch+40>>2];}return x(Ih)}function tk(a,Ch,Dh){a=a|0;Ch=Ch|0;Dh=x(Dh);n[q[q[a>>2]+32>>2]](a,Ch);n[q[q[a>>2]+36>>2]](a,Ch,Dh);}function uk(a,q){a=a|0;q=q|0;o[a+288|0]=q;}function vk(a){a=a|0;return (x(y(u[a+20>>2]))<x(1.1920928955078125e-7)^1?0:x(y(u[a+24>>2]))<x(1.1920928955078125e-7))|0}function wk(a,Ch){var Dh=x(0),Uh=x(0),Vh=x(0),Wh=x(0),Xh=x(0);Uh=u[Ch+260>>2];Dh=u[Ch+264>>2];Vh=u[Ch+256>>2];Wh=u[Ch+52>>2];q[a+12>>2]=0;Xh=Dh;Dh=x(-Wh);u[a+8>>2]=Xh*Dh;u[a+4>>2]=Uh*Dh;u[a>>2]=Vh*Dh;}function xk(a,Ch){var Yh=x(0),Zh=0,_h=x(0),$h=x(0),ai=x(0),bi=0;Zh=P-16|0;P=Zh;bi=a;_h=u[Ch>>2];$h=u[Ch+4>>2];ai=u[Ch+8>>2];Yh=x(x(x(_h*_h)+x($h*$h))+x(ai*ai));if(!!(Yh>x(0))){q[Zh+12>>2]=0;u[Zh+8>>2]=-ai;u[Zh+4>>2]=-$h;u[Zh>>2]=-_h;td(a,Zh);Yh=u[Ch>>2];_h=x(Yh*Yh);Yh=u[Ch+4>>2];_h=x(_h+x(Yh*Yh));Yh=u[Ch+8>>2];Yh=x(_h+x(Yh*Yh));}u[bi+52>>2]=E(Yh);P=Zh+16|0;}function yk(a,Ch){a=a|0;Ch=Ch|0;var ci=x(0),di=x(0),ei=x(0),fi=x(0),gi=0;ci=u[Ch>>2];di=x(ci*ci);ci=u[Ch+4>>2];di=x(di+x(ci*ci));ci=u[Ch+8>>2];ci=x(di+x(ci*ci));di=u[a+36>>2];a:{if(ci==x(0)){break a}di=x(E(ci));}ci=di;o[a+249|0]=1;u[a+20>>2]=ci;u[a+32>>2]=ci;gi=a;ci=u[Ch>>2];di=u[Ch+4>>2];ei=u[Ch+8>>2];fi=x(x(x(ci*ci)+x(di*di))+x(ei*ei));b:{if(fi==x(0)){ei=u[a+264>>2];di=u[a+260>>2];ci=u[a+256>>2];Ch=a+268|0;break b}fi=x(x(1)/x(E(fi)));ei=x(ei*fi);di=x(di*fi);ci=x(ci*fi);Ch=Ch+12|0;}q[gi+284>>2]=q[Ch>>2];u[a+280>>2]=ei;u[a+276>>2]=di;u[a+272>>2]=ci;Ch=q[a+8>>2];gi=q[Ch+56>>2];q[a+116>>2]=q[Ch+52>>2];q[a+120>>2]=gi;gi=q[Ch+64>>2];q[a+124>>2]=q[Ch+60>>2];q[a+128>>2]=gi;}function zk(a){a=a|0;return n[q[q[a>>2]+48>>2]](a)|0}function Ak(a,Ch,hi){a=a|0;Ch=Ch|0;hi=x(hi);var ii=0,ji=0,ki=0,li=x(0),mi=x(0),ni=x(0),oi=x(0),pi=0,qi=x(0),ri=x(0),si=x(0),ti=x(0),ui=x(0),vi=x(0),wi=x(0),xi=0;ji=P-80|0;P=ji;li=u[a+100>>2];mi=u[a+104>>2];ni=u[a+108>>2];oi=x(x(x(li*li)+x(mi*mi))+x(ni*ni));if(!!(oi>x(0))){oi=Nc(x(x(1)-u[a+244>>2]),hi);ni=x(ni*oi);u[a+108>>2]=ni;mi=x(mi*oi);u[a+104>>2]=mi;li=x(li*oi);u[a+100>>2]=li;oi=x(x(x(li*li)+x(mi*mi))+x(ni*ni));}if(!!(oi>x(0))){ii=q[a+8>>2];ki=q[ii+16>>2];q[ji+24>>2]=q[ii+12>>2];q[ji+28>>2]=ki;ki=q[ii+8>>2];q[ji+16>>2]=q[ii+4>>2];q[ji+20>>2]=ki;ki=q[ii+32>>2];q[ji+40>>2]=q[ii+28>>2];q[ji+44>>2]=ki;ki=q[ii+24>>2];q[ji+32>>2]=q[ii+20>>2];q[ji+36>>2]=ki;ki=q[ii+48>>2];q[ji+56>>2]=q[ii+44>>2];q[ji+60>>2]=ki;ki=q[ii+40>>2];q[ji+48>>2]=q[ii+36>>2];q[ji+52>>2]=ki;ki=q[ii+64>>2];q[ji+72>>2]=q[ii+60>>2];q[ji+76>>2]=ki;ki=q[ii+56>>2];q[ji+64>>2]=q[ii+52>>2];q[ji+68>>2]=ki;ja(ji+16|0,ji);q[ji+60>>2]=0;q[ji+44>>2]=0;ui=ni;ri=x(E(oi));ni=x(x(1)/ri);oi=x(ui*ni);qi=x(x(ri*hi)*x(.5));li=x(li*ni);ni=x(mi*ni);vi=x(ga(qi)/x(E(x(x(oi*oi)+x(x(li*li)+x(ni*ni))))));mi=x(oi*vi);oi=u[ji>>2];ri=x(ni*vi);si=u[ji+12>>2];qi=fa(qi);ti=u[ji+4>>2];vi=x(li*vi);ui=u[ji+8>>2];li=x(x(x(mi*oi)+x(x(ri*si)+x(qi*ti)))-x(vi*ui));ni=x(x(x(x(qi*si)-x(vi*oi))-x(ri*ti))-x(mi*ui));wi=x(x(x(x(mi*si)+x(qi*ui))+x(vi*ti))-x(ri*oi));mi=x(x(x(x(qi*oi)+x(vi*si))+x(ri*ui))-x(mi*ti));oi=x(x(2)/x(x(ni*ni)+x(x(wi*wi)+x(x(mi*mi)+x(li*li)))));ri=x(wi*oi);si=x(li*ri);qi=x(mi*oi);ti=x(ni*qi);u[ji+52>>2]=si+ti;u[ji+40>>2]=si-ti;si=x(mi*ri);oi=x(li*oi);ti=x(ni*oi);u[ji+24>>2]=si+ti;qi=x(mi*qi);li=x(li*oi);u[ji+56>>2]=x(1)-x(qi+li);ui=qi;qi=x(wi*ri);u[ji+36>>2]=x(1)-x(ui+qi);q[ji+28>>2]=0;u[ji+48>>2]=si-ti;mi=x(mi*oi);ni=x(ni*ri);u[ji+32>>2]=mi+ni;u[ji+20>>2]=mi-ni;u[ji+16>>2]=x(1)-x(li+qi);ii=q[a+8>>2];q[ii+304>>2]=q[ii+304>>2]+1;ki=q[ji+28>>2];q[ii+12>>2]=q[ji+24>>2];q[ii+16>>2]=ki;ki=q[ji+20>>2];q[ii+4>>2]=q[ji+16>>2];q[ii+8>>2]=ki;ki=q[ji+44>>2];q[ii+28>>2]=q[ji+40>>2];q[ii+32>>2]=ki;ki=q[ji+36>>2];q[ii+20>>2]=q[ji+32>>2];q[ii+24>>2]=ki;ki=q[ji+60>>2];q[ii+44>>2]=q[ji+56>>2];q[ii+48>>2]=ki;ki=q[ji+52>>2];q[ii+36>>2]=q[ji+48>>2];q[ii+40>>2]=ki;ki=q[ji+68>>2];q[ii+52>>2]=q[ji+64>>2];q[ii+56>>2]=ki;ki=q[ji+76>>2];q[ii+60>>2]=q[ji+72>>2];q[ii+64>>2]=ki;ii=q[a+8>>2];ki=ii+60|0;pi=q[ki+4>>2];q[a+140>>2]=q[ki>>2];q[a+144>>2]=pi;ki=q[ii+56>>2];q[a+132>>2]=q[ii+52>>2];q[a+136>>2]=ki;ki=q[ii+60>>2];pi=q[ii+64>>2];xi=q[ii+56>>2];q[a+152>>2]=q[ii+52>>2];q[a+156>>2]=xi;q[a+160>>2]=ki;q[a+164>>2]=pi;ja(ii+4|0,ji);ii=q[ji+12>>2];q[a+176>>2]=q[ji+8>>2];q[a+180>>2]=ii;ii=q[ji+4>>2];q[a+168>>2]=q[ji>>2];q[a+172>>2]=ii;ii=q[a+180>>2];q[a+192>>2]=q[a+176>>2];q[a+196>>2]=ii;ii=q[a+172>>2];q[a+184>>2]=q[a+168>>2];q[a+188>>2]=ii;}a:{if(u[a+252>>2]<=x(0)?!r[a+251|0]:0){break a}o[a+248|0]=n[q[q[a>>2]+48>>2]](a);mi=u[a+72>>2];ni=u[a+68>>2];oi=u[a+76>>2];li=Nc(x(x(1)-u[a+240>>2]),hi);if(!!(x(x(x(ni*ni)+x(mi*mi))+x(oi*oi))>x(0))){u[a+76>>2]=oi*li;u[a+72>>2]=mi*li;u[a+68>>2]=ni*li;}li=x(x(u[a+20>>2]*li)-x(u[a+52>>2]*hi));u[a+20>>2]=li;b:{if(!(li>x(0))){break b}mi=u[a+32>>2];if(!(li>mi)){break b}u[a+20>>2]=mi;li=mi;}c:{if(!(li<x(0))){break c}mi=x(y(u[a+28>>2]));if(!(x(y(li))>mi)){break c}li=x(-mi);u[a+20>>2]=li;}u[a+24>>2]=li*hi;ii=q[a+8>>2];ki=q[ii+16>>2];q[ji+24>>2]=q[ii+12>>2];q[ji+28>>2]=ki;ki=q[ii+8>>2];q[ji+16>>2]=q[ii+4>>2];q[ji+20>>2]=ki;ki=q[ii+32>>2];q[ji+40>>2]=q[ii+28>>2];q[ji+44>>2]=ki;ki=q[ii+24>>2];q[ji+32>>2]=q[ii+20>>2];q[ji+36>>2]=ki;ki=q[ii+48>>2];q[ji+56>>2]=q[ii+44>>2];q[ji+60>>2]=ki;ki=q[ii+40>>2];q[ji+48>>2]=q[ii+36>>2];q[ji+52>>2]=ki;ki=q[ii+64>>2];q[ji+72>>2]=q[ii+60>>2];q[ji+76>>2]=ki;ki=q[ii+56>>2];q[ji+64>>2]=q[ii+52>>2];q[ji+68>>2]=ki;Nk(a,Ch);ki=ji- -64|0;d:{if(r[a+251|0]){lf(a,Ch,a+68|0);break d}li=u[a+252>>2];u[a+252>>2]=li-hi;mi=u[a+68>>2];ni=u[a+72>>2];oi=u[a+76>>2];q[ji+12>>2]=0;li=li>hi?hi:li;u[ji+8>>2]=oi*li;u[ji+4>>2]=li*ni;u[ji>>2]=li*mi;lf(a,Ch,ji);}Kk(a,Ch,hi);ii=q[a+144>>2];q[ki+8>>2]=q[a+140>>2];q[ki+12>>2]=ii;ii=q[a+136>>2];q[ki>>2]=q[a+132>>2];q[ki+4>>2]=ii;ii=q[a+8>>2];q[ii+304>>2]=q[ii+304>>2]+1;pi=q[ji+28>>2];q[ii+12>>2]=q[ji+24>>2];q[ii+16>>2]=pi;pi=q[ji+20>>2];q[ii+4>>2]=q[ji+16>>2];q[ii+8>>2]=pi;pi=q[ji+44>>2];q[ii+28>>2]=q[ji+40>>2];q[ii+32>>2]=pi;pi=q[ji+36>>2];q[ii+20>>2]=q[ji+32>>2];q[ii+24>>2]=pi;pi=q[ji+60>>2];q[ii+44>>2]=q[ji+56>>2];q[ii+48>>2]=pi;pi=q[ji+52>>2];q[ii+36>>2]=q[ji+48>>2];q[ii+40>>2]=pi;pi=q[ki+4>>2];q[ii+52>>2]=q[ki>>2];q[ii+56>>2]=pi;pi=q[ki+12>>2];q[ii+60>>2]=q[ki+8>>2];q[ii+64>>2]=pi;o[a+220|0]=0;if(!Ga(a,Ch)){break a}o[a+220|0]=1;if(!Ga(a,Ch)){break a}o[a+220|0]=1;if(!Ga(a,Ch)){break a}o[a+220|0]=1;if(!Ga(a,Ch)){break a}o[a+220|0]=1;if(!Ga(a,Ch)){break a}o[a+220|0]=1;}P=ji+80|0;}function Bk(a,Ch){a=a|0;Ch=Ch|0;var hi=0,yi=0,zi=0,Ai=0;Ch=P-16|0;P=Ch;hi=q[a+8>>2];zi=hi+52|0;yi=q[zi+4>>2];q[a+132>>2]=q[zi>>2];q[a+136>>2]=yi;yi=q[hi+64>>2];q[a+140>>2]=q[hi+60>>2];q[a+144>>2]=yi;Ai=q[hi+52>>2];zi=q[hi+56>>2];yi=q[hi+64>>2];q[a+160>>2]=q[hi+60>>2];q[a+164>>2]=yi;q[a+152>>2]=Ai;q[a+156>>2]=zi;ja(hi+4|0,Ch);hi=q[Ch+12>>2];q[a+176>>2]=q[Ch+8>>2];q[a+180>>2]=hi;hi=q[Ch+4>>2];q[a+168>>2]=q[Ch>>2];q[a+172>>2]=hi;hi=q[a+180>>2];q[a+192>>2]=q[a+176>>2];q[a+196>>2]=hi;hi=q[a+172>>2];q[a+184>>2]=q[a+168>>2];q[a+188>>2]=hi;P=Ch+16|0;}function Ck(a,Ch){a=a|0;Ch=Ch|0;var Bi=0,Ci=0;Bi=P-32|0;q[Bi+12>>2]=0;Ci=q[Ch+12>>2];q[Bi+24>>2]=q[Ch+8>>2];q[Bi+28>>2]=Ci;Ci=q[Ch+4>>2];q[Bi+16>>2]=q[Ch>>2];q[Bi+20>>2]=Ci;a=q[a+8>>2];q[a+4>>2]=1065353216;q[a+44>>2]=1065353216;q[a+48>>2]=0;q[a+36>>2]=0;q[a+40>>2]=0;q[a+28>>2]=0;q[a+32>>2]=0;q[a+24>>2]=1065353216;q[a+16>>2]=0;q[a+20>>2]=0;q[a+8>>2]=0;q[a+12>>2]=0;q[a+304>>2]=q[a+304>>2]+1;Ch=q[Bi+20>>2];q[a+52>>2]=q[Bi+16>>2];q[a+56>>2]=Ch;Ch=q[Bi+28>>2];q[a+60>>2]=q[Bi+24>>2];q[a+64>>2]=Ch;}function Dk(a,Ch){a=a|0;Ch=Ch|0;var Di=0,Ei=0,Fi=0,Gi=0,Hi=0;q[a+252>>2]=0;p[a+248>>1]=0;q[a+20>>2]=0;q[a+24>>2]=0;q[a+68>>2]=0;q[a+72>>2]=0;q[a+76>>2]=0;q[a+80>>2]=0;a=q[q[a+8>>2]+344>>2];if(q[(n[q[q[a>>2]+28>>2]](a)|0)+4>>2]>=1){while(1){Ei=a,Fi=q[q[(n[q[q[a>>2]+28>>2]](a)|0)+12>>2]>>2],Gi=q[q[(n[q[q[a>>2]+28>>2]](a)|0)+12>>2]+4>>2],Hi=q[Ch+24>>2],Di=q[q[a>>2]+12>>2],n[Di](Ei|0,Fi|0,Gi|0,Hi|0)|0;if(q[(n[q[q[a>>2]+28>>2]](a)|0)+4>>2]>0){continue}break}}}function Ek(a,Ch){a=a|0;Ch=Ch|0;var Ii=x(0),Ji=x(0),Ki=x(0),Li=x(0),Mi=x(0),Ni=x(0),Oi=x(0);Ji=u[Ch+72>>2];Ki=u[Ch+260>>2];Li=u[Ch+76>>2];Mi=u[Ch+264>>2];Ni=u[Ch+68>>2];Ii=u[Ch+20>>2];Oi=u[Ch+256>>2];q[a+12>>2]=0;u[a>>2]=Ni+x(Oi*Ii);u[a+8>>2]=Li+x(Ii*Mi);u[a+4>>2]=Ji+x(Ii*Ki);}function Fk(a,Ch){a=a|0;Ch=Ch|0;var Pi=x(0),Qi=x(0),Ri=x(0),Si=0,Ti=x(0),Ui=x(0),Vi=x(0),Wi=x(0),Xi=x(0),Yi=x(0),Zi=x(0),_i=x(0);Si=q[Ch+4>>2];q[a+68>>2]=q[Ch>>2];q[a+72>>2]=Si;Si=q[Ch+12>>2];q[a+76>>2]=q[Ch+8>>2];q[a+80>>2]=Si;Pi=u[a+68>>2];Ti=u[a+72>>2];Ui=u[a+76>>2];Xi=x(x(x(Pi*Pi)+x(Ti*Ti))+x(Ui*Ui));a:{if(!!(Xi>x(0))){Vi=u[Ch>>2];Qi=u[Ch+4>>2];Wi=u[Ch+8>>2];Ri=x(x(1)/x(E(x(x(x(Vi*Vi)+x(Qi*Qi))+x(Wi*Wi)))));Yi=u[a+264>>2];_i=x(Yi*x(Wi*Ri));Wi=u[a+256>>2];Zi=u[a+260>>2];Ri=x(_i+x(x(Wi*x(Vi*Ri))+x(Zi*x(Qi*Ri))));if(Ri==x(0)){break a}Qi=Ui;Ui=x(x(E(Xi))*ga(x(x(1.5707963705062866)-Sa(x(A(x(B(Ri,x(-1))),x(1)))))));Vi=x(Yi*Ui);u[a+76>>2]=Qi-Vi;Qi=Ti;Ti=x(Zi*Ui);u[a+72>>2]=Qi-Ti;Qi=Pi;Pi=x(Wi*Ui);u[a+68>>2]=Qi-Pi;Pi=x(E(x(x(Vi*Vi)+x(x(Pi*Pi)+x(Ti*Ti)))));u[a+20>>2]=Ri<x(0)?x(-Pi):Pi;if(!(Ri>x(0))){break a}o[a+249|0]=1;Ch=q[a+8>>2];Si=q[Ch+56>>2];q[a+116>>2]=q[Ch+52>>2];q[a+120>>2]=Si;Si=q[Ch+64>>2];q[a+124>>2]=q[Ch+60>>2];q[a+128>>2]=Si;return}q[a+20>>2]=0;}}function Gk(a){a=a|0;return a+100|0}function Hk(a,Ch){a=a|0;Ch=Ch|0;var $i=0;$i=q[Ch+4>>2];q[a+100>>2]=q[Ch>>2];q[a+104>>2]=$i;$i=q[Ch+12>>2];q[a+108>>2]=q[Ch+8>>2];q[a+112>>2]=$i;}function Ik(a,Ch,aj){a=a|0;Ch=Ch|0;aj=x(aj);var bj=x(0),cj=0,dj=x(0),ej=x(0),fj=x(0),gj=x(0),hj=x(0),ij=0,jj=x(0);o[a+251|0]=0;cj=q[Ch+4>>2];q[a+68>>2]=q[Ch>>2];q[a+72>>2]=cj;cj=q[Ch+12>>2];q[a+76>>2]=q[Ch+8>>2];q[a+80>>2]=cj;dj=u[a+68>>2];ej=u[a+72>>2];bj=u[a+76>>2];gj=x(E(x(x(x(dj*dj)+x(ej*ej))+x(bj*bj))));if(!!(gj>x(1.1920928955078125e-7))){fj=bj;bj=x(x(1)/gj);hj=x(fj*bj);fj=x(dj*bj);ij=q[a+80>>2];jj=x(ej*bj);}u[a+84>>2]=fj;q[a+96>>2]=ij;u[a+92>>2]=hj;u[a+88>>2]=jj;u[a+252>>2]=u[a+252>>2]+aj;}function Jk(a,Ch){a=a|0;Ch=Ch|0;var aj=x(0),kj=x(0),lj=x(0),mj=x(0),nj=0;o[a+251|0]=1;nj=q[Ch+4>>2];q[a+68>>2]=q[Ch>>2];q[a+72>>2]=nj;nj=q[Ch+12>>2];q[a+76>>2]=q[Ch+8>>2];q[a+80>>2]=nj;aj=u[a+68>>2];kj=u[a+72>>2];lj=u[a+76>>2];mj=x(E(x(x(x(aj*aj)+x(kj*kj))+x(lj*lj))));a:{if(!(mj>x(1.1920928955078125e-7))){aj=x(0);kj=x(0);lj=x(0);Ch=0;break a}mj=x(x(1)/mj);lj=x(lj*mj);kj=x(kj*mj);aj=x(aj*mj);Ch=q[a+80>>2];}u[a+84>>2]=aj;q[a+96>>2]=Ch;u[a+92>>2]=lj;u[a+88>>2]=kj;}function Kk(a,Ch,oj){var pj=0,qj=x(0),rj=x(0),sj=0,tj=0,uj=x(0),vj=x(0),wj=0,xj=x(0),yj=x(0),zj=x(0),Aj=x(0),Bj=x(0),Cj=x(0),Dj=x(0),Ej=x(0),Fj=x(0),Gj=x(0),Hj=0;pj=P-432|0;P=pj;tj=q[a+164>>2];q[pj+232>>2]=q[a+160>>2];q[pj+236>>2]=tj;tj=q[a+156>>2];q[pj+224>>2]=q[a+152>>2];q[pj+228>>2]=tj;qj=u[a+20>>2];a:{if(qj>x(0)){break a}qj=x((qj<x(0)?x(-qj):x(0))*oj);b:{if(!(qj>x(0))){break b}rj=u[a+28>>2];if(qj>rj^1|(r[a+249|0]?!r[a+248|0]:0)){break b}qj=rj;}qj=x(qj+u[a+148>>2]);Aj=x(u[a+256>>2]*qj);u[a+152>>2]=u[a+152>>2]-Aj;Bj=x(qj*u[a+260>>2]);u[a+156>>2]=u[a+156>>2]-Bj;Cj=x(qj*u[a+264>>2]);u[a+160>>2]=u[a+160>>2]-Cj;sj=q[a+48>>2];tj=q[a+8>>2];q[pj+136>>2]=0;q[pj+140>>2]=0;q[pj+144>>2]=0;q[pj+148>>2]=0;q[pj+152>>2]=0;q[pj+156>>2]=0;q[pj+192>>2]=0;q[pj+116>>2]=1065353216;q[pj+128>>2]=0;q[pj+132>>2]=0;q[pj+196>>2]=tj;q[pj+112>>2]=4380;wj=q[a+268>>2];q[pj+208>>2]=q[a+264>>2];q[pj+212>>2]=wj;wj=q[a+260>>2];q[pj+200>>2]=q[a+256>>2];q[pj+204>>2]=wj;q[pj+216>>2]=sj;wj=q[tj+188>>2];q[pj+120>>2]=q[wj+4>>2];q[pj+124>>2]=q[wj+8>>2];q[pj+24>>2]=0;q[pj+28>>2]=0;q[pj+32>>2]=0;q[pj+36>>2]=0;q[pj+40>>2]=0;q[pj+44>>2]=0;q[pj+80>>2]=0;q[pj+4>>2]=1065353216;q[pj+16>>2]=0;q[pj+20>>2]=0;q[pj+84>>2]=tj;q[pj>>2]=4380;wj=q[a+268>>2];q[pj+96>>2]=q[a+264>>2];q[pj+100>>2]=wj;wj=q[a+260>>2];q[pj+88>>2]=q[a+256>>2];q[pj+92>>2]=wj;q[pj+104>>2]=sj;tj=q[tj+188>>2];q[pj+8>>2]=q[tj+4>>2];q[pj+12>>2]=q[tj+8>>2];wj=pj+240|4;tj=0;while(1){q[pj+324>>2]=1065353216;q[pj+316>>2]=0;q[pj+320>>2]=0;q[pj+336>>2]=0;q[pj+340>>2]=0;q[pj+328>>2]=0;q[pj+332>>2]=0;q[pj+344>>2]=1065353216;q[pj+348>>2]=0;q[pj+240>>2]=1065353216;sj=wj;q[sj+8>>2]=0;q[sj+12>>2]=0;q[sj>>2]=0;q[sj+4>>2]=0;q[pj+260>>2]=1065353216;q[pj+272>>2]=0;q[pj+276>>2]=0;q[pj+264>>2]=0;q[pj+268>>2]=0;q[pj+280>>2]=1065353216;q[pj+300>>2]=0;q[pj+292>>2]=0;q[pj+296>>2]=0;q[pj+284>>2]=0;q[pj+288>>2]=0;sj=q[a+144>>2];q[pj+424>>2]=q[a+140>>2];q[pj+428>>2]=sj;sj=q[a+136>>2];q[pj+416>>2]=q[a+132>>2];q[pj+420>>2]=sj;sj=q[a+164>>2];q[pj+360>>2]=q[a+160>>2];q[pj+364>>2]=sj;sj=q[a+156>>2];q[pj+352>>2]=q[a+152>>2];q[pj+356>>2]=sj;rj=u[a+180>>2];yj=u[a+176>>2];qj=u[a+168>>2];uj=u[a+172>>2];q[pj+412>>2]=0;q[pj+396>>2]=0;q[pj+380>>2]=0;vj=x(x(2)/x(x(x(x(qj*qj)+x(uj*uj))+x(yj*yj))+x(rj*rj)));zj=x(yj*vj);xj=x(uj*zj);Dj=x(qj*vj);Ej=x(rj*Dj);u[pj+404>>2]=xj+Ej;Fj=x(qj*zj);vj=x(uj*vj);Gj=x(rj*vj);u[pj+400>>2]=Fj-Gj;u[pj+392>>2]=xj-Ej;xj=x(qj*vj);rj=x(rj*zj);u[pj+384>>2]=xj+rj;u[pj+376>>2]=Fj+Gj;u[pj+372>>2]=xj-rj;qj=x(qj*Dj);rj=x(uj*vj);u[pj+408>>2]=x(1)-x(qj+rj);uj=qj;qj=x(yj*zj);u[pj+388>>2]=x(1)-x(uj+qj);u[pj+368>>2]=x(1)-x(rj+qj);rj=u[a+196>>2];yj=u[a+192>>2];qj=u[a+184>>2];uj=u[a+188>>2];q[pj+348>>2]=0;q[pj+332>>2]=0;q[pj+316>>2]=0;vj=x(x(2)/x(x(x(x(qj*qj)+x(uj*uj))+x(yj*yj))+x(rj*rj)));zj=x(yj*vj);xj=x(uj*zj);Dj=x(qj*vj);Ej=x(rj*Dj);u[pj+340>>2]=xj+Ej;Fj=x(qj*zj);vj=x(uj*vj);Gj=x(rj*vj);u[pj+336>>2]=Fj-Gj;u[pj+328>>2]=xj-Ej;xj=x(qj*vj);rj=x(rj*zj);u[pj+320>>2]=xj+rj;u[pj+312>>2]=Fj+Gj;u[pj+308>>2]=xj-rj;qj=x(qj*Dj);rj=x(uj*vj);u[pj+344>>2]=x(1)-x(qj+rj);uj=qj;qj=x(yj*zj);u[pj+324>>2]=x(1)-x(uj+qj);u[pj+304>>2]=x(1)-x(rj+qj);qj=u[a+152>>2];rj=u[a+156>>2];uj=u[a+160>>2];q[pj+300>>2]=0;u[pj+296>>2]=uj-Cj;u[pj+292>>2]=rj-Bj;u[pj+288>>2]=qj-Aj;c:{if(r[a+250|0]){Ta(q[a+8>>2],q[a+12>>2],pj+368|0,pj+304|0,pj+112|0,u[Ch+56>>2]);if(u[pj+116>>2]<x(1)){break c}sj=q[a+8>>2];if(r[sj+204|0]&4){break c}Ta(sj,q[a+12>>2],pj+368|0,pj+240|0,pj,u[Ch+56>>2]);break c}La(Ch,q[a+12>>2],pj+368|0,pj+304|0,pj+112|0,u[Ch+56>>2]);if(r[q[a+8>>2]+204|0]&4|u[pj+116>>2]<x(1)){break c}La(Ch,q[a+12>>2],pj+368|0,pj+240|0,pj,u[Ch+56>>2]);}qj=u[a+20>>2];rj=qj<x(0)?x(-qj):x(0);d:{if(r[a+290|0]){Hj=0;if(u[pj+4>>2]<x(1)^1?!(u[pj+116>>2]<x(1)):0){break d}sj=q[a+8>>2];if(r[sj+204|0]&4){break d}Hj=n[q[q[a>>2]+56>>2]](a,sj,q[pj+192>>2])|0;break d}Hj=0;if(!(u[pj+4>>2]<x(1))){break d}sj=q[a+8>>2];if(r[sj+204|0]&4){break d}Hj=n[q[q[a>>2]+56>>2]](a,sj,q[pj+80>>2])|0;}qj=x(0);e:{f:{rj=x(rj*oj);qj=u[a+20>>2]<x(0)^1?qj:u[a+60>>2];if(!((rj>x(0)^-1|rj<qj^-1|Hj^-1|tj)&1)){if(r[a+248|0]|!r[a+249|0]){break f}tj=0;}Ch=q[a+8>>2];g:{if(!(r[Ch+204|0]&4|u[pj+116>>2]<x(1)^1)){if((n[q[q[a>>2]+56>>2]](a,Ch,q[pj+192>>2])|tj)&1){break g}break e}if(!tj){break e}}qj=u[a+136>>2];if(r[a+290|0]){oj=r[a+289|0]?u[pj+116>>2]:x(x(qj-u[pj+180>>2])*x(.5));}else {oj=u[pj+116>>2];}o[a+289|0]=0;o[a+249|0]=0;q[a+20>>2]=0;q[a+24>>2]=0;rj=x(x(1)-oj);u[a+132>>2]=x(rj*u[a+132>>2])+x(oj*u[a+152>>2]);u[a+136>>2]=x(qj*rj)+x(oj*u[a+156>>2]);u[a+140>>2]=x(rj*u[a+140>>2])+x(oj*u[a+160>>2]);break a}tj=q[pj+228>>2];q[a+152>>2]=q[pj+224>>2];q[a+156>>2]=tj;tj=q[pj+236>>2];q[a+160>>2]=q[pj+232>>2];q[a+164>>2]=tj;qj=x(qj+u[a+148>>2]);Aj=x(u[a+256>>2]*qj);u[a+152>>2]=u[a+152>>2]-Aj;Bj=x(qj*u[a+260>>2]);u[a+156>>2]=u[a+156>>2]-Bj;Cj=x(qj*u[a+264>>2]);u[a+160>>2]=u[a+160>>2]-Cj;tj=1;continue}break}o[a+289|0]=1;h:{if(!r[a+290|0]){break h}qj=u[a+20>>2];qj=x((qj<x(0)?x(-qj):x(0))*oj);oj=u[a+28>>2];if(qj>oj^1|(r[a+249|0]?!r[a+248|0]:0)){break h}oj=x(oj+u[a+148>>2]);u[a+160>>2]=x(Cj+u[a+160>>2])-x(oj*u[a+264>>2]);u[a+156>>2]=x(Bj+u[a+156>>2])-x(oj*u[a+260>>2]);u[a+152>>2]=x(Aj+u[a+152>>2])-x(u[a+256>>2]*oj);}Ch=q[a+156>>2];q[a+132>>2]=q[a+152>>2];q[a+136>>2]=Ch;Ch=q[a+164>>2];q[a+140>>2]=q[a+160>>2];q[a+144>>2]=Ch;}P=pj+432|0;}function Lk(a,Ch){var oj=x(0),Ij=x(0),Jj=x(0),Kj=x(0),Lj=x(0),Mj=x(0),Nj=x(0),Oj=x(0),Pj=x(0),Qj=x(0);oj=x(u[a+152>>2]-u[a+132>>2]);Jj=x(u[a+156>>2]-u[a+136>>2]);Ij=x(u[a+160>>2]-u[a+140>>2]);Mj=x(E(x(x(x(oj*oj)+x(Jj*Jj))+x(Ij*Ij))));if(!!(Mj>x(1.1920928955078125e-7))){Oj=u[Ch+8>>2];Lj=u[Ch>>2];Pj=u[Ch+4>>2];Ch=q[a+136>>2];q[a+152>>2]=q[a+132>>2];q[a+156>>2]=Ch;Ch=q[a+144>>2];q[a+160>>2]=q[a+140>>2];q[a+164>>2]=Ch;Kj=oj;oj=x(x(1)/Mj);Kj=x(Kj*oj);Nj=Kj;Qj=x(Kj*Lj);Kj=x(Jj*oj);Ij=x(Ij*oj);oj=x(x(Qj+x(Kj*Pj))+x(Ij*Oj));oj=x(oj+oj);Jj=x(Nj-x(Lj*oj));Nj=Jj;Ij=x(Ij-x(Oj*oj));oj=x(Kj-x(Pj*oj));Jj=x(x(1)/x(E(x(x(Ij*Ij)+x(x(Jj*Jj)+x(oj*oj))))));Kj=x(Nj*Jj);Nj=Lj;Ij=x(Ij*Jj);oj=x(oj*Jj);Lj=x(x(Oj*Ij)+x(x(Lj*Kj)+x(Pj*oj)));u[a+152>>2]=x(Mj*x(Kj-x(Nj*Lj)))+u[a+152>>2];u[a+156>>2]=x(Mj*x(oj-x(Pj*Lj)))+u[a+156>>2];u[a+160>>2]=x(Mj*x(Ij-x(Oj*Lj)))+u[a+160>>2];}}function Mk(a,Ch,Rj){a=a|0;Ch=Ch|0;Rj=Rj|0;var Sj=0,Tj=0;a=0;Sj=q[Rj+188>>2];Tj=q[Ch+188>>2];a:{if(!(q[Sj+8>>2]&q[Tj+4>>2])|!(q[Tj+8>>2]&q[Sj+4>>2])){break a}if(q[Ch+280>>2]){if(!n[q[q[Ch>>2]+12>>2]](Ch,Rj)){break a}}if(!q[Rj+280>>2]){return 1}a=n[q[q[Rj>>2]+12>>2]](Rj,Ch)|0;}return a|0}function Nk(a,Ch){var Rj=0,Uj=0,Vj=x(0),Wj=0,Xj=x(0),Yj=x(0),Zj=x(0),_j=0,$j=x(0),ak=x(0),bk=x(0),ck=x(0),dk=x(0),ek=x(0),fk=x(0),gk=x(0),hk=x(0),ik=0,jk=0,kk=0;_j=P-240|0;P=_j;if(!!(u[a+20>>2]<x(0))){kk=q[a+60>>2];ek=u[a+60>>2];}Rj=_j;q[Rj+152>>2]=1065353216;q[Rj+156>>2]=0;q[Rj+136>>2]=0;q[Rj+140>>2]=0;q[Rj+200>>2]=0;q[Rj+204>>2]=0;q[Rj+196>>2]=1065353216;q[Rj+216>>2]=1065353216;q[Rj+220>>2]=0;q[Rj+132>>2]=1065353216;q[Rj+180>>2]=0;q[Rj+184>>2]=0;q[Rj+176>>2]=1065353216;q[Rj+188>>2]=0;q[Rj+192>>2]=0;q[Rj+208>>2]=0;q[Rj+212>>2]=0;q[Rj+144>>2]=0;q[Rj+148>>2]=0;q[Rj+116>>2]=0;q[Rj+120>>2]=0;q[Rj+112>>2]=1065353216;q[Rj+124>>2]=0;q[Rj+128>>2]=0;Uj=q[a+144>>2];q[Rj+232>>2]=q[a+140>>2];q[Rj+236>>2]=Uj;Uj=q[a+136>>2];q[Rj+224>>2]=q[a+132>>2];q[Rj+228>>2]=Uj;fk=u[a+260>>2];Vj=u[a+24>>2];Vj=Vj>x(0)?Vj:x(0);u[a+156>>2]=x(x(ek*fk)+u[a+136>>2])+x(Vj*u[a+276>>2]);gk=u[a+256>>2];u[a+152>>2]=x(x(ek*gk)+u[a+132>>2])+x(u[a+272>>2]*Vj);q[a+164>>2]=0;hk=u[a+264>>2];u[a+160>>2]=x(x(ek*hk)+u[a+140>>2])+x(Vj*u[a+280>>2]);Uj=q[a+156>>2];ik=q[a+152>>2];q[a+132>>2]=ik;q[a+136>>2]=Uj;Wj=q[a+164>>2];jk=q[a+160>>2];q[a+140>>2]=jk;q[a+144>>2]=Wj;q[Rj+168>>2]=jk;q[Rj+172>>2]=Wj;q[Rj+160>>2]=ik;q[Rj+164>>2]=Uj;Xj=u[a+180>>2];$j=u[a+176>>2];Vj=u[a+168>>2];Yj=u[a+172>>2];q[Rj+220>>2]=0;q[Rj+204>>2]=0;bk=x(x(2)/x(x(x(x(Vj*Vj)+x(Yj*Yj))+x($j*$j))+x(Xj*Xj)));ck=x($j*bk);Zj=x(Yj*ck);ak=x(Vj*bk);dk=x(Xj*ak);u[Rj+212>>2]=Zj+dk;u[Rj+200>>2]=Zj-dk;Zj=x(Vj*ak);ak=Yj;Yj=x(Yj*bk);bk=x(ak*Yj);u[Rj+216>>2]=x(1)-x(Zj+bk);$j=x($j*ck);u[Rj+196>>2]=x(1)-x(Zj+$j);q[Rj+188>>2]=0;Zj=x(Vj*ck);ak=x(Xj*Yj);u[Rj+208>>2]=Zj-ak;Vj=x(Vj*Yj);Xj=x(Xj*ck);u[Rj+192>>2]=Vj+Xj;u[Rj+184>>2]=Zj+ak;u[Rj+180>>2]=Vj-Xj;u[Rj+176>>2]=x(1)-x(bk+$j);Xj=u[a+196>>2];$j=u[a+192>>2];Vj=u[a+184>>2];Yj=u[a+188>>2];q[Rj+156>>2]=0;q[Rj+140>>2]=0;bk=x(x(2)/x(x(x(x(Vj*Vj)+x(Yj*Yj))+x($j*$j))+x(Xj*Xj)));ck=x($j*bk);Zj=x(Yj*ck);ak=x(Vj*bk);dk=x(Xj*ak);u[Rj+148>>2]=Zj+dk;u[Rj+136>>2]=Zj-dk;Zj=x(Vj*ak);ak=Yj;Yj=x(Yj*bk);bk=x(ak*Yj);u[Rj+152>>2]=x(1)-x(Zj+bk);$j=x($j*ck);u[Rj+132>>2]=x(1)-x(Zj+$j);q[Rj+124>>2]=0;Zj=x(Vj*ck);ak=x(Xj*Yj);u[Rj+144>>2]=Zj-ak;Vj=x(Vj*Yj);Xj=x(Xj*ck);u[Rj+128>>2]=Vj+Xj;u[Rj+120>>2]=Zj+ak;u[Rj+116>>2]=Vj-Xj;u[Rj+112>>2]=x(1)-x(bk+$j);Uj=q[a+8>>2];Wj=q[a+48>>2];q[Rj+24>>2]=0;q[Rj+28>>2]=0;q[Rj+32>>2]=0;q[Rj+36>>2]=0;q[Rj+40>>2]=0;q[Rj+44>>2]=0;q[Rj+100>>2]=0;u[Rj+96>>2]=-hk;u[Rj+92>>2]=-fk;q[Rj+80>>2]=0;q[Rj+4>>2]=1065353216;q[Rj+16>>2]=0;q[Rj+20>>2]=0;q[Rj+104>>2]=Wj;u[Rj+88>>2]=-gk;q[Rj+84>>2]=Uj;q[Rj>>2]=4380;Wj=q[Uj+188>>2];q[Rj+8>>2]=q[Wj+4>>2];q[Rj+12>>2]=q[Wj+8>>2];a:{if(r[a+250|0]){Ta(Uj,q[a+12>>2],_j+176|0,_j+112|0,_j,u[Ch+56>>2]);break a}La(Ch,q[a+12>>2],_j+176|0,_j+112|0,_j,u[Ch+56>>2]);}b:{c:{d:{e:{if(!(u[_j+4>>2]<x(1))){break e}Rj=q[a+8>>2];if(r[Rj+204|0]&4){break e}if(!n[q[q[a>>2]+56>>2]](a,Rj,q[_j+80>>2])){break e}f:{if(!(x(x(x(u[_j+48>>2]*u[a+256>>2])+x(u[_j+52>>2]*u[a+260>>2]))+x(u[_j+56>>2]*u[a+264>>2]))>x(0))){break f}Vj=u[_j+4>>2];u[a+148>>2]=ek*Vj;if(r[a+288|0]){Xj=x(x(1)-Vj);u[a+132>>2]=x(Xj*u[a+132>>2])+x(Vj*u[a+152>>2]);u[a+136>>2]=x(Xj*u[a+136>>2])+x(Vj*u[a+156>>2]);u[a+140>>2]=x(Xj*u[a+140>>2])+x(Vj*u[a+160>>2]);break f}Rj=q[a+156>>2];q[a+132>>2]=q[a+152>>2];q[a+136>>2]=Rj;Rj=q[a+164>>2];q[a+140>>2]=q[a+160>>2];q[a+144>>2]=Rj;}Wj=q[a+144>>2];Rj=q[a+8>>2];Uj=Rj+60|0;q[Uj>>2]=q[a+140>>2];q[Uj+4>>2]=Wj;Uj=q[a+136>>2];q[Rj+52>>2]=q[a+132>>2];q[Rj+56>>2]=Uj;Uj=q[a+8>>2];q[Uj+304>>2]=q[Uj+304>>2]+1;Wj=q[Rj+16>>2];q[Uj+12>>2]=q[Rj+12>>2];q[Uj+16>>2]=Wj;Wj=q[Rj+8>>2];q[Uj+4>>2]=q[Rj+4>>2];q[Uj+8>>2]=Wj;Wj=q[Rj+32>>2];q[Uj+28>>2]=q[Rj+28>>2];q[Uj+32>>2]=Wj;Wj=q[Rj+24>>2];q[Uj+20>>2]=q[Rj+20>>2];q[Uj+24>>2]=Wj;Wj=q[Rj+48>>2];q[Uj+44>>2]=q[Rj+44>>2];q[Uj+48>>2]=Wj;Wj=q[Rj+40>>2];q[Uj+36>>2]=q[Rj+36>>2];q[Uj+40>>2]=Wj;Wj=q[Rj+64>>2];q[Uj+60>>2]=q[Rj+60>>2];q[Uj+64>>2]=Wj;Wj=q[Rj+56>>2];q[Uj+52>>2]=q[Rj+52>>2];q[Uj+56>>2]=Wj;o[a+220|0]=0;if(!Ga(a,Ch)){break c}o[a+220|0]=1;if(Ga(a,Ch)){break d}break c}q[a+148>>2]=kk;Ch=q[a+164>>2];q[a+140>>2]=q[a+160>>2];q[a+144>>2]=Ch;Ch=q[a+156>>2];q[a+132>>2]=q[a+152>>2];q[a+136>>2]=Ch;break b}o[a+220|0]=1;if(!Ga(a,Ch)){break c}o[a+220|0]=1;if(!Ga(a,Ch)){break c}o[a+220|0]=1;if(!Ga(a,Ch)){break c}o[a+220|0]=1;}Ch=q[a+8>>2];Rj=Ch+60|0;Uj=q[Rj+4>>2];q[a+160>>2]=q[Rj>>2];q[a+164>>2]=Uj;Rj=q[Ch+56>>2];q[a+152>>2]=q[Ch+52>>2];q[a+156>>2]=Rj;Rj=q[Ch+52>>2];Uj=q[Ch+56>>2];Wj=q[Ch+64>>2];q[a+140>>2]=q[Ch+60>>2];q[a+144>>2]=Wj;q[a+132>>2]=Rj;q[a+136>>2]=Uj;if(!(u[a+24>>2]>x(0))){break b}q[a+20>>2]=0;q[a+24>>2]=0;q[a+148>>2]=q[a+60>>2];}P=_j+240|0;}function Ok(a){a=a|0;var Ch=0;q[a>>2]=4248;Ch=q[a+212>>2];if(Ch){if(r[a+216|0]){if(Ch){q[6658]=q[6658]+1;n[q[5256]](Ch);}}q[a+212>>2]=0;}q[a+212>>2]=0;q[a+204>>2]=0;q[a+208>>2]=0;o[a+216|0]=1;if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}function Pk(a){a=a|0;var lk=0;q[a>>2]=4248;lk=q[a+212>>2];if(lk){if(r[a+216|0]){if(lk){q[6658]=q[6658]+1;n[q[5256]](lk);}}q[a+212>>2]=0;}q[a+212>>2]=0;q[a+204>>2]=0;q[a+208>>2]=0;o[a+216|0]=1;return a|0}function Qk(){var a=0,q=0;a=P-16|0;P=a;q=Z(324);Mb(q);P=a+16|0;return q|0}function Rk(mk){mk=mk|0;q[mk+232>>2]=0;}function Sk(mk,nk,ok,pk,qk,rk,sk,tk,uk,vk){mk=mk|0;nk=nk|0;ok=ok|0;pk=pk|0;qk=qk|0;rk=rk|0;sk=sk|0;tk=tk|0;uk=uk|0;vk=vk|0;vk=P-16|0;P=vk;n[q[5253]](4147);x(n[q[q[mk>>2]+44>>2]](mk,nk,ok,pk,qk,rk,sk,tk,uk));x(n[q[q[mk>>2]+48>>2]](mk,nk,ok,pk,qk,rk,sk,tk,uk));x(n[q[q[mk>>2]+36>>2]](mk,nk,ok,tk));n[q[5254]]();P=vk+16|0;return x(x(0))}function Tk(mk,nk,ok){var pk=0,qk=0,rk=x(0),sk=x(0),tk=x(0);pk=P-80|0;P=pk;a:{if(!q[mk+240>>2]){break a}u[mk+176>>2]=u[mk+64>>2]+u[mk+176>>2];u[mk+192>>2]=u[mk+80>>2]+u[mk+192>>2];u[mk+180>>2]=u[mk+68>>2]+u[mk+180>>2];u[mk+184>>2]=u[mk+72>>2]+u[mk+184>>2];u[mk+196>>2]=u[mk+84>>2]+u[mk+196>>2];u[mk+200>>2]=u[mk+88>>2]+u[mk+200>>2];b:{if(u[mk+144>>2]!=x(0)|u[mk+148>>2]!=x(0)|(u[mk+152>>2]!=x(0)|u[mk+160>>2]!=x(0))){break b}if(u[mk+164>>2]!=x(0)){break b}if(u[mk+168>>2]==x(0)){break a}}rk=u[mk+164>>2];sk=u[mk+168>>2];tk=u[mk+160>>2];q[pk+12>>2]=0;u[pk>>2]=tk*ok;u[pk+8>>2]=sk*ok;u[pk+4>>2]=rk*ok;Xa(mk,mk+144|0,pk,nk,pk+16|0);qk=q[pk+28>>2];q[mk+8>>2]=q[pk+24>>2];q[mk+12>>2]=qk;qk=q[pk+20>>2];q[mk>>2]=q[pk+16>>2];q[mk+4>>2]=qk;qk=q[pk+44>>2];q[mk+24>>2]=q[pk+40>>2];q[mk+28>>2]=qk;qk=q[pk+36>>2];q[mk+16>>2]=q[pk+32>>2];q[mk+20>>2]=qk;qk=q[pk+52>>2];q[mk+32>>2]=q[pk+48>>2];q[mk+36>>2]=qk;qk=q[pk+60>>2];q[mk+40>>2]=q[pk+56>>2];q[mk+44>>2]=qk;qk=q[pk+68>>2];q[mk+48>>2]=q[pk+64>>2];q[mk+52>>2]=qk;qk=q[pk+76>>2];q[mk+56>>2]=q[pk+72>>2];q[mk+60>>2]=qk;}P=pk+80|0;}function Uk(mk,nk,ok,uk){mk=mk|0;nk=nk|0;ok=ok|0;uk=uk|0;var vk=0,wk=x(0),xk=x(0),yk=0,zk=0,Ak=0,Bk=x(0),Ck=x(0),Dk=x(0),Ek=x(0),Fk=0,Gk=0;nk=q[uk+72>>2];a:{if(!(nk&4)){break a}yk=q[mk+28>>2];if((yk|0)<1){break a}zk=nk&16;Ak=q[mk+76>>2];Fk=q[mk+36>>2];nk=0;while(1){ok=Fk+w(nk,152)|0;vk=q[ok+132>>2];q[vk+132>>2]=q[ok+100>>2];ok=Ak+w(q[ok+140>>2],152)|0;q[vk+136>>2]=q[ok+100>>2];if(zk){q[vk+140>>2]=q[ok+252>>2];}nk=nk+1|0;if((yk|0)!=(nk|0)){continue}break}}Fk=q[mk+48>>2];if((Fk|0)>=1){Gk=q[mk+56>>2];vk=0;while(1){ok=w(vk,152)+Gk|0;yk=q[ok+132>>2];nk=q[yk+44>>2];if(nk){zk=q[yk+28>>2];Bk=u[zk+416>>2];Ck=u[ok+24>>2];Dk=u[zk+412>>2];Ek=u[ok+20>>2];wk=u[ok+100>>2];xk=x(x(1)/u[uk+12>>2]);u[nk>>2]=u[nk>>2]+x(x(x(u[ok+16>>2]*wk)*u[zk+408>>2])*xk);u[nk+4>>2]=x(x(Dk*x(wk*Ek))*xk)+u[nk+4>>2];u[nk+8>>2]=x(x(Bk*x(wk*Ck))*xk)+u[nk+8>>2];Ak=q[yk+32>>2];Bk=u[Ak+416>>2];Ck=u[ok+56>>2];Dk=u[Ak+412>>2];Ek=u[ok+52>>2];wk=u[ok+100>>2];xk=x(x(1)/u[uk+12>>2]);u[nk+32>>2]=u[nk+32>>2]+x(x(x(u[ok+48>>2]*wk)*u[Ak+408>>2])*xk);u[nk+36>>2]=x(x(Dk*x(wk*Ek))*xk)+u[nk+36>>2];u[nk+40>>2]=x(x(Bk*x(wk*Ck))*xk)+u[nk+40>>2];Bk=u[zk+612>>2];Ck=u[ok+8>>2];Dk=u[zk+608>>2];Ek=u[ok+4>>2];wk=u[ok+100>>2];xk=x(x(1)/u[uk+12>>2]);u[nk+16>>2]=u[nk+16>>2]+x(x(x(u[ok>>2]*u[zk+604>>2])*wk)*xk);u[nk+20>>2]=x(x(wk*x(Ek*Dk))*xk)+u[nk+20>>2];u[nk+24>>2]=x(x(wk*x(Ck*Bk))*xk)+u[nk+24>>2];Bk=u[Ak+612>>2];Ck=u[ok+40>>2];Dk=u[Ak+608>>2];Ek=u[ok+36>>2];wk=u[ok+100>>2];xk=x(x(1)/u[uk+12>>2]);u[nk+48>>2]=u[nk+48>>2]+x(x(x(u[ok+32>>2]*u[Ak+604>>2])*wk)*xk);u[nk+52>>2]=x(x(wk*x(Ek*Dk))*xk)+u[nk+52>>2];u[nk+56>>2]=x(x(wk*x(Ck*Bk))*xk)+u[nk+56>>2];}wk=u[ok+100>>2];u[yk+36>>2]=wk;if(!!(x(y(wk))>=u[yk+16>>2])){o[yk+20|0]=0;}vk=vk+1|0;if((Fk|0)!=(vk|0)){continue}break}}vk=q[mk+8>>2];if((vk|0)>=1){zk=q[mk+16>>2];Ak=0;while(1){yk=w(Ak,244);nk=yk+zk|0;ok=q[nk+240>>2];if(ok){b:{if(q[uk+52>>2]){Tk(nk,u[uk+12>>2],u[uk+60>>2]);zk=q[mk+16>>2];nk=yk+zk|0;wk=u[nk+176>>2];ok=q[nk+240>>2];xk=u[nk+184>>2];Bk=u[nk+180>>2];break b}wk=x(u[nk+64>>2]+u[nk+176>>2]);u[nk+176>>2]=wk;u[nk+192>>2]=u[nk+80>>2]+u[nk+192>>2];Bk=x(u[nk+68>>2]+u[nk+180>>2]);u[nk+180>>2]=Bk;xk=x(u[nk+72>>2]+u[nk+184>>2]);u[nk+184>>2]=xk;u[nk+196>>2]=u[nk+84>>2]+u[nk+196>>2];u[nk+200>>2]=u[nk+88>>2]+u[nk+200>>2];}nk=yk+zk|0;Ck=u[nk+212>>2];Dk=u[nk+216>>2];Ek=u[nk+208>>2];q[ok+384>>2]=0;u[ok+372>>2]=wk+Ek;q[ok+304>>2]=q[ok+304>>2]+1;u[ok+380>>2]=xk+Dk;u[ok+376>>2]=Bk+Ck;nk=yk+q[mk+16>>2]|0;wk=u[nk+228>>2];xk=u[nk+196>>2];Bk=u[nk+232>>2];Ck=u[nk+200>>2];Dk=u[nk+224>>2];Ek=u[nk+192>>2];nk=q[nk+240>>2];q[nk+400>>2]=0;u[nk+388>>2]=Ek+Dk;u[nk+396>>2]=Ck+Bk;u[nk+392>>2]=xk+wk;q[nk+304>>2]=q[nk+304>>2]+1;if(q[uk+52>>2]){ok=yk+q[mk+16>>2]|0;nk=q[ok+240>>2];q[nk+304>>2]=q[nk+304>>2]+1;vk=q[ok+12>>2];q[nk+12>>2]=q[ok+8>>2];q[nk+16>>2]=vk;vk=q[ok+4>>2];q[nk+4>>2]=q[ok>>2];q[nk+8>>2]=vk;vk=q[ok+28>>2];q[nk+28>>2]=q[ok+24>>2];q[nk+32>>2]=vk;vk=q[ok+20>>2];q[nk+20>>2]=q[ok+16>>2];q[nk+24>>2]=vk;vk=q[ok+36>>2];q[nk+36>>2]=q[ok+32>>2];q[nk+40>>2]=vk;vk=q[ok+44>>2];q[nk+44>>2]=q[ok+40>>2];q[nk+48>>2]=vk;vk=q[ok+60>>2];q[nk+60>>2]=q[ok+56>>2];q[nk+64>>2]=vk;vk=q[ok+52>>2];q[nk+52>>2]=q[ok+48>>2];q[nk+56>>2]=vk;}zk=q[mk+16>>2];q[q[(yk+zk|0)+240>>2]+212>>2]=-1;vk=q[mk+8>>2];}Ak=Ak+1|0;if((Ak|0)<(vk|0)){continue}break}}if(!(q[mk+28>>2]>-1|q[mk+32>>2]>-1)){nk=q[mk+36>>2];if(nk){if(r[mk+40|0]){if(nk){q[6658]=q[6658]+1;n[q[5256]](nk);}}q[mk+36>>2]=0;}q[mk+32>>2]=0;q[mk+36>>2]=0;o[mk+40|0]=1;}q[mk+28>>2]=0;if(!(q[mk+48>>2]>-1|q[mk+52>>2]>-1)){nk=q[mk+56>>2];if(nk){if(r[mk+60|0]){if(nk){q[6658]=q[6658]+1;n[q[5256]](nk);}}q[mk+56>>2]=0;}q[mk+52>>2]=0;q[mk+56>>2]=0;o[mk+60|0]=1;}q[mk+48>>2]=0;if(!(q[mk+68>>2]>-1|q[mk+72>>2]>-1)){nk=q[mk+76>>2];if(nk){if(r[mk+80|0]){if(nk){q[6658]=q[6658]+1;n[q[5256]](nk);}}q[mk+76>>2]=0;}q[mk+72>>2]=0;q[mk+76>>2]=0;o[mk+80|0]=1;}q[mk+68>>2]=0;if(!(q[mk+88>>2]>-1|q[mk+92>>2]>-1)){nk=q[mk+96>>2];if(nk){if(r[mk+100|0]){if(nk){q[6658]=q[6658]+1;n[q[5256]](nk);}}q[mk+96>>2]=0;}q[mk+92>>2]=0;q[mk+96>>2]=0;o[mk+100|0]=1;}q[mk+88>>2]=0;if(!(q[mk+8>>2]>-1|q[mk+12>>2]>-1)){nk=q[mk+16>>2];if(nk){if(r[mk+20|0]){if(nk){q[6658]=q[6658]+1;n[q[5256]](nk);}}q[mk+16>>2]=0;}q[mk+12>>2]=0;q[mk+16>>2]=0;o[mk+20|0]=1;}q[mk+8>>2]=0;return x(x(0))}function Vk(mk,nk,ok,uk,Hk,Ik,Jk,Kk,Lk){mk=mk|0;nk=nk|0;ok=ok|0;uk=uk|0;Hk=Hk|0;Ik=Ik|0;Jk=Jk|0;Kk=Kk|0;Lk=Lk|0;var Mk=0,Nk=0,Ok=0,Pk=x(0),Qk=0;Ok=P-16|0;P=Ok;n[q[5253]](4113);n[q[q[mk>>2]+32>>2]](mk,nk,ok,uk,Hk,Ik,Jk,Kk,Lk);Mk=q[mk+184>>2];Nk=q[Kk+20>>2];Nk=(Mk|0)>(Nk|0)?Mk:Nk;a:{if((Nk|0)<1){break a}Qk=Nk+ -1|0;Mk=0;while(1){Pk=x(n[q[q[mk>>2]+40>>2]](mk,Mk,nk,ok,uk,Hk,Ik,Jk,Kk,Lk));u[mk+228>>2]=Pk;if((Mk|0)>=(Qk|0)|Pk<=u[Kk+92>>2]){break a}Mk=Mk+1|0;if((Mk|0)<(Nk|0)){continue}break}}n[q[5254]]();P=Ok+16|0;return x(x(0))}function Wk(mk,nk,ok,uk,Hk,Ik,Jk,Kk,Lk){mk=mk|0;nk=nk|0;ok=ok|0;uk=uk|0;Hk=Hk|0;Ik=Ik|0;Kk=Kk|0;var Rk=x(0),Sk=x(0);a:{if(!q[Kk+52>>2]|q[Kk+20>>2]<1){break a}nk=0;while(1){Rk=x(0);ok=0;Hk=q[mk+28>>2];if((Hk|0)>=1){while(1){Sk=Rk;Ik=q[mk+16>>2];uk=q[mk+36>>2]+w(q[q[mk+116>>2]+(ok<<2)>>2],152)|0;Rk=x(n[q[mk+220>>2]](Ik+w(q[uk+144>>2],244)|0,w(q[uk+148>>2],244)+Ik|0,uk));Rk=x(Sk+x(Rk*Rk));ok=ok+1|0;if((Hk|0)!=(ok|0)){continue}break}}if(Rk<=u[Kk+92>>2]){break a}ok=q[Kk+20>>2];if((nk|0)>=(ok+ -1|0)){break a}nk=nk+1|0;if((nk|0)<(ok|0)){continue}break}}}function Xk(mk,nk,ok,uk,Hk,Ik,Jk,Kk,Lk,Tk){mk=mk|0;nk=nk|0;ok=ok|0;uk=uk|0;Hk=Hk|0;Ik=Ik|0;Jk=Jk|0;Kk=Kk|0;Lk=Lk|0;Tk=Tk|0;var Uk=x(0),Vk=x(0),Wk=0,Xk=0,Yk=x(0),Zk=0,_k=0,$k=0;a:{if(!(o[Lk+72|0]&1)){break a}Zk=q[mk+68>>2];Xk=q[mk+28>>2];Wk=q[mk+48>>2];if((Wk|0)>=1){Hk=w(q[mk+232>>2],1664525)+1013904223|0;b:{if((Wk|0)==1){break b}ok=2;uk=q[mk+136>>2];Ik=q[uk+4>>2];Hk=w(Hk,1664525)+1013904223|0;Tk=Hk^Hk>>>16;Tk=Tk>>>8^Tk;Tk=Tk>>>4^Tk;Tk=Tk>>>2^Tk;Tk=uk+(((Tk>>>1^Tk)&1)<<2)|0;q[uk+4>>2]=q[Tk>>2];q[Tk>>2]=Ik;if((Wk|0)==2){break b}while(1){Ik=uk+(ok<<2)|0;$k=q[Ik>>2];_k=Ik;Hk=w(Hk,1664525)+1013904223|0;ok=ok+1|0;Ik=Hk;c:{if(ok>>>0>65536){break c}Tk=Hk>>>16^Hk;Ik=Tk;if(ok>>>0>256){break c}Tk=Tk^Tk>>>8;Ik=Tk;if(ok>>>0>16){break c}Tk=Tk^Tk>>>4;Ik=Tk;if(ok>>>0>4){break c}Ik=Tk^Tk>>>2;}Ik=((Ik>>>0)%(ok>>>0)<<2)+uk|0;q[_k>>2]=q[Ik>>2];q[Ik>>2]=$k;if((ok|0)!=(Wk|0)){continue}break}}q[mk+232>>2]=Hk;}if(q[Lk+20>>2]<=(nk|0)){break a}if((Xk|0)>=1){Hk=w(q[mk+232>>2],1664525)+1013904223|0;d:{if((Xk|0)==1){break d}ok=2;uk=q[mk+116>>2];Ik=q[uk+4>>2];Hk=w(Hk,1664525)+1013904223|0;Tk=Hk^Hk>>>16;Tk=Tk>>>8^Tk;Tk=Tk>>>4^Tk;Tk=Tk>>>2^Tk;Tk=uk+(((Tk>>>1^Tk)&1)<<2)|0;q[uk+4>>2]=q[Tk>>2];q[Tk>>2]=Ik;if((Xk|0)==2){break d}while(1){Ik=uk+(ok<<2)|0;Tk=q[Ik>>2];_k=Ik;Hk=w(Hk,1664525)+1013904223|0;ok=ok+1|0;Ik=Hk;e:{if(ok>>>0>65536){break e}Wk=Hk>>>16^Hk;Ik=Wk;if(ok>>>0>256){break e}Wk=Wk^Wk>>>8;Ik=Wk;if(ok>>>0>16){break e}Wk=Wk^Wk>>>4;Ik=Wk;if(ok>>>0>4){break e}Ik=Wk^Wk>>>2;}Ik=((Ik>>>0)%(ok>>>0)<<2)+uk|0;q[_k>>2]=q[Ik>>2];q[Ik>>2]=Tk;if((ok|0)!=(Xk|0)){continue}break}}q[mk+232>>2]=Hk;}if((Zk|0)<1){break a}Hk=w(q[mk+232>>2],1664525)+1013904223|0;f:{if((Zk|0)==1){break f}ok=2;uk=q[mk+156>>2];Ik=q[uk+4>>2];Hk=w(Hk,1664525)+1013904223|0;Tk=Hk^Hk>>>16;Tk=Tk>>>8^Tk;Tk=Tk>>>4^Tk;Tk=Tk>>>2^Tk;Tk=uk+(((Tk>>>1^Tk)&1)<<2)|0;q[uk+4>>2]=q[Tk>>2];q[Tk>>2]=Ik;if((Zk|0)==2){break f}while(1){Ik=uk+(ok<<2)|0;Wk=q[Ik>>2];Tk=Ik;Hk=w(Hk,1664525)+1013904223|0;ok=ok+1|0;Ik=Hk;g:{if(ok>>>0>65536){break g}Xk=Hk>>>16^Hk;Ik=Xk;if(ok>>>0>256){break g}Xk=Xk^Xk>>>8;Ik=Xk;if(ok>>>0>16){break g}Xk=Xk^Xk>>>4;Ik=Xk;if(ok>>>0>4){break g}Ik=Xk^Xk>>>2;}Ik=((Ik>>>0)%(ok>>>0)<<2)+uk|0;q[Tk>>2]=q[Ik>>2];q[Ik>>2]=Wk;if((ok|0)!=(Zk|0)){continue}break}}q[mk+232>>2]=Hk;}Hk=q[mk+48>>2];if((Hk|0)>=1){ok=0;while(1){uk=q[mk+56>>2]+w(q[q[mk+136>>2]+(ok<<2)>>2],152)|0;if(q[uk+136>>2]>(nk|0)){Vk=Uk;Hk=q[mk+16>>2];Uk=x(n[q[mk+212>>2]](Hk+w(q[uk+144>>2],244)|0,Hk+w(q[uk+148>>2],244)|0,uk));Uk=x(Vk+x(Uk*Uk));Hk=q[mk+48>>2];}ok=ok+1|0;if((ok|0)<(Hk|0)){continue}break}}h:{if(q[Lk+20>>2]<=(nk|0)){break h}if((Kk|0)>=1){ok=0;while(1){nk=(ok<<2)+Jk|0;uk=q[nk>>2];if(r[uk+20|0]){uk=ib(mk,q[uk+28>>2],u[Lk+12>>2]);Hk=ib(mk,q[q[nk>>2]+32>>2],u[Lk+12>>2]);nk=q[nk>>2];Ik=w(uk,244);uk=q[mk+16>>2];n[q[q[nk>>2]+24>>2]](nk,Ik+uk|0,uk+w(Hk,244)|0,u[Lk+12>>2]);}ok=ok+1|0;if((Kk|0)!=(ok|0)){continue}break}}uk=q[mk+28>>2];nk=q[Lk+72>>2];i:{if(!(nk&512)){if((uk|0)>=1){ok=0;while(1){Vk=Uk;Hk=q[mk+16>>2];nk=q[mk+36>>2]+w(q[q[mk+116>>2]+(ok<<2)>>2],152)|0;Uk=x(n[q[mk+216>>2]](Hk+w(q[nk+144>>2],244)|0,Hk+w(q[nk+148>>2],244)|0,nk));Uk=x(Vk+x(Uk*Uk));ok=ok+1|0;if((uk|0)!=(ok|0)){continue}break}}ok=q[mk+68>>2];if((ok|0)<1){break i}uk=0;while(1){nk=q[mk+76>>2]+w(q[q[mk+156>>2]+(uk<<2)>>2],152)|0;Vk=u[(q[mk+36>>2]+w(q[nk+140>>2],152)|0)+100>>2];if(!!(Vk>x(0))){Yk=u[nk+104>>2];u[nk+124>>2]=Vk*Yk;u[nk+120>>2]=Vk*x(-Yk);Vk=Uk;Hk=q[mk+16>>2];Uk=x(n[q[mk+212>>2]](Hk+w(q[nk+144>>2],244)|0,Hk+w(q[nk+148>>2],244)|0,nk));Uk=x(Vk+x(Uk*Uk));}uk=uk+1|0;if((ok|0)!=(uk|0)){continue}break}break i}if((uk|0)<1){break i}Ik=nk&16?2:1;ok=0;while(1){Vk=Uk;Hk=q[mk+16>>2];nk=q[mk+36>>2]+w(q[q[mk+116>>2]+(ok<<2)>>2],152)|0;Uk=x(n[q[mk+216>>2]](Hk+w(q[nk+144>>2],244)|0,Hk+w(q[nk+148>>2],244)|0,nk));Uk=x(Vk+x(Uk*Uk));Hk=w(ok,Ik)<<2;Vk=u[nk+100>>2];Jk=Vk>x(0)^1;if(!Jk){nk=q[mk+76>>2]+w(q[Hk+q[mk+156>>2]>>2],152)|0;Yk=u[nk+104>>2];u[nk+124>>2]=Vk*Yk;u[nk+120>>2]=Vk*x(-Yk);Yk=Uk;Kk=q[mk+16>>2];Uk=x(n[q[mk+212>>2]](Kk+w(q[nk+144>>2],244)|0,Kk+w(q[nk+148>>2],244)|0,nk));Uk=x(Yk+x(Uk*Uk));}if(!(Jk|!(r[Lk+72|0]&16))){nk=q[mk+76>>2]+w(q[(Hk+q[mk+156>>2]|0)+4>>2],152)|0;Yk=u[nk+104>>2];u[nk+124>>2]=Vk*Yk;u[nk+120>>2]=Vk*x(-Yk);Vk=Uk;Hk=q[mk+16>>2];Uk=x(n[q[mk+212>>2]](Hk+w(q[nk+144>>2],244)|0,Hk+w(q[nk+148>>2],244)|0,nk));Uk=x(Vk+x(Uk*Uk));}ok=ok+1|0;if((uk|0)!=(ok|0)){continue}break}}ok=q[mk+88>>2];if((ok|0)<1){break h}uk=0;while(1){nk=q[mk+96>>2]+w(uk,152)|0;Vk=u[(q[mk+36>>2]+w(q[nk+140>>2],152)|0)+100>>2];if(!!(Vk>x(0))){Yk=Vk;Vk=u[nk+104>>2];Yk=x(Yk*Vk);Vk=Yk>Vk?Vk:Yk;u[nk+124>>2]=Vk;u[nk+120>>2]=-Vk;Vk=Uk;Hk=q[mk+16>>2];Uk=x(n[q[mk+212>>2]](Hk+w(q[nk+144>>2],244)|0,Hk+w(q[nk+148>>2],244)|0,nk));Uk=x(Vk+x(Uk*Uk));}uk=uk+1|0;if((ok|0)!=(uk|0)){continue}break}}return x(Uk)}function Yk(mk,nk,ok,uk,Hk,Ik,Jk,Kk,Lk){mk=mk|0;nk=nk|0;ok=ok|0;uk=uk|0;Hk=Hk|0;Ik=Ik|0;Jk=Jk|0;Kk=Kk|0;Lk=Lk|0;var Tk=0,al=0,bl=0,cl=0,dl=x(0),el=0,fl=0,gl=x(0),hl=x(0),il=0,jl=x(0),kl=x(0),ll=x(0),ml=x(0),nl=x(0),ol=x(0),pl=x(0),ql=x(0),rl=x(0),sl=0,tl=x(0),ul=x(0),vl=x(0),wl=x(0),xl=x(0),yl=0,zl=x(0),Al=0,Bl=0,Cl=0,Dl=0,El=x(0),Fl=x(0),Gl=x(0),Hl=x(0),Il=x(0),Jl=x(0),Kl=x(0),Ll=x(0),Ml=x(0),Nl=x(0),Ol=x(0),Pl=x(0),Ql=x(0),Rl=x(0),Sl=x(0),Tl=x(0),Ul=x(0),Vl=x(0),Wl=x(0),Xl=x(0);fl=P-256|0;P=fl;q[mk+188>>2]=-1;n[q[5253]](4084);Lk=q[Kk+72>>2];if((Lk|0)!=q[mk+224>>2]){q[mk+224>>2]=Lk;q[mk+220>>2]=183;q[mk+216>>2]=182;q[mk+212>>2]=181;}Lk=0;q[mk+184>>2]=0;if((ok|0)>0){while(1){q[q[(Lk<<2)+nk>>2]+212>>2]=-1;Lk=Lk+1|0;if((Lk|0)!=(ok|0)){continue}break}}bl=q[mk+12>>2];if((bl|0)<=(ok|0)){bl=ok+1|0;Lk=0;a:{if(!bl){break a}q[6657]=q[6657]+1;Lk=n[q[5255]](w(bl,244),16)|0;}il=q[mk+8>>2];if((il|0)>=1){while(1){Tk=w(cl,244);al=Tk+Lk|0;Tk=Tk+q[mk+16>>2]|0;sl=q[Tk+4>>2];q[al>>2]=q[Tk>>2];q[al+4>>2]=sl;el=q[Tk+12>>2];q[al+8>>2]=q[Tk+8>>2];q[al+12>>2]=el;el=q[Tk+28>>2];q[al+24>>2]=q[Tk+24>>2];q[al+28>>2]=el;el=q[Tk+20>>2];q[al+16>>2]=q[Tk+16>>2];q[al+20>>2]=el;el=q[Tk+44>>2];q[al+40>>2]=q[Tk+40>>2];q[al+44>>2]=el;el=q[Tk+36>>2];q[al+32>>2]=q[Tk+32>>2];q[al+36>>2]=el;el=q[Tk+52>>2];q[al+48>>2]=q[Tk+48>>2];q[al+52>>2]=el;el=q[Tk+60>>2];q[al+56>>2]=q[Tk+56>>2];q[al+60>>2]=el;va(al- -64|0,Tk- -64|0,180);cl=cl+1|0;if((il|0)!=(cl|0)){continue}break}}Tk=q[mk+16>>2];if(Tk){if(r[mk+20|0]){if(Tk){q[6658]=q[6658]+1;n[q[5256]](Tk);}}q[mk+16>>2]=0;}q[mk+16>>2]=Lk;q[mk+12>>2]=bl;o[mk+20|0]=1;}al=_(fl,0,244);Lk=q[mk+8>>2];if((Lk|0)<=-1){if((bl|0)<=-1){Tk=q[mk+16>>2];if(Tk){if(r[mk+20|0]){if(Tk){q[6658]=q[6658]+1;n[q[5256]](Tk);}}q[mk+16>>2]=0;}q[mk+12>>2]=0;q[mk+16>>2]=0;o[mk+20|0]=1;}cl=al- -64|0;while(1){bl=q[al+4>>2];Tk=q[mk+16>>2]+w(Lk,244)|0;q[Tk>>2]=q[al>>2];q[Tk+4>>2]=bl;bl=q[al+12>>2];q[Tk+8>>2]=q[al+8>>2];q[Tk+12>>2]=bl;bl=q[al+28>>2];q[Tk+24>>2]=q[al+24>>2];q[Tk+28>>2]=bl;bl=q[al+20>>2];q[Tk+16>>2]=q[al+16>>2];q[Tk+20>>2]=bl;bl=q[al+44>>2];q[Tk+40>>2]=q[al+40>>2];q[Tk+44>>2]=bl;bl=q[al+36>>2];q[Tk+32>>2]=q[al+32>>2];q[Tk+36>>2]=bl;bl=q[al+52>>2];q[Tk+48>>2]=q[al+48>>2];q[Tk+52>>2]=bl;bl=q[al+60>>2];q[Tk+56>>2]=q[al+56>>2];q[Tk+60>>2]=bl;va(Tk- -64|0,cl,180);Tk=Lk+1|0;bl=Tk>>>0>=Lk>>>0;Lk=Tk;if(bl){continue}break}}q[mk+8>>2]=0;if((ok|0)>=1){Lk=0;while(1){Tk=(Lk<<2)+nk|0;bl=ib(mk,q[Tk>>2],u[Kk+12>>2]);cl=q[Tk>>2];b:{if(!cl|!(q[cl+252>>2]&2)|u[cl+404>>2]==x(0)){break b}fl=q[mk+16>>2];Tk=q[cl+564>>2];if(Tk&2){Un(al,cl,u[Kk+84>>2]);jl=u[cl+364>>2];kl=u[cl+332>>2];ql=u[cl+348>>2];ol=u[cl+360>>2];nl=u[cl+328>>2];pl=u[cl+344>>2];Tk=fl+w(bl,244)|0;dl=u[al>>2];gl=u[al+4>>2];ll=u[al+8>>2];hl=u[Kk+12>>2];u[Tk+224>>2]=u[Tk+224>>2]-x(x(x(x(dl*u[cl+324>>2])+x(gl*u[cl+340>>2]))+x(ll*u[cl+356>>2]))*hl);u[Tk+228>>2]=u[Tk+228>>2]-x(hl*x(x(x(dl*nl)+x(gl*pl))+x(ll*ol)));u[Tk+232>>2]=u[Tk+232>>2]-x(hl*x(x(x(dl*kl)+x(gl*ql))+x(ll*jl)));Tk=q[cl+564>>2];}if(Tk&4){Sn(al,cl,u[Kk+12>>2]);dl=u[al+8>>2];gl=u[al+4>>2];Tk=fl+w(bl,244)|0;u[Tk+224>>2]=u[al>>2]+u[Tk+224>>2];u[Tk+228>>2]=gl+u[Tk+228>>2];u[Tk+232>>2]=dl+u[Tk+232>>2];Tk=q[cl+564>>2];}if(!(Tk&8)){break b}Tn(al,cl,u[Kk+12>>2]);dl=u[al+8>>2];gl=u[al+4>>2];Tk=fl+w(bl,244)|0;u[Tk+224>>2]=u[al>>2]+u[Tk+224>>2];u[Tk+228>>2]=gl+u[Tk+228>>2];u[Tk+232>>2]=dl+u[Tk+232>>2];}Lk=Lk+1|0;if((Lk|0)!=(ok|0)){continue}break}}Lk=0;if((Jk|0)>0){while(1){nk=q[(Lk<<2)+Ik>>2];n[q[q[nk>>2]+8>>2]](nk);q[nk+36>>2]=0;Lk=Lk+1|0;if((Lk|0)!=(Jk|0)){continue}break}}ok=q[mk+168>>2];if(!((ok|0)>=(Jk|0)|q[mk+172>>2]>=(Jk|0))){c:{if(!Jk){nk=0;break c}q[6657]=q[6657]+1;nk=n[q[5255]](Jk<<3,16)|0;ok=q[mk+168>>2];}if((ok|0)>=1){Lk=0;while(1){Tk=Lk<<3;cl=Tk+nk|0;Tk=Tk+q[mk+176>>2]|0;bl=q[Tk+4>>2];q[cl>>2]=q[Tk>>2];q[cl+4>>2]=bl;Lk=Lk+1|0;if((Lk|0)!=(ok|0)){continue}break}}ok=q[mk+176>>2];if(ok){if(r[mk+180|0]){if(ok){q[6658]=q[6658]+1;n[q[5256]](ok);}}q[mk+176>>2]=0;}q[mk+176>>2]=nk;q[mk+172>>2]=Jk;o[mk+180|0]=1;}q[mk+168>>2]=Jk;nk=0;if((Jk|0)>=1){Lk=0;while(1){cl=q[mk+176>>2];bl=(Lk<<2)+Ik|0;ok=q[bl>>2];Tk=q[ok+44>>2];if(Tk){q[Tk>>2]=0;q[Tk+4>>2]=0;q[Tk+56>>2]=0;q[Tk+60>>2]=0;q[Tk+48>>2]=0;q[Tk+52>>2]=0;q[Tk+40>>2]=0;q[Tk+44>>2]=0;q[Tk+32>>2]=0;q[Tk+36>>2]=0;q[Tk+24>>2]=0;q[Tk+28>>2]=0;q[Tk+16>>2]=0;q[Tk+20>>2]=0;q[Tk+8>>2]=0;q[Tk+12>>2]=0;ok=q[bl>>2];}Tk=cl+(Lk<<3)|0;d:{if(r[ok+20|0]){n[q[q[ok>>2]+16>>2]](ok,Tk);ok=q[Tk>>2];break d}q[Tk>>2]=0;q[Tk+4>>2]=0;ok=0;}nk=ok+nk|0;Lk=Lk+1|0;if((Lk|0)!=(Jk|0)){continue}break}}ok=q[mk+48>>2];if(!((ok|0)>=(nk|0)|q[mk+52>>2]>=(nk|0))){e:{if(!nk){cl=0;break e}q[6657]=q[6657]+1;cl=n[q[5255]](w(nk,152),16)|0;ok=q[mk+48>>2];}if((ok|0)>=1){Lk=0;while(1){Tk=w(Lk,152);va(Tk+cl|0,Tk+q[mk+56>>2]|0,152);Lk=Lk+1|0;if((Lk|0)!=(ok|0)){continue}break}}ok=q[mk+56>>2];if(ok){if(r[mk+60|0]){if(ok){q[6658]=q[6658]+1;n[q[5256]](ok);}}q[mk+56>>2]=0;}q[mk+56>>2]=cl;q[mk+52>>2]=nk;o[mk+60|0]=1;}q[mk+48>>2]=nk;if((Jk|0)>=1){Lk=q[mk+176>>2];while(1){Bl=yl<<3;sl=Bl+Lk|0;if(q[sl>>2]){Al=(yl<<2)+Ik|0;el=q[Al>>2];ok=q[el+32>>2];nk=q[mk+56>>2];Lk=q[el+28>>2];bl=ib(mk,Lk,u[Kk+12>>2]);il=ib(mk,ok,u[Kk+12>>2]);Cl=q[mk+16>>2];Tk=q[el+24>>2];fl=(Tk|0)>0?Tk:q[Kk+20>>2];if((fl|0)>q[mk+184>>2]){q[mk+184>>2]=fl;}cl=nk+w(Dl,152)|0;nk=0;if(q[sl>>2]>=1){while(1){Tk=_(cl+w(nk,152)|0,0,152);q[Tk+120>>2]=-8388609;q[Tk+124>>2]=2139095039;q[Tk+148>>2]=il;q[Tk+144>>2]=bl;q[Tk+96>>2]=0;q[Tk+100>>2]=0;q[Tk+136>>2]=fl;nk=nk+1|0;if((nk|0)<q[sl>>2]){continue}break}}fl=Cl+w(bl,244)|0;nk=fl;q[nk+64>>2]=0;q[nk+68>>2]=0;q[nk+144>>2]=0;q[nk+148>>2]=0;q[nk+88>>2]=0;q[nk+92>>2]=0;q[nk+80>>2]=0;q[nk+84>>2]=0;q[nk+72>>2]=0;q[nk+76>>2]=0;q[nk+152>>2]=0;q[nk+156>>2]=0;q[nk+160>>2]=0;q[nk+164>>2]=0;q[nk+168>>2]=0;q[nk+172>>2]=0;il=Cl+w(il,244)|0;nk=il;q[nk+88>>2]=0;q[nk+92>>2]=0;q[nk+80>>2]=0;q[nk+84>>2]=0;q[nk+72>>2]=0;q[nk+76>>2]=0;q[nk+64>>2]=0;q[nk+68>>2]=0;q[nk+144>>2]=0;q[nk+148>>2]=0;q[nk+152>>2]=0;q[nk+156>>2]=0;q[nk+160>>2]=0;q[nk+164>>2]=0;q[nk+168>>2]=0;q[nk+172>>2]=0;u[al>>2]=x(1)/u[Kk+12>>2];nk=q[Kk+32>>2];q[al+28>>2]=cl+112;q[al+24>>2]=38;q[al+20>>2]=cl+32;q[al+16>>2]=cl+48;q[al+12>>2]=cl;q[al+8>>2]=cl+16;q[al+4>>2]=nk;q[cl+116>>2]=q[Kk+40>>2];nk=q[Kk+4>>2];q[al+40>>2]=cl+124;q[al+36>>2]=cl+120;q[al+32>>2]=cl+116;q[al+48>>2]=nk;q[al+44>>2]=q[Kk+20>>2];nk=q[Al>>2];n[q[q[nk>>2]+20>>2]](nk,al);if(q[sl>>2]>=1){Tk=0;while(1){nk=cl+w(Tk,152)|0;dl=u[q[Al>>2]+16>>2];if(!!(u[nk+124>>2]>=dl)){u[nk+124>>2]=dl;}dl=x(-dl);if(!!(u[nk+120>>2]<=dl)){u[nk+120>>2]=dl;}q[nk+132>>2]=el;bl=q[el+28>>2];hl=u[bl+328>>2];jl=u[bl+332>>2];kl=u[bl+608>>2];ql=u[bl+348>>2];ol=u[bl+340>>2];nl=u[bl+344>>2];dl=u[bl+612>>2];ll=u[bl+364>>2];gl=u[bl+356>>2];pl=u[bl+360>>2];tl=u[bl+604>>2];ml=u[bl+324>>2];q[nk+76>>2]=0;rl=dl;dl=u[nk>>2];ul=x(gl*dl);gl=u[nk+4>>2];vl=ll;ll=u[nk+8>>2];u[nk+72>>2]=rl*x(x(ul+x(pl*gl))+x(vl*ll));u[nk+68>>2]=kl*x(x(x(dl*ol)+x(gl*nl))+x(ll*ql));u[nk+64>>2]=tl*x(x(x(ml*dl)+x(hl*gl))+x(jl*ll));bl=q[el+32>>2];ql=u[bl+328>>2];ol=u[bl+332>>2];nl=u[bl+608>>2];pl=u[bl+348>>2];tl=u[bl+340>>2];ml=u[bl+344>>2];hl=u[bl+612>>2];kl=u[bl+364>>2];jl=u[bl+356>>2];wl=u[bl+360>>2];xl=u[bl+604>>2];ul=u[bl+324>>2];q[nk+92>>2]=0;rl=hl;hl=u[nk+32>>2];zl=x(jl*hl);jl=u[nk+36>>2];vl=kl;kl=u[nk+40>>2];u[nk+88>>2]=rl*x(x(zl+x(wl*jl))+x(vl*kl));u[nk+84>>2]=nl*x(x(x(hl*tl)+x(jl*ml))+x(kl*pl));u[nk+80>>2]=xl*x(x(x(ul*hl)+x(ql*jl))+x(ol*kl));ql=x(0);ol=u[nk+16>>2];nl=u[Lk+404>>2];pl=u[nk+20>>2];tl=u[nk+24>>2];rl=x(x(x(x(ol*x(ol*nl))+x(pl*x(nl*pl)))+x(tl*x(nl*tl)))+x(x(x(dl*x(x(x(dl*u[Lk+324>>2])+x(gl*u[Lk+328>>2]))+x(ll*u[Lk+332>>2])))+x(gl*x(x(x(dl*u[Lk+340>>2])+x(gl*u[Lk+344>>2]))+x(ll*u[Lk+348>>2]))))+x(ll*x(x(x(dl*u[Lk+356>>2])+x(gl*u[Lk+360>>2]))+x(ll*u[Lk+364>>2])))));nl=u[nk+48>>2];ml=u[ok+404>>2];wl=u[nk+52>>2];xl=u[nk+56>>2];ml=x(x(rl+x(x(x(nl*x(nl*ml))+x(wl*x(ml*wl)))+x(xl*x(ml*xl))))+x(x(x(hl*x(x(x(hl*u[ok+324>>2])+x(jl*u[ok+328>>2]))+x(kl*u[ok+332>>2])))+x(jl*x(x(x(hl*u[ok+340>>2])+x(jl*u[ok+344>>2]))+x(kl*u[ok+348>>2]))))+x(kl*x(x(x(hl*u[ok+356>>2])+x(jl*u[ok+360>>2]))+x(kl*u[ok+364>>2])))));ml=x(y(ml))>x(1.1920928955078125e-7)?x(x(1)/ml):x(0);u[nk+108>>2]=ml;ul=x(0);rl=x(0);vl=x(0);zl=x(0);El=x(0);Fl=x(0);if(q[fl+240>>2]){Fl=u[fl+232>>2];El=u[fl+228>>2];zl=u[fl+224>>2];rl=u[fl+212>>2];vl=u[fl+208>>2];ul=u[fl+216>>2];}Gl=x(0);Hl=x(0);Il=x(0);Jl=x(0);Kl=x(0);if(q[il+240>>2]){Kl=u[il+232>>2];Jl=u[il+228>>2];Il=u[il+224>>2];Gl=u[il+212>>2];Hl=u[il+208>>2];ql=u[il+216>>2];}Ll=u[Lk+380>>2];Ml=u[Lk+372>>2];Nl=u[Lk+376>>2];Ol=u[Lk+396>>2];Pl=u[Lk+388>>2];Ql=u[Lk+392>>2];Rl=u[ok+380>>2];Sl=u[ok+372>>2];Tl=u[ok+376>>2];Ul=u[ok+396>>2];Vl=u[ok+388>>2];Wl=u[ok+392>>2];Xl=u[al+48>>2];q[nk+100>>2]=0;u[nk+112>>2]=x(ml*u[nk+112>>2])+x(ml*x(x(0)-x(Xl*x(x(x(x(x(ol*x(vl+Ml))+x(pl*x(rl+Nl)))+x(tl*x(ul+Ll)))+x(x(x(dl*x(zl+Pl))+x(gl*x(El+Ql)))+x(ll*x(Fl+Ol))))+x(x(x(x(nl*x(Hl+Sl))+x(wl*x(Gl+Tl)))+x(xl*x(ql+Rl)))+x(x(x(hl*x(Il+Vl))+x(jl*x(Jl+Wl)))+x(kl*x(Kl+Ul))))))));Tk=Tk+1|0;if((Tk|0)<q[sl>>2]){continue}break}}Lk=q[mk+176>>2];}Dl=q[Lk+Bl>>2]+Dl|0;yl=yl+1|0;if((yl|0)!=(Jk|0)){continue}break}}n[q[q[mk>>2]+28>>2]](mk,uk,Hk,Kk);uk=q[mk+68>>2];ok=q[mk+28>>2];Tk=q[mk+128>>2];Hk=q[mk+48>>2];if(!((Tk|0)>=(Hk|0)|q[mk+132>>2]>=(Hk|0))){Lk=0;nk=0;if(Hk){q[6657]=q[6657]+1;nk=n[q[5255]](Hk<<2,16)|0;Tk=q[mk+128>>2];}Ik=q[mk+136>>2];f:{g:{if((Tk|0)>=1){while(1){Jk=Lk<<2;q[Jk+nk>>2]=q[Ik+Jk>>2];Lk=Lk+1|0;if((Tk|0)!=(Lk|0)){continue}break g}}if(!Ik){break f}}if(r[mk+140|0]){if(Ik){q[6658]=q[6658]+1;n[q[5256]](Ik);}}q[mk+136>>2]=0;}q[mk+136>>2]=nk;q[mk+132>>2]=Hk;o[mk+140|0]=1;}q[mk+128>>2]=Hk;h:{if(r[Kk+72|0]&16){Tk=q[mk+108>>2];Jk=ok<<1;if(!((Tk|0)>=(Jk|0)|q[mk+112>>2]>=(Jk|0))){Lk=0;nk=0;if(ok){q[6657]=q[6657]+1;nk=n[q[5255]](ok<<3,16)|0;Tk=q[mk+108>>2];}Ik=q[mk+116>>2];i:{j:{if((Tk|0)>=1){while(1){Kk=Lk<<2;q[Kk+nk>>2]=q[Ik+Kk>>2];Lk=Lk+1|0;if((Tk|0)!=(Lk|0)){continue}break j}}if(!Ik){break i}}if(r[mk+120|0]){if(Ik){q[6658]=q[6658]+1;n[q[5256]](Ik);}}q[mk+116>>2]=0;}q[mk+116>>2]=nk;q[mk+112>>2]=Jk;o[mk+120|0]=1;}q[mk+108>>2]=Jk;break h}Tk=q[mk+108>>2];if(!((Tk|0)>=(ok|0)|q[mk+112>>2]>=(ok|0))){Lk=0;nk=0;if(ok){q[6657]=q[6657]+1;nk=n[q[5255]](ok<<2,16)|0;Tk=q[mk+108>>2];}Ik=q[mk+116>>2];k:{l:{if((Tk|0)>=1){while(1){Jk=Lk<<2;q[Jk+nk>>2]=q[Ik+Jk>>2];Lk=Lk+1|0;if((Tk|0)!=(Lk|0)){continue}break l}}if(!Ik){break k}}if(r[mk+120|0]){if(Ik){q[6658]=q[6658]+1;n[q[5256]](Ik);}}q[mk+116>>2]=0;}q[mk+116>>2]=nk;q[mk+112>>2]=ok;o[mk+120|0]=1;}q[mk+108>>2]=ok;}Tk=q[mk+148>>2];if(!((Tk|0)>=(uk|0)|q[mk+152>>2]>=(uk|0))){Lk=0;nk=0;if(uk){q[6657]=q[6657]+1;nk=n[q[5255]](uk<<2,16)|0;Tk=q[mk+148>>2];}Ik=q[mk+156>>2];m:{n:{if((Tk|0)>=1){while(1){Jk=Lk<<2;q[Jk+nk>>2]=q[Ik+Jk>>2];Lk=Lk+1|0;if((Tk|0)!=(Lk|0)){continue}break n}}if(!Ik){break m}}if(r[mk+160|0]){if(Ik){q[6658]=q[6658]+1;n[q[5256]](Ik);}}q[mk+156>>2]=0;}q[mk+156>>2]=nk;q[mk+152>>2]=uk;o[mk+160|0]=1;}q[mk+148>>2]=uk;if((Hk|0)>=1){nk=q[mk+136>>2];Lk=0;while(1){q[nk+(Lk<<2)>>2]=Lk;Lk=Lk+1|0;if((Hk|0)!=(Lk|0)){continue}break}}if((ok|0)>=1){nk=q[mk+116>>2];Lk=0;while(1){q[nk+(Lk<<2)>>2]=Lk;Lk=Lk+1|0;if((ok|0)!=(Lk|0)){continue}break}}if((uk|0)>=1){mk=q[mk+156>>2];Lk=0;while(1){q[mk+(Lk<<2)>>2]=Lk;Lk=Lk+1|0;if((uk|0)!=(Lk|0)){continue}break}}n[q[5254]]();P=al+256|0;return x(x(0))}function Zk(mk,nk,ok,uk){mk=mk|0;nk=nk|0;ok=ok|0;uk=uk|0;var Hk=0;if((ok|0)>=1){while(1){_k(mk,q[(Hk<<2)+nk>>2],uk);Hk=Hk+1|0;if((Hk|0)!=(ok|0)){continue}break}}}function _k(mk,nk,ok){var uk=x(0),Ik=0,Jk=x(0),Kk=x(0),Lk=0,Yl=x(0),Zl=0,_l=0,$l=0,am=x(0),bm=x(0),cm=0,dm=x(0),em=x(0),fm=x(0),gm=x(0),hm=x(0),im=0,jm=x(0),km=x(0),lm=x(0),mm=0,nm=x(0),om=0,pm=0,qm=0,rm=0,sm=x(0),tm=x(0),um=x(0),vm=x(0),wm=x(0),xm=x(0),ym=0,zm=0,Am=0,Bm=x(0),Cm=0,Dm=x(0),Em=x(0),Fm=x(0),Gm=x(0),Hm=x(0),Im=x(0),Jm=0,Km=0;Ik=P-80|0;P=Ik;Zl=q[nk+840>>2];_l=q[nk+836>>2];om=ib(mk,_l,u[ok+12>>2]);pm=ib(mk,Zl,u[ok+12>>2]);$l=q[mk+16>>2];cm=$l+w(om,244)|0;uk=u[cm+128>>2];Kk=x(uk*uk);uk=u[cm+132>>2];Kk=x(Kk+x(uk*uk));uk=u[cm+136>>2];a:{if(!!(x(Kk+x(uk*uk))<x(1.4210854715202004e-14))){cm=$l+w(pm,244)|0;uk=u[cm+128>>2];Kk=x(uk*uk);uk=u[cm+132>>2];Kk=x(Kk+x(uk*uk));uk=u[cm+136>>2];if(x(Kk+x(uk*uk))<x(1.4210854715202004e-14)){break a}}im=q[nk+844>>2];if((im|0)<1){break a}qm=$l+w(pm,244)|0;Jm=qm;rm=$l+w(om,244)|0;Km=rm;while(1){Lk=w(Cm,208)+nk|0;if(!!(u[Lk+84>>2]<=u[nk+852>>2])){zm=Lk+4|0;cm=q[mk+28>>2];im=cm;b:{if((cm|0)!=q[mk+32>>2]){break b}im=cm;mm=cm?cm<<1:1;if((cm|0)>=(mm|0)){break b}im=0;$l=cm;ym=0;if(mm){q[6657]=q[6657]+1;ym=n[q[5255]](w(mm,152),16)|0;$l=q[mk+28>>2];}if(($l|0)>=1){while(1){Am=w(im,152);va(Am+ym|0,q[mk+36>>2]+Am|0,152);im=im+1|0;if(($l|0)!=(im|0)){continue}break}}$l=q[mk+36>>2];if($l){if(r[mk+40|0]){if($l){q[6658]=q[6658]+1;n[q[5256]]($l);}}q[mk+36>>2]=0;}q[mk+36>>2]=ym;o[mk+40|0]=1;q[mk+32>>2]=mm;im=q[mk+28>>2];}q[mk+28>>2]=im+1;ym=q[mk+36>>2]+w(cm,152)|0;q[ym+148>>2]=pm;q[ym+144>>2]=om;q[ym+132>>2]=zm;sm=u[Lk+52>>2];hm=u[Lk+56>>2];am=u[Lk+60>>2];Yl=u[_l+52>>2];Jk=u[_l+56>>2];uk=u[_l+60>>2];q[Ik+76>>2]=0;nm=x(am-uk);u[Ik+72>>2]=nm;em=x(hm-Jk);u[Ik+68>>2]=em;bm=x(sm-Yl);u[Ik+64>>2]=bm;sm=u[Lk+36>>2];hm=u[Lk+40>>2];am=u[Lk+44>>2];Yl=u[Zl+52>>2];Jk=u[Zl+56>>2];uk=u[Zl+60>>2];q[Ik+60>>2]=0;Kk=x(am-uk);u[Ik+56>>2]=Kk;hm=x(hm-Jk);u[Ik+52>>2]=hm;am=x(sm-Yl);u[Ik+48>>2]=am;Dm=x(0);Em=x(0);Fm=x(0);Gm=x(0);if(q[rm+240>>2]){Yl=x(u[rm+192>>2]+u[rm+224>>2]);Jk=x(u[rm+196>>2]+u[rm+228>>2]);Gm=x(x(u[rm+184>>2]+u[rm+216>>2])+x(x(em*Yl)-x(bm*Jk)));uk=x(u[rm+200>>2]+u[Km+232>>2]);Fm=x(x(u[rm+180>>2]+u[rm+212>>2])+x(x(bm*uk)-x(nm*Yl)));Em=x(x(u[rm+176>>2]+u[rm+208>>2])+x(x(nm*Jk)-x(em*uk)));}Hm=x(0);Im=x(0);if(q[qm+240>>2]){Yl=x(u[qm+192>>2]+u[qm+224>>2]);Jk=x(u[qm+196>>2]+u[qm+228>>2]);Im=x(x(u[qm+184>>2]+u[qm+216>>2])+x(x(hm*Yl)-x(am*Jk)));uk=x(u[qm+200>>2]+u[Jm+232>>2]);Hm=x(x(u[qm+180>>2]+u[qm+212>>2])+x(x(am*uk)-x(Kk*Yl)));Dm=x(x(u[qm+176>>2]+u[qm+208>>2])+x(x(Kk*Jk)-x(hm*uk)));}sm=u[Lk+76>>2];Am=Lk+68|0;hm=u[Am>>2];am=u[Lk+72>>2];al(mk,ym,om,pm,zm,ok,Ik+44|0,Ik- -64|0,Ik+48|0);q[ym+140>>2]=q[mk+68>>2];c:{if(!(u[Lk+92>>2]>x(0))){break c}ud(mk,Am,om,pm,cm,u[Lk+96>>2]);Kk=u[Lk+76>>2];d:{if(!!(x(y(Kk))>x(.7071067690849304))){uk=u[Lk+72>>2];q[Ik+24>>2]=0;gm=uk;uk=x(x(Kk*Kk)+x(uk*uk));Jk=x(x(1)/x(E(uk)));jm=x(gm*Jk);u[Ik+32>>2]=jm;dm=x(Jk*x(-Kk));u[Ik+28>>2]=dm;km=x(uk*Jk);u[Ik+8>>2]=km;uk=u[Am>>2];lm=x(jm*x(-uk));u[Ik+12>>2]=lm;fm=x(0);gm=x(uk*dm);break d}uk=u[Am>>2];Yl=u[Lk+72>>2];q[Ik+32>>2]=0;gm=uk;uk=x(x(uk*uk)+x(Yl*Yl));Jk=x(x(1)/x(E(uk)));dm=x(gm*Jk);u[Ik+28>>2]=dm;fm=x(Jk*x(-Yl));u[Ik+24>>2]=fm;lm=x(Kk*fm);u[Ik+12>>2]=lm;km=x(dm*x(-Kk));u[Ik+8>>2]=km;jm=x(0);gm=x(uk*Jk);}uk=x(x(1)/x(E(x(x(x(fm*fm)+x(dm*dm))+x(jm*jm)))));jm=x(jm*uk);u[Ik+32>>2]=jm;dm=x(dm*uk);u[Ik+28>>2]=dm;fm=x(fm*uk);u[Ik+24>>2]=fm;uk=x(x(1)/x(E(x(x(gm*gm)+x(x(km*km)+x(lm*lm))))));gm=x(gm*uk);u[Ik+16>>2]=gm;lm=x(lm*uk);u[Ik+12>>2]=lm;km=x(km*uk);u[Ik+8>>2]=km;im=q[_l+180>>2]&2;if(im){Yl=u[_l+172>>2];tm=u[_l+44>>2];um=u[_l+12>>2];vm=u[_l+28>>2];Jk=u[_l+164>>2];Kk=u[_l+36>>2];wm=u[_l+4>>2];xm=u[_l+20>>2];uk=u[_l+168>>2];nm=u[_l+40>>2];em=u[_l+8>>2];bm=u[_l+24>>2];q[Ik+36>>2]=0;Bm=Kk;Kk=x(Jk*x(x(x(fm*wm)+x(dm*xm))+x(jm*Kk)));Jk=x(uk*x(x(x(fm*em)+x(dm*bm))+x(jm*nm)));uk=x(Yl*x(x(x(fm*um)+x(dm*vm))+x(jm*tm)));jm=x(x(x(Bm*Kk)+x(nm*Jk))+x(tm*uk));u[Ik+32>>2]=jm;dm=x(x(x(xm*Kk)+x(bm*Jk))+x(vm*uk));u[Ik+28>>2]=dm;fm=x(x(x(wm*Kk)+x(em*Jk))+x(um*uk));u[Ik+24>>2]=fm;}$l=q[Zl+180>>2]&2;if($l){Yl=u[Zl+172>>2];tm=u[Zl+44>>2];um=u[Zl+12>>2];vm=u[Zl+28>>2];Jk=u[Zl+164>>2];Kk=u[Zl+36>>2];wm=u[Zl+4>>2];xm=u[Zl+20>>2];uk=u[Zl+168>>2];nm=u[Zl+40>>2];em=u[Zl+8>>2];bm=u[Zl+24>>2];q[Ik+36>>2]=0;Bm=Kk;Kk=x(Jk*x(x(x(wm*fm)+x(xm*dm))+x(Kk*jm)));Jk=x(uk*x(x(x(fm*em)+x(dm*bm))+x(jm*nm)));uk=x(Yl*x(x(x(fm*um)+x(dm*vm))+x(jm*tm)));jm=x(x(x(Bm*Kk)+x(nm*Jk))+x(tm*uk));u[Ik+32>>2]=jm;dm=x(x(x(xm*Kk)+x(bm*Jk))+x(vm*uk));u[Ik+28>>2]=dm;fm=x(x(x(wm*Kk)+x(em*Jk))+x(um*uk));u[Ik+24>>2]=fm;}if(im){Yl=u[_l+172>>2];tm=u[_l+44>>2];um=u[_l+12>>2];vm=u[_l+28>>2];Jk=u[_l+164>>2];Kk=u[_l+36>>2];wm=u[_l+4>>2];xm=u[_l+20>>2];uk=u[_l+168>>2];nm=u[_l+40>>2];em=u[_l+8>>2];bm=u[_l+24>>2];q[Ik+20>>2]=0;Bm=Kk;Kk=x(Jk*x(x(x(km*wm)+x(lm*xm))+x(gm*Kk)));Jk=x(uk*x(x(x(km*em)+x(lm*bm))+x(gm*nm)));uk=x(Yl*x(x(x(km*um)+x(lm*vm))+x(gm*tm)));gm=x(x(x(Bm*Kk)+x(nm*Jk))+x(tm*uk));u[Ik+16>>2]=gm;lm=x(x(x(xm*Kk)+x(bm*Jk))+x(vm*uk));u[Ik+12>>2]=lm;km=x(x(x(wm*Kk)+x(em*Jk))+x(um*uk));u[Ik+8>>2]=km;}if($l){Yl=u[Zl+172>>2];tm=u[Zl+44>>2];um=u[Zl+12>>2];vm=u[Zl+28>>2];Jk=u[Zl+164>>2];Kk=u[Zl+36>>2];wm=u[Zl+4>>2];xm=u[Zl+20>>2];uk=u[Zl+168>>2];nm=u[Zl+40>>2];em=u[Zl+8>>2];bm=u[Zl+24>>2];q[Ik+20>>2]=0;Bm=Kk;Kk=x(Jk*x(x(x(wm*km)+x(xm*lm))+x(Kk*gm)));Jk=x(uk*x(x(x(km*em)+x(lm*bm))+x(gm*nm)));uk=x(Yl*x(x(x(km*um)+x(lm*vm))+x(gm*tm)));gm=x(x(x(Bm*Kk)+x(nm*Jk))+x(tm*uk));u[Ik+16>>2]=gm;lm=x(x(x(xm*Kk)+x(bm*Jk))+x(vm*uk));u[Ik+12>>2]=lm;km=x(x(x(wm*Kk)+x(em*Jk))+x(um*uk));u[Ik+8>>2]=km;}if(!!(+x(E(x(x(x(fm*fm)+x(dm*dm))+x(jm*jm))))>.001)){ud(mk,Ik+24|0,om,pm,cm,u[Lk+92>>2]);}if(!(+x(E(x(x(x(km*km)+x(lm*lm))+x(gm*gm))))>.001)){break c}ud(mk,Ik+8|0,om,pm,cm,u[Lk+92>>2]);}e:{if(!(o[Lk+132|0]&1?r[ok+72|0]&32:0)){Kk=u[Am>>2];em=u[Lk+72>>2];bm=u[Lk+76>>2];q[Lk+184>>2]=0;Yl=x(Em-Dm);Jk=x(Fm-Hm);uk=x(Gm-Im);sm=x(x(x(Yl*hm)+x(Jk*am))+x(uk*sm));hm=x(uk-x(bm*sm));u[Lk+180>>2]=hm;am=x(Jk-x(sm*em));u[Lk+176>>2]=am;mm=Lk+172|0;Jk=x(Yl-x(sm*Kk));u[mm>>2]=Jk;f:{if(r[ok+72|0]&64){break f}uk=x(x(x(Jk*Jk)+x(am*am))+x(hm*hm));if(!(uk>x(1.1920928955078125e-7))){break f}uk=x(x(1)/x(E(uk)));u[mm>>2]=Jk*uk;u[Lk+176>>2]=am*uk;u[Lk+180>>2]=hm*uk;Ua(_l,mm);Ua(Zl,mm);uk=u[Ik+44>>2];pb(mk,mm,om,pm,cm,zm,Ik- -64|0,Ik+48|0,uk,ok,x(0),x(0));if(!(r[ok+72|0]&16)){break e}bm=u[Lk+176>>2];Kk=u[Lk+72>>2];sm=u[Am>>2];Yl=u[Lk+180>>2];hm=u[mm>>2];Jk=u[Lk+76>>2];q[Lk+200>>2]=0;am=x(x(bm*Jk)-x(Yl*Kk));Yl=x(x(Yl*sm)-x(Jk*hm));Jk=x(x(Kk*hm)-x(bm*sm));hm=x(x(1)/x(E(x(x(x(am*am)+x(Yl*Yl))+x(Jk*Jk)))));u[Lk+196>>2]=Jk*hm;u[Lk+192>>2]=Yl*hm;$l=Lk+188|0;u[$l>>2]=am*hm;Ua(_l,$l);Ua(Zl,$l);pb(mk,$l,om,pm,cm,zm,Ik- -64|0,Ik+48|0,uk,ok,x(0),x(0));break e}im=Lk+188|0;$l=im;g:{if(!!(x(y(bm))>x(.7071067690849304))){q[mm>>2]=0;Yl=x(x(em*em)+x(bm*bm));am=x(x(1)/x(E(Yl)));Jk=x(am*x(-bm));u[Lk+176>>2]=Jk;uk=x(em*am);u[Lk+180>>2]=uk;dm=x(Kk*Jk);fm=x(uk*x(-Kk));Kk=x(Yl*am);break g}Yl=x(x(Kk*Kk)+x(em*em));am=x(x(1)/x(E(Yl)));Jk=x(am*x(-em));u[mm>>2]=Jk;uk=x(Kk*am);u[Lk+176>>2]=uk;q[Lk+180>>2]=0;dm=x(Yl*am);fm=x(bm*Jk);Kk=x(uk*x(-bm));}u[$l>>2]=Kk;u[Lk+196>>2]=dm;u[Lk+192>>2]=fm;Ua(_l,mm);Ua(Zl,mm);uk=u[Ik+44>>2];pb(mk,mm,om,pm,cm,zm,Ik- -64|0,Ik+48|0,uk,ok,x(0),x(0));$l=q[ok+72>>2];if($l&16){Ua(_l,im);Ua(Zl,im);pb(mk,im,om,pm,cm,zm,Ik- -64|0,Ik+48|0,uk,ok,x(0),x(0));$l=q[ok+72>>2];}if(($l&80)!=80){break e}q[Lk+132>>2]=q[Lk+132>>2]|1;break e}uk=u[Ik+44>>2];pb(mk,Lk+172|0,om,pm,cm,zm,Ik- -64|0,Ik+48|0,uk,ok,u[Lk+148>>2],u[Lk+164>>2]);if(!(r[ok+72|0]&16)){break e}pb(mk,Lk+188|0,om,pm,cm,zm,Ik- -64|0,Ik+48|0,uk,ok,u[Lk+152>>2],u[Lk+164>>2]);}$k(mk,ym,om,pm,zm,ok);im=q[nk+844>>2];}Cm=Cm+1|0;if((Cm|0)<(im|0)){continue}break}}P=Ik+80|0;}function $k(mk,nk,ok,Lm,Mm,Nm){var Om=x(0),Pm=x(0),Qm=x(0),Rm=x(0),Sm=0,Tm=0,Um=0,Vm=0,Wm=0,Xm=x(0),Ym=x(0),Zm=0,_m=x(0),$m=0,an=0,bn=x(0),cn=x(0);Vm=q[mk+16>>2];Tm=q[(Vm+w(Lm,244)|0)+240>>2];Um=q[(w(ok,244)+Vm|0)+240>>2];Wm=q[mk+76>>2];Zm=q[nk+140>>2];$m=q[Nm+72>>2];an=$m&4;a:{if(an){nk=w(Zm,152)+Wm|0;Om=x(u[Mm+136>>2]*u[Nm+68>>2]);u[nk+100>>2]=Om;if(Um){Qm=u[Um+416>>2];Rm=u[nk+24>>2];Xm=u[Um+412>>2];Ym=u[nk+20>>2];mk=w(ok,244)+Vm|0;Pm=u[Um+404>>2];u[mk+64>>2]=x(x(Om*x(x(Pm*u[nk+16>>2])*u[Um+408>>2]))*u[mk+112>>2])+u[mk+64>>2];u[mk+68>>2]=x(x(Om*x(Xm*x(Pm*Ym)))*u[mk+116>>2])+u[mk+68>>2];u[mk+72>>2]=x(x(Om*x(Qm*x(Pm*Rm)))*u[mk+120>>2])+u[mk+72>>2];Pm=u[nk+72>>2];Qm=u[nk+68>>2];u[mk+80>>2]=x(x(Om*u[mk+96>>2])*u[nk+64>>2])+u[mk+80>>2];Rm=u[mk+104>>2];u[mk+84>>2]=x(Qm*x(Om*u[mk+100>>2]))+u[mk+84>>2];u[mk+88>>2]=x(Pm*x(Om*Rm))+u[mk+88>>2];}if(!Tm){break a}Sm=w(Zm,152)+Wm|0;Qm=u[Sm+88>>2];Rm=u[Sm+84>>2];Xm=u[Sm+80>>2];Ym=u[Tm+416>>2];_m=u[Sm+56>>2];bn=u[Tm+412>>2];cn=u[Sm+52>>2];mk=w(Lm,244)+Vm|0;Pm=u[Tm+404>>2];Om=u[nk+100>>2];u[mk+64>>2]=u[mk+64>>2]+x(x(x(x(Pm*u[Sm+48>>2])*u[Tm+408>>2])*Om)*u[mk+112>>2]);u[mk+68>>2]=u[mk+68>>2]+x(x(Om*x(bn*x(Pm*cn)))*u[mk+116>>2]);u[mk+72>>2]=u[mk+72>>2]+x(x(Om*x(Ym*x(Pm*_m)))*u[mk+120>>2]);u[mk+80>>2]=u[mk+80>>2]+x(Xm*x(Om*u[mk+96>>2]));Pm=u[mk+104>>2];u[mk+84>>2]=u[mk+84>>2]+x(Rm*x(Om*u[mk+100>>2]));u[mk+88>>2]=u[mk+88>>2]+x(Qm*x(Pm*Om));break a}q[(w(Zm,152)+Wm|0)+100>>2]=0;}b:{if(!($m&16)){break b}Sm=Zm+1|0;if(an){nk=w(Sm,152)+Wm|0;Om=x(u[Mm+140>>2]*u[Nm+68>>2]);u[nk+100>>2]=Om;if(Um){Qm=u[nk+24>>2];Rm=u[nk+20>>2];mk=w(ok,244)+Vm|0;Pm=u[Um+404>>2];u[mk+64>>2]=x(x(Om*x(Pm*u[nk+16>>2]))*u[mk+112>>2])+u[mk+64>>2];u[mk+68>>2]=x(x(Om*x(Pm*Rm))*u[mk+116>>2])+u[mk+68>>2];u[mk+72>>2]=x(x(Om*x(Pm*Qm))*u[mk+120>>2])+u[mk+72>>2];Pm=u[nk+72>>2];Qm=u[nk+68>>2];u[mk+80>>2]=x(x(Om*u[mk+96>>2])*u[nk+64>>2])+u[mk+80>>2];Rm=u[mk+104>>2];u[mk+84>>2]=x(Qm*x(Om*u[mk+100>>2]))+u[mk+84>>2];u[mk+88>>2]=x(Pm*x(Om*Rm))+u[mk+88>>2];}if(!Tm){break b}ok=w(Sm,152)+Wm|0;Qm=u[ok+88>>2];Rm=u[ok+84>>2];Xm=u[ok+56>>2];Ym=u[ok+52>>2];_m=u[ok+48>>2];Pm=u[Tm+404>>2];mk=w(Lm,244)+Vm|0;Om=u[nk+100>>2];u[mk+80>>2]=u[mk+80>>2]+x(u[ok+80>>2]*x(u[mk+96>>2]*Om));u[mk+64>>2]=u[mk+64>>2]+x(x(Om*x(Pm*_m))*u[mk+112>>2]);u[mk+68>>2]=u[mk+68>>2]+x(x(Om*x(Pm*Ym))*u[mk+116>>2]);u[mk+72>>2]=u[mk+72>>2]+x(x(Om*x(Pm*Xm))*u[mk+120>>2]);Pm=u[mk+104>>2];u[mk+84>>2]=u[mk+84>>2]+x(Rm*x(Om*u[mk+100>>2]));u[mk+88>>2]=u[mk+88>>2]+x(Qm*x(Pm*Om));return}q[(w(Sm,152)+Wm|0)+100>>2]=0;}}function al(mk,nk,ok,Lm,Mm,Nm,dn,en,fn){var gn=x(0),hn=x(0),jn=x(0),kn=x(0),ln=x(0),mn=0,nn=0,on=x(0),pn=x(0),qn=x(0),rn=x(0),sn=x(0),tn=x(0),un=x(0),vn=0,wn=x(0),xn=x(0),yn=x(0),zn=x(0),An=x(0),Bn=0,Cn=0,Dn=x(0),En=x(0);vn=q[mk+16>>2];Bn=vn+w(Lm,244)|0;mn=q[Bn+240>>2];Cn=w(ok,244)+vn|0;nn=q[Cn+240>>2];q[dn>>2]=q[Nm+28>>2];wn=u[Nm+12>>2];Dn=u[Nm+36>>2];on=u[Nm+40>>2];mk=q[Mm+128>>2];a:{if(mk&6){on=mk&2?u[Mm+152>>2]:on;if(!(mk&4)){break a}Dn=u[Mm+156>>2];break a}if(!(mk&8)){break a}hn=x(wn*u[Mm+152>>2]);gn=x(B(x(hn+u[Mm+156>>2]),x(1.1920928955078125e-7)));Dn=x(hn/gn);on=x(x(1)/gn);}gn=u[Mm+68>>2];hn=u[en>>2];kn=u[en+4>>2];ln=u[Mm+64>>2];pn=x(x(gn*hn)-x(kn*ln));jn=u[en+8>>2];tn=x(jn*ln);ln=u[Mm+72>>2];sn=x(tn-x(ln*hn));xn=x(x(kn*ln)-x(jn*gn));hn=x(0);kn=x(0);if(nn){un=x(x(x(x(xn*u[nn+356>>2])+x(sn*u[nn+360>>2]))+x(pn*u[nn+364>>2]))*u[nn+612>>2]);kn=x(x(x(x(xn*u[nn+340>>2])+x(sn*u[nn+344>>2]))+x(pn*u[nn+348>>2]))*u[nn+608>>2]);hn=x(x(x(x(xn*u[nn+324>>2])+x(sn*u[nn+328>>2]))+x(pn*u[nn+332>>2]))*u[nn+604>>2]);}u[nk+64>>2]=hn;q[nk+76>>2]=0;u[nk+72>>2]=un;u[nk+68>>2]=kn;gn=u[Mm+68>>2];ln=u[fn>>2];jn=u[fn+4>>2];qn=u[Mm+64>>2];yn=x(x(gn*ln)-x(jn*qn));tn=u[fn+8>>2];zn=x(tn*qn);qn=u[Mm+72>>2];An=x(zn-x(qn*ln));qn=x(x(jn*qn)-x(tn*gn));ln=x(0);jn=x(0);if(mn){gn=x(-An);jn=x(x(x(x(u[mn+360>>2]*gn)-x(qn*u[mn+356>>2]))-x(yn*u[mn+364>>2]))*u[mn+612>>2]);rn=x(x(x(x(u[mn+328>>2]*gn)-x(qn*u[mn+324>>2]))-x(yn*u[mn+332>>2]))*u[mn+604>>2]);ln=x(x(x(x(u[mn+344>>2]*gn)-x(qn*u[mn+340>>2]))-x(yn*u[mn+348>>2]))*u[mn+608>>2]);}u[nk+80>>2]=rn;q[nk+92>>2]=0;u[nk+88>>2]=jn;u[nk+84>>2]=ln;gn=x(0);if(nn){gn=u[en+8>>2];tn=u[en+4>>2];En=x(x(x(kn*gn)-x(un*tn))*u[Mm+64>>2]);zn=un;un=u[en>>2];gn=x(u[nn+404>>2]+x(x(En+x(x(x(zn*un)-x(gn*hn))*u[Mm+68>>2]))+x(x(x(tn*hn)-x(kn*un))*u[Mm+72>>2])));}mk=nk;En=u[dn>>2];un=x(x(1)/wn);tn=x(un*on);kn=tn;if(mn){hn=u[fn+4>>2];wn=u[fn+8>>2];on=x(x(x(jn*hn)-x(ln*wn))*u[Mm+64>>2]);zn=jn;jn=u[fn>>2];jn=x(u[mn+404>>2]+x(x(on+x(x(x(rn*wn)-x(zn*jn))*u[Mm+68>>2]))+x(x(x(ln*jn)-x(rn*hn))*u[Mm+72>>2])));}else {jn=x(0);}u[mk+108>>2]=En/x(kn+x(gn+jn));b:{if(nn){mk=Mm- -64|0;dn=q[mk+4>>2];q[nk+16>>2]=q[mk>>2];q[nk+20>>2]=dn;dn=q[mk+12>>2];q[nk+24>>2]=q[mk+8>>2];q[nk+28>>2]=dn;q[nk+12>>2]=0;u[nk+8>>2]=pn;u[nk+4>>2]=sn;u[nk>>2]=xn;break b}q[nk>>2]=0;q[nk+4>>2]=0;q[nk+24>>2]=0;q[nk+28>>2]=0;q[nk+16>>2]=0;q[nk+20>>2]=0;q[nk+8>>2]=0;q[nk+12>>2]=0;}c:{if(mn){gn=u[Mm+64>>2];hn=u[Mm+68>>2];kn=u[Mm+72>>2];q[nk+60>>2]=0;q[nk+44>>2]=0;u[nk+40>>2]=-yn;u[nk+36>>2]=-An;u[nk+32>>2]=-qn;u[nk+56>>2]=-kn;u[nk+52>>2]=-hn;u[nk+48>>2]=-gn;break c}q[nk+32>>2]=0;q[nk+36>>2]=0;q[nk+56>>2]=0;q[nk+60>>2]=0;q[nk+48>>2]=0;q[nk+52>>2]=0;q[nk+40>>2]=0;q[nk+44>>2]=0;}An=u[Nm+64>>2];zn=u[Mm+80>>2];rn=x(0);hn=x(0);kn=x(0);ln=x(0);if(nn){gn=u[en+4>>2];hn=u[nn+388>>2];jn=u[nn+392>>2];kn=u[en>>2];ln=x(x(x(gn*hn)-x(jn*kn))+u[nn+380>>2]);on=u[nn+396>>2];pn=u[en+8>>2];kn=x(u[nn+376>>2]+x(x(on*kn)-x(pn*hn)));hn=x(x(x(jn*pn)-x(on*gn))+u[nn+372>>2]);}jn=x(0);pn=x(0);if(mn){gn=u[fn+4>>2];jn=u[mn+388>>2];on=u[mn+392>>2];rn=u[fn>>2];pn=x(x(x(gn*jn)-x(on*rn))+u[mn+380>>2]);sn=u[mn+396>>2];qn=x(sn*rn);rn=u[fn+8>>2];jn=x(u[mn+376>>2]+x(qn-x(rn*jn)));rn=x(x(x(on*rn)-x(sn*gn))+u[mn+372>>2]);}gn=u[Mm+72>>2];on=u[Mm+64>>2];sn=u[Mm+68>>2];q[nk+104>>2]=q[Mm+84>>2];gn=x(x(x(on*x(hn-rn))+x(sn*x(kn-jn)))+x(gn*x(ln-pn)));rn=x(y(gn))<u[Nm+96>>2]?x(0):x(u[Mm+96>>2]*x(-gn));d:{if(r[Nm+72|0]&4){gn=x(u[Mm+132>>2]*u[Nm+68>>2]);u[nk+100>>2]=gn;if(!(!nn|!q[Cn+240>>2])){hn=u[nn+416>>2];kn=u[nk+24>>2];ln=u[nn+412>>2];jn=u[nk+20>>2];mk=w(ok,244)+vn|0;u[mk+64>>2]=x(u[mk+112>>2]*x(gn*x(x(u[nk+16>>2]*u[mk+128>>2])*u[nn+408>>2])))+u[mk+64>>2];u[mk+68>>2]=x(x(gn*x(ln*x(jn*u[mk+132>>2])))*u[mk+116>>2])+u[mk+68>>2];u[mk+72>>2]=x(x(gn*x(hn*x(kn*u[mk+136>>2])))*u[mk+120>>2])+u[mk+72>>2];hn=u[nk+72>>2];kn=u[nk+68>>2];u[mk+80>>2]=x(x(gn*u[mk+96>>2])*u[nk+64>>2])+u[mk+80>>2];ln=u[mk+104>>2];u[mk+84>>2]=x(kn*x(gn*u[mk+100>>2]))+u[mk+84>>2];u[mk+88>>2]=x(hn*x(gn*ln))+u[mk+88>>2];}if(!mn|!q[Bn+240>>2]){break d}hn=u[mn+416>>2];kn=u[nk+56>>2];ln=u[mn+412>>2];jn=u[nk+52>>2];on=u[nk+88>>2];pn=u[nk+84>>2];sn=u[nk+80>>2];mk=w(Lm,244)+vn|0;gn=x(-u[nk+100>>2]);u[mk+64>>2]=u[mk+64>>2]-x(u[mk+112>>2]*x(x(x(u[mk+128>>2]*u[nk+48>>2])*u[mn+408>>2])*gn));u[mk+68>>2]=u[mk+68>>2]-x(x(x(ln*x(jn*u[mk+132>>2]))*gn)*u[mk+116>>2]);u[mk+72>>2]=u[mk+72>>2]-x(x(x(hn*x(kn*u[mk+136>>2]))*gn)*u[mk+120>>2]);u[mk+80>>2]=u[mk+80>>2]-x(sn*x(u[mk+96>>2]*gn));hn=u[mk+104>>2];u[mk+84>>2]=u[mk+84>>2]-x(pn*x(u[mk+100>>2]*gn));u[mk+88>>2]=u[mk+88>>2]-x(on*x(hn*gn));break d}q[nk+100>>2]=0;}q[nk+96>>2]=0;kn=x(0);ln=x(0);jn=x(0);pn=x(0);sn=x(0);xn=x(0);yn=x(0);if(q[Cn+240>>2]){mk=w(ok,244)+vn|0;sn=u[mk+232>>2];xn=u[mk+228>>2];yn=u[mk+224>>2];jn=u[mk+212>>2];pn=u[mk+208>>2];ln=u[mk+216>>2];}hn=x(0);qn=x(0);on=x(0);wn=x(0);gn=x(0);if(q[Bn+240>>2]){mk=w(Lm,244)+vn|0;on=u[mk+232>>2];wn=u[mk+228>>2];qn=u[mk+216>>2];kn=u[mk+208>>2];hn=u[mk+212>>2];gn=u[mk+224>>2];}mk=w(ok,244)+vn|0;jn=x(x(x(x(x(pn+u[mk+176>>2])*u[nk+16>>2])+x(x(jn+u[mk+180>>2])*u[nk+20>>2]))+x(x(ln+u[mk+184>>2])*u[nk+24>>2]))+x(x(x(x(yn+u[mk+192>>2])*u[nk>>2])+x(x(xn+u[mk+196>>2])*u[nk+4>>2]))+x(x(sn+u[mk+200>>2])*u[nk+8>>2])));mk=w(Lm,244)+vn|0;hn=x((rn<=x(0)?x(0):rn)-x(jn+x(x(x(x(x(kn+u[mk+176>>2])*u[nk+48>>2])+x(x(hn+u[mk+180>>2])*u[nk+52>>2]))+x(x(qn+u[mk+184>>2])*u[nk+56>>2]))+x(x(x(x(gn+u[mk+192>>2])*u[nk+32>>2])+x(x(wn+u[mk+196>>2])*u[nk+36>>2]))+x(x(on+u[mk+200>>2])*u[nk+40>>2])))));kn=x(0);gn=x(zn+An);e:{if(!!(gn>x(0))){hn=x(hn-x(un*gn));break e}kn=x(un*x(Dn*x(-gn)));}ln=u[nk+108>>2];hn=x(hn*ln);kn=x(kn*ln);mk=nk;if(!(gn>u[Nm+56>>2]^1?q[Nm+52>>2]:0)){hn=x(kn+hn);kn=x(0);}u[mk+128>>2]=kn;u[nk+112>>2]=hn;q[nk+120>>2]=0;q[nk+124>>2]=1343554297;u[nk+116>>2]=tn*ln;}function bl(mk,nk,ok,Lm,Mm,Nm){var dn=0,en=x(0),fn=x(0),Fn=x(0),Gn=x(0),Hn=x(0),In=x(0),Jn=x(0),Kn=0,Ln=x(0),Mn=x(0),Nn=x(0),On=0,Pn=0,Qn=0,Rn=0,Sn=0,Tn=0,Un=x(0),Vn=x(0),Wn=x(0),Xn=x(0),Yn=x(0);q[nk+48>>2]=-2147483648;q[nk+52>>2]=-2147483648;q[nk+16>>2]=0;q[nk+20>>2]=0;q[nk+56>>2]=-2147483648;q[nk+60>>2]=0;q[nk+24>>2]=0;q[nk+28>>2]=0;Kn=q[mk+16>>2];mk=q[(Kn+w(Lm,244)|0)+240>>2];dn=q[(w(Mm,244)+Kn|0)+240>>2];q[nk+148>>2]=Mm;q[nk+144>>2]=Lm;q[nk+132>>2]=0;u[nk+104>>2]=Nm;q[nk+96>>2]=0;q[nk+100>>2]=0;fn=u[ok>>2];Mn=u[ok+4>>2];Fn=u[ok+8>>2];q[nk+12>>2]=0;u[nk+8>>2]=-Fn;en=x(-Mn);u[nk+4>>2]=en;Nn=x(-fn);u[nk>>2]=Nn;Pn=nk;if(mk){Qn=(j(x(x(x(x(u[mk+360>>2]*en)-x(fn*u[mk+356>>2]))-x(Fn*u[mk+364>>2]))*u[mk+612>>2])),e(0));Rn=(j(x(x(x(x(u[mk+344>>2]*en)-x(fn*u[mk+340>>2]))-x(Fn*u[mk+348>>2]))*u[mk+608>>2])),e(0));On=(j(x(x(x(x(u[mk+328>>2]*en)-x(fn*u[mk+324>>2]))-x(Fn*u[mk+332>>2]))*u[mk+604>>2])),e(0));}else {On=0;}q[Pn+64>>2]=On;q[nk+76>>2]=0;q[nk+72>>2]=Qn;q[nk+68>>2]=Rn;Gn=u[ok>>2];Hn=u[ok+4>>2];In=u[ok+8>>2];q[nk+44>>2]=q[ok+12>>2];u[nk+40>>2]=In;u[nk+36>>2]=Hn;u[nk+32>>2]=Gn;ok=0;if(dn){Sn=(j(x(x(x(x(Gn*u[dn+356>>2])+x(Hn*u[dn+360>>2]))+x(In*u[dn+364>>2]))*u[dn+612>>2])),e(0));Tn=(j(x(x(x(x(Gn*u[dn+324>>2])+x(Hn*u[dn+328>>2]))+x(In*u[dn+332>>2]))*u[dn+604>>2])),e(0));ok=(j(x(x(x(x(Gn*u[dn+340>>2])+x(Hn*u[dn+344>>2]))+x(In*u[dn+348>>2]))*u[dn+608>>2])),e(0));}q[nk+80>>2]=Tn;q[nk+92>>2]=0;q[nk+88>>2]=Sn;q[nk+84>>2]=ok;if(mk){Ln=x(x(x(u[mk+360>>2]*en)-x(fn*u[mk+356>>2]))-x(Fn*u[mk+364>>2]));Un=x(x(x(u[mk+344>>2]*en)-x(fn*u[mk+340>>2]))-x(Fn*u[mk+348>>2]));Jn=x(x(x(u[mk+328>>2]*en)-x(fn*u[mk+324>>2]))-x(Fn*u[mk+332>>2]));}ok=nk;fn=x(x(x(x(Un*en)-x(fn*Jn))-x(Fn*Ln))+x(0));if(dn){Vn=x(x(x(Gn*u[dn+356>>2])+x(Hn*u[dn+360>>2]))+x(In*u[dn+364>>2]));Wn=x(x(x(Gn*u[dn+340>>2])+x(Hn*u[dn+344>>2]))+x(In*u[dn+348>>2]));en=x(x(x(u[dn+324>>2]*Gn)+x(u[dn+328>>2]*Hn))+x(u[dn+332>>2]*In));}else {en=x(0);}Ln=x(x(1)/x(fn+x(x(x(en*Gn)+x(Wn*Hn))+x(Vn*In))));u[ok+108>>2]=Ln;fn=x(0);en=x(0);Jn=x(0);if(mk){mk=w(Lm,244)+Kn|0;fn=x(x(x(x(u[mk+176>>2]+u[mk+208>>2])*x(0))+x(x(u[mk+180>>2]+u[mk+212>>2])*x(0)))+x(x(u[mk+184>>2]+u[mk+216>>2])*x(0)));Xn=u[mk+196>>2];Jn=u[mk+192>>2];en=u[mk+200>>2];}Jn=x(fn+x(x(x(Jn*Nn)-x(Mn*Xn))-x(Fn*en)));a:{if(!dn){fn=x(-0);en=x(0);Fn=x(0);break a}mk=w(Mm,244)+Kn|0;fn=x(x(x(x(u[mk+176>>2]+u[mk+208>>2])*x(-0))+x(x(u[mk+180>>2]+u[mk+212>>2])*x(-0)))+x(x(u[mk+184>>2]+u[mk+216>>2])*x(-0)));Yn=u[mk+200>>2];en=u[mk+196>>2];Fn=u[mk+192>>2];}u[nk+124>>2]=Nm;u[nk+116>>2]=0;u[nk+120>>2]=-Nm;u[nk+112>>2]=Ln*x(x(0)-x(Jn+x(fn+x(x(In*Yn)+x(x(Hn*en)+x(Gn*Fn))))));}function cl(mk){var nk=0,ok=0,Lm=0,Mm=0,Nm=x(0);nk=P-128|0;P=nk;q[nk+124>>2]=mk;mk=q[nk+124>>2];ok=nk+56|0;ya(ok);Ba(ok);Lm=nk+40|0;q[(P-16|0)+12>>2]=Lm;Mm=nk+24|0;q[(P-16|0)+12>>2]=Mm;n[q[q[mk>>2]+8>>2]](mk,ok,Lm,Mm);mk=nk+8|0;Ka(mk,Mm,Lm);Nm=Pb(mk);P=nk+128|0;return x(Nm*x(.5))}function dl(mk,Zn,_n,$n,ao,bo,co,eo,fo,go,ho,io){var jo=x(0),ko=0,lo=0,mo=x(0),no=x(0),oo=x(0),po=x(0),qo=x(0),ro=x(0),so=x(0),to=x(0),uo=x(0),vo=x(0),wo=x(0),xo=x(0),yo=x(0),zo=x(0),Ao=x(0),Bo=x(0),Co=x(0),Do=x(0),Eo=x(0),Fo=0,Go=x(0),Ho=x(0),Io=0,Jo=x(0),Ko=x(0),Lo=x(0),Mo=x(0),No=x(0),Oo=x(0);Fo=q[mk+16>>2];ko=q[(Fo+w(ao,244)|0)+240>>2];lo=q[(w($n,244)+Fo|0)+240>>2];q[Zn+148>>2]=ao;q[Zn+144>>2]=$n;Jo=u[bo+84>>2];Io=q[bo+84>>2];q[Zn+132>>2]=0;q[Zn+104>>2]=Io;q[Zn+96>>2]=0;q[Zn+100>>2]=0;a:{if(lo){mk=q[_n+4>>2];q[Zn+16>>2]=q[_n>>2];q[Zn+20>>2]=mk;mk=q[_n+12>>2];q[Zn+24>>2]=q[_n+8>>2];q[Zn+28>>2]=mk;mo=u[co+8>>2];oo=u[co>>2];po=u[co+4>>2];q[Zn+12>>2]=0;to=u[Zn+20>>2];zo=u[Zn+16>>2];uo=x(x(oo*to)-x(po*zo));u[Zn+8>>2]=uo;Ao=u[Zn+24>>2];oo=x(x(mo*zo)-x(oo*Ao));u[Zn+4>>2]=oo;po=x(x(po*Ao)-x(mo*to));u[Zn>>2]=po;mo=u[lo+612>>2];jo=u[lo+364>>2];vo=u[lo+356>>2];qo=u[lo+360>>2];no=u[lo+608>>2];Bo=u[lo+348>>2];Co=u[lo+340>>2];Do=u[lo+344>>2];ro=u[lo+332>>2];wo=u[lo+328>>2];xo=u[lo+604>>2];so=u[lo+324>>2];q[Zn+76>>2]=0;wo=x(xo*x(x(x(po*so)+x(oo*wo))+x(uo*ro)));u[Zn+64>>2]=wo;xo=x(no*x(x(x(po*Co)+x(oo*Do))+x(uo*Bo)));u[Zn+68>>2]=xo;so=x(mo*x(x(x(po*vo)+x(oo*qo))+x(uo*jo)));u[Zn+72>>2]=so;break a}q[Zn+64>>2]=0;q[Zn+68>>2]=0;q[Zn>>2]=0;q[Zn+4>>2]=0;q[Zn+72>>2]=0;q[Zn+76>>2]=0;q[Zn+8>>2]=0;q[Zn+12>>2]=0;q[Zn+16>>2]=0;q[Zn+20>>2]=0;q[Zn+24>>2]=0;q[Zn+28>>2]=0;}b:{if(ko){mo=u[_n>>2];jo=u[_n+4>>2];no=u[_n+8>>2];q[Zn+60>>2]=0;Bo=x(-no);u[Zn+56>>2]=Bo;Co=x(-jo);u[Zn+52>>2]=Co;Do=x(-mo);u[Zn+48>>2]=Do;ro=u[eo+8>>2];yo=u[eo+4>>2];qo=u[eo>>2];q[Zn+44>>2]=0;vo=x(x(mo*yo)-x(jo*qo));u[Zn+40>>2]=vo;qo=x(x(no*qo)-x(mo*ro));u[Zn+36>>2]=qo;no=x(x(jo*ro)-x(no*yo));u[Zn+32>>2]=no;mo=u[ko+332>>2];yo=u[ko+328>>2];ro=u[ko+608>>2];Go=u[ko+348>>2];Eo=u[ko+340>>2];Ho=u[ko+344>>2];jo=u[ko+612>>2];Ko=u[ko+364>>2];Lo=u[ko+356>>2];Mo=u[ko+360>>2];No=u[ko+604>>2];Oo=u[ko+324>>2];q[Zn+92>>2]=0;jo=x(jo*x(x(x(no*Lo)+x(qo*Mo))+x(vo*Ko)));u[Zn+88>>2]=jo;ro=x(ro*x(x(x(no*Eo)+x(qo*Ho))+x(vo*Go)));u[Zn+84>>2]=ro;yo=x(No*x(x(x(no*Oo)+x(qo*yo))+x(vo*mo)));u[Zn+80>>2]=yo;break b}q[Zn+80>>2]=0;q[Zn+84>>2]=0;q[Zn+32>>2]=0;q[Zn+36>>2]=0;q[Zn+88>>2]=0;q[Zn+92>>2]=0;q[Zn+40>>2]=0;q[Zn+44>>2]=0;q[Zn+48>>2]=0;q[Zn+52>>2]=0;q[Zn+56>>2]=0;q[Zn+60>>2]=0;vo=x(0);qo=x(0);no=x(0);Bo=x(0);Co=x(0);Do=x(0);jo=x(0);ro=x(0);}mk=Zn;mo=fo;if(lo){fo=u[co+8>>2];Go=u[co+4>>2];Ho=x(x(x(xo*fo)-x(so*Go))*u[_n>>2]);Eo=so;so=u[co>>2];fo=x(u[lo+404>>2]+x(x(Ho+x(x(x(Eo*so)-x(fo*wo))*u[_n+4>>2]))+x(x(x(Go*wo)-x(xo*so))*u[_n+8>>2])));}else {fo=x(0);}if(ko){wo=u[eo+4>>2];xo=u[eo+8>>2];Eo=x(x(x(jo*wo)-x(ro*xo))*u[_n>>2]);so=jo;jo=u[eo>>2];jo=x(u[ko+404>>2]+x(x(Eo+x(x(x(yo*xo)-x(so*jo))*u[_n+4>>2]))+x(x(x(ro*jo)-x(yo*wo))*u[_n+8>>2])));}else {jo=x(0);}mo=x(mo/x(fo+jo));u[mk+108>>2]=mo;c:{if(!lo){jo=x(0);to=x(x(x(zo*x(0))+x(to*x(0)))+x(Ao*x(0)));Ao=x(0);fo=x(0);break c}mk=w($n,244)+Fo|0;to=x(x(x(x(u[mk+176>>2]+u[mk+208>>2])*zo)+x(x(u[mk+180>>2]+u[mk+212>>2])*to))+x(x(u[mk+184>>2]+u[mk+216>>2])*Ao));Ao=u[mk+200>>2];jo=u[mk+192>>2];fo=u[mk+196>>2];}to=x(to+x(x(x(jo*po)+x(fo*oo))+x(Ao*uo)));d:{if(!ko){oo=x(0);po=x(x(x(Do*x(0))+x(Co*x(0)))+x(Bo*x(0)));zo=x(0);fo=x(0);break d}mk=w(ao,244)+Fo|0;po=x(x(x(x(u[mk+176>>2]+u[mk+208>>2])*Do)+x(x(u[mk+180>>2]+u[mk+212>>2])*Co))+x(x(u[mk+184>>2]+u[mk+216>>2])*Bo));oo=u[mk+200>>2];zo=u[mk+192>>2];fo=u[mk+196>>2];}uo=x(0);uo=r[bo+128|0]&16?x(mo*x(x(u[go+44>>2]*x(-x(x(x(x(u[bo+48>>2]-u[bo+32>>2])*u[_n>>2])+x(x(u[bo+52>>2]-u[bo+36>>2])*u[_n+4>>2]))+x(x(u[bo+56>>2]-u[bo+40>>2])*u[_n+8>>2]))))/u[go+12>>2])):uo;q[Zn+128>>2]=0;q[Zn+124>>2]=Io;u[Zn+116>>2]=io;u[Zn+112>>2]=x(mo*x(ho-x(to+x(po+x(x(x(zo*no)+x(fo*qo))+x(oo*vo))))))+uo;u[Zn+120>>2]=-Jo;}function el(mk,Zn,_n){var $n=0,ao=x(0),bo=x(0),co=x(0),eo=x(0),fo=x(0),go=x(0),ho=x(0),io=x(0),Po=x(0);Zn=Zn?q[Zn+252>>2]<<30>>31&Zn:0;q[mk+64>>2]=0;q[mk+68>>2]=0;q[mk+144>>2]=0;q[mk+148>>2]=0;q[mk+88>>2]=0;q[mk+92>>2]=0;q[mk+80>>2]=0;q[mk+84>>2]=0;q[mk+72>>2]=0;q[mk+76>>2]=0;q[mk+152>>2]=0;q[mk+156>>2]=0;q[mk+160>>2]=0;q[mk+164>>2]=0;q[mk+168>>2]=0;q[mk+172>>2]=0;a:{if(Zn){$n=q[Zn+16>>2];q[mk+8>>2]=q[Zn+12>>2];q[mk+12>>2]=$n;$n=q[Zn+8>>2];q[mk>>2]=q[Zn+4>>2];q[mk+4>>2]=$n;$n=q[Zn+32>>2];q[mk+24>>2]=q[Zn+28>>2];q[mk+28>>2]=$n;$n=q[Zn+24>>2];q[mk+16>>2]=q[Zn+20>>2];q[mk+20>>2]=$n;$n=q[Zn+48>>2];q[mk+40>>2]=q[Zn+44>>2];q[mk+44>>2]=$n;$n=q[Zn+40>>2];q[mk+32>>2]=q[Zn+36>>2];q[mk+36>>2]=$n;$n=q[Zn+64>>2];q[mk+56>>2]=q[Zn+60>>2];q[mk+60>>2]=$n;$n=q[Zn+56>>2];q[mk+48>>2]=q[Zn+52>>2];q[mk+52>>2]=$n;bo=u[Zn+412>>2];co=u[Zn+416>>2];eo=u[Zn+408>>2];ao=u[Zn+404>>2];q[mk+240>>2]=Zn;q[mk+140>>2]=0;u[mk+136>>2]=ao*co;u[mk+132>>2]=ao*bo;u[mk+128>>2]=ao*eo;$n=q[Zn+616>>2];q[mk+104>>2]=q[Zn+612>>2];q[mk+108>>2]=$n;$n=q[Zn+608>>2];q[mk+96>>2]=q[Zn+604>>2];q[mk+100>>2]=$n;$n=q[Zn+420>>2];q[mk+120>>2]=q[Zn+416>>2];q[mk+124>>2]=$n;$n=q[Zn+412>>2];q[mk+112>>2]=q[Zn+408>>2];q[mk+116>>2]=$n;$n=q[Zn+384>>2];q[mk+184>>2]=q[Zn+380>>2];q[mk+188>>2]=$n;$n=q[Zn+376>>2];q[mk+176>>2]=q[Zn+372>>2];q[mk+180>>2]=$n;$n=q[Zn+400>>2];q[mk+200>>2]=q[Zn+396>>2];q[mk+204>>2]=$n;$n=q[Zn+392>>2];q[mk+192>>2]=q[Zn+388>>2];q[mk+196>>2]=$n;bo=u[Zn+476>>2];co=u[Zn+480>>2];eo=u[Zn+472>>2];ao=u[Zn+404>>2];q[mk+220>>2]=0;u[mk+216>>2]=x(ao*co)*_n;u[mk+212>>2]=x(ao*bo)*_n;u[mk+208>>2]=x(ao*eo)*_n;eo=u[Zn+340>>2];fo=u[Zn+356>>2];go=u[Zn+328>>2];ho=u[Zn+344>>2];io=u[Zn+360>>2];Po=u[Zn+324>>2];ao=u[Zn+488>>2];bo=u[Zn+492>>2];co=u[Zn+496>>2];u[mk+232>>2]=x(x(x(ao*u[Zn+332>>2])+x(bo*u[Zn+348>>2]))+x(co*u[Zn+364>>2]))*_n;u[mk+228>>2]=x(x(x(ao*go)+x(bo*ho))+x(co*io))*_n;u[mk+224>>2]=x(x(x(Po*ao)+x(eo*bo))+x(fo*co))*_n;break a}q[mk+4>>2]=0;q[mk+8>>2]=0;q[mk>>2]=1065353216;q[mk+32>>2]=0;q[mk+36>>2]=0;q[mk+240>>2]=0;q[mk+128>>2]=0;q[mk+132>>2]=0;q[mk+112>>2]=1065353216;q[mk+116>>2]=1065353216;q[mk+96>>2]=1065353216;q[mk+100>>2]=1065353216;q[mk+176>>2]=0;q[mk+180>>2]=0;q[mk+12>>2]=0;q[mk+16>>2]=0;q[mk+24>>2]=0;q[mk+28>>2]=0;q[mk+20>>2]=1065353216;q[mk+44>>2]=0;q[mk+48>>2]=0;q[mk+40>>2]=1065353216;q[mk+52>>2]=0;q[mk+56>>2]=0;q[mk+60>>2]=0;q[mk+136>>2]=0;q[mk+140>>2]=0;q[mk+120>>2]=1065353216;q[mk+124>>2]=0;q[mk+104>>2]=1065353216;q[mk+108>>2]=0;q[mk+232>>2]=0;q[mk+224>>2]=0;q[mk+228>>2]=0;q[mk+216>>2]=0;q[mk+220>>2]=0;q[mk+208>>2]=0;q[mk+212>>2]=0;q[mk+200>>2]=0;q[mk+204>>2]=0;q[mk+192>>2]=0;q[mk+196>>2]=0;q[mk+184>>2]=0;q[mk+188>>2]=0;}q[mk+236>>2]=0;}function fl(mk){mk=mk|0;mk=rf(mk);if(mk){q[6658]=q[6658]+1;n[q[5256]](mk);}}function gl(mk,Zn,_n){mk=mk|0;Zn=Zn|0;_n=_n|0;var Qo=x(0),Ro=x(0),So=x(0),To=x(0),Uo=x(0),Vo=x(0),Wo=x(0),Xo=0;Ro=u[_n+128>>2];a:{if(Ro==x(0)){break a}q[5778]=q[5778]+1;Qo=u[_n+96>>2];So=x(Ro-x(Qo*u[_n+116>>2]));To=u[_n+16>>2];Uo=u[_n+20>>2];Vo=u[_n+24>>2];Ro=u[_n+108>>2];Ro=x(x(So-x(x(x(x(x(To*u[mk+144>>2])+x(Uo*u[mk+148>>2]))+x(Vo*u[mk+152>>2]))+x(x(x(u[_n>>2]*u[mk+160>>2])+x(u[_n+4>>2]*u[mk+164>>2]))+x(u[_n+8>>2]*u[mk+168>>2])))*Ro))-x(Ro*x(x(x(x(u[_n+48>>2]*u[Zn+144>>2])+x(u[_n+52>>2]*u[Zn+148>>2]))+x(u[_n+56>>2]*u[Zn+152>>2]))+x(x(x(u[_n+32>>2]*u[Zn+160>>2])+x(u[_n+36>>2]*u[Zn+164>>2]))+x(u[_n+40>>2]*u[Zn+168>>2])))));Wo=x(Qo+Ro);So=u[_n+120>>2];Xo=Wo<So;u[_n+96>>2]=Xo?So:Wo;Qo=Xo?x(So-Qo):Ro;if(q[mk+240>>2]){u[mk+144>>2]=x(u[mk+112>>2]*x(Qo*x(To*u[mk+128>>2])))+u[mk+144>>2];u[mk+148>>2]=x(x(Qo*x(Uo*u[mk+132>>2]))*u[mk+116>>2])+u[mk+148>>2];u[mk+152>>2]=x(x(Qo*x(Vo*u[mk+136>>2]))*u[mk+120>>2])+u[mk+152>>2];Ro=u[_n+72>>2];So=u[_n+68>>2];u[mk+160>>2]=x(x(Qo*u[mk+96>>2])*u[_n+64>>2])+u[mk+160>>2];To=u[mk+104>>2];u[mk+164>>2]=x(So*x(Qo*u[mk+100>>2]))+u[mk+164>>2];u[mk+168>>2]=x(Ro*x(Qo*To))+u[mk+168>>2];}if(!q[Zn+240>>2]){break a}Ro=u[_n+56>>2];So=u[_n+52>>2];u[Zn+144>>2]=x(u[Zn+112>>2]*x(Qo*x(u[_n+48>>2]*u[Zn+128>>2])))+u[Zn+144>>2];u[Zn+148>>2]=x(x(Qo*x(So*u[Zn+132>>2]))*u[Zn+116>>2])+u[Zn+148>>2];u[Zn+152>>2]=x(x(Qo*x(Ro*u[Zn+136>>2]))*u[Zn+120>>2])+u[Zn+152>>2];Ro=u[_n+88>>2];So=u[_n+84>>2];u[Zn+160>>2]=x(x(Qo*u[Zn+96>>2])*u[_n+80>>2])+u[Zn+160>>2];To=u[Zn+104>>2];u[Zn+164>>2]=x(So*x(Qo*u[Zn+100>>2]))+u[Zn+164>>2];u[Zn+168>>2]=x(Ro*x(Qo*To))+u[Zn+168>>2];}return x(Qo)}function hl(mk,Zn,_n){mk=mk|0;Zn=Zn|0;_n=_n|0;var Yo=x(0),Zo=x(0),_o=x(0),$o=x(0),ap=x(0),bp=x(0),cp=x(0),dp=0;Yo=u[_n+100>>2];$o=u[_n+16>>2];ap=u[_n+20>>2];bp=u[_n+24>>2];Zo=u[_n+108>>2];Zo=x(x(x(u[_n+112>>2]-x(Yo*u[_n+116>>2]))-x(x(x(x(x($o*u[mk+64>>2])+x(ap*u[mk+68>>2]))+x(bp*u[mk+72>>2]))+x(x(x(u[_n>>2]*u[mk+80>>2])+x(u[_n+4>>2]*u[mk+84>>2]))+x(u[_n+8>>2]*u[mk+88>>2])))*Zo))-x(Zo*x(x(x(x(u[_n+48>>2]*u[Zn+64>>2])+x(u[_n+52>>2]*u[Zn+68>>2]))+x(u[_n+56>>2]*u[Zn+72>>2]))+x(x(x(u[_n+32>>2]*u[Zn+80>>2])+x(u[_n+36>>2]*u[Zn+84>>2]))+x(u[_n+40>>2]*u[Zn+88>>2])))));cp=x(Yo+Zo);_o=u[_n+120>>2];dp=cp<_o;u[_n+100>>2]=dp?_o:cp;Yo=dp?x(_o-Yo):Zo;if(q[mk+240>>2]){u[mk+64>>2]=x(u[mk+112>>2]*x(Yo*x($o*u[mk+128>>2])))+u[mk+64>>2];u[mk+68>>2]=x(x(Yo*x(ap*u[mk+132>>2]))*u[mk+116>>2])+u[mk+68>>2];u[mk+72>>2]=x(x(Yo*x(bp*u[mk+136>>2]))*u[mk+120>>2])+u[mk+72>>2];Zo=u[_n+72>>2];_o=u[_n+68>>2];u[mk+80>>2]=x(x(Yo*u[mk+96>>2])*u[_n+64>>2])+u[mk+80>>2];$o=u[mk+104>>2];u[mk+84>>2]=x(_o*x(Yo*u[mk+100>>2]))+u[mk+84>>2];u[mk+88>>2]=x(Zo*x(Yo*$o))+u[mk+88>>2];}if(q[Zn+240>>2]){Zo=u[_n+56>>2];_o=u[_n+52>>2];u[Zn+64>>2]=x(u[Zn+112>>2]*x(Yo*x(u[_n+48>>2]*u[Zn+128>>2])))+u[Zn+64>>2];u[Zn+68>>2]=x(x(Yo*x(_o*u[Zn+132>>2]))*u[Zn+116>>2])+u[Zn+68>>2];u[Zn+72>>2]=x(x(Yo*x(Zo*u[Zn+136>>2]))*u[Zn+120>>2])+u[Zn+72>>2];Zo=u[_n+88>>2];_o=u[_n+84>>2];u[Zn+80>>2]=x(x(Yo*u[Zn+96>>2])*u[_n+80>>2])+u[Zn+80>>2];$o=u[Zn+104>>2];u[Zn+84>>2]=x(_o*x(Yo*u[Zn+100>>2]))+u[Zn+84>>2];u[Zn+88>>2]=x(Zo*x(Yo*$o))+u[Zn+88>>2];}return x(Yo)}function il(mk,Zn,_n){mk=mk|0;Zn=Zn|0;_n=_n|0;var ep=x(0),fp=x(0),gp=x(0),hp=x(0),ip=x(0),jp=x(0),kp=x(0);hp=u[_n+100>>2];ip=u[_n+16>>2];jp=u[_n+20>>2];kp=u[_n+24>>2];fp=u[_n+108>>2];ep=x(x(x(u[_n+112>>2]-x(hp*u[_n+116>>2]))-x(x(x(x(x(ip*u[mk+64>>2])+x(jp*u[mk+68>>2]))+x(kp*u[mk+72>>2]))+x(x(x(u[_n>>2]*u[mk+80>>2])+x(u[_n+4>>2]*u[mk+84>>2]))+x(u[_n+8>>2]*u[mk+88>>2])))*fp))-x(fp*x(x(x(x(u[_n+48>>2]*u[Zn+64>>2])+x(u[_n+52>>2]*u[Zn+68>>2]))+x(u[_n+56>>2]*u[Zn+72>>2]))+x(x(x(u[_n+32>>2]*u[Zn+80>>2])+x(u[_n+36>>2]*u[Zn+84>>2]))+x(u[_n+40>>2]*u[Zn+88>>2])))));fp=x(hp+ep);gp=u[_n+120>>2];a:{if(!!(fp<gp)){ep=x(gp-hp);fp=gp;break a}gp=u[_n+124>>2];if(!(fp>gp)){break a}ep=x(gp-hp);fp=gp;}u[_n+100>>2]=fp;if(q[mk+240>>2]){u[mk+64>>2]=x(u[mk+112>>2]*x(ep*x(ip*u[mk+128>>2])))+u[mk+64>>2];u[mk+68>>2]=x(x(ep*x(jp*u[mk+132>>2]))*u[mk+116>>2])+u[mk+68>>2];u[mk+72>>2]=x(x(ep*x(kp*u[mk+136>>2]))*u[mk+120>>2])+u[mk+72>>2];fp=u[_n+72>>2];gp=u[_n+68>>2];u[mk+80>>2]=x(x(ep*u[mk+96>>2])*u[_n+64>>2])+u[mk+80>>2];hp=u[mk+104>>2];u[mk+84>>2]=x(gp*x(ep*u[mk+100>>2]))+u[mk+84>>2];u[mk+88>>2]=x(fp*x(ep*hp))+u[mk+88>>2];}if(q[Zn+240>>2]){fp=u[_n+56>>2];gp=u[_n+52>>2];u[Zn+64>>2]=x(u[Zn+112>>2]*x(ep*x(u[_n+48>>2]*u[Zn+128>>2])))+u[Zn+64>>2];u[Zn+68>>2]=x(x(ep*x(gp*u[Zn+132>>2]))*u[Zn+116>>2])+u[Zn+68>>2];u[Zn+72>>2]=x(x(ep*x(fp*u[Zn+136>>2]))*u[Zn+120>>2])+u[Zn+72>>2];fp=u[_n+88>>2];gp=u[_n+84>>2];u[Zn+80>>2]=x(x(ep*u[Zn+96>>2])*u[_n+80>>2])+u[Zn+80>>2];hp=u[Zn+104>>2];u[Zn+84>>2]=x(gp*x(ep*u[Zn+100>>2]))+u[Zn+84>>2];u[Zn+88>>2]=x(fp*x(ep*hp))+u[Zn+88>>2];}return x(ep)}function jl(mk){mk=mk|0;return q[mk+748>>2]}function kl(mk,Zn,_n){mk=mk|0;Zn=Zn|0;_n=_n|0;Va(mk,Zn,_n);q[Zn+52>>2]=q[mk+552>>2];q[Zn+56>>2]=q[mk+556>>2];q[Zn+60>>2]=q[mk+560>>2];q[Zn+64>>2]=q[mk+564>>2];q[Zn+68>>2]=q[mk+568>>2];q[Zn+72>>2]=q[mk+572>>2];q[Zn+76>>2]=q[mk+576>>2];q[Zn+80>>2]=q[mk+580>>2];q[Zn+84>>2]=q[mk+584>>2];q[Zn+88>>2]=q[mk+588>>2];q[Zn+92>>2]=q[mk+592>>2];q[Zn+96>>2]=q[mk+596>>2];q[Zn+100>>2]=q[mk+600>>2];q[Zn+104>>2]=q[mk+604>>2];q[Zn+108>>2]=q[mk+608>>2];q[Zn+112>>2]=q[mk+612>>2];q[Zn+116>>2]=q[mk+616>>2];q[Zn+120>>2]=q[mk+620>>2];q[Zn+124>>2]=q[mk+624>>2];q[Zn+128>>2]=q[mk+628>>2];q[Zn+132>>2]=q[mk+632>>2];q[Zn+136>>2]=q[mk+636>>2];q[Zn+140>>2]=q[mk+640>>2];q[Zn+144>>2]=q[mk+644>>2];q[Zn+148>>2]=q[mk+648>>2];q[Zn+152>>2]=q[mk+652>>2];q[Zn+156>>2]=q[mk+656>>2];q[Zn+160>>2]=q[mk+660>>2];q[Zn+164>>2]=q[mk+664>>2];q[Zn+168>>2]=q[mk+668>>2];q[Zn+172>>2]=q[mk+672>>2];q[Zn+176>>2]=q[mk+676>>2];q[Zn+184>>2]=r[mk+736|0];q[Zn+188>>2]=r[mk+737|0];q[Zn+196>>2]=q[mk+684>>2];q[Zn+192>>2]=q[mk+680>>2];q[Zn+180>>2]=r[mk+740|0];_n=mk+688|0;u[Zn+200>>2]=pc(_n);u[Zn+204>>2]=qc(_n);q[Zn+208>>2]=q[mk+696>>2];q[Zn+212>>2]=q[mk+700>>2];q[Zn+216>>2]=q[mk+704>>2];return 3996}function ll(mk){return 220}function ml(mk,Zn,_n){mk=mk|0;Zn=Zn|0;_n=_n|0;var lp=x(0);_n=_n+1|0;a:{if(_n>>>0>6){break a}b:{switch(_n-1|0){case 0:case 1:case 2:case 3:case 4:break a;default:break b}}Zn=Zn+ -1|0;if(Zn>>>0>3){break a}c:{switch(Zn-1|0){case 0:return x(u[mk+764>>2]);case 2:return x(u[mk+760>>2]);case 1:return x(u[mk+752>>2]);default:break c}}lp=u[mk+756>>2];}return x(lp)}function nl(mk,Zn,_n,mp){mk=mk|0;Zn=Zn|0;_n=x(_n);mp=mp|0;mp=mp+1|0;a:{if(mp>>>0>6){break a}b:{switch(mp-1|0){case 0:case 1:case 2:case 3:case 4:break a;default:break b}}Zn=Zn+ -1|0;if(Zn>>>0>3){break a}c:{switch(Zn-1|0){case 0:u[mk+764>>2]=_n;q[mk+748>>2]=q[mk+748>>2]|2;return;case 2:u[mk+760>>2]=_n;q[mk+748>>2]=q[mk+748>>2]|1;return;case 1:u[mk+752>>2]=_n;q[mk+748>>2]=q[mk+748>>2]|4;return;default:break c}}u[mk+756>>2]=_n;q[mk+748>>2]=q[mk+748>>2]|8;}}function ol(mk,Zn,_n){var mp=0;mp=P-16|0;P=mp;u[mp+12>>2]=Zn;Vl(mk+688|0,mp+12|0);u[mk+680>>2]=x(u[mp+12>>2]-vd(mk,q[mk+28>>2]+4|0,q[mk+32>>2]+4|0))/_n;P=mp+16|0;}function pl(mk,Zn,_n){var np=0;np=q[Zn+4>>2];q[mk+552>>2]=q[Zn>>2];q[mk+556>>2]=np;np=q[Zn+12>>2];q[mk+560>>2]=q[Zn+8>>2];q[mk+564>>2]=np;np=q[Zn+28>>2];q[mk+576>>2]=q[Zn+24>>2];q[mk+580>>2]=np;np=q[Zn+20>>2];q[mk+568>>2]=q[Zn+16>>2];q[mk+572>>2]=np;np=q[Zn+44>>2];q[mk+592>>2]=q[Zn+40>>2];q[mk+596>>2]=np;np=q[Zn+36>>2];q[mk+584>>2]=q[Zn+32>>2];q[mk+588>>2]=np;np=q[Zn+60>>2];q[mk+608>>2]=q[Zn+56>>2];q[mk+612>>2]=np;np=q[Zn+52>>2];q[mk+600>>2]=q[Zn+48>>2];q[mk+604>>2]=np;Zn=q[_n+12>>2];q[mk+624>>2]=q[_n+8>>2];q[mk+628>>2]=Zn;Zn=q[_n+4>>2];q[mk+616>>2]=q[_n>>2];q[mk+620>>2]=Zn;Zn=q[_n+20>>2];q[mk+632>>2]=q[_n+16>>2];q[mk+636>>2]=Zn;Zn=q[_n+28>>2];q[mk+640>>2]=q[_n+24>>2];q[mk+644>>2]=Zn;Zn=q[_n+36>>2];q[mk+648>>2]=q[_n+32>>2];q[mk+652>>2]=Zn;Zn=q[_n+44>>2];q[mk+656>>2]=q[_n+40>>2];q[mk+660>>2]=Zn;Zn=q[_n+60>>2];q[mk+672>>2]=q[_n+56>>2];q[mk+676>>2]=Zn;Zn=q[_n+52>>2];q[mk+664>>2]=q[_n+48>>2];q[mk+668>>2]=Zn;n[q[q[mk>>2]+8>>2]](mk);}function ql(mk,Zn,_n,op,pp,qp){var rp=x(0),sp=0,tp=x(0),up=0,vp=x(0),wp=0,xp=0,yp=x(0),zp=0,Ap=x(0),Bp=0,Cp=0,Dp=x(0),Ep=x(0),Fp=x(0),Gp=x(0),Hp=x(0),Ip=x(0),Jp=0,Kp=x(0),Lp=x(0),Mp=x(0),Np=x(0),Op=x(0),Pp=x(0),Qp=x(0),Rp=x(0),Sp=x(0),Tp=x(0),Up=x(0),Vp=x(0),Wp=x(0),Xp=x(0),Yp=x(0),Zp=x(0),_p=x(0),$p=x(0),aq=x(0),bq=x(0),cq=x(0),dq=x(0),eq=x(0),fq=x(0),gq=x(0),hq=x(0),iq=x(0),jq=x(0),kq=x(0),lq=x(0),mq=x(0),nq=x(0),oq=x(0);Gp=u[mk+656>>2];Ap=u[op+40>>2];gq=x(Gp*Ap);Pp=u[mk+624>>2];Dp=u[op+32>>2];Qp=u[mk+640>>2];Ep=u[op+36>>2];hq=x(x(Pp*Dp)+x(Qp*Ep));vp=u[op+24>>2];iq=x(Gp*vp);tp=u[op+16>>2];rp=u[op+20>>2];jq=x(x(Pp*tp)+x(Qp*rp));Wp=u[mk+592>>2];Op=u[_n+40>>2];kq=x(Wp*Op);Kp=u[mk+560>>2];Fp=u[_n+32>>2];Lp=u[mk+576>>2];yp=u[_n+36>>2];lq=x(x(Kp*Fp)+x(Lp*yp));Xp=u[mk+588>>2];mq=x(Xp*Op);Yp=u[mk+556>>2];Zp=u[mk+572>>2];Mp=x(x(Yp*Fp)+x(Zp*yp));_p=u[mk+584>>2];Rp=x(_p*Op);$p=u[mk+552>>2];aq=u[mk+568>>2];Sp=x(x($p*Fp)+x(aq*yp));Tp=u[_n+24>>2];nq=x(Wp*Tp);Up=u[_n+16>>2];Vp=u[_n+20>>2];oq=x(x(Kp*Up)+x(Lp*Vp));bq=u[mk+664>>2];cq=u[mk+668>>2];Hp=u[mk+672>>2];eq=x(x(x(x(Dp*bq)+x(Ep*cq))+x(Ap*Hp))+u[op+56>>2]);fq=x(x(x(x(tp*bq)+x(rp*cq))+x(vp*Hp))+u[op+52>>2]);dq=u[mk+600>>2];Ip=u[mk+604>>2];rp=x(x(Fp*dq)+x(yp*Ip));yp=u[mk+608>>2];Np=u[_n+56>>2];Op=x(x(rp+x(Op*yp))+Np);Ep=u[_n+52>>2];Fp=x(x(x(x(Up*dq)+x(Vp*Ip))+x(Tp*yp))+Ep);vp=u[op>>2];tp=u[op+4>>2];Pp=x(x(vp*Pp)+x(tp*Qp));rp=u[op+8>>2];Qp=x(rp*Gp);Gp=u[_n>>2];Ap=x(Gp*Kp);Kp=u[_n+4>>2];Ap=x(Ap+x(Kp*Lp));Lp=u[_n+8>>2];Dp=x(Lp*Wp);Hp=x(u[op+48>>2]+x(x(x(vp*bq)+x(tp*cq))+x(rp*Hp)));yp=x(u[_n+48>>2]+x(x(x(Gp*dq)+x(Kp*Ip))+x(Lp*yp)));Jp=q[Zn+24>>2];wp=r[mk+736|0];up=Jp<<1;a:{if(wp){break a}sp=q[Zn+8>>2];q[sp>>2]=1065353216;up=(Jp<<2)+4|0;q[up+sp>>2]=1065353216;xp=sp;sp=(Jp<<3)+8|0;q[xp+sp>>2]=1065353216;Bp=q[Zn+16>>2];q[Bp>>2]=-1082130432;q[up+Bp>>2]=-1082130432;q[sp+Bp>>2]=-1082130432;Np=u[_n+56>>2];Ep=u[_n+52>>2];up=Jp<<1;}rp=u[_n+48>>2];xp=q[Zn+12>>2];q[xp+12>>2]=0;vp=x(Op-Np);u[xp+4>>2]=vp;q[xp>>2]=0;tp=x(Fp-Ep);u[xp+8>>2]=-tp;sp=Jp<<2;_n=sp+xp|0;q[_n+12>>2]=0;rp=x(yp-rp);u[_n+8>>2]=rp;q[_n+4>>2]=0;u[_n>>2]=-vp;_n=up<<2;up=_n+xp|0;q[up+8>>2]=0;q[up+12>>2]=0;u[up+4>>2]=-rp;u[up>>2]=tp;Ep=u[op+48>>2];tp=u[op+56>>2];rp=u[op+52>>2];zp=q[Zn+20>>2];q[zp+12>>2]=0;q[zp>>2]=0;vp=x(fq-rp);u[zp+8>>2]=vp;tp=x(eq-tp);u[zp+4>>2]=-tp;op=sp+zp|0;q[op+12>>2]=0;rp=x(Hp-Ep);u[op+8>>2]=-rp;q[op+4>>2]=0;u[op>>2]=tp;_n=_n+zp|0;q[_n+8>>2]=0;q[_n+12>>2]=0;u[_n+4>>2]=rp;u[_n>>2]=-vp;Np=u[(r[mk+748|0]&8?mk+756|0:Zn+4|0)>>2];Ip=x(Np*u[Zn>>2]);Cp=q[Zn+28>>2];if(!wp){u[Cp>>2]=Ip*x(Hp-yp);u[sp+Cp>>2]=Ip*x(fq-Fp);u[Cp+(Jp<<3)>>2]=Ip*x(eq-Op);}Bp=w(Jp,12);Fp=x(x(x($p*Gp)+x(aq*Kp))+x(_p*Lp));u[Bp+xp>>2]=Fp;up=Bp+8|0;rp=x(Sp+Rp);u[up+xp>>2]=rp;sp=Bp+4|0;Hp=x(x(x($p*Up)+x(aq*Vp))+x(_p*Tp));u[sp+xp>>2]=Hp;wp=Jp<<4;yp=x(x(x(Gp*Yp)+x(Kp*Zp))+x(Lp*Xp));u[wp+xp>>2]=yp;op=wp|4;Rp=x(x(x(Yp*Up)+x(Zp*Vp))+x(Xp*Tp));u[op+xp>>2]=Rp;_n=wp|8;Sp=x(Mp+mq);u[_n+xp>>2]=Sp;u[zp+Bp>>2]=-Fp;u[up+zp>>2]=-rp;u[sp+zp>>2]=-Hp;u[zp+wp>>2]=-yp;u[op+zp>>2]=-Rp;u[_n+zp>>2]=-Sp;Mp=x(Ap+Dp);tp=x(jq+iq);Ap=x(oq+nq);Ep=x(Pp+Qp);vp=x(x(Mp*tp)-x(Ap*Ep));Gp=x(rp*vp);rp=x(hq+gq);Dp=x(lq+kq);tp=x(x(Ap*rp)-x(Dp*tp));rp=x(x(Dp*Ep)-x(Mp*rp));u[Cp+Bp>>2]=x(Gp+x(x(Fp*tp)+x(Hp*rp)))*Ip;u[wp+Cp>>2]=x(x(Sp*vp)+x(x(yp*tp)+x(Rp*rp)))*Ip;b:{c:{if(r[mk+716|0]){Bp=1;up=r[mk+737|0]!=0;vp=x(u[mk+708>>2]*u[mk+732>>2]);op=vp>x(0)?1:2;break c}if(!r[mk+737|0]){break b}Bp=0;vp=x(0);up=1;op=0;}Cp=w(Jp,5);wp=Cp<<2;u[wp+xp>>2]=Mp;sp=wp+8|0;u[sp+xp>>2]=Dp;_n=wp+4|0;u[_n+xp>>2]=Ap;u[sp+zp>>2]=-Dp;u[_n+zp>>2]=-Ap;u[zp+wp>>2]=-Mp;_n=mk+688|0;tp=pc(_n);rp=qc(_n);_n=q[Zn+28>>2];q[wp+_n>>2]=0;wp=tp!=rp;up=(wp|Bp^1)&up;sp=q[mk+748>>2];if(sp&2){Np=u[mk+764>>2];}if(up){if(sp&4){q[q[Zn+32>>2]+(Cp<<2)>>2]=q[mk+752>>2];}rp=jb(u[mk+728>>2],tp,rp,u[mk+680>>2],x(Np*u[Zn>>2]));_n=q[Zn+28>>2];up=Cp<<2;sp=_n+up|0;u[sp>>2]=x(x(rp*u[mk+680>>2])*u[mk+732>>2])+u[sp>>2];u[up+q[Zn+36>>2]>>2]=-u[mk+684>>2];q[up+q[Zn+40>>2]>>2]=q[mk+684>>2];}if(!Bp){break b}sp=_n;_n=Cp<<2;sp=sp+_n|0;u[sp>>2]=u[sp>>2]+x(vp*x(Np*u[Zn>>2]));if(o[mk+748|0]&1){q[_n+q[Zn+32>>2]>>2]=q[mk+760>>2];}d:{if(!wp){q[q[Zn+36>>2]+(Cp<<2)>>2]=-8388609;rp=x(3.4028234663852886e+38);break d}_n=q[Zn+36>>2]+(Cp<<2)|0;if((op|0)==1){q[_n>>2]=0;rp=x(3.4028234663852886e+38);break d}q[_n>>2]=-8388609;rp=x(0);}u[q[Zn+40>>2]+(Cp<<2)>>2]=rp;rp=u[mk+704>>2];e:{if(!(rp>x(0))){break e}tp=x(x(x(x(Mp*u[pp>>2])+x(Ap*u[pp+4>>2]))+x(Dp*u[pp+8>>2]))-x(x(x(Mp*u[qp>>2])+x(Ap*u[qp+4>>2]))+x(Dp*u[qp+8>>2])));if((op|0)==1){if(!(tp<x(0))){break e}rp=x(tp*x(-rp));if(!(rp>u[sp>>2])){break e}u[sp>>2]=rp;break e}if(!(tp>x(0))){break e}rp=x(tp*x(-rp));if(!(rp<u[sp>>2])){break e}u[sp>>2]=rp;}u[sp>>2]=u[mk+700>>2]*u[sp>>2];}}function rl(mk,Zn,_n,op,pp,qp){var pq=0,qq=x(0),rq=x(0),sq=x(0),tq=x(0),uq=x(0),vq=x(0),wq=x(0),xq=x(0),yq=x(0),zq=0,Aq=x(0),Bq=x(0),Cq=x(0),Dq=x(0),Eq=0,Fq=x(0),Gq=x(0),Hq=0,Iq=0,Jq=x(0),Kq=x(0),Lq=x(0),Mq=x(0),Nq=x(0),Oq=0,Pq=0,Qq=x(0),Rq=0,Sq=x(0),Tq=x(0),Uq=x(0),Vq=x(0),Wq=x(0),Xq=x(0),Yq=x(0),Zq=x(0),_q=x(0),$q=x(0),ar=x(0),br=x(0),cr=x(0),dr=x(0),er=x(0),fr=x(0),gr=x(0),hr=x(0),ir=x(0),jr=x(0),kr=x(0),lr=x(0),mr=x(0),nr=x(0),or=x(0),pr=x(0),qr=x(0),rr=x(0),sr=x(0),tr=x(0);pq=P+ -64|0;P=pq;qq=u[mk+588>>2];Jq=u[mk+572>>2];Kq=u[mk+556>>2];Wq=u[op+56>>2];Xq=u[op+52>>2];Aq=u[mk+664>>2];Bq=u[mk+668>>2];Cq=u[mk+672>>2];Yq=u[_n+56>>2];Zq=u[_n+52>>2];Dq=u[mk+600>>2];Gq=u[mk+604>>2];uq=u[mk+608>>2];_q=u[op+36>>2];$q=u[op+40>>2];Lq=u[_n+36>>2];Sq=u[_n+40>>2];rq=u[mk+624>>2];Qq=u[op+20>>2];wq=u[mk+640>>2];ar=u[op+24>>2];Fq=u[mk+656>>2];vq=u[mk+560>>2];Tq=u[_n+20>>2];xq=u[mk+576>>2];Uq=u[_n+24>>2];yq=u[mk+592>>2];Nq=u[q[mk+32>>2]+404>>2];rr=u[q[mk+28>>2]+404>>2];Hq=q[Zn+24>>2];br=u[op+48>>2];cr=u[_n+48>>2];dr=u[op+32>>2];Vq=u[_n+32>>2];er=u[op+8>>2];Mq=u[op>>2];sr=u[op+4>>2];fr=u[_n+8>>2];gr=u[_n>>2];hr=u[_n+4>>2];tr=u[op+16>>2];ir=u[_n+16>>2];q[pq+60>>2]=0;tq=x(rr+Nq);tq=tq>x(0)?x(Nq/tq):x(.5);sq=x(x(1)-tq);jr=x(x(x(vq*Vq)+x(xq*Lq))+x(yq*Sq));kr=x(x(x(rq*dr)+x(wq*_q))+x(Fq*$q));lr=x(x(jr*tq)+x(kr*sq));mr=x(x(x(gr*vq)+x(hr*xq))+x(fr*yq));nr=x(x(x(Mq*rq)+x(sr*wq))+x(er*Fq));or=x(x(mr*tq)+x(nr*sq));pr=x(x(x(vq*ir)+x(xq*Tq))+x(yq*Uq));qr=x(x(x(rq*tr)+x(wq*Qq))+x(Fq*ar));wq=x(x(pr*tq)+x(qr*sq));Fq=x(x(1)/x(E(x(x(lr*lr)+x(x(or*or)+x(wq*wq))))));rq=x(lr*Fq);u[pq+56>>2]=rq;wq=x(wq*Fq);u[pq+52>>2]=wq;Fq=x(or*Fq);u[pq+48>>2]=Fq;q[pq+28>>2]=0;_q=x(Wq+x(x(x(dr*Aq)+x(_q*Bq))+x($q*Cq)));xq=x(_q-Wq);Wq=x(br+x(x(x(Mq*Aq)+x(sr*Bq))+x(er*Cq)));yq=x(Wq-br);$q=x(Xq+x(x(x(tr*Aq)+x(Qq*Bq))+x(ar*Cq)));Bq=x($q-Xq);Cq=x(x(xq*rq)+x(x(yq*Fq)+x(Bq*wq)));vq=x(rq*Cq);Xq=x(Yq+x(x(x(Vq*Dq)+x(Lq*Gq))+x(Sq*uq)));Aq=x(Xq-Yq);Yq=x(cr+x(x(x(gr*Dq)+x(hr*Gq))+x(fr*uq)));Qq=x(Yq-cr);ar=x(Zq+x(x(x(ir*Dq)+x(Tq*Gq))+x(Uq*uq)));uq=x(ar-Zq);Dq=x(x(Aq*rq)+x(x(Qq*Fq)+x(uq*wq)));Gq=x(rq*Dq);xq=x(xq-vq);Zq=x(Aq-Gq);Aq=x(x(tq*xq)+x(sq*Zq));u[pq+24>>2]=Aq;br=x(wq*Cq);cr=x(Bq-br);Mq=uq;uq=x(wq*Dq);dr=x(Mq-uq);Bq=x(x(tq*cr)+x(sq*dr));u[pq+20>>2]=Bq;Mq=yq;yq=x(Fq*Cq);er=x(Mq-yq);Mq=Qq;Qq=x(Fq*Dq);Mq=x(Mq-Qq);Cq=x(x(tq*er)+x(sq*Mq));u[pq+16>>2]=Cq;vq=x(Gq-vq);Dq=x(xq-x(sq*vq));xq=x(uq-br);Gq=x(cr-x(sq*xq));yq=x(Qq-yq);uq=x(er-x(sq*yq));vq=x(Zq+x(tq*vq));xq=x(dr+x(tq*xq));yq=x(Mq+x(tq*yq));op=rr<x(1.1920928955078125e-7)|Nq<x(1.1920928955078125e-7);_n=pq;Nq=x(x(Aq*Aq)+x(x(Cq*Cq)+x(Bq*Bq)));a:{if(!!(Nq>x(1.1920928955078125e-7))){qq=x(x(1)/x(E(Nq)));Aq=x(Aq*qq);u[pq+24>>2]=Aq;Bq=x(Bq*qq);u[pq+20>>2]=Bq;qq=x(Cq*qq);break a}q[pq+28>>2]=0;Aq=x(x(x(Kq*Vq)+x(Jq*Lq))+x(qq*Sq));u[pq+24>>2]=Aq;Bq=x(x(x(Kq*ir)+x(Jq*Tq))+x(qq*Uq));u[pq+20>>2]=Bq;qq=x(x(x(gr*Kq)+x(hr*Jq))+x(fr*qq));}u[_n+16>>2]=qq;q[pq+12>>2]=0;Jq=x(x(Fq*Bq)-x(wq*qq));u[pq+8>>2]=Jq;Kq=x(x(rq*qq)-x(Fq*Aq));u[pq+4>>2]=Kq;Cq=x(x(wq*Aq)-x(rq*Bq));u[pq>>2]=Cq;u[pq+40>>2]=x(yq*Bq)-x(xq*qq);u[pq+36>>2]=x(vq*qq)-x(yq*Aq);u[pq+32>>2]=x(xq*Aq)-x(vq*Bq);Eq=q[pq+36>>2];_n=q[Zn+12>>2];q[_n>>2]=q[pq+32>>2];q[_n+4>>2]=Eq;q[_n+8>>2]=q[pq+40>>2];_n=q[Zn+20>>2];u[_n+8>>2]=-x(x(uq*Bq)-x(Gq*qq));u[_n+4>>2]=-x(x(Dq*qq)-x(uq*Aq));u[_n>>2]=-x(x(Gq*Aq)-x(Dq*Bq));q[pq+44>>2]=0;Uq=x(x(yq*Kq)-x(xq*Cq));u[pq+40>>2]=Uq;Nq=x(x(vq*Cq)-x(yq*Jq));u[pq+36>>2]=Nq;Vq=x(x(xq*Jq)-x(vq*Kq));u[pq+32>>2]=Vq;Lq=x(x(uq*Kq)-x(Gq*Cq));Sq=x(x(Dq*Cq)-x(uq*Jq));Tq=x(x(Gq*Jq)-x(Dq*Kq));if(!(!op|!r[mk+716|0])){u[pq+40>>2]=tq*Uq;u[pq+36>>2]=tq*Nq;u[pq+32>>2]=tq*Vq;Sq=x(sq*Sq);Tq=x(sq*Tq);Lq=x(sq*Lq);}zq=q[pq+36>>2];Eq=Hq<<2;_n=Eq+q[Zn+12>>2]|0;q[_n>>2]=q[pq+32>>2];q[_n+4>>2]=zq;q[_n+8>>2]=q[pq+40>>2];_n=q[Zn+20>>2];u[_n+Eq>>2]=-Tq;Eq=Hq+1|0;u[_n+(Eq<<2)>>2]=-Sq;Oq=Hq+2|0;u[_n+(Oq<<2)>>2]=-Lq;Lq=x(x(yq*wq)-x(xq*Fq));u[pq+40>>2]=Lq;q[pq+44>>2]=0;yq=x(x(vq*Fq)-x(yq*rq));u[pq+36>>2]=yq;xq=x(x(xq*rq)-x(vq*wq));u[pq+32>>2]=xq;vq=x(x(uq*wq)-x(Gq*Fq));uq=x(x(Dq*Fq)-x(uq*rq));Dq=x(x(Gq*rq)-x(Dq*wq));if(op){u[pq+40>>2]=tq*Lq;u[pq+36>>2]=tq*yq;u[pq+32>>2]=tq*xq;vq=x(sq*vq);uq=x(sq*uq);Dq=x(sq*Dq);}Iq=q[pq+36>>2];op=Hq<<1;zq=op<<2;_n=zq+q[Zn+12>>2]|0;q[_n>>2]=q[pq+32>>2];q[_n+4>>2]=Iq;q[_n+8>>2]=q[pq+40>>2];_n=q[Zn+20>>2];u[zq+_n>>2]=-Dq;Iq=op|1;u[(Iq<<2)+_n>>2]=-uq;Rq=op+2|0;u[(Rq<<2)+_n>>2]=-vq;Gq=u[(r[mk+748|0]&8?mk+756|0:Zn+4|0)>>2];b:{if(r[mk+736|0]){vq=x(-Jq);Dq=x(-Kq);tq=x(-Cq);uq=x(-qq);Eq=q[Zn+28>>2];break b}sq=u[Zn>>2];zq=q[pq+20>>2];_n=q[Zn+8>>2];q[_n>>2]=q[pq+16>>2];q[_n+4>>2]=zq;q[_n+8>>2]=q[pq+24>>2];Pq=q[pq+4>>2];zq=Hq<<2;_n=zq+q[Zn+8>>2]|0;q[_n>>2]=q[pq>>2];q[_n+4>>2]=Pq;q[_n+8>>2]=q[pq+8>>2];Pq=q[pq+52>>2];op=op<<2;_n=op+q[Zn+8>>2]|0;q[_n>>2]=q[pq+48>>2];q[_n+4>>2]=Pq;q[_n+8>>2]=q[pq+56>>2];_n=q[Zn+16>>2];uq=x(-qq);u[_n>>2]=uq;u[_n+4>>2]=-Bq;u[_n+8>>2]=-Aq;tq=x(-Cq);u[_n+zq>>2]=tq;Dq=x(-Kq);u[_n+(Eq<<2)>>2]=Dq;vq=x(-Jq);u[_n+(Oq<<2)>>2]=vq;u[_n+op>>2]=-Fq;u[_n+(Iq<<2)>>2]=-wq;u[_n+(Rq<<2)>>2]=-rq;Eq=q[Zn+28>>2];sq=x(Gq*sq);xq=x(Wq-Yq);yq=x($q-ar);Lq=x(_q-Xq);u[Eq>>2]=sq*x(x(x(xq*qq)+x(yq*Bq))+x(Lq*Aq));u[zq+Eq>>2]=sq*x(x(x(xq*Cq)+x(yq*Kq))+x(Lq*Jq));u[op+Eq>>2]=sq*x(x(x(xq*Fq)+x(yq*wq))+x(Lq*rq));_n=q[Zn+20>>2];}op=q[Zn+12>>2];zq=w(Hq,12);u[op+zq>>2]=qq;Oq=zq+8|0;u[Oq+op>>2]=Aq;Iq=zq+4|0;u[Iq+op>>2]=Bq;Hq=Hq<<4;u[Hq+op>>2]=Cq;Rq=Hq|4;u[Rq+op>>2]=Kq;Pq=Hq|8;u[Pq+op>>2]=Jq;u[_n+zq>>2]=uq;sq=u[pq+20>>2];u[_n+Iq>>2]=-sq;rq=u[pq+24>>2];u[_n+Oq>>2]=-rq;u[_n+Hq>>2]=tq;u[_n+Rq>>2]=Dq;u[_n+Pq>>2]=vq;tq=x(Gq*u[Zn>>2]);wq=x(x(pr*kr)-x(jr*qr));uq=x(wq*qq);qq=x(x(jr*nr)-x(mr*kr));uq=x(uq+x(sq*qq));sq=x(x(mr*qr)-x(pr*nr));u[zq+Eq>>2]=tq*x(uq+x(rq*sq));u[Eq+Hq>>2]=tq*x(x(x(wq*Cq)+x(qq*Kq))+x(sq*Jq));c:{d:{if(r[mk+716|0]){vq=x(u[mk+708>>2]*u[mk+732>>2]);Oq=vq>x(0)?1:2;Iq=r[mk+737|0]!=0;Hq=1;break d}if(!r[mk+737|0]){break c}vq=x(0);Iq=1;Oq=0;Hq=0;}tq=u[pq+48>>2];Eq=w(q[Zn+24>>2],5);zq=Eq<<2;q[zq+op>>2]=q[pq+48>>2];qq=u[pq+52>>2];Rq=zq+4|0;q[Rq+op>>2]=q[pq+52>>2];sq=u[pq+56>>2];Pq=zq+8|0;q[op+Pq>>2]=q[pq+56>>2];u[_n+Rq>>2]=-qq;u[_n+zq>>2]=-tq;u[_n+Pq>>2]=-sq;_n=mk+688|0;rq=pc(_n);wq=qc(_n);op=q[Zn+28>>2];q[zq+op>>2]=0;zq=rq!=wq;_n=(zq|Hq^1)&Iq;Iq=q[mk+748>>2];if(Iq&2){Gq=u[mk+764>>2];}if(_n){if(Iq&4){q[q[Zn+32>>2]+(Eq<<2)>>2]=q[mk+752>>2];}rq=jb(u[mk+728>>2],rq,wq,u[mk+680>>2],x(Gq*u[Zn>>2]));op=q[Zn+28>>2];_n=Eq<<2;Iq=op+_n|0;u[Iq>>2]=x(x(rq*u[mk+680>>2])*u[mk+732>>2])+u[Iq>>2];u[_n+q[Zn+36>>2]>>2]=-u[mk+684>>2];q[_n+q[Zn+40>>2]>>2]=q[mk+684>>2];}if(!Hq){break c}_n=op;op=Eq<<2;_n=_n+op|0;u[_n>>2]=u[_n>>2]+x(vq*x(Gq*u[Zn>>2]));if(o[mk+748|0]&1){q[op+q[Zn+32>>2]>>2]=q[mk+760>>2];}e:{if(!zq){q[q[Zn+36>>2]+(Eq<<2)>>2]=-8388609;rq=x(3.4028234663852886e+38);break e}op=q[Zn+36>>2]+(Eq<<2)|0;if((Oq|0)==1){q[op>>2]=0;rq=x(3.4028234663852886e+38);break e}q[op>>2]=-8388609;rq=x(0);}u[q[Zn+40>>2]+(Eq<<2)>>2]=rq;rq=u[mk+704>>2];f:{if(!(rq>x(0))){break f}qq=x(x(x(x(u[pp>>2]*tq)+x(u[pp+4>>2]*qq))+x(u[pp+8>>2]*sq))-x(x(x(u[qp>>2]*tq)+x(u[qp+4>>2]*qq))+x(u[qp+8>>2]*sq)));if((Oq|0)==1){if(!(qq<x(0))){break f}qq=x(qq*x(-rq));if(!(qq>u[_n>>2])){break f}u[_n>>2]=qq;break f}if(!(qq>x(0))){break f}qq=x(qq*x(-rq));if(!(qq<u[_n>>2])){break f}u[_n>>2]=qq;}u[_n>>2]=u[mk+700>>2]*u[_n>>2];}P=pq- -64|0;}function sl(mk,Zn){mk=mk|0;Zn=Zn|0;var _n=0,op=0,pp=0,qp=0;_n=q[mk+32>>2];pp=_n+388|0;op=q[mk+28>>2];qp=op+388|0;_n=_n+4|0;op=op+4|0;if(r[mk+739|0]){rl(mk,Zn,op,_n,qp,pp);return}ql(mk,Zn,op,_n,qp,pp);}function tl(mk,Zn){mk=mk|0;Zn=Zn|0;var ur=x(0);if(r[mk+738|0]){q[Zn>>2]=0;q[Zn+4>>2]=0;return}q[Zn>>2]=5;q[Zn+4>>2]=1;ur=vd(mk,q[mk+28>>2]+4|0,q[mk+32>>2]+4|0);u[mk+728>>2]=ur;yf(mk+688|0,ur);if(!(r[mk+737|0]?0:!r[mk+716|0])){q[Zn>>2]=q[Zn>>2]+1;q[Zn+4>>2]=q[Zn+4>>2]+ -1;}}function ul(mk){mk=mk|0;var Zn=0,vr=x(0),wr=x(0),xr=0,yr=x(0),zr=0,Ar=x(0),Br=x(0),Cr=x(0),Dr=x(0),Er=x(0),Fr=x(0),Gr=x(0),Hr=x(0),Ir=0,Jr=x(0),Kr=x(0),Lr=x(0),Mr=x(0),Nr=x(0),Or=x(0),Pr=0,Qr=x(0),Rr=x(0),Sr=x(0),Tr=x(0),Ur=x(0),Vr=x(0),Wr=x(0),Xr=x(0),Yr=x(0),Zr=x(0),_r=x(0),$r=x(0),as=x(0),bs=x(0),cs=x(0),ds=x(0),es=x(0),fs=x(0),gs=x(0);zr=P-176|0;P=zr;if(r[mk+738|0]){q[mk+744>>2]=0;q[mk+36>>2]=0;a:{if(r[mk+736|0]){break a}yr=u[mk+664>>2];Zn=q[mk+32>>2];Ar=u[mk+668>>2];vr=u[mk+672>>2];Dr=x(x(x(x(yr*u[Zn+4>>2])+x(Ar*u[Zn+8>>2]))+x(vr*u[Zn+12>>2]))+u[Zn+52>>2]);Cr=u[mk+600>>2];xr=q[mk+28>>2];wr=u[mk+604>>2];Er=u[mk+608>>2];Fr=x(x(x(x(Cr*u[xr+4>>2])+x(wr*u[xr+8>>2]))+x(Er*u[xr+12>>2]))+u[xr+52>>2]);Gr=x(Dr-Fr);Mr=x(x(x(x(yr*u[Zn+20>>2])+x(Ar*u[Zn+24>>2]))+x(vr*u[Zn+28>>2]))+u[Zn+56>>2]);Nr=x(x(x(x(Cr*u[xr+20>>2])+x(wr*u[xr+24>>2]))+x(Er*u[xr+28>>2]))+u[xr+56>>2]);Br=x(Mr-Nr);Tr=x(x(x(x(yr*u[Zn+36>>2])+x(Ar*u[Zn+40>>2]))+x(vr*u[Zn+44>>2]))+u[Zn+60>>2]);Ur=x(x(x(x(Cr*u[xr+36>>2])+x(wr*u[xr+40>>2]))+x(Er*u[xr+44>>2]))+u[xr+60>>2]);yr=x(Tr-Ur);Ar=x(x(x(Gr*Gr)+x(Br*Br))+x(yr*yr));b:{if(!!(Ar>x(1.1920928955078125e-7))){q[zr+140>>2]=0;Ar=x(x(1)/x(E(Ar)));vr=x(yr*Ar);u[zr+136>>2]=vr;yr=x(Br*Ar);u[zr+132>>2]=yr;Ar=x(Gr*Ar);u[zr+128>>2]=Ar;break b}q[zr+136>>2]=0;q[zr+140>>2]=0;q[zr+128>>2]=1065353216;q[zr+132>>2]=0;Ar=x(1);yr=x(0);vr=x(0);}c:{if(!!(x(y(vr))>x(.7071067690849304))){wr=x(x(vr*vr)+x(yr*yr));Cr=x(x(1)/x(E(wr)));wr=x(wr*Cr);Er=x(Cr*x(-vr));Gr=x(Ar*Er);vr=x(yr*Cr);yr=x(vr*x(-Ar));Br=x(0);break c}wr=x(x(Ar*Ar)+x(yr*yr));Cr=x(x(1)/x(E(wr)));Gr=x(wr*Cr);Br=x(Cr*x(-yr));yr=x(vr*Br);Er=x(Ar*Cr);wr=x(Er*x(-vr));vr=x(0);}u[zr+168>>2]=Gr;u[zr+164>>2]=yr;u[zr+152>>2]=vr;u[zr+148>>2]=Er;u[zr+160>>2]=wr;u[zr+144>>2]=Br;while(1){xr=q[mk+28>>2];q[zr+80>>2]=q[xr+4>>2];q[zr+84>>2]=q[xr+20>>2];Ir=q[xr+36>>2];q[zr+92>>2]=0;q[zr+88>>2]=Ir;q[zr+96>>2]=q[xr+8>>2];q[zr+100>>2]=q[xr+24>>2];Ir=q[xr+40>>2];q[zr+108>>2]=0;q[zr+104>>2]=Ir;q[zr+112>>2]=q[xr+12>>2];q[zr+116>>2]=q[xr+28>>2];Ir=q[xr+44>>2];q[zr+124>>2]=0;q[zr+120>>2]=Ir;q[zr+32>>2]=q[Zn+4>>2];q[zr+36>>2]=q[Zn+20>>2];Ir=q[Zn+36>>2];q[zr+44>>2]=0;q[zr+40>>2]=Ir;q[zr+48>>2]=q[Zn+8>>2];q[zr+52>>2]=q[Zn+24>>2];Ir=q[Zn+40>>2];q[zr+60>>2]=0;q[zr+56>>2]=Ir;q[zr+64>>2]=q[Zn+12>>2];q[zr+68>>2]=q[Zn+28>>2];Ir=q[Zn+44>>2];q[zr+76>>2]=0;q[zr+72>>2]=Ir;yr=u[xr+52>>2];Ar=u[xr+56>>2];vr=u[xr+60>>2];q[zr+28>>2]=0;u[zr+24>>2]=Ur-vr;u[zr+20>>2]=Nr-Ar;u[zr+16>>2]=Fr-yr;yr=u[Zn+52>>2];Ar=u[Zn+56>>2];vr=u[Zn+60>>2];q[zr+12>>2]=0;u[zr+8>>2]=Tr-vr;u[zr+4>>2]=Mr-Ar;u[zr>>2]=Dr-yr;rc((w(Pr,84)+mk|0)+48|0,zr+80|0,zr+32|0,zr+16|0,zr,(zr+128|0)+(Pr<<4)|0,xr+456|0,u[xr+404>>2],Zn+456|0,u[Zn+404>>2]);Pr=Pr+1|0;if((Pr|0)==3){break a}Zn=q[mk+32>>2];continue}}yr=u[mk+576>>2];Ar=u[mk+560>>2];Cr=u[mk+592>>2];d:{if(!!(x(y(Cr))>x(.7071067690849304))){wr=x(x(Cr*Cr)+x(yr*yr));vr=x(x(1)/x(E(wr)));Er=x(wr*vr);wr=x(vr*x(-Cr));Gr=x(wr*Ar);Dr=x(0);Fr=x(vr*yr);vr=x(Fr*x(-Ar));break d}wr=x(x(Ar*Ar)+x(yr*yr));vr=x(x(1)/x(E(wr)));Gr=x(wr*vr);wr=x(vr*Ar);Er=x(wr*x(-Cr));Fr=x(0);Dr=x(vr*x(-yr));vr=x(Cr*Dr);}Zn=q[mk+32>>2];Jr=u[Zn+36>>2];Qr=u[Zn+20>>2];Pr=Zn+4|0;Rr=u[Pr>>2];Kr=u[Zn+40>>2];Sr=u[Zn+24>>2];Vr=u[Zn+8>>2];Lr=u[Zn+44>>2];Wr=u[Zn+28>>2];Xr=u[Zn+12>>2];xr=q[mk+28>>2];Mr=u[xr+44>>2];Nr=u[xr+36>>2];Tr=u[xr+40>>2];Ur=u[xr+12>>2];Ir=xr+4|0;Yr=u[Ir>>2];Zr=u[xr+8>>2];_r=u[xr+28>>2];$r=u[xr+20>>2];as=u[xr+24>>2];q[mk+344>>2]=0;q[mk+328>>2]=0;q[mk+308>>2]=0;q[mk+312>>2]=0;q[mk+300>>2]=0;q[mk+304>>2]=0;Br=x(x(x(Dr*Yr)+x(wr*Zr))+x(Fr*Ur));Hr=x(x(x(Dr*$r)+x(wr*as))+x(Fr*_r));wr=x(x(x(Dr*Nr)+x(wr*Tr))+x(Fr*Mr));Dr=x(x(x(Ur*Br)+x(_r*Hr))+x(Mr*wr));u[mk+324>>2]=Dr;Fr=x(x(x(Br*Zr)+x(Hr*as))+x(wr*Tr));u[mk+320>>2]=Fr;Or=x(x(x(Br*Yr)+x(Hr*$r))+x(wr*Nr));u[mk+316>>2]=Or;Hr=x(-Hr);Lr=x(x(x(Wr*Hr)-x(Br*Xr))-x(wr*Lr));u[mk+340>>2]=Lr;Kr=x(x(x(Sr*Hr)-x(Br*Vr))-x(wr*Kr));u[mk+336>>2]=Kr;wr=x(x(x(Qr*Hr)-x(Br*Rr))-x(wr*Jr));u[mk+332>>2]=wr;Br=u[xr+456>>2];Hr=u[xr+460>>2];Jr=u[xr+464>>2];q[mk+360>>2]=0;Jr=x(Dr*Jr);u[mk+356>>2]=Jr;Hr=x(Fr*Hr);u[mk+352>>2]=Hr;Br=x(Or*Br);u[mk+348>>2]=Br;Qr=u[Zn+456>>2];Rr=u[Zn+460>>2];Sr=u[Zn+464>>2];q[mk+376>>2]=0;Sr=x(Lr*Sr);u[mk+372>>2]=Sr;Rr=x(Kr*Rr);u[mk+368>>2]=Rr;Qr=x(wr*Qr);u[mk+364>>2]=Qr;u[mk+380>>2]=x(x(x(Or*Br)+x(Fr*Hr))+x(Dr*Jr))+x(x(x(wr*Qr)+x(Kr*Rr))+x(Lr*Sr));Or=u[xr+36>>2];Lr=u[Ir>>2];Kr=u[xr+20>>2];Hr=u[xr+40>>2];Jr=u[xr+8>>2];Qr=u[xr+24>>2];Fr=u[xr+44>>2];Rr=u[xr+12>>2];Sr=u[xr+28>>2];Vr=u[Zn+36>>2];Wr=u[Zn+20>>2];Xr=u[Pr>>2];bs=u[Zn+40>>2];cs=u[Zn+24>>2];es=u[Zn+8>>2];fs=u[Zn+44>>2];wr=u[Zn+28>>2];gs=u[Zn+12>>2];q[mk+428>>2]=0;q[mk+412>>2]=0;q[mk+392>>2]=0;q[mk+396>>2]=0;q[mk+384>>2]=0;q[mk+388>>2]=0;Br=x(x(x(Er*$r)+x(vr*as))+x(Gr*_r));Dr=x(-Br);ds=x(wr*Dr);wr=x(x(x(Er*Yr)+x(vr*Zr))+x(Gr*Ur));vr=x(x(x(Er*Nr)+x(vr*Tr))+x(Gr*Mr));Er=x(x(ds-x(gs*wr))-x(fs*vr));u[mk+424>>2]=Er;Gr=x(x(x(cs*Dr)-x(wr*es))-x(vr*bs));u[mk+420>>2]=Gr;Dr=x(x(x(Wr*Dr)-x(wr*Xr))-x(vr*Vr));u[mk+416>>2]=Dr;Fr=x(x(x(wr*Rr)+x(Br*Sr))+x(vr*Fr));u[mk+408>>2]=Fr;Hr=x(x(x(wr*Jr)+x(Br*Qr))+x(vr*Hr));u[mk+404>>2]=Hr;vr=x(x(x(wr*Lr)+x(Br*Kr))+x(vr*Or));u[mk+400>>2]=vr;wr=u[xr+456>>2];Br=u[xr+460>>2];Or=u[xr+464>>2];q[mk+444>>2]=0;Or=x(Fr*Or);u[mk+440>>2]=Or;Br=x(Hr*Br);u[mk+436>>2]=Br;wr=x(vr*wr);u[mk+432>>2]=wr;Lr=u[Zn+456>>2];Kr=u[Zn+460>>2];Jr=u[Zn+464>>2];q[mk+460>>2]=0;Jr=x(Er*Jr);u[mk+456>>2]=Jr;Kr=x(Gr*Kr);u[mk+452>>2]=Kr;Lr=x(Dr*Lr);u[mk+448>>2]=Lr;u[mk+464>>2]=x(x(x(vr*wr)+x(Hr*Br))+x(Fr*Or))+x(x(x(Dr*Lr)+x(Gr*Kr))+x(Er*Jr));Dr=u[xr+36>>2];Fr=u[Ir>>2];Hr=u[xr+20>>2];Br=u[xr+40>>2];Or=u[xr+8>>2];Lr=u[xr+24>>2];Gr=u[xr+44>>2];Kr=u[xr+12>>2];Jr=u[xr+28>>2];Qr=u[Zn+36>>2];Rr=u[Zn+20>>2];Sr=u[Pr>>2];Vr=u[Zn+40>>2];Wr=u[Zn+24>>2];Xr=u[Zn+8>>2];bs=u[Zn+44>>2];vr=u[Zn+28>>2];cs=u[Zn+12>>2];q[mk+512>>2]=0;q[mk+496>>2]=0;q[mk+476>>2]=0;q[mk+480>>2]=0;q[mk+468>>2]=0;q[mk+472>>2]=0;wr=x(x(x($r*Ar)+x(as*yr))+x(Cr*_r));Er=x(-wr);ds=x(vr*Er);vr=x(x(x(Yr*Ar)+x(Zr*yr))+x(Cr*Ur));yr=x(x(x(Nr*Ar)+x(Tr*yr))+x(Cr*Mr));Ar=x(x(ds-x(cs*vr))-x(bs*yr));u[mk+508>>2]=Ar;Cr=x(x(x(Wr*Er)-x(vr*Xr))-x(yr*Vr));u[mk+504>>2]=Cr;Er=x(x(x(Rr*Er)-x(vr*Sr))-x(yr*Qr));u[mk+500>>2]=Er;Gr=x(x(x(vr*Kr)+x(wr*Jr))+x(yr*Gr));u[mk+492>>2]=Gr;Br=x(x(x(vr*Or)+x(wr*Lr))+x(yr*Br));u[mk+488>>2]=Br;yr=x(x(x(vr*Fr)+x(wr*Hr))+x(yr*Dr));u[mk+484>>2]=yr;vr=u[xr+456>>2];wr=u[xr+460>>2];Dr=u[xr+464>>2];q[mk+528>>2]=0;Dr=x(Gr*Dr);u[mk+524>>2]=Dr;wr=x(Br*wr);u[mk+520>>2]=wr;vr=x(yr*vr);u[mk+516>>2]=vr;Fr=u[Zn+456>>2];Mr=u[Zn+460>>2];Nr=u[Zn+464>>2];q[mk+724>>2]=0;q[mk+544>>2]=0;Nr=x(Ar*Nr);u[mk+540>>2]=Nr;Mr=x(Cr*Mr);u[mk+536>>2]=Mr;Fr=x(Er*Fr);u[mk+532>>2]=Fr;u[mk+548>>2]=x(x(x(yr*vr)+x(Br*wr))+x(Gr*Dr))+x(x(x(Er*Fr)+x(Cr*Mr))+x(Ar*Nr));yr=vd(mk,Ir,Pr);u[mk+728>>2]=yr;yf(mk+688|0,yr);Pr=mk;vr=u[mk+560>>2];Zn=q[mk+28>>2];Cr=u[mk+576>>2];wr=u[mk+592>>2];yr=x(x(x(vr*u[Zn+4>>2])+x(Cr*u[Zn+8>>2]))+x(wr*u[Zn+12>>2]));Ar=x(x(x(vr*u[Zn+20>>2])+x(Cr*u[Zn+24>>2]))+x(wr*u[Zn+28>>2]));vr=x(x(x(vr*u[Zn+36>>2])+x(Cr*u[Zn+40>>2]))+x(wr*u[Zn+44>>2]));mk=q[mk+32>>2];u[Pr+720>>2]=x(1)/x(x(x(x(yr*x(x(x(yr*u[Zn+324>>2])+x(Ar*u[Zn+340>>2]))+x(vr*u[Zn+356>>2])))+x(Ar*x(x(x(yr*u[Zn+328>>2])+x(Ar*u[Zn+344>>2]))+x(vr*u[Zn+360>>2]))))+x(vr*x(x(x(yr*u[Zn+332>>2])+x(Ar*u[Zn+348>>2]))+x(vr*u[Zn+364>>2]))))+x(x(x(yr*x(x(x(yr*u[mk+324>>2])+x(Ar*u[mk+340>>2]))+x(vr*u[mk+356>>2])))+x(Ar*x(x(x(yr*u[mk+328>>2])+x(Ar*u[mk+344>>2]))+x(vr*u[mk+360>>2]))))+x(vr*x(x(x(yr*u[mk+332>>2])+x(Ar*u[mk+348>>2]))+x(vr*u[mk+364>>2])))));}P=zr+176|0;}function vl(mk,hs,is){mk=mk|0;hs=hs|0;is=is|0;Va(mk,hs,is);q[hs+52>>2]=q[mk+300>>2];q[hs+56>>2]=q[mk+304>>2];q[hs+60>>2]=q[mk+308>>2];q[hs+64>>2]=q[mk+312>>2];q[hs+68>>2]=q[mk+316>>2];q[hs+72>>2]=q[mk+320>>2];q[hs+76>>2]=q[mk+324>>2];q[hs+80>>2]=q[mk+328>>2];q[hs+84>>2]=q[mk+332>>2];q[hs+88>>2]=q[mk+336>>2];q[hs+92>>2]=q[mk+340>>2];q[hs+96>>2]=q[mk+344>>2];q[hs+100>>2]=q[mk+348>>2];q[hs+104>>2]=q[mk+352>>2];q[hs+108>>2]=q[mk+356>>2];q[hs+112>>2]=q[mk+360>>2];q[hs+116>>2]=q[mk+364>>2];q[hs+120>>2]=q[mk+368>>2];q[hs+124>>2]=q[mk+372>>2];q[hs+128>>2]=q[mk+376>>2];q[hs+132>>2]=q[mk+380>>2];q[hs+136>>2]=q[mk+384>>2];q[hs+140>>2]=q[mk+388>>2];q[hs+144>>2]=q[mk+392>>2];q[hs+148>>2]=q[mk+396>>2];q[hs+152>>2]=q[mk+400>>2];q[hs+156>>2]=q[mk+404>>2];q[hs+160>>2]=q[mk+408>>2];q[hs+164>>2]=q[mk+412>>2];q[hs+168>>2]=q[mk+416>>2];q[hs+172>>2]=q[mk+420>>2];q[hs+176>>2]=q[mk+424>>2];q[hs+180>>2]=q[mk+444>>2];q[hs+184>>2]=q[mk+448>>2];q[hs+188>>2]=q[mk+452>>2];q[hs+192>>2]=q[mk+428>>2];q[hs+196>>2]=q[mk+432>>2];q[hs+200>>2]=q[mk+436>>2];q[hs+204>>2]=q[mk+440>>2];return 3880}function wl(mk){return 212}function xl(mk,hs,is){mk=mk|0;hs=hs|0;is=is|0;var js=0;js=q[hs+4>>2];q[mk+300>>2]=q[hs>>2];q[mk+304>>2]=js;js=q[hs+12>>2];q[mk+308>>2]=q[hs+8>>2];q[mk+312>>2]=js;js=q[hs+28>>2];q[mk+324>>2]=q[hs+24>>2];q[mk+328>>2]=js;js=q[hs+20>>2];q[mk+316>>2]=q[hs+16>>2];q[mk+320>>2]=js;js=q[hs+44>>2];q[mk+340>>2]=q[hs+40>>2];q[mk+344>>2]=js;js=q[hs+36>>2];q[mk+332>>2]=q[hs+32>>2];q[mk+336>>2]=js;js=q[hs+60>>2];q[mk+356>>2]=q[hs+56>>2];q[mk+360>>2]=js;js=q[hs+52>>2];q[mk+348>>2]=q[hs+48>>2];q[mk+352>>2]=js;hs=q[is+12>>2];q[mk+372>>2]=q[is+8>>2];q[mk+376>>2]=hs;hs=q[is+4>>2];q[mk+364>>2]=q[is>>2];q[mk+368>>2]=hs;hs=q[is+20>>2];q[mk+380>>2]=q[is+16>>2];q[mk+384>>2]=hs;hs=q[is+28>>2];q[mk+388>>2]=q[is+24>>2];q[mk+392>>2]=hs;hs=q[is+36>>2];q[mk+396>>2]=q[is+32>>2];q[mk+400>>2]=hs;hs=q[is+44>>2];q[mk+404>>2]=q[is+40>>2];q[mk+408>>2]=hs;hs=q[is+60>>2];q[mk+420>>2]=q[is+56>>2];q[mk+424>>2]=hs;hs=q[is+52>>2];q[mk+412>>2]=q[is+48>>2];q[mk+416>>2]=hs;n[q[q[mk>>2]+8>>2]](mk);}function yl(mk,hs,is){mk=mk|0;hs=hs|0;is=is|0;var ks=x(0);hs=hs+ -1|0;a:{if(hs>>>0>3){break a}b:{switch(hs-2|0){default:if(is>>>0<=2){return x(u[mk+600>>2])}if(is+ -3>>>0>2){break a}return x(u[mk+432>>2]);case 0:case 1:break b}}if(is>>>0<=2){return x(u[mk+596>>2])}if(is+ -3>>>0>2){break a}ks=u[mk+604>>2];}return x(ks)}function zl(mk,hs,is,ls){mk=mk|0;hs=hs|0;is=x(is);ls=ls|0;hs=hs+ -1|0;if(hs>>>0<=3){a:{switch(hs-2|0){default:if(ls>>>0<=2){u[mk+600>>2]=is;q[mk+592>>2]=q[mk+592>>2]|2;return}u[mk+432>>2]=is;return;case 0:case 1:break a}}if(ls>>>0<=2){u[mk+596>>2]=is;q[mk+592>>2]=q[mk+592>>2]|1;return}u[mk+604>>2]=is;q[mk+592>>2]=q[mk+592>>2]|4;}}function Al(mk,hs,is,ls){var ms=0;ms=P-32|0;P=ms;q[ms+28>>2]=hs;q[ms+24>>2]=is;q[ms+20>>2]=ls;hs=q[ms+24>>2];Jf(ms,q[ms+28>>2],q[ms+24>>2],q[ms+20>>2]);Ka(mk,hs,ms);P=ms+32|0;}function Bl(mk,hs){var is=0,ls=x(0),ns=x(0),os=x(0),ps=x(0),qs=x(0),rs=x(0),ss=x(0),ts=x(0),us=x(0),vs=x(0),ws=x(0),xs=x(0),ys=x(0),zs=x(0);is=P-48|0;P=is;ja(mk+364|0,is+16|0);ls=u[hs+4>>2];ns=u[hs+8>>2];os=u[hs>>2];ps=u[hs+12>>2];qs=u[is+24>>2];rs=u[is+20>>2];ss=u[is+28>>2];ts=u[is+16>>2];ja(mk+300|0,is);us=x(x(qs*ns)+x(x(x(ts*os)+x(ss*ps))+x(rs*ls)));vs=u[is+12>>2];ws=x(x(x(x(ss*os)-x(ts*ps))-x(rs*ns))+x(qs*ls));xs=u[is>>2];ys=x(x(ts*ns)+x(x(x(ss*ls)-x(rs*ps))-x(qs*os)));zs=u[is+4>>2];ls=x(x(rs*os)+x(x(x(ss*ns)-x(qs*ps))-x(ts*ls)));ns=u[is+8>>2];u[is+44>>2]=x(x(x(us*vs)-x(ws*xs))-x(ys*zs))-x(ls*ns);u[is+40>>2]=x(x(x(ls*vs)+x(us*ns))+x(ws*zs))-x(xs*ys);u[is+36>>2]=x(x(xs*ls)+x(x(vs*ys)+x(us*zs)))-x(ws*ns);u[is+32>>2]=x(x(x(us*xs)+x(ws*vs))+x(ys*ns))-x(ls*zs);wf(mk,is+32|0);P=is+48|0;}function Cl(mk,hs,As,Bs){mk=mk|0;hs=hs|0;As=As|0;Bs=x(Bs);var Cs=0,Ds=x(0),Es=x(0),Fs=0,Gs=x(0),Hs=x(0),Is=x(0),Js=x(0),Ks=x(0),Ls=x(0),Ms=x(0),Ns=x(0),Os=x(0),Ps=x(0),Qs=0,Rs=x(0),Ss=x(0),Ts=x(0),Us=x(0),Vs=0,Ws=x(0),Xs=x(0),Ys=x(0),Zs=0,_s=x(0),$s=x(0),at=x(0),bt=x(0),ct=x(0),dt=0,et=x(0),ft=x(0),gt=x(0),ht=x(0),it=x(0),jt=x(0),kt=x(0),lt=x(0),mt=x(0),nt=x(0),ot=0,pt=x(0),qt=x(0),rt=x(0),st=x(0),tt=x(0),ut=x(0),vt=x(0),wt=x(0),xt=x(0),yt=x(0),zt=x(0),At=x(0),Bt=x(0),Ct=x(0),Dt=x(0),Et=x(0),Ft=x(0),Gt=x(0),Ht=0,It=0;Cs=P-464|0;P=Cs;a:{if(!r[mk+527|0]){break a}Qs=q[mk+32>>2];Zs=Qs;Vs=q[mk+28>>2];Fs=Vs;if(!r[mk+524|0]){Os=u[mk+348>>2];Hs=u[mk+352>>2];Gs=u[mk+356>>2];Ds=u[Vs+56>>2];Ws=x(x(x(x(Os*u[Vs+20>>2])+x(Hs*u[Vs+24>>2]))+x(Gs*u[Vs+28>>2]))+Ds);ft=x(Ws-Ds);Es=x(u[hs+192>>2]+u[hs+80>>2]);Ds=u[Vs+52>>2];Xs=x(x(x(x(Os*u[Fs+4>>2])+x(Hs*u[Vs+8>>2]))+x(Gs*u[Vs+12>>2]))+Ds);gt=x(Xs-Ds);Ls=x(u[hs+196>>2]+u[hs+84>>2]);Ps=u[mk+412>>2];Js=u[mk+416>>2];Ks=u[mk+420>>2];Ds=u[Qs+56>>2];Rs=x(x(x(x(Ps*u[Qs+20>>2])+x(Js*u[Qs+24>>2]))+x(Ks*u[Qs+28>>2]))+Ds);Ys=x(Rs-Ds);Ms=x(u[As+192>>2]+u[As+80>>2]);Ds=u[Qs+52>>2];Us=x(x(x(x(Ps*u[Zs+4>>2])+x(Js*u[Qs+8>>2]))+x(Ks*u[Qs+12>>2]))+Ds);ht=x(Us-Ds);Ts=x(u[As+196>>2]+u[As+84>>2]);Is=x(x(x(u[hs+184>>2]+u[hs+72>>2])+x(x(ft*Es)-x(gt*Ls)))-x(x(u[As+184>>2]+u[As+72>>2])+x(x(Ys*Ms)-x(ht*Ts))));Ss=x(u[hs+200>>2]+u[hs+88>>2]);Ds=u[Vs+60>>2];Hs=x(x(x(x(Os*u[Vs+36>>2])+x(Hs*u[Vs+40>>2]))+x(Gs*u[Vs+44>>2]))+Ds);at=x(Hs-Ds);Ns=x(x(u[hs+180>>2]+u[hs+68>>2])+x(x(gt*Ss)-x(at*Es)));Gs=x(u[As+200>>2]+u[As+88>>2]);Es=u[Qs+60>>2];Ds=x(x(x(x(Ps*u[Qs+36>>2])+x(Js*u[Qs+40>>2]))+x(Ks*u[Qs+44>>2]))+Es);_s=x(Ds-Es);Os=x(Ns-x(x(u[As+180>>2]+u[As+68>>2])+x(x(ht*Gs)-x(_s*Ms))));Ps=x(x(x(u[hs+176>>2]+u[hs+64>>2])+x(x(at*Ls)-x(ft*Ss)))-x(x(u[As+176>>2]+u[As+64>>2])+x(x(_s*Ts)-x(Ys*Gs))));Js=x(Hs-Ds);Ks=x(Ws-Rs);Ws=x(Xs-Us);It=q[As+240>>2];ot=q[hs+240>>2];while(1){dt=w(Ht,84)+mk|0;Hs=x(x(1)/u[dt+128>>2]);Gs=u[dt+48>>2];Es=u[dt+52>>2];Ds=u[dt+56>>2];$s=x(x(Hs*x(x(x(x(x(Ws*Gs)+x(Ks*Es))+x(Js*Ds))*x(-.30000001192092896))/Bs))-x(Hs*x(x(x(Ps*Gs)+x(Os*Es))+x(Is*Ds))));u[mk+36>>2]=u[mk+36>>2]+$s;et=u[dt+48>>2];bt=u[dt+52>>2];ct=u[dt+56>>2];if(ot){Rs=u[Vs+364>>2];Ms=u[Vs+356>>2];Us=u[Vs+360>>2];Ts=u[Vs+348>>2];Ss=u[Vs+340>>2];Hs=u[Vs+344>>2];Gs=u[Vs+332>>2];Es=u[Vs+324>>2];Ds=u[Vs+328>>2];Ls=u[Vs+404>>2];u[hs+64>>2]=x(x($s*x(et*Ls))*u[hs+112>>2])+u[hs+64>>2];u[hs+68>>2]=x(x($s*x(bt*Ls))*u[hs+116>>2])+u[hs+68>>2];u[hs+72>>2]=x(x($s*x(ct*Ls))*u[hs+120>>2])+u[hs+72>>2];Xs=x(x(ft*ct)-x(at*bt));Ls=x(x(at*et)-x(gt*ct));Ns=x(x(Es*Xs)+x(Ds*Ls));Es=x(x(gt*bt)-x(ft*et));u[hs+80>>2]=x(x(Ns+x(Gs*Es))*x($s*u[hs+96>>2]))+u[hs+80>>2];Ds=u[hs+104>>2];u[hs+84>>2]=x(x(x(x(Xs*Ss)+x(Ls*Hs))+x(Es*Ts))*x($s*u[hs+100>>2]))+u[hs+84>>2];u[hs+88>>2]=x(x(x(x(Xs*Ms)+x(Ls*Us))+x(Es*Rs))*x($s*Ds))+u[hs+88>>2];}if(It){Xs=u[Qs+364>>2];Ls=u[Qs+356>>2];Rs=u[Qs+360>>2];Ms=u[Qs+348>>2];Us=u[Qs+340>>2];Ts=u[Qs+344>>2];Ss=u[Qs+332>>2];Hs=u[Qs+324>>2];Gs=u[Qs+328>>2];Es=u[dt+56>>2];Ds=u[dt+52>>2];Ns=u[Qs+404>>2];$s=x(-$s);u[As+64>>2]=x(u[As+112>>2]*x(x(Ns*u[dt+48>>2])*$s))+u[As+64>>2];u[As+68>>2]=x(x(x(Ns*Ds)*$s)*u[As+116>>2])+u[As+68>>2];u[As+72>>2]=x(x(x(Ns*Es)*$s)*u[As+120>>2])+u[As+72>>2];Ns=Hs;Hs=x(x(Ys*ct)-x(_s*bt));Ds=Gs;Gs=x(x(_s*et)-x(ht*ct));Es=x(x(ht*bt)-x(Ys*et));u[As+80>>2]=x(x(x(x(Ns*Hs)+x(Ds*Gs))+x(Ss*Es))*x(u[As+96>>2]*$s))+u[As+80>>2];Ds=u[As+104>>2];u[As+84>>2]=x(x(x(x(Hs*Us)+x(Gs*Ts))+x(Es*Ms))*x(u[As+100>>2]*$s))+u[As+84>>2];u[As+88>>2]=x(x(x(x(Hs*Ls)+x(Gs*Rs))+x(Es*Xs))*x(Ds*$s))+u[As+88>>2];}Ht=Ht+1|0;if((Ht|0)!=3){continue}break}}b:{if(r[mk+552|0]){ot=q[Fs+16>>2];q[Cs+384>>2]=q[Fs+12>>2];q[Cs+388>>2]=ot;ot=q[Fs+8>>2];q[Cs+376>>2]=q[Fs+4>>2];q[Cs+380>>2]=ot;Fs=q[Vs+32>>2];q[Cs+400>>2]=q[Vs+28>>2];q[Cs+404>>2]=Fs;Fs=q[Vs+24>>2];q[Cs+392>>2]=q[Vs+20>>2];q[Cs+396>>2]=Fs;Fs=q[Vs+48>>2];q[Cs+416>>2]=q[Vs+44>>2];q[Cs+420>>2]=Fs;Fs=q[Vs+40>>2];q[Cs+408>>2]=q[Vs+36>>2];q[Cs+412>>2]=Fs;Fs=q[Vs+64>>2];q[Cs+432>>2]=q[Vs+60>>2];q[Cs+436>>2]=Fs;Fs=q[Vs+56>>2];q[Cs+424>>2]=q[Vs+52>>2];q[Cs+428>>2]=Fs;Fs=q[Zs+16>>2];q[Cs+320>>2]=q[Zs+12>>2];q[Cs+324>>2]=Fs;Fs=q[Zs+8>>2];q[Cs+312>>2]=q[Zs+4>>2];q[Cs+316>>2]=Fs;Fs=q[Qs+32>>2];q[Cs+336>>2]=q[Qs+28>>2];q[Cs+340>>2]=Fs;Fs=q[Qs+24>>2];q[Cs+328>>2]=q[Qs+20>>2];q[Cs+332>>2]=Fs;Fs=q[Qs+48>>2];q[Cs+352>>2]=q[Qs+44>>2];q[Cs+356>>2]=Fs;Fs=q[Qs+40>>2];q[Cs+344>>2]=q[Qs+36>>2];q[Cs+348>>2]=Fs;Fs=q[Qs+64>>2];q[Cs+368>>2]=q[Qs+60>>2];q[Cs+372>>2]=Fs;Fs=q[Qs+56>>2];q[Cs+360>>2]=q[Qs+52>>2];q[Cs+364>>2]=Fs;Ts=u[hs+84>>2];Ss=u[hs+196>>2];Hs=u[hs+88>>2];Gs=u[hs+200>>2];Es=u[hs+80>>2];Ds=u[hs+192>>2];q[Cs+308>>2]=0;u[Cs+304>>2]=Gs+Hs;u[Cs+300>>2]=Ss+Ts;u[Cs+296>>2]=Ds+Es;Ts=u[As+84>>2];Ss=u[As+196>>2];Hs=u[As+88>>2];Gs=u[As+200>>2];Es=u[As+80>>2];Ds=u[As+192>>2];q[Cs+292>>2]=0;u[Cs+288>>2]=Gs+Hs;u[Cs+284>>2]=Ss+Ts;u[Cs+280>>2]=Ds+Es;q[Cs+228>>2]=0;q[Cs+232>>2]=0;q[Cs+240>>2]=0;q[Cs+244>>2]=0;q[Cs+236>>2]=1065353216;q[Cs+260>>2]=0;q[Cs+264>>2]=0;q[Cs+256>>2]=1065353216;q[Cs+268>>2]=0;q[Cs+272>>2]=0;q[Cs+276>>2]=0;q[Cs+220>>2]=0;q[Cs+224>>2]=0;q[Cs+216>>2]=1065353216;q[Cs+248>>2]=0;q[Cs+252>>2]=0;q[Cs+208>>2]=0;q[Cs+212>>2]=0;q[Cs+200>>2]=0;q[Cs+204>>2]=0;Xa(Cs+376|0,Cs+200|0,Cs+296|0,Bs,Cs+216|0);q[Cs+148>>2]=0;q[Cs+152>>2]=0;q[Cs+160>>2]=0;q[Cs+164>>2]=0;q[Cs+156>>2]=1065353216;q[Cs+180>>2]=0;q[Cs+184>>2]=0;q[Cs+176>>2]=1065353216;q[Cs+188>>2]=0;q[Cs+192>>2]=0;q[Cs+196>>2]=0;q[Cs+140>>2]=0;q[Cs+144>>2]=0;q[Cs+136>>2]=1065353216;q[Cs+168>>2]=0;q[Cs+172>>2]=0;Xa(Cs+312|0,Cs+200|0,Cs+280|0,Bs,Cs+136|0);pt=u[mk+308>>2];qt=u[mk+304>>2];rt=u[mk+324>>2];st=u[mk+316>>2];tt=u[mk+320>>2];ut=u[mk+404>>2];vt=u[mk+400>>2];wt=u[mk+396>>2];xt=u[mk+372>>2];yt=u[mk+368>>2];zt=u[mk+340>>2];At=u[mk+332>>2];Bt=u[mk+336>>2];Ct=u[mk+388>>2];Dt=u[mk+384>>2];Et=u[mk+380>>2];Ns=u[mk+568>>2];Hs=u[mk+564>>2];_s=u[mk+556>>2];Js=u[mk+560>>2];Ks=u[mk+420>>2];Ws=u[mk+412>>2];Xs=u[mk+416>>2];Ft=u[mk+300>>2];bt=u[mk+356>>2];Ls=u[mk+352>>2];ct=u[mk+348>>2];Gt=u[mk+364>>2];q[Cs+132>>2]=0;q[Cs+116>>2]=0;q[Cs+100>>2]=0;Es=x(x(2)/x(x(x(x(_s*_s)+x(Js*Js))+x(Hs*Hs))+x(Ns*Ns)));Gs=x(Hs*Es);Rs=x(_s*Gs);Ds=x(Js*Es);Ms=x(Ns*Ds);Is=x(Rs-Ms);Us=x(_s*Ds);Ts=x(Ns*Gs);Os=x(Us+Ts);Ss=x(Js*Ds);Hs=x(Hs*Gs);Ps=x(x(1)-x(Ss+Hs));$s=x(x(xt*Is)+x(x(yt*Os)+x(Gt*Ps)));Gs=x(Js*Gs);Ds=x(_s*Es);Es=x(Ns*Ds);Js=x(Gs+Es);Us=x(Us-Ts);Ds=x(_s*Ds);Ts=x(x(1)-x(Ds+Hs));ft=x(x(xt*Js)+x(x(Gt*Us)+x(yt*Ts)));Hs=x(Rs+Ms);Es=x(Gs-Es);Ds=x(x(1)-x(Ds+Ss));gt=x(x(x(Gt*Hs)+x(yt*Es))+x(xt*Ds));it=x(x(x(At*$s)+x(Bt*ft))+x(zt*gt));Ys=u[Cs+168>>2];ht=x(x(Is*Ct)+x(x(Dt*Os)+x(Et*Ps)));at=x(x(Js*Ct)+x(x(Et*Us)+x(Dt*Ts)));_s=x(x(x(Et*Hs)+x(Dt*Es))+x(Ct*Ds));jt=x(x(x(At*ht)+x(Bt*at))+x(zt*_s));Ns=u[Cs+172>>2];Is=x(x(x(Ps*wt)+x(Os*vt))+x(Is*ut));Os=x(x(x(Us*wt)+x(Ts*vt))+x(Js*ut));Ps=x(x(x(Hs*wt)+x(Es*vt))+x(Ds*ut));kt=x(x(x(At*Is)+x(Bt*Os))+x(zt*Ps));Js=u[Cs+176>>2];u[Cs+112>>2]=x(x(it*Ys)+x(jt*Ns))+x(kt*Js);lt=x(x(x($s*st)+x(ft*tt))+x(gt*rt));mt=x(x(x(ht*st)+x(at*tt))+x(_s*rt));nt=x(x(x(Is*st)+x(Os*tt))+x(Ps*rt));u[Cs+108>>2]=x(x(Ys*lt)+x(Ns*mt))+x(Js*nt);Rs=u[Cs+152>>2];Ms=u[Cs+156>>2];Hs=u[Cs+160>>2];u[Cs+96>>2]=x(x(it*Rs)+x(jt*Ms))+x(kt*Hs);u[Cs+92>>2]=x(x(lt*Rs)+x(mt*Ms))+x(nt*Hs);et=x(0);Ds=x(-Ls);Gs=x(x(x(rt*Ds)-x(pt*ct))-x(zt*bt));Es=x(x(x(st*Ds)-x(Ft*ct))-x(At*bt));Ds=x(x(x(tt*Ds)-x(qt*ct))-x(Bt*bt));bt=x(x(Ws+x(x(x(Gt*x(0))+x(yt*x(0)))+x(xt*x(0))))+x(x(gt*Gs)+x(x($s*Es)+x(ft*Ds))));Us=x(x(Xs+x(x(x(Et*x(0))+x(Dt*x(0)))+x(Ct*x(0))))+x(x(_s*Gs)+x(x(ht*Es)+x(at*Ds))));ct=x(x(Ks+x(x(x(wt*x(0))+x(vt*x(0)))+x(ut*x(0))))+x(x(Ps*Gs)+x(x(Is*Es)+x(Os*Ds))));Ts=x(x(x(x(Ys*bt)+x(Ns*Us))+x(Js*ct))+u[Cs+192>>2]);u[Cs+128>>2]=Ts;Ss=x(x(x(x(Rs*bt)+x(Us*Ms))+x(ct*Hs))+u[Cs+188>>2]);u[Cs+124>>2]=Ss;q[Cs+84>>2]=0;Gs=Ys;Ys=x(x(x($s*Ft)+x(ft*qt))+x(gt*pt));Es=Ns;Ns=x(x(x(ht*Ft)+x(at*qt))+x(_s*pt));Ps=x(x(x(Is*Ft)+x(Os*qt))+x(Ps*pt));u[Cs+104>>2]=x(x(Gs*Ys)+x(Es*Ns))+x(Js*Ps);u[Cs+88>>2]=x(x(Ys*Rs)+x(Ns*Ms))+x(Ps*Hs);Gs=u[Cs+136>>2];Es=u[Cs+140>>2];Ds=u[Cs+144>>2];u[Cs+80>>2]=x(x(it*Gs)+x(jt*Es))+x(kt*Ds);u[Cs+76>>2]=x(x(lt*Gs)+x(mt*Es))+x(nt*Ds);u[Cs+72>>2]=x(x(Ys*Gs)+x(Ns*Es))+x(Ps*Ds);Hs=x(x(x(Ds*ct)+x(x(Gs*bt)+x(Es*Us)))+u[Cs+184>>2]);u[Cs+120>>2]=Hs;q[Cs+68>>2]=0;q[Cs+52>>2]=0;q[Cs+36>>2]=0;Js=u[Cs+248>>2];Ks=u[Cs+252>>2];Ws=u[Cs+256>>2];u[Cs+48>>2]=x(x(Ps*Js)+x(nt*Ks))+x(kt*Ws);u[Cs+44>>2]=x(x(Ns*Js)+x(mt*Ks))+x(jt*Ws);Xs=u[Cs+232>>2];Ls=u[Cs+236>>2];Rs=u[Cs+240>>2];u[Cs+32>>2]=x(x(Ps*Xs)+x(nt*Ls))+x(kt*Rs);u[Cs+28>>2]=x(x(Ns*Xs)+x(mt*Ls))+x(jt*Rs);Ds=x(-Us);Ms=x(x(x(Ns*Ds)-x(Ys*bt))-x(Ps*ct));Us=x(x(x(mt*Ds)-x(lt*bt))-x(nt*ct));Ds=x(x(x(jt*Ds)-x(it*bt))-x(kt*ct));Gs=x(x(x(x(Js*Ms)+x(Ks*Us))+x(Ws*Ds))+u[Cs+272>>2]);u[Cs- -64>>2]=Gs;Es=x(x(x(x(Ms*Xs)+x(Us*Ls))+x(Ds*Rs))+u[Cs+268>>2]);u[Cs+60>>2]=Es;q[Cs+20>>2]=0;u[Cs+40>>2]=x(x(Ys*Js)+x(lt*Ks))+x(it*Ws);u[Cs+24>>2]=x(x(Ys*Xs)+x(lt*Ls))+x(it*Rs);Ls=u[Cs+216>>2];Ks=u[Cs+220>>2];Rs=u[Cs+224>>2];u[Cs+16>>2]=x(x(Ps*Ls)+x(nt*Ks))+x(kt*Rs);u[Cs+12>>2]=x(x(Ns*Ls)+x(mt*Ks))+x(jt*Rs);u[Cs+8>>2]=x(x(Ys*Ls)+x(lt*Ks))+x(it*Rs);Ds=x(x(x(x(Ms*Ls)+x(Us*Ks))+x(Ds*Rs))+u[Cs+264>>2]);u[Cs+56>>2]=Ds;q[Cs+212>>2]=0;Ms=x(x(1)/Bs);u[Cs+208>>2]=Ms*x(Ts-u[Cs+432>>2]);u[Cs+200>>2]=Ms*x(Hs-u[Cs+424>>2]);u[Cs+204>>2]=Ms*x(Ss-u[Cs+428>>2]);kb(Cs+376|0,Cs+72|0,Cs+448|0,Cs+444|0);q[Cs+212>>2]=0;u[Cs+208>>2]=Ms*x(Gs-u[Cs+368>>2]);u[Cs+204>>2]=Ms*x(Es-u[Cs+364>>2]);u[Cs+200>>2]=Ms*x(Ds-u[Cs+360>>2]);Ws=u[Cs+452>>2];Os=u[Cs+444>>2];Es=u[Cs+456>>2];Ds=u[Cs+448>>2];kb(Cs+312|0,Cs+8|0,Cs+448|0,Cs+444|0);Gs=u[Cs+444>>2];Xs=x(x(Ms*x(Gs*u[Cs+456>>2]))-u[Cs+288>>2]);Ls=x(x(Ms*x(Gs*u[Cs+452>>2]))-u[Cs+284>>2]);Rs=x(x(Ms*x(u[Cs+448>>2]*Gs))-u[Cs+280>>2]);Ps=x(0);Us=x(x(Ms*x(Ds*Os))-u[Cs+296>>2]);Ts=x(x(Ms*x(Os*Ws))-u[Cs+300>>2]);Ss=x(x(Ms*x(Os*Es))-u[Cs+304>>2]);Is=x(x(x(Us*Us)+x(Ts*Ts))+x(Ss*Ss));if(!!(Is>x(1.1920928955078125e-7))){Is=x(x(1)/x(E(Is)));Ys=x(Us*Is);Fs=q[mk+28>>2];Ns=x(Ts*Is);Ks=x(Ss*Is);Ps=x(x(x(Ys*x(x(x(Ys*u[Fs+324>>2])+x(Ns*u[Fs+340>>2]))+x(Ks*u[Fs+356>>2])))+x(Ns*x(x(x(Ys*u[Fs+328>>2])+x(Ns*u[Fs+344>>2]))+x(Ks*u[Fs+360>>2]))))+x(Ks*x(x(x(Ys*u[Fs+332>>2])+x(Ns*u[Fs+348>>2]))+x(Ks*u[Fs+364>>2]))));}Ds=x(x(x(Rs*Rs)+x(Ls*Ls))+x(Xs*Xs));if(!!(Ds>x(1.1920928955078125e-7))){Ds=x(x(1)/x(E(Ds)));Is=x(Rs*Ds);Fs=q[mk+32>>2];Os=x(Ls*Ds);Ws=x(Xs*Ds);et=x(x(x(Is*x(x(x(Is*u[Fs+324>>2])+x(Os*u[Fs+340>>2]))+x(Ws*u[Fs+356>>2])))+x(Os*x(x(x(Is*u[Fs+328>>2])+x(Os*u[Fs+344>>2]))+x(Ws*u[Fs+360>>2]))))+x(Ws*x(x(x(Is*u[Fs+332>>2])+x(Os*u[Fs+348>>2]))+x(Ws*u[Fs+364>>2]))));}Hs=x(x(Ps*Ys)+x(et*Is));Gs=x(x(Ps*Ns)+x(et*Os));Es=x(x(Ps*Ks)+x(et*Ws));Ds=x(x(x(Hs*Hs)+x(Gs*Gs))+x(Es*Es));if(!(Ds>x(1.1920928955078125e-7))){break b}Ds=x(x(1)/x(E(Ds)));Hs=x(Hs*Ds);Zs=q[mk+28>>2];Gs=x(Gs*Ds);Ds=x(Es*Ds);Ms=x(x(x(Hs*x(x(x(Hs*u[Zs+324>>2])+x(Gs*u[Zs+340>>2]))+x(Ds*u[Zs+356>>2])))+x(Gs*x(x(x(Hs*u[Zs+328>>2])+x(Gs*u[Zs+344>>2]))+x(Ds*u[Zs+360>>2]))))+x(Ds*x(x(x(Hs*u[Zs+332>>2])+x(Gs*u[Zs+348>>2]))+x(Ds*u[Zs+364>>2]))));Fs=q[mk+32>>2];Es=x(x(x(Hs*x(x(x(Hs*u[Fs+324>>2])+x(Gs*u[Fs+340>>2]))+x(Ds*u[Fs+356>>2])))+x(Gs*x(x(x(Hs*u[Fs+328>>2])+x(Gs*u[Fs+344>>2]))+x(Ds*u[Fs+360>>2]))))+x(Ds*x(x(x(Hs*u[Fs+332>>2])+x(Gs*u[Fs+348>>2]))+x(Ds*u[Fs+364>>2]))));Ds=x(Ms+Es);Ds=x(x(1)/x(Ds*Ds));Is=x(x(x(Ss*Ms)-x(Xs*Es))*Ds);Ps=x(x(x(Ts*Ms)-x(Ls*Es))*Ds);Os=x(x(x(Us*Ms)-x(Rs*Es))*Ds);Ss=u[mk+572>>2];if(!!(Ss>=x(0))){Hs=u[mk+576>>2];Ks=x(Os+Hs);Gs=u[mk+580>>2];Ws=x(Ps+Gs);Es=u[mk+584>>2];Ns=x(Is+Es);Ds=x(E(x(x(x(Ks*Ks)+x(Ws*Ws))+x(Ns*Ns))));Ss=r[mk+553|0]?x(Ss/Ms):Ss;if(!!(Ds>Ss)){Ds=x(x(1)/Ds);Is=x(x(Ss*x(Ns*Ds))-Es);Ns=x(Es+Is);Os=x(x(Ss*x(Ks*Ds))-Hs);Ks=x(Hs+Os);Ps=x(x(Ss*x(Ws*Ds))-Gs);Ws=x(Gs+Ps);}u[mk+584>>2]=Ns;u[mk+580>>2]=Ws;u[mk+576>>2]=Ks;}Js=x(E(x(x(x(Os*Os)+x(Ps*Ps))+x(Is*Is))));Ds=x(x(1)/Js);Ks=x(Is*Ds);Ws=x(Ps*Ds);Xs=x(Os*Ds);if(q[hs+240>>2]){Rs=u[Zs+364>>2];Ms=u[Zs+356>>2];Us=u[Zs+360>>2];Ts=u[Zs+348>>2];Ss=u[Zs+340>>2];Hs=u[Zs+344>>2];Gs=u[Zs+332>>2];Es=u[Zs+324>>2];Ds=u[Zs+328>>2];Ls=x(Js*x(0));u[hs+64>>2]=x(Ls*u[hs+112>>2])+u[hs+64>>2];u[hs+68>>2]=x(Ls*u[hs+116>>2])+u[hs+68>>2];u[hs+72>>2]=x(Ls*u[hs+120>>2])+u[hs+72>>2];u[hs+80>>2]=x(x(x(x(Xs*Es)+x(Ws*Ds))+x(Ks*Gs))*x(Js*u[hs+96>>2]))+u[hs+80>>2];Ds=u[hs+104>>2];u[hs+84>>2]=x(x(x(x(Xs*Ss)+x(Ws*Hs))+x(Ks*Ts))*x(Js*u[hs+100>>2]))+u[hs+84>>2];u[hs+88>>2]=x(x(x(x(Xs*Ms)+x(Ws*Us))+x(Ks*Rs))*x(Js*Ds))+u[hs+88>>2];}if(!q[As+240>>2]){break b}Rs=u[Fs+364>>2];Ms=u[Fs+356>>2];Us=u[Fs+360>>2];Ts=u[Fs+348>>2];Ss=u[Fs+340>>2];Hs=u[Fs+344>>2];Gs=u[Fs+332>>2];Es=u[Fs+324>>2];Ds=u[Fs+328>>2];Ls=x(Js*x(-0));u[As+64>>2]=x(Ls*u[As+112>>2])+u[As+64>>2];u[As+68>>2]=x(Ls*u[As+116>>2])+u[As+68>>2];u[As+72>>2]=x(Ls*u[As+120>>2])+u[As+72>>2];Gs=x(x(x(Xs*Es)+x(Ws*Ds))+x(Ks*Gs));Es=x(-Js);u[As+80>>2]=x(Gs*x(u[As+96>>2]*Es))+u[As+80>>2];Ds=u[As+104>>2];u[As+84>>2]=x(x(x(x(Xs*Ss)+x(Ws*Hs))+x(Ks*Ts))*x(u[As+100>>2]*Es))+u[As+84>>2];u[As+88>>2]=x(x(x(x(Xs*Ms)+x(Ws*Us))+x(Ks*Rs))*x(Ds*Es))+u[As+88>>2];break b}Es=u[mk+440>>2];if(!(Es>x(1.1920928955078125e-7))){break b}Ws=u[hs+80>>2];Ps=x(x(u[As+192>>2]+u[As+80>>2])-x(u[hs+192>>2]+Ws));Xs=u[hs+84>>2];Os=x(x(u[As+196>>2]+u[As+84>>2])-x(u[hs+196>>2]+Xs));Ls=u[hs+88>>2];Gs=x(x(u[As+200>>2]+u[As+88>>2])-x(u[hs+200>>2]+Ls));Ds=x(x(x(Ps*Ps)+x(Os*Os))+x(Gs*Gs));if(!(Ds>x(1.1920928955078125e-7))){break b}Ns=Gs;Ys=Es;Ds=x(x(1)/x(E(Ds)));Is=x(Ps*Ds);Rs=u[Vs+324>>2];Js=x(Os*Ds);Ms=u[Vs+340>>2];Ks=x(Gs*Ds);Us=u[Vs+356>>2];Ts=u[Vs+328>>2];Ss=u[Vs+344>>2];Hs=u[Vs+360>>2];Gs=u[Vs+332>>2];Es=u[Vs+348>>2];Ds=u[Vs+364>>2];Js=x(Ys*x(x(1)/x(x(x(x(Is*x(x(x(Is*Rs)+x(Js*Ms))+x(Ks*Us)))+x(Js*x(x(x(Is*Ts)+x(Js*Ss))+x(Ks*Hs))))+x(Ks*x(x(x(Is*Gs)+x(Js*Es))+x(Ks*Ds))))+x(x(x(Is*x(x(x(Is*u[Qs+324>>2])+x(Js*u[Qs+340>>2]))+x(Ks*u[Qs+356>>2])))+x(Js*x(x(x(Is*u[Qs+328>>2])+x(Js*u[Qs+344>>2]))+x(Ks*u[Qs+360>>2]))))+x(Ks*x(x(x(Is*u[Qs+332>>2])+x(Js*u[Qs+348>>2]))+x(Ks*u[Qs+364>>2])))))));Ks=x(Ns*Js);Ys=Ks;Ps=x(Ps*Js);Js=x(Os*Js);Ns=x(E(x(x(Ks*Ks)+x(x(Ps*Ps)+x(Js*Js)))));Ks=x(x(1)/Ns);Is=x(Ys*Ks);Os=x(Js*Ks);Js=x(Ps*Ks);if(q[hs+240>>2]){Ks=x(Ns*x(0));u[hs+64>>2]=x(Ks*u[hs+112>>2])+u[hs+64>>2];u[hs+68>>2]=x(Ks*u[hs+116>>2])+u[hs+68>>2];u[hs+72>>2]=x(Ks*u[hs+120>>2])+u[hs+72>>2];u[hs+88>>2]=Ls+x(x(x(x(Js*Us)+x(Os*Hs))+x(Is*Ds))*x(Ns*u[hs+104>>2]));u[hs+84>>2]=Xs+x(x(x(x(Js*Ms)+x(Os*Ss))+x(Is*Es))*x(Ns*u[hs+100>>2]));u[hs+80>>2]=Ws+x(x(x(x(Js*Rs)+x(Os*Ts))+x(Is*Gs))*x(Ns*u[hs+96>>2]));}if(!q[As+240>>2]){break b}Rs=u[Qs+364>>2];Ms=u[Qs+356>>2];Us=u[Qs+360>>2];Ts=u[Qs+348>>2];Ss=u[Qs+340>>2];Hs=u[Qs+344>>2];Gs=u[Qs+332>>2];Es=u[Qs+324>>2];Ds=u[Qs+328>>2];Ls=x(Ns*x(-0));u[As+64>>2]=x(Ls*u[As+112>>2])+u[As+64>>2];u[As+68>>2]=x(Ls*u[As+116>>2])+u[As+68>>2];u[As+72>>2]=x(Ls*u[As+120>>2])+u[As+72>>2];Gs=x(x(x(Js*Es)+x(Os*Ds))+x(Is*Gs));Es=x(-Ns);u[As+80>>2]=x(Gs*x(u[As+96>>2]*Es))+u[As+80>>2];Ds=u[As+104>>2];u[As+84>>2]=x(x(x(x(Js*Ss)+x(Os*Hs))+x(Is*Ts))*x(u[As+100>>2]*Es))+u[As+84>>2];u[As+88>>2]=x(x(x(x(Js*Ms)+x(Os*Us))+x(Is*Rs))*x(Ds*Es))+u[As+88>>2];}Os=x(u[As+200>>2]+u[As+88>>2]);Ps=x(u[As+196>>2]+u[As+84>>2]);Js=x(u[hs+200>>2]+u[hs+88>>2]);Ks=x(u[hs+196>>2]+u[hs+84>>2]);Ws=x(u[As+192>>2]+u[As+80>>2]);Xs=x(u[hs+192>>2]+u[hs+80>>2]);c:{if(!r[mk+526|0]){break c}Es=u[mk+528>>2];Is=x(x(x(Es*u[mk+504>>2])*u[mk+432>>2])/Bs);Hs=u[mk+460>>2];Ts=u[mk+464>>2];Gs=u[mk+468>>2];Ds=x(x(x(x(Ws-Xs)*Hs)+x(x(Ps-Ks)*Ts))+x(x(Os-Js)*Gs));if(!!(Ds>x(0))){Is=x(Is+x(x(Es*Ds)*u[mk+436>>2]));}Es=u[mk+516>>2];Ds=x(Es+x(Is*u[mk+492>>2]));u[Cs+376>>2]=Ds;q[Cs+312>>2]=0;Fs=Ds>x(0)?Cs+376|0:Cs+312|0;Ds=u[Fs>>2];q[mk+516>>2]=q[Fs>>2];Ds=x(Ds-Es);Us=x(Gs*Ds);Ss=x(Hs*Ds);Hs=u[mk+536>>2];Gs=x(Ts*Ds);Es=u[mk+540>>2];Ds=u[mk+544>>2];Ms=x(x(x(Ss*Hs)+x(Gs*Es))+x(Us*Ds));Ts=x(Us-x(Ds*Ms));Hs=x(Ss-x(Hs*Ms));Ds=x(Gs-x(Es*Ms));at=x(E(x(x(Ts*Ts)+x(x(Hs*Hs)+x(Ds*Ds)))));Es=x(x(1)/at);_s=x(Ts*Es);Ns=x(Ds*Es);Is=x(Hs*Es);if(q[hs+240>>2]){Fs=q[mk+28>>2];Rs=u[Fs+364>>2];Ms=u[Fs+356>>2];Us=u[Fs+360>>2];Ts=u[Fs+348>>2];Ss=u[Fs+340>>2];Hs=u[Fs+344>>2];Gs=u[Fs+332>>2];Es=u[Fs+328>>2];Ds=u[Fs+324>>2];Ls=x(at*x(0));u[hs+64>>2]=x(Ls*u[hs+112>>2])+u[hs+64>>2];u[hs+68>>2]=x(Ls*u[hs+116>>2])+u[hs+68>>2];u[hs+72>>2]=x(Ls*u[hs+120>>2])+u[hs+72>>2];u[hs+80>>2]=x(x(x(x(Is*Ds)+x(Ns*Es))+x(_s*Gs))*x(at*u[hs+96>>2]))+u[hs+80>>2];Ds=u[hs+104>>2];u[hs+84>>2]=x(x(x(x(Is*Ss)+x(Ns*Hs))+x(_s*Ts))*x(at*u[hs+100>>2]))+u[hs+84>>2];u[hs+88>>2]=x(x(x(x(Is*Ms)+x(Ns*Us))+x(_s*Rs))*x(at*Ds))+u[hs+88>>2];}if(!q[As+240>>2]){break c}Fs=q[mk+32>>2];Rs=u[Fs+364>>2];Ms=u[Fs+356>>2];Us=u[Fs+360>>2];Ts=u[Fs+348>>2];Ss=u[Fs+340>>2];Hs=u[Fs+344>>2];Gs=u[Fs+332>>2];Es=u[Fs+328>>2];Ds=u[Fs+324>>2];Ls=x(at*x(-0));u[As+64>>2]=x(Ls*u[As+112>>2])+u[As+64>>2];u[As+68>>2]=x(Ls*u[As+116>>2])+u[As+68>>2];u[As+72>>2]=x(Ls*u[As+120>>2])+u[As+72>>2];Gs=x(x(x(Is*Ds)+x(Ns*Es))+x(_s*Gs));Es=x(-at);u[As+80>>2]=x(Gs*x(u[As+96>>2]*Es))+u[As+80>>2];Ds=u[As+104>>2];u[As+84>>2]=x(x(x(x(Is*Ss)+x(Ns*Hs))+x(_s*Ts))*x(u[As+100>>2]*Es))+u[As+84>>2];u[As+88>>2]=x(x(x(x(Is*Ms)+x(Ns*Us))+x(_s*Rs))*x(Ds*Es))+u[As+88>>2];}if(!r[mk+525|0]){break a}Es=u[mk+532>>2];Bs=x(x(x(Es*u[mk+508>>2])*u[mk+432>>2])/Bs);Is=u[mk+476>>2];Gs=x(Ps-Ks);Ps=u[mk+480>>2];Hs=x(Os-Js);Os=u[mk+484>>2];Ds=x(x(x(x(Ws-Xs)*Is)+x(Gs*Ps))+x(Hs*Os));if(!!(Ds>x(0))){Bs=x(Bs+x(x(Es*Ds)*u[mk+436>>2]));}Ds=u[mk+520>>2];Bs=x(Ds+x(Bs*u[mk+496>>2]));u[Cs+376>>2]=Bs;q[Cs+312>>2]=0;Fs=Bs>x(0)?Cs+376|0:Cs+312|0;Bs=u[Fs>>2];q[mk+520>>2]=q[Fs>>2];Ls=x(Bs-Ds);if(q[hs+240>>2]){Fs=q[mk+28>>2];Ms=u[Fs+364>>2];Us=u[Fs+356>>2];Ts=u[Fs+360>>2];Ss=u[Fs+348>>2];Hs=u[Fs+340>>2];Gs=u[Fs+344>>2];Es=u[Fs+332>>2];Ds=u[Fs+328>>2];Bs=u[Fs+324>>2];Rs=x(Ls*x(0));u[hs+64>>2]=x(Rs*u[hs+112>>2])+u[hs+64>>2];u[hs+68>>2]=x(Rs*u[hs+116>>2])+u[hs+68>>2];u[hs+72>>2]=x(Rs*u[hs+120>>2])+u[hs+72>>2];u[hs+80>>2]=x(x(x(x(Is*Bs)+x(Ps*Ds))+x(Os*Es))*x(Ls*u[hs+96>>2]))+u[hs+80>>2];Bs=u[hs+104>>2];u[hs+84>>2]=x(x(x(x(Is*Hs)+x(Ps*Gs))+x(Os*Ss))*x(Ls*u[hs+100>>2]))+u[hs+84>>2];u[hs+88>>2]=x(x(x(x(Is*Us)+x(Ps*Ts))+x(Os*Ms))*x(Ls*Bs))+u[hs+88>>2];Os=u[mk+484>>2];Is=u[mk+476>>2];Ps=u[mk+480>>2];}if(!q[As+240>>2]){break a}mk=q[mk+32>>2];Ms=u[mk+364>>2];Us=u[mk+356>>2];Ts=u[mk+360>>2];Ss=u[mk+348>>2];Hs=u[mk+340>>2];Gs=u[mk+344>>2];Es=u[mk+332>>2];Ds=u[mk+328>>2];Bs=u[mk+324>>2];Rs=x(Ls*x(-0));u[As+64>>2]=x(Rs*u[As+112>>2])+u[As+64>>2];u[As+68>>2]=x(Rs*u[As+116>>2])+u[As+68>>2];u[As+72>>2]=x(Rs*u[As+120>>2])+u[As+72>>2];Bs=x(x(x(Is*Bs)+x(Ps*Ds))+x(Os*Es));Ds=x(-Ls);u[As+80>>2]=x(Bs*x(u[As+96>>2]*Ds))+u[As+80>>2];Bs=u[As+104>>2];u[As+84>>2]=x(x(x(x(Is*Hs)+x(Ps*Gs))+x(Os*Ss))*x(u[As+100>>2]*Ds))+u[As+84>>2];u[As+88>>2]=x(x(x(x(Is*Us)+x(Ps*Ts))+x(Os*Ms))*x(Bs*Ds))+u[As+88>>2];}P=Cs+464|0;}function Dl(mk){mk=mk|0;var hs=0,As=0,Bs=0,Jt=x(0),Kt=x(0),Lt=x(0),Mt=0,Nt=x(0),Ot=x(0),Pt=x(0),Qt=x(0),Rt=x(0),St=x(0),Tt=x(0),Ut=0,Vt=x(0),Wt=x(0),Xt=x(0),Yt=x(0);hs=P-176|0;P=hs;if(r[mk+527|0]){q[mk+576>>2]=0;q[mk+580>>2]=0;q[mk+516>>2]=0;q[mk+520>>2]=0;q[mk+36>>2]=0;q[mk+584>>2]=0;q[mk+588>>2]=0;a:{if(r[mk+524|0]){break a}Nt=u[mk+412>>2];As=q[mk+32>>2];Qt=u[mk+416>>2];Rt=u[mk+420>>2];Vt=x(x(x(x(Nt*u[As+4>>2])+x(Qt*u[As+8>>2]))+x(Rt*u[As+12>>2]))+u[As+52>>2]);St=u[mk+348>>2];Bs=q[mk+28>>2];Lt=u[mk+352>>2];Jt=u[mk+356>>2];Wt=x(x(x(x(St*u[Bs+4>>2])+x(Lt*u[Bs+8>>2]))+x(Jt*u[Bs+12>>2]))+u[Bs+52>>2]);Tt=x(Vt-Wt);Xt=x(x(x(x(Nt*u[As+20>>2])+x(Qt*u[As+24>>2]))+x(Rt*u[As+28>>2]))+u[As+56>>2]);Yt=x(x(x(x(St*u[Bs+20>>2])+x(Lt*u[Bs+24>>2]))+x(Jt*u[Bs+28>>2]))+u[Bs+56>>2]);Kt=x(Xt-Yt);Rt=x(x(x(x(Nt*u[As+36>>2])+x(Qt*u[As+40>>2]))+x(Rt*u[As+44>>2]))+u[As+60>>2]);St=x(x(x(x(St*u[Bs+36>>2])+x(Lt*u[Bs+40>>2]))+x(Jt*u[Bs+44>>2]))+u[Bs+60>>2]);Lt=x(Rt-St);Jt=x(x(x(Tt*Tt)+x(Kt*Kt))+x(Lt*Lt));b:{if(!!(Jt>x(1.1920928955078125e-7))){q[hs+140>>2]=0;Jt=x(x(1)/x(E(Jt)));Ot=x(Lt*Jt);u[hs+136>>2]=Ot;Pt=x(Kt*Jt);u[hs+132>>2]=Pt;Nt=x(Tt*Jt);u[hs+128>>2]=Nt;break b}q[hs+136>>2]=0;q[hs+140>>2]=0;q[hs+128>>2]=1065353216;q[hs+132>>2]=0;Nt=x(1);}c:{if(!!(x(y(Ot))>x(.7071067690849304))){Jt=x(x(Ot*Ot)+x(Pt*Pt));Qt=x(x(1)/x(E(Jt)));Tt=x(Jt*Qt);Kt=x(Qt*x(-Ot));Lt=x(Nt*Kt);Ot=x(Pt*Qt);Pt=x(Ot*x(-Nt));Jt=x(0);break c}Jt=x(x(Nt*Nt)+x(Pt*Pt));Kt=x(x(1)/x(E(Jt)));Lt=x(Jt*Kt);Jt=x(Kt*x(-Pt));Pt=x(Ot*Jt);Kt=x(Nt*Kt);Tt=x(Kt*x(-Ot));Ot=x(0);}u[hs+168>>2]=Lt;u[hs+164>>2]=Pt;u[hs+152>>2]=Ot;u[hs+148>>2]=Kt;u[hs+160>>2]=Tt;u[hs+144>>2]=Jt;while(1){Mt=q[mk+28>>2];q[hs+80>>2]=q[Mt+4>>2];q[hs+84>>2]=q[Mt+20>>2];Bs=q[Mt+36>>2];q[hs+92>>2]=0;q[hs+88>>2]=Bs;q[hs+96>>2]=q[Mt+8>>2];q[hs+100>>2]=q[Mt+24>>2];Bs=q[Mt+40>>2];q[hs+108>>2]=0;q[hs+104>>2]=Bs;q[hs+112>>2]=q[Mt+12>>2];q[hs+116>>2]=q[Mt+28>>2];Bs=q[Mt+44>>2];q[hs+124>>2]=0;q[hs+120>>2]=Bs;q[hs+32>>2]=q[As+4>>2];q[hs+36>>2]=q[As+20>>2];Bs=q[As+36>>2];q[hs+44>>2]=0;q[hs+40>>2]=Bs;q[hs+48>>2]=q[As+8>>2];q[hs+52>>2]=q[As+24>>2];Bs=q[As+40>>2];q[hs+60>>2]=0;q[hs+56>>2]=Bs;q[hs+64>>2]=q[As+12>>2];q[hs+68>>2]=q[As+28>>2];Bs=q[As+44>>2];q[hs+76>>2]=0;q[hs+72>>2]=Bs;Kt=u[Mt+52>>2];Lt=u[Mt+56>>2];Jt=u[Mt+60>>2];q[hs+28>>2]=0;u[hs+24>>2]=St-Jt;u[hs+20>>2]=Yt-Lt;u[hs+16>>2]=Wt-Kt;Kt=u[As+52>>2];Lt=u[As+56>>2];Jt=u[As+60>>2];q[hs+12>>2]=0;u[hs+8>>2]=Rt-Jt;u[hs+4>>2]=Xt-Lt;u[hs>>2]=Vt-Kt;rc((w(Ut,84)+mk|0)+48|0,hs+80|0,hs+32|0,hs+16|0,hs,(hs+128|0)+(Ut<<4)|0,Mt+456|0,u[Mt+404>>2],As+456|0,u[As+404>>2]);Ut=Ut+1|0;if((Ut|0)==3){break a}As=q[mk+32>>2];continue}}As=mk;Bs=q[mk+28>>2];mk=q[mk+32>>2];wd(As,Bs+4|0,mk+4|0,Bs+324|0,mk+324|0);}P=hs+176|0;}function El(mk,Zt,_t,$t,au,bu){var cu=x(0),du=x(0),eu=x(0),fu=x(0),gu=0,hu=0,iu=0,ju=x(0),ku=0,lu=x(0),mu=0,nu=x(0),ou=0,pu=x(0),qu=x(0),ru=x(0),su=0,tu=0,uu=0,vu=0,wu=x(0),xu=x(0),yu=x(0),zu=x(0),Au=x(0),Bu=x(0),Cu=x(0);su=P-16|0;P=su;wd(mk,_t,$t,au,bu);au=q[Zt+8>>2];q[au>>2]=1065353216;tu=q[Zt+24>>2];ku=tu<<2;bu=ku+4|0;q[bu+au>>2]=1065353216;ou=au;mu=tu<<3;au=mu+8|0;q[ou+au>>2]=1065353216;xu=u[_t+20>>2];wu=u[_t+24>>2];pu=u[mk+348>>2];nu=u[_t+36>>2];qu=u[mk+352>>2];fu=u[_t+40>>2];ru=u[mk+356>>2];eu=u[_t+8>>2];ju=u[_t>>2];lu=u[_t+4>>2];du=u[_t+16>>2];cu=u[_t+32>>2];q[su+12>>2]=0;fu=x(x(x(pu*cu)+x(qu*nu))+x(ru*fu));u[su+8>>2]=fu;du=x(x(x(pu*du)+x(qu*xu))+x(ru*wu));u[su+4>>2]=du;cu=x(x(x(ju*pu)+x(lu*qu))+x(eu*ru));u[su>>2]=cu;gu=q[Zt+12>>2];q[gu+12>>2]=0;u[gu+8>>2]=-du;u[gu+4>>2]=fu;q[gu>>2]=0;hu=gu+ku|0;q[hu+12>>2]=0;u[hu+8>>2]=cu;q[hu+4>>2]=0;u[hu>>2]=-fu;hu=gu+mu|0;q[hu+8>>2]=0;q[hu+12>>2]=0;u[hu+4>>2]=-cu;u[hu>>2]=du;hu=q[Zt+16>>2];q[hu>>2]=-1082130432;q[bu+hu>>2]=-1082130432;q[au+hu>>2]=-1082130432;xu=u[$t+36>>2];wu=u[$t+40>>2];pu=u[mk+412>>2];nu=u[$t+20>>2];qu=u[mk+416>>2];fu=u[$t+24>>2];ru=u[mk+420>>2];eu=u[$t+8>>2];ju=u[$t>>2];lu=u[$t+4>>2];du=u[$t+32>>2];cu=u[$t+16>>2];iu=q[Zt+20>>2];q[iu+12>>2]=0;q[iu>>2]=0;nu=x(x(x(pu*cu)+x(qu*nu))+x(ru*fu));u[iu+8>>2]=nu;fu=x(x(x(pu*du)+x(qu*xu))+x(ru*wu));u[iu+4>>2]=-fu;au=iu+ku|0;q[au+12>>2]=0;du=x(x(x(ju*pu)+x(lu*qu))+x(eu*ru));u[au+8>>2]=-du;q[au+4>>2]=0;u[au>>2]=fu;au=iu+mu|0;q[au+8>>2]=0;q[au+12>>2]=0;u[au+4>>2]=du;u[au>>2]=-nu;vu=q[Zt+40>>2];uu=q[Zt+36>>2];ou=q[Zt+28>>2];hu=q[mk+592>>2];cu=x(u[(hu&2?mk+600|0:Zt+4|0)>>2]*u[Zt>>2]);u[ou>>2]=cu*x(x(x(du+u[$t+48>>2])-u[su>>2])-u[_t+48>>2]);q[uu>>2]=-8388609;q[vu>>2]=2139095039;bu=hu&1;if(bu){q[q[Zt+32>>2]>>2]=q[mk+596>>2];}u[ku+ou>>2]=cu*x(x(x(nu+u[$t+52>>2])-u[su+4>>2])-u[_t+52>>2]);q[ku+uu>>2]=-8388609;q[ku+vu>>2]=2139095039;if(bu){q[q[Zt+32>>2]+(tu<<2)>>2]=q[mk+596>>2];}au=tu<<3;u[au+ou>>2]=cu*x(x(x(fu+u[$t+56>>2])-u[su+8>>2])-u[_t+56>>2]);q[au+uu>>2]=-8388609;q[au+vu>>2]=2139095039;if(bu){q[q[Zt+32>>2]+(tu<<3)>>2]=q[mk+596>>2];}au=w(tu,3);$t=au;a:{if(!r[mk+526|0]){break a}cu=u[mk+456>>2];if(!(u[mk+444>>2]<cu^1|u[mk+448>>2]<cu^1)){yu=u[mk+340>>2];zu=u[mk+308>>2];Au=u[mk+324>>2];Bu=u[_t+8>>2];Cu=u[_t>>2];pu=u[_t+4>>2];qu=u[_t+24>>2];ru=u[_t+16>>2];xu=u[_t+20>>2];ku=au<<2;bu=ku+8|0;fu=u[mk+304>>2];lu=u[_t+32>>2];eu=u[mk+320>>2];du=u[_t+36>>2];ju=u[mk+336>>2];cu=u[_t+40>>2];wu=x(x(x(fu*lu)+x(eu*du))+x(ju*cu));u[bu+gu>>2]=wu;au=ku+4|0;nu=x(x(x(fu*ru)+x(eu*xu))+x(ju*qu));u[au+gu>>2]=nu;fu=x(x(x(Cu*fu)+x(pu*eu))+x(Bu*ju));u[gu+ku>>2]=fu;mu=tu<<4;eu=x(x(x(Cu*zu)+x(pu*Au))+x(Bu*yu));u[mu+gu>>2]=eu;$t=mu|4;ju=x(x(x(zu*ru)+x(Au*xu))+x(yu*qu));u[$t+gu>>2]=ju;_t=mu|8;du=x(x(x(zu*lu)+x(Au*du))+x(yu*cu));u[_t+gu>>2]=du;u[bu+iu>>2]=-wu;u[au+iu>>2]=-nu;u[iu+ku>>2]=-fu;u[iu+mu>>2]=-eu;u[$t+iu>>2]=-ju;u[_t+iu>>2]=-du;ou=q[Zt+28>>2];cu=x(u[Zt>>2]*u[mk+436>>2]);u[ku+ou>>2]=cu*x(x(x(fu*u[mk+460>>2])+x(nu*u[mk+464>>2]))+x(wu*u[mk+468>>2]));u[mu+ou>>2]=cu*x(x(x(eu*u[mk+460>>2])+x(ju*u[mk+464>>2]))+x(du*u[mk+468>>2]));uu=q[Zt+36>>2];q[ku+uu>>2]=-8388609;vu=q[Zt+40>>2];q[ku+vu>>2]=2139095039;q[mu+uu>>2]=-8388609;q[mu+vu>>2]=2139095039;$t=w(tu,5);break a}ju=u[mk+464>>2];cu=u[mk+468>>2];bu=au<<2;eu=u[mk+436>>2];lu=x(eu*x(eu*u[mk+460>>2]));u[bu+gu>>2]=lu;$t=bu+8|0;du=x(eu*x(eu*cu));u[$t+gu>>2]=du;_t=bu+4|0;cu=x(eu*x(eu*ju));u[_t+gu>>2]=cu;u[$t+iu>>2]=-du;u[_t+iu>>2]=-cu;u[bu+iu>>2]=-lu;u[bu+ou>>2]=x(u[Zt>>2]*u[mk+432>>2])*u[mk+504>>2];if(hu&4){q[bu+q[Zt+32>>2]>>2]=q[mk+604>>2];}q[bu+uu>>2]=0;du=x(3.4028234663852886e+38);b:{if(!r[mk+552|0]){break b}cu=u[mk+572>>2];if(!(cu>=x(0))){break b}du=cu;}u[(au<<2)+vu>>2]=du;$t=tu<<2;}if(r[mk+525|0]){ju=u[mk+480>>2];cu=u[mk+484>>2];bu=$t<<2;eu=u[mk+436>>2];lu=x(eu*x(eu*u[mk+476>>2]));u[bu+gu>>2]=lu;au=bu+8|0;du=x(eu*x(eu*cu));u[au+gu>>2]=du;_t=bu+4|0;cu=x(eu*x(eu*ju));u[_t+gu>>2]=cu;u[au+iu>>2]=-du;u[_t+iu>>2]=-cu;u[bu+iu>>2]=-lu;u[bu+ou>>2]=x(u[Zt>>2]*u[mk+432>>2])*u[mk+508>>2];if(hu&4){q[bu+q[Zt+32>>2]>>2]=q[mk+604>>2];}Zt=($t<<2)+vu|0;c:{d:{if(!!(u[mk+452>>2]>x(0))){_t=($t<<2)+uu|0;if(!!(u[mk+508>>2]>x(0))){q[_t>>2]=0;break d}q[_t>>2]=-8388609;du=x(0);break c}q[($t<<2)+uu>>2]=-8388609;}du=x(3.4028234663852886e+38);}u[Zt>>2]=du;}P=su+16|0;}function Fl(mk,Zt){mk=mk|0;Zt=Zt|0;var _t=0,$t=0;_t=mk;$t=Zt;Zt=q[mk+28>>2];mk=q[mk+32>>2];El(_t,$t,Zt+4|0,mk+4|0,Zt+324|0,mk+324|0);}function Gl(mk,Zt){mk=mk|0;Zt=Zt|0;var au=0,bu=0,Du=x(0);if(r[mk+527|0]){q[Zt>>2]=0;q[Zt+4>>2]=0;return}q[Zt>>2]=3;q[Zt+4>>2]=3;au=q[mk+28>>2];bu=q[mk+32>>2];wd(mk,au+4|0,bu+4|0,au+324|0,bu+324|0);a:{if(!r[mk+526|0]){break a}au=q[Zt>>2];q[Zt>>2]=au+1;bu=q[Zt+4>>2];q[Zt+4>>2]=bu+ -1;Du=u[mk+456>>2];if(u[mk+444>>2]<Du^1|u[mk+448>>2]<Du^1){break a}q[Zt+4>>2]=bu+ -2;q[Zt>>2]=au+2;}if(r[mk+525|0]){q[Zt>>2]=q[Zt>>2]+1;q[Zt+4>>2]=q[Zt+4>>2]+ -1;}}function Hl(mk,Zt,Eu){var Fu=0,Gu=0;Ad(mk,5,Zt);q[mk>>2]=3796;Zt=q[Eu+12>>2];q[mk+308>>2]=q[Eu+8>>2];q[mk+312>>2]=Zt;Zt=q[Eu+4>>2];q[mk+300>>2]=q[Eu>>2];q[mk+304>>2]=Zt;Zt=q[Eu+28>>2];q[mk+324>>2]=q[Eu+24>>2];q[mk+328>>2]=Zt;Zt=q[Eu+20>>2];q[mk+316>>2]=q[Eu+16>>2];q[mk+320>>2]=Zt;Zt=q[Eu+36>>2];q[mk+332>>2]=q[Eu+32>>2];q[mk+336>>2]=Zt;Zt=q[Eu+44>>2];q[mk+340>>2]=q[Eu+40>>2];q[mk+344>>2]=Zt;Zt=q[Eu+56>>2];Fu=q[Eu+60>>2];Gu=q[Eu+48>>2];Eu=q[Eu+52>>2];o[mk+527|0]=0;q[mk+356>>2]=Zt;q[mk+360>>2]=Fu;q[mk+348>>2]=Gu;q[mk+352>>2]=Eu;Zt=q[mk+304>>2];q[mk+364>>2]=q[mk+300>>2];q[mk+368>>2]=Zt;Zt=q[mk+312>>2];q[mk+372>>2]=q[mk+308>>2];q[mk+376>>2]=Zt;Zt=q[mk+320>>2];q[mk+380>>2]=q[mk+316>>2];q[mk+384>>2]=Zt;Zt=q[mk+328>>2];q[mk+388>>2]=q[mk+324>>2];q[mk+392>>2]=Zt;Zt=q[mk+344>>2];q[mk+404>>2]=q[mk+340>>2];q[mk+408>>2]=Zt;Zt=q[mk+336>>2];q[mk+396>>2]=q[mk+332>>2];q[mk+400>>2]=Zt;o[mk+552|0]=0;o[mk+526|0]=0;p[mk+524>>1]=0;q[mk+420>>2]=0;q[mk+424>>2]=0;q[mk+412>>2]=0;q[mk+416>>2]=0;q[mk+572>>2]=-1082130432;q[mk+452>>2]=1566444395;q[mk+444>>2]=1566444395;q[mk+448>>2]=1566444395;q[mk+604>>2]=0;q[mk+596>>2]=0;q[mk+600>>2]=1060320051;q[mk+592>>2]=0;q[mk+456>>2]=1028443341;q[mk+436>>2]=1065353216;q[mk+440>>2]=1008981770;q[mk+428>>2]=1065353216;q[mk+432>>2]=1050253722;}function Il(mk,Zt,Eu,Hu,Iu){Oa(mk,5,Zt,Eu);q[mk>>2]=3796;Zt=q[Hu+12>>2];q[mk+308>>2]=q[Hu+8>>2];q[mk+312>>2]=Zt;Zt=q[Hu+4>>2];q[mk+300>>2]=q[Hu>>2];q[mk+304>>2]=Zt;Zt=q[Hu+28>>2];q[mk+324>>2]=q[Hu+24>>2];q[mk+328>>2]=Zt;Zt=q[Hu+20>>2];q[mk+316>>2]=q[Hu+16>>2];q[mk+320>>2]=Zt;Zt=q[Hu+44>>2];q[mk+340>>2]=q[Hu+40>>2];q[mk+344>>2]=Zt;Zt=q[Hu+36>>2];q[mk+332>>2]=q[Hu+32>>2];q[mk+336>>2]=Zt;Zt=q[Hu+60>>2];q[mk+356>>2]=q[Hu+56>>2];q[mk+360>>2]=Zt;Zt=q[Hu+52>>2];q[mk+348>>2]=q[Hu+48>>2];q[mk+352>>2]=Zt;Zt=q[Iu+12>>2];q[mk+372>>2]=q[Iu+8>>2];q[mk+376>>2]=Zt;Zt=q[Iu+4>>2];q[mk+364>>2]=q[Iu>>2];q[mk+368>>2]=Zt;Zt=q[Iu+20>>2];q[mk+380>>2]=q[Iu+16>>2];q[mk+384>>2]=Zt;Zt=q[Iu+28>>2];q[mk+388>>2]=q[Iu+24>>2];q[mk+392>>2]=Zt;Zt=q[Iu+36>>2];q[mk+396>>2]=q[Iu+32>>2];q[mk+400>>2]=Zt;Zt=q[Iu+44>>2];q[mk+404>>2]=q[Iu+40>>2];q[mk+408>>2]=Zt;Zt=q[Iu+52>>2];q[mk+412>>2]=q[Iu+48>>2];q[mk+416>>2]=Zt;Zt=q[Iu+60>>2];q[mk+420>>2]=q[Iu+56>>2];q[mk+424>>2]=Zt;o[mk+552|0]=0;q[mk+572>>2]=-1082130432;q[mk+524>>2]=0;q[mk+444>>2]=1566444395;q[mk+448>>2]=1566444395;q[mk+592>>2]=0;q[mk+428>>2]=1065353216;q[mk+432>>2]=1050253722;q[mk+436>>2]=1065353216;q[mk+440>>2]=1008981770;q[mk+596>>2]=0;q[mk+600>>2]=1060320051;q[mk+604>>2]=0;q[mk+452>>2]=1566444395;q[mk+456>>2]=1028443341;}function Jl(mk){mk=mk|0;return q[mk+300>>2]}function Kl(mk,Zt,Eu){mk=mk|0;Zt=Zt|0;Eu=Eu|0;Va(mk,Zt,Eu);q[Zt+52>>2]=q[mk+52>>2];q[Zt+56>>2]=q[mk+56>>2];q[Zt+60>>2]=q[mk+60>>2];q[Zt+64>>2]=q[mk- -64>>2];q[Zt+68>>2]=q[mk+68>>2];q[Zt+72>>2]=q[mk+72>>2];q[Zt+76>>2]=q[mk+76>>2];q[Zt+80>>2]=q[mk+80>>2];q[Zt+84>>2]=q[mk+84>>2];q[Zt+88>>2]=q[mk+88>>2];q[Zt+92>>2]=q[mk+92>>2];q[Zt+96>>2]=q[mk+96>>2];q[Zt+100>>2]=q[mk+100>>2];q[Zt+104>>2]=q[mk+104>>2];q[Zt+108>>2]=q[mk+108>>2];q[Zt+112>>2]=q[mk+112>>2];q[Zt+116>>2]=q[mk+116>>2];q[Zt+120>>2]=q[mk+120>>2];q[Zt+124>>2]=q[mk+124>>2];q[Zt+128>>2]=q[mk+128>>2];q[Zt+132>>2]=q[mk+132>>2];q[Zt+136>>2]=q[mk+136>>2];q[Zt+140>>2]=q[mk+140>>2];q[Zt+144>>2]=q[mk+144>>2];q[Zt+148>>2]=q[mk+148>>2];q[Zt+152>>2]=q[mk+152>>2];q[Zt+156>>2]=q[mk+156>>2];q[Zt+160>>2]=q[mk+160>>2];q[Zt+164>>2]=q[mk+164>>2];q[Zt+168>>2]=q[mk+168>>2];q[Zt+172>>2]=q[mk+172>>2];q[Zt+176>>2]=q[mk+176>>2];q[Zt+180>>2]=q[mk+188>>2];q[Zt+184>>2]=q[mk+184>>2];q[Zt+188>>2]=q[mk+196>>2];q[Zt+192>>2]=q[mk+192>>2];q[Zt+196>>2]=r[mk+180|0];q[Zt+200>>2]=r[mk+49|0];return 3764}function Ll(mk){return 204}function Ml(mk,Zt,Eu){mk=mk|0;Zt=Zt|0;Eu=Eu|0;var Hu=x(0);Hu=x(3.4028234663852886e+38);Zt=Zt+ -2|0;a:{if(Zt>>>0>2){break a}b:{switch(Zt-1|0){default:if((Eu|0)<=0){return x(u[mk+232>>2])}if((Eu|0)<=2){return x(u[mk+264>>2])}if((Eu|0)==3){return x(u[mk+248>>2])}if((Eu|0)>5){break a}return x(u[mk+280>>2]);case 0:if((Eu|0)<=0){return x(u[mk+212>>2])}if((Eu|0)!=3){break a}return x(u[mk+228>>2]);case 1:break b}}if((Eu|0)<=0){return x(u[mk+244>>2])}if((Eu|0)<=2){return x(u[mk+276>>2])}if((Eu|0)==3){return x(u[mk+260>>2])}if((Eu|0)>5){break a}Hu=u[mk+292>>2];}return x(Hu)}function Nl(mk,Zt,Eu,Iu){mk=mk|0;Zt=Zt|0;Eu=x(Eu);Iu=Iu|0;Zt=Zt+ -2|0;a:{if(Zt>>>0>2){break a}b:{switch(Zt-1|0){default:if((Iu|0)<=0){u[mk+232>>2]=Eu;q[mk+300>>2]=q[mk+300>>2]|512;return}if((Iu|0)<=2){u[mk+264>>2]=Eu;q[mk+300>>2]=q[mk+300>>2]|32;return}if((Iu|0)==3){u[mk+248>>2]=Eu;q[mk+300>>2]=q[mk+300>>2]|2048;return}if((Iu|0)>5){break a}u[mk+280>>2]=Eu;q[mk+300>>2]=q[mk+300>>2]|128;return;case 0:if((Iu|0)<=0){u[mk+212>>2]=Eu;q[mk+300>>2]=q[mk+300>>2]|1;return}if((Iu|0)!=3){break a}u[mk+228>>2]=Eu;q[mk+300>>2]=q[mk+300>>2]|4;return;case 1:break b}}if((Iu|0)<=0){u[mk+244>>2]=Eu;q[mk+300>>2]=q[mk+300>>2]|256;return}if((Iu|0)<=2){u[mk+276>>2]=Eu;q[mk+300>>2]=q[mk+300>>2]|16;return}if((Iu|0)==3){u[mk+260>>2]=Eu;q[mk+300>>2]=q[mk+300>>2]|1024;return}if((Iu|0)>5){break a}u[mk+292>>2]=Eu;q[mk+300>>2]=q[mk+300>>2]|64;}}



            function Sz(a,b,c,d,e){a=a|0;b=b|0;c=c|0;d=d|0;e=e|0;var f=0,g=0,h=0,i=0,j=0,k=0,l=0,m=x(0),p=x(0),s=x(0),t=x(0),v=x(0),z=x(0),A=x(0),B=x(0),C=x(0),D=x(0),E=0,F=x(0),G=x(0),H=0,I=x(0),J=0,K=0,L=x(0),M=x(0),N=x(0),O=x(0),Q=x(0),R=x(0),S=x(0),T=x(0),U=x(0),V=x(0),W=x(0),X=x(0),Y=x(0),Z=0,_=0,$=x(0),aa=0,ca=0,da=0,ea=x(0),fa=x(0),ga=x(0),ha=x(0),ia=x(0);f=P-3584|0;P=f;a:{b:{aa=q[b+4>>2];K=q[aa+68>>2];if(K){ca=q[c+4>>2];E=q[ca+68>>2];if(E){break b}}vi(a,b,c,d,e);break a}if(!(q[ca+72>>2]==q[a+112>>2]?q[aa+72>>2]==q[a+108>>2]:0)){i=q[a+84>>2];j=q[i+8>>2];if((j|0)>=1){while(1){k=q[(q[i+16>>2]+w(h,12)|0)+8>>2];if(k){n[q[q[k>>2]>>2]](k)|0;g=q[a+4>>2];n[q[q[g>>2]+60>>2]](g,k);}h=h+1|0;if((j|0)!=(h|0)){continue}break}i=q[a+84>>2];}si(i);q[a+108>>2]=q[aa+72>>2];q[a+112>>2]=q[ca+72>>2];}q[f+84>>2]=0;o[f+88|0]=1;q[f+76>>2]=0;q[f+80>>2]=0;Nb(f+112|0);Nb(f+980|0);Nb(f+1848|0);Nb(f+2716|0);i=q[f+84>>2];if(i){if(r[f+88|0]){if(i){q[6658]=q[6658]+1;n[q[5256]](i);}}q[f+84>>2]=0;}q[f+76>>2]=0;q[f+80>>2]=4;q[f+84>>2]=f+112;o[f+88|0]=0;j=q[a+84>>2];l=q[j+8>>2];c:{d:{if((l|0)<=0){h=f+112|0;break d}k=0;while(1){i=q[(q[j+16>>2]+w(k,12)|0)+8>>2];if(i){n[q[q[i>>2]+16>>2]](i,f+72|0);l=0;h=q[f+76>>2];if((h|0)>0){while(1){g=q[q[f+84>>2]+(l<<2)>>2];if(q[g+844>>2]){q[e+4>>2]=g;h=q[g+836>>2];i=q[q[e+8>>2]+8>>2];e:{if((h|0)!=(i|0)){ba(g,q[q[e+12>>2]+8>>2]+4|0,i+4|0);break e}ba(g,h+4|0,q[q[e+12>>2]+8>>2]+4|0);}q[e+4>>2]=0;h=q[f+76>>2];}l=l+1|0;if((l|0)<(h|0)){continue}break}}if((h|0)<=-1){if(q[f+80>>2]<=-1){i=q[f+84>>2];if(i){if(r[f+88|0]){if(i){q[6658]=q[6658]+1;n[q[5256]](i);}}q[f+84>>2]=0;}o[f+88|0]=1;q[f+80>>2]=0;q[f+84>>2]=0;}while(1){q[q[f+84>>2]+(h<<2)>>2]=0;i=h+1|0;g=i>>>0<h>>>0;h=i;if(!g){continue}break}}q[f+76>>2]=0;l=q[j+8>>2];}k=k+1|0;if((k|0)<(l|0)){continue}break}h=q[f+84>>2];if(!h){break c}}if(r[f+88|0]){if(h){q[6658]=q[6658]+1;n[q[5256]](h);}}q[f+84>>2]=0;}h=q[a+4>>2];i=q[a+84>>2];q[f+104>>2]=q[a+72>>2];q[f+100>>2]=i;q[f+92>>2]=d;q[f+88>>2]=h;q[f+76>>2]=0;q[f+72>>2]=11344;q[f+96>>2]=e;q[f+80>>2]=b;q[f+84>>2]=c;i=q[K>>2];f:{if(!i){break f}d=q[E>>2];if(!d){break f}g=q[b+12>>2];C=u[g+24>>2];m=x(-u[g+52>>2]);B=u[g+8>>2];s=u[g+48>>2];D=u[g+40>>2];v=u[g+56>>2];h=q[c+12>>2];z=u[h+48>>2];t=u[h+52>>2];p=u[h+56>>2];ga=x(x(x(x(C*m)-x(B*s))-x(D*v))+x(x(x(B*z)+x(C*t))+x(D*p)));F=u[g+20>>2];I=u[g+4>>2];G=u[g+36>>2];ha=x(x(x(x(F*m)-x(I*s))-x(G*v))+x(x(x(I*z)+x(F*t))+x(G*p)));O=u[h+40>>2];L=u[h+24>>2];Q=u[h+8>>2];M=u[h+36>>2];R=u[h+20>>2];N=u[h+4>>2];Y=u[g+16>>2];A=x(Y*m);m=u[g>>2];A=x(A-x(m*s));s=u[g+32>>2];ia=x(x(A-x(s*v))+x(x(x(m*z)+x(Y*t))+x(s*p)));z=u[h+16>>2];t=u[h>>2];p=u[h+32>>2];$=u[e+32>>2];q[f+116>>2]=d;q[f+112>>2]=i;A=x(x(x(B*Q)+x(C*L))+x(D*O));V=x(y(A));S=x(x(x(B*N)+x(C*R))+x(D*M));W=x(y(S));T=x(x(x(B*t)+x(C*z))+x(D*p));X=x(y(T));U=x(x(x(I*Q)+x(F*L))+x(G*O));C=x(y(U));B=x(x(x(I*N)+x(F*R))+x(G*M));D=x(y(B));F=x(x(x(I*t)+x(F*z))+x(G*p));I=x(y(F));G=x(x(x(m*Q)+x(Y*L))+x(s*O));O=x(y(G));L=x(x(x(m*N)+x(Y*R))+x(s*M));Q=x(y(L));M=x(x(x(m*t)+x(Y*z))+x(s*p));R=x(y(M));d=124;g=0;E=128;k=f+112|0;K=128;l=1;while(1){g:{h:{i:{Z=l+ -1|0;da=Z<<3;i=da+k|0;J=q[i>>2];H=q[i+4>>2];N=u[H+16>>2];m=u[H>>2];ea=x(x(x(N-m)*x(.5))+x(0));s=u[H+20>>2];v=u[H+4>>2];fa=x(x(x(s-v)*x(.5))+x(0));z=u[H+24>>2];p=u[H+8>>2];Y=x(x(x(z-p)*x(.5))+x(0));t=x(x(x(R*ea)+x(Q*fa))+x(O*Y));m=x(x(N+m)*x(.5));v=x(x(s+v)*x(.5));z=x(x(z+p)*x(.5));p=x(ia+x(x(x(M*m)+x(L*v))+x(G*z)));j:{if(u[J>>2]<=x($+x(t+p))^1|u[J+16>>2]>=x(x(p-t)-$)^1){break j}t=x(x(x(I*ea)+x(D*fa))+x(C*Y));p=x(ha+x(x(x(F*m)+x(B*v))+x(U*z)));if(u[J+4>>2]<=x($+x(t+p))^1|u[J+20>>2]>=x(x(p-t)-$)^1){break j}t=x(x(x(X*ea)+x(W*fa))+x(V*Y));p=x(ga+x(x(x(T*m)+x(S*v))+x(A*z)));if(u[J+8>>2]<=x($+x(t+p))^1|u[J+24>>2]>=x(x(p-t)-$)^1){break j}k:{if((Z|0)<=(d|0)){i=E;j=k;h=g;break k}i=E<<1;l:{if(!((E|0)>=(i|0)|(K|0)>=(i|0))){m:{n:{o:{if(!E){j=0;break o}q[6657]=q[6657]+1;j=n[q[5255]](E<<4,16)|0;if((E|0)<1){break o}d=0;while(1){h=d<<3;_=h+j|0;K=h+k|0;h=q[K+4>>2];q[_>>2]=q[K>>2];q[_+4>>2]=h;d=d+1|0;if((E|0)!=(d|0)){continue}break}if(!(g&255)){break m}break n}h=1;if(!k){break m}K=i;if(!(g&255)){break l}}if(k){q[6658]=q[6658]+1;n[q[5256]](k);}}h=1;K=i;break l}j=k;h=g;}d=i+ -4|0;}g=q[H+40>>2];if(q[J+40>>2]){k=q[J+36>>2];if(g){g=j+da|0;q[g+4>>2]=q[H+36>>2];q[g>>2]=k;g=q[J+40>>2];k=(l<<3)+j|0;q[k+4>>2]=q[H+36>>2];q[k>>2]=g;g=q[J+36>>2];q[k+12>>2]=q[H+40>>2];q[k+8>>2]=g;g=q[J+40>>2];q[k+20>>2]=q[H+40>>2];q[k+16>>2]=g;l=l+3|0;break h}g=j+da|0;q[g+4>>2]=H;q[g>>2]=k;k=q[J+40>>2];g=(l<<3)+j|0;q[g+4>>2]=H;q[g>>2]=k;break i}if(g){g=j+da|0;q[g+4>>2]=q[H+36>>2];q[g>>2]=J;g=(l<<3)+j|0;q[g+4>>2]=q[H+40>>2];q[g>>2]=J;break i}n[q[q[f+72>>2]+8>>2]](f+72|0,J,H);E=i;k=j;g=h;}l=Z;break g}l=l+1|0;}E=i;k=j;g=h;}if(l){continue}break}if(!k|!(g&255)){break f}if(k){q[6658]=q[6658]+1;n[q[5256]](k);}}_=q[a+84>>2];if(q[_+8>>2]>=1){K=0;while(1){i=w(K,12);d=i+q[_+16>>2]|0;h=q[d+8>>2];p:{if(!h){break p}j=q[aa+28>>2]+w(q[d>>2],80)|0;d=q[j+64>>2];g=q[b+12>>2];z=u[g+52>>2];t=u[g+56>>2];F=u[j+48>>2];I=u[j+52>>2];G=u[j+56>>2];O=u[j+4>>2];L=u[j+20>>2];Q=u[j+36>>2];M=u[j+8>>2];R=u[j+24>>2];N=u[j+40>>2];V=u[g+20>>2];S=u[g+24>>2];m=u[j>>2];W=u[g+36>>2];s=u[j+16>>2];T=u[g+40>>2];v=u[j+32>>2];p=u[g+48>>2];X=u[g+8>>2];U=u[g>>2];C=u[g+4>>2];B=u[g+16>>2];D=u[g+32>>2];q[f+172>>2]=0;q[f+156>>2]=0;q[f+140>>2]=0;q[f+124>>2]=0;u[f+144>>2]=x(x(D*m)+x(W*s))+x(T*v);u[f+128>>2]=x(x(B*m)+x(V*s))+x(S*v);u[f+112>>2]=x(x(U*m)+x(C*s))+x(X*v);u[f+152>>2]=x(x(D*M)+x(W*R))+x(T*N);u[f+148>>2]=x(x(D*O)+x(W*L))+x(T*Q);u[f+136>>2]=x(x(B*M)+x(V*R))+x(S*N);u[f+132>>2]=x(x(B*O)+x(V*L))+x(S*Q);u[f+120>>2]=x(x(U*M)+x(C*R))+x(X*N);u[f+116>>2]=x(x(U*O)+x(C*L))+x(X*Q);u[f+168>>2]=t+x(x(x(D*F)+x(W*I))+x(T*G));u[f+164>>2]=z+x(x(x(B*F)+x(V*I))+x(S*G));u[f+160>>2]=p+x(x(x(U*F)+x(C*I))+x(X*G));n[q[q[d>>2]+8>>2]](d,f+112|0,f+56|0,f+40|0);A=u[e+32>>2];u[f+56>>2]=u[f+56>>2]-A;u[f+60>>2]=u[f+60>>2]-A;u[f+64>>2]=u[f+64>>2]-A;u[f+40>>2]=A+u[f+40>>2];u[f+44>>2]=A+u[f+44>>2];u[f+48>>2]=A+u[f+48>>2];j=q[ca+28>>2]+w(q[(i+q[_+16>>2]|0)+4>>2],80)|0;d=q[j+64>>2];g=q[c+12>>2];z=u[g+52>>2];t=u[g+56>>2];F=u[j+48>>2];I=u[j+52>>2];G=u[j+56>>2];O=u[j+4>>2];L=u[j+20>>2];Q=u[j+36>>2];M=u[j+8>>2];R=u[j+24>>2];N=u[j+40>>2];V=u[g+20>>2];S=u[g+24>>2];m=u[j>>2];W=u[g+36>>2];s=u[j+16>>2];T=u[g+40>>2];v=u[j+32>>2];p=u[g+48>>2];X=u[g+8>>2];U=u[g>>2];C=u[g+4>>2];B=u[g+16>>2];D=u[g+32>>2];q[f+172>>2]=0;q[f+156>>2]=0;q[f+140>>2]=0;q[f+124>>2]=0;u[f+144>>2]=x(x(D*m)+x(W*s))+x(T*v);u[f+128>>2]=x(x(B*m)+x(V*s))+x(S*v);u[f+112>>2]=x(x(U*m)+x(C*s))+x(X*v);u[f+152>>2]=x(x(D*M)+x(W*R))+x(T*N);u[f+148>>2]=x(x(D*O)+x(W*L))+x(T*Q);u[f+136>>2]=x(x(B*M)+x(V*R))+x(S*N);u[f+132>>2]=x(x(B*O)+x(V*L))+x(S*Q);u[f+120>>2]=x(x(U*M)+x(C*R))+x(X*N);u[f+116>>2]=x(x(U*O)+x(C*L))+x(X*Q);u[f+168>>2]=t+x(x(x(D*F)+x(W*I))+x(T*G));u[f+164>>2]=z+x(x(x(B*F)+x(V*I))+x(S*G));u[f+160>>2]=p+x(x(x(U*F)+x(C*I))+x(X*G));n[q[q[d>>2]+8>>2]](d,f+112|0,f+24|0,f+8|0);m=x(u[f+24>>2]-A);u[f+24>>2]=m;s=x(u[f+28>>2]-A);u[f+28>>2]=s;v=x(u[f+32>>2]-A);u[f+32>>2]=v;z=x(A+u[f+8>>2]);u[f+8>>2]=z;t=x(A+u[f+16>>2]);u[f+16>>2]=t;p=x(A+u[f+12>>2]);u[f+12>>2]=p;q:{if(u[f+44>>2]<s|u[f+60>>2]>p|(u[f+40>>2]<m|u[f+56>>2]>z)){break q}if(u[f+64>>2]>t){break q}if(!(u[f+48>>2]<v)){break p}}n[q[q[h>>2]>>2]](h)|0;d=q[a+4>>2];n[q[q[d>>2]+60>>2]](d,h);d=i+q[_+16>>2]|0;j=q[d+4>>2];g=q[d>>2];l=q[a+92>>2];r:{if((l|0)!=q[a+96>>2]){break r}Z=l?l<<1:1;if((l|0)>=(Z|0)){break r}h=0;d=0;if(Z){q[6657]=q[6657]+1;d=n[q[5255]](w(Z,12),16)|0;l=q[a+92>>2];}if((l|0)>=1){while(1){i=w(h,12);E=i+d|0;k=i+q[a+100>>2]|0;i=q[k+4>>2];q[E>>2]=q[k>>2];q[E+4>>2]=i;q[E+8>>2]=q[k+8>>2];h=h+1|0;if((l|0)!=(h|0)){continue}break}}i=q[a+100>>2];if(i){if(r[a+104|0]){if(i){q[6658]=q[6658]+1;n[q[5256]](i);}}q[a+100>>2]=0;}q[a+100>>2]=d;o[a+104|0]=1;q[a+96>>2]=Z;l=q[a+92>>2];}d=q[a+100>>2]+w(l,12)|0;q[d+8>>2]=0;q[d+4>>2]=j;q[d>>2]=g;q[a+92>>2]=q[a+92>>2]+1;}K=K+1|0;if((K|0)<q[_+8>>2]){continue}break}}if(q[a+92>>2]>=1){h=0;while(1){c=q[a+84>>2];b=q[a+100>>2]+w(h,12)|0;n[q[q[c>>2]+8>>2]](c,q[b>>2],q[b+4>>2])|0;h=h+1|0;if((h|0)<q[a+92>>2]){continue}break}}b=q[a+100>>2];if(b){if(r[a+104|0]){if(b){q[6658]=q[6658]+1;n[q[5256]](b);}}q[a+100>>2]=0;}q[a+100>>2]=0;q[a+92>>2]=0;q[a+96>>2]=0;o[a+104|0]=1;}P=f+3584|0;}function Tz(a,b){a=a|0;b=b|0;var c=0,d=0,e=0;c=q[a+84>>2];d=q[c+8>>2];if((d|0)>=1){a=0;while(1){e=q[(q[c+16>>2]+w(a,12)|0)+8>>2];if(e){n[q[q[e>>2]+16>>2]](e,b);d=q[c+8>>2];}a=a+1|0;if((a|0)<(d|0)){continue}break}}}function Uz(a){a=a|0;aa(ri(a));}function Vz(a,b,r,u){Me(a,b,r,u,0);o[a+104|0]=1;q[a>>2]=11264;q[a+100>>2]=0;q[a+92>>2]=0;q[a+96>>2]=0;q[6657]=q[6657]+1;b=n[q[5255]](64,16)|0;$z(b);q[a+84>>2]=b;q[a+108>>2]=q[q[r+4>>2]+72>>2];q[a+112>>2]=q[q[u+4>>2]+72>>2];}function Wz(a,b,n){a=a|0;b=b|0;n=n|0;q[6045]=q[6045]+1;return Yz(a,b,n)|0}function Xz(a,b,n){a=a|0;b=b|0;n=n|0;var o=0,r=0,u=0,x=0,y=0,P=0,ba=0,ja=0;q[6044]=q[6044]+1;y=q[a+36>>2];o=n<<16|b;o=(o<<15^-1)+o|0;o=w(o>>>10^o,9);o=o>>>6^o;o=(o<<11^-1)+o|0;u=y+((q[a+12>>2]+ -1&(o>>>16^o))<<2)|0;o=q[u>>2];a:{if((o|0)==-1){break a}x=q[a+16>>2];r=o;while(1){P=x+w(r,12)|0;if(!(q[P+4>>2]==(n|0)?q[P>>2]==(b|0):0)){r=q[q[a+56>>2]+(r<<2)>>2];if((r|0)!=-1){continue}break a}break}ja=q[(x+w(r,12)|0)+8>>2];n=q[a+56>>2];b:{c:{if((o|0)!=(r|0)){while(1){b=o;o=q[n+(b<<2)>>2];if((r|0)!=(o|0)){continue}break}ba=q[n+(r<<2)>>2];o=ba;if((b|0)==-1){break c}q[n+(b<<2)>>2]=ba;break b}o=q[n+(r<<2)>>2];}q[u>>2]=o;}u=q[a+8>>2]+ -1|0;if((u|0)==(r|0)){q[a+8>>2]=r;return ja|0}d:{e:{x=x+w(u,12)|0;b=q[x+4>>2]<<16|q[x>>2];b=(b<<15^-1)+b|0;b=w(b>>>10^b,9);b=b>>>6^b;b=(b<<11^-1)+b|0;ba=q[a+12>>2]+ -1&(b>>>16^b);y=y+(ba<<2)|0;o=q[y>>2];if((u|0)==(o|0)){o=q[n+(u<<2)>>2];break e}while(1){b=o;o=q[n+(b<<2)>>2];if((u|0)!=(o|0)){continue}break}o=q[n+(u<<2)>>2];if((b|0)==-1){break e}q[n+(b<<2)>>2]=o;break d}q[y>>2]=o;}b=q[x+4>>2];q[P>>2]=q[x>>2];q[P+4>>2]=b;q[P+8>>2]=q[x+8>>2];b=q[a+36>>2]+(ba<<2)|0;q[q[a+56>>2]+(r<<2)>>2]=q[b>>2];q[b>>2]=r;q[a+8>>2]=q[a+8>>2]+ -1;}return ja|0}function Yz(a,b,ka){var la=0,ma=0,na=0,oa=0,pa=0,qa=0,ra=0,sa=0,ta=0,ua=0,va=0;la=ka<<16|b;la=(la<<15^-1)+la|0;la=w(la>>>10^la,9);la=la>>>6^la;la=(la<<11^-1)+la|0;ta=la>>>16^la;la=q[a+12>>2];ra=ta&la+ -1;na=q[q[a+36>>2]+(ra<<2)>>2];a:{if((na|0)!=-1){oa=q[a+16>>2];while(1){ma=oa+w(na,12)|0;if(q[ma+4>>2]==(ka|0)?q[ma>>2]==(b|0):0){break a}na=q[q[a+56>>2]+(na<<2)>>2];if((na|0)!=-1){continue}break}}na=a;b:{c:{oa=q[a+8>>2];ma=oa;if((ma|0)==(la|0)){ma=la?la<<1:1;ua=(la|0)>=(ma|0);if(!ua){break c}}else {la=ma;}q[na+8>>2]=la+1;pa=q[a+16>>2];ma=pa+w(oa,12)|0;break b}if(ma){q[6657]=q[6657]+1;pa=n[q[5255]](w(ma,12),16)|0;la=q[a+8>>2];}if((la|0)>=1){na=0;while(1){qa=w(na,12);sa=qa+q[a+16>>2]|0;va=q[sa+4>>2];qa=pa+qa|0;q[qa>>2]=q[sa>>2];q[qa+4>>2]=va;q[qa+8>>2]=q[sa+8>>2];na=na+1|0;if((na|0)!=(la|0)){continue}break}}la=q[a+16>>2];if(la){if(r[a+20|0]){if(la){q[6658]=q[6658]+1;n[q[5256]](la);}}q[a+16>>2]=0;}q[a+16>>2]=pa;q[a+12>>2]=ma;o[a+20|0]=1;q[a+8>>2]=q[a+8>>2]+1;ma=w(oa,12)+pa|0;if(ua){break b}Ke(a);ra=q[a+12>>2]+ -1&ta;}q[ma>>2]=b;b=w(oa,12)+pa|0;q[b+4>>2]=ka;q[b+8>>2]=0;b=q[a+56>>2]+(oa<<2)|0;a=q[a+36>>2]+(ra<<2)|0;q[b>>2]=q[a>>2];q[a>>2]=oa;}return ma}function Zz(a,b,n){var ka=0,wa=0,xa=0;q[6046]=q[6046]+1;ka=n<<16|b;ka=(ka<<15^-1)+ka|0;ka=w(ka>>>10^ka,9);ka=ka>>>6^ka;ka=(ka<<11^-1)+ka|0;ka=q[a+12>>2]+ -1&(ka>>>16^ka);a:{b:{if((ka|0)>=q[a+28>>2]){break b}ka=q[q[a+36>>2]+(ka<<2)>>2];if((ka|0)==-1){break b}xa=q[a+16>>2];while(1){wa=w(ka,12)+xa|0;if(q[wa+4>>2]==(n|0)?q[wa>>2]==(b|0):0){break a}ka=q[q[a+56>>2]+(ka<<2)>>2];if((ka|0)!=-1){continue}break}}wa=0;}return wa}function _z(a){a=a|0;aa(ti(a));}function $z(a){var b=0,ya=0,za=0,Aa=0,Ba=0,Ca=0;q[a>>2]=11200;q[a+8>>2]=0;q[a+12>>2]=0;o[a+20|0]=1;q[a+16>>2]=0;o[a+40|0]=1;q[a+36>>2]=0;o[a+60|0]=1;q[a+28>>2]=0;q[a+32>>2]=0;q[a+56>>2]=0;q[a+48>>2]=0;q[a+52>>2]=0;q[6657]=q[6657]+1;Aa=n[q[5255]](24,16)|0;Ba=q[a+8>>2];if((Ba|0)>=1){while(1){ya=w(za,12);b=ya+q[a+16>>2]|0;Ca=q[b+4>>2];ya=ya+Aa|0;q[ya>>2]=q[b>>2];q[ya+4>>2]=Ca;q[ya+8>>2]=q[b+8>>2];za=za+1|0;if((Ba|0)!=(za|0)){continue}break}}b=q[a+16>>2];if(b){if(r[a+20|0]){if(b){q[6658]=q[6658]+1;n[q[5256]](b);}}q[a+16>>2]=0;}q[a+16>>2]=Aa;o[a+20|0]=1;q[a+12>>2]=2;Ke(a);}function aA(a,n){a=a|0;n=n|0;var Da=0,Ea=0;Da=a;Ea=q[q[q[a+4>>2]+4>>2]+28>>2];a=q[n+36>>2];ui(Da,q[(Ea+w(a,80)|0)+64>>2],a);}function bA(a,w){a=a|0;w=w|0;var Fa=0,Ga=0,Ha=0;Fa=q[a+52>>2];if((Fa|0)>=1){while(1){Ha=q[q[a+60>>2]+(Ga<<2)>>2];if(Ha){n[q[q[Ha>>2]+16>>2]](Ha,w);Fa=q[a+52>>2];}Ga=Ga+1|0;if((Ga|0)<(Fa|0)){continue}break}}}function cA(a,Ia,Ja,Ka,La){a=a|0;Ia=Ia|0;Ja=Ja|0;Ka=Ka|0;La=La|0;var Ma=0,Na=x(0),Oa=x(0),Pa=x(0),Qa=x(0),Ra=x(0),Sa=x(0),Ta=x(0),Ua=x(0),Va=x(0),Wa=x(0),Xa=x(0),Ya=0,Za=x(0),_a=x(0),$a=x(0),ab=x(0),bb=x(0),cb=x(0),db=x(0),eb=x(0),fb=x(0),gb=x(0),hb=x(0),ib=0,jb=x(0),kb=x(0),lb=x(0),mb=0,nb=0,ob=0,pb=0,qb=0,rb=0;ib=q[a+52>>2];if((ib|0)<1){return x(x(1))}Ma=r[a+68|0];mb=Ma?Ia:Ja;Ia=Ma?Ja:Ia;nb=q[Ia- -64>>2];jb=u[Ia+60>>2];kb=u[Ia+56>>2];lb=u[Ia+52>>2];ob=q[Ia+48>>2];Oa=u[Ia+44>>2];Pa=u[Ia+40>>2];Qa=u[Ia+36>>2];pb=q[Ia+32>>2];Ra=u[Ia+28>>2];Sa=u[Ia+24>>2];Ta=u[Ia+20>>2];qb=q[Ia+16>>2];Ua=u[Ia+12>>2];Va=u[Ia+8>>2];Ya=q[Ia+304>>2];Wa=u[Ia+4>>2];rb=q[Ia+192>>2];Xa=x(1);Ma=0;while(1){Ja=q[rb+28>>2]+w(Ma,80)|0;Na=u[Ja+56>>2];Za=u[Ja+52>>2];_a=u[Ja+48>>2];$a=u[Ja+36>>2];ab=u[Ja+20>>2];bb=u[Ja+4>>2];cb=u[Ja+40>>2];db=u[Ja+24>>2];eb=u[Ja+8>>2];fb=u[Ja+32>>2];gb=u[Ja>>2];hb=u[Ja+16>>2];q[Ia+64>>2]=0;q[Ia+48>>2]=0;q[Ia+32>>2]=0;q[Ia+16>>2]=0;q[Ia+304>>2]=Ya+1;u[Ia+36>>2]=x(x(Qa*gb)+x(Pa*hb))+x(Oa*fb);u[Ia+20>>2]=x(x(Ta*gb)+x(Sa*hb))+x(Ra*fb);u[Ia+4>>2]=x(x(Wa*gb)+x(Va*hb))+x(Ua*fb);u[Ia+44>>2]=x(x(Qa*eb)+x(Pa*db))+x(Oa*cb);u[Ia+40>>2]=x(x(Qa*bb)+x(Pa*ab))+x(Oa*$a);u[Ia+28>>2]=x(x(Ta*eb)+x(Sa*db))+x(Ra*cb);u[Ia+24>>2]=x(x(Ta*bb)+x(Sa*ab))+x(Ra*$a);u[Ia+12>>2]=x(x(Wa*eb)+x(Va*db))+x(Ua*cb);u[Ia+8>>2]=x(x(Wa*bb)+x(Va*ab))+x(Ua*$a);u[Ia+60>>2]=jb+x(x(x(Qa*_a)+x(Pa*Za))+x(Oa*Na));u[Ia+56>>2]=kb+x(x(x(Ta*_a)+x(Sa*Za))+x(Ra*Na));u[Ia+52>>2]=lb+x(x(x(Wa*_a)+x(Va*Za))+x(Ua*Na));Ja=q[q[a+60>>2]+(Ma<<2)>>2];Na=x(n[q[q[Ja>>2]+12>>2]](Ja,Ia,mb,Ka,La));q[Ia+64>>2]=nb;u[Ia+60>>2]=jb;u[Ia+56>>2]=kb;u[Ia+52>>2]=lb;q[Ia+48>>2]=ob;u[Ia+44>>2]=Oa;u[Ia+40>>2]=Pa;u[Ia+36>>2]=Qa;q[Ia+32>>2]=pb;u[Ia+28>>2]=Ra;u[Ia+24>>2]=Sa;u[Ia+20>>2]=Ta;q[Ia+16>>2]=qb;u[Ia+12>>2]=Ua;u[Ia+8>>2]=Va;u[Ia+4>>2]=Wa;Ya=q[Ia+304>>2]+1|0;q[Ia+304>>2]=Ya;Xa=Na<Xa?Na:Xa;Ma=Ma+1|0;if((ib|0)!=(Ma|0)){continue}break}return x(Xa)}function dA(a,w,Ia,Ja){var Ka=0,La=0,sb=0,tb=0,ub=0,vb=x(0),wb=x(0),xb=x(0),yb=x(0),zb=x(0),Ab=x(0);if(a){vb=u[w+24>>2];wb=u[w+20>>2];La=q[Ia+8>>2];xb=u[w+16>>2];yb=u[w+8>>2];zb=u[w+4>>2];Ab=u[w>>2];w=q[Ia+4>>2];if((w|0)<=-1){if((La|0)<=-1){Ka=q[Ia+12>>2];if(Ka){if(r[Ia+16|0]){if(Ka){q[6658]=q[6658]+1;n[q[5256]](Ka);}}q[Ia+12>>2]=0;}o[Ia+16|0]=1;q[Ia+8>>2]=0;q[Ia+12>>2]=0;La=0;}while(1){q[q[Ia+12>>2]+(w<<2)>>2]=0;Ka=w+1|0;sb=Ka>>>0>=w>>>0;w=Ka;if(sb){continue}break}}Ka=0;q[Ia+4>>2]=0;if((La|0)<=63){q[6657]=q[6657]+1;La=n[q[5255]](256,16)|0;Ka=q[Ia+4>>2];if((Ka|0)>=1){w=0;while(1){sb=w<<2;q[sb+La>>2]=q[sb+q[Ia+12>>2]>>2];w=w+1|0;if((Ka|0)!=(w|0)){continue}break}}w=q[Ia+12>>2];if(w){if(r[Ia+16|0]){if(w){q[6658]=q[6658]+1;n[q[5256]](w);}Ka=q[Ia+4>>2];}q[Ia+12>>2]=0;}q[Ia+12>>2]=La;o[Ia+16|0]=1;q[Ia+8>>2]=64;La=64;}a:{if((Ka|0)!=(La|0)){break a}tb=La<<1;if((La|0)>=(tb|0)){Ka=La;break a}w=0;b:{c:{if(!La){sb=0;Ka=La;break c}q[6657]=q[6657]+1;sb=n[q[5255]](La<<3,16)|0;Ka=q[Ia+4>>2];if((Ka|0)<1){break b}}while(1){La=w<<2;q[La+sb>>2]=q[La+q[Ia+12>>2]>>2];w=w+1|0;if((Ka|0)!=(w|0)){continue}break}}w=q[Ia+12>>2];if(w){if(r[Ia+16|0]){if(w){q[6658]=q[6658]+1;n[q[5256]](w);}Ka=q[Ia+4>>2];}q[Ia+12>>2]=0;}q[Ia+12>>2]=sb;o[Ia+16|0]=1;q[Ia+8>>2]=tb;}q[q[Ia+12>>2]+(Ka<<2)>>2]=a;Ka=Ka+1|0;q[Ia+4>>2]=Ka;while(1){sb=q[Ia+12>>2];w=Ka+ -1|0;La=q[sb+(w<<2)>>2];q[Ia+4>>2]=w;d:{if(!(u[La>>2]<=xb)){Ka=w;break d}if(!(u[La+16>>2]>=Ab)){Ka=w;break d}if(!(u[La+4>>2]<=wb)){Ka=w;break d}if(!(u[La+20>>2]>=zb)){Ka=w;break d}if(!(u[La+8>>2]<=vb)){Ka=w;break d}if(!(u[La+24>>2]>=yb)){Ka=w;break d}if(q[La+40>>2]){tb=q[La+36>>2];a=q[Ia+8>>2];e:{if((w|0)!=(a|0)){break e}a=w?w<<1:1;if((Ka|0)>(a|0)){a=w;break e}Ka=0;sb=0;if(a){q[6657]=q[6657]+1;sb=n[q[5255]](a<<2,16)|0;w=q[Ia+4>>2];}if((w|0)>=1){while(1){ub=Ka<<2;q[ub+sb>>2]=q[q[Ia+12>>2]+ub>>2];Ka=Ka+1|0;if((Ka|0)!=(w|0)){continue}break}}Ka=q[Ia+12>>2];if(Ka){if(r[Ia+16|0]){if(Ka){q[6658]=q[6658]+1;n[q[5256]](Ka);}w=q[Ia+4>>2];}q[Ia+12>>2]=0;}q[Ia+12>>2]=sb;o[Ia+16|0]=1;q[Ia+8>>2]=a;}q[(w<<2)+sb>>2]=tb;w=w+1|0;q[Ia+4>>2]=w;La=q[La+40>>2];if((a|0)==(w|0)){Ka=a?a<<1:1;if((a|0)<(Ka|0)){w=0;sb=0;if(Ka){q[6657]=q[6657]+1;sb=n[q[5255]](Ka<<2,16)|0;a=q[Ia+4>>2];}if((a|0)>=1){while(1){tb=w<<2;q[tb+sb>>2]=q[tb+q[Ia+12>>2]>>2];w=w+1|0;if((w|0)!=(a|0)){continue}break}}w=q[Ia+12>>2];if(w){if(r[Ia+16|0]){if(w){q[6658]=q[6658]+1;n[q[5256]](w);}a=q[Ia+4>>2];}q[Ia+12>>2]=0;}q[Ia+12>>2]=sb;o[Ia+16|0]=1;q[Ia+8>>2]=Ka;}w=a;}q[q[Ia+12>>2]+(w<<2)>>2]=La;Ka=w+1|0;q[Ia+4>>2]=Ka;break d}n[q[q[Ja>>2]+12>>2]](Ja,La);Ka=q[Ia+4>>2];}if((Ka|0)>0){continue}break}}}function eA(a){a=a|0;aa(Le(a));}function fA(a){var n=0,w=0,Ia=0,Ja=0,Bb=0,Cb=0,Db=0,Eb=0;Bb=P-16|0;P=Bb;w=q[a+4>>2];a:{if((w|0)<=0){break a}Cb=q[a+12>>2];while(1){Db=(Ia<<3)+Cb|0;Eb=Db;n=Ia;Ja=q[Db>>2];if((n|0)!=(Ja|0)){while(1){n=(Ja<<3)+Cb|0;q[Eb>>2]=q[n>>2];n=q[n>>2];Eb=(n<<3)+Cb|0;Ja=q[Eb>>2];if((n|0)!=(Ja|0)){continue}break}}q[Db>>2]=n;Ia=Ia+1|0;if((w|0)!=(Ia|0)){continue}break}if((w|0)<2){break a}xi(a,Bb+8|0,0,w+ -1|0);}P=Bb+16|0;}function gA(a,Fb){var Gb=0,Hb=0,Ib=0,Jb=0,Kb=0,Lb=0,Mb=0;Hb=q[a+4>>2];if((Hb|0)<(Fb|0)){if(q[a+8>>2]<(Fb|0)){if(Fb){q[6657]=q[6657]+1;Kb=n[q[5255]](Fb<<3,16)|0;Gb=q[a+4>>2];}else {Gb=Hb;}if((Gb|0)>=1){while(1){Ib=Jb<<3;Lb=Ib+Kb|0;Ib=q[a+12>>2]+Ib|0;Mb=q[Ib+4>>2];q[Lb>>2]=q[Ib>>2];q[Lb+4>>2]=Mb;Jb=Jb+1|0;if((Gb|0)!=(Jb|0)){continue}break}}Gb=q[a+12>>2];if(Gb){if(r[a+16|0]){if(Gb){q[6658]=q[6658]+1;n[q[5256]](Gb);}}q[a+12>>2]=0;}q[a+12>>2]=Kb;o[a+16|0]=1;q[a+8>>2]=Fb;}while(1){Gb=q[a+12>>2]+(Hb<<3)|0;q[Gb>>2]=0;q[Gb+4>>2]=0;Hb=Hb+1|0;if((Hb|0)!=(Fb|0)){continue}break}}q[a+4>>2]=Fb;if((Fb|0)>=1){a=q[a+12>>2];Hb=0;while(1){Gb=a+(Hb<<3)|0;q[Gb+4>>2]=1;q[Gb>>2]=Hb;Hb=Hb+1|0;if((Hb|0)!=(Fb|0)){continue}break}}}function hA(a){var Fb=0;Fb=q[a+12>>2];if(Fb){if(r[a+16|0]){if(Fb){q[6658]=q[6658]+1;n[q[5256]](Fb);}}q[a+12>>2]=0;}q[a+12>>2]=0;o[a+16|0]=1;q[a+4>>2]=0;q[a+8>>2]=0;}function iA(a,Nb,Ob,Pb){a=a|0;Nb=Nb|0;Ob=Ob|0;Pb=x(Pb);var Qb=x(0),Rb=x(0),Sb=x(0),Tb=x(0),Ub=x(0),Vb=x(0),Wb=x(0),Xb=x(0),Yb=x(0),Zb=x(0),_b=0,$b=x(0),ac=x(0),bc=x(0),cc=x(0),dc=x(0),ec=x(0),fc=x(0),gc=x(0),hc=x(0),ic=x(0),jc=x(0),kc=x(0),lc=x(0),mc=x(0),nc=x(0),oc=x(0),pc=x(0),qc=x(0),rc=x(0),sc=x(0),tc=x(0);_b=P-16|0;P=_b;lc=u[Nb+8>>2];jc=u[Ob+8>>2];Wb=x(x(lc*Pb)+jc);mc=u[Nb+4>>2];kc=u[Ob+4>>2];nc=x(x(mc*Pb)+kc);oc=u[Nb>>2];Qb=x(oc*Pb);Pb=u[Ob>>2];pc=x(Qb+Pb);a:{if(r[a+232|0]){$b=u[a+56>>2];Xb=x(-u[a+92>>2]);ac=u[a+40>>2];Vb=u[a+88>>2];Ub=u[a+72>>2];Qb=u[a+96>>2];ec=x(x(x($b*Xb)-x(ac*Vb))-x(Ub*Qb));Rb=u[a+200>>2];bc=u[a+60>>2];cc=u[a+44>>2];Yb=u[a+76>>2];hc=x(x(x(bc*Xb)-x(cc*Vb))-x(Yb*Qb));Sb=u[a+204>>2];dc=u[a- -64>>2];Tb=x(dc*Xb);Xb=u[a+48>>2];Tb=x(Tb-x(Xb*Vb));Vb=u[a+80>>2];fc=x(Tb-x(Vb*Qb));Qb=u[a+208>>2];Tb=x(x(x(x(x(ec*Rb)+x(hc*Sb))+x(fc*Qb))+u[a+224>>2])+x(x(Wb*x(x(x(Ub*Rb)+x(Yb*Sb))+x(Vb*Qb)))+x(x(pc*x(x(x(ac*Rb)+x(cc*Sb))+x(Xb*Qb)))+x(nc*x(x(x($b*Rb)+x(bc*Sb))+x(dc*Qb))))));Rb=u[a+168>>2];Sb=u[a+172>>2];Qb=u[a+176>>2];Rb=x(x(x(Wb*x(x(x(Ub*Rb)+x(Yb*Sb))+x(Vb*Qb)))+x(x(pc*x(x(x(ac*Rb)+x(cc*Sb))+x(Xb*Qb)))+x(nc*x(x(x($b*Rb)+x(bc*Sb))+x(dc*Qb)))))+x(x(x(x(Rb*ec)+x(hc*Sb))+x(fc*Qb))+u[a+216>>2]));Sb=x(oc*x(Rb-Pb));Qb=Wb;Pb=u[a+184>>2];Wb=u[a+188>>2];Yb=x(x(Ub*Pb)+x(Yb*Wb));Ub=u[a+192>>2];Wb=x(x(x(Qb*x(Yb+x(Vb*Ub)))+x(x(pc*x(x(x(ac*Pb)+x(cc*Wb))+x(Xb*Ub)))+x(nc*x(x(x($b*Pb)+x(bc*Wb))+x(dc*Ub)))))+x(x(x(x(ec*Pb)+x(hc*Wb))+x(fc*Ub))+u[a+220>>2]));Pb=x(x(Sb+x(mc*x(Wb-kc)))+x(lc*x(Tb-jc)));u[_b+8>>2]=Tb+x(lc*Pb);u[_b+4>>2]=Wb+x(mc*Pb);u[_b>>2]=Rb+x(oc*Pb);break a}sc=u[a+224>>2];$b=u[a+208>>2];ac=u[a+200>>2];Ub=u[a+204>>2];tc=u[a+216>>2];Rb=u[a+172>>2];bc=u[a+176>>2];cc=u[a+168>>2];Yb=u[a+120>>2];Tb=x(-u[a+156>>2]);Sb=u[a+104>>2];gc=u[a+152>>2];dc=u[a+136>>2];ic=u[a+160>>2];Xb=x(x(x(Yb*Tb)-x(Sb*gc))-x(dc*ic));Vb=u[a+124>>2];Qb=u[a+108>>2];ec=u[a+140>>2];hc=x(x(x(Vb*Tb)-x(Qb*gc))-x(ec*ic));fc=u[a+128>>2];Zb=x(fc*Tb);Tb=u[a+112>>2];Zb=x(Zb-x(Tb*gc));gc=u[a+144>>2];ic=x(Zb-x(gc*ic));Zb=u[a+184>>2];qc=u[a+188>>2];rc=u[a+192>>2];Zb=x(x(x(jc*x(x(x(dc*Zb)+x(ec*qc))+x(gc*rc)))+x(x(Pb*x(x(x(Sb*Zb)+x(Qb*qc))+x(Tb*rc)))+x(kc*x(x(x(Yb*Zb)+x(Vb*qc))+x(fc*rc)))))+x(x(x(x(Xb*Zb)+x(hc*qc))+x(ic*rc))+u[a+220>>2]));u[_b+4>>2]=Zb;Rb=x(x(x(jc*x(x(x(dc*cc)+x(ec*Rb))+x(gc*bc)))+x(x(Pb*x(x(x(Sb*cc)+x(Qb*Rb))+x(Tb*bc)))+x(kc*x(x(x(Yb*cc)+x(Vb*Rb))+x(fc*bc)))))+x(tc+x(x(x(cc*Xb)+x(hc*Rb))+x(ic*bc))));u[_b>>2]=Rb;Pb=x(x(sc+x(x(x(Xb*ac)+x(hc*Ub))+x(ic*$b)))+x(x(jc*x(x(x(dc*ac)+x(ec*Ub))+x(gc*$b)))+x(x(Pb*x(x(x(Sb*ac)+x(Qb*Ub))+x(Tb*$b)))+x(kc*x(x(x(Yb*ac)+x(Vb*Ub))+x(fc*$b))))));u[_b+8>>2]=Pb;Pb=x(x(x(oc*x(pc-Rb))+x(mc*x(nc-Zb)))+x(lc*x(Wb-Pb)));}q[_b+12>>2]=0;a=q[a+36>>2];n[q[q[a>>2]+16>>2]](a,Nb,_b,Pb);P=_b+16|0;}function jA(a,Nb,Ob,Pb){a=a|0;Nb=Nb|0;Ob=Ob|0;Pb=x(Pb);var uc=0,vc=x(0),wc=0,xc=x(0),yc=x(0),zc=x(0),Ac=x(0),Bc=x(0),Cc=x(0);uc=P-16|0;P=uc;u[a+32>>2]=Pb;wc=q[Nb+4>>2];q[a+8>>2]=q[Nb>>2];q[a+12>>2]=wc;wc=q[Nb+12>>2];q[a+16>>2]=q[Nb+8>>2];q[a+20>>2]=wc;xc=u[Nb+8>>2];yc=u[Ob>>2];zc=u[Nb>>2];Ac=u[Ob+4>>2];Bc=u[Nb+4>>2];Cc=u[Ob+8>>2];vc=u[a+28>>2];q[uc+12>>2]=0;u[uc+8>>2]=Cc-x(vc*xc);u[uc+4>>2]=Ac-x(vc*Bc);u[uc>>2]=yc-x(zc*vc);Pb=x(x(vc+u[a+24>>2])+Pb);u[a+32>>2]=Pb;if(!!(Pb<x(0))){o[a+36|0]=1;}a=q[a+4>>2];n[q[q[a>>2]+16>>2]](a,Nb,uc,Pb);P=uc+16|0;}function kA(a,Nb){a=a|0;Nb=Nb|0;var Ob=0,Pb=0,Dc=0,Ec=0,Fc=0;Ob=q[a+56>>2];if(!(!Ob|!r[a+52|0])){Pb=q[Nb+4>>2];a:{if((Pb|0)!=q[Nb+8>>2]){break a}Dc=Pb?Pb<<1:1;if((Pb|0)>=(Dc|0)){break a}if(Dc){q[6657]=q[6657]+1;Ec=n[q[5255]](Dc<<2,16)|0;Pb=q[Nb+4>>2];}if((Pb|0)>=1){Ob=0;while(1){Fc=Ob<<2;q[Fc+Ec>>2]=q[q[Nb+12>>2]+Fc>>2];Ob=Ob+1|0;if((Ob|0)!=(Pb|0)){continue}break}}Ob=q[Nb+12>>2];if(Ob){if(r[Nb+16|0]){if(Ob){q[6658]=q[6658]+1;n[q[5256]](Ob);}Pb=q[Nb+4>>2];}q[Nb+12>>2]=0;}q[Nb+12>>2]=Ec;o[Nb+16|0]=1;q[Nb+8>>2]=Dc;Ob=q[a+56>>2];}q[q[Nb+12>>2]+(Pb<<2)>>2]=Ob;q[Nb+4>>2]=Pb+1;}}function lA(a,Nb,Gc,Hc){a=a|0;Nb=Nb|0;Gc=Gc|0;Hc=Hc|0;var Ic=0,Jc=0;Gc=q[Nb>>2];Gc=n[q[q[Gc>>2]+56>>2]](Gc,72)|0;Hc=q[Nb+4>>2];Ic=q[a+12>>2];Jc=q[a+16>>2];a=q[a+8>>2];q[Gc>>2]=17096;q[Gc+4>>2]=q[Nb>>2];q[Gc>>2]=5592;o[Gc+28|0]=1;q[Gc+8>>2]=a;q[Gc>>2]=10504;q[Gc+24>>2]=0;o[Gc+48|0]=1;q[Gc+16>>2]=0;q[Gc+20>>2]=0;q[Gc+44>>2]=0;q[Gc+64>>2]=Ic;q[Gc+68>>2]=Jc;o[Gc+60|0]=0;q[Gc+56>>2]=Hc;o[Gc+52|0]=0;q[Gc+36>>2]=0;q[Gc+40>>2]=0;return Gc|0}function mA(a,Nb,Gc,Hc,Kc){a=a|0;Nb=Nb|0;Gc=Gc|0;Hc=Hc|0;Kc=Kc|0;var Lc=x(0),Mc=x(0),Nc=x(0),Oc=0,Pc=0,Qc=0,Rc=0;a=P-608|0;P=a;Mc=x(u[Nb+116>>2]-u[Nb+52>>2]);Lc=x(Mc*Mc);Mc=x(u[Nb+120>>2]-u[Nb+56>>2]);Lc=x(Lc+x(Mc*Mc));Mc=x(u[Nb+124>>2]-u[Nb+60>>2]);Lc=x(Lc+x(Mc*Mc));Mc=u[Nb+276>>2];a:{if(!!(Lc<x(Mc*Mc))){Mc=x(1);Lc=x(u[Gc+116>>2]-u[Gc+52>>2]);Nc=x(Lc*Lc);Lc=x(u[Gc+120>>2]-u[Gc+56>>2]);Nc=x(Nc+x(Lc*Lc));Lc=x(u[Gc+124>>2]-u[Gc+60>>2]);Nc=x(Nc+x(Lc*Lc));Lc=u[Gc+276>>2];if(Nc<x(Lc*Lc)){break a}}Mc=x(1);if(r[24168]){break a}Hc=q[Nb+192>>2];Kc=q[Gc+272>>2];Aa(a+552|0);q[a+580>>2]=0;q[a+584>>2]=0;q[a+576>>2]=1065353216;q[a+588>>2]=0;q[a+592>>2]=0;q[a+596>>2]=0;q[a+568>>2]=1065353216;q[a+572>>2]=1065353216;q[a+556>>2]=8;q[a+552>>2]=12036;q[a+604>>2]=0;q[a+600>>2]=Kc;q[a+584>>2]=Kc;q[a+548>>2]=0;q[a+540>>2]=1566444395;q[a+544>>2]=0;q[a+376>>2]=7628;o[a+348|0]=0;q[a+324>>2]=953267991;q[a+12>>2]=a+552;q[a+8>>2]=Hc;q[a+4>>2]=a+16;q[a>>2]=7880;Oc=Nb+4|0;Pc=Nb+68|0;Qc=Gc+4|0;Kc=Gc+68|0;Mc=x(1);b:{if(!Te(a,Oc,Pc,Qc,Kc,a+376|0)){break b}Lc=u[a+540>>2];if(!!(u[Nb+268>>2]>Lc)){u[Nb+268>>2]=Lc;}if(!!(u[Gc+268>>2]>Lc)){u[Gc+268>>2]=Lc;}Mc=x(1);if(!(Lc<x(1))){break b}Mc=Lc;}Hc=q[Gc+192>>2];Rc=q[Nb+272>>2];Aa(a+552|0);q[a+580>>2]=0;q[a+584>>2]=0;q[a+576>>2]=1065353216;q[a+588>>2]=0;q[a+592>>2]=0;q[a+596>>2]=0;q[a+568>>2]=1065353216;q[a+572>>2]=1065353216;q[a+556>>2]=8;q[a+552>>2]=12036;q[a+604>>2]=0;q[a+600>>2]=Rc;q[a+584>>2]=Rc;q[a+548>>2]=0;q[a+540>>2]=1566444395;q[a+544>>2]=0;q[a+376>>2]=7628;o[a+348|0]=0;q[a+324>>2]=953267991;q[a+12>>2]=Hc;q[a+8>>2]=a+552;q[a+4>>2]=a+16;q[a>>2]=7880;c:{if(!Te(a,Oc,Pc,Qc,Kc,a+376|0)){break c}Lc=u[a+540>>2];if(!!(u[Nb+268>>2]>Lc)){u[Nb+268>>2]=Lc;}if(!!(u[Gc+268>>2]>Lc)){u[Gc+268>>2]=Lc;}if(!(Mc>Lc)){break c}Mc=Lc;}}P=a+608|0;return x(Mc)}function nA(a,Nb,Gc,Hc,Kc){a=a|0;Nb=Nb|0;Gc=Gc|0;Hc=Hc|0;Kc=Kc|0;var Sc=0,Tc=0,Uc=0,Vc=x(0),Wc=x(0),Xc=0,Yc=0,Zc=x(0),_c=x(0),$c=0,ad=0,bd=0,cd=0,dd=x(0),ed=0,fd=x(0),gd=x(0),hd=x(0),id=0,jd=0,kd=x(0),ld=x(0),md=x(0),nd=x(0),od=x(0),qd=0,rd=x(0),sd=x(0),td=x(0),ud=x(0),vd=x(0),wd=x(0),xd=x(0),yd=x(0),zd=x(0),Ad=x(0),Bd=x(0),Cd=x(0),Dd=x(0),Ed=x(0),Fd=x(0),Gd=x(0),Hd=x(0),Id=0,Jd=x(0),Kd=x(0);Sc=P-928|0;P=Sc;Tc=q[a+56>>2];if(!Tc){Tc=q[a+4>>2];Tc=n[q[q[Tc>>2]+12>>2]](Tc,q[Nb+8>>2],q[Gc+8>>2])|0;o[a+52|0]=1;q[a+56>>2]=Tc;}q[Kc+4>>2]=Tc;Uc=q[Gc+4>>2];a:{b:{bd=q[Nb+4>>2];Xc=q[bd+4>>2]+ -8|0;if(Xc>>>0>2){break b}c:{switch(Xc-1|0){case 1:Xc=q[Uc+4>>2]+ -8|0;if(Xc>>>0>2){break b}d:{switch(Xc-1|0){case 1:Hc=bd+32|0;a=q[bd+56>>2];Vc=u[Hc+(a<<2)>>2];_c=u[Hc+((a+2|0)%3<<2)>>2];Hc=q[Uc+56>>2];Uc=Uc+32|0;Wc=u[Tc+848>>2];Vc=Ne(Sc+432|0,Sc+8|0,Vc,_c,u[(Hc<<2)+Uc>>2],u[Uc+((Hc+2|0)%3<<2)>>2],a,Hc,q[Nb+12>>2],q[Gc+12>>2],Wc);if(!!(Vc<Wc)){n[q[q[Kc>>2]+16>>2]](Kc,Sc+432|0,Sc+8|0,Vc);}a=q[Kc+4>>2];if(!q[a+844>>2]){break a}Nb=q[a+836>>2];Gc=q[q[Kc+8>>2]+8>>2];if((Nb|0)!=(Gc|0)){ba(a,q[q[Kc+12>>2]+8>>2]+4|0,Gc+4|0);break a}ba(a,Nb+4|0,q[q[Kc+12>>2]+8>>2]+4|0);break a;case 0:break b;default:break d}}Hc=bd+32|0;a=q[bd+56>>2];Wc=u[Tc+848>>2];Vc=Ne(Sc+432|0,Sc+8|0,u[Hc+(a<<2)>>2],u[Hc+((a+2|0)%3<<2)>>2],x(0),x(u[Uc+32>>2]*u[Uc+16>>2]),a,1,q[Nb+12>>2],q[Gc+12>>2],Wc);if(!!(Vc<Wc)){n[q[q[Kc>>2]+16>>2]](Kc,Sc+432|0,Sc+8|0,Vc);}a=q[Kc+4>>2];if(!q[a+844>>2]){break a}Nb=q[a+836>>2];Gc=q[q[Kc+8>>2]+8>>2];if((Nb|0)!=(Gc|0)){ba(a,q[q[Kc+12>>2]+8>>2]+4|0,Gc+4|0);break a}ba(a,Nb+4|0,q[q[Kc+12>>2]+8>>2]+4|0);break a;case 0:break b;default:break c}}if(q[Uc+4>>2]!=10){break b}Hc=Uc+32|0;a=q[Uc+56>>2];Wc=u[Tc+848>>2];Vc=Ne(Sc+432|0,Sc+8|0,x(0),x(u[bd+32>>2]*u[bd+16>>2]),u[Hc+(a<<2)>>2],u[Hc+((a+2|0)%3<<2)>>2],1,a,q[Nb+12>>2],q[Gc+12>>2],Wc);if(!!(Vc<Wc)){n[q[q[Kc>>2]+16>>2]](Kc,Sc+432|0,Sc+8|0,Vc);}a=q[Kc+4>>2];if(!q[a+844>>2]){break a}Nb=q[a+836>>2];Gc=q[q[Kc+8>>2]+8>>2];if((Nb|0)!=(Gc|0)){ba(a,q[q[Kc+12>>2]+8>>2]+4|0,Gc+4|0);break a}ba(a,Nb+4|0,q[q[Kc+12>>2]+8>>2]+4|0);break a}q[Sc+920>>2]=1566444395;o[Sc+764|0]=0;q[Sc+740>>2]=953267991;id=pd(Sc+352|0,bd,Uc,Sc+432|0,q[a+8>>2]);q[id+32>>2]=Uc;q[id+28>>2]=bd;Wc=x(x(x(x(n[q[q[bd>>2]+48>>2]](bd))+x(n[q[q[Uc>>2]+48>>2]](Uc)))+u[q[a+56>>2]+848>>2])+u[Kc+32>>2]);u[Sc+920>>2]=Wc*Wc;Tc=q[Nb+12>>2];Xc=q[Tc+12>>2];q[Sc+800>>2]=q[Tc+8>>2];q[Sc+804>>2]=Xc;Xc=q[Tc+4>>2];q[Sc+792>>2]=q[Tc>>2];q[Sc+796>>2]=Xc;Xc=q[Tc+28>>2];q[Sc+816>>2]=q[Tc+24>>2];q[Sc+820>>2]=Xc;Xc=q[Tc+20>>2];q[Sc+808>>2]=q[Tc+16>>2];q[Sc+812>>2]=Xc;Xc=q[Tc+44>>2];q[Sc+832>>2]=q[Tc+40>>2];q[Sc+836>>2]=Xc;Xc=q[Tc+36>>2];q[Sc+824>>2]=q[Tc+32>>2];q[Sc+828>>2]=Xc;Xc=q[Tc+60>>2];q[Sc+848>>2]=q[Tc+56>>2];q[Sc+852>>2]=Xc;Xc=q[Tc+52>>2];q[Sc+840>>2]=q[Tc+48>>2];q[Sc+844>>2]=Xc;Tc=q[Gc+12>>2];Xc=q[Tc+12>>2];q[Sc+864>>2]=q[Tc+8>>2];q[Sc+868>>2]=Xc;Xc=q[Tc+4>>2];q[Sc+856>>2]=q[Tc>>2];q[Sc+860>>2]=Xc;$c=q[Tc+20>>2];Xc=Sc+872|0;q[Xc>>2]=q[Tc+16>>2];q[Xc+4>>2]=$c;cd=q[Tc+28>>2];q[Sc+880>>2]=q[Tc+24>>2];q[Sc+884>>2]=cd;ad=q[Tc+36>>2];cd=Sc+888|0;$c=cd;q[$c>>2]=q[Tc+32>>2];q[$c+4>>2]=ad;$c=q[Tc+44>>2];q[Sc+896>>2]=q[Tc+40>>2];q[Sc+900>>2]=$c;ed=q[Tc+52>>2];$c=Sc+904|0;q[$c>>2]=q[Tc+48>>2];q[$c+4>>2]=ed;ad=q[Tc+60>>2];q[Sc+912>>2]=q[Tc+56>>2];q[Sc+916>>2]=ad;e:{ad=q[bd+4>>2];if((ad|0)>6){break e}Tc=q[Uc+4>>2];if((Tc|0)>6){break e}q[Sc+344>>2]=10624;Wc=x(0);if(ad){Wc=x(n[q[q[bd>>2]+48>>2]](bd));Tc=q[Uc+4>>2];}if(Tc){Vc=x(n[q[q[Uc>>2]+48>>2]](Uc));}o[Sc+44|0]=0;u[Sc+36>>2]=Vc;u[Sc+32>>2]=Wc;q[Sc+12>>2]=Kc;q[Sc+8>>2]=10800;if(!q[bd+56>>2]){break e}if(q[Uc+56>>2]){Vc=u[q[a+56>>2]+848>>2];f:{g:{if(r[Hc+24|0]){Wc=x(-1.0000000150474662e+30);if(qA(q[bd+56>>2],q[Uc+56>>2],q[Nb+12>>2],q[Gc+12>>2],Sc+248|0,Kc)){break g}break f}Ma(id,Sc+792|0,Sc+8|0,q[Hc+20>>2]);Hc=q[Sc+28>>2];q[Sc+256>>2]=q[Sc+24>>2];q[Sc+260>>2]=Hc;Hc=q[Sc+20>>2];q[Sc+248>>2]=q[Sc+16>>2];q[Sc+252>>2]=Hc;Wc=u[Sc+40>>2];if(!r[Sc+44|0]|Wc<x(0)^1){break f}}Tc=q[a+16>>2];if((Tc|0)<=-1){if(q[a+20>>2]<=-1){Hc=q[a+24>>2];if(Hc){if(r[a+28|0]){if(Hc){q[6658]=q[6658]+1;n[q[5256]](Hc);}}q[a+24>>2]=0;}q[a+20>>2]=0;q[a+24>>2]=0;o[a+28|0]=1;}while(1){id=q[Sc+332>>2];Hc=q[a+24>>2]+(Tc<<4)|0;Xc=Hc;q[Xc>>2]=q[Sc+328>>2];q[Xc+4>>2]=id;Xc=q[Sc+340>>2];q[Hc+8>>2]=q[Sc+336>>2];q[Hc+12>>2]=Xc;Hc=Tc+1|0;Xc=Hc>>>0>=Tc>>>0;Tc=Hc;if(Xc){continue}break}}q[a+16>>2]=0;pA(Sc+248|0,q[bd+56>>2],q[Uc+56>>2],q[Nb+12>>2],q[Gc+12>>2],x(Wc-Vc),Vc,a+12|0,a+32|0,Kc);}if(!r[a+52|0]){break a}a=q[Kc+4>>2];if(!q[a+844>>2]){break a}Nb=q[a+836>>2];Gc=q[q[Kc+8>>2]+8>>2];if((Nb|0)!=(Gc|0)){ba(a,q[q[Kc+12>>2]+8>>2]+4|0,Gc+4|0);break a}ba(a,Nb+4|0,q[q[Kc+12>>2]+8>>2]+4|0);break a}if(q[Uc+4>>2]!=1){break e}Tc=0;q[Sc+260>>2]=0;q[Sc+252>>2]=0;q[Sc+256>>2]=0;o[Sc+264|0]=1;Wc=u[Uc+60>>2];Xc=q[Gc+12>>2];Vc=u[Uc- -64>>2];Zc=u[Uc+68>>2];_c=x(x(x(Wc*u[Xc+32>>2])+x(Vc*u[Xc+36>>2]))+x(Zc*u[Xc+40>>2]));fd=u[Xc+56>>2];nd=x(x(x(Wc*u[Xc+16>>2])+x(Vc*u[Xc+20>>2]))+x(Zc*u[Xc+24>>2]));od=u[Xc+52>>2];Wc=x(x(x(Wc*u[Xc>>2])+x(Vc*u[Xc+4>>2]))+x(Zc*u[Xc+8>>2]));Vc=u[Xc+48>>2];q[6657]=q[6657]+1;Xc=n[q[5255]](16,16)|0;ad=q[Sc+252>>2];if((ad|0)>=1){while(1){cd=Tc<<4;$c=cd+Xc|0;cd=cd+q[Sc+260>>2]|0;jd=q[cd+4>>2];q[$c>>2]=q[cd>>2];q[$c+4>>2]=jd;ed=q[cd+12>>2];q[$c+8>>2]=q[cd+8>>2];q[$c+12>>2]=ed;Tc=Tc+1|0;if((ad|0)!=(Tc|0)){continue}break}}Tc=q[Sc+260>>2];if(Tc){if(r[Sc+264|0]){if(Tc){q[6658]=q[6658]+1;n[q[5256]](Tc);}}q[Sc+260>>2]=0;}o[Sc+264|0]=1;q[Sc+256>>2]=1;Tc=q[Sc+252>>2];q[Sc+260>>2]=Xc;Tc=Xc+(Tc<<4)|0;q[Tc+12>>2]=0;u[Tc+8>>2]=_c+fd;u[Tc+4>>2]=nd+od;u[Tc>>2]=Wc+Vc;Xc=q[Sc+252>>2]+1|0;q[Sc+252>>2]=Xc;Wc=u[Uc+76>>2];Tc=q[Gc+12>>2];Vc=u[Uc+80>>2];Zc=u[Uc+84>>2];_c=x(x(x(x(Wc*u[Tc>>2])+x(Vc*u[Tc+4>>2]))+x(Zc*u[Tc+8>>2]))+u[Tc+48>>2]);fd=x(x(x(x(Wc*u[Tc+32>>2])+x(Vc*u[Tc+36>>2]))+x(Zc*u[Tc+40>>2]))+u[Tc+56>>2]);Wc=x(x(x(x(Wc*u[Tc+16>>2])+x(Vc*u[Tc+20>>2]))+x(Zc*u[Tc+24>>2]))+u[Tc+52>>2]);h:{if(q[Sc+256>>2]!=(Xc|0)){break h}$c=Xc?Xc<<1:1;if((Xc|0)>=($c|0)){break h}Tc=0;cd=0;if($c){q[6657]=q[6657]+1;cd=n[q[5255]]($c<<4,16)|0;Xc=q[Sc+252>>2];}if((Xc|0)>=1){while(1){ad=Tc<<4;ed=ad+cd|0;ad=ad+q[Sc+260>>2]|0;qd=q[ad+4>>2];q[ed>>2]=q[ad>>2];q[ed+4>>2]=qd;jd=q[ad+12>>2];q[ed+8>>2]=q[ad+8>>2];q[ed+12>>2]=jd;Tc=Tc+1|0;if((Xc|0)!=(Tc|0)){continue}break}}Tc=q[Sc+260>>2];if(Tc){if(r[Sc+264|0]){if(Tc){q[6658]=q[6658]+1;n[q[5256]](Tc);}}q[Sc+260>>2]=0;}q[Sc+260>>2]=cd;o[Sc+264|0]=1;q[Sc+256>>2]=$c;Xc=q[Sc+252>>2];}Tc=q[Sc+260>>2]+(Xc<<4)|0;q[Tc+12>>2]=0;u[Tc+8>>2]=fd;u[Tc+4>>2]=Wc;u[Tc>>2]=_c;Xc=q[Sc+252>>2]+1|0;q[Sc+252>>2]=Xc;Wc=u[Uc+92>>2];Gc=q[Gc+12>>2];Vc=u[Uc+96>>2];Zc=u[Uc+100>>2];_c=x(x(x(x(Wc*u[Gc>>2])+x(Vc*u[Gc+4>>2]))+x(Zc*u[Gc+8>>2]))+u[Gc+48>>2]);fd=x(x(x(x(Wc*u[Gc+32>>2])+x(Vc*u[Gc+36>>2]))+x(Zc*u[Gc+40>>2]))+u[Gc+56>>2]);Wc=x(x(x(x(Wc*u[Gc+16>>2])+x(Vc*u[Gc+20>>2]))+x(Zc*u[Gc+24>>2]))+u[Gc+52>>2]);i:{if(q[Sc+256>>2]!=(Xc|0)){break i}Gc=Xc?Xc<<1:1;if((Xc|0)>=(Gc|0)){break i}Tc=0;cd=0;if(Gc){q[6657]=q[6657]+1;cd=n[q[5255]](Gc<<4,16)|0;Xc=q[Sc+252>>2];}if((Xc|0)>=1){while(1){$c=Tc<<4;ad=$c+cd|0;$c=$c+q[Sc+260>>2]|0;jd=q[$c+4>>2];q[ad>>2]=q[$c>>2];q[ad+4>>2]=jd;ed=q[$c+12>>2];q[ad+8>>2]=q[$c+8>>2];q[ad+12>>2]=ed;Tc=Tc+1|0;if((Xc|0)!=(Tc|0)){continue}break}}Tc=q[Sc+260>>2];if(Tc){if(r[Sc+264|0]){if(Tc){q[6658]=q[6658]+1;n[q[5256]](Tc);}}q[Sc+260>>2]=0;}q[Sc+260>>2]=cd;o[Sc+264|0]=1;q[Sc+256>>2]=Gc;Xc=q[Sc+252>>2];}Gc=q[Sc+260>>2]+(Xc<<4)|0;q[Gc+12>>2]=0;u[Gc+8>>2]=fd;u[Gc+4>>2]=Wc;u[Gc>>2]=_c;q[Sc+252>>2]=q[Sc+252>>2]+1;Wc=u[q[a+56>>2]+848>>2];Ma(id,Sc+792|0,Sc+344|0,q[Hc+20>>2]);Vc=u[id+4>>2];Zc=u[id+8>>2];_c=u[id+12>>2];fd=x(x(x(Vc*Vc)+x(Zc*Zc))+x(_c*_c));if(!!(fd>x(1.1920928955078125e-7))){q[Sc+340>>2]=0;dd=_c;_c=x(x(1)/fd);u[Sc+336>>2]=dd*_c;u[Sc+332>>2]=Zc*_c;u[Sc+328>>2]=Vc*_c;Vc=x(x(u[id+56>>2]-x(n[q[q[bd>>2]+48>>2]](bd)))-x(n[q[q[Uc>>2]+48>>2]](Uc)));Tc=q[a+36>>2];if((Tc|0)<=-1){if(q[a+40>>2]<=-1){Gc=q[a+44>>2];if(Gc){if(r[a+48|0]){if(Gc){q[6658]=q[6658]+1;n[q[5256]](Gc);}}q[a+44>>2]=0;}q[a+40>>2]=0;q[a+44>>2]=0;o[a+48|0]=1;}while(1){Uc=q[Sc+316>>2];Gc=q[a+44>>2]+(Tc<<4)|0;q[Gc>>2]=q[Sc+312>>2];q[Gc+4>>2]=Uc;Hc=q[Sc+324>>2];q[Gc+8>>2]=q[Sc+320>>2];q[Gc+12>>2]=Hc;Gc=Tc+1|0;Hc=Gc>>>0>=Tc>>>0;Tc=Gc;if(Hc){continue}break}}q[a+36>>2]=0;zi(Sc+328|0,q[bd+56>>2],q[Nb+12>>2],Sc+248|0,a+32|0,x(Vc-Wc),Wc,Kc);}j:{if(!r[a+52|0]){break j}a=q[Kc+4>>2];if(!q[a+844>>2]){break j}Nb=q[a+836>>2];Gc=q[q[Kc+8>>2]+8>>2];if((Nb|0)!=(Gc|0)){ba(a,q[q[Kc+12>>2]+8>>2]+4|0,Gc+4|0);break j}ba(a,Nb+4|0,q[q[Kc+12>>2]+8>>2]+4|0);}a=q[Sc+260>>2];if(!a){break a}if(r[Sc+264|0]){if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}q[Sc+260>>2]=0;break a}Ma(id,Sc+792|0,Kc,q[Hc+20>>2]);k:{if(!q[a+64>>2]|q[q[Kc+4>>2]+844>>2]>=q[a+68>>2]){break k}Wc=u[id+4>>2];Vc=u[id+8>>2];Zc=u[id+12>>2];_c=x(x(x(Wc*Wc)+x(Vc*Vc))+x(Zc*Zc));if(!(_c>x(1.1920928955078125e-7))){break k}ad=Sc+856|0;ed=Sc+840|0;jd=Sc+824|0;qd=Sc+808|0;dd=Vc;Vc=x(x(1)/_c);fd=x(dd*Vc);Fd=x(Wc*Vc);vd=x(Zc*Vc);l:{if(!!(x(y(vd))>x(.7071067690849304))){Wc=x(x(1)/x(E(x(x(vd*vd)+x(fd*fd)))));Vc=x(fd*Wc);Wc=x(Wc*x(-vd));Zc=x(0);break l}Vc=x(x(1)/x(E(x(x(Fd*Fd)+x(fd*fd)))));Wc=x(Fd*Vc);Zc=x(Vc*x(-fd));Vc=x(0);}_c=x(n[q[q[bd>>2]+16>>2]](bd));nd=x(n[q[q[Uc>>2]+16>>2]](Uc));od=u[5249];bd=_c<nd;Tc=bd?Sc+792|0:ad;Uc=q[Tc+12>>2];q[Sc+256>>2]=q[Tc+8>>2];q[Sc+260>>2]=Uc;Uc=q[Tc+4>>2];q[Sc+248>>2]=q[Tc>>2];q[Sc+252>>2]=Uc;Tc=bd?qd:Xc;Uc=q[Tc+12>>2];q[Sc+272>>2]=q[Tc+8>>2];q[Sc+276>>2]=Uc;Uc=q[Tc+4>>2];q[Sc+264>>2]=q[Tc>>2];q[Sc+268>>2]=Uc;Tc=bd?jd:cd;Uc=q[Tc+12>>2];q[Sc+288>>2]=q[Tc+8>>2];q[Sc+292>>2]=Uc;Uc=q[Tc+4>>2];q[Sc+280>>2]=q[Tc>>2];q[Sc+284>>2]=Uc;Tc=bd?ed:$c;Uc=q[Tc+12>>2];q[Sc+304>>2]=q[Tc+8>>2];q[Sc+308>>2]=Uc;Uc=q[Tc+4>>2];q[Sc+296>>2]=q[Tc>>2];q[Sc+300>>2]=Uc;Uc=q[a+64>>2];if((Uc|0)<1){break k}dd=Vc;_c=x(x(A(x(od/(bd?_c:nd)),x(.39269909262657166)))*x(.5));Jd=x(x(x(Zc*Zc)+x(Wc*Wc))+x(Vc*Vc));Vc=x(ga(_c)/x(E(Jd)));nd=x(dd*Vc);od=x(Wc*Vc);td=x(Zc*Vc);ud=fa(_c);Kd=x(E(x(x(vd*vd)+x(x(Fd*Fd)+x(fd*fd)))));Id=Sc- -64|0;Tc=0;while(1){if(!!(Jd>x(1.1920928955078125e-7))){_c=x(x(x(x(6.2831854820251465)/x(Uc|0))*x(Tc|0))*x(.5));Zc=x(ga(_c)/Kd);Wc=x(vd*Zc);Vc=x(fd*Zc);Zc=x(Fd*Zc);_c=fa(_c);m:{if(!!bd){Uc=q[Nb+12>>2];wd=u[Uc+36>>2];xd=u[Uc+20>>2];yd=u[Uc+40>>2];zd=u[Uc+24>>2];Ad=u[Uc+32>>2];Bd=u[Uc>>2];Cd=u[Uc+16>>2];Dd=u[Uc+4>>2];Ed=u[Uc+8>>2];q[Sc+836>>2]=0;q[Sc+820>>2]=0;q[Sc+804>>2]=0;gd=x(x(nd*Zc)+x(x(x(od*_c)-x(ud*Vc))-x(td*Wc)));kd=x(x(nd*Wc)+x(x(od*Vc)+x(x(ud*_c)+x(td*Zc))));ld=x(x(od*Wc)+x(x(x(td*_c)-x(ud*Zc))-x(nd*Vc)));md=x(x(td*Vc)+x(x(x(nd*_c)-x(ud*Wc))-x(od*Zc)));dd=x(x(x(Wc*gd)+x(x(Zc*kd)+x(_c*ld)))-x(Vc*md));hd=x(x(x(x(_c*kd)-x(Zc*ld))-x(Vc*gd))-x(Wc*md));sd=x(x(x(Vc*ld)+x(x(Wc*kd)+x(_c*md)))-x(Zc*gd));Wc=x(x(x(Zc*md)+x(x(_c*gd)+x(Vc*kd)))-x(Wc*ld));Vc=x(x(2)/x(x(hd*hd)+x(x(sd*sd)+x(x(dd*dd)+x(Wc*Wc)))));Zc=x(sd*Vc);kd=x(dd*Zc);_c=x(Wc*Vc);ld=x(hd*_c);gd=x(kd-ld);md=x(Wc*Zc);rd=x(dd*Vc);Gd=x(hd*rd);Vc=x(md+Gd);rd=x(dd*rd);Hd=x(Wc*_c);Wc=x(x(1)-x(rd+Hd));u[Sc+832>>2]=x(x(Ed*gd)+x(zd*Vc))+x(yd*Wc);u[Sc+828>>2]=x(x(gd*Dd)+x(Vc*xd))+x(Wc*wd);u[Sc+824>>2]=x(x(gd*Bd)+x(Vc*Cd))+x(Wc*Ad);_c=x(dd*_c);dd=x(hd*Zc);Wc=x(_c+dd);hd=x(sd*Zc);Vc=x(x(1)-x(rd+hd));Zc=x(md-Gd);u[Sc+816>>2]=x(x(Ed*Wc)+x(zd*Vc))+x(yd*Zc);u[Sc+812>>2]=x(x(Wc*Dd)+x(Vc*xd))+x(Zc*wd);u[Sc+808>>2]=x(x(Wc*Bd)+x(Vc*Cd))+x(Zc*Ad);Wc=x(x(1)-x(Hd+hd));Vc=x(_c-dd);Zc=x(kd+ld);u[Sc+800>>2]=x(x(Ed*Wc)+x(zd*Vc))+x(yd*Zc);u[Sc+796>>2]=x(x(Wc*Dd)+x(Vc*xd))+x(Zc*wd);u[Sc+792>>2]=x(x(Wc*Bd)+x(Vc*Cd))+x(Zc*Ad);Uc=q[Gc+12>>2];Yc=q[Uc+4>>2];q[ad>>2]=q[Uc>>2];q[ad+4>>2]=Yc;Yc=q[Uc+12>>2];q[ad+8>>2]=q[Uc+8>>2];q[ad+12>>2]=Yc;Yc=q[Uc+28>>2];q[Xc+8>>2]=q[Uc+24>>2];q[Xc+12>>2]=Yc;Yc=q[Uc+20>>2];q[Xc>>2]=q[Uc+16>>2];q[Xc+4>>2]=Yc;Yc=q[Uc+44>>2];q[cd+8>>2]=q[Uc+40>>2];q[cd+12>>2]=Yc;Yc=q[Uc+36>>2];q[cd>>2]=q[Uc+32>>2];q[cd+4>>2]=Yc;Yc=q[Uc+60>>2];q[$c+8>>2]=q[Uc+56>>2];q[$c+12>>2]=Yc;Yc=q[Uc+52>>2];q[$c>>2]=q[Uc+48>>2];q[$c+4>>2]=Yc;break m}Uc=q[Nb+12>>2];Yc=q[Uc+12>>2];q[Sc+800>>2]=q[Uc+8>>2];q[Sc+804>>2]=Yc;Yc=q[Uc+4>>2];q[Sc+792>>2]=q[Uc>>2];q[Sc+796>>2]=Yc;Yc=q[Uc+28>>2];q[qd+8>>2]=q[Uc+24>>2];q[qd+12>>2]=Yc;Yc=q[Uc+20>>2];q[qd>>2]=q[Uc+16>>2];q[qd+4>>2]=Yc;Yc=q[Uc+44>>2];q[jd+8>>2]=q[Uc+40>>2];q[jd+12>>2]=Yc;Yc=q[Uc+36>>2];q[jd>>2]=q[Uc+32>>2];q[jd+4>>2]=Yc;Yc=q[Uc+60>>2];q[ed+8>>2]=q[Uc+56>>2];q[ed+12>>2]=Yc;Yc=q[Uc+52>>2];q[ed>>2]=q[Uc+48>>2];q[ed+4>>2]=Yc;Uc=q[Gc+12>>2];wd=u[Uc+36>>2];xd=u[Uc+20>>2];yd=u[Uc+40>>2];zd=u[Uc+24>>2];Ad=u[Uc+32>>2];Bd=u[Uc>>2];Cd=u[Uc+16>>2];Dd=u[Uc+4>>2];Ed=u[Uc+8>>2];q[Sc+900>>2]=0;q[Sc+884>>2]=0;q[Sc+868>>2]=0;gd=x(x(nd*Zc)+x(x(x(od*_c)-x(ud*Vc))-x(td*Wc)));kd=x(x(nd*Wc)+x(x(od*Vc)+x(x(ud*_c)+x(td*Zc))));ld=x(x(od*Wc)+x(x(x(td*_c)-x(ud*Zc))-x(nd*Vc)));md=x(x(td*Vc)+x(x(x(nd*_c)-x(ud*Wc))-x(od*Zc)));dd=x(x(x(Wc*gd)+x(x(Zc*kd)+x(_c*ld)))-x(Vc*md));hd=x(x(x(x(_c*kd)-x(Zc*ld))-x(Vc*gd))-x(Wc*md));sd=x(x(x(Vc*ld)+x(x(Wc*kd)+x(_c*md)))-x(Zc*gd));Wc=x(x(x(Zc*md)+x(x(_c*gd)+x(Vc*kd)))-x(Wc*ld));Vc=x(x(2)/x(x(hd*hd)+x(x(sd*sd)+x(x(dd*dd)+x(Wc*Wc)))));Zc=x(sd*Vc);kd=x(dd*Zc);_c=x(Wc*Vc);ld=x(hd*_c);gd=x(kd-ld);md=x(Wc*Zc);rd=x(dd*Vc);Gd=x(hd*rd);Vc=x(md+Gd);rd=x(dd*rd);Hd=x(Wc*_c);Wc=x(x(1)-x(rd+Hd));u[Sc+896>>2]=x(x(Ed*gd)+x(zd*Vc))+x(yd*Wc);u[Sc+892>>2]=x(x(gd*Dd)+x(Vc*xd))+x(Wc*wd);u[Sc+888>>2]=x(x(gd*Bd)+x(Vc*Cd))+x(Wc*Ad);_c=x(dd*_c);dd=x(hd*Zc);Wc=x(_c+dd);hd=x(sd*Zc);Vc=x(x(1)-x(rd+hd));Zc=x(md-Gd);u[Sc+880>>2]=x(x(Ed*Wc)+x(zd*Vc))+x(yd*Zc);u[Sc+876>>2]=x(x(Wc*Dd)+x(Vc*xd))+x(Zc*wd);u[Sc+872>>2]=x(x(Wc*Bd)+x(Vc*Cd))+x(Zc*Ad);Wc=x(x(1)-x(Hd+hd));Vc=x(_c-dd);Zc=x(kd+ld);u[Sc+864>>2]=x(x(Ed*Wc)+x(zd*Vc))+x(yd*Zc);u[Sc+860>>2]=x(x(Wc*Dd)+x(Vc*xd))+x(Zc*wd);u[Sc+856>>2]=x(x(Wc*Bd)+x(Vc*Cd))+x(Zc*Ad);}Uc=q[Hc+20>>2];q[Sc+44>>2]=Kc;q[Sc+8>>2]=10984;q[Sc+40>>2]=0;Yc=q[Sc+804>>2];q[Sc+56>>2]=q[Sc+800>>2];q[Sc+60>>2]=Yc;Yc=q[Sc+796>>2];q[Sc+48>>2]=q[Sc+792>>2];q[Sc+52>>2]=Yc;Yc=q[qd+12>>2];q[Id+8>>2]=q[qd+8>>2];q[Id+12>>2]=Yc;Yc=q[qd+4>>2];q[Id>>2]=q[qd>>2];q[Id+4>>2]=Yc;Yc=q[jd+12>>2];q[Sc+88>>2]=q[jd+8>>2];q[Sc+92>>2]=Yc;Yc=q[jd+4>>2];q[Sc+80>>2]=q[jd>>2];q[Sc+84>>2]=Yc;Yc=q[ed+12>>2];q[Sc+104>>2]=q[ed+8>>2];q[Sc+108>>2]=Yc;Yc=q[ed+4>>2];q[Sc+96>>2]=q[ed>>2];q[Sc+100>>2]=Yc;Yc=q[ad+12>>2];q[Sc+120>>2]=q[ad+8>>2];q[Sc+124>>2]=Yc;Yc=q[ad+4>>2];q[Sc+112>>2]=q[ad>>2];q[Sc+116>>2]=Yc;Yc=q[Xc+12>>2];q[Sc+136>>2]=q[Xc+8>>2];q[Sc+140>>2]=Yc;Yc=q[Xc+4>>2];q[Sc+128>>2]=q[Xc>>2];q[Sc+132>>2]=Yc;Yc=q[cd+12>>2];q[Sc+152>>2]=q[cd+8>>2];q[Sc+156>>2]=Yc;Yc=q[cd+4>>2];q[Sc+144>>2]=q[cd>>2];q[Sc+148>>2]=Yc;Yc=q[$c+12>>2];q[Sc+168>>2]=q[$c+8>>2];q[Sc+172>>2]=Yc;Yc=q[$c+4>>2];q[Sc+160>>2]=q[$c>>2];q[Sc+164>>2]=Yc;Yc=q[Sc+260>>2];q[Sc+184>>2]=q[Sc+256>>2];q[Sc+188>>2]=Yc;Yc=q[Sc+252>>2];q[Sc+176>>2]=q[Sc+248>>2];q[Sc+180>>2]=Yc;Yc=q[Sc+276>>2];q[Sc+200>>2]=q[Sc+272>>2];q[Sc+204>>2]=Yc;Yc=q[Sc+268>>2];q[Sc+192>>2]=q[Sc+264>>2];q[Sc+196>>2]=Yc;Yc=q[Sc+292>>2];q[Sc+216>>2]=q[Sc+288>>2];q[Sc+220>>2]=Yc;Yc=q[Sc+284>>2];q[Sc+208>>2]=q[Sc+280>>2];q[Sc+212>>2]=Yc;Yc=q[Sc+300>>2];q[Sc+224>>2]=q[Sc+296>>2];q[Sc+228>>2]=Yc;Yc=q[Sc+308>>2];q[Sc+232>>2]=q[Sc+304>>2];q[Sc+236>>2]=Yc;q[Sc+244>>2]=Uc;o[Sc+240|0]=bd;Ma(id,Sc+792|0,Sc+8|0,Uc);Uc=q[a+64>>2];}Tc=Tc+1|0;if((Tc|0)<(Uc|0)){continue}break}}if(!r[a+52|0]){break a}a=q[Kc+4>>2];if(!q[a+844>>2]){break a}Nb=q[a+836>>2];Gc=q[q[Kc+8>>2]+8>>2];if((Nb|0)!=(Gc|0)){ba(a,q[q[Kc+12>>2]+8>>2]+4|0,Gc+4|0);break a}ba(a,Nb+4|0,q[q[Kc+12>>2]+8>>2]+4|0);}P=Sc+928|0;}function oA(a){a=a|0;aa(yi(a));}function pA(a,Nb,Gc,Hc,Kc,pd,Ld,Md,Nd,Od){var Pd=0,Qd=x(0),Rd=x(0),Sd=0,Td=0,Ud=x(0),Vd=x(0),Wd=0,Xd=0,Yd=0,Zd=x(0),_d=0,$d=0,ae=0,be=x(0),ce=x(0),de=0,ee=0,fe=x(0),ge=x(0),he=x(0),ie=x(0),je=x(0),ke=x(0),le=x(0),me=x(0),ne=x(0);Td=P-32|0;P=Td;Qd=u[a+8>>2];Rd=u[a>>2];Ud=u[a+4>>2];q[Td+28>>2]=q[a+12>>2];Vd=Qd;Qd=x(x(1)/x(E(x(x(x(Rd*Rd)+x(Ud*Ud))+x(Qd*Qd)))));Zd=x(Vd*Qd);u[Td+24>>2]=Zd;be=x(Ud*Qd);u[Td+20>>2]=be;ce=x(Rd*Qd);u[Td+16>>2]=ce;_d=-1;Sd=q[Gc+28>>2];if((Sd|0)>=1){fe=u[Kc+40>>2];ge=u[Kc+36>>2];he=u[Kc+24>>2];ie=u[Kc+20>>2];Xd=q[Gc+36>>2];je=u[Kc+32>>2];ke=u[Kc+16>>2];le=u[Kc+8>>2];me=u[Kc+4>>2];ne=u[Kc>>2];a=0;Qd=x(-3.4028234663852886e+38);while(1){Pd=Xd+w(a,36)|0;Rd=u[Pd+20>>2];Ud=u[Pd+24>>2];Vd=u[Pd+28>>2];Rd=x(x(x(ce*x(x(x(Rd*ne)+x(Ud*me))+x(Vd*le)))+x(be*x(x(x(Rd*ke)+x(Ud*ie))+x(Vd*he))))+x(Zd*x(x(x(Rd*je)+x(Ud*ge))+x(Vd*fe))));Pd=Rd>Qd;Qd=Pd?Rd:Qd;_d=Pd?a:_d;a=a+1|0;if((a|0)<(Sd|0)){continue}break}}a=q[Md+4>>2];if((a|0)<=-1){if(q[Md+8>>2]<=-1){Pd=q[Md+12>>2];if(Pd){if(r[Md+16|0]){if(Pd){q[6658]=q[6658]+1;n[q[5256]](Pd);}}q[Md+12>>2]=0;}o[Md+16|0]=1;q[Md+8>>2]=0;q[Md+12>>2]=0;}while(1){Sd=q[Td+4>>2];Pd=q[Md+12>>2]+(a<<4)|0;q[Pd>>2]=q[Td>>2];q[Pd+4>>2]=Sd;Sd=q[Td+12>>2];q[Pd+8>>2]=q[Td+8>>2];q[Pd+12>>2]=Sd;Pd=a+1|0;Sd=Pd>>>0>=a>>>0;a=Pd;if(Sd){continue}break}}q[Md+4>>2]=0;de=q[Gc+36>>2]+w(_d,36)|0;ee=q[de+4>>2];if((ee|0)>=1){Pd=0;Sd=0;while(1){a=q[Gc+16>>2]+(q[q[de+12>>2]+(Sd<<2)>>2]<<4)|0;Qd=u[a>>2];Rd=u[a+4>>2];Ud=u[a+8>>2];Vd=x(x(x(x(Qd*u[Kc+32>>2])+x(Rd*u[Kc+36>>2]))+x(Ud*u[Kc+40>>2]))+u[Kc+56>>2]);Zd=x(x(x(x(Qd*u[Kc+16>>2])+x(Rd*u[Kc+20>>2]))+x(Ud*u[Kc+24>>2]))+u[Kc+52>>2]);Qd=x(x(x(x(Qd*u[Kc>>2])+x(Rd*u[Kc+4>>2]))+x(Ud*u[Kc+8>>2]))+u[Kc+48>>2]);a:{if(q[Md+8>>2]!=(Pd|0)){break a}Xd=Pd?Pd<<1:1;if((Pd|0)>=(Xd|0)){break a}a=0;$d=0;if(Xd){q[6657]=q[6657]+1;$d=n[q[5255]](Xd<<4,16)|0;Pd=q[Md+4>>2];}if((Pd|0)>=1){while(1){Wd=a<<4;Yd=Wd+$d|0;Wd=Wd+q[Md+12>>2]|0;ae=q[Wd+4>>2];q[Yd>>2]=q[Wd>>2];q[Yd+4>>2]=ae;ae=q[Wd+12>>2];q[Yd+8>>2]=q[Wd+8>>2];q[Yd+12>>2]=ae;a=a+1|0;if((Pd|0)!=(a|0)){continue}break}}a=q[Md+12>>2];if(a){if(r[Md+16|0]){if(a){q[6658]=q[6658]+1;n[q[5256]](a);}}q[Md+12>>2]=0;}q[Md+12>>2]=$d;o[Md+16|0]=1;q[Md+8>>2]=Xd;Pd=q[Md+4>>2];}a=q[Md+12>>2]+(Pd<<4)|0;q[a+12>>2]=0;u[a+8>>2]=Vd;u[a+4>>2]=Zd;u[a>>2]=Qd;Pd=q[Md+4>>2]+1|0;q[Md+4>>2]=Pd;Sd=Sd+1|0;if((ee|0)!=(Sd|0)){continue}break}}if((_d|0)>-1){zi(Td+16|0,Nb,Hc,Md,Nd,pd,Ld,Od);}P=Td+32|0;}function qA(a,Nb,Gc,Hc,Kc,pd){var Ld=0,Md=x(0),Nd=x(0),Od=x(0),oe=x(0),pe=x(0),qe=x(0),re=x(0),se=x(0),te=0,ue=x(0),ve=0,we=x(0),xe=x(0),ye=0,ze=x(0),Ae=x(0),Be=x(0),Ce=x(0),De=x(0),Ee=x(0),Fe=x(0),Ge=0,He=x(0),Ie=x(0),Je=x(0),Ke=x(0),Le=x(0),Me=x(0),Ne=x(0),Pe=x(0),Qe=x(0),Re=x(0),Se=x(0),Te=x(0),Ue=x(0),Ve=0,We=x(0),Xe=x(0),Ye=x(0),Ze=x(0),_e=x(0),$e=x(0),af=x(0);Ld=P-112|0;P=Ld;q[6041]=q[6041]+1;Ie=u[Gc+52>>2];Od=u[Gc+20>>2];se=u[Gc+24>>2];Je=u[Hc+52>>2];ue=u[Hc+20>>2];we=u[Hc+24>>2];Ke=u[Gc+56>>2];Nd=u[Gc+36>>2];Md=u[a+68>>2];qe=u[Gc+40>>2];xe=u[a+72>>2];Ce=u[Hc+56>>2];oe=u[Hc+36>>2];De=u[Nb+68>>2];re=u[Hc+40>>2];Ee=u[Nb+72>>2];Le=u[Gc+48>>2];Fe=u[Gc+8>>2];Me=u[Gc>>2];Ne=u[Gc+4>>2];Te=u[Hc+48>>2];Ue=u[Hc+8>>2];Pe=u[Hc>>2];Qe=u[Hc+4>>2];ze=u[Gc+16>>2];Re=u[Hc+16>>2];Ae=u[Gc+32>>2];Be=u[a+64>>2];Se=u[Hc+32>>2];pe=u[Nb+64>>2];q[Ld+28>>2]=0;Ke=x(x(Ke+x(x(x(Be*Ae)+x(Md*Nd))+x(xe*qe)))-x(Ce+x(x(x(pe*Se)+x(De*oe))+x(Ee*re))));u[Ld+24>>2]=Ke;Ie=x(x(Ie+x(x(x(Be*ze)+x(Md*Od))+x(xe*se)))-x(Je+x(x(x(pe*Re)+x(De*ue))+x(Ee*we))));u[Ld+20>>2]=Ie;Je=x(x(Le+x(x(x(Be*Me)+x(Md*Ne))+x(xe*Fe)))-x(Te+x(x(x(pe*Pe)+x(De*Qe))+x(Ee*Ue))));u[Ld+16>>2]=Je;Md=x(3.4028234663852886e+38);a:{b:{c:{d:{e:{f:{Ge=q[a+28>>2];if((Ge|0)<1){break f}while(1){ve=q[a+36>>2]+w(te,36)|0;xe=u[ve+28>>2];De=u[ve+24>>2];Ee=u[ve+20>>2];Be=u[Gc>>2];pe=u[Gc+4>>2];q[Ld+12>>2]=0;Nd=x(x(x(Ee*Ae)+x(De*Nd))+x(xe*qe));u[Ld+8>>2]=Nd;Od=x(x(x(Ee*ze)+x(De*Od))+x(xe*se));u[Ld+4>>2]=Od;se=x(x(x(Ee*Be)+x(De*pe))+x(xe*Fe));u[Ld>>2]=se;if(!!(x(x(x(se*Je)+x(Od*Ie))+x(Nd*Ke))<x(0))){u[Ld+8>>2]=-Nd;u[Ld+4>>2]=-Od;u[Ld>>2]=-se;}q[6039]=q[6039]+1;g:{if(r[21008]){if(!Oe(Gc,Hc,Ld+16|0,Ld,a,Nb,Md)){break g}}ye=0;q[6040]=q[6040]+1;Gb(a,Gc,Ld,Ld+108|0,Ld+104|0,Ld+80|0,Ld- -64|0);Gb(Nb,Hc,Ld,Ld+100|0,Ld+96|0,Ld+48|0,Ld+32|0);Od=u[Ld+104>>2];se=u[Ld+100>>2];h:{if(Od<se){break h}Nd=u[Ld+96>>2];qe=u[Ld+108>>2];if(Nd<qe){break h}ue=x(Od-se);Od=x(Nd-qe);ue=ue<Od?ue:Od;ye=1;}if(!ye){break e}if(!(ue<Md)){break g}ve=q[Ld+4>>2];q[Kc>>2]=q[Ld>>2];q[Kc+4>>2]=ve;ve=q[Ld+12>>2];q[Kc+8>>2]=q[Ld+8>>2];q[Kc+12>>2]=ve;Md=ue;}te=te+1|0;if((Ge|0)==(te|0)){break f}qe=u[Gc+40>>2];Nd=u[Gc+36>>2];Ae=u[Gc+32>>2];se=u[Gc+24>>2];Od=u[Gc+20>>2];ze=u[Gc+16>>2];Fe=u[Gc+8>>2];continue}}Ge=q[Nb+28>>2];if((Ge|0)>=1){te=0;while(1){ve=q[Nb+36>>2]+w(te,36)|0;Od=u[ve+28>>2];se=u[ve+20>>2];Nd=u[ve+24>>2];De=u[Hc+8>>2];Ee=u[Hc>>2];Fe=u[Hc+4>>2];xe=u[Hc+24>>2];ze=u[Hc+16>>2];Ae=u[Hc+20>>2];qe=u[Hc+40>>2];Be=u[Hc+32>>2];pe=u[Hc+36>>2];q[Ld+12>>2]=0;qe=x(x(x(se*Be)+x(Nd*pe))+x(Od*qe));u[Ld+8>>2]=qe;xe=x(x(x(se*ze)+x(Nd*Ae))+x(Od*xe));u[Ld+4>>2]=xe;Od=x(x(x(se*Ee)+x(Nd*Fe))+x(Od*De));u[Ld>>2]=Od;if(!!(x(x(x(Od*Je)+x(xe*Ie))+x(qe*Ke))<x(0))){u[Ld+8>>2]=-qe;u[Ld+4>>2]=-xe;u[Ld>>2]=-Od;}q[6039]=q[6039]+1;i:{if(r[21008]){if(!Oe(Gc,Hc,Ld+16|0,Ld,a,Nb,Md)){break i}}ye=0;q[6040]=q[6040]+1;Gb(a,Gc,Ld,Ld+108|0,Ld+104|0,Ld+80|0,Ld- -64|0);Gb(Nb,Hc,Ld,Ld+100|0,Ld+96|0,Ld+48|0,Ld+32|0);Od=u[Ld+104>>2];se=u[Ld+100>>2];j:{if(Od<se){break j}Nd=u[Ld+96>>2];qe=u[Ld+108>>2];if(Nd<qe){break j}ue=x(Od-se);Od=x(Nd-qe);ue=ue<Od?ue:Od;ye=1;}if(!ye){break e}if(!(ue<Md)){break i}ve=q[Ld+4>>2];q[Kc>>2]=q[Ld>>2];q[Kc+4>>2]=ve;ve=q[Ld+12>>2];q[Kc+8>>2]=q[Ld+8>>2];q[Kc+12>>2]=ve;Md=ue;}te=te+1|0;if((Ge|0)!=(te|0)){continue}break}}te=q[a+48>>2];if((te|0)>=1){break d}Ge=-1;ue=x(0);Od=x(0);se=x(0);Nd=x(0);qe=x(0);xe=x(0);Ve=-1;break c}Hc=0;break a}ye=q[Nb+48>>2];Ve=-1;ve=0;Ge=-1;xe=x(0);qe=x(0);Nd=x(0);se=x(0);Od=x(0);ue=x(0);while(1){if((ye|0)>=1){te=q[a+56>>2]+(ve<<4)|0;Fe=u[te>>2];ze=u[te+4>>2];Ae=u[te+8>>2];De=x(x(x(Fe*u[Gc+32>>2])+x(ze*u[Gc+36>>2]))+x(Ae*u[Gc+40>>2]));Ee=x(x(x(Fe*u[Gc+16>>2])+x(ze*u[Gc+20>>2]))+x(Ae*u[Gc+24>>2]));Fe=x(x(x(Fe*u[Gc>>2])+x(ze*u[Gc+4>>2]))+x(Ae*u[Gc+8>>2]));te=0;while(1){ye=q[Nb+56>>2]+(te<<4)|0;Be=u[ye+8>>2];we=u[ye>>2];Ce=u[ye+4>>2];He=u[Hc+40>>2];Ye=u[Hc+32>>2];Ze=u[Hc+36>>2];ze=u[Hc+24>>2];Ae=u[Hc+16>>2];pe=u[Hc+20>>2];_e=u[Hc+8>>2];$e=u[Hc>>2];af=u[Hc+4>>2];q[Ld+12>>2]=0;ze=x(x(x(we*Ae)+x(Ce*pe))+x(Be*ze));Ae=x(x(x(we*$e)+x(Ce*af))+x(Be*_e));pe=x(x(Fe*ze)-x(Ee*Ae));u[Ld+8>>2]=pe;Be=x(x(x(we*Ye)+x(Ce*Ze))+x(Be*He));we=x(x(De*Ae)-x(Fe*Be));u[Ld+4>>2]=we;Ce=x(x(Ee*Be)-x(De*ze));u[Ld>>2]=Ce;k:{if(+x(y(pe))>1e-6^1?!(+x(y(Ce))>1e-6|+x(y(we))>1e-6):0){break k}He=pe;pe=x(x(1)/x(E(x(x(pe*pe)+x(x(Ce*Ce)+x(we*we))))));He=x(He*pe);u[Ld+8>>2]=He;we=x(we*pe);u[Ld+4>>2]=we;pe=x(Ce*pe);u[Ld>>2]=pe;if(!!(x(x(x(pe*Je)+x(we*Ie))+x(Ke*He))<x(0))){u[Ld+8>>2]=-He;u[Ld+4>>2]=-we;u[Ld>>2]=-pe;}q[6039]=q[6039]+1;if(r[21008]){if(!Oe(Gc,Hc,Ld+16|0,Ld,a,Nb,Md)){break k}}ye=0;q[6040]=q[6040]+1;Gb(a,Gc,Ld,Ld+108|0,Ld+104|0,Ld+80|0,Ld- -64|0);Gb(Nb,Hc,Ld,Ld+100|0,Ld+96|0,Ld+48|0,Ld+32|0);pe=u[Ld+104>>2];we=u[Ld+100>>2];l:{if(pe<we){break l}Ce=u[Ld+96>>2];He=u[Ld+108>>2];if(Ce<He){break l}oe=x(pe-we);pe=x(Ce-He);if(!!(oe<pe)){ye=1;Ne=u[Ld+56>>2];Te=u[Ld+52>>2];Ue=u[Ld+48>>2];re=u[Ld+72>>2];Le=u[Ld+68>>2];Me=u[Ld+64>>2];break l}ye=1;Ne=u[Ld+40>>2];Te=u[Ld+36>>2];Ue=u[Ld+32>>2];re=u[Ld+88>>2];Le=u[Ld+84>>2];Me=u[Ld+80>>2];oe=pe;}if(!ye){break b}if(!(oe<Md)){break k}Ge=q[Ld+4>>2];q[Kc>>2]=q[Ld>>2];q[Kc+4>>2]=Ge;Ge=q[Ld+12>>2];q[Kc+8>>2]=q[Ld+8>>2];q[Kc+12>>2]=Ge;ue=Ue;Od=Te;se=Ne;Nd=Me;qe=Le;xe=re;Pe=Ae;Qe=ze;Re=Be;Se=Fe;We=Ee;Xe=De;Ge=ve;Ve=te;Md=oe;}te=te+1|0;ye=q[Nb+48>>2];if((te|0)<(ye|0)){continue}break}te=q[a+48>>2];}ve=ve+1|0;if((ve|0)<(te|0)){continue}break}}m:{if((Ge|Ve)<0){break m}Le=x(ue-Nd);Me=x(Od-qe);Ne=x(se-xe);re=x(x(x(Le*Pe)+x(Me*Qe))+x(Ne*Re));qe=x(x(x(Le*Se)+x(Me*We))+x(Ne*Xe));Md=x(0);Nd=x(x(x(Pe*Se)+x(Qe*We))+x(Re*Xe));oe=x(x(1)-x(Nd*Nd));n:{if(oe==x(0)){break n}Md=x(-1.0000000150474662e+30);oe=x(x(qe-x(re*Nd))/oe);if(oe<x(-1.0000000150474662e+30)){break n}Md=oe;if(!(Md>x(1.0000000150474662e+30))){break n}Md=x(1.0000000150474662e+30);}re=x(x(Nd*Md)-re);o:{if(!!(re<x(-1.0000000150474662e+30))){oe=x(qe+x(Nd*x(-1.0000000150474662e+30)));if(oe<x(-1.0000000150474662e+30)){re=x(-1.0000000150474662e+30);Md=x(-1.0000000150474662e+30);break o}Md=x(1.0000000150474662e+30);if(!(oe>x(1.0000000150474662e+30))){re=x(-1.0000000150474662e+30);Md=oe;break o}re=x(-1.0000000150474662e+30);break o}if(!(re>x(1.0000000150474662e+30))){break o}Md=x(-1.0000000150474662e+30);re=x(1.0000000150474662e+30);oe=x(qe+x(Nd*x(1.0000000150474662e+30)));if(oe<x(-1.0000000150474662e+30)){break o}Md=oe;if(!(Md>x(1.0000000150474662e+30))){break o}Md=x(1.0000000150474662e+30);}q[Ld+92>>2]=0;qe=x(Re*re);oe=x(qe+x(Ne-x(Xe*Md)));u[Ld+88>>2]=oe;Qe=x(Qe*re);Nd=x(Qe+x(Me-x(We*Md)));u[Ld+84>>2]=Nd;Pe=x(Pe*re);Md=x(Pe+x(Le-x(Se*Md)));u[Ld+80>>2]=Md;re=x(x(oe*oe)+x(x(Md*Md)+x(Nd*Nd)));if(!(re>x(1.1920928955078125e-7))){break m}pe=oe;Re=x(E(re));oe=x(x(1)/Re);re=x(pe*oe);u[Ld+88>>2]=re;Nd=x(Nd*oe);u[Ld+84>>2]=Nd;Md=x(Md*oe);u[Ld+80>>2]=Md;if(!!(x(x(x(Md*Je)+x(Nd*Ie))+x(re*Ke))<x(0))){u[Ld+88>>2]=-re;u[Ld+84>>2]=-Nd;u[Ld+80>>2]=-Md;}q[Ld+76>>2]=0;u[Ld+72>>2]=se+qe;u[Ld+68>>2]=Od+Qe;u[Ld+64>>2]=ue+Pe;n[q[q[pd>>2]+16>>2]](pd,Ld+80|0,Ld- -64|0,x(-Re));}Hc=1;Md=u[Kc>>2];ue=u[Kc+4>>2];oe=u[Kc+8>>2];if(!(x(x(x(Je*Md)+x(Ie*ue))+x(Ke*oe))<x(0))){break a}q[Kc+12>>2]=0;u[Kc+8>>2]=-oe;u[Kc+4>>2]=-ue;u[Kc>>2]=-Md;break a}Hc=0;}P=Ld+112|0;return Hc}function rA(a,Nb,Gc,Hc){var Kc=0,pd=0,Oe=0,bf=0,cf=x(0),df=0,ef=0,ff=0,gf=x(0),hf=x(0),jf=x(0),kf=x(0),lf=x(0),mf=x(0),nf=0,of=x(0),pf=0,qf=x(0),rf=x(0),sf=x(0),tf=0;a:{pf=q[a+4>>2];if((pf|0)<2){break a}Oe=q[a+12>>2];Kc=(Oe+(pf<<4)|0)+ -16|0;jf=u[Kc>>2];qf=u[Gc>>2];gf=u[Kc+4>>2];rf=u[Gc+4>>2];hf=u[Kc+8>>2];sf=u[Gc+8>>2];cf=x(x(x(x(jf*qf)+x(gf*rf))+x(hf*sf))+Hc);while(1){Kc=(tf<<4)+Oe|0;kf=u[Kc>>2];lf=u[Kc+4>>2];mf=u[Kc+8>>2];of=x(x(x(x(kf*qf)+x(lf*rf))+x(mf*sf))+Hc);nf=q[Kc+12>>2];b:{c:{if(!!(cf<x(0))){if(!!(of<x(0))){Kc=q[Nb+4>>2];d:{if((Kc|0)!=q[Nb+8>>2]){break d}df=Kc?Kc<<1:1;if((Kc|0)>=(df|0)){break d}Oe=0;ef=0;if(df){q[6657]=q[6657]+1;ef=n[q[5255]](df<<4,16)|0;Kc=q[Nb+4>>2];}if((Kc|0)>=1){while(1){pd=Oe<<4;bf=pd+ef|0;pd=pd+q[Nb+12>>2]|0;ff=q[pd+4>>2];q[bf>>2]=q[pd>>2];q[bf+4>>2]=ff;ff=q[pd+12>>2];q[bf+8>>2]=q[pd+8>>2];q[bf+12>>2]=ff;Oe=Oe+1|0;if((Oe|0)!=(Kc|0)){continue}break}}Kc=q[Nb+12>>2];if(Kc){if(r[Nb+16|0]){if(Kc){q[6658]=q[6658]+1;n[q[5256]](Kc);}}q[Nb+12>>2]=0;}q[Nb+12>>2]=ef;o[Nb+16|0]=1;q[Nb+8>>2]=df;Kc=q[Nb+4>>2];}Kc=q[Nb+12>>2]+(Kc<<4)|0;q[Kc+12>>2]=nf;u[Kc+8>>2]=mf;u[Kc+4>>2]=lf;u[Kc>>2]=kf;break c}cf=x(cf/x(cf-of));hf=x(hf+x(x(mf-hf)*cf));gf=x(gf+x(x(lf-gf)*cf));cf=x(jf+x(x(kf-jf)*cf));Kc=q[Nb+4>>2];e:{if((Kc|0)!=q[Nb+8>>2]){break e}ef=Kc?Kc<<1:1;if((Kc|0)>=(ef|0)){break e}Oe=0;df=0;if(ef){q[6657]=q[6657]+1;df=n[q[5255]](ef<<4,16)|0;Kc=q[Nb+4>>2];}if((Kc|0)>=1){while(1){pd=Oe<<4;nf=pd+df|0;bf=nf;pd=pd+q[Nb+12>>2]|0;ff=q[pd+4>>2];q[bf>>2]=q[pd>>2];q[bf+4>>2]=ff;bf=q[pd+12>>2];q[nf+8>>2]=q[pd+8>>2];q[nf+12>>2]=bf;Oe=Oe+1|0;if((Oe|0)!=(Kc|0)){continue}break}}Kc=q[Nb+12>>2];if(Kc){if(r[Nb+16|0]){if(Kc){q[6658]=q[6658]+1;n[q[5256]](Kc);}}q[Nb+12>>2]=0;}q[Nb+12>>2]=df;o[Nb+16|0]=1;q[Nb+8>>2]=ef;Kc=q[Nb+4>>2];}Kc=q[Nb+12>>2]+(Kc<<4)|0;q[Kc+12>>2]=0;u[Kc+8>>2]=hf;u[Kc+4>>2]=gf;u[Kc>>2]=cf;break c}if(!(of<x(0))){break b}cf=x(cf/x(cf-of));hf=x(hf+x(x(mf-hf)*cf));gf=x(gf+x(x(lf-gf)*cf));cf=x(jf+x(x(kf-jf)*cf));Kc=q[Nb+4>>2];f:{if((Kc|0)!=q[Nb+8>>2]){break f}df=Kc?Kc<<1:1;if((Kc|0)>=(df|0)){break f}Oe=0;ef=0;if(df){q[6657]=q[6657]+1;ef=n[q[5255]](df<<4,16)|0;Kc=q[Nb+4>>2];}if((Kc|0)>=1){while(1){pd=Oe<<4;bf=pd+ef|0;pd=pd+q[Nb+12>>2]|0;ff=q[pd+4>>2];q[bf>>2]=q[pd>>2];q[bf+4>>2]=ff;ff=q[pd+12>>2];q[bf+8>>2]=q[pd+8>>2];q[bf+12>>2]=ff;Oe=Oe+1|0;if((Oe|0)!=(Kc|0)){continue}break}}Kc=q[Nb+12>>2];if(Kc){if(r[Nb+16|0]){if(Kc){q[6658]=q[6658]+1;n[q[5256]](Kc);}}q[Nb+12>>2]=0;}q[Nb+12>>2]=ef;o[Nb+16|0]=1;q[Nb+8>>2]=df;Kc=q[Nb+4>>2];}Kc=q[Nb+12>>2]+(Kc<<4)|0;q[Kc+12>>2]=0;u[Kc+8>>2]=hf;u[Kc+4>>2]=gf;u[Kc>>2]=cf;Kc=q[Nb+4>>2]+1|0;q[Nb+4>>2]=Kc;g:{if(q[Nb+8>>2]!=(Kc|0)){break g}df=Kc?Kc<<1:1;if((Kc|0)>=(df|0)){break g}Oe=0;ef=0;if(df){q[6657]=q[6657]+1;ef=n[q[5255]](df<<4,16)|0;Kc=q[Nb+4>>2];}if((Kc|0)>=1){while(1){pd=Oe<<4;bf=pd+ef|0;pd=pd+q[Nb+12>>2]|0;ff=q[pd+4>>2];q[bf>>2]=q[pd>>2];q[bf+4>>2]=ff;ff=q[pd+12>>2];q[bf+8>>2]=q[pd+8>>2];q[bf+12>>2]=ff;Oe=Oe+1|0;if((Oe|0)!=(Kc|0)){continue}break}}Kc=q[Nb+12>>2];if(Kc){if(r[Nb+16|0]){if(Kc){q[6658]=q[6658]+1;n[q[5256]](Kc);}}q[Nb+12>>2]=0;}q[Nb+12>>2]=ef;o[Nb+16|0]=1;q[Nb+8>>2]=df;Kc=q[Nb+4>>2];}Kc=q[Nb+12>>2]+(Kc<<4)|0;q[Kc+12>>2]=nf;u[Kc+8>>2]=mf;u[Kc+4>>2]=lf;u[Kc>>2]=kf;}q[Nb+4>>2]=q[Nb+4>>2]+1;}tf=tf+1|0;if((tf|0)==(pf|0)){break a}sf=u[Gc+8>>2];rf=u[Gc+4>>2];qf=u[Gc>>2];Oe=q[a+12>>2];cf=of;hf=mf;gf=lf;jf=kf;continue}}}function sA(a,Nb,Gc,Hc,uf){a=a|0;Nb=Nb|0;Gc=Gc|0;Hc=Hc|0;uf=uf|0;var vf=0,wf=0,xf=0,yf=0,zf=0;vf=P-160|0;P=vf;wf=q[a+12>>2];a:{if(!wf){break a}xf=r[a+16|0];yf=xf?Nb:Gc;zf=q[yf+4>>2];Nb=xf?Gc:Nb;xf=q[Nb+4>>2];q[uf+4>>2]=wf;Gc=vf+144|0;u[Gc+12>>2]=u[wf+848>>2]+u[uf+32>>2];q[Gc+8>>2]=zf;q[Gc+4>>2]=xf;q[Gc>>2]=10344;q[vf+136>>2]=1566444395;Nb=q[Nb+12>>2];wf=q[Nb+12>>2];q[vf+16>>2]=q[Nb+8>>2];q[vf+20>>2]=wf;wf=q[Nb+4>>2];q[vf+8>>2]=q[Nb>>2];q[vf+12>>2]=wf;wf=q[Nb+28>>2];q[vf+32>>2]=q[Nb+24>>2];q[vf+36>>2]=wf;wf=q[Nb+20>>2];q[vf+24>>2]=q[Nb+16>>2];q[vf+28>>2]=wf;wf=q[Nb+44>>2];q[vf+48>>2]=q[Nb+40>>2];q[vf+52>>2]=wf;wf=q[Nb+36>>2];q[vf+40>>2]=q[Nb+32>>2];q[vf+44>>2]=wf;xf=q[Nb+60>>2];wf=vf- -64|0;q[wf>>2]=q[Nb+56>>2];q[wf+4>>2]=xf;wf=q[Nb+52>>2];q[vf+56>>2]=q[Nb+48>>2];q[vf+60>>2]=wf;Nb=q[yf+12>>2];wf=q[Nb+12>>2];q[vf+80>>2]=q[Nb+8>>2];q[vf+84>>2]=wf;wf=q[Nb+4>>2];q[vf+72>>2]=q[Nb>>2];q[vf+76>>2]=wf;wf=q[Nb+20>>2];q[vf+88>>2]=q[Nb+16>>2];q[vf+92>>2]=wf;wf=q[Nb+28>>2];q[vf+96>>2]=q[Nb+24>>2];q[vf+100>>2]=wf;wf=q[Nb+36>>2];q[vf+104>>2]=q[Nb+32>>2];q[vf+108>>2]=wf;wf=q[Nb+44>>2];q[vf+112>>2]=q[Nb+40>>2];q[vf+116>>2]=wf;wf=q[Nb+52>>2];q[vf+120>>2]=q[Nb+48>>2];q[vf+124>>2]=wf;wf=q[Nb+60>>2];q[vf+128>>2]=q[Nb+56>>2];q[vf+132>>2]=wf;Ai(Gc,vf+8|0,uf,q[Hc+20>>2],r[a+16|0]);if(!r[a+8|0]){break a}a=q[uf+4>>2];if(!q[a+844>>2]){break a}Nb=q[a+836>>2];Gc=q[q[uf+8>>2]+8>>2];if((Nb|0)!=(Gc|0)){ba(a,q[q[uf+12>>2]+8>>2]+4|0,Gc+4|0);break a}ba(a,Nb+4|0,q[q[uf+12>>2]+8>>2]+4|0);}P=vf+160|0;}function tA(a){a=a|0;var Nb=0,Gc=0;q[a>>2]=10404;a:{if(!r[a+8|0]){break a}Nb=q[a+12>>2];if(!Nb){break a}Gc=q[a+4>>2];n[q[q[Gc>>2]+16>>2]](Gc,Nb);}aa(a);}function uA(a){a=a|0;var Hc=0,uf=0;q[a>>2]=10404;a:{if(!r[a+8|0]){break a}Hc=q[a+12>>2];if(!Hc){break a}uf=q[a+4>>2];n[q[q[uf>>2]+16>>2]](uf,Hc);}return a|0}function vA(a,Af,Bf,Cf,Df,Ef){q[a>>2]=17096;q[a+4>>2]=q[Bf>>2];q[a>>2]=5592;o[a+16|0]=Ef;q[a+12>>2]=Af;o[a+8|0]=0;q[a>>2]=10404;if(!Af){Af=q[a+4>>2];Af=n[q[q[Af>>2]+12>>2]](Af,q[Cf+8>>2],q[Df+8>>2])|0;o[a+8|0]=1;q[a+12>>2]=Af;}}function wA(a,q,Af){var Bf=x(0),Cf=x(0),Df=x(0),Ef=x(0),Ff=x(0),Gf=x(0),Hf=x(0),If=x(0),Jf=x(0),Kf=x(0),Lf=x(0),Mf=x(0),Nf=x(0),Of=x(0),Pf=x(0),Qf=x(0);If=u[a+40>>2];Gf=u[a+24>>2];Lf=x(If-Gf);Jf=u[Af+8>>2];Nf=u[a+32>>2];Cf=u[a+16>>2];Ff=x(Nf-Cf);Df=u[q+4>>2];Of=u[a+36>>2];Hf=u[a+20>>2];Ef=x(Of-Hf);Kf=u[q>>2];Mf=x(x(Jf-Gf)*x(x(Ff*Df)-x(Ef*Kf)));Pf=u[Af>>2];Bf=Ef;Ef=u[q+8>>2];Qf=u[Af+4>>2];Lf=x(Mf+x(x(x(Pf-Cf)*x(x(Bf*Ef)-x(Lf*Df)))+x(x(Qf-Hf)*x(x(Lf*Kf)-x(Ff*Ef)))));Bf=Gf;Gf=u[a+8>>2];Ff=x(Bf-Gf);Bf=Cf;Cf=u[a>>2];Mf=x(Bf-Cf);Bf=Hf;Hf=u[a+4>>2];Bf=x(Bf-Hf);Ff=x(x(x(Jf-Gf)*x(x(Mf*Df)-x(Bf*Kf)))+x(x(x(Pf-Cf)*x(x(Bf*Ef)-x(Ff*Df)))+x(x(Qf-Hf)*x(x(Ff*Kf)-x(Mf*Ef)))));a=1;Bf=x(Jf-If);Jf=x(Cf-Nf);Cf=x(Hf-Of);If=x(Gf-If);Df=x(x(Bf*x(x(Jf*Df)-x(Cf*Kf)))+x(x(x(Pf-Nf)*x(x(Cf*Ef)-x(If*Df)))+x(x(Qf-Of)*x(x(If*Kf)-x(Jf*Ef)))));if(!(Lf>x(0)?!(Df>x(0)^1|Ff>x(0)^1):0)){a=Ff<=x(0)&Lf<=x(0)&Df<=x(0);}return a}function xA(a,Af,Rf,Sf,Tf,Uf){var Vf=x(0),Wf=x(0),Xf=x(0),Yf=0,Zf=0,_f=x(0),$f=x(0),ag=x(0),bg=x(0),cg=x(0),dg=x(0),eg=0,fg=0,gg=x(0),hg=x(0),ig=x(0),jg=x(0),kg=x(0),lg=x(0),mg=x(0),ng=x(0),og=x(0);Yf=P-32|0;P=Yf;Zf=q[a+8>>2];Wf=u[Zf+60>>2];Vf=x(u[Zf+76>>2]-Wf);bg=u[Zf- -64>>2];Xf=x(u[Zf+96>>2]-bg);_f=x(u[Zf+80>>2]-bg);ag=x(u[Zf+92>>2]-Wf);cg=x(x(Vf*Xf)-x(_f*ag));gg=_f;dg=u[Zf+68>>2];_f=x(u[Zf+100>>2]-dg);$f=x(u[Zf+84>>2]-dg);Xf=x(x(gg*_f)-x($f*Xf));ag=x(x($f*ag)-x(Vf*_f));_f=x(x(cg*cg)+x(x(Xf*Xf)+x(ag*ag)));a:{if(!(_f>=x(1.4210854715202004e-14))){break a}eg=q[a+4>>2];gg=x(u[eg+32>>2]*u[eg+16>>2]);Vf=x(gg+Uf);Uf=x(x(1)/x(E(_f)));_f=x(Xf*Uf);Xf=u[Af>>2];ag=x(ag*Uf);$f=u[Af+4>>2];hg=x(x(_f*x(Xf-Wf))+x(ag*x($f-bg)));bg=x(cg*Uf);Wf=u[Af+8>>2];Uf=x(hg+x(bg*x(Wf-dg)));if(!!(Uf<x(0))){bg=x(-bg);ag=x(-ag);_f=x(-_f);Uf=x(-Uf);}if(!(Uf<Vf)){break a}eg=q[Af+12>>2];q[Yf+24>>2]=q[Af+8>>2];q[Yf+28>>2]=eg;eg=q[Af+4>>2];q[Yf+16>>2]=q[Af>>2];q[Yf+20>>2]=eg;q[Yf+12>>2]=0;u[Yf+8>>2]=bg;u[Yf+4>>2]=ag;u[Yf>>2]=_f;b:{if(wA(Zf+60|0,Yf,Yf+16|0)){ig=x(Wf-x(Uf*bg));jg=x($f-x(Uf*ag));kg=x(Xf-x(Uf*_f));hg=x(Vf*Vf);break b}if((n[q[q[Zf>>2]+100>>2]](Zf)|0)<1){break a}hg=x(Vf*Vf);eg=0;Zf=0;while(1){fg=q[a+8>>2];n[q[q[fg>>2]+104>>2]](fg,Zf,Yf+16|0,Yf);Vf=x(0);lg=u[Yf+16>>2];Uf=x(u[Af>>2]-lg);$f=x(u[Yf>>2]-lg);mg=u[Yf+20>>2];Wf=x(u[Af+4>>2]-mg);cg=x(u[Yf+4>>2]-mg);ng=u[Yf+24>>2];Xf=x(u[Af+8>>2]-ng);dg=x(u[Yf+8>>2]-ng);og=x(x(x(Uf*$f)+x(Wf*cg))+x(Xf*dg));c:{if(!(og>x(0))){break c}Vf=x(x(x($f*$f)+x(cg*cg))+x(dg*dg));if(!!(og<Vf)){Vf=x(og/Vf);Xf=x(Xf-x(dg*Vf));Wf=x(Wf-x(cg*Vf));Uf=x(Uf-x($f*Vf));break c}Xf=x(Xf-dg);Wf=x(Wf-cg);Uf=x(Uf-$f);Vf=x(1);}if(!!(x(x(x(Uf*Uf)+x(Wf*Wf))+x(Xf*Xf))<hg)){kg=x(lg+x($f*Vf));jg=x(mg+x(cg*Vf));eg=1;ig=x(ng+x(dg*Vf));}Zf=Zf+1|0;fg=q[a+8>>2];if((Zf|0)<(n[q[q[fg>>2]+100>>2]](fg)|0)){continue}break}fg=0;if(!eg){break a}Wf=u[Af+8>>2];$f=u[Af+4>>2];Xf=u[Af>>2];}Uf=x(Xf-kg);Xf=x($f-jg);Wf=x(Wf-ig);Vf=x(x(x(Uf*Uf)+x(Xf*Xf))+x(Wf*Wf));if(!(Vf<hg)){break a}d:{if(!!(Vf>x(1.1920928955078125e-7))){q[Sf+12>>2]=0;_f=Wf;Vf=x(E(Vf));Wf=x(x(1)/Vf);u[Sf+8>>2]=_f*Wf;u[Sf+4>>2]=Xf*Wf;u[Sf>>2]=Uf*Wf;gg=x(gg-Vf);break d}q[Sf+12>>2]=0;u[Sf+8>>2]=bg;u[Sf+4>>2]=ag;u[Sf>>2]=_f;}q[Rf+12>>2]=0;u[Rf+8>>2]=ig;u[Rf+4>>2]=jg;u[Rf>>2]=kg;u[Tf>>2]=-gg;fg=1;}P=Yf+32|0;return fg}function yA(a,Af,Rf,Sf){a=a|0;Af=Af|0;Rf=Rf|0;Sf=Sf|0;a=a+ -4|0;n[q[q[a>>2]+8>>2]](a,Af,Rf,Sf);}function zA(a){a=a|0;aa(a+ -4|0);}function AA(a){a=a|0;return a+ -4|0}function BA(a,Af,Rf,Sf){a=a|0;Af=Af|0;Rf=Rf|0;Sf=Sf|0;n[q[q[a>>2]+8>>2]](a,Af,Rf,Sf);}function CA(a,Af,Rf,Sf){a=a|0;Af=Af|0;Rf=Rf|0;Sf=Sf|0;var Tf=x(0),Uf=x(0),pg=x(0),qg=x(0),rg=x(0),sg=x(0),tg=x(0),ug=x(0),vg=x(0),wg=x(0),xg=x(0),yg=x(0),zg=x(0),Ag=x(0),Bg=x(0),Cg=x(0),Dg=x(0),Eg=x(0),Fg=x(0),Gg=x(0),Hg=x(0);Rf=P-96|0;P=Rf;Tf=u[a+76>>2];Uf=u[a+36>>2];sg=u[a+32>>2];tg=u[a+80>>2];wg=u[a+52>>2];xg=u[a+44>>2];yg=u[a+48>>2];ug=u[a+84>>2];vg=u[a+68>>2];Dg=u[a+60>>2];Eg=u[a- -64>>2];Fg=u[a+28>>2];pg=u[Af+8>>2];qg=u[Af>>2];rg=u[Af+4>>2];q[Rf+92>>2]=0;Ag=x(ug+x(x(x(qg*Dg)+x(rg*Eg))+x(pg*vg)));u[Rf+88>>2]=Ag;Bg=x(tg+x(x(x(qg*xg)+x(rg*yg))+x(pg*wg)));u[Rf+84>>2]=Bg;Cg=x(Tf+x(x(x(qg*Fg)+x(rg*sg))+x(pg*Uf)));u[Rf+80>>2]=Cg;pg=u[Af+20>>2];qg=u[Af+24>>2];rg=u[Af+16>>2];q[Rf+76>>2]=0;Gg=x(ug+x(x(x(Dg*rg)+x(Eg*pg))+x(vg*qg)));u[Rf+72>>2]=Gg;Hg=x(tg+x(x(x(xg*rg)+x(yg*pg))+x(wg*qg)));u[Rf+68>>2]=Hg;zg=x(Tf+x(x(x(Fg*rg)+x(sg*pg))+x(Uf*qg)));u[Rf+64>>2]=zg;pg=u[Af+36>>2];qg=u[Af+40>>2];rg=u[Af+32>>2];q[Rf+60>>2]=0;ug=x(ug+x(x(x(Dg*rg)+x(Eg*pg))+x(vg*qg)));u[Rf+56>>2]=ug;tg=x(tg+x(x(x(xg*rg)+x(yg*pg))+x(wg*qg)));u[Rf+52>>2]=tg;Tf=x(Tf+x(x(x(Fg*rg)+x(sg*pg))+x(Uf*qg)));u[Rf+48>>2]=Tf;q[Rf+44>>2]=0;wg=x(x(x(Ag+Gg)+ug)*x(.3333333432674408));u[Rf+40>>2]=wg;xg=x(x(x(Bg+Hg)+tg)*x(.3333333432674408));u[Rf+36>>2]=xg;yg=x(x(x(Cg+zg)+Tf)*x(.3333333432674408));u[Rf+32>>2]=yg;Af=q[a+8>>2];if(n[q[q[Af>>2]+56>>2]](Af)&16384){Uf=u[Rf+80>>2];q[Rf+24>>2]=0;q[Rf+28>>2]=0;q[Rf+16>>2]=1065353216;q[Rf+20>>2]=1065353216;Af=q[a+8>>2];q[Rf+12>>2]=0;sg=x(zg-Uf);tg=x(tg-Bg);vg=x(Hg-Bg);Uf=x(Tf-Uf);Tf=x(x(sg*tg)-x(vg*Uf));Cg=Tf;zg=x(Tf*Tf);ug=x(ug-Ag);Tf=x(vg*ug);vg=x(Gg-Ag);Tf=x(Tf-x(vg*tg));Uf=x(x(vg*Uf)-x(sg*ug));sg=x(x(1)/x(E(x(zg+x(x(Tf*Tf)+x(Uf*Uf))))));u[Rf+8>>2]=x(Cg*sg)+wg;u[Rf+4>>2]=xg+x(Uf*sg);u[Rf>>2]=yg+x(Tf*sg);n[q[q[Af>>2]+16>>2]](Af,Rf+32|0,Rf,Rf+16|0);}Sf=q[a+8>>2];Af=a+12|0;n[q[q[Sf>>2]+16>>2]](Sf,Rf+80|0,Rf- -64|0,Af);Sf=q[a+8>>2];n[q[q[Sf>>2]+16>>2]](Sf,Rf- -64|0,Rf+48|0,Af);a=q[a+8>>2];n[q[q[a>>2]+16>>2]](a,Rf+48|0,Rf+80|0,Af);P=Rf+96|0;}function DA(a,Af){a=a|0;Af=Af|0;var Rf=0,Sf=0,Ig=0,Jg=x(0),Kg=0,Lg=0;Rf=P-32|0;P=Rf;Sf=q[a+184>>2];a:{if(u[Sf+4>>2]==x(0)){break a}Ig=1;Af=q[Af>>2];if(!n[q[q[Sf>>2]+8>>2]](Sf,q[Af+188>>2])){break a}Jg=u[a+188>>2];Sf=q[a+184>>2];Kg=q[a+192>>2];Lg=q[Af+192>>2];q[Rf+24>>2]=-1;q[Rf+28>>2]=-1;q[Rf+20>>2]=Af+4;q[Rf+16>>2]=Af;q[Rf+12>>2]=Lg;q[Rf+8>>2]=0;Pe(Kg,a+36|0,a+100|0,Rf+8|0,Sf,Jg);}P=Rf+32|0;return Ig|0}function EA(a,Af){a=a|0;Af=Af|0;var Mg=0,Ng=0,Og=0,Pg=0;Mg=P-32|0;P=Mg;Ng=q[a+216>>2];a:{if(u[Ng+4>>2]==x(0)){break a}Og=1;Af=q[Af>>2];if(!n[q[q[Ng>>2]+8>>2]](Ng,q[Af+188>>2])){break a}Ng=q[a+216>>2];Pg=q[Af+192>>2];q[Mg+24>>2]=-1;q[Mg+28>>2]=-1;q[Mg+20>>2]=Af+4;q[Mg+16>>2]=Af;q[Mg+12>>2]=Pg;q[Mg+8>>2]=0;Qe(a+68|0,a+132|0,Mg+8|0,Ng);}P=Mg+32|0;return Og|0}function FA(a,Af,Qg){a=a|0;Af=Af|0;Qg=Qg|0;var Rg=0,Sg=0,Tg=x(0);Rg=P-16|0;P=Rg;q[Rg+8>>2]=-1;q[Rg+12>>2]=q[a+20>>2];if(!q[Af+4>>2]){q[Af+4>>2]=Rg+8;}Sg=q[a+16>>2];Tg=x(n[q[q[Sg>>2]+12>>2]](Sg,Af,Qg));q[a+4>>2]=q[q[a+16>>2]+4>>2];P=Rg+16|0;return x(Tg)}function GA(a,Af){var Qg=0;Qg=P-16|0;q[Qg+12>>2]=a;u[Qg+8>>2]=Af;a=q[Qg+12>>2];q[a+304>>2]=q[a+304>>2]+1;u[a+240>>2]=u[Qg+8>>2];}function HA(a,Af){a=a|0;Af=Af|0;a=q[a+16>>2];return n[q[q[a>>2]+8>>2]](a,Af)|0}function IA(a,Af){a=a|0;Af=Af|0;var Ug=0,Vg=0,Wg=0;Ug=P+ -64|0;P=Ug;Wg=q[Af+36>>2];Af=q[q[a+24>>2]+28>>2]+w(Wg,80)|0;Vg=q[Af+12>>2];q[Ug+8>>2]=q[Af+8>>2];q[Ug+12>>2]=Vg;Vg=q[Af+4>>2];q[Ug>>2]=q[Af>>2];q[Ug+4>>2]=Vg;Vg=q[Af+28>>2];q[Ug+24>>2]=q[Af+24>>2];q[Ug+28>>2]=Vg;Vg=q[Af+20>>2];q[Ug+16>>2]=q[Af+16>>2];q[Ug+20>>2]=Vg;Vg=q[Af+44>>2];q[Ug+40>>2]=q[Af+40>>2];q[Ug+44>>2]=Vg;Vg=q[Af+36>>2];q[Ug+32>>2]=q[Af+32>>2];q[Ug+36>>2]=Vg;Vg=q[Af+60>>2];q[Ug+56>>2]=q[Af+56>>2];q[Ug+60>>2]=Vg;Vg=q[Af+52>>2];q[Ug+48>>2]=q[Af+48>>2];q[Ug+52>>2]=Vg;Gi(a,Wg,Ug,q[Af+64>>2]);P=Ug- -64|0;}function JA(a,Af,Xg){a=a|0;Af=Af|0;Xg=Xg|0;var Yg=0,Zg=0,_g=0,$g=x(0);Zg=P-16|0;P=Zg;Yg=q[a+28>>2];q[Zg+12>>2]=Yg;q[Zg+8>>2]=Yg;_g=q[Af+4>>2];a:{if(!_g){q[Af+4>>2]=Zg+8;break a}q[_g+4>>2]=Yg;q[_g>>2]=Yg;}Yg=q[a+24>>2];$g=x(n[q[q[Yg>>2]+12>>2]](Yg,Af,Xg));q[a+4>>2]=q[q[a+24>>2]+4>>2];P=Zg+16|0;return x($g)}function KA(a,Af){a=a|0;Af=Af|0;a=q[a+24>>2];return n[q[q[a>>2]+8>>2]](a,Af)|0}function LA(a,Af,Xg){a=a|0;Af=Af|0;Xg=x(Xg);n[q[q[a>>2]+12>>2]](a,Af);}function MA(a,Af){a=a|0;Af=Af|0;Hi(a,q[Af+36>>2]);}function NA(a,Af,Xg,ah,bh){a=a|0;Af=Af|0;Xg=x(Xg);ah=ah|0;bh=bh|0;var ch=0,dh=x(0),eh=x(0),fh=x(0),gh=x(0),hh=x(0),ih=x(0),jh=x(0),kh=x(0),lh=x(0),mh=x(0),nh=x(0),oh=x(0);ch=P-48|0;P=ch;q[ch+44>>2]=bh;q[ch+40>>2]=ah;gh=u[a- -64>>2];hh=u[a+60>>2];ih=u[a+80>>2];jh=u[a+72>>2];kh=u[a+76>>2];lh=u[a+96>>2];mh=u[a+88>>2];nh=u[a+92>>2];oh=u[a+56>>2];dh=u[Af+8>>2];eh=u[Af>>2];fh=u[Af+4>>2];Af=q[a+48>>2];q[ch+28>>2]=0;u[ch+24>>2]=x(x(eh*mh)+x(fh*nh))+x(dh*lh);u[ch+20>>2]=x(x(eh*jh)+x(fh*kh))+x(dh*ih);u[ch+32>>2]=Xg;q[ch+8>>2]=Af;u[ch+16>>2]=x(x(oh*eh)+x(hh*fh))+x(gh*dh);q[ch+12>>2]=ch+40;a=q[a+44>>2];Xg=x(n[q[q[a>>2]+12>>2]](a,ch+8|0,1));P=ch+48|0;return x(Xg)}function OA(a,Af){a=a|0;Af=Af|0;n[q[q[Af>>2]+32>>2]](Af);Ei(a,Af);n[q[q[Af>>2]+36>>2]](Af);}function PA(a){var Af=0,Xg=0,ah=0,bh=0,ph=0,qh=0,rh=0,sh=0,th=0;rh=q[a+4>>2];Xg=q[a+48>>2];a:{if((rh|0)>=(Xg|0)){break a}b:{if(q[a+8>>2]>=(Xg|0)){Af=q[a+12>>2];break b}ah=rh;if(Xg){q[6657]=q[6657]+1;Af=n[q[5255]](Xg<<2,16)|0;ah=q[a+4>>2];}ph=q[a+12>>2];c:{d:{if((ah|0)>=1){while(1){qh=bh<<2;q[qh+Af>>2]=q[ph+qh>>2];bh=bh+1|0;if((bh|0)!=(ah|0)){continue}break d}}if(ph){break d}break c}if(r[a+16|0]){if(ph){q[6658]=q[6658]+1;n[q[5256]](ph);}}}q[a+12>>2]=Af;o[a+16|0]=1;q[a+8>>2]=Xg;}ah=rh<<2;qh=Xg<<2;_(ah+Af|0,0,qh-ah|0);q[a+4>>2]=Xg;ph=q[a+24>>2];if((ph|0)<(Xg|0)){e:{if(q[a+28>>2]>=(Xg|0)){Af=q[a+32>>2];break e}bh=0;ah=ph;Af=0;if(Xg){q[6657]=q[6657]+1;Af=n[q[5255]](qh,16)|0;ah=q[a+24>>2];}sh=q[a+32>>2];f:{if((ah|0)>=1){while(1){th=bh<<2;q[th+Af>>2]=q[sh+th>>2];bh=bh+1|0;if((bh|0)!=(ah|0)){continue}break f}}if(sh){break f}q[a+32>>2]=Af;q[a+28>>2]=Xg;o[a+36|0]=1;break e}if(r[a+36|0]){if(sh){q[6658]=q[6658]+1;n[q[5256]](sh);}}q[a+32>>2]=Af;o[a+36|0]=1;q[a+28>>2]=Xg;}ah=ph<<2;_(ah+Af|0,0,qh-ah|0);}q[a+24>>2]=Xg;if((Xg|0)>=1){_(q[a+12>>2],255,qh);_(q[a+32>>2],255,qh);}if((rh|0)<1){break a}ah=q[a+32>>2];ph=q[a+72>>2];Xg=q[a+12>>2];bh=0;while(1){Af=q[ph+(bh<<3)>>2];Af=(Af<<15^-1)+Af|0;Af=w(Af>>>10^Af,9);Af=Af>>>6^Af;Af=(Af<<11^-1)+Af|0;Af=Xg+((q[a+48>>2]+ -1&(Af>>>16^Af))<<2)|0;q[ah+(bh<<2)>>2]=q[Af>>2];q[Af>>2]=bh;bh=bh+1|0;if((rh|0)!=(bh|0)){continue}break}}}function QA(a,uh,vh){var wh=0,xh=0,yh=0,zh=0,Ah=0,Bh=0,Ch=0,Dh=0,Eh=0;a:{Ah=q[a+48>>2];wh=q[uh>>2];xh=(wh<<15^-1)+wh|0;xh=w(xh>>>10^xh,9);xh=xh>>>6^xh;xh=(xh<<11^-1)+xh|0;Ch=Ah+ -1&(xh>>>16^xh);b:{if(Ch>>>0>=t[a+4>>2]){break b}xh=q[q[a+12>>2]+(Ch<<2)>>2];if((xh|0)==-1){break b}yh=q[a+72>>2];while(1){if((wh|0)==q[yh+(xh<<3)>>2]){break a}xh=q[q[a+32>>2]+(xh<<2)>>2];if((xh|0)!=-1){continue}break}}Dh=q[a+44>>2];wh=Dh;c:{if((Ah|0)!=(wh|0)){break c}wh=Ah;yh=wh?wh<<1:1;if((wh|0)>=(yh|0)){break c}if(yh){q[6657]=q[6657]+1;zh=n[q[5255]](yh<<2,16)|0;wh=q[a+44>>2];}else {wh=Ah;}if((wh|0)>=1){xh=0;while(1){Bh=xh<<2;q[Bh+zh>>2]=q[Bh+q[a+52>>2]>>2];xh=xh+1|0;if((xh|0)!=(wh|0)){continue}break}}xh=q[a+52>>2];if(xh){if(r[a+56|0]){if(xh){q[6658]=q[6658]+1;n[q[5256]](xh);}wh=q[a+44>>2];}q[a+52>>2]=0;}q[a+52>>2]=zh;q[a+48>>2]=yh;o[a+56|0]=1;}q[q[a+52>>2]+(wh<<2)>>2]=q[vh>>2];q[a+44>>2]=wh+1;wh=q[a- -64>>2];d:{if((wh|0)!=q[a+68>>2]){break d}vh=wh?wh<<1:1;if((wh|0)>=(vh|0)){break d}e:{if(!vh){zh=0;break e}q[6657]=q[6657]+1;zh=n[q[5255]](vh<<3,16)|0;wh=q[a+64>>2];}if((wh|0)>=1){xh=0;while(1){yh=xh<<3;Bh=yh+zh|0;yh=yh+q[a+72>>2]|0;Eh=q[yh+4>>2];q[Bh>>2]=q[yh>>2];q[Bh+4>>2]=Eh;xh=xh+1|0;if((xh|0)!=(wh|0)){continue}break}}wh=q[a+72>>2];if(wh){if(r[a+76|0]){if(wh){q[6658]=q[6658]+1;n[q[5256]](wh);}}q[a+72>>2]=0;}q[a+72>>2]=zh;q[a+68>>2]=vh;o[a+76|0]=1;wh=q[a+64>>2];}vh=q[a+72>>2]+(wh<<3)|0;wh=q[uh+4>>2];q[vh>>2]=q[uh>>2];q[vh+4>>2]=wh;q[a+64>>2]=q[a+64>>2]+1;if((Ah|0)<q[a+48>>2]){PA(a);uh=q[uh>>2];uh=(uh<<15^-1)+uh|0;uh=w(uh>>>10^uh,9);uh=uh>>>6^uh;uh=(uh<<11^-1)+uh|0;Ch=q[a+48>>2]+ -1&(uh>>>16^uh);}uh=q[a+32>>2]+(Dh<<2)|0;a=q[a+12>>2]+(Ch<<2)|0;q[uh>>2]=q[a>>2];q[a>>2]=Dh;return}q[q[a+52>>2]+(xh<<2)>>2]=q[vh>>2];}function RA(a,uh,vh,Fh){a=a|0;uh=uh|0;vh=vh|0;Fh=Fh|0;var Gh=0,Hh=0,Ih=x(0),Jh=x(0),Kh=x(0),Lh=x(0),Mh=x(0),Nh=x(0),Oh=x(0),Ph=x(0),Qh=x(0),Rh=x(0),Sh=0,Th=x(0),Uh=x(0),Vh=x(0),Wh=x(0),Xh=x(0),Yh=x(0),Zh=x(0),_h=x(0),$h=x(0),ai=0,bi=0,ci=0,di=x(0),ei=x(0),fi=0,gi=0,hi=0,ii=0,ji=0,ki=x(0),li=x(0),mi=x(0);Gh=P-144|0;P=Gh;a:{if(!n[q[q[a>>2]+20>>2]](a)){break a}Hh=n[q[q[a>>2]+20>>2]](a)|0;if(!(n[q[q[Hh>>2]+56>>2]](Hh)&32768)){break a}Hh=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Hh>>2]+64>>2]](Hh,uh,x(.10000000149011612));}b:{c:{Hh=q[vh+4>>2];if(Hh>>>0>31){break c}d:{switch(Hh-1|0){case 30:ai=q[vh+20>>2];if((ai|0)<1){break b}while(1){ai=ai+ -1|0;Hh=q[vh+28>>2]+w(ai,80)|0;Sh=q[Hh+64>>2];Qh=u[Hh+56>>2];Rh=u[Hh+48>>2];Yh=u[Hh+52>>2];Th=u[Hh+32>>2];Uh=u[Hh>>2];Zh=u[Hh+16>>2];$h=u[Hh+36>>2];Lh=u[Hh+4>>2];Vh=u[Hh+20>>2];_h=u[Hh+40>>2];di=u[Hh+8>>2];ei=u[Hh+24>>2];ki=u[uh+48>>2];li=u[uh+52>>2];mi=u[uh+56>>2];Ih=u[uh+8>>2];Jh=u[uh>>2];Kh=u[uh+4>>2];Mh=u[uh+24>>2];Nh=u[uh+16>>2];Oh=u[uh+20>>2];Wh=u[uh+40>>2];Xh=u[uh+32>>2];Ph=u[uh+36>>2];q[Gh+60>>2]=0;q[Gh+44>>2]=0;q[Gh+28>>2]=0;q[Gh+12>>2]=0;u[Gh+40>>2]=x(x(di*Xh)+x(ei*Ph))+x(_h*Wh);u[Gh+36>>2]=x(x(Lh*Xh)+x(Vh*Ph))+x($h*Wh);u[Gh+32>>2]=x(x(Uh*Xh)+x(Zh*Ph))+x(Th*Wh);u[Gh+24>>2]=x(x(di*Nh)+x(ei*Oh))+x(_h*Mh);u[Gh+20>>2]=x(x(Lh*Nh)+x(Vh*Oh))+x($h*Mh);u[Gh+16>>2]=x(x(Uh*Nh)+x(Zh*Oh))+x(Th*Mh);u[Gh+8>>2]=x(x(di*Jh)+x(ei*Kh))+x(_h*Ih);u[Gh+4>>2]=x(x(Lh*Jh)+x(Vh*Kh))+x($h*Ih);u[Gh>>2]=x(x(Uh*Jh)+x(Zh*Kh))+x(Th*Ih);u[Gh+56>>2]=mi+x(x(x(Rh*Xh)+x(Yh*Ph))+x(Qh*Wh));u[Gh+52>>2]=li+x(x(x(Rh*Nh)+x(Yh*Oh))+x(Qh*Mh));u[Gh+48>>2]=ki+x(x(x(Rh*Jh)+x(Yh*Kh))+x(Qh*Ih));n[q[q[a>>2]+28>>2]](a,Gh,Sh,Fh);if((ai|0)>0){continue}break}break b;default:Hh=q[vh+44>>2];q[Gh+8>>2]=q[vh+40>>2];q[Gh+12>>2]=Hh;Hh=q[vh+36>>2];q[Gh>>2]=q[vh+32>>2];q[Gh+4>>2]=Hh;Ih=x(n[q[q[vh>>2]+48>>2]](vh));Jh=x(n[q[q[vh>>2]+48>>2]](vh));Kh=x(x(n[q[q[vh>>2]+48>>2]](vh))+u[Gh+8>>2]);u[Gh+8>>2]=Kh;Ih=x(Ih+u[Gh>>2]);u[Gh>>2]=Ih;Jh=x(Jh+u[Gh+4>>2]);u[Gh+4>>2]=Jh;a=n[q[q[a>>2]+20>>2]](a)|0;q[Gh+140>>2]=0;u[Gh+136>>2]=-Kh;u[Gh+132>>2]=-Jh;u[Gh+128>>2]=-Ih;n[q[q[a>>2]+80>>2]](a,Gh+128|0,Gh,uh,Fh);break b;case 7:Ih=x(n[q[q[vh>>2]+48>>2]](vh));a=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[a>>2]+24>>2]](a,Ih,uh,Fh);break b;case 8:Hh=q[vh+96>>2];if((Hh|0)<1){break b}while(1){Hh=Hh+ -1|0;Sh=q[vh+104>>2]+(Hh<<4)|0;Ih=u[Sh+8>>2];Jh=u[Sh>>2];Kh=u[Sh+4>>2];Sh=n[q[q[a>>2]+20>>2]](a)|0;Th=u[q[vh+124>>2]+(Hh<<2)>>2];Uh=u[uh+48>>2];Zh=u[uh+52>>2];$h=u[uh+56>>2];Mh=u[uh+8>>2];Nh=u[uh>>2];Oh=u[uh+4>>2];Wh=u[uh+24>>2];Xh=u[uh+16>>2];Ph=u[uh+20>>2];Qh=u[uh+40>>2];Rh=u[uh+32>>2];Yh=u[uh+36>>2];q[Gh+60>>2]=0;q[Gh+44>>2]=0;q[Gh+28>>2]=0;q[Gh+12>>2]=0;Lh=x(Rh*x(0));Vh=x(Yh*x(0));u[Gh+40>>2]=Qh+x(Lh+Vh);_h=x(Lh+Yh);Lh=x(Qh*x(0));u[Gh+36>>2]=_h+Lh;u[Gh+32>>2]=x(Rh+Vh)+Lh;Lh=x(Xh*x(0));Vh=x(Ph*x(0));u[Gh+24>>2]=Wh+x(Lh+Vh);_h=x(Lh+Ph);Lh=x(Wh*x(0));u[Gh+20>>2]=_h+Lh;u[Gh+16>>2]=x(Xh+Vh)+Lh;Lh=x(Nh*x(0));Vh=x(Oh*x(0));u[Gh+8>>2]=Mh+x(Lh+Vh);_h=x(Lh+Oh);Lh=x(Mh*x(0));u[Gh+4>>2]=_h+Lh;u[Gh>>2]=x(Nh+Vh)+Lh;u[Gh+56>>2]=$h+x(x(x(Jh*Rh)+x(Kh*Yh))+x(Ih*Qh));u[Gh+52>>2]=Zh+x(x(x(Jh*Xh)+x(Kh*Ph))+x(Ih*Wh));u[Gh+48>>2]=Uh+x(x(x(Jh*Nh)+x(Kh*Oh))+x(Ih*Mh));n[q[q[Sh>>2]+24>>2]](Sh,Th,Gh,Fh);if((Hh|0)>0){continue}break}break b;case 9:Hh=q[vh+56>>2];vh=vh+32|0;Ih=u[(Hh<<2)+vh>>2];Jh=u[vh+((Hh+2|0)%3<<2)>>2];a=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[a>>2]+84>>2]](a,Jh,Ih,Hh,uh,Fh);break b;case 10:Hh=q[vh+72>>2];Ih=u[vh+60>>2];Jh=u[vh+64>>2];a=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[a>>2]+92>>2]](a,Ih,Jh,Hh,uh,Fh);break b;case 12:Hh=q[vh+56>>2];Ih=x(n[q[q[vh>>2]+92>>2]](vh));Sh=q[vh+44>>2];q[Gh+8>>2]=q[vh+40>>2];q[Gh+12>>2]=Sh;Sh=q[vh+36>>2];q[Gh>>2]=q[vh+32>>2];q[Gh+4>>2]=Sh;Jh=x(n[q[q[vh>>2]+48>>2]](vh));Kh=x(n[q[q[vh>>2]+48>>2]](vh));u[Gh+8>>2]=x(n[q[q[vh>>2]+48>>2]](vh))+u[Gh+8>>2];u[Gh>>2]=Jh+u[Gh>>2];u[Gh+4>>2]=Kh+u[Gh+4>>2];Jh=u[(Hh<<2)+Gh>>2];a=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[a>>2]+88>>2]](a,Ih,Jh,Hh,uh,Fh);break b;case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 11:case 13:case 14:case 15:case 16:case 17:case 18:case 19:case 20:case 21:case 22:case 23:case 24:case 25:case 26:case 28:case 29:break c;case 27:break d}}Ih=u[vh+68>>2];a=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[a>>2]+96>>2]](a,vh+52|0,Ih,uh,Fh);break b}e:{if((Hh|0)>6){break e}ci=q[vh+56>>2];if(ci){if(q[ci+28>>2]<1){break e}while(1){Kh=x(0);f:{hi=w(gi,36);Hh=hi+q[ci+36>>2]|0;fi=q[Hh+4>>2];if(!fi){Ih=x(0);Jh=x(0);break f}Ih=x(0);Jh=x(0);if((fi|0)<1){break f}bi=q[Hh+12>>2];Hh=q[(bi+(fi<<2)|0)+ -4>>2];ai=0;while(1){Sh=q[(ai<<2)+bi>>2];ii=Sh<<4;bi=ii+q[ci+16>>2]|0;_h=u[bi>>2];di=u[bi+4>>2];ei=u[bi+8>>2];bi=n[q[q[a>>2]+20>>2]](a)|0;ji=q[ci+16>>2];Hh=ji+(Hh<<4)|0;Mh=u[Hh+8>>2];Nh=u[Hh>>2];Oh=u[Hh+4>>2];Wh=u[uh+48>>2];Xh=u[uh+8>>2];Ph=u[uh>>2];Qh=u[uh+4>>2];Rh=u[uh+52>>2];Yh=u[uh+24>>2];Th=u[uh+16>>2];Uh=u[uh+20>>2];Zh=u[uh+56>>2];$h=u[uh+40>>2];Lh=u[uh+32>>2];Vh=u[uh+36>>2];q[Gh+12>>2]=0;u[Gh+8>>2]=Zh+x(x(x(Nh*Lh)+x(Oh*Vh))+x(Mh*$h));u[Gh+4>>2]=Rh+x(x(x(Nh*Th)+x(Oh*Uh))+x(Mh*Yh));u[Gh>>2]=Wh+x(x(x(Nh*Ph)+x(Oh*Qh))+x(Mh*Xh));Hh=ii+ji|0;Mh=u[Hh+8>>2];Nh=u[Hh>>2];Oh=u[Hh+4>>2];q[Gh+140>>2]=0;u[Gh+136>>2]=Zh+x(x(x(Lh*Nh)+x(Vh*Oh))+x($h*Mh));u[Gh+132>>2]=Rh+x(x(x(Th*Nh)+x(Uh*Oh))+x(Yh*Mh));u[Gh+128>>2]=Wh+x(x(x(Ph*Nh)+x(Qh*Oh))+x(Xh*Mh));n[q[q[bi>>2]+16>>2]](bi,Gh,Gh+128|0,Fh);Jh=x(Jh+ei);Ih=x(Ih+di);Kh=x(Kh+_h);ai=ai+1|0;Hh=q[ci+36>>2]+hi|0;if((ai|0)>=q[Hh+4>>2]){break f}bi=q[Hh+12>>2];Hh=Sh;continue}}Hh=n[q[q[a>>2]+20>>2]](a)|0;if(n[q[q[Hh>>2]+56>>2]](Hh)&16384){q[Gh+8>>2]=0;q[Gh+12>>2]=0;q[Gh>>2]=1065353216;q[Gh+4>>2]=1065353216;Hh=q[ci+36>>2]+hi|0;Lh=u[Hh+28>>2];Vh=u[Hh+20>>2];_h=u[Hh+24>>2];Hh=n[q[q[a>>2]+20>>2]](a)|0;Mh=u[uh+48>>2];Nh=u[uh+8>>2];Oh=u[uh>>2];Wh=u[uh+4>>2];Xh=u[uh+52>>2];Ph=u[uh+24>>2];Qh=u[uh+16>>2];Rh=u[uh+20>>2];Yh=u[uh+56>>2];Th=u[uh+40>>2];Uh=u[uh+32>>2];Zh=u[uh+36>>2];q[Gh+140>>2]=0;$h=x(x(1)/x(fi|0));Kh=x($h*Kh);Ih=x($h*Ih);Jh=x($h*Jh);u[Gh+136>>2]=Yh+x(x(x(Uh*Kh)+x(Zh*Ih))+x(Th*Jh));u[Gh+132>>2]=Xh+x(x(x(Kh*Qh)+x(Ih*Rh))+x(Jh*Ph));u[Gh+128>>2]=Mh+x(x(x(Kh*Oh)+x(Ih*Wh))+x(Jh*Nh));q[Gh+124>>2]=0;Kh=x(Kh+Vh);Ih=x(Ih+_h);Jh=x(Jh+Lh);u[Gh+120>>2]=Yh+x(x(x(Uh*Kh)+x(Zh*Ih))+x(Th*Jh));u[Gh+116>>2]=Xh+x(x(x(Kh*Qh)+x(Ih*Rh))+x(Jh*Ph));u[Gh+112>>2]=Mh+x(x(x(Kh*Oh)+x(Ih*Wh))+x(Jh*Nh));n[q[q[Hh>>2]+16>>2]](Hh,Gh+128|0,Gh+112|0,Gh);}gi=gi+1|0;if((gi|0)<q[ci+28>>2]){continue}break}break e}if((n[q[q[vh>>2]+100>>2]](vh)|0)<1){break e}Hh=0;while(1){n[q[q[vh>>2]+104>>2]](vh,Hh,Gh,Gh+128|0);Ih=u[uh+48>>2];Jh=u[uh+8>>2];Kh=u[uh>>2];Mh=u[uh+4>>2];Nh=u[uh+52>>2];Oh=u[uh+24>>2];Wh=u[uh+16>>2];Xh=u[uh+20>>2];Ph=u[uh+56>>2];Qh=u[uh+40>>2];Rh=u[uh+32>>2];Yh=u[uh+36>>2];q[Gh+124>>2]=0;Th=u[Gh>>2];Uh=u[Gh+4>>2];Zh=u[Gh+8>>2];u[Gh+120>>2]=Ph+x(x(x(Rh*Th)+x(Yh*Uh))+x(Qh*Zh));u[Gh+116>>2]=Nh+x(x(x(Th*Wh)+x(Uh*Xh))+x(Zh*Oh));u[Gh+112>>2]=Ih+x(x(x(Th*Kh)+x(Uh*Mh))+x(Zh*Jh));q[Gh+108>>2]=0;Lh=Ph;Ph=u[Gh+128>>2];Uh=x(Rh*Ph);Rh=u[Gh+132>>2];Th=Qh;Qh=u[Gh+136>>2];u[Gh+104>>2]=Lh+x(x(Uh+x(Yh*Rh))+x(Th*Qh));u[Gh+100>>2]=Nh+x(x(x(Wh*Ph)+x(Xh*Rh))+x(Oh*Qh));u[Gh+96>>2]=Ih+x(x(x(Kh*Ph)+x(Mh*Rh))+x(Jh*Qh));Sh=n[q[q[a>>2]+20>>2]](a)|0;n[q[q[Sh>>2]+16>>2]](Sh,Gh+112|0,Gh+96|0,Fh);Hh=Hh+1|0;if((Hh|0)<(n[q[q[vh>>2]+100>>2]](vh)|0)){continue}break}}Hh=q[vh+4>>2];if(Hh+ -21>>>0<=8){q[Gh+136>>2]=1566444395;q[Gh+140>>2]=0;q[Gh+128>>2]=1566444395;q[Gh+132>>2]=1566444395;q[Gh+120>>2]=-581039253;q[Gh+124>>2]=0;q[Gh+112>>2]=-581039253;q[Gh+116>>2]=-581039253;q[Gh+8>>2]=n[q[q[a>>2]+20>>2]](a);q[Gh+4>>2]=10272;q[Gh>>2]=10248;Hh=q[Fh+12>>2];q[Gh+20>>2]=q[Fh+8>>2];q[Gh+24>>2]=Hh;Hh=q[Fh+4>>2];q[Gh+12>>2]=q[Fh>>2];q[Gh+16>>2]=Hh;Hh=q[uh+12>>2];q[Gh+36>>2]=q[uh+8>>2];q[Gh+40>>2]=Hh;Hh=q[uh+4>>2];q[Gh+28>>2]=q[uh>>2];q[Gh+32>>2]=Hh;Hh=q[uh+20>>2];q[Gh+44>>2]=q[uh+16>>2];q[Gh+48>>2]=Hh;Hh=q[uh+28>>2];q[Gh+52>>2]=q[uh+24>>2];q[Gh+56>>2]=Hh;Hh=q[uh+44>>2];q[Gh+68>>2]=q[uh+40>>2];q[Gh+72>>2]=Hh;Hh=q[uh+36>>2];q[Gh+60>>2]=q[uh+32>>2];q[Gh+64>>2]=Hh;Hh=q[uh+52>>2];q[Gh+76>>2]=q[uh+48>>2];q[Gh+80>>2]=Hh;Hh=q[uh+60>>2];q[Gh+84>>2]=q[uh+56>>2];q[Gh+88>>2]=Hh;n[q[q[vh>>2]+64>>2]](vh,Gh,Gh+112|0,Gh+128|0);Hh=q[vh+4>>2];}if((Hh|0)!=3){break b}q[Gh+136>>2]=1566444395;q[Gh+140>>2]=0;q[Gh+128>>2]=1566444395;q[Gh+132>>2]=1566444395;q[Gh+120>>2]=-581039253;q[Gh+124>>2]=0;q[Gh+112>>2]=-581039253;q[Gh+116>>2]=-581039253;q[Gh+8>>2]=n[q[q[a>>2]+20>>2]](a);q[Gh+4>>2]=10272;q[Gh>>2]=10248;a=q[Fh+12>>2];q[Gh+20>>2]=q[Fh+8>>2];q[Gh+24>>2]=a;a=q[Fh+4>>2];q[Gh+12>>2]=q[Fh>>2];q[Gh+16>>2]=a;a=q[uh+12>>2];q[Gh+36>>2]=q[uh+8>>2];q[Gh+40>>2]=a;a=q[uh+4>>2];q[Gh+28>>2]=q[uh>>2];q[Gh+32>>2]=a;a=q[uh+20>>2];q[Gh+44>>2]=q[uh+16>>2];q[Gh+48>>2]=a;a=q[uh+28>>2];q[Gh+52>>2]=q[uh+24>>2];q[Gh+56>>2]=a;a=q[uh+44>>2];q[Gh+68>>2]=q[uh+40>>2];q[Gh+72>>2]=a;a=q[uh+36>>2];q[Gh+60>>2]=q[uh+32>>2];q[Gh+64>>2]=a;a=q[uh+52>>2];q[Gh+76>>2]=q[uh+48>>2];q[Gh+80>>2]=a;a=q[uh+60>>2];q[Gh+84>>2]=q[uh+56>>2];q[Gh+88>>2]=a;a=q[vh+96>>2];n[q[q[a>>2]+8>>2]](a,Gh|4,Gh+112|0,Gh+128|0);}P=Gh+144|0;}function SA(a,uh,vh,Fh){a=a|0;uh=uh|0;vh=vh|0;Fh=Fh|0;var ni=0,oi=0,pi=x(0),qi=x(0),ri=x(0),si=x(0),ti=x(0),ui=x(0),vi=0;ni=P-256|0;P=ni;q[ni+32>>2]=10064;oi=q[uh+12>>2];q[ni+76>>2]=q[uh+8>>2];q[ni+80>>2]=oi;oi=q[uh+4>>2];q[ni+68>>2]=q[uh>>2];q[ni+72>>2]=oi;oi=q[vh+12>>2];q[ni+92>>2]=q[vh+8>>2];q[ni+96>>2]=oi;oi=q[vh>>2];vi=q[vh+4>>2];q[ni+104>>2]=0;q[ni+108>>2]=0;q[ni+112>>2]=0;q[ni+116>>2]=0;q[ni+124>>2]=0;q[ni+128>>2]=0;q[ni+120>>2]=1065353216;q[ni+132>>2]=0;q[ni+136>>2]=0;q[ni+140>>2]=1065353216;q[ni+144>>2]=0;q[ni+84>>2]=oi;q[ni+88>>2]=vi;q[ni+248>>2]=Fh;q[ni+100>>2]=1065353216;q[ni+244>>2]=a;Fh=q[ni+72>>2];q[ni+148>>2]=q[ni+68>>2];q[ni+152>>2]=Fh;Fh=q[ni+80>>2];q[ni+156>>2]=q[ni+76>>2];q[ni+160>>2]=Fh;q[ni+164>>2]=1065353216;q[ni+176>>2]=0;q[ni+180>>2]=0;q[ni+168>>2]=0;q[ni+172>>2]=0;q[ni+184>>2]=1065353216;q[ni+196>>2]=0;q[ni+200>>2]=0;q[ni+188>>2]=0;q[ni+192>>2]=0;q[ni+204>>2]=1065353216;q[ni+208>>2]=0;Fh=q[vh+12>>2];q[ni+220>>2]=q[vh+8>>2];q[ni+224>>2]=Fh;Fh=q[vh+4>>2];q[ni+212>>2]=q[vh>>2];q[ni+216>>2]=Fh;si=x(u[vh>>2]-u[uh>>2]);pi=x(u[vh+4>>2]-u[uh+4>>2]);qi=x(u[vh+8>>2]-u[uh+8>>2]);ri=x(x(1)/x(E(x(x(x(si*si)+x(pi*pi))+x(qi*qi)))));qi=x(qi*ri);ti=qi==x(0)?x(0xde0b6b000000000):x(x(1)/qi);u[ni+44>>2]=ti;pi=x(pi*ri);ui=pi==x(0)?x(0xde0b6b000000000):x(x(1)/pi);u[ni+40>>2]=ui;q[ni+60>>2]=ti<x(0);q[ni+56>>2]=ui<x(0);ri=x(si*ri);si=ri==x(0)?x(0xde0b6b000000000):x(x(1)/ri);u[ni+36>>2]=si;q[ni+52>>2]=si<x(0);u[ni+64>>2]=x(x(ri*x(u[ni+84>>2]-u[ni+68>>2]))+x(pi*x(u[ni+88>>2]-u[ni+72>>2])))+x(qi*x(u[ni+92>>2]-u[ni+76>>2]));a=q[a+68>>2];q[ni+24>>2]=0;q[ni+28>>2]=0;q[ni+16>>2]=0;q[ni+20>>2]=0;q[ni+8>>2]=0;q[ni+12>>2]=0;q[ni>>2]=0;q[ni+4>>2]=0;n[q[q[a>>2]+24>>2]](a,uh,vh,ni+32|0,ni+16|0,ni);P=ni+256|0;}function TA(a,uh){var vh=0;vh=P-16|0;q[vh+12>>2]=a;u[vh+8>>2]=uh;a=q[vh+12>>2];q[a+304>>2]=q[a+304>>2]+1;u[a+236>>2]=u[vh+8>>2];}function UA(a,uh,Fh,wi,xi,yi,zi,Ai){var Bi=0;Bi=P-32|0;P=Bi;q[Bi+24>>2]=-1;q[Bi+28>>2]=-1;q[Bi+20>>2]=yi;q[Bi+16>>2]=wi;q[Bi+12>>2]=xi;q[Bi+8>>2]=0;Pe(a,uh,Fh,Bi+8|0,zi,Ai);P=Bi+32|0;}function VA(a,uh,Fh,wi){var xi=0,yi=x(0),zi=x(0),Ai=x(0),Ci=x(0),Di=x(0),Ei=x(0),Fi=0,Gi=0,Hi=0,Ii=0,Ji=x(0),Ki=0,Li=x(0),Mi=0,Ni=0,Oi=x(0),Pi=0,Qi=0,Ri=x(0),Si=0,Ti=0,Ui=0,Vi=0,Wi=0,Xi=0;xi=P-544|0;P=xi;a:{if(!a){break a}yi=u[uh+8>>2];zi=u[Fh+8>>2];Ci=u[uh>>2];Ai=u[Fh>>2];Di=u[uh+4>>2];Ji=u[Fh+4>>2];q[xi+32>>2]=a;Ei=x(zi-yi);Li=Ei;yi=x(Ai-Ci);zi=x(Ji-Di);Ai=x(x(1)/x(E(x(x(x(yi*yi)+x(zi*zi))+x(Ei*Ei)))));Ei=x(Ei*Ai);Ji=yi;yi=x(yi*Ai);Oi=zi;zi=x(zi*Ai);Oi=x(x(Li*Ei)+x(x(Ji*yi)+x(Oi*zi)));Ei=Ei==x(0)?x(0xde0b6b000000000):x(x(1)/Ei);a=Ei<x(0);Si=(a<<4)+xi|8;zi=zi==x(0)?x(0xde0b6b000000000):x(x(1)/zi);Fh=zi<x(0);Ti=(Fh<<4)+xi|4;Ui=((a^1)<<4)+xi|8;Vi=((Fh^1)<<4)+xi|4;yi=yi==x(0)?x(0xde0b6b000000000):x(x(1)/yi);a=yi<x(0);Wi=(a<<4)+xi|0;Xi=((a^1)<<4)+xi|0;Pi=126;Ki=128;Gi=xi+32|0;Hi=128;Mi=1;while(1){a=Mi+ -1|0;Qi=a<<2;Fi=q[Qi+Gi>>2];Fh=q[Fi+4>>2];q[xi>>2]=q[Fi>>2];q[xi+4>>2]=Fh;Fh=q[Fi+12>>2];q[xi+8>>2]=q[Fi+8>>2];q[xi+12>>2]=Fh;Fh=q[Fi+28>>2];q[xi+24>>2]=q[Fi+24>>2];q[xi+28>>2]=Fh;Fh=q[Fi+20>>2];q[xi+16>>2]=q[Fi+16>>2];q[xi+20>>2]=Fh;b:{c:{d:{e:{f:{g:{h:{Ai=x(zi*x(u[Ti>>2]-Di));Ji=x(yi*x(u[Xi>>2]-Ci));i:{if(Ai>Ji){break i}Ci=x(yi*x(u[Wi>>2]-Ci));Di=x(zi*x(u[Vi>>2]-Di));if(Ci>Di){break i}Ri=u[uh+8>>2];Li=x(Ei*x(u[Si>>2]-Ri));Di=Di<Ji?Di:Ji;if(Li>Di){break i}Ci=Ai>Ci?Ai:Ci;Ai=x(Ei*x(u[Ui>>2]-Ri));if(Ci>Ai|(Li>Ci?Li:Ci)<Oi^1|(Ai<Di?Ai:Di)>x(0)^1){break i}if(q[Fi+40>>2]){if((a|0)<=(Pi|0)){Fh=Gi;Ii=Hi;break c}Ii=Hi<<1;if((Hi|0)>=(Ii|0)){Fh=Gi;break d}if((Ki|0)>=(Ii|0)){Fh=Gi;break e}if(!Hi){Fh=0;break h}q[6657]=q[6657]+1;Fh=n[q[5255]](Hi<<3,16)|0;if((Hi|0)<1){break h}a=0;while(1){Ki=a<<2;q[Ki+Fh>>2]=q[Gi+Ki>>2];a=a+1|0;if((Hi|0)!=(a|0)){continue}break}if(!Ni){break f}break g}n[q[q[wi>>2]+12>>2]](wi,Fi);}Fh=Gi;Ii=Hi;break b}a=Ni;Ni=1;if(!a){break f}Ki=Ii;if(!Gi){break e}}if(Gi){q[6658]=q[6658]+1;n[q[5256]](Gi);}}Ni=1;Ki=Ii;}a=Hi<<2;_(a+Fh|0,0,a);}Pi=Ii+ -2|0;}q[Fh+Qi>>2]=q[Fi+36>>2];q[(Mi<<2)+Fh>>2]=q[Fi+40>>2];a=Mi+1|0;}if(a){Di=u[uh+4>>2];Ci=u[uh>>2];Gi=Fh;Hi=Ii;Mi=a;continue}break}if(!Ni|!Fh){break a}if(Fh){q[6658]=q[6658]+1;n[q[5256]](Fh);}}P=xi+544|0;}function WA(a,uh,Fh,wi,Yi,Zi){var _i=0;_i=P-32|0;P=_i;q[_i+24>>2]=-1;q[_i+28>>2]=-1;q[_i+20>>2]=Yi;q[_i+16>>2]=Fh;q[_i+12>>2]=wi;q[_i+8>>2]=0;Qe(a,uh,_i+8|0,Zi);P=_i+32|0;}function XA(a){a=a|0;var uh=0,Fh=0,wi=0,Yi=0,Zi=0,$i=0,aj=0,bj=0;Fh=P-16|0;P=Fh;n[q[5253]](8469);n[q[q[a>>2]+8>>2]](a);n[q[q[a>>2]+12>>2]](a);uh=q[a+24>>2];n[q[5253]](8503);if(uh){wi=q[a+68>>2];Zi=uh,$i=n[q[q[wi>>2]+36>>2]](wi)|0,aj=a+28|0,bj=q[a+24>>2],Yi=q[q[uh>>2]+32>>2],n[Yi](Zi|0,$i|0,aj|0,bj|0);}n[q[5254]]();n[q[5254]]();P=Fh+16|0;}function YA(a){a=a|0;var cj=0,dj=0;cj=P-16|0;P=cj;n[q[5253]](8443);dj=q[a+68>>2];n[q[q[dj>>2]+32>>2]](dj,q[a+24>>2]);n[q[5254]]();P=cj+16|0;}function ZA(a){a=a|0;var ej=0,fj=0,gj=0,hj=0,ij=0;gj=P-16|0;P=gj;n[q[5253]](8431);ej=q[a+8>>2];if((ej|0)>=1){while(1){hj=q[q[a+16>>2]+(fj<<2)>>2];a:{b:{if(r[a+76|0]){break b}ij=q[hj+220>>2]+ -2|0;if(ij>>>0>3){break b}switch(ij-1|0){case 0:case 1:break b;default:break a}}_A(a,hj);ej=q[a+8>>2];}fj=fj+1|0;if((fj|0)<(ej|0)){continue}break}}n[q[5254]]();P=gj+16|0;}function _A(a,jj){var kj=0,lj=x(0),mj=x(0),nj=x(0),oj=x(0),pj=x(0),qj=x(0),rj=x(0),sj=0;kj=P+ -64|0;P=kj;sj=q[jj+192>>2];n[q[q[sj>>2]+8>>2]](sj,jj+4|0,kj+48|0,kj+32|0);lj=u[5249];nj=x(u[kj+48>>2]-lj);u[kj+48>>2]=nj;oj=x(u[kj+52>>2]-lj);u[kj+52>>2]=oj;pj=x(u[kj+56>>2]-lj);u[kj+56>>2]=pj;mj=x(lj+u[kj+32>>2]);u[kj+32>>2]=mj;qj=x(lj+u[kj+36>>2]);u[kj+36>>2]=qj;rj=x(lj+u[kj+40>>2]);u[kj+40>>2]=rj;a:{if(r[jj+204|0]&3|(!r[a+44|0]|q[jj+252>>2]!=2)){break a}sj=q[jj+192>>2];n[q[q[sj>>2]+8>>2]](sj,jj+68|0,kj+16|0,kj);oj=x(u[kj+16>>2]-lj);u[kj+16>>2]=oj;pj=x(u[kj+20>>2]-lj);u[kj+20>>2]=pj;mj=x(u[kj+24>>2]-lj);u[kj+24>>2]=mj;qj=x(lj+u[kj>>2]);u[kj>>2]=qj;rj=x(lj+u[kj+4>>2]);u[kj+4>>2]=rj;lj=x(lj+u[kj+8>>2]);u[kj+8>>2]=lj;nj=u[kj+48>>2];if(!!(oj<nj)){u[kj+48>>2]=oj;nj=oj;}oj=u[kj+52>>2];if(!!(pj<oj)){u[kj+52>>2]=pj;oj=pj;}pj=u[kj+56>>2];if(!!(mj<pj)){u[kj+56>>2]=mj;pj=mj;}mj=u[kj+28>>2];if(!!(mj<u[kj+60>>2])){u[kj+60>>2]=mj;}mj=u[kj+32>>2];if(!!(mj<qj)){u[kj+32>>2]=qj;mj=qj;}qj=u[kj+36>>2];if(!!(qj<rj)){u[kj+36>>2]=rj;qj=rj;}rj=u[kj+40>>2];if(!!(rj<lj)){u[kj+40>>2]=lj;rj=lj;}lj=u[kj+12>>2];if(!(u[kj+44>>2]<lj)){break a}u[kj+44>>2]=lj;}sj=q[a+68>>2];b:{c:{if(!(o[jj+204|0]&1)){nj=x(mj-nj);mj=x(nj*nj);nj=x(qj-oj);mj=x(mj+x(nj*nj));nj=x(rj-pj);if(!(x(mj+x(nj*nj))<x(999999995904))){break c}}n[q[q[sj>>2]+16>>2]](sj,q[jj+188>>2],kj+48|0,kj+32|0,q[a+24>>2]);break b}if((q[jj+220>>2]&-2)!=4){q[jj+220>>2]=5;}if(r[24152]){break b}jj=q[a+72>>2];if(!jj){break b}o[24152]=1;n[q[q[jj>>2]+44>>2]](jj,8240);jj=q[a+72>>2];n[q[q[jj>>2]+44>>2]](jj,8289);jj=q[a+72>>2];n[q[q[jj>>2]+44>>2]](jj,8357);a=q[a+72>>2];n[q[q[a>>2]+44>>2]](a,8422);}P=kj- -64|0;}function $A(a){a=a|0;aa(Se(a));}function aB(a,jj,tj){q[a>>2]=8188;o[a+76|0]=1;q[a+72>>2]=0;q[a+68>>2]=tj;q[a+28>>2]=0;q[a+32>>2]=0;q[a+24>>2]=jj;o[a+20|0]=1;q[a+16>>2]=0;q[a- -64>>2]=0;o[a+60|0]=0;q[a+56>>2]=1025758986;o[a+54|0]=1;p[a+52>>1]=256;q[a+48>>2]=0;o[a+44|0]=1;q[a+36>>2]=1;q[a+40>>2]=1065353216;q[a+8>>2]=0;q[a+12>>2]=0;}function bB(a,jj,tj,uj){a=a|0;jj=jj|0;tj=tj|0;uj=uj|0;var vj=0,wj=0,xj=x(0),yj=x(0),zj=x(0),Aj=x(0),Bj=x(0),Cj=0,Dj=x(0);vj=P-688|0;P=vj;Cj=_c(vj+576|0);q[vj+580>>2]=1;q[vj+576>>2]=7216;wj=q[jj+12>>2];q[vj+644>>2]=q[jj+8>>2];q[vj+648>>2]=wj;wj=q[jj+4>>2];q[vj+636>>2]=q[jj>>2];q[vj+640>>2]=wj;wj=q[jj+28>>2];q[vj+660>>2]=q[jj+24>>2];q[vj+664>>2]=wj;wj=q[jj+20>>2];q[vj+652>>2]=q[jj+16>>2];q[vj+656>>2]=wj;wj=q[jj+44>>2];q[vj+676>>2]=q[jj+40>>2];q[vj+680>>2]=wj;wj=q[jj+36>>2];q[vj+668>>2]=q[jj+32>>2];q[vj+672>>2]=wj;q[vj+624>>2]=q[a+204>>2];o[vj+548|0]=0;q[vj+524>>2]=953267991;q[vj+208>>2]=4956;wj=q[a+4>>2];jj=vj+184|0;q[jj+20>>2]=0;q[jj+16>>2]=vj+576;q[jj+12>>2]=wj;q[jj+8>>2]=vj+208;q[jj+4>>2]=vj+216;q[jj>>2]=7992;q[vj+8>>2]=7628;q[vj+172>>2]=1065353216;q[vj+176>>2]=0;q[vj+180>>2]=q[a+208>>2];wj=jj;jj=a+136|0;a:{if(!Li(wj,a+8|0,a+72|0,jj,jj,vj+8|0)){break a}yj=u[vj+140>>2];zj=u[vj+144>>2];xj=u[vj+148>>2];Aj=x(x(x(yj*yj)+x(zj*zj))+x(xj*xj));if(!(Aj>x(9999999747378752e-20))){break a}Bj=u[vj+172>>2];if(!(Bj<u[a+200>>2])){break a}Dj=xj;xj=x(x(1)/x(E(Aj)));u[vj+148>>2]=Dj*xj;u[vj+144>>2]=zj*xj;u[vj+140>>2]=yj*xj;x(n[q[q[a>>2]+12>>2]](a,vj+140|0,vj+156|0,Bj,tj,uj));}Vb(Cj);P=vj+688|0;}function cB(a,jj,tj,uj){a=a|0;jj=jj|0;tj=tj|0;uj=uj|0;var Ej=x(0),Fj=x(0),Gj=x(0),Hj=0,Ij=x(0),Jj=x(0),Kj=x(0),Lj=x(0),Mj=x(0),Nj=x(0),Oj=x(0),Pj=x(0),Qj=x(0),Rj=x(0),Sj=x(0),Tj=x(0),Uj=x(0),Vj=x(0),Wj=x(0),Xj=x(0),Yj=x(0),Zj=x(0);Hj=P-32|0;P=Hj;Qj=u[jj+24>>2];Yj=u[jj+40>>2];Rj=u[jj+36>>2];Ij=u[jj+20>>2];Lj=u[jj+8>>2];Sj=u[jj+16>>2];Nj=u[jj+4>>2];Tj=u[jj+32>>2];Oj=u[jj>>2];q[Hj+28>>2]=0;Fj=x(Sj-Oj);Jj=x(Rj-Nj);Gj=x(Ij-Nj);Mj=x(Tj-Oj);Ej=x(x(Fj*Jj)-x(Gj*Mj));u[Hj+24>>2]=Ej;Kj=x(Qj-Lj);Wj=x(Kj*Mj);Mj=x(Yj-Lj);Fj=x(Wj-x(Fj*Mj));u[Hj+20>>2]=Fj;Jj=x(x(Gj*Mj)-x(Kj*Jj));u[Hj+16>>2]=Jj;Pj=u[a+4>>2];Kj=u[a+8>>2];Uj=u[a+12>>2];Gj=x(x(Lj*Ej)+x(x(Oj*Jj)+x(Nj*Fj)));Mj=x(x(x(x(Jj*Pj)+x(Fj*Kj))+x(Ej*Uj))-Gj);Xj=u[a+20>>2];Vj=u[a+24>>2];Zj=u[a+28>>2];Gj=x(x(x(x(Jj*Xj)+x(Fj*Vj))+x(Ej*Zj))-Gj);a:{if(x(Mj*Gj)>=x(0)){break a}jj=q[a+36>>2];if(jj&1?!!(Mj<=x(0)):0){break a}Gj=x(Mj/x(Mj-Gj));if(!(Gj<u[a+40>>2])){break a}Wj=Kj;Kj=x(x(1)-Gj);Vj=x(x(Vj*Gj)+x(Wj*Kj));Ij=x(Ij-Vj);Pj=x(x(Xj*Gj)+x(Pj*Kj));Oj=x(Oj-Pj);Nj=x(Nj-Vj);Sj=x(Sj-Pj);Kj=x(x(Zj*Gj)+x(Uj*Kj));Qj=x(Qj-Kj);Lj=x(Lj-Kj);Xj=x(x(Ej*Ej)+x(x(Jj*Jj)+x(Fj*Fj)));Uj=x(Xj*x(-9999999747378752e-20));if(!(x(x(Ej*x(x(Ij*Oj)-x(Nj*Sj)))+x(x(Jj*x(x(Nj*Qj)-x(Lj*Ij)))+x(Fj*x(x(Lj*Sj)-x(Qj*Oj)))))>=Uj)){break a}Rj=x(Rj-Vj);Tj=x(Tj-Pj);Pj=x(Ej*x(x(Rj*Sj)-x(Ij*Tj)));Wj=Ij;Ij=x(Yj-Kj);if(x(Pj+x(x(Jj*x(x(Wj*Ij)-x(Qj*Rj)))+x(Fj*x(x(Qj*Tj)-x(Ij*Sj)))))>=Uj^1|x(x(Ej*x(x(Nj*Tj)-x(Rj*Oj)))+x(x(Jj*x(x(Rj*Lj)-x(Ij*Nj)))+x(Fj*x(x(Ij*Oj)-x(Lj*Tj)))))>=Uj^1){break a}Ij=Ej;Ej=x(x(1)/x(E(Xj)));Lj=x(Ij*Ej);u[Hj+24>>2]=Lj;Fj=x(Fj*Ej);u[Hj+20>>2]=Fj;Ej=x(Jj*Ej);u[Hj+16>>2]=Ej;if(!(jj&2|Mj<=x(0)^1)){q[Hj+12>>2]=0;u[Hj+8>>2]=-Lj;u[Hj+4>>2]=-Fj;u[Hj>>2]=-Ej;u[a+40>>2]=n[q[q[a>>2]+12>>2]](a,Hj,Gj,tj,uj);break a}u[a+40>>2]=n[q[q[a>>2]+12>>2]](a,Hj+16|0,Gj,tj,uj);}P=Hj+32|0;}function dB(a,jj){var tj=0;tj=P-16|0;q[tj+12>>2]=a;u[tj+8>>2]=jj;a=q[tj+12>>2];q[a+304>>2]=q[a+304>>2]+1;u[a+228>>2]=u[tj+8>>2];}function eB(a,jj,uj,_j){a=a|0;jj=jj|0;uj=uj|0;_j=x(_j);var $j=0;if(!!(u[a+36>>2]>_j)){o[a+40|0]=1;$j=q[jj+4>>2];q[a+4>>2]=q[jj>>2];q[a+8>>2]=$j;$j=q[jj+12>>2];q[a+12>>2]=q[jj+8>>2];q[a+16>>2]=$j;jj=q[uj+4>>2];q[a+20>>2]=q[uj>>2];q[a+24>>2]=jj;jj=q[uj+12>>2];q[a+28>>2]=q[uj+8>>2];q[a+32>>2]=jj;u[a+36>>2]=_j;}}function fB(a,jj,uj){a=a|0;jj=jj|0;uj=uj|0;q[a+28>>2]=uj;q[a+20>>2]=jj;}function gB(a,jj,uj){a=a|0;jj=jj|0;uj=uj|0;q[a+24>>2]=uj;q[a+16>>2]=jj;}function hB(a,jj,uj,_j){a=a|0;jj=jj|0;uj=uj|0;_j=x(_j);var ak=0,bk=0,ck=x(0),dk=0,ek=x(0),fk=x(0),gk=x(0),hk=x(0),ik=0,jk=x(0),kk=0,lk=x(0),mk=0,nk=0,ok=x(0),qk=0,rk=0,sk=0,tk=x(0),uk=x(0),vk=x(0),wk=0,xk=x(0),yk=x(0),zk=x(0),Ak=x(0),Bk=x(0),Ck=x(0),Dk=x(0),Ek=x(0),Fk=x(0),Gk=x(0),Hk=x(0);ak=P-208|0;P=ak;a:{if(u[q[a+4>>2]+848>>2]<_j){break a}ok=u[uj+8>>2];fk=x(x(u[jj+8>>2]*_j)+ok);tk=u[uj+4>>2];jk=x(x(u[jj+4>>2]*_j)+tk);uk=u[uj>>2];lk=x(x(u[jj>>2]*_j)+uk);dk=q[a+4>>2];wk=q[dk+844>>2];mk=q[dk+836>>2];sk=q[q[a+8>>2]+8>>2];ik=(mk|0)==(sk|0);b:{if(!ik){bk=q[q[a+12>>2]+8>>2];ck=x(lk-u[bk+52>>2]);ek=x(jk-u[bk+56>>2]);gk=x(fk-u[bk+60>>2]);hk=x(x(x(ck*u[bk+12>>2])+x(ek*u[bk+28>>2]))+x(gk*u[bk+44>>2]));vk=x(x(x(ck*u[bk+8>>2])+x(ek*u[bk+24>>2]))+x(gk*u[bk+40>>2]));ck=x(x(x(ck*u[bk+4>>2])+x(ek*u[bk+20>>2]))+x(gk*u[bk+36>>2]));bk=sk;break b}ck=x(lk-u[mk+52>>2]);ek=x(jk-u[mk+56>>2]);gk=x(fk-u[mk+60>>2]);hk=x(x(x(ck*u[mk+12>>2])+x(ek*u[mk+28>>2]))+x(gk*u[mk+44>>2]));vk=x(x(x(ck*u[mk+8>>2])+x(ek*u[mk+24>>2]))+x(gk*u[mk+40>>2]));ck=x(x(x(ck*u[mk+4>>2])+x(ek*u[mk+20>>2]))+x(gk*u[mk+36>>2]));bk=q[q[a+12>>2]+8>>2];}xk=u[bk+20>>2];yk=u[bk+36>>2];zk=u[bk+40>>2];Ak=u[bk+8>>2];Bk=u[bk+24>>2];Ck=u[bk+44>>2];Dk=u[bk+60>>2];ek=u[bk+12>>2];gk=u[bk+52>>2];Ek=u[bk+28>>2];Fk=u[bk+56>>2];Gk=u[bk+4>>2];q[ak+28>>2]=0;Hk=ek;ek=x(uk-gk);gk=x(tk-Fk);ok=x(ok-Dk);u[ak+24>>2]=x(x(Hk*ek)+x(Ek*gk))+x(Ck*ok);u[ak+20>>2]=x(x(ek*Ak)+x(gk*Bk))+x(ok*zk);q[ak+12>>2]=0;u[ak+8>>2]=hk;u[ak+4>>2]=vk;u[ak>>2]=ck;u[ak+16>>2]=x(x(ek*Gk)+x(gk*xk))+x(ok*yk);bk=q[jj+12>>2];q[ak+72>>2]=q[jj+8>>2];q[ak+76>>2]=bk;bk=q[jj>>2];jj=q[jj+4>>2];q[ak+92>>2]=0;q[ak+96>>2]=0;q[ak+124>>2]=0;q[ak+128>>2]=0;q[ak+132>>2]=0;q[ak+136>>2]=0;q[ak+140>>2]=0;q[ak+144>>2]=0;q[ak+148>>2]=0;q[ak+152>>2]=0;q[ak+156>>2]=0;q[ak+160>>2]=0;q[ak+164>>2]=0;u[ak+52>>2]=jk;u[ak+56>>2]=fk;q[ak+60>>2]=0;q[ak+64>>2]=bk;q[ak+68>>2]=jj;q[ak+84>>2]=0;q[ak+88>>2]=0;u[ak+80>>2]=_j;q[ak+116>>2]=0;q[ak+120>>2]=0;u[ak+48>>2]=lk;jj=q[uj+12>>2];q[ak+40>>2]=q[uj+8>>2];q[ak+44>>2]=jj;jj=q[uj+4>>2];q[ak+32>>2]=q[uj>>2];q[ak+36>>2]=jj;uj=pk(dk,ak);jj=q[a+12>>2];bk=q[jj+8>>2];kk=q[a+8>>2];dk=q[kk+8>>2];c:{if(!ik){q[ak+100>>2]=q[a+20>>2];q[ak+104>>2]=q[a+16>>2];qk=q[a+28>>2];q[ak+108>>2]=qk;rk=q[a+24>>2];q[ak+112>>2]=rk;ik=q[jj>>2];ik=q[(ik?ik:jj)+4>>2];q[ak+200>>2]=ik;jj=q[kk>>2];kk=q[(jj?jj:kk)+4>>2];nk=kk;jj=dk;dk=ak+204|0;break c}q[ak+100>>2]=q[a+16>>2];q[ak+104>>2]=q[a+20>>2];qk=q[a+24>>2];q[ak+108>>2]=qk;rk=q[a+28>>2];q[ak+112>>2]=rk;ik=q[jj>>2];nk=q[(ik?ik:jj)+4>>2];q[ak+204>>2]=nk;jj=q[kk>>2];kk=q[(jj?jj:kk)+4>>2];ik=kk;jj=bk;bk=dk;dk=ak+200|0;}q[dk>>2]=kk;kk=q[bk+260>>2];_j=u[bk+240>>2];fk=u[bk+236>>2];jk=u[bk+232>>2];lk=u[bk+228>>2];dk=q[ik+4>>2]+ -21|0;d:{if(dk>>>0>10){break d}e:{switch(dk-1|0){case 9:if(!r[ik+180|0]){break d}bk=qk<<2;kk=q[bk+q[ik+172>>2]>>2];_j=u[bk+q[ik+152>>2]>>2];jk=u[bk+q[ik+132>>2]>>2];lk=u[bk+q[ik+92>>2]>>2];fk=u[bk+q[ik+112>>2]>>2];break d;case 0:case 1:case 3:case 5:case 6:case 7:case 8:break d;default:break e}}bk=q[bk+192>>2];if(q[bk+4>>2]!=31|!r[bk+180|0]){break d}dk=q[ik+12>>2]<<2;kk=q[dk+q[bk+172>>2]>>2];_j=u[dk+q[bk+152>>2]>>2];jk=u[dk+q[bk+132>>2]>>2];lk=u[dk+q[bk+92>>2]>>2];fk=u[dk+q[bk+112>>2]>>2];}bk=q[jj+260>>2];ck=u[jj+240>>2];ek=u[jj+236>>2];gk=u[jj+232>>2];hk=u[jj+228>>2];dk=q[nk+4>>2]+ -21|0;f:{if(dk>>>0>10){break f}g:{switch(dk-1|0){case 9:if(!r[nk+180|0]){break f}jj=rk<<2;bk=q[jj+q[nk+172>>2]>>2];ck=u[jj+q[nk+152>>2]>>2];gk=u[jj+q[nk+132>>2]>>2];hk=u[jj+q[nk+92>>2]>>2];ek=u[jj+q[nk+112>>2]>>2];break f;case 0:case 1:case 3:case 5:case 6:case 7:case 8:break f;default:break g}}jj=q[jj+192>>2];if(q[jj+4>>2]!=31|!r[jj+180|0]){break f}dk=q[nk+12>>2]<<2;bk=q[dk+q[jj+172>>2]>>2];ck=u[dk+q[jj+152>>2]>>2];gk=u[dk+q[jj+132>>2]>>2];hk=u[dk+q[jj+92>>2]>>2];ek=u[dk+q[jj+112>>2]>>2];}dk=a+4|0;jj=ak;bk=(kk|0)>(bk|0)?kk:bk;h:{if(bk>>>0<=2){i:{switch(bk-1|0){default:u[ak+96>>2]=x(jk+gk)*x(.5);u[ak+84>>2]=x(lk+hk)*x(.5);u[ak+88>>2]=A(x(B(x(x(fk+ek)*x(.5)),x(-10))),x(10));_j=x(x(_j+ck)*x(.5));break h;case 0:u[ak+96>>2]=jk<gk?jk:gk;u[ak+84>>2]=lk<hk?lk:hk;u[ak+88>>2]=A(x(B(fk<ek?fk:ek,x(-10))),x(10));_j=_j<ck?_j:ck;break h;case 1:break i}}u[ak+96>>2]=jk*gk;u[ak+84>>2]=lk*hk;u[ak+88>>2]=A(x(B(x(fk*ek),x(-10))),x(10));_j=x(_j*ck);break h}u[ak+96>>2]=jk>gk?jk:gk;u[ak+84>>2]=lk>hk?lk:hk;u[ak+88>>2]=A(x(B(fk>ek?fk:ek,x(-10))),x(10));_j=_j>ck?_j:ck;}u[jj+92>>2]=A(x(B(_j,x(-10))),x(10));_j=u[ak+72>>2];j:{if(!!(x(y(_j))>x(.7071067690849304))){hk=u[ak+68>>2];fk=x(x(_j*_j)+x(hk*hk));ck=x(x(1)/x(E(fk)));fk=x(fk*ck);ek=u[ak+64>>2];jk=x(ck*x(-_j));lk=x(ek*jk);_j=x(hk*ck);ck=x(_j*x(-ek));ek=x(0);break j}fk=u[ak+64>>2];ck=u[ak+68>>2];jk=x(x(fk*fk)+x(ck*ck));hk=x(x(1)/x(E(jk)));lk=x(jk*hk);ek=x(hk*x(-ck));ck=x(_j*ek);jk=x(fk*hk);fk=x(jk*x(-_j));_j=x(0);}u[ak+192>>2]=lk;u[ak+188>>2]=ck;u[ak+176>>2]=_j;u[ak+172>>2]=jk;u[ak+184>>2]=fk;u[ak+168>>2]=ek;jj=q[dk>>2];k:{if((uj|0)>=0){jj=jj+w(uj,208)|0;bk=jj;_j=u[jj+144>>2];ck=u[jj+140>>2];hk=u[jj+136>>2];ik=q[jj+168>>2];l:{if(r[ak+128|0]&16){fk=x(x(hk*u[jj+88>>2])+x(0));if(!(x(x(ck*ck)+x(_j*_j))>x(fk*fk))){break l}}nk=q[jj+120>>2];va(jj+4|0,ak,208);q[jj+120>>2]=nk;u[jj+136>>2]=hk;u[jj+140>>2]=ck;u[bk+144>>2]=_j;}q[jj+168>>2]=ik;break k}uj=kf(jj,ak);}bk=q[6037];m:{if(!bk){break m}jj=a+12|0;a=a+8|0;if(r[q[q[jj>>2]+8>>2]+204|0]&8?0:!(r[q[q[a>>2]+8>>2]+204|0]&8)){break m}kk=(q[dk>>2]+w(uj,208)|0)+4|0;uj=(mk|0)!=(sk|0);n[bk](kk,q[(uj?jj:a)>>2],q[ak+100>>2],q[ak+108>>2],q[(uj?a:jj)>>2],q[ak+104>>2],q[ak+112>>2])|0;}if(wk){break a}a=q[5781];if(!a){break a}n[a](dk);}P=ak+208|0;}function iB(a,jj,uj,_j,pk){a=a|0;jj=jj|0;uj=uj|0;_j=_j|0;pk=pk|0;var Ik=0,Jk=0,Kk=0,Lk=0,Mk=0;Ik=P-160|0;P=Ik;Jk=q[a+12>>2];a:{if(!Jk){break a}Kk=q[uj+4>>2];Lk=q[jj+4>>2];q[pk+4>>2]=Jk;q[Ik+152>>2]=1566444395;jj=q[jj+12>>2];Jk=q[jj+12>>2];q[Ik+32>>2]=q[jj+8>>2];q[Ik+36>>2]=Jk;Jk=q[jj+4>>2];q[Ik+24>>2]=q[jj>>2];q[Ik+28>>2]=Jk;Jk=q[jj+28>>2];q[Ik+48>>2]=q[jj+24>>2];q[Ik+52>>2]=Jk;Jk=q[jj+20>>2];q[Ik+40>>2]=q[jj+16>>2];q[Ik+44>>2]=Jk;Mk=q[jj+44>>2];Jk=Ik- -64|0;q[Jk>>2]=q[jj+40>>2];q[Jk+4>>2]=Mk;Jk=q[jj+36>>2];q[Ik+56>>2]=q[jj+32>>2];q[Ik+60>>2]=Jk;Jk=q[jj+60>>2];q[Ik+80>>2]=q[jj+56>>2];q[Ik+84>>2]=Jk;Jk=q[jj+52>>2];q[Ik+72>>2]=q[jj+48>>2];q[Ik+76>>2]=Jk;jj=q[uj+12>>2];uj=q[jj+12>>2];q[Ik+96>>2]=q[jj+8>>2];q[Ik+100>>2]=uj;uj=q[jj+4>>2];q[Ik+88>>2]=q[jj>>2];q[Ik+92>>2]=uj;uj=q[jj+20>>2];q[Ik+104>>2]=q[jj+16>>2];q[Ik+108>>2]=uj;uj=q[jj+28>>2];q[Ik+112>>2]=q[jj+24>>2];q[Ik+116>>2]=uj;uj=q[jj+36>>2];q[Ik+120>>2]=q[jj+32>>2];q[Ik+124>>2]=uj;uj=q[jj+44>>2];q[Ik+128>>2]=q[jj+40>>2];q[Ik+132>>2]=uj;uj=q[jj+52>>2];q[Ik+136>>2]=q[jj+48>>2];q[Ik+140>>2]=uj;uj=q[jj+60>>2];q[Ik+144>>2]=q[jj+56>>2];q[Ik+148>>2]=uj;jj=Ik+8|0;q[jj+8>>2]=Kk;q[jj+4>>2]=Lk;q[jj>>2]=7696;Ni(jj,Ik+24|0,pk,q[_j+20>>2],0);if(!r[a+8|0]){break a}a=q[pk+4>>2];if(!q[a+844>>2]){break a}jj=q[a+836>>2];uj=q[q[pk+8>>2]+8>>2];if((jj|0)!=(uj|0)){ba(a,q[q[pk+12>>2]+8>>2]+4|0,uj+4|0);break a}ba(a,jj+4|0,q[q[pk+12>>2]+8>>2]+4|0);}P=Ik+160|0;}function jB(a){a=a|0;var jj=0,uj=0;q[a>>2]=7748;a:{if(!r[a+8|0]){break a}jj=q[a+12>>2];if(!jj){break a}uj=q[a+4>>2];n[q[q[uj>>2]+16>>2]](uj,jj);}aa(a);}function kB(a){a=a|0;var _j=0,pk=0;q[a>>2]=7748;a:{if(!r[a+8|0]){break a}_j=q[a+12>>2];if(!_j){break a}pk=q[a+4>>2];n[q[q[pk>>2]+16>>2]](pk,_j);}return a|0}function lB(a,Nk,Ok,Pk){q[a>>2]=17096;q[a+4>>2]=q[Nk>>2];q[a>>2]=5592;q[a+12>>2]=0;o[a+8|0]=0;q[a>>2]=7748;Nk=q[a+4>>2];if(n[q[q[Nk>>2]+24>>2]](Nk,q[Ok+8>>2],q[Pk+8>>2])){Nk=q[a+4>>2];Nk=n[q[q[Nk>>2]+12>>2]](Nk,q[Ok+8>>2],q[Pk+8>>2])|0;o[a+8|0]=1;q[a+12>>2]=Nk;}}function mB(a,Nk,Ok,Pk,Qk,Rk,Sk,Tk,Uk,Vk){var Wk=x(0),Xk=0,Yk=x(0),Zk=x(0),_k=x(0),$k=x(0),al=x(0),bl=x(0),cl=x(0),dl=x(0),el=0,fl=x(0),gl=0,hl=x(0),il=x(0),jl=x(0),kl=x(0),ll=x(0),ml=x(0),nl=x(0),ol=x(0),pl=x(0),ql=x(0),rl=x(0),sl=x(0),tl=x(0),ul=x(0),vl=x(0),wl=x(0),xl=x(0),yl=x(0),zl=x(0),Al=0,Bl=x(0),Cl=x(0),Dl=x(0),El=x(0),Fl=x(0),Gl=x(0),Hl=x(0),Il=x(0),Jl=x(0),Kl=0,Ll=x(0),Ml=x(0),Nl=x(0),Ol=x(0),Pl=x(0),Ql=0,Rl=x(0),Sl=0,Tl=0,Ul=0,Vl=0,Wl=0,Xl=0,Yl=x(0),Zl=x(0),_l=0,$l=0,am=0,bm=0;Xk=P-384|0;P=Xk;kl=u[Nk+36>>2];vl=u[Nk+4>>2];bl=u[Nk+20>>2];ql=u[Nk+40>>2];Il=u[Nk+8>>2];Bl=u[Nk+24>>2];$k=u[a+8>>2];dl=u[Pk+8>>2];al=u[a>>2];_k=u[Pk>>2];ml=u[a+4>>2];ol=u[Pk+4>>2];Yk=u[Nk+32>>2];Rl=u[Nk>>2];Wk=u[Nk+16>>2];fl=x(u[Ok>>2]*x(.5));u[Xk+372>>2]=fl;Zk=x(u[Ok+4>>2]*x(.5));u[Xk+376>>2]=Zk;hl=x(u[Ok+8>>2]*x(.5));u[Xk+380>>2]=hl;ll=x(u[Rk>>2]*x(.5));u[Xk+360>>2]=ll;il=x(u[Rk+4>>2]*x(.5));u[Xk+364>>2]=il;cl=x(u[Rk+8>>2]*x(.5));u[Xk+368>>2]=cl;al=x(_k-al);_k=x(ol-ml);$k=x(dl-$k);dl=x(x(x(Rl*al)+x(Wk*_k))+x(Yk*$k));Cl=u[Qk>>2];rl=u[Qk+16>>2];wl=u[Qk+32>>2];ml=x(x(x(Rl*Cl)+x(Wk*rl))+x(Yk*wl));Ll=x(y(ml));jl=u[Qk+4>>2];Dl=u[Qk+20>>2];El=u[Qk+36>>2];ol=x(x(x(Rl*jl)+x(Wk*Dl))+x(Yk*El));Yl=x(y(ol));Fl=u[Qk+8>>2];Gl=u[Qk+24>>2];Jl=u[Qk+40>>2];sl=x(x(x(Rl*Fl)+x(Wk*Gl))+x(Yk*Jl));Zl=x(y(sl));Wk=x(x(y(dl))-x(x(x(fl+x(ll*Ll))+x(il*Yl))+x(cl*Zl)));a:{if(Wk>x(0)){break a}tl=x(x(x(vl*Fl)+x(bl*Gl))+x(kl*Jl));Ml=x(y(tl));xl=x(x(x(vl*jl)+x(bl*Dl))+x(kl*El));Hl=x(y(xl));yl=x(x(x(vl*Cl)+x(bl*rl))+x(kl*wl));zl=x(y(yl));Yk=x(-3.4028234663852886e+38);Ok=0;if(!!(Wk>x(-3.4028234663852886e+38))){el=dl<x(0);Yk=Wk;gl=Nk;Ok=1;}kl=x(x(x(al*vl)+x(_k*bl))+x($k*kl));Wk=x(x(y(kl))-x(x(x(Zk+x(ll*zl))+x(il*Hl))+x(cl*Ml)));if(Wk>x(0)){break a}ul=x(x(x(Il*Fl)+x(Bl*Gl))+x(ql*Jl));Nl=x(y(ul));pl=x(x(x(Il*jl)+x(Bl*Dl))+x(ql*El));Ol=x(y(pl));nl=x(x(x(Il*Cl)+x(Bl*rl))+x(ql*wl));Pl=x(y(nl));if(!!(Wk>Yk)){gl=Nk+4|0;el=kl<x(0);Yk=Wk;Ok=2;}bl=x(x(x(al*Il)+x(_k*Bl))+x($k*ql));Wk=x(x(y(bl))-x(x(x(hl+x(ll*Pl))+x(il*Ol))+x(cl*Nl)));if(Wk>x(0)){break a}if(!!(Wk>Yk)){gl=Nk+8|0;el=bl<x(0);Yk=Wk;Ok=3;}ql=x(x(x(al*Cl)+x(_k*rl))+x($k*wl));Wk=x(x(y(ql))-x(ll+x(x(hl*Pl)+x(x(fl*Ll)+x(Zk*zl)))));if(Wk>x(0)){break a}if(!!(Wk>Yk)){el=ql<x(0);Yk=Wk;gl=Qk;Ok=4;}ql=x(x(x(al*jl)+x(_k*Dl))+x($k*El));Wk=x(x(y(ql))-x(il+x(x(hl*Ol)+x(x(fl*Yl)+x(Zk*Hl)))));if(Wk>x(0)){break a}if(!!(Wk>Yk)){gl=Qk+4|0;el=ql<x(0);Yk=Wk;Ok=5;}al=x(x(x(al*Fl)+x(_k*Gl))+x($k*Jl));Wk=x(x(y(al))-x(cl+x(x(hl*Nl)+x(x(fl*Zl)+x(Zk*Ml)))));if(Wk>x(0)){break a}if(!!(Wk>Yk)){gl=Qk+8|0;el=al<x(0);Yk=Wk;Ok=6;}wl=x(x(bl*yl)-x(kl*nl));Dl=x(Yl+x(9999999747378752e-21));El=x(Pl+x(9999999747378752e-21));Fl=x(zl+x(9999999747378752e-21));Gl=x(Zl+x(9999999747378752e-21));Wk=x(x(y(wl))-x(x(cl*Dl)+x(x(x(Zk*El)+x(hl*Fl))+x(il*Gl))));if(Wk>x(1.1920928955078125e-7)){break a}ql=x(Ol+x(9999999747378752e-21));Bl=x(Hl+x(9999999747378752e-21));Cl=x(Ll+x(9999999747378752e-21));_k=x(0);Jl=x(yl*yl);Hl=x(x(nl*nl)+x(0));rl=x(E(x(Jl+Hl)));b:{if(!(rl>x(1.1920928955078125e-7))){$k=x(0);al=x(0);break b}$k=x(0);Wk=x(Wk/rl);al=x(0);if(!(x(Wk*x(1.0499999523162842))>Yk)){break b}el=wl<x(0);$k=x(x(-nl)/rl);_k=x(x(0)/rl);gl=0;Ok=7;Yk=Wk;al=x(yl/rl);}zl=x(x(bl*xl)-x(kl*pl));Wk=x(x(y(zl))-x(x(cl*Cl)+x(x(x(Zk*ql)+x(hl*Bl))+x(ll*Gl))));if(Wk>x(1.1920928955078125e-7)){break a}rl=x(Nl+x(9999999747378752e-21));wl=x(Ml+x(9999999747378752e-21));Ml=x(xl*xl);Nl=x(x(pl*pl)+x(0));jl=x(E(x(Ml+Nl)));c:{if(!(jl>x(1.1920928955078125e-7))){break c}Wk=x(Wk/jl);if(!(x(Wk*x(1.0499999523162842))>Yk)){break c}el=zl<x(0);al=x(xl/jl);$k=x(x(-pl)/jl);_k=x(x(0)/jl);gl=0;Ok=8;Yk=Wk;}zl=x(x(bl*tl)-x(kl*ul));Wk=x(x(y(zl))-x(x(il*Cl)+x(x(ll*Dl)+x(x(Zk*rl)+x(hl*wl)))));if(Wk>x(1.1920928955078125e-7)){break a}Ol=x(tl*tl);Pl=x(x(ul*ul)+x(0));jl=x(E(x(Ol+Pl)));d:{if(!(jl>x(1.1920928955078125e-7))){break d}Wk=x(Wk/jl);if(!(x(Wk*x(1.0499999523162842))>Yk)){break d}el=zl<x(0);al=x(tl/jl);$k=x(x(-ul)/jl);_k=x(x(0)/jl);gl=0;Ok=9;Yk=Wk;}zl=x(x(dl*nl)-x(bl*ml));Wk=x(x(y(zl))-x(x(cl*Bl)+x(x(x(fl*El)+x(hl*Cl))+x(il*wl))));if(Wk>x(1.1920928955078125e-7)){break a}Ll=x(ml*ml);jl=x(E(x(Ll+Hl)));e:{if(!(jl>x(1.1920928955078125e-7))){break e}Wk=x(Wk/jl);if(!(x(Wk*x(1.0499999523162842))>Yk)){break e}el=zl<x(0);al=x(x(-ml)/jl);$k=x(x(0)/jl);_k=x(nl/jl);gl=0;Ok=10;Yk=Wk;}jl=x(x(dl*pl)-x(bl*ol));Wk=x(x(y(jl))-x(x(cl*Fl)+x(x(x(fl*ql)+x(hl*Dl))+x(ll*wl))));if(Wk>x(1.1920928955078125e-7)){break a}Hl=x(ol*ol);nl=x(E(x(Hl+Nl)));f:{if(!(nl>x(1.1920928955078125e-7))){break f}Wk=x(Wk/nl);if(!(x(Wk*x(1.0499999523162842))>Yk)){break f}el=jl<x(0);al=x(x(-ol)/nl);$k=x(x(0)/nl);_k=x(pl/nl);gl=0;Ok=11;Yk=Wk;}pl=x(x(dl*ul)-x(bl*sl));Wk=x(x(y(pl))-x(x(il*Fl)+x(x(ll*Bl)+x(x(fl*rl)+x(hl*Gl)))));if(Wk>x(1.1920928955078125e-7)){break a}nl=x(sl*sl);bl=x(E(x(nl+Pl)));g:{if(!(bl>x(1.1920928955078125e-7))){break g}Wk=x(Wk/bl);if(!(x(Wk*x(1.0499999523162842))>Yk)){break g}el=pl<x(0);al=x(x(-sl)/bl);$k=x(x(0)/bl);_k=x(ul/bl);gl=0;Ok=12;Yk=Wk;}ul=x(x(kl*ml)-x(dl*yl));Wk=x(x(y(ul))-x(x(cl*ql)+x(x(x(fl*Fl)+x(Zk*Cl))+x(il*rl))));if(Wk>x(1.1920928955078125e-7)){break a}bl=x(E(x(x(Jl+Ll)+x(0))));h:{if(!(bl>x(1.1920928955078125e-7))){break h}Wk=x(Wk/bl);if(!(x(Wk*x(1.0499999523162842))>Yk)){break h}el=ul<x(0);al=x(x(0)/bl);$k=x(ml/bl);_k=x(x(-yl)/bl);gl=0;Ok=13;Yk=Wk;}bl=x(x(kl*ol)-x(dl*xl));Wk=x(x(y(bl))-x(x(cl*El)+x(x(x(fl*Bl)+x(Zk*Dl))+x(ll*rl))));if(Wk>x(1.1920928955078125e-7)){break a}cl=x(E(x(x(Ml+Hl)+x(0))));i:{if(!(cl>x(1.1920928955078125e-7))){break i}Wk=x(Wk/cl);if(!(x(Wk*x(1.0499999523162842))>Yk)){break i}el=bl<x(0);al=x(x(0)/cl);$k=x(ol/cl);_k=x(x(-xl)/cl);gl=0;Ok=14;Yk=Wk;}cl=x(x(kl*sl)-x(dl*tl));fl=x(x(y(cl))-x(x(il*El)+x(x(ll*ql)+x(x(fl*wl)+x(Zk*Gl)))));if(fl>x(1.1920928955078125e-7)){break a}j:{k:{l:{m:{Wk=x(E(x(x(Ol+nl)+x(0))));if(!(Wk>x(1.1920928955078125e-7))){break m}fl=x(fl/Wk);if(!(x(fl*x(1.0499999523162842))>Yk)){break m}el=cl<x(0);al=x(x(0)/Wk);$k=x(sl/Wk);_k=x(x(-tl)/Wk);Ok=15;break l}if(!Ok){break a}if(gl){break k}fl=Yk;}Wk=x(x(x(Rl*_k)+x(vl*$k))+x(Il*al));u[Sk>>2]=Wk;Zk=x(x(x(_k*u[Nk+16>>2])+x($k*u[Nk+20>>2]))+x(al*u[Nk+24>>2]));u[Sk+4>>2]=Zk;_k=x(x(x(_k*u[Nk+32>>2])+x($k*u[Nk+36>>2]))+x(al*u[Nk+40>>2]));u[Sk+8>>2]=_k;break j}Wk=u[gl>>2];q[Sk>>2]=q[gl>>2];Zk=u[gl+16>>2];q[Sk+4>>2]=q[gl+16>>2];_k=u[gl+32>>2];q[Sk+8>>2]=q[gl+32>>2];fl=Yk;}if(el){u[Sk+8>>2]=-_k;u[Sk+4>>2]=-Zk;u[Sk>>2]=-Wk;}u[Tk>>2]=-fl;if((Ok|0)>=7){q[Xk+120>>2]=q[a+8>>2];Rk=q[a+4>>2];q[Xk+112>>2]=q[a>>2];q[Xk+116>>2]=Rk;Zk=x(0);il=u[Xk+112>>2];cl=u[Xk+116>>2];Yk=u[Xk+372>>2];bl=Yk;_k=x(-Yk);Yk=u[Sk>>2];dl=u[Nk>>2];Wk=u[Sk+4>>2];kl=u[Nk+16>>2];al=u[Sk+8>>2];$k=u[Nk+32>>2];_k=x(x(x(Yk*dl)+x(Wk*kl))+x(al*$k))>x(0)?bl:_k;jl=x(u[Xk+120>>2]+x(_k*$k));$k=u[Xk+376>>2];bl=u[Nk+4>>2];ml=u[Nk+20>>2];ol=u[Nk+36>>2];$k=x(x(x(Yk*bl)+x(Wk*ml))+x(al*ol))>x(0)?$k:x(-$k);jl=x(jl+x($k*ol));ol=u[Nk+8>>2];sl=u[Nk+24>>2];tl=u[Nk+40>>2];hl=x(x(x(Yk*ol)+x(Wk*sl))+x(al*tl))>x(0)?hl:x(-hl);u[Xk+120>>2]=jl+x(hl*tl);u[Xk+116>>2]=x(x(cl+x(_k*kl))+x($k*ml))+x(hl*sl);u[Xk+112>>2]=x(x(il+x(_k*dl))+x($k*bl))+x(hl*ol);q[Xk+216>>2]=q[Pk+8>>2];a=q[Pk+4>>2];q[Xk+208>>2]=q[Pk>>2];q[Xk+212>>2]=a;bl=x(-ll);dl=ll;hl=u[Qk>>2];ll=u[Qk+16>>2];$k=u[Qk+32>>2];_k=x(x(x(Yk*hl)+x(Wk*ll))+x(al*$k))>x(0)?bl:dl;bl=x(u[Xk+216>>2]+x(_k*$k));$k=u[Xk+364>>2];il=u[Qk+4>>2];cl=u[Qk+20>>2];dl=u[Qk+36>>2];$k=x(x(x(Yk*il)+x(Wk*cl))+x(al*dl))>x(0)?x(-$k):$k;jl=x(bl+x($k*dl));dl=u[Xk+368>>2];ml=x(-dl);bl=dl;dl=u[Qk+8>>2];kl=u[Qk+24>>2];Yk=x(x(Yk*dl)+x(Wk*kl));Wk=u[Qk+40>>2];Yk=x(Yk+x(al*Wk))>x(0)?ml:bl;Wk=x(jl+x(Yk*Wk));u[Xk+216>>2]=Wk;al=x(x(x(u[Xk+212>>2]+x(_k*ll))+x($k*cl))+x(Yk*kl));u[Xk+212>>2]=al;Yk=x(x(x(u[Xk+208>>2]+x(_k*hl))+x($k*il))+x(Yk*dl));u[Xk+208>>2]=Yk;a=Nk;Nk=Ok+ -7|0;Pk=(Nk|0)/3|0;a=a+(Pk<<2)|0;il=u[a>>2];Nk=(Nk-w(Pk,3)<<2)+Qk|0;_k=u[Nk>>2];cl=u[a+16>>2];$k=u[Nk+16>>2];dl=u[a+32>>2];hl=u[Nk+32>>2];ll=x(x(x(il*_k)+x(cl*$k))+x(dl*hl));kl=x(x(1)-x(ll*ll));if(!(kl<=x(9999999747378752e-20))){Zk=x(Yk-u[Xk+112>>2]);bl=x(Zk*il);il=x(al-u[Xk+116>>2]);bl=x(bl+x(il*cl));cl=x(Wk-u[Xk+120>>2]);Zk=x(x(x(x(bl+x(cl*dl))*ll)-x(x(x(Zk*_k)+x(il*$k))+x(cl*hl)))*x(x(1)/kl));}u[Xk+216>>2]=Wk+x(Zk*hl);u[Xk+212>>2]=al+x(Zk*$k);u[Xk+208>>2]=Yk+x(Zk*_k);Yk=u[Sk>>2];Wk=u[Sk+4>>2];al=u[Sk+8>>2];q[Xk+300>>2]=0;u[Xk+296>>2]=-al;u[Xk+292>>2]=-Wk;u[Xk+288>>2]=-Yk;n[q[q[Vk>>2]+16>>2]](Vk,Xk+288|0,Xk+208|0,fl);q[Uk>>2]=Ok;break a}$k=u[Sk>>2];n:{if((Ok|0)<=3){fl=u[Sk+8>>2];al=u[Sk+4>>2];Ul=Xk+372|0;el=Qk;gl=Xk+360|0;break n}$k=x(-$k);fl=x(-u[Sk+8>>2]);al=x(-u[Sk+4>>2]);Rk=Pk;Ul=Xk+360|0;Pk=a;a=Rk;el=Nk;Nk=Qk;gl=Xk+372|0;}Wk=x(x(x($k*u[el>>2])+x(al*u[el+16>>2]))+x(fl*u[el+32>>2]));u[Xk+344>>2]=Wk;Zk=x(x(x($k*u[el+4>>2])+x(al*u[el+20>>2]))+x(fl*u[el+36>>2]));u[Xk+348>>2]=Zk;Yk=x(x(x($k*u[el+8>>2])+x(al*u[el+24>>2]))+x(fl*u[el+40>>2]));u[Xk+352>>2]=Yk;Yk=x(y(Yk));Zk=x(y(Zk));Wk=x(y(Wk));o:{if(!!(Zk>Wk)){Tk=Zk>Yk;Qk=Tk?1:2;Rk=0;break o}Tk=Wk>Yk;Qk=(Tk^1)<<1;Rk=Tk;}$l=Rk;Rk=Qk<<2;Yk=u[Rk+gl>>2];Wk=x(Yk*u[Rk+el>>2]);Zk=x(u[Pk>>2]-u[a>>2]);am=Tk?2:1;Qk=Xk;p:{if(!(u[Rk+(Xk+344|0)>>2]<x(0))){Wk=x(Zk-Wk);u[Xk+328>>2]=Wk;Zk=x(x(u[Pk+4>>2]-u[a+4>>2])-x(Yk*u[(Rk|16)+el>>2]));u[Xk+332>>2]=Zk;Yk=x(x(u[Pk+8>>2]-u[a+8>>2])-x(Yk*u[(Rk|32)+el>>2]));break p}Wk=x(Zk+Wk);u[Xk+328>>2]=Wk;Zk=x(x(u[Pk+4>>2]-u[a+4>>2])+x(Yk*u[(Rk|16)+el>>2]));u[Xk+332>>2]=Zk;Yk=x(x(u[Pk+8>>2]-u[a+8>>2])+x(Yk*u[(Rk|32)+el>>2]));}u[Qk+336>>2]=Yk;Qk=1;_l=((Ok|0)<4?-1:-4)+Ok|0;q:{r:{if(_l>>>0<=1){Pk=2;if(_l-1){break q}break r}Pk=1;}Qk=0;}Rk=Qk<<2;Qk=Rk+Nk|0;_k=u[Qk+32>>2];hl=u[Qk>>2];ll=u[Qk+16>>2];Pk=Pk<<2;Nk=Pk+Nk|0;il=u[Nk>>2];cl=u[Nk+16>>2];dl=u[Nk+32>>2];kl=x(x(x(Wk*il)+x(Zk*cl))+x(Yk*dl));Nk=$l<<2;Vl=Nk+el|0;ml=u[Vl>>2];ol=u[Vl+16>>2];sl=u[Vl+32>>2];bl=x(x(x(il*ml)+x(cl*ol))+x(dl*sl));tl=u[Nk+gl>>2];xl=x(bl*tl);yl=x(kl+xl);Nk=am<<2;Wl=Nk+el|0;ul=u[Wl>>2];pl=u[Wl+16>>2];nl=u[Wl+32>>2];cl=x(x(x(il*ul)+x(cl*pl))+x(dl*nl));vl=u[Nk+gl>>2];il=x(cl*vl);u[Xk+316>>2]=yl-il;dl=x(x(x(Wk*hl)+x(Zk*ll))+x(Yk*_k));ml=x(x(x(hl*ml)+x(ll*ol))+x(_k*sl));Wk=x(tl*ml);Zk=x(dl+Wk);hl=x(x(x(hl*ul)+x(ll*pl))+x(_k*nl));Yk=x(vl*hl);u[Xk+312>>2]=Zk-Yk;u[Xk+308>>2]=yl+il;u[Xk+304>>2]=Zk+Yk;Zk=x(kl-xl);u[Xk+300>>2]=Zk+il;Wk=x(dl-Wk);u[Xk+296>>2]=Wk+Yk;u[Xk+292>>2]=Zk-il;u[Xk+288>>2]=Wk-Yk;q[Xk+280>>2]=q[Rk+Ul>>2];q[Xk+284>>2]=q[Pk+Ul>>2];Nk=4;Rk=Xk+208|0;gl=Xk+288|0;s:{while(1){t:{u:{if((Nk|0)>=1){bm=1-Xl|0;Kl=Xl<<2;Ql=Kl+(Xk+280|0)|0;Wk=u[Ql>>2];Tk=0;Pk=Rk;Qk=gl;while(1){Al=Qk+Kl|0;Zk=u[Al>>2];_k=x(-Zk);if(!!(Wk>_k)){q[Pk>>2]=q[Qk>>2];q[Pk+4>>2]=q[Qk+4>>2];Tk=Tk+1|0;if(Tk&8){break t}Wk=u[Ql>>2];Zk=u[Al>>2];_k=x(-Zk);Pk=Pk+8|0;}Sl=_k<Wk;Al=Qk+8|0;Tl=(Nk|0)>1?Al:gl;_k=u[Tl+Kl>>2];if((Sl|0)!=(Wk>x(-_k)|0)){Sl=Qk;Qk=bm<<2;Yk=u[Sl+Qk>>2];u[Pk+Qk>>2]=Yk+x(x(x(-Wk)-Zk)*x(x(u[Qk+Tl>>2]-Yk)/x(_k-Zk)));Wk=u[Ql>>2];u[Pk+Kl>>2]=-Wk;Tk=Tk+1|0;if(Tk&8){break t}Pk=Pk+8|0;}Qk=Al;Nk=Nk+ -1|0;if((Nk|0)>0){continue}break}Nk=0;gl=(Xk+208|0)==(Rk|0)?Xk+112|0:Xk+208|0;if((Tk|0)<=0){break u}Pk=gl;Qk=Rk;while(1){Al=Qk+Kl|0;Zk=u[Al>>2];if(!!(Zk<Wk)){q[Pk>>2]=q[Qk>>2];q[Pk+4>>2]=q[Qk+4>>2];Nk=Nk+1|0;if(Nk&8){break s}Wk=u[Ql>>2];Zk=u[Al>>2];Pk=Pk+8|0;}Al=Qk+8|0;Tl=(Tk|0)>1?Al:Rk;_k=u[Tl+Kl>>2];if((Zk<Wk|0)!=(_k<Wk|0)){Sl=Qk;Qk=bm<<2;Yk=u[Sl+Qk>>2];u[Pk+Qk>>2]=Yk+x(x(Wk-Zk)*x(x(u[Qk+Tl>>2]-Yk)/x(_k-Zk)));Wk=u[Ql>>2];q[Pk+Kl>>2]=q[Ql>>2];Nk=Nk+1|0;if(Nk&8){break s}Pk=Pk+8|0;}Qk=Al;Tk=Tk+ -1|0;if((Tk|0)>0){continue}break}break u}gl=(Xk+208|0)==(Rk|0)?Xk+112|0:Xk+208|0;Nk=0;}Rk=(Xk+208|0)==(gl|0)?Xk+112|0:Xk+208|0;Xl=Xl+1|0;if((Xl|0)!=2){continue}break s}break}gl=Rk;Nk=Tk;}if((Xk+208|0)!=(gl|0)){va(Xk+208|0,gl,Nk<<3);}if((Nk|0)<1){break a}Yk=x(x(1)/x(x(ml*cl)-x(bl*hl)));Zk=x(Yk*x(-bl));_k=x(cl*Yk);hl=x(hl*Yk);ll=x(ml*Yk);il=u[(_l<<2)+Ul>>2];Pk=am<<2;cl=u[(Pk|32)+el>>2];Qk=$l<<2;bl=u[(Qk|32)+el>>2];ml=u[(Pk|16)+el>>2];ol=u[(Qk|16)+el>>2];sl=u[Wl>>2];tl=u[Vl>>2];Qk=0;xl=u[Xk+336>>2];yl=u[Xk+332>>2];ul=u[Xk+328>>2];Pk=0;while(1){Rk=(Xk+112|0)+w(Qk,12)|0;Tk=Pk<<3;pl=u[Tk+(Xk+208|0)>>2];Wk=x(pl-dl);nl=u[(Xk+208|0)+(Tk|4)>>2];vl=x(nl-kl);Yk=x(x(_k*Wk)-x(hl*vl));Wk=x(x(Zk*Wk)+x(ll*vl));vl=x(x(ul+x(Yk*tl))+x(Wk*sl));u[Rk>>2]=vl;Il=x(x(yl+x(Yk*ol))+x(Wk*ml));u[Rk+4>>2]=Il;Yk=x(x(xl+x(Yk*bl))+x(Wk*cl));u[Rk+8>>2]=Yk;Yk=x(il-x(x(x($k*vl)+x(al*Il))+x(fl*Yk)));u[(Xk+80|0)+(Qk<<2)>>2]=Yk;if(!!(Yk>=x(0))){Rk=Qk<<3;u[Rk+(Xk+208|0)>>2]=pl;u[(Xk+208|0)+(Rk|4)>>2]=nl;Qk=Qk+1|0;}Pk=Pk+1|0;if((Pk|0)!=(Nk|0)){continue}break}if((Qk|0)<1){break a}Nk=(Qk|0)<4?Qk:4;Rk=(Nk|0)>1?Nk:1;v:{if((Qk|0)<=(Rk|0)){if((Ok|0)>=4){Nk=0;while(1){Pk=(Xk+112|0)+w(Nk,12)|0;Wk=u[Sk>>2];Yk=u[(Xk+80|0)+(Nk<<2)>>2];u[Xk+32>>2]=x(u[Pk>>2]+u[a>>2])-x(Wk*Yk);fl=u[Sk+4>>2];u[Xk+36>>2]=x(u[Pk+4>>2]+u[a+4>>2])-x(Yk*fl);al=u[Sk+8>>2];u[Xk+40>>2]=x(u[Pk+8>>2]+u[a+8>>2])-x(Yk*al);q[Xk+76>>2]=0;u[Xk+72>>2]=-al;u[Xk+68>>2]=-fl;u[Xk+64>>2]=-Wk;n[q[q[Vk>>2]+16>>2]](Vk,Xk- -64|0,Xk+32|0,x(-Yk));Nk=Nk+1|0;if((Qk|0)!=(Nk|0)){continue}break}break v}Nk=0;while(1){Pk=(Xk+112|0)+w(Nk,12)|0;u[Xk+32>>2]=u[Pk>>2]+u[a>>2];u[Xk+36>>2]=u[Pk+4>>2]+u[a+4>>2];u[Xk+40>>2]=u[Pk+8>>2]+u[a+8>>2];Yk=u[Sk>>2];Wk=u[Sk+4>>2];fl=u[Sk+8>>2];q[Xk+76>>2]=0;u[Xk+72>>2]=-fl;u[Xk+68>>2]=-Wk;u[Xk+64>>2]=-Yk;n[q[q[Vk>>2]+16>>2]](Vk,Xk- -64|0,Xk+32|0,x(-u[(Xk+80|0)+(Nk<<2)>>2]));Nk=Nk+1|0;if((Qk|0)!=(Nk|0)){continue}break}break v}Pk=0;if((Qk|0)>=2){Wk=u[Xk+80>>2];Nk=1;while(1){Yk=u[(Xk+80|0)+(Nk<<2)>>2];Tk=Yk>Wk;Wk=Tk?Yk:Wk;Pk=Tk?Nk:Pk;Nk=Nk+1|0;if((Qk|0)!=(Nk|0)){continue}break}}nB(Qk,Xk+208|0,Rk,Pk,Xk+32|0);Tk=(Ok|0)>3;Nk=0;while(1){Pk=q[(Xk+32|0)+(Nk<<2)>>2];Qk=(Xk+112|0)+w(Pk,12)|0;al=x(u[Qk>>2]+u[a>>2]);u[Xk+64>>2]=al;Zk=x(u[Qk+4>>2]+u[a+4>>2]);u[Xk+68>>2]=Zk;_k=x(u[Qk+8>>2]+u[a+8>>2]);u[Xk+72>>2]=_k;w:{if(!Tk){Yk=u[Sk>>2];Wk=u[Sk+4>>2];fl=u[Sk+8>>2];q[Xk+28>>2]=0;u[Xk+24>>2]=-fl;u[Xk+20>>2]=-Wk;u[Xk+16>>2]=-Yk;n[q[q[Vk>>2]+16>>2]](Vk,Xk+16|0,Xk- -64|0,x(-u[(Xk+80|0)+(Pk<<2)>>2]));break w}Wk=u[Sk>>2];fl=u[Sk+4>>2];Yk=u[Sk+8>>2];q[Xk+28>>2]=0;u[Xk+24>>2]=-Yk;u[Xk+20>>2]=-fl;u[Xk+16>>2]=-Wk;q[Xk+12>>2]=0;dl=Yk;Yk=u[(Xk+80|0)+(Pk<<2)>>2];u[Xk+8>>2]=_k-x(dl*Yk);u[Xk+4>>2]=Zk-x(fl*Yk);u[Xk>>2]=al-x(Wk*Yk);n[q[q[Vk>>2]+16>>2]](Vk,Xk+16|0,Xk,x(-Yk));}Nk=Nk+1|0;if(Nk>>>0<Rk>>>0){continue}break}}q[Uk>>2]=Ok;}P=Xk+384|0;}function nB(a,Nk,Ok,Pk,Qk){var Rk=0,Sk=x(0),Tk=x(0),Uk=0,Vk=0,cm=x(0),dm=x(0),em=0,fm=0,gm=x(0),hm=x(0),im=x(0),jm=x(0),km=x(0);Vk=P+ -64|0;P=Vk;a:{b:{c:{d:{e:{f:{Uk=a+ -1|0;if(Uk>>>0<=1){if(Uk-1){break c}break f}if((Uk|0)>0){break e}break d}Tk=x(x(u[Nk+4>>2]+u[Nk+12>>2])*x(.5));Sk=x(x(u[Nk>>2]+u[Nk+8>>2])*x(.5));break b}while(1){fm=Rk<<3;em=fm+Nk|0;dm=u[em>>2];gm=u[em+12>>2];hm=u[em+8>>2];im=u[(fm|4)+Nk>>2];cm=x(x(dm*gm)-x(hm*im));Sk=x(Sk+cm);Tk=x(Tk+x(x(gm+im)*cm));jm=x(jm+x(x(dm+hm)*cm));Rk=Rk+1|0;if((Uk|0)!=(Rk|0)){continue}break}}cm=x(0xde0b6b000000000);km=Sk;Rk=(a<<3)+Nk|0;dm=u[Rk+ -8>>2];gm=u[Nk+4>>2];hm=u[Nk>>2];im=u[Rk+ -4>>2];Sk=x(x(dm*gm)-x(hm*im));km=x(km+Sk);if(!!(x(y(km))>x(1.1920928955078125e-7))){cm=x(x(1)/x(km*x(3)));}em=0;if((a|0)<=0){break a}Tk=x(x(Tk+x(x(gm+im)*Sk))*cm);Sk=x(x(jm+x(x(dm+hm)*Sk))*cm);break b}Tk=u[Nk+4>>2];Sk=u[Nk>>2];}Rk=0;while(1){Uk=Rk<<3;u[(Vk+32|0)+(Rk<<2)>>2]=$(x(u[(Uk|4)+Nk>>2]-Tk),x(u[Nk+Uk>>2]-Sk));Rk=Rk+1|0;if((Rk|0)!=(a|0)){continue}break}Rk=0;while(1){em=1;q[(Rk<<2)+Vk>>2]=1;Rk=Rk+1|0;if((Rk|0)!=(a|0)){continue}break}}Nk=Pk<<2;q[Nk+Vk>>2]=0;q[Qk>>2]=Pk;if((Ok|0)>=2){cm=x(x(6.2831854820251465)/x(Ok|0));jm=u[Nk+(Vk+32|0)>>2];Uk=1;while(1){q[Qk+4>>2]=Pk;Qk=Qk+4|0;Nk=Pk;if(em){Sk=x(x(cm*x(Uk|0))+jm);dm=Sk>x(3.1415927410125732)?x(Sk+x(-6.2831854820251465)):Sk;Rk=0;Sk=x(1e9);while(1){fm=Rk<<2;g:{if(!q[fm+Vk>>2]){break g}Tk=x(y(x(u[fm+(Vk+32|0)>>2]-dm)));Tk=Tk>x(3.1415927410125732)?x(x(6.2831854820251465)-Tk):Tk;if(!(Tk<Sk)){break g}q[Qk>>2]=Rk;Nk=Rk;Sk=Tk;}Rk=Rk+1|0;if((Rk|0)!=(a|0)){continue}break}}q[(Nk<<2)+Vk>>2]=0;Uk=Uk+1|0;if((Uk|0)!=(Ok|0)){continue}break}}P=Vk- -64|0;}function oB(a,Nk,Ok,Pk){a=a|0;Nk=Nk|0;Ok=Ok|0;Pk=Pk|0;var Qk=0,lm=x(0);Ok=P-800|0;P=Ok;n[q[5253]](7604);q[Ok+740>>2]=0;q[Ok+744>>2]=0;q[Ok+752>>2]=0;q[Ok+756>>2]=0;q[Ok+748>>2]=1065353216;q[Ok+772>>2]=0;q[Ok+776>>2]=0;q[Ok+768>>2]=1065353216;q[Ok+780>>2]=0;q[Ok+784>>2]=0;q[Ok+788>>2]=0;q[Ok+732>>2]=0;q[Ok+736>>2]=0;q[Ok+728>>2]=1065353216;q[Ok+760>>2]=0;q[Ok+764>>2]=0;q[Ok+720>>2]=0;q[Ok+724>>2]=0;q[Ok+552>>2]=7628;q[Ok+716>>2]=q[a+200>>2];Pk=q[a+196>>2];Aa(Ok+496|0);q[Ok+524>>2]=0;q[Ok+528>>2]=0;q[Ok+520>>2]=1065353216;q[Ok+532>>2]=0;q[Ok+536>>2]=0;q[Ok+540>>2]=0;q[Ok+512>>2]=1065353216;q[Ok+516>>2]=1065353216;q[Ok+496>>2]=12036;q[Ok+548>>2]=0;q[Ok+544>>2]=Pk;q[Ok+528>>2]=Pk;q[Ok+500>>2]=8;Pk=_c(Ok+384|0);q[Ok+388>>2]=1;q[Ok+384>>2]=7216;Qk=q[Nk+12>>2];q[Ok+452>>2]=q[Nk+8>>2];q[Ok+456>>2]=Qk;Qk=q[Nk+4>>2];q[Ok+444>>2]=q[Nk>>2];q[Ok+448>>2]=Qk;Qk=q[Nk+20>>2];q[Ok+460>>2]=q[Nk+16>>2];q[Ok+464>>2]=Qk;Qk=q[Nk+28>>2];q[Ok+468>>2]=q[Nk+24>>2];q[Ok+472>>2]=Qk;Qk=q[Nk+36>>2];q[Ok+476>>2]=q[Nk+32>>2];q[Ok+480>>2]=Qk;Qk=q[Nk+44>>2];q[Ok+484>>2]=q[Nk+40>>2];q[Ok+488>>2]=Qk;o[Ok+356|0]=0;q[Ok+332>>2]=953267991;Nk=Ok+8|0;q[Nk+12>>2]=Ok+384;q[Nk+8>>2]=Ok+496;q[Nk+4>>2]=Ok+24;q[Nk>>2]=6924;a:{if(!Xe(Nk,a+4|0,a+68|0,Ok+728|0,Ok+728|0,Ok+552|0)){break a}lm=u[Ok+716>>2];if(!(u[a+200>>2]>lm)){break a}u[a+200>>2]=lm;}Vb(Pk);n[q[5254]]();P=Ok+800|0;}function pB(a,Nk,Ok,Pk){a=a|0;Nk=Nk|0;Ok=Ok|0;Pk=Pk|0;var mm=x(0),nm=x(0),om=x(0),pm=x(0),qm=x(0),rm=x(0),sm=x(0),tm=x(0),um=x(0),vm=x(0),wm=x(0);pm=u[a+92>>2];qm=u[a+76>>2];rm=u[a+80>>2];tm=u[a+100>>2];om=u[a+68>>2];um=u[a+84>>2];sm=u[a+96>>2];mm=u[a- -64>>2];nm=u[a+60>>2];q[Ok+12>>2]=0;qm=x(qm-nm);sm=x(sm-mm);rm=x(rm-mm);nm=x(pm-nm);mm=x(x(qm*sm)-x(rm*nm));vm=mm;wm=x(mm*mm);mm=x(tm-om);pm=x(um-om);om=x(x(rm*mm)-x(pm*sm));mm=x(x(pm*nm)-x(qm*mm));nm=x(x(1)/x(E(x(wm+x(x(om*om)+x(mm*mm))))));u[Ok+8>>2]=vm*nm;u[Ok+4>>2]=mm*nm;u[Ok>>2]=om*nm;Nk=q[a+72>>2];q[Pk+8>>2]=q[a+68>>2];q[Pk+12>>2]=Nk;Nk=q[a+64>>2];q[Pk>>2]=q[a+60>>2];q[Pk+4>>2]=Nk;}function qB(a,Nk,Ok){a=a|0;Nk=Nk|0;Ok=x(Ok);var Pk=x(0),xm=x(0),ym=x(0),zm=x(0),Am=x(0),Bm=0,Cm=x(0),Dm=x(0),Em=x(0),Fm=x(0),Gm=x(0),Hm=x(0),Im=0,Jm=0;Bm=P-32|0;P=Bm;Pk=u[a+60>>2];ym=x(u[a+76>>2]-Pk);xm=u[a- -64>>2];zm=x(u[a+96>>2]-xm);Cm=x(u[a+80>>2]-xm);Dm=x(u[a+92>>2]-Pk);Am=x(x(ym*zm)-x(Cm*Dm));Em=Am;Hm=x(Am*Am);Gm=Cm;Cm=u[a+68>>2];Am=x(u[a+100>>2]-Cm);Fm=x(u[a+84>>2]-Cm);zm=x(x(Gm*Am)-x(Fm*zm));ym=x(x(Fm*Dm)-x(ym*Am));Dm=x(x(1)/x(E(x(Hm+x(x(zm*zm)+x(ym*ym))))));Am=x(Em*Dm);zm=x(zm*Dm);ym=x(ym*Dm);Pk=x(x(x(u[Nk+8>>2]*Am)+x(x(u[Nk>>2]*zm)+x(u[Nk+4>>2]*ym)))-x(x(Cm*Am)+x(x(Pk*zm)+x(xm*ym))));Cm=x(-Ok);a:{if(Pk>=Cm^1|Pk<=Ok^1){break a}while(1){n[q[q[a>>2]+104>>2]](a,Im,Bm+16|0,Bm);Dm=u[Bm+16>>2];Pk=x(u[Bm>>2]-Dm);Fm=u[Bm+20>>2];xm=x(u[Bm+4>>2]-Fm);Ok=x(x(ym*Pk)-x(zm*xm));Em=Ok;Hm=x(Ok*Ok);Ok=x(Am*xm);Gm=u[Bm+24>>2];xm=x(u[Bm+8>>2]-Gm);Ok=x(Ok-x(ym*xm));Pk=x(x(zm*xm)-x(Am*Pk));xm=x(x(1)/x(E(x(Hm+x(x(Ok*Ok)+x(Pk*Pk))))));Em=x(Em*xm);Ok=x(Ok*xm);Pk=x(Pk*xm);if(!!(x(x(x(u[Nk+8>>2]*Em)+x(x(u[Nk>>2]*Ok)+x(u[Nk+4>>2]*Pk)))-x(x(Gm*Em)+x(x(Dm*Ok)+x(Fm*Pk))))<Cm)){break a}Im=Im+1|0;if((Im|0)!=3){continue}break}Jm=1;}P=Bm+32|0;return Jm|0}function rB(a,Nk,Ok,Km){a=a|0;Nk=Nk|0;Ok=Ok|0;Km=Km|0;n[q[q[a>>2]+124>>2]](a,Km,Nk,Ok);}function sB(a,Nk,Ok){a=a|0;Nk=Nk|0;Ok=Ok|0;a=(Nk<<4)+a|0;Nk=q[a+72>>2];q[Ok+8>>2]=q[a+68>>2];q[Ok+12>>2]=Nk;Nk=q[a+64>>2];q[Ok>>2]=q[a+60>>2];q[Ok+4>>2]=Nk;}function tB(a,Nk,Ok,Km){a=a|0;Nk=Nk|0;Ok=Ok|0;Km=Km|0;n[q[q[a>>2]+108>>2]](a,Nk,Ok);n[q[q[a>>2]+108>>2]](a,(Nk+1|0)%3|0,Km);}function uB(a,Nk){var Ok=0;Ok=P-16|0;q[Ok+12>>2]=a;u[Ok+8>>2]=Nk;a=q[Ok+12>>2];q[a+304>>2]=q[a+304>>2]+1;u[a+232>>2]=u[Ok+8>>2];}function vB(a,Nk,Km){a=a|0;Nk=Nk|0;Km=Km|0;var Lm=x(0),Mm=x(0),Nm=x(0),Om=x(0),Pm=x(0),Qm=x(0),Rm=x(0),Sm=x(0),Tm=x(0),Um=x(0),Vm=x(0);Om=u[a+92>>2];Pm=u[a+76>>2];Qm=u[a+80>>2];Sm=u[a+100>>2];Mm=u[a+68>>2];Tm=u[a+84>>2];Rm=u[a+96>>2];Lm=u[a- -64>>2];Nm=u[a+60>>2];q[Km+12>>2]=0;Pm=x(Pm-Nm);Rm=x(Rm-Lm);Qm=x(Qm-Lm);Nm=x(Om-Nm);Lm=x(x(Pm*Rm)-x(Qm*Nm));Um=Lm;Vm=x(Lm*Lm);Lm=x(Sm-Mm);Om=x(Tm-Mm);Mm=x(x(Qm*Lm)-x(Om*Rm));Lm=x(x(Om*Nm)-x(Pm*Lm));Nm=x(x(1)/x(E(x(Vm+x(x(Mm*Mm)+x(Lm*Lm))))));Om=x(Um*Nm);u[Km+8>>2]=Om;Lm=x(Lm*Nm);u[Km+4>>2]=Lm;Mm=x(Mm*Nm);u[Km>>2]=Mm;if(Nk){u[Km+8>>2]=-Om;u[Km+4>>2]=-Lm;u[Km>>2]=-Mm;}}function wB(a,Nk,Km,Wm){a=a|0;Nk=Nk|0;Km=Km|0;Wm=Wm|0;var Xm=0,Ym=x(0),Zm=0,_m=0,$m=x(0),an=x(0),bn=0,cn=x(0),dn=x(0),en=0;if((Wm|0)>=1){en=a+60|0;while(1){Xm=_m<<4;Zm=Xm+Km|0;Xm=Nk+Xm|0;Ym=u[Xm>>2];$m=u[Xm+4>>2];an=u[Xm+8>>2];cn=x(x(x(Ym*u[a+76>>2])+x($m*u[a+80>>2]))+x(an*u[a+84>>2]));dn=x(x(x(Ym*u[a+92>>2])+x($m*u[a+96>>2]))+x(an*u[a+100>>2]));Ym=x(x(x(Ym*u[a+60>>2])+x($m*u[a+64>>2]))+x(an*u[a+68>>2]));Xm=((Ym<cn?cn<dn?2:1:(Ym<dn)<<1)<<4)+en|0;bn=q[Xm+4>>2];q[Zm>>2]=q[Xm>>2];q[Zm+4>>2]=bn;bn=q[Xm+12>>2];q[Zm+8>>2]=q[Xm+8>>2];q[Zm+12>>2]=bn;_m=_m+1|0;if((_m|0)!=(Wm|0)){continue}break}}}function xB(a,Nk,Km){a=a|0;Nk=Nk|0;Km=Km|0;var Wm=x(0),fn=x(0),gn=x(0),hn=x(0),jn=x(0);Wm=u[Km>>2];fn=u[Km+4>>2];gn=u[Km+8>>2];hn=x(x(x(Wm*u[Nk+76>>2])+x(fn*u[Nk+80>>2]))+x(gn*u[Nk+84>>2]));jn=x(x(x(Wm*u[Nk+92>>2])+x(fn*u[Nk+96>>2]))+x(gn*u[Nk+100>>2]));Wm=x(x(x(Wm*u[Nk+60>>2])+x(fn*u[Nk- -64>>2]))+x(gn*u[Nk+68>>2]));Nk=(Nk+60|0)+((Wm<hn?hn<jn?2:1:(Wm<jn)<<1)<<4)|0;Km=q[Nk+4>>2];q[a>>2]=q[Nk>>2];q[a+4>>2]=Km;Km=q[Nk+12>>2];q[a+8>>2]=q[Nk+8>>2];q[a+12>>2]=Km;}function yB(a,Nk,Km){a=a|0;Nk=Nk|0;Km=Km|0;fb(a,Nk,Km);q[Nk+28>>2]=q[a+32>>2];q[Nk+32>>2]=q[a+36>>2];q[Nk+36>>2]=q[a+40>>2];q[Nk+40>>2]=q[a+44>>2];q[Nk+12>>2]=q[a+16>>2];q[Nk+16>>2]=q[a+20>>2];q[Nk+20>>2]=q[a+24>>2];q[Nk+24>>2]=q[a+28>>2];a=q[a+48>>2];q[Nk+48>>2]=0;q[Nk+44>>2]=a;return 7385}function zB(a){a=a|0;return x(u[a+48>>2])}function AB(a,Nk){a=a|0;q[a+8>>2]=1065353216;q[a+12>>2]=0;q[a>>2]=1065353216;q[a+4>>2]=1065353216;}function BB(a){return 7376}function CB(a){a=a|0;return a+16|0}function DB(a){var Nk=0,Km=0;Nk=P-16|0;P=Nk;q[Nk+12>>2]=a;a=P-16|0;Km=q[Nk+12>>2];q[a+12>>2]=Km;q[q[a+12>>2]>>2]=1284;q[Km>>2]=1220;P=Nk+16|0;}function EB(a,kn,ln,mn){var nn=0;nn=P-48|0;P=nn;q[nn+44>>2]=kn;q[nn+40>>2]=ln;q[nn+36>>2]=mn;kn=q[nn+40>>2];u[nn+12>>2]=x(2)*ta(q[nn+40>>2],q[nn+36>>2]);ln=nn+16|0;ct(ln,nn+12|0,q[nn+36>>2]);Ka(a,kn,ln);P=nn+48|0;}function FB(){var a=0;a=P-16|0;q[a+12>>2]=21424;q[a+8>>2]=2139095040;q[q[a+12>>2]>>2]=q[a+8>>2];Xv();}function GB(q,kn){i(q|0,kn|0);}function HB(q,kn,ln,mn){var on=0,pn=0,qn=0,rn=0,sn=0,tn=0;on=ln>>>16;pn=q>>>16;tn=w(on,pn);qn=ln&65535;rn=q&65535;sn=w(qn,rn);pn=(sn>>>16)+w(pn,qn)|0;on=(pn&65535)+w(on,rn)|0;q=(((w(kn,ln)+tn|0)+w(q,mn)|0)+(pn>>>16)|0)+(on>>>16)|0;kn=sn&65535|on<<16;Q=q;return kn}function IB(q,kn,ln){var mn=0,un=0,vn=0,wn=0,xn=0,yn=0,zn=0,An=0,Bn=0;a:{b:{c:{d:{e:{f:{g:{h:{i:{un=kn;if(un){mn=ln;if(!mn){break i}break h}kn=q;q=(q>>>0)/(ln>>>0)|0;GB(kn-w(q,ln)|0,0);Q=0;return q}if(!q){break g}break f}wn=mn+ -1|0;if(!(wn&mn)){break e}wn=(z(mn)+33|0)-z(un)|0;xn=0-wn|0;break c}q=(un>>>0)/0|0;GB(0,un-w(q,0)|0);Q=0;return q}mn=32-z(un)|0;if(mn>>>0<31){break d}break b}GB(q&wn,0);if((mn|0)==1){break a}if(mn){mn=31-z(mn+ -1^mn)|0;}else {mn=32;}ln=mn&31;if(32<=(mn&63)>>>0){un=0;q=kn>>>ln;}else {un=kn>>>ln;q=((1<<ln)-1&kn)<<32-ln|q>>>ln;}Q=un;return q}wn=mn+1|0;xn=63-mn|0;}mn=kn;un=wn&63;vn=un&31;if(32<=un>>>0){un=0;vn=mn>>>vn;}else {un=mn>>>vn;vn=((1<<vn)-1&mn)<<32-vn|q>>>vn;}xn=xn&63;mn=xn&31;if(32<=xn>>>0){kn=q<<mn;q=0;}else {kn=(1<<mn)-1&q>>>32-mn|kn<<mn;q=q<<mn;}if(wn){mn=-1;xn=ln+ -1|0;if(xn>>>0<4294967295){mn=0;}while(1){yn=vn<<1|kn>>>31;zn=yn;un=un<<1|vn>>>31;yn=mn-(un+(xn>>>0<yn>>>0)|0)>>31;An=ln&yn;vn=zn-An|0;un=un-(zn>>>0<An>>>0)|0;kn=kn<<1|q>>>31;q=Bn|q<<1;yn=yn&1;Bn=yn;wn=wn+ -1|0;if(wn){continue}break}}GB(vn,un);Q=kn<<1|q>>>31;return yn|q<<1}GB(q,kn);q=0;kn=0;}Q=kn;return q}function JB(q,kn,ln,Cn){q=HB(q,kn,ln,Cn);return q}function KB(q,kn,ln){return IB(q,kn,ln)}function LB(q){var kn=0;kn=q&31;q=0-q&31;return (-1>>>kn&-2)<<kn|(-1<<q&-2)>>>q}




            // EMSCRIPTEN_END_FUNCS
            n[1]=Uu;n[2]=Zu;n[3]=dk;n[4]=Iu;n[5]=Jo;n[6]=bn;n[7]=Mo;n[8]=so;n[9]=mo;n[10]=go;n[11]=Zn;n[12]=Vn;n[13]=Hd;n[14]=un;n[15]=nn;n[16]=Xm;n[17]=Qm;n[18]=Ca;n[19]=wb;n[20]=sv;n[21]=Ib;n[22]=wb;n[23]=xb;n[24]=Ho;n[25]=Go;n[26]=Fo;n[27]=Ca;n[28]=ig;n[29]=jg;n[30]=Ib;n[31]=wb;n[32]=Ca;n[33]=eg;n[34]=wo;n[35]=Ib;n[36]=wb;n[37]=Ca;n[38]=eg;n[39]=to;n[40]=ro;n[41]=Ib;n[42]=wb;n[43]=cg;n[44]=po;n[45]=oo;n[46]=no;n[47]=Ib;n[48]=wb;n[49]=Ca;n[50]=ig;n[51]=io;n[52]=fg;n[53]=On;n[54]=Nn;n[55]=Mn;n[56]=Rn;n[57]=Qn;n[58]=Pn;n[59]=Sf;n[60]=Kn;n[61]=ZA;n[62]=YA;n[63]=Zm;n[64]=Gd;n[65]=In;n[66]=RA;n[67]=SA;n[68]=An;n[69]=zn;n[70]=XA;n[71]=_m;n[72]=En;n[73]=tn;n[74]=sn;n[75]=rn;n[76]=qn;n[77]=Cn;n[78]=Bn;n[79]=Fn;n[80]=xn;n[81]=wn;n[82]=yn;n[83]=dn;n[84]=cn;n[85]=an;n[86]=Nf;n[87]=Nf;n[88]=Mf;n[89]=Hn;n[90]=Rf;n[91]=Qf;n[92]=Rf;n[93]=Qf;n[94]=fn;n[95]=gn;n[96]=mn;n[97]=pn;n[98]=vn;n[99]=Dn;n[100]=jn;n[101]=Jn;n[102]=en;n[103]=Gn;n[104]=Pa;n[105]=Ym;n[106]=Lf;n[107]=Wm;n[108]=Vm;n[109]=X;n[110]=Um;n[111]=Tm;n[112]=Kf;n[113]=Wa;n[114]=sb;n[115]=Rm;n[116]=lm;n[117]=km;n[118]=If;n[119]=hm;n[120]=gm;n[121]=Pm;n[122]=Om;n[123]=Kf;n[124]=Wa;n[125]=Lm;n[126]=Km;n[127]=Df;n[128]=Im;n[129]=Hm;n[130]=Gm;n[131]=Fm;n[132]=Jm;n[133]=Em;n[134]=Wa;n[135]=xm;n[136]=vm;n[137]=um;n[138]=wm;n[139]=Wa;n[140]=Wa;n[141]=dm;n[142]=cm;n[143]=bm;n[144]=$l;n[145]=_l;n[146]=zf;n[147]=Zl;n[148]=Yl;n[149]=Xl;n[150]=Ha;n[151]=sb;n[152]=yd;n[153]=Va;n[154]=Wa;n[155]=Rl;n[156]=Pl;n[157]=Nl;n[158]=Ml;n[159]=Ll;n[160]=Kl;n[161]=Jl;n[162]=Wa;n[163]=Dl;n[164]=Gl;n[165]=Fl;n[166]=Cl;n[167]=zl;n[168]=yl;n[169]=wl;n[170]=vl;n[171]=xl;n[172]=Wa;n[173]=ul;n[174]=tl;n[175]=sl;n[176]=nl;n[177]=ml;n[178]=ll;n[179]=kl;n[180]=jl;n[181]=il;n[182]=hl;n[183]=gl;n[184]=rf;n[185]=fl;n[186]=ua;n[187]=Sk;n[188]=ua;n[189]=Rk;n[190]=pf;n[191]=Zk;n[192]=Wk;n[193]=Uk;n[194]=Xk;n[195]=Yk;n[196]=Vk;n[197]=Pk;n[198]=Ok;n[199]=tk;n[200]=Pa;n[201]=Jk;n[202]=Ik;n[203]=Dk;n[204]=Ck;n[205]=Bk;n[206]=Ak;n[207]=zk;n[208]=yk;n[209]=vk;n[210]=uk;n[211]=Mk;n[212]=Hk;n[213]=Gk;n[214]=Fk;n[215]=Ek;n[216]=X;n[217]=sk;n[218]=hb;n[219]=ok;n[220]=mk;n[221]=jf;n[222]=nk;n[223]=kk;n[224]=jk;n[225]=ik;n[226]=hk;n[227]=hf;n[228]=fk;n[229]=ek;n[230]=ck;n[231]=$j;n[232]=_j;n[233]=Zj;n[234]=Vj;n[235]=Yj;n[236]=Wj;n[237]=Xj;n[238]=Tj;n[239]=Uj;n[240]=Sj;n[241]=Pj;n[242]=Oj;n[243]=Nj;n[244]=Gd;n[245]=Gd;n[246]=Rj;n[247]=Qj;n[248]=da;n[249]=X;n[250]=Mj;n[251]=eb;n[252]=fy;n[253]=da;n[254]=X;n[255]=Gj;n[256]=da;n[257]=X;n[258]=Ma;n[259]=X;n[260]=Cj;n[261]=da;n[262]=X;n[263]=ua;n[264]=ua;n[265]=Bj;n[266]=da;n[267]=X;n[268]=Aj;n[269]=Jb;n[270]=Pa;n[271]=da;n[272]=Ha;n[273]=yj;n[274]=xj;n[275]=wj;n[276]=Jb;n[277]=dc;n[278]=_e;n[279]=vj;n[280]=mf;n[281]=cc;n[282]=sj;n[283]=tj;n[284]=da;n[285]=X;n[286]=rj;n[287]=X;n[288]=qj;n[289]=X;n[290]=pj;n[291]=X;n[292]=oj;n[293]=X;n[294]=nj;n[295]=X;n[296]=mj;n[297]=X;n[298]=lj;n[299]=X;n[300]=kj;n[301]=X;n[302]=jj;n[303]=X;n[304]=ij;n[305]=Ze;n[306]=gj;n[307]=ej;n[308]=dj;n[309]=$i;n[310]=_i;n[311]=Yi;n[312]=Jb;n[313]=dc;n[314]=da;n[315]=X;n[316]=Xe;n[317]=Ve;n[318]=Xi;n[319]=Ri;n[320]=Qi;n[321]=Wi;n[322]=Vi;n[323]=Ui;n[324]=Ti;n[325]=Vb;n[326]=_b;n[327]=Ue;n[328]=ky;n[329]=iy;n[330]=jy;n[331]=Ub;n[332]=CB;n[333]=nd;n[334]=BB;n[335]=AB;n[336]=nq;n[337]=zB;n[338]=yd;n[339]=yB;n[340]=hy;n[341]=$h;n[342]=xB;n[343]=gy;n[344]=wB;n[345]=ey;n[346]=Mf;n[347]=vB;n[348]=vy;n[349]=Pi;n[350]=Pi;n[351]=tB;n[352]=sB;n[353]=pf;n[354]=rB;n[355]=qB;n[356]=pB;n[357]=da;n[358]=X;n[359]=oB;n[360]=Oi;n[361]=Pa;n[362]=ua;n[363]=da;n[364]=X;n[365]=X;n[366]=Ni;n[367]=kB;n[368]=jB;n[369]=iB;n[370]=Jb;n[371]=dc;n[372]=X;n[373]=gB;n[374]=fB;n[375]=hB;n[376]=X;n[377]=Te;n[378]=X;n[379]=ua;n[380]=ua;n[381]=eB;n[382]=X;n[383]=Li;n[384]=Ha;n[385]=cB;n[386]=Ha;n[387]=bB;n[388]=Se;n[389]=$A;n[390]=Fi;n[391]=Ii;n[392]=Re;n[393]=OA;n[394]=X;n[395]=NA;n[396]=da;n[397]=X;n[398]=ua;n[399]=MA;n[400]=LA;n[401]=Ci;n[402]=Ci;n[403]=X;n[404]=KA;n[405]=JA;n[406]=X;n[407]=Bi;n[408]=X;n[409]=Bi;n[410]=X;n[411]=IA;n[412]=X;n[413]=HA;n[414]=FA;n[415]=da;n[416]=X;n[417]=EA;n[418]=X;n[419]=DA;n[420]=da;n[421]=X;n[422]=CA;n[423]=BA;n[424]=AA;n[425]=zA;n[426]=yA;n[427]=X;n[428]=Ai;n[429]=uA;n[430]=tA;n[431]=sA;n[432]=Jb;n[433]=dc;n[434]=da;n[435]=X;n[436]=lA;n[437]=yi;n[438]=oA;n[439]=nA;n[440]=mA;n[441]=kA;n[442]=X;n[443]=ua;n[444]=ua;n[445]=If;n[446]=X;n[447]=ua;n[448]=ua;n[449]=jA;n[450]=X;n[451]=iA;n[452]=Le;n[453]=eA;n[454]=vi;n[455]=cA;n[456]=bA;n[457]=X;n[458]=aA;n[459]=ti;n[460]=_z;n[461]=Xz;n[462]=Wz;n[463]=cc;n[464]=ri;n[465]=Uz;n[466]=Sz;n[467]=Rz;n[468]=Tz;n[469]=X;n[470]=Qz;n[471]=Pa;n[472]=_b;n[473]=Oz;n[474]=py;n[475]=qy;n[476]=Iz;n[477]=sy;n[478]=ry;n[479]=Wb;n[480]=ua;n[481]=Je;n[482]=Nz;n[483]=Mz;n[484]=Lz;n[485]=Kz;n[486]=gd;n[487]=qi;n[488]=Jz;n[489]=oi;n[490]=Hz;n[491]=Cz;n[492]=Az;n[493]=yz;n[494]=Bz;n[495]=xz;n[496]=wz;n[497]=vz;n[498]=uz;n[499]=zz;n[500]=Ez;n[501]=Dz;n[502]=da;n[503]=ob;n[504]=Ue;n[505]=oz;n[506]=nz;n[507]=mz;n[508]=lz;n[509]=bd;n[510]=kz;n[511]=pz;n[512]=rz;n[513]=qz;n[514]=li;n[515]=iz;n[516]=ob;n[517]=ki;n[518]=bz;n[519]=az;n[520]=$y;n[521]=_y;n[522]=cz;n[523]=ez;n[524]=dz;n[525]=Zy;n[526]=Yy;n[527]=Ky;n[528]=Uy;n[529]=Jy;n[530]=nd;n[531]=Qy;n[532]=Py;n[533]=Oy;n[534]=bd;n[535]=Ty;n[536]=Vy;n[537]=Gy;n[538]=Ny;n[539]=Sy;n[540]=Ry;n[541]=da;n[542]=X;n[543]=ii;n[544]=X;n[545]=ii;n[546]=X;n[547]=My;n[548]=da;n[549]=ob;n[550]=gi;n[551]=Fy;n[552]=fi;n[553]=fb;n[554]=Iy;n[555]=da;n[556]=X;n[557]=Ey;n[558]=X;n[559]=Dy;n[560]=da;n[561]=ob;n[562]=By;n[563]=zy;n[564]=yy;n[565]=nd;n[566]=xy;n[567]=yd;n[568]=wy;n[569]=Ay;n[570]=Ha;n[571]=Ha;n[572]=bi;n[573]=da;n[574]=ob;n[575]=ki;n[576]=ny;n[577]=my;n[578]=oy;n[579]=ly;n[580]=gd;n[581]=Ha;n[582]=Ha;n[583]=ob;n[584]=$x;n[585]=Zx;n[586]=ay;n[587]=Yx;n[588]=_h;n[589]=Oi;n[590]=bd;n[591]=Xx;n[592]=cy;n[593]=by;n[594]=_b;n[595]=Ux;n[596]=Tx;n[597]=Sx;n[598]=$h;n[599]=Wx;n[600]=Vx;n[601]=Wb;n[602]=Wb;n[603]=gd;n[604]=ua;n[605]=Wb;n[606]=gd;n[607]=qi;n[608]=X;n[609]=Rx;n[610]=da;n[611]=Ha;n[612]=_b;n[613]=Xh;n[614]=Wh;n[615]=Px;n[616]=Ox;n[617]=Xc;n[618]=Nx;n[619]=Mx;n[620]=Lx;n[621]=Uh;n[622]=Kx;n[623]=Jx;n[624]=fi;n[625]=Ix;n[626]=Hx;n[627]=Uh;n[628]=Gx;n[629]=Fx;n[630]=Ex;n[631]=Dx;n[632]=Cx;n[633]=Dh;n[634]=zf;n[635]=bw;n[636]=dw;n[637]=cw;n[638]=Bx;n[639]=X;n[640]=Ax;n[641]=X;n[642]=zx;n[643]=wx;n[644]=vx;n[645]=ux;n[646]=rx;n[647]=qx;n[648]=nd;n[649]=px;n[650]=sx;n[651]=tx;n[652]=ob;n[653]=Xh;n[654]=Wh;n[655]=nx;n[656]=kx;n[657]=_h;n[658]=Xc;n[659]=bd;n[660]=jx;n[661]=ix;n[662]=mx;n[663]=lx;n[664]=hx;n[665]=Rh;n[666]=ex;n[667]=gx;n[668]=Qh;n[669]=Qh;n[670]=Pa;n[671]=Pa;n[672]=Yw;n[673]=Pa;n[674]=Pa;n[675]=dx;n[676]=cx;n[677]=bx;n[678]=Xw;n[679]=fx;n[680]=Oh;n[681]=Zw;n[682]=$w;n[683]=_w;n[684]=Lh;n[685]=Ww;n[686]=Nw;n[687]=Qw;n[688]=Tw;n[689]=cc;n[690]=cc;n[691]=Mw;n[692]=Vw;n[693]=mf;n[694]=Uw;n[695]=Lw;n[696]=Pw;n[697]=Sw;n[698]=Wb;n[699]=Kw;n[700]=Ow;n[701]=X;n[702]=Jw;n[703]=X;n[704]=Iw;n[705]=Jh;n[706]=Fw;n[707]=Ew;n[708]=Dw;n[709]=zw;n[710]=Cw;n[711]=Bw;n[712]=Aw;n[713]=yw;n[714]=Je;n[715]=Je;n[716]=vw;n[717]=uw;n[718]=sb;n[719]=X;n[720]=tw;n[721]=rw;n[722]=X;n[723]=Hh;n[724]=X;n[725]=Hh;n[726]=Uc;n[727]=jw;n[728]=Ha;n[729]=_v;n[730]=Zv;n[731]=sb;n[732]=Yv;n[733]=Tv;n[734]=Uv;n[735]=Sv;n[736]=X;n[737]=Ev;n[738]=Dv;n[739]=vv;n[740]=Cv;n[741]=uv;n[742]=da;n[743]=X;n[744]=sb;n[745]=sb;n[746]=pv;n[747]=fv;n[748]=iv;n[749]=nv;n[750]=X;n[751]=gv;n[752]=jv;n[753]=mv;n[754]=X;n[755]=hv;n[756]=kv;n[757]=lv;function R(){return buffer.byteLength/65536|0}return {"h":FB,"i":ia,"j":qa,"k":pa,"l":Ja,"m":Ia,"n":oa,"o":na,"p":ma,"q":la,"r":ka,"s":Y,"t":Qk,"u":oc,"v":mc,"w":lc,"x":kc,"y":jc,"z":ic,"A":gc,"B":ec,"C":bc,"D":ac,"E":$b,"F":od,"G":md,"H":ld,"I":kd,"J":Yb,"K":Xb,"L":jd,"M":id,"N":Hb,"O":hd,"P":fd,"Q":ed,"R":dd,"S":cd,"T":ad,"U":Y,"V":ia,"W":qa,"X":pa,"Y":Ja,"Z":Ia,"_":oa,"$":na,"aa":ma,"ba":la,"ca":ka,"da":Y,"ea":ia,"fa":qa,"ga":pa,"ha":oa,"ia":na,"ja":ma,"ka":la,"la":ka,"ma":Y,"na":Fe,"oa":De,"pa":Ce,"qa":Be,"ra":Yh,"sa":Vh,"ta":Ae,"ua":ze,"va":ye,"wa":Y,"xa":db,"ya":cb,"za":bb,"Aa":ab,"Ba":$a,"Ca":Y,"Da":sw,"Ea":kw,"Fa":Ch,"Ga":yh,"Ha":uh,"Ia":lh,"Ja":je,"Ka":db,"La":cb,"Ma":bb,"Na":ab,"Oa":$a,"Pa":Y,"Qa":jh,"Ra":Y,"Sa":Kc,"Ta":Y,"Ua":Hb,"Va":hh,"Wa":Y,"Xa":Ab,"Ya":ia,"Za":qa,"_a":pa,"$a":Ja,"ab":Ia,"bb":oa,"cb":na,"db":ma,"eb":la,"fb":ka,"gb":Y,"hb":he,"ib":gh,"jb":fh,"kb":eh,"lb":Fe,"mb":De,"nb":Ce,"ob":Be,"pb":Yh,"qb":Vh,"rb":Ae,"sb":ze,"tb":ye,"ub":Y,"vb":Kc,"wb":dh,"xb":Y,"yb":ge,"zb":fe,"Ab":ee,"Bb":de,"Cb":ce,"Db":be,"Eb":ae,"Fb":$d,"Gb":Jc,"Hb":Ic,"Ib":Dc,"Jb":Hc,"Kb":Y,"Lb":_d,"Mb":Y,"Nb":ia,"Ob":qa,"Pb":pa,"Qb":oa,"Rb":na,"Sb":ma,"Tb":la,"Ub":ka,"Vb":Y,"Wb":Yu,"Xb":ch,"Yb":bh,"Zb":oc,"_b":mc,"$b":lc,"ac":kc,"bc":jc,"cc":ic,"dc":gc,"ec":ec,"fc":bc,"gc":ac,"hc":$b,"ic":od,"jc":md,"kc":ld,"lc":kd,"mc":Yb,"nc":Xb,"oc":jd,"pc":id,"qc":Hb,"rc":hd,"sc":fd,"tc":ed,"uc":dd,"vc":cd,"wc":ad,"xc":Y,"yc":Y,"zc":Zd,"Ac":Yd,"Bc":Xd,"Cc":$g,"Dc":Wd,"Ec":Vd,"Fc":Ud,"Gc":_g,"Hc":Da,"Ic":Vu,"Jc":Da,"Kc":Tb,"Lc":Tu,"Mc":_a,"Nc":Sb,"Oc":Su,"Pc":Ru,"Qc":ia,"Rc":qa,"Sc":pa,"Tc":oa,"Uc":na,"Vc":ma,"Wc":la,"Xc":ka,"Yc":Y,"Zc":Qu,"_c":Kc,"$c":Y,"ad":Tb,"bd":Zg,"cd":_a,"dd":Sb,"ed":Tb,"fd":Zg,"gd":_a,"hd":Sb,"id":Og,"jd":Yg,"kd":Dc,"ld":Hc,"md":Ec,"nd":Pu,"od":Ou,"pd":Nu,"qd":Mu,"rd":Lu,"sd":Ju,"td":db,"ud":cb,"vd":bb,"wd":ab,"xd":$a,"yd":Y,"zd":Xg,"Ad":Wg,"Bd":Ec,"Cd":Gu,"Dd":Fu,"Ed":Eu,"Fd":Du,"Gd":Cu,"Hd":Bu,"Id":Au,"Jd":zu,"Kd":yu,"Ld":xu,"Md":wu,"Nd":vu,"Od":uu,"Pd":tu,"Qd":su,"Rd":ru,"Sd":qu,"Td":pu,"Ud":ou,"Vd":nu,"Wd":mu,"Xd":lu,"Yd":ku,"Zd":ju,"_d":iu,"$d":hu,"ae":Da,"be":fu,"ce":eu,"de":du,"ee":Xb,"fe":Ib,"ge":cu,"he":bu,"ie":au,"je":Rg,"ke":za,"le":av,"me":$t,"ne":Ug,"oe":Tg,"pe":_t,"qe":Zt,"re":Yt,"se":Xt,"te":Wt,"ue":Vt,"ve":Ut,"we":Tt,"xe":St,"ye":Rt,"ze":Qt,"Ae":Pt,"Be":Da,"Ce":Ot,"De":Y,"Ee":Nt,"Fe":Mt,"Ge":Lt,"He":Kt,"Ie":Jt,"Je":It,"Ke":Ht,"Le":Gt,"Me":Pg,"Ne":Ft,"Oe":Et,"Pe":Dt,"Qe":Fe,"Re":De,"Se":Ce,"Te":Be,"Ue":Ct,"Ve":Bt,"We":Ae,"Xe":ze,"Ye":ye,"Ze":he,"_e":gh,"$e":fh,"af":eh,"bf":Y,"cf":At,"df":zt,"ef":yt,"ff":wt,"gf":ut,"hf":tt,"jf":db,"kf":cb,"lf":bb,"mf":ab,"nf":$a,"of":st,"pf":rt,"qf":Y,"rf":qt,"sf":Y,"tf":ot,"uf":nt,"vf":ia,"wf":qa,"xf":pa,"yf":Ja,"zf":Ia,"Af":oa,"Bf":na,"Cf":ma,"Df":la,"Ef":ka,"Ff":Y,"Gf":mt,"Hf":lt,"If":kt,"Jf":it,"Kf":ht,"Lf":gt,"Mf":ft,"Nf":et,"Of":dt,"Pf":bt,"Qf":db,"Rf":cb,"Sf":bb,"Tf":ab,"Uf":$a,"Vf":Y,"Wf":at,"Xf":$s,"Yf":_s,"Zf":Zs,"_f":ia,"$f":qa,"ag":pa,"bg":oa,"cg":na,"dg":ma,"eg":la,"fg":ka,"gg":Ab,"hg":Y,"ig":Ys,"jg":Ja,"kg":Ia,"lg":ia,"mg":qa,"ng":pa,"og":oa,"pg":na,"qg":ma,"rg":la,"sg":ka,"tg":Y,"ug":Da,"vg":Xs,"wg":Ws,"xg":Y,"yg":Vs,"zg":oc,"Ag":mc,"Bg":lc,"Cg":kc,"Dg":jc,"Eg":ic,"Fg":gc,"Gg":ec,"Hg":bc,"Ig":ac,"Jg":$b,"Kg":od,"Lg":md,"Mg":ld,"Ng":kd,"Og":Yb,"Pg":Xb,"Qg":jd,"Rg":id,"Sg":Hb,"Tg":hd,"Ug":fd,"Vg":ed,"Wg":dd,"Xg":cd,"Yg":ad,"Zg":ch,"_g":bh,"$g":Y,"ah":Y,"bh":Us,"ch":Ts,"dh":Ss,"eh":Rs,"fh":Qs,"gh":Ps,"hh":Os,"ih":Ns,"jh":Ch,"kh":yh,"lh":uh,"mh":lh,"nh":je,"oh":db,"ph":cb,"qh":bb,"rh":ab,"sh":$a,"th":Y,"uh":Ms,"vh":Ls,"wh":Ks,"xh":Js,"yh":Is,"zh":Hs,"Ah":Gs,"Bh":jh,"Ch":Y,"Dh":Y,"Eh":Fs,"Fh":Es,"Gh":Ds,"Hh":Cs,"Ih":Bs,"Jh":Ec,"Kh":As,"Lh":Ja,"Mh":Ia,"Nh":zs,"Oh":ia,"Ph":qa,"Qh":pa,"Rh":oa,"Sh":na,"Th":ma,"Uh":la,"Vh":ka,"Wh":Ab,"Xh":Y,"Yh":ws,"Zh":Ja,"_h":Ia,"$h":vs,"ai":ia,"bi":qa,"ci":pa,"di":oa,"ei":na,"fi":ma,"gi":la,"hi":ka,"ii":Ab,"ji":Y,"ki":ts,"li":ss,"mi":rs,"ni":he,"oi":qs,"pi":ps,"qi":ns,"ri":ls,"si":ks,"ti":Ja,"ui":Ia,"vi":js,"wi":is,"xi":hs,"yi":gs,"zi":ia,"Ai":qa,"Bi":pa,"Ci":oa,"Di":na,"Ei":ma,"Fi":la,"Gi":ka,"Hi":Y,"Ii":fs,"Ji":ds,"Ki":cs,"Li":Hb,"Mi":hh,"Ni":Y,"Oi":as,"Pi":ge,"Qi":fe,"Ri":Sg,"Si":_r,"Ti":Rg,"Ui":za,"Vi":Ug,"Wi":Tg,"Xi":Yr,"Yi":Xr,"Zi":Vr,"_i":Ur,"$i":Tr,"aj":Sr,"bj":Pr,"cj":Or,"dj":ee,"ej":de,"fj":ce,"gj":be,"hj":ae,"ij":$d,"jj":Jc,"kj":Ic,"lj":Dc,"mj":Hc,"nj":Y,"oj":Nr,"pj":ge,"qj":fe,"rj":Sg,"sj":Lr,"tj":Kr,"uj":Jr,"vj":Ir,"wj":Hr,"xj":Gr,"yj":Fr,"zj":ee,"Aj":de,"Bj":ce,"Cj":be,"Dj":ae,"Ej":$d,"Fj":Jc,"Gj":Ic,"Hj":Dc,"Ij":Hc,"Jj":Y,"Kj":Er,"Lj":Dr,"Mj":Cr,"Nj":Hg,"Oj":Gg,"Pj":Fg,"Qj":Eg,"Rj":Dg,"Sj":Ar,"Tj":zr,"Uj":yr,"Vj":Cg,"Wj":Bg,"Xj":xr,"Yj":wr,"Zj":vr,"_j":ur,"$j":tr,"ak":sr,"bk":Hd,"ck":Ag,"dk":_d,"ek":Y,"fk":rr,"gk":qr,"hk":pr,"ik":or,"jk":nr,"kk":mr,"lk":lr,"mk":kr,"nk":jr,"ok":hr,"pk":gr,"qk":fr,"rk":er,"sk":dr,"tk":cr,"uk":Zq,"vk":db,"wk":cb,"xk":bb,"yk":ab,"zk":$a,"Ak":Y,"Bk":Yq,"Ck":Xq,"Dk":Zd,"Ek":Yd,"Fk":Xd,"Gk":$g,"Hk":Wd,"Ik":Vd,"Jk":Ud,"Kk":_g,"Lk":Da,"Mk":Wq,"Nk":Vq,"Ok":ia,"Pk":qa,"Qk":pa,"Rk":oa,"Sk":na,"Tk":ma,"Uk":la,"Vk":ka,"Wk":Y,"Xk":Uq,"Yk":Tq,"Zk":Sq,"_k":Rq,"$k":Qq,"al":Pq,"bl":Da,"cl":Oq,"dl":Mq,"el":Lq,"fl":Hg,"gl":Gg,"hl":ia,"il":Fg,"jl":Eg,"kl":Dg,"ll":Kq,"ml":Jq,"nl":Iq,"ol":Cg,"pl":Bg,"ql":vg,"rl":Hq,"sl":Gq,"tl":Fq,"ul":Eq,"vl":Cq,"wl":Bq,"xl":Hd,"yl":Ag,"zl":_d,"Al":Y,"Bl":Aq,"Cl":zq,"Dl":yq,"El":ia,"Fl":qa,"Gl":pa,"Hl":oa,"Il":na,"Jl":ma,"Kl":la,"Ll":ka,"Ml":Y,"Nl":Pg,"Ol":vg,"Pl":xq,"Ql":Y,"Rl":wq,"Sl":vq,"Tl":Zd,"Ul":Yd,"Vl":Xd,"Wl":Wd,"Xl":Vd,"Yl":Ud,"Zl":uq,"_l":Ec,"$l":tq,"am":Ja,"bm":Ia,"cm":pq,"dm":ia,"em":qa,"fm":pa,"gm":oa,"hm":na,"im":ma,"jm":la,"km":ka,"lm":Ab,"mm":Y,"nm":mq,"om":Da,"pm":lq,"qm":ia,"rm":qa,"sm":pa,"tm":oa,"um":na,"vm":ma,"wm":la,"xm":ka,"ym":Y,"zm":kq,"Am":jq,"Bm":iq,"Cm":Jc,"Dm":Ic,"Em":gq,"Fm":fq,"Gm":Da,"Hm":Xg,"Im":Wg,"Jm":Og,"Km":Yg,"Lm":Da,"Mm":Tb,"Nm":eq,"Om":_a,"Pm":Sb,"Qm":Y,"Rm":dq,"Sm":db,"Tm":cb,"Um":bb,"Vm":ab,"Wm":$a,"Xm":Y,"Ym":cq,"Zm":bq,"_m":Kc,"$m":dh,"an":Y,"bn":aq,"cn":Yb,"dn":$p,"en":_p,"fn":Yp,"gn":Xp,"hn":Wp,"jn":Vp,"kn":Up,"ln":Tp,"mn":Sp,"nn":Qp,"on":Pp,"pn":Np,"qn":Mp,"rn":Lp,"sn":Kp,"tn":Jp,"un":Ip,"vn":Hp,"wn":Gp,"xn":Ep,"yn":Cp,"zn":Bp,"An":yp,"Bn":xp,"Cn":vp,"Dn":tp,"En":sp,"Fn":rp,"Gn":qp,"Hn":pp,"In":op,"Jn":np,"Kn":lp,"Ln":jp,"Mn":ip,"Nn":hp,"On":oc,"Pn":mc,"Qn":lc,"Rn":kc,"Sn":jc,"Tn":ic,"Un":gc,"Vn":ec,"Wn":bc,"Xn":ac,"Yn":$b,"Zn":od,"_n":md,"$n":ld,"ao":kd,"bo":Yb,"co":Xb,"eo":jd,"fo":id,"go":Hb,"ho":hd,"io":fd,"jo":ed,"ko":dd,"lo":cd,"mo":ad,"no":Y,"oo":Tb,"po":fp,"qo":Sb,"ro":dp,"so":cp,"to":$o,"uo":_o,"vo":Zo,"wo":je,"xo":Xo,"yo":Vo,"zo":Uo,"Ao":So,"Bo":Da,"Co":Po,"Do":Ja,"Eo":Ia,"Fo":Oo,"Go":ia,"Ho":qa,"Io":pa,"Jo":oa,"Ko":na,"Lo":ma,"Mo":la,"No":ka,"Oo":Ab,"Po":Y,"Qo":og,"Ro":ng,"So":mg,"To":lg,"Uo":Lo,"Vo":og,"Wo":ng,"Xo":mg,"Yo":lg,"Zo":Ko,"_o":ie,"$o":aa,"ap":ev,"bp":dv,"cp":bv}}var S=(function(mem){var T=new Uint8Array(mem);return(function(offset,s){var U,V;if(typeof Buffer==="undefined"){U=atob(s);for(V=0;V<U.length;V++)T[offset+V]=U.charCodeAt(V);}else {U=Buffer.from(s,"base64");for(V=0;V<U.length;V++)T[offset+V]=U[V];}})})(wasmMemory.buffer);S(1028,"sAQAAAEAAAAEAAAABQAAAAYAAAAHAAAACAAAAAkAAAAKAAAACwAAAAwAAAANAAAADgAAAA8AAAAQAAAAEQAAADMwY2NLaW5lbWF0aWNDaGFyYWN0ZXJDb250cm9sbGVyADMwYnRDaGFyYWN0ZXJDb250cm9sbGVySW50ZXJmYWNlADE3YnRBY3Rpb25JbnRlcmZhY2UAAAAoUQAAhgQAAFBRAABlBAAAnAQAAFBRAABEBAAApAQAAAAAAACkBAAAEgAAABMAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAAAAAAnAQAABUAAAAWAAAAFAAAABQAAAAAAAAAzAUAABcAAAAYAAAAGQAAABoAAAA0M2NjS2luZW1hdGljQ2xvc2VzdE5vdE1lQ29udmV4UmVzdWx0Q2FsbGJhY2sATjE2YnRDb2xsaXNpb25Xb3JsZDI3Q2xvc2VzdENvbnZleFJlc3VsdENhbGxiYWNrRQBOMTZidENvbGxpc2lvbldvcmxkMjBDb252ZXhSZXN1bHRDYWxsYmFja0UAAChRAACMBQAAUFEAAFoFAAC4BQAAUFEAACwFAADABQAAAAAAAMAFAAAbAAAAHAAAABkAAAAdAAAAAAAAALgFAAAeAAAAHwAAABkAAAAUAAAAAAAAAFgGAAAgAAAAIQAAACIAAAAyM2NjT3ZlcmxhcEZpbHRlckNhbGxiYWNrADIzYnRPdmVybGFwRmlsdGVyQ2FsbGJhY2sAKFEAADYGAABQUQAAHAYAAFAGAAAAAAAAUAYAACMAAAAkAAAAFAAAAAAAAADABgAAJQAAACYAAAAnAAAAKAAAADIwYnREZWZhdWx0TW90aW9uU3RhdGUAMTNidE1vdGlvblN0YXRlAAAoUQAApwYAAFBRAACQBgAAuAYAAAAAAAC4BgAAKQAAACoAAAAUAAAAFAAAAAAAAABcBwAAKwAAACwAAAAtAAAALgAAAE4xNmJ0Q29sbGlzaW9uV29ybGQyNEFsbEhpdHNSYXlSZXN1bHRDYWxsYmFja0UATjE2YnRDb2xsaXNpb25Xb3JsZDE3UmF5UmVzdWx0Q2FsbGJhY2tFAAAoUQAAKwcAAFBRAAD8BgAAVAcAAAAAAABUBwAALwAAADAAAAAtAAAAFAAAAAAAAADIBwAAMQAAADIAAAAtAAAAMwAAAE4xNmJ0Q29sbGlzaW9uV29ybGQyNENsb3Nlc3RSYXlSZXN1bHRDYWxsYmFja0UAAFBRAACYBwAAVAcAAAAAAAAcCAAANAAAADUAAAA2AAAANwAAADgAAAA5AAAAOgAAAGJ0UmlnaWRCb2R5RmxvYXREYXRhADExYnRSaWdpZEJvZHkAAFBRAAANCAAAvBEAAAAAAAB8CgAAOwAAADwAAAA9AAAAPgAAAD8AAABAAAAAQQAAAEIAAABDAAAARAAAAEUAAABGAAAARwAAAEgAAABJAAAASgAAAEsAAABMAAAATQAAAE4AAABPAAAAUAAAAFEAAABSAAAAUwAAAFQAAABVAAAAVgAAAFcAAABYAAAAWQAAAFoAAABbAAAAXAAAAF0AAABeAAAAXwAAAGAAAABhAAAAYgAAAGMAAABkAAAAZQAAAGYAAABnAAAAaAAAAGkAAABkZWJ1Z0RyYXdXb3JsZABpbnRlcm5hbFNpbmdsZVN0ZXBTaW11bGF0aW9uAHVwZGF0ZUFjdGlvbnMAdXBkYXRlQWN0aXZhdGlvblN0YXRlAHNvbHZlQ29uc3RyYWludHMAY2FsY3VsYXRlU2ltdWxhdGlvbklzbGFuZHMAcHJlZGljdGl2ZSBjb252ZXhTd2VlcFRlc3QAcmVsZWFzZSBwcmVkaWN0aXZlIGNvbnRhY3QgbWFuaWZvbGRzAGNyZWF0ZVByZWRpY3RpdmVDb250YWN0cwBDQ0QgbW90aW9uIGNsYW1waW5nAGludGVncmF0ZVRyYW5zZm9ybXMAYXBwbHkgc3BlY3VsYXRpdmUgY29udGFjdCByZXN0aXR1dGlvbgBwcmVkaWN0VW5jb25zdHJhaW50TW90aW9uAGJ0RHluYW1pY3NXb3JsZEZsb2F0RGF0YQAyM2J0RGlzY3JldGVEeW5hbWljc1dvcmxkADE1YnREeW5hbWljc1dvcmxkAAAAUFEAAFwKAACIIQAAUFEAAEIKAABwCgAAAAAAAPAKAABqAAAAawAAAGwAAAAyN0lucGxhY2VTb2x2ZXJJc2xhbmRDYWxsYmFjawBOMjVidFNpbXVsYXRpb25Jc2xhbmRNYW5hZ2VyMTRJc2xhbmRDYWxsYmFja0UAKFEAALoKAABQUQAAnAoAAOgKAAAAAAAAPAsAAB4AAABtAAAAbgAAAG8AAAAzNGJ0Q2xvc2VzdE5vdE1lQ29udmV4UmVzdWx0Q2FsbGJhY2sAAAAAUFEAABQLAADABQAAAAAAAJALAABwAAAAcQAAAHIAAABzAAAAdAAAAHUAAAB2AAAAdwAAAHgAAAB5AAAAegAAADE3YnRGaXhlZENvbnN0cmFpbnQAUFEAAHwLAAA0DQAAYnRHZW5lcmljNkRvZlNwcmluZzJDb25zdHJhaW50RGF0YQAAAAAAABgMAAB7AAAAfAAAAH0AAABzAAAAfgAAAH8AAAB2AAAAgAAAAIEAAACCAAAAgwAAAIQAAACFAAAAMjNidEdlbmVyaWM2RG9mQ29uc3RyYWludAAAAFBRAAD8CwAAQA4AAGJ0R2VuZXJpYzZEb2ZDb25zdHJhaW50RGF0YQAAAAAAoAwAAHsAAACGAAAAfQAAAHMAAAB+AAAAhwAAAHYAAACAAAAAgQAAAIgAAACJAAAAhAAAAIUAAACKAAAAMjlidEdlbmVyaWM2RG9mU3ByaW5nQ29uc3RyYWludABQUQAAgAwAABgMAABidEdlbmVyaWM2RG9mU3ByaW5nQ29uc3RyYWludERhdGEAAAAAAAAANA0AAHsAAACLAAAAcgAAAHMAAAB0AAAAdQAAAHYAAAB3AAAAeAAAAHkAAAB6AAAAAAAAAAEAAAACAAAAMzBidEdlbmVyaWM2RG9mU3ByaW5nMkNvbnN0cmFpbnQAAAAAUFEAABANAABADgAAAAAAAJQNAAB7AAAAjAAAAI0AAABzAAAAjgAAAI8AAAB2AAAAkAAAAJEAAACSAAAAkwAAAJQAAAAyM2J0UG9pbnQyUG9pbnRDb25zdHJhaW50AAAAUFEAAHgNAABADgAAYnRQb2ludDJQb2ludENvbnN0cmFpbnRGbG9hdERhdGE=");S(3528,"");S(11832,"qC4AAPYBAAD3AQAA+AEAAEgBAABJAQAASgEAAPkBAABMAQAA+gEAAPsBAAD8AQAAUAEAAFEBAAD9AQAA/gEAAFQBAAD/AQAAAAIAAFcBAAABAgAAWQEAAN8BAADgAQAAMTFidENvbmVTaGFwZQAAAFBRAACYLgAA2DYAAENvbmUAYnRDb25lU2hhcGVEYXRh");S(11984,"9C4AAAICAAADAgAAMThidENvbnZleFBvbHloZWRyb24AAAAAKFEAANwuAAAAAAAAcC8AAPYBAAAEAgAABQIAAEgBAABJAQAASgEAAEsBAABMAQAABgIAAAcCAABPAQAACAIAAAkCAABSAQAAUwEAAFQBAAAKAgAACwIAAFcBAAAMAgAAWQEAAN8BAADgAQAAMTNidFNwaGVyZVNoYXBlAFBRAABgLwAA2DYAAFNQSEVSRQAAAAAAABQwAAANAgAADgIAAA8CAABIAQAASQEAAEoBAAAQAgAAEQIAABICAAATAgAATwEAABQCAAAVAgAAFgIAABcCAABUAQAAGAIAABkCAAAaAgAAGwIAABwCAABidFRyaWFuZ2xlTWVzaFNoYXBlRGF0YQAyMmJ0QnZoVHJpYW5nbGVNZXNoU2hhcGUAAAAAUFEAAPgvAABoMgAAAAAAALwwAAAdAgAAHgIAAB8CAABaTjIyYnRCdmhUcmlhbmdsZU1lc2hTaGFwZTE0cGVyZm9ybVJheWNhc3RFUDE4YnRUcmlhbmdsZUNhbGxiYWNrUks5YnRWZWN0b3IzUzRfRTIxTXlOb2RlT3ZlcmxhcENhbGxiYWNrADIxYnROb2RlT3ZlcmxhcENhbGxiYWNrAChRAACcMAAAUFEAADQwAAC0MAAAAAAAAFAxAAAdAgAAIAIAACECAABaTjIyYnRCdmhUcmlhbmdsZU1lc2hTaGFwZTE3cGVyZm9ybUNvbnZleGNhc3RFUDE4YnRUcmlhbmdsZUNhbGxiYWNrUks5YnRWZWN0b3IzUzRfUzRfUzRfRTIxTXlOb2RlT3ZlcmxhcENhbGxiYWNrAAAAAFBRAADcMAAAtDAAAAAAAADgMQAAHQIAACICAAAjAgAAWk5LMjJidEJ2aFRyaWFuZ2xlTWVzaFNoYXBlMTlwcm9jZXNzQWxsVHJpYW5nbGVzRVAxOGJ0VHJpYW5nbGVDYWxsYmFja1JLOWJ0VmVjdG9yM1M0X0UyMU15Tm9kZU92ZXJsYXBDYWxsYmFjawAAAFBRAABwMQAAtDAAAEJWSFRSSUFOR0xFTUVTSAAAAAAAaDIAACQCAAAlAgAADwIAAEgBAABJAQAASgEAACYCAAARAgAAEgIAACcCAABPAQAAFAIAABUCAAAoAgAAKQIAAFQBAAAqAgAAGQIAABoCAAAxOWJ0VHJpYW5nbGVNZXNoU2hhcGUAAABQUQAAUDIAADA5AAAAAAAA8DIAACsCAAAsAgAALQIAAFpOSzE5YnRUcmlhbmdsZU1lc2hTaGFwZTE5cHJvY2Vzc0FsbFRyaWFuZ2xlc0VQMThidFRyaWFuZ2xlQ2FsbGJhY2tSSzlidFZlY3RvcjNTNF9FMTZGaWx0ZXJlZENhbGxiYWNrAAAAUFEAAIgyAAAoNwAAAAAAACgzAABlAQAALgIAAC8CAAAyMVN1cHBvcnRWZXJ0ZXhDYWxsYmFjawBQUQAAEDMAAPw2AABUUklBTkdMRU1FU0g=");S(13128,"qDMAADACAAAxAgAAMgIAAEgBAABJAQAASgEAADMCAAA0AgAANQIAADYCAABPAQAAFAIAABUCAAA3AgAAOAIAAFQBAAA5AgAAMThidFN0YXRpY1BsYW5lU2hhcGUAAAAAUFEAAJAzAAAwOQAAU1RBVElDUExBTkUAYnRTdGF0aWNQbGFuZVNoYXBlRGF0YQAAAAAAAPw0AABFAQAAOgIAAPgBAABIAQAASQEAAEoBAABLAQAATAEAANsBAAAUAAAATwEAAFABAABRAQAAUgEAAFMBAABUAQAAVQEAAN0BAABXAQAA3gEAAFkBAADfAQAA4AEAAFwBAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAAAAAADA1AABFAQAAOwIAADwCAABIAQAASQEAAEoBAADaAQAATAEAANsBAAAUAAAATwEAAFABAABRAQAAUgEAAFMBAABUAQAAVQEAAN0BAABXAQAA3gEAAFkBAADfAQAA4AEAAFwBAAAUAAAAFAAAABQAAAAUAAAAFAAAABQAAAAUAAAAMjNidFBvbHloZWRyYWxDb252ZXhTaGFwZQAAAFBRAADgNAAA2DYAADM0YnRQb2x5aGVkcmFsQ29udmV4QWFiYkNhY2hpbmdTaGFwZQAAAABQUQAACDUAAPw0AAAAAAAAmDUAAD0CAAA+AgAAPwIAAEgBAABJAQAASgEAAEACAABBAgAAQgIAAEMCAABPAQAAFAIAABUCAAAoAgAAKQIAAFQBAABEAgAAMTJidEVtcHR5U2hhcGUAAFBRAACINQAAMDkAAEVtcHR5AGJ0Q29sbGlzaW9uU2hhcGVEYXRhADE2YnRDb2xsaXNpb25TaGFwZQAAAChRAAC/NQAAAAAAAFA2AAD2AQAARQIAABQAAABIAQAASQEAAEoBAAAUAAAAFAAAABQAAAAUAAAATwEAABQAAAAUAAAAKAIAACkCAABUAQAAFAAAABQAAABXAQAAFAAAABQAAAAUAAAAFAAAADEzYnRDb252ZXhTaGFwZQBQUQAAQDYAANQ1AAAAAAAA2DYAAPYBAABGAgAA+AEAAEgBAABJAQAASgEAAEsBAABMAQAAFAAAABQAAABPAQAAUAEAAFEBAABSAQAAUwEAAFQBAABVAQAAFAAAAFcBAAAUAAAAWQEAAN8BAADgAQAAMjFidENvbnZleEludGVybmFsU2hhcGUAUFEAAMA2AABQNgAAMThidFRyaWFuZ2xlQ2FsbGJhY2sAAAAAKFEAAOQ2AAAzMWJ0SW50ZXJuYWxUcmlhbmdsZUluZGV4Q2FsbGJhY2sAAAAoUQAABDcAAAAAAACoNwAA9gEAAEcCAABIAgAASAEAAEkBAABKAQAASQIAAEwBAABKAgAASwIAAEwCAABNAgAAUQEAAE4CAABPAgAAVAEAAFUBAABQAgAAVwEAAFECAABZAQAA3wEAAOABAAAxNGJ0Q2Fwc3VsZVNoYXBlAAAAAFBRAACUNwAA2DYAAENhcHN1bGVTaGFwZQBidENhcHN1bGVTaGFwZURhdGEAAAAAAHQ4AABFAQAAUgIAADwCAABIAQAASQEAAEoBAABTAgAAVAIAANsBAABVAgAATwEAAFABAABRAQAAUgEAAFMBAABUAQAAVgIAAFcCAABXAQAAWAIAAFkBAADfAQAA4AEAAFwBAABZAgAAWgIAAFsCAABcAgAAXQIAAF4CAABfAgAAMjVidENvbnZleFRyaWFuZ2xlTWVzaFNoYXBlAFBRAABYOAAAMDUAAAAAAAC0OAAAKwIAAGACAABhAgAAMjZMb2NhbFN1cHBvcnRWZXJ0ZXhDYWxsYmFjawAAAABQUQAAlDgAACg3AABDb252ZXhUcmltZXNoAAAAAAAAADA5AABiAgAAYwIAABQAAABIAQAASQEAAEoBAAAUAAAAFAAAABQAAAAUAAAATwEAABQCAAAVAgAAKAIAACkCAABUAQAAFAAAADE0YnRDb25jYXZlU2hhcGUAAAAAUFEAABw5AADUNQAAAAAAANQ5AABFAQAAZAIAAGUCAABIAQAASQEAAEoBAABmAgAATAEAAGcCAABoAgAATwEAAGkCAABRAQAAUgEAAFMBAABUAQAAagIAAGsCAABXAQAAbAIAAFkBAABtAgAAbgIAAFwBAABvAgAAcAIAAHECAAByAgAAcwIAAHQCAAB1AgAAdgIAADEwYnRCb3hTaGFwZQAAAABQUQAAxDkAAPw0AABCb3gAAACAPwAAgL8=");S(14854,"gD8AAIC/");S(14886,"gD8AAIC/");S(14900,"AQAAAAIAAAAAAAAAAQAAAAIAAAADAAAABAAAAAQAAAAFAAAABgAAAAEAAAACAAAAAwAAAAMAAAAEAAAABQAAAAYAAAAHAAAABQAAAAYAAAAHAAAABwAAAAAAAADIOgAAdwIAAHgCAAB5AgAAegIAAHsCAAB8AgAAfQIAAH4CAAAxNGJ0T3B0aW1pemVkQnZoAAAAAFBRAAC0OgAAuEIAAAAAAABMOwAAKwIAAH8CAACAAgAAWk4xNGJ0T3B0aW1pemVkQnZoNWJ1aWxkRVAyM2J0U3RyaWRpbmdNZXNoSW50ZXJmYWNlYlJLOWJ0VmVjdG9yM1M0X0UyOVF1YW50aXplZE5vZGVUcmlhbmdsZUNhbGxiYWNrAFBRAADoOgAAKDcAAAAAAADIOwAAKwIAAIECAACCAgAAWk4xNGJ0T3B0aW1pemVkQnZoNWJ1aWxkRVAyM2J0U3RyaWRpbmdNZXNoSW50ZXJmYWNlYlJLOWJ0VmVjdG9yM1M0X0UyME5vZGVUcmlhbmdsZUNhbGxiYWNrAABQUQAAbDsAACg3AAAAAAAAQDwAAIMCAACEAgAAhQIAAEgBAABJAQAASgEAAIYCAACHAgAAiAIAAIkCAABPAQAAFAIAABUCAAAoAgAAKQIAAFQBAACKAgAAiwIAADI1YnRIZWlnaHRmaWVsZFRlcnJhaW5TaGFwZQBQUQAAJDwAADA5AABIRUlHSFRGSUVMRAAAAAAA1DwAAPYBAACMAgAAjQIAAEgBAABJAQAASgEAAI4CAABMAQAAjwIAAJACAACRAgAAkgIAAFEBAACTAgAAlAIAAFQBAACVAgAAlgIAAFcBAACXAgAAWQEAAN8BAADgAQAAmAIAADE1YnRDeWxpbmRlclNoYXBlAAAAUFEAAMA8AADYNgAAQ3lsaW5kZXJZAGJ0Q3lsaW5kZXJTaGFwZURhdGEAYnRJbnRJbmRleERhdGEAYnRTaG9ydEludEluZGV4VHJpcGxldERhdGEAYnRDaGFySW5kZXhUcmlwbGV0RGF0YQBidFZlY3RvcjNGbG9hdERhdGEAYnRWZWN0b3IzRG91YmxlRGF0YQBidE1lc2hQYXJ0RGF0YQBidFN0cmlkaW5nTWVzaEludGVyZmFjZURhdGEAMjNidFN0cmlkaW5nTWVzaEludGVyZmFjZQAAKFEAAJE9AAAAAAAAGD4AAJkCAACaAgAAmwIAAJwCAACdAgAAngIAAJ8CAACgAgAAoQIAAKICAACjAgAApAIAAKUCAACmAgAApwIAADI2YnRUcmlhbmdsZUluZGV4VmVydGV4QXJyYXkAAAAAUFEAAPg9AACsPQAAAAAAAHw+AACoAgAAqQIAAJsCAACcAgAAnQIAAJ4CAACfAgAAoAIAAKoCAACrAgAAowIAAKQCAAClAgAApgIAAKcCAAAxNGJ0VHJpYW5nbGVNZXNoAAAAAFBRAABoPgAAGD4AAAAAAAB4PwAArAIAAK0CAACuAgAArwIAALACAACxAgAAsgIAALMCAAC0AgAAtQIAALYCAAC3AgAAuAIAALkCAAC6AgAAuwIAALwCAABidEhhc2hlZE92ZXJsYXBwaW5nUGFpckNhY2hlOjpwcm9jZXNzQWxsT3ZlcmxhcHBpbmdQYWlycwAyOGJ0SGFzaGVkT3ZlcmxhcHBpbmdQYWlyQ2FjaGUAMjJidE92ZXJsYXBwaW5nUGFpckNhY2hlADI1YnRPdmVybGFwcGluZ1BhaXJDYWxsYmFjawAAAAAoUQAART8AAFBRAAAsPwAAZD8AAFBRAAANPwAAbD8AAAAAAAAIQAAA+AAAAL0CAAC+AgAAWk4yOGJ0SGFzaGVkT3ZlcmxhcHBpbmdQYWlyQ2FjaGUxOWNsZWFuUHJveHlGcm9tUGFpcnNFUDE3YnRCcm9hZHBoYXNlUHJveHlQMTJidERpc3BhdGNoZXJFMTdDbGVhblBhaXJDYWxsYmFjawAAAFBRAACYPwAAEBMAAAAAAACsQAAA+AAAAL8CAADAAgAAWk4yOGJ0SGFzaGVkT3ZlcmxhcHBpbmdQYWlyQ2FjaGUzN3JlbW92ZU92ZXJsYXBwaW5nUGFpcnNDb250YWluaW5nUHJveHlFUDE3YnRCcm9hZHBoYXNlUHJveHlQMTJidERpc3BhdGNoZXJFMThSZW1vdmVQYWlyQ2FsbGJhY2sAAAAAUFEAAChAAAAQEwAAAAAAACxBAADBAgAAwgIAAMMCAADEAgAAxQIAAMYCAADHAgAAyAIAAMkCAADKAgAAywIAAMwCAADNAgAAzgIAADE2YnREYnZ0QnJvYWRwaGFzZQAyMWJ0QnJvYWRwaGFzZUludGVyZmFjZQAAKFEAAAtBAABQUQAA+EAAACRBAAAAAAAAdEEAAIwBAADPAgAA0AIAANECAACQAQAAkQEAAJIBAAAxOGJ0RGJ2dFRyZWVDb2xsaWRlcgAAAABQUQAAXEEAAAAjAAAAAAAAvEEAAIwBAADSAgAAjgEAANMCAACQAQAAkQEAAJIBAAAxOUJyb2FkcGhhc2VSYXlUZXN0ZXIAAABQUQAApEEAAAAjAAAAAAAABEIAAIwBAADUAgAAjgEAANUCAACQAQAAkQEAAJIBAAAyMEJyb2FkcGhhc2VBYWJiVGVzdGVyAABQUQAA7EEAAAAjAAAxMmJ0RGlzcGF0Y2hlcgAAKFEAABBCAAAAAAAAuEIAANYCAADXAgAAeQIAAHoCAAB7AgAAfAIAAH0CAABidE9wdGltaXplZEJ2aE5vZGVEYXRhAGJ0UXVhbnRpemVkQnZoTm9kZURhdGEAYnRCdmhTdWJ0cmVlSW5mb0RhdGEAYnRRdWFudGl6ZWRCdmhGbG9hdERhdGEAMTRidFF1YW50aXplZEJ2aAAoUQAAp0IAAAAAAAC8FQAACgEAANgCAAAUAAAAFAAAABQAAABSb290AC0rICAgMFgweAAobnVsbCk=");S(17152,"EQAKABEREQAAAAAFAAAAAAAACQAAAAAL");S(17184,"EQAPChEREQMKBwABEwkLCwAACQYLAAALAAYRAAAAERER");S(17233,"Cw==");S(17242,"EQAKChEREQAKAAACAAkLAAAACQALAAAL");S(17291,"DA==");S(17303,"DAAAAAAMAAAAAAkMAAAAAAAMAAAM");S(17349,"Dg==");S(17361,"DQAAAAQNAAAAAAkOAAAAAAAOAAAO");S(17407,"EA==");S(17419,"DwAAAAAPAAAAAAkQAAAAAAAQAAAQAAASAAAAEhIS");S(17474,"EgAAABISEgAAAAAAAAk=");S(17523,"Cw==");S(17535,"CgAAAAAKAAAAAAkLAAAAAAALAAAL");S(17581,"DA==");S(17593,"DAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAwMTIzNDU2Nzg5QUJDREVGLTBYKzBYIDBYLTB4KzB4IDB4AGluZgBJTkYAbmFuAE5BTgAu");S(17680,"AwAAAAQAAAAEAAAABgAAAIP5ogBETm4A/CkVANFXJwDdNPUAYtvAADyZlQBBkEMAY1H+ALveqwC3YcUAOm4kANJNQgBJBuAACeouAByS0QDrHf4AKbEcAOg+pwD1NYIARLsuAJzphAC0JnAAQX5fANaROQBTgzkAnPQ5AItfhAAo+b0A+B87AN7/lwAPmAUAES/vAApaiwBtH20Az342AAnLJwBGT7cAnmY/AC3qXwC6J3UA5evHAD178QD3OQcAklKKAPtr6gAfsV8ACF2NADADVgB7/EYA8KtrACC8zwA29JoA46kdAF5hkQAIG+YAhZllAKAUXwCNQGgAgNj/ACdzTQAGBjEAylYVAMmocwB74mAAa4zAABnERwDNZ8MACejcAFmDKgCLdsQAphyWAESv3QAZV9EApT4FAAUH/wAzfj8AwjLoAJhP3gC7fTIAJj3DAB5r7wCf+F4ANR86AH/yygDxhx0AfJAhAGokfADVbvoAMC13ABU7QwC1FMYAwxmdAK3EwgAsTUEADABdAIZ9RgDjcS0Am8aaADNiAAC00nwAtKeXADdV1QDXPvYAoxAYAE12/ABknSoAcNerAGN8+AB6sFcAFxXnAMBJVgA71tkAp4Q4ACQjywDWincAWlQjAAAfuQDxChsAGc7fAJ8x/wBmHmoAmVdhAKz7RwB+f9gAImW3ADLoiQDmv2AA78TNAGw2CQBdP9QAFt7XAFg73gDem5IA0iIoACiG6ADiWE0AxsoyAAjjFgDgfcsAF8BQAPMdpwAY4FsALhM0AIMSYgCDSAEA9Y5bAK2wfwAe6fIASEpDABBn0wCq3dgArl9CAGphzgAKKKQA05m0AAam8gBcd38Ao8KDAGE8iACKc3gAr4xaAG/XvQAtpmMA9L/LAI2B7wAmwWcAVcpFAMrZNgAoqNIAwmGNABLJdwAEJhQAEkabAMRZxADIxUQATbKRAAAX8wDUQ60AKUnlAP3VEAAAvvwAHpTMAHDO7gATPvUA7PGAALPnwwDH+CgAkwWUAMFxPgAuCbMAC0XzAIgSnACrIHsALrWfAEeSwgB7Mi8ADFVtAHKnkABr5x8AMcuWAHkWSgBBeeIA9N+JAOiUlwDi5oQAmTGXAIjtawBfXzYAu/0OAEiatABnpGwAcXJCAI1dMgCfFbgAvOUJAI0xJQD3dDkAMAUcAA0MAQBLCGgALO5YAEeqkAB05wIAvdYkAPd9pgBuSHIAnxbvAI6UpgC0kfYA0VNRAM8K8gAgmDMA9Ut+ALJjaADdPl8AQF0DAIWJfwBVUikAN2TAAG3YEAAySDIAW0x1AE5x1ABFVG4ACwnBACr1aQAUZtUAJwedAF0EUAC0O9sA6nbFAIf5FwBJa30AHSe6AJZpKQDGzKwArRRUAJDiagCI2YkALHJQAASkvgB3B5QA8zBwAAD8JwDqcagAZsJJAGTgPQCX3YMAoz+XAEOU/QANhowAMUHeAJI5nQDdcIwAF7fnAAjfOwAVNysAXICgAFqAkwAQEZIAD+jYAGyArwDb/0sAOJAPAFkYdgBipRUAYcu7AMeJuQAQQL0A0vIEAEl1JwDrtvYA2yK7AAoUqgCJJi8AZIN2AAk7MwAOlBoAUTqqAB2jwgCv7a4AXCYSAG3CTQAtepwAwFaXAAM/gwAJ8PYAK0CMAG0xmQA5tAcADCAVANjDWwD1ksQAxq1LAE7KpQCnN80A5qk2AKuSlADdQmgAGWPeAHaM7wBoi1IA/Ns3AK6hqwDfFTEAAK6hAAz72gBkTWYA7QW3ACllMABXVr8AR/86AGr5uQB1vvMAKJPfAKuAMABmjPYABMsVAPoiBgDZ5B0APbOkAFcbjwA2zQkATkLpABO+pAAzI7UA8KoaAE9lqADSwaUACz8PAFt4zQAj+XYAe4sEAIkXcgDGplMAb27iAO/rAACbSlgAxNq3AKpmugB2z88A0QIdALHxLQCMmcEAw613AIZI2gD3XaAAxoD0AKzwLwDd7JoAP1y8ANDebQCQxx8AKtu2AKMlOgAAr5oArVOTALZXBAApLbQAS4B+ANoHpwB2qg4Ae1mhABYSKgDcty0A+uX9AInb/gCJvv0A5HZsAAap/AA+gHAAhW4VAP2H/wAoPgcAYWczACoYhgBNveoAs+evAI9tbgCVZzkAMb9bAITXSAAw3xYAxy1DACVhNQDJcM4AMMu4AL9s/QCkAKIABWzkAFrdoAAhb0cAYhLSALlchABwYUkAa1bgAJlSAQBQVTcAHtW3ADPxxAATbl8AXTDkAIUuqQAdssMAoTI2AAi3pADqsdQAFvchAI9p5AAn/3cADAOAAI1ALQBPzaAAIKWZALOi0wAvXQoAtPlCABHaywB9vtAAm9vBAKsXvQDKooEACGpcAC5VFwAnAFUAfxTwAOEHhgAUC2QAlkGNAIe+3gDa/SoAayW2AHuJNAAF8/4Aub+eAGhqTwBKKqgAT8RaAC34vADXWpgA9MeVAA1NjQAgOqYApFdfABQ/sQCAOJUAzCABAHHdhgDJ3rYAv2D1AE1lEQABB2sAjLCsALLA0ABRVUgAHvsOAJVywwCjBjsAwEA1AAbcewDgRcwATin6ANbKyADo80EAfGTeAJtk2ADZvjEApJfDAHdY1ABp48UA8NoTALo6PABGGEYAVXVfANK99QBuksYArC5dAA5E7QAcPkIAYcSHACn96QDn1vMAInzKAG+RNQAI4MUA/9eNAG5q4gCw/cYAkwjBAHxddABrrbIAzW6dAD5yewDGEWoA98+pAClz3wC1yboAtwBRAOKyDQB0uiQA5X1gAHTYigANFSwAgRgMAH5mlAABKRYAn3p2AP39vgBWRe8A2X42AOzZEwCLurkAxJf8ADGoJwDxbsMAlMU2ANioVgC0qLUAz8wOABKJLQBvVzQALFaJAJnO4wDWILkAa16qAD4qnAARX8wA/QtKAOH0+wCOO20A4oYsAOnUhAD8tKkA7+7RAC41yQAvOWEAOCFEABvZyACB/AoA+0pqAC8c2ABTtIQATpmMAFQizAAqVdwAwMbWAAsZlgAacLgAaZVkACZaYAA/Uu4AfxEPAPS1EQD8y/UANLwtADS87gDoXcwA3V5gAGeOmwCSM+8AyRe4AGFYmwDhV7wAUYPGANg+EADdcUgALRzdAK8YoQAhLEYAWfPXANl6mACeVMAAT4b6AFYG/ADlea4AiSI2ADitIgBnk9wAVeiqAIImOADK55sAUQ2kAJkzsQCp1w4AaQVIAGWy8AB/iKcAiEyXAPnRNgAhkrMAe4JKAJjPIQBAn9wA3EdVAOF0OgBn60IA/p3fAF7UXwB7Z6QAuqx6AFX2ogAriCMAQbpVAFluCAAhKoYAOUeDAInj5gDlntQASftAAP9W6QAcD8oAxVmKAJT6KwDTwcUAD8XPANtargBHxYYAhUNiACGGOwAseZQAEGGHACpMewCALBoAQ78SAIgmkAB4PIkAqMTkAOXbewDEOsIAJvTqAPdnigANkr8AZaMrAD2TsQC9fAsApFHcACfdYwBp4d0AmpQZAKgplQBozigACe20AESfIABOmMoAcIJjAH58IwAPuTIAp/WOABRW5wAh8QgAtZ0qAG9+TQClGVEAtfmrAILf1gCW3WEAFjYCAMQ6nwCDoqEAcu1tADmNegCCuKkAazJcAEYnWwAANO0A0gB3APz0VQABWU0A4HGA");S(20467,"QPsh+T8AAAAALUR0PgAAAICYRvg8AAAAYFHMeDsAAACAgxvwOQAAAEAgJXo4AAAAgCKC4zYAAAAAHfNpNThj7T7aD0k/Xph7P9oPyT9pN6wxaCEiM7QPFDNoIaIz2w9JP9sPSb/kyxZA5MsWwAAAAAAAAACA2w9JQNsPScAAAIA/AADAPwAAAADcz9E1AAAAAADAFT8gUwAAUHVyZSB2aXJ0dWFsIGZ1bmN0aW9uIGNhbGxlZCEAU3Q5dHlwZV9pbmZvAAAoUQAAqlAAAE4xMF9fY3h4YWJpdjExNl9fc2hpbV90eXBlX2luZm9FAAAAAFBRAADAUAAAuFAAAE4xMF9fY3h4YWJpdjExN19fY2xhc3NfdHlwZV9pbmZvRQAAAFBRAADwUAAA5FAAAAAAAAAUUQAA5gIAAOcCAADoAgAA6QIAAOoCAADrAgAA7AIAAO0CAAAAAAAAmFEAAOYCAADuAgAA6AIAAOkCAADqAgAA7wIAAPACAADxAgAATjEwX19jeHhhYml2MTIwX19zaV9jbGFzc190eXBlX2luZm9FAAAAAFBRAABwUQAAFFEAAAAAAAD0UQAA5gIAAPICAADoAgAA6QIAAOoCAADzAgAA9AIAAPUCAABOMTBfX2N4eGFiaXYxMjFfX3ZtaV9jbGFzc190eXBlX2luZm9FAAAAUFEAAMxRAAAUUQ==");S(20995,"QArXozwBAAAAbxKDOgEAAADbAgAA3AIAAN0CAADeAgAA3wIAAOAC");S(21224,"OGg=");S(21280,"BQ==");S(21292,"4wI=");S(21316,"5AIAAOUCAABYaA==");S(21340,"Ag==");S(21355,"//////8=");return l({"Int8Array":Int8Array,"Int16Array":Int16Array,"Int32Array":Int32Array,"Uint8Array":Uint8Array,"Uint16Array":Uint16Array,"Uint32Array":Uint32Array,"Float32Array":Float32Array,"Float64Array":Float64Array,"NaN":NaN,"Infinity":Infinity,"Math":Math},asmLibraryArg,wasmMemory.buffer)}


            // EMSCRIPTEN_END_ASM




            )(va,wa,ya)}}function za(){return {then:function(a){a({instance:new ua});}}}var Aa=Error,WebAssembly={};qa=[];"object"!==typeof WebAssembly&&pa("no native wasm support detected");
            var wa,ya=new function(a){var c=Array(a.initial);c.grow=function(){778<=c.length&&ma("Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.");c.push(null);};c.set=function(a,e){c[a]=e;};c.get=function(a){return c[a]};return c}({initial:758,maximum:778,element:"anyfunc"}),Ca=!1;function assert(a,c){a||ma("Assertion failed: "+c);}var Da="undefined"!==typeof TextDecoder?new TextDecoder("utf8"):void 0;"undefined"!==typeof TextDecoder&&new TextDecoder("utf-16le");
            var buffer,Ea,Fa,sa=b.TOTAL_MEMORY||67108864;if(wa=b.wasmMemory?b.wasmMemory:new ra)buffer=wa.buffer;sa=buffer.byteLength;var Ga=buffer;buffer=Ga;b.HEAP8=new Int8Array(Ga);b.HEAP16=new Int16Array(Ga);b.HEAP32=Fa=new Int32Array(Ga);b.HEAPU8=Ea=new Uint8Array(Ga);b.HEAPU16=new Uint16Array(Ga);b.HEAPU32=new Uint32Array(Ga);b.HEAPF32=new Float32Array(Ga);b.HEAPF64=new Float64Array(Ga);Fa[6808]=5270272;
            function Ha(a){for(;0<a.length;){var c=a.shift();if("function"==typeof c)c();else {var d=c.Ap;"number"===typeof d?void 0===c.rp?b.dynCall_v(d):b.dynCall_vi(d,c.rp):d(void 0===c.rp?null:c.rp);}}}var Ka=[],La=[],Ma=[],Na=[],Oa=!1;function Pa(){var a=b.preRun.shift();Ka.unshift(a);}Math.imul&&-5===Math.imul(4294967295,5)||(Math.imul=function(a,c){var d=a&65535,e=c&65535;return d*e+((a>>>16)*e+d*(c>>>16)<<16)|0});if(!Math.fround){var Qa=new Float32Array(1);Math.fround=function(a){Qa[0]=a;return Qa[0]};}
            Math.clz32||(Math.clz32=function(a){var c=32,d=a>>16;d&&(c-=16,a=d);if(d=a>>8)c-=8,a=d;if(d=a>>4)c-=4,a=d;if(d=a>>2)c-=2,a=d;return a>>1?c-2:c-a});Math.trunc||(Math.trunc=function(a){return 0>a?Math.ceil(a):Math.floor(a)});var Ra=0,Ta=null;b.preloadedImages={};b.preloadedAudios={};function ma(a){if(b.onAbort)b.onAbort(a);a+="";oa(a);pa(a);Ca=!0;throw new Aa("abort("+a+"). Build with -s ASSERTIONS=1 for more info.");}var Ua="data:application/octet-stream;base64,";
            function Va(a){return String.prototype.startsWith?a.startsWith(Ua):0===a.indexOf(Ua)}var Wa="";if(!Va(Wa)){var Xa=Wa;Wa=b.locateFile?b.locateFile(Xa,ia):ia+Xa;}function Ya(){try{if(qa)return new Uint8Array(qa);var a=la(Wa);if(a)return a;if(ka)return ka(Wa);throw "both async and sync fetching of the wasm failed";}catch(c){ma(c);}}
            function ab(){return qa||!ca&&!da||"function"!==typeof fetch?new Promise(function(a){a(Ya());}):fetch(Wa,{credentials:"same-origin"}).then(function(a){if(!a.ok)throw "failed to load wasm binary file at '"+Wa+"'";return a.arrayBuffer()}).catch(function(){return Ya()})}La.push({Ap:function(){bb();}});var cb=[null,[],[]];
            function na(a){for(var c=[],d=0;d<a.length;d++){var e=a[d];255<e&&(e&=255);c.push(String.fromCharCode(e));}return c.join("")}
            var fb="function"===typeof atob?atob:function(a){var c="",d=0;a=a.replace(/[^A-Za-z0-9\+\/=]/g,"");do{var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(d++));var l="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(d++));var q="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(d++));var C="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".indexOf(a.charAt(d++));e=e<<2|l>>4;
            l=(l&15)<<4|q>>2;var Ba=(q&3)<<6|C;c+=String.fromCharCode(e);64!==q&&(c+=String.fromCharCode(l));64!==C&&(c+=String.fromCharCode(Ba));}while(d<a.length);return c};
            function la(a){if(Va(a)){a=a.slice(Ua.length);if("boolean"===typeof ea&&ea){try{var c=Buffer.from(a,"base64");}catch(q){c=new Buffer(a,"base64");}var d=new Uint8Array(c.buffer,c.byteOffset,c.byteLength);}else try{var e=fb(a),l=new Uint8Array(e.length);for(c=0;c<e.length;++c)l[c]=e.charCodeAt(c);d=l;}catch(q){throw Error("Converting base64 string to bytes failed.");}return d}}
            var va={f:function(){ma();},c:function(a,c,d){Ea.set(Ea.subarray(c,c+d),a);},d:function(){ma("OOM");},e:function(){return 0},b:function(){return 0},g:function(a,c,d,e){try{for(var l=0,q=0;q<d;q++){for(var C=Fa[c+8*q>>2],Ba=Fa[c+(8*q+4)>>2],Ia=0;Ia<Ba;Ia++){var sb=Ea[C+Ia],tb=cb[a];if(0===sb||10===sb){var ac=1===a?oa:pa;for(var Za=tb,Ja=0,$a=Ja+void 0,db=Ja;Za[db]&&!(db>=$a);)++db;if(16<db-Ja&&Za.subarray&&Da)var Kb=Da.decode(Za.subarray(Ja,db));else {for($a="";Ja<db;){var xa=Za[Ja++];if(xa&128){var ub=
            Za[Ja++]&63;if(192==(xa&224))$a+=String.fromCharCode((xa&31)<<6|ub);else {var Lb=Za[Ja++]&63;xa=224==(xa&240)?(xa&15)<<12|ub<<6|Lb:(xa&7)<<18|ub<<12|Lb<<6|Za[Ja++]&63;if(65536>xa)$a+=String.fromCharCode(xa);else {var Mb=xa-65536;$a+=String.fromCharCode(55296|Mb>>10,56320|Mb&1023);}}}else $a+=String.fromCharCode(xa);}Kb=$a;}ac(Kb);tb.length=0;}else tb.push(sb);}l+=Ba;}Fa[e>>2]=l;return 0}catch(Nb){return ma(Nb),Nb.Tq}},a:function(a){var c=Date.now();Fa[a>>2]=c/1E3|0;Fa[a+4>>2]=c%1E3*1E3|0;return 0},memory:wa,
            table:ya},gb=function(){function a(a){b.asm=a.exports;Ra--;b.monitorRunDependencies&&b.monitorRunDependencies(Ra);0==Ra&&(Ta&&(a=Ta,Ta=null,a()));}function c(c){a(c.instance);}function d(a){return ab().then(function(){return za()}).then(a,function(a){pa("failed to asynchronously prepare wasm: "+a);ma(a);})}var e={env:va,wasi_unstable:va};Ra++;b.monitorRunDependencies&&b.monitorRunDependencies(Ra);if(b.instantiateWasm)try{return b.instantiateWasm(e,a)}catch(l){return pa("Module.instantiateWasm callback failed with error: "+
            l),!1}(function(){if(qa||"function"!==typeof WebAssembly.instantiateStreaming||Va(Wa)||"function"!==typeof fetch)return d(c);fetch(Wa,{credentials:"same-origin"}).then(function(a){return WebAssembly.instantiateStreaming(a,e).then(c,function(a){pa("wasm streaming compile failed: "+a);pa("falling back to ArrayBuffer instantiation");d(c);})});})();return {}}();b.asm=gb;
            var bb=b.___wasm_call_ctors=function(){return b.asm.h.apply(null,arguments)},hb=b._emscripten_bind_btCollisionShape_setLocalScaling_1=function(){return b.asm.i.apply(null,arguments)},ib=b._emscripten_bind_btCollisionShape_getLocalScaling_0=function(){return b.asm.j.apply(null,arguments)},jb=b._emscripten_bind_btCollisionShape_calculateLocalInertia_2=function(){return b.asm.k.apply(null,arguments)},kb=b._emscripten_bind_btCollisionShape_setMargin_1=function(){return b.asm.l.apply(null,arguments)},
            lb=b._emscripten_bind_btCollisionShape_getMargin_0=function(){return b.asm.m.apply(null,arguments)},mb=b._emscripten_bind_btCollisionShape_isCompound_0=function(){return b.asm.n.apply(null,arguments)},nb=b._emscripten_bind_btCollisionShape_getUserIndex_0=function(){return b.asm.o.apply(null,arguments)},ob=b._emscripten_bind_btCollisionShape_setUserIndex_1=function(){return b.asm.p.apply(null,arguments)},pb=b._emscripten_bind_btCollisionShape_getAabb_3=function(){return b.asm.q.apply(null,arguments)},
            qb=b._emscripten_bind_btCollisionShape_getLocalBoundingSphere_0=function(){return b.asm.r.apply(null,arguments)},rb=b._emscripten_bind_btCollisionShape___destroy___0=function(){return b.asm.s.apply(null,arguments)},vb=b._emscripten_bind_btCollisionObject_btCollisionObject_0=function(){return b.asm.t.apply(null,arguments)},wb=b._emscripten_bind_btCollisionObject_setAnisotropicFriction_2=function(){return b.asm.u.apply(null,arguments)},xb=b._emscripten_bind_btCollisionObject_getCollisionShape_0=function(){return b.asm.v.apply(null,
            arguments)},yb=b._emscripten_bind_btCollisionObject_getActivationState_0=function(){return b.asm.w.apply(null,arguments)},zb=b._emscripten_bind_btCollisionObject_setActivationState_1=function(){return b.asm.x.apply(null,arguments)},Ab=b._emscripten_bind_btCollisionObject_forceActivationState_1=function(){return b.asm.y.apply(null,arguments)},Bb=b._emscripten_bind_btCollisionObject_activate_0=function(){return b.asm.z.apply(null,arguments)},Cb=b._emscripten_bind_btCollisionObject_activate_1=function(){return b.asm.A.apply(null,
            arguments)},Db=b._emscripten_bind_btCollisionObject_isActive_0=function(){return b.asm.B.apply(null,arguments)},Eb=b._emscripten_bind_btCollisionObject_isKinematicObject_0=function(){return b.asm.C.apply(null,arguments)},Fb=b._emscripten_bind_btCollisionObject_isStaticObject_0=function(){return b.asm.D.apply(null,arguments)},Gb=b._emscripten_bind_btCollisionObject_isStaticOrKinematicObject_0=function(){return b.asm.E.apply(null,arguments)},Hb=b._emscripten_bind_btCollisionObject_setRestitution_1=
            function(){return b.asm.F.apply(null,arguments)},Ib=b._emscripten_bind_btCollisionObject_setFriction_1=function(){return b.asm.G.apply(null,arguments)},Jb=b._emscripten_bind_btCollisionObject_setRollingFriction_1=function(){return b.asm.H.apply(null,arguments)},Ob=b._emscripten_bind_btCollisionObject_setSpinningFriction_1=function(){return b.asm.I.apply(null,arguments)},Pb=b._emscripten_bind_btCollisionObject_getWorldTransform_0=function(){return b.asm.J.apply(null,arguments)},Qb=b._emscripten_bind_btCollisionObject_getCollisionFlags_0=
            function(){return b.asm.K.apply(null,arguments)},Rb=b._emscripten_bind_btCollisionObject_setCollisionFlags_1=function(){return b.asm.L.apply(null,arguments)},Sb=b._emscripten_bind_btCollisionObject_setWorldTransform_1=function(){return b.asm.M.apply(null,arguments)},Tb=b._emscripten_bind_btCollisionObject_setCollisionShape_1=function(){return b.asm.N.apply(null,arguments)},Ub=b._emscripten_bind_btCollisionObject_setCcdMotionThreshold_1=function(){return b.asm.O.apply(null,arguments)},Vb=b._emscripten_bind_btCollisionObject_setCcdSweptSphereRadius_1=
            function(){return b.asm.P.apply(null,arguments)},Wb=b._emscripten_bind_btCollisionObject_getUserIndex_0=function(){return b.asm.Q.apply(null,arguments)},Xb=b._emscripten_bind_btCollisionObject_setUserIndex_1=function(){return b.asm.R.apply(null,arguments)},Yb=b._emscripten_bind_btCollisionObject_setUserIndex2_1=function(){return b.asm.S.apply(null,arguments)},Zb=b._emscripten_bind_btCollisionObject_setIgnoreCollisionCheck_2=function(){return b.asm.T.apply(null,arguments)},$b=b._emscripten_bind_btCollisionObject___destroy___0=
            function(){return b.asm.U.apply(null,arguments)},bc=b._emscripten_bind_btConvexShape_setLocalScaling_1=function(){return b.asm.V.apply(null,arguments)},cc=b._emscripten_bind_btConvexShape_getLocalScaling_0=function(){return b.asm.W.apply(null,arguments)},dc=b._emscripten_bind_btConvexShape_calculateLocalInertia_2=function(){return b.asm.X.apply(null,arguments)},ec=b._emscripten_bind_btConvexShape_setMargin_1=function(){return b.asm.Y.apply(null,arguments)},fc=b._emscripten_bind_btConvexShape_getMargin_0=
            function(){return b.asm.Z.apply(null,arguments)},hc=b._emscripten_bind_btConvexShape_isCompound_0=function(){return b.asm._.apply(null,arguments)},ic=b._emscripten_bind_btConvexShape_getUserIndex_0=function(){return b.asm.$.apply(null,arguments)},jc=b._emscripten_bind_btConvexShape_setUserIndex_1=function(){return b.asm.aa.apply(null,arguments)},kc=b._emscripten_bind_btConvexShape_getAabb_3=function(){return b.asm.ba.apply(null,arguments)},lc=b._emscripten_bind_btConvexShape_getLocalBoundingSphere_0=
            function(){return b.asm.ca.apply(null,arguments)},mc=b._emscripten_bind_btConvexShape___destroy___0=function(){return b.asm.da.apply(null,arguments)},nc=b._emscripten_bind_btConcaveShape_setLocalScaling_1=function(){return b.asm.ea.apply(null,arguments)},oc=b._emscripten_bind_btConcaveShape_getLocalScaling_0=function(){return b.asm.fa.apply(null,arguments)},pc=b._emscripten_bind_btConcaveShape_calculateLocalInertia_2=function(){return b.asm.ga.apply(null,arguments)},qc=b._emscripten_bind_btConcaveShape_isCompound_0=
            function(){return b.asm.ha.apply(null,arguments)},rc=b._emscripten_bind_btConcaveShape_getUserIndex_0=function(){return b.asm.ia.apply(null,arguments)},sc=b._emscripten_bind_btConcaveShape_setUserIndex_1=function(){return b.asm.ja.apply(null,arguments)},tc=b._emscripten_bind_btConcaveShape_getAabb_3=function(){return b.asm.ka.apply(null,arguments)},uc=b._emscripten_bind_btConcaveShape_getLocalBoundingSphere_0=function(){return b.asm.la.apply(null,arguments)},vc=b._emscripten_bind_btConcaveShape___destroy___0=
            function(){return b.asm.ma.apply(null,arguments)},wc=b._emscripten_bind_btCollisionWorld_getDispatcher_0=function(){return b.asm.na.apply(null,arguments)},xc=b._emscripten_bind_btCollisionWorld_rayTest_3=function(){return b.asm.oa.apply(null,arguments)},yc=b._emscripten_bind_btCollisionWorld_rayTestSingle_6=function(){return b.asm.pa.apply(null,arguments)},zc=b._emscripten_bind_btCollisionWorld_getPairCache_0=function(){return b.asm.qa.apply(null,arguments)},Ac=b._emscripten_bind_btCollisionWorld_addCollisionObject_1=
            function(){return b.asm.ra.apply(null,arguments)},Bc=b._emscripten_bind_btCollisionWorld_addCollisionObject_2=function(){return b.asm.sa.apply(null,arguments)},Cc=b._emscripten_bind_btCollisionWorld_addCollisionObject_3=function(){return b.asm.ta.apply(null,arguments)},Dc=b._emscripten_bind_btCollisionWorld_removeCollisionObject_1=function(){return b.asm.ua.apply(null,arguments)},Ec=b._emscripten_bind_btCollisionWorld_setContactBreakingThreshold_1=function(){return b.asm.va.apply(null,arguments)},
            Fc=b._emscripten_bind_btCollisionWorld___destroy___0=function(){return b.asm.wa.apply(null,arguments)},Gc=b._emscripten_bind_btTypedConstraint_enableFeedback_1=function(){return b.asm.xa.apply(null,arguments)},Hc=b._emscripten_bind_btTypedConstraint_getBreakingImpulseThreshold_0=function(){return b.asm.ya.apply(null,arguments)},Ic=b._emscripten_bind_btTypedConstraint_setBreakingImpulseThreshold_1=function(){return b.asm.za.apply(null,arguments)},Jc=b._emscripten_bind_btTypedConstraint_getParam_2=
            function(){return b.asm.Aa.apply(null,arguments)},Kc=b._emscripten_bind_btTypedConstraint_setParam_3=function(){return b.asm.Ba.apply(null,arguments)},Lc=b._emscripten_bind_btTypedConstraint___destroy___0=function(){return b.asm.Ca.apply(null,arguments)},Mc=b._emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_3=function(){return b.asm.Da.apply(null,arguments)},Nc=b._emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_5=function(){return b.asm.Ea.apply(null,arguments)},Oc=
            b._emscripten_bind_btGeneric6DofConstraint_setLinearLowerLimit_1=function(){return b.asm.Fa.apply(null,arguments)},Pc=b._emscripten_bind_btGeneric6DofConstraint_setLinearUpperLimit_1=function(){return b.asm.Ga.apply(null,arguments)},Qc=b._emscripten_bind_btGeneric6DofConstraint_setAngularLowerLimit_1=function(){return b.asm.Ha.apply(null,arguments)},Rc=b._emscripten_bind_btGeneric6DofConstraint_setAngularUpperLimit_1=function(){return b.asm.Ia.apply(null,arguments)},Sc=b._emscripten_bind_btGeneric6DofConstraint_getFrameOffsetA_0=
            function(){return b.asm.Ja.apply(null,arguments)},Tc=b._emscripten_bind_btGeneric6DofConstraint_enableFeedback_1=function(){return b.asm.Ka.apply(null,arguments)},Uc=b._emscripten_bind_btGeneric6DofConstraint_getBreakingImpulseThreshold_0=function(){return b.asm.La.apply(null,arguments)},Vc=b._emscripten_bind_btGeneric6DofConstraint_setBreakingImpulseThreshold_1=function(){return b.asm.Ma.apply(null,arguments)},Wc=b._emscripten_bind_btGeneric6DofConstraint_getParam_2=function(){return b.asm.Na.apply(null,
            arguments)},Xc=b._emscripten_bind_btGeneric6DofConstraint_setParam_3=function(){return b.asm.Oa.apply(null,arguments)},Yc=b._emscripten_bind_btGeneric6DofConstraint___destroy___0=function(){return b.asm.Pa.apply(null,arguments)},Zc=b._emscripten_bind_btStridingMeshInterface_setScaling_1=function(){return b.asm.Qa.apply(null,arguments)},$c=b._emscripten_bind_btStridingMeshInterface___destroy___0=function(){return b.asm.Ra.apply(null,arguments)},ad=b._emscripten_bind_btBroadphaseInterface_getOverlappingPairCache_0=
            function(){return b.asm.Sa.apply(null,arguments)},bd=b._emscripten_bind_btBroadphaseInterface___destroy___0=function(){return b.asm.Ta.apply(null,arguments)},cd=b._emscripten_bind_btMotionState_getWorldTransform_1=function(){return b.asm.Ua.apply(null,arguments)},dd=b._emscripten_bind_btMotionState_setWorldTransform_1=function(){return b.asm.Va.apply(null,arguments)},ed=b._emscripten_bind_btMotionState___destroy___0=function(){return b.asm.Wa.apply(null,arguments)},fd=b._emscripten_bind_btConvexInternalShape_getImplicitShapeDimensions_0=
            function(){return b.asm.Xa.apply(null,arguments)},gd=b._emscripten_bind_btConvexInternalShape_setLocalScaling_1=function(){return b.asm.Ya.apply(null,arguments)},hd=b._emscripten_bind_btConvexInternalShape_getLocalScaling_0=function(){return b.asm.Za.apply(null,arguments)},id=b._emscripten_bind_btConvexInternalShape_calculateLocalInertia_2=function(){return b.asm._a.apply(null,arguments)},jd=b._emscripten_bind_btConvexInternalShape_setMargin_1=function(){return b.asm.$a.apply(null,arguments)},kd=
            b._emscripten_bind_btConvexInternalShape_getMargin_0=function(){return b.asm.ab.apply(null,arguments)},ld=b._emscripten_bind_btConvexInternalShape_isCompound_0=function(){return b.asm.bb.apply(null,arguments)},md=b._emscripten_bind_btConvexInternalShape_getUserIndex_0=function(){return b.asm.cb.apply(null,arguments)},nd=b._emscripten_bind_btConvexInternalShape_setUserIndex_1=function(){return b.asm.db.apply(null,arguments)},od=b._emscripten_bind_btConvexInternalShape_getAabb_3=function(){return b.asm.eb.apply(null,
            arguments)},pd=b._emscripten_bind_btConvexInternalShape_getLocalBoundingSphere_0=function(){return b.asm.fb.apply(null,arguments)},qd=b._emscripten_bind_btConvexInternalShape___destroy___0=function(){return b.asm.gb.apply(null,arguments)},rd=b._emscripten_bind_btDynamicsWorld_addAction_1=function(){return b.asm.hb.apply(null,arguments)},sd=b._emscripten_bind_btDynamicsWorld_removeAction_1=function(){return b.asm.ib.apply(null,arguments)},td=b._emscripten_bind_btDynamicsWorld_getSolverInfo_0=function(){return b.asm.jb.apply(null,
            arguments)},ud=b._emscripten_bind_btDynamicsWorld_getFixedBody_0=function(){return b.asm.kb.apply(null,arguments)},vd=b._emscripten_bind_btDynamicsWorld_getDispatcher_0=function(){return b.asm.lb.apply(null,arguments)},wd=b._emscripten_bind_btDynamicsWorld_rayTest_3=function(){return b.asm.mb.apply(null,arguments)},xd=b._emscripten_bind_btDynamicsWorld_rayTestSingle_6=function(){return b.asm.nb.apply(null,arguments)},yd=b._emscripten_bind_btDynamicsWorld_getPairCache_0=function(){return b.asm.ob.apply(null,
            arguments)},zd=b._emscripten_bind_btDynamicsWorld_addCollisionObject_1=function(){return b.asm.pb.apply(null,arguments)},Ad=b._emscripten_bind_btDynamicsWorld_addCollisionObject_2=function(){return b.asm.qb.apply(null,arguments)},Bd=b._emscripten_bind_btDynamicsWorld_addCollisionObject_3=function(){return b.asm.rb.apply(null,arguments)},Cd=b._emscripten_bind_btDynamicsWorld_removeCollisionObject_1=function(){return b.asm.sb.apply(null,arguments)},Dd=b._emscripten_bind_btDynamicsWorld_setContactBreakingThreshold_1=
            function(){return b.asm.tb.apply(null,arguments)},Ed=b._emscripten_bind_btDynamicsWorld___destroy___0=function(){return b.asm.ub.apply(null,arguments)},Fd=b._emscripten_bind_btDispatcher_getNumManifolds_0=function(){return b.asm.vb.apply(null,arguments)},Gd=b._emscripten_bind_btDispatcher_getManifoldByIndexInternal_1=function(){return b.asm.wb.apply(null,arguments)},Hd=b._emscripten_bind_btDispatcher___destroy___0=function(){return b.asm.xb.apply(null,arguments)},Id=b._emscripten_bind_RayResultCallback_hasHit_0=
            function(){return b.asm.yb.apply(null,arguments)},Jd=b._emscripten_bind_RayResultCallback_setUseCC_1=function(){return b.asm.zb.apply(null,arguments)},Kd=b._emscripten_bind_RayResultCallback_get_m_collisionFilterGroup_0=function(){return b.asm.Ab.apply(null,arguments)},Ld=b._emscripten_bind_RayResultCallback_set_m_collisionFilterGroup_1=function(){return b.asm.Bb.apply(null,arguments)},Md=b._emscripten_bind_RayResultCallback_get_m_collisionFilterMask_0=function(){return b.asm.Cb.apply(null,arguments)},
            Nd=b._emscripten_bind_RayResultCallback_set_m_collisionFilterMask_1=function(){return b.asm.Db.apply(null,arguments)},Od=b._emscripten_bind_RayResultCallback_get_m_shapePart_0=function(){return b.asm.Eb.apply(null,arguments)},Pd=b._emscripten_bind_RayResultCallback_set_m_shapePart_1=function(){return b.asm.Fb.apply(null,arguments)},Qd=b._emscripten_bind_RayResultCallback_get_m_closestHitFraction_0=function(){return b.asm.Gb.apply(null,arguments)},Rd=b._emscripten_bind_RayResultCallback_set_m_closestHitFraction_1=
            function(){return b.asm.Hb.apply(null,arguments)},Sd=b._emscripten_bind_RayResultCallback_get_m_collisionObject_0=function(){return b.asm.Ib.apply(null,arguments)},Td=b._emscripten_bind_RayResultCallback_set_m_collisionObject_1=function(){return b.asm.Jb.apply(null,arguments)},Ud=b._emscripten_bind_RayResultCallback___destroy___0=function(){return b.asm.Kb.apply(null,arguments)},Vd=b._emscripten_bind_btActionInterface_updateAction_2=function(){return b.asm.Lb.apply(null,arguments)},Wd=b._emscripten_bind_btActionInterface___destroy___0=
            function(){return b.asm.Mb.apply(null,arguments)},Xd=b._emscripten_bind_btTriangleMeshShape_setLocalScaling_1=function(){return b.asm.Nb.apply(null,arguments)},Yd=b._emscripten_bind_btTriangleMeshShape_getLocalScaling_0=function(){return b.asm.Ob.apply(null,arguments)},Zd=b._emscripten_bind_btTriangleMeshShape_calculateLocalInertia_2=function(){return b.asm.Pb.apply(null,arguments)},$d=b._emscripten_bind_btTriangleMeshShape_isCompound_0=function(){return b.asm.Qb.apply(null,arguments)},ae=b._emscripten_bind_btTriangleMeshShape_getUserIndex_0=
            function(){return b.asm.Rb.apply(null,arguments)},be=b._emscripten_bind_btTriangleMeshShape_setUserIndex_1=function(){return b.asm.Sb.apply(null,arguments)},ce=b._emscripten_bind_btTriangleMeshShape_getAabb_3=function(){return b.asm.Tb.apply(null,arguments)},de=b._emscripten_bind_btTriangleMeshShape_getLocalBoundingSphere_0=function(){return b.asm.Ub.apply(null,arguments)},ee=b._emscripten_bind_btTriangleMeshShape___destroy___0=function(){return b.asm.Vb.apply(null,arguments)},fe=b._emscripten_bind_btGhostObject_btGhostObject_0=
            function(){return b.asm.Wb.apply(null,arguments)},ge=b._emscripten_bind_btGhostObject_getNumOverlappingObjects_0=function(){return b.asm.Xb.apply(null,arguments)},he=b._emscripten_bind_btGhostObject_getOverlappingObject_1=function(){return b.asm.Yb.apply(null,arguments)},ie=b._emscripten_bind_btGhostObject_setAnisotropicFriction_2=function(){return b.asm.Zb.apply(null,arguments)},je=b._emscripten_bind_btGhostObject_getCollisionShape_0=function(){return b.asm._b.apply(null,arguments)},ke=b._emscripten_bind_btGhostObject_getActivationState_0=
            function(){return b.asm.$b.apply(null,arguments)},le=b._emscripten_bind_btGhostObject_setActivationState_1=function(){return b.asm.ac.apply(null,arguments)},me=b._emscripten_bind_btGhostObject_forceActivationState_1=function(){return b.asm.bc.apply(null,arguments)},ne=b._emscripten_bind_btGhostObject_activate_0=function(){return b.asm.cc.apply(null,arguments)},oe=b._emscripten_bind_btGhostObject_activate_1=function(){return b.asm.dc.apply(null,arguments)},pe=b._emscripten_bind_btGhostObject_isActive_0=
            function(){return b.asm.ec.apply(null,arguments)},qe=b._emscripten_bind_btGhostObject_isKinematicObject_0=function(){return b.asm.fc.apply(null,arguments)},re=b._emscripten_bind_btGhostObject_isStaticObject_0=function(){return b.asm.gc.apply(null,arguments)},se=b._emscripten_bind_btGhostObject_isStaticOrKinematicObject_0=function(){return b.asm.hc.apply(null,arguments)},te=b._emscripten_bind_btGhostObject_setRestitution_1=function(){return b.asm.ic.apply(null,arguments)},ue=b._emscripten_bind_btGhostObject_setFriction_1=
            function(){return b.asm.jc.apply(null,arguments)},ve=b._emscripten_bind_btGhostObject_setRollingFriction_1=function(){return b.asm.kc.apply(null,arguments)},we=b._emscripten_bind_btGhostObject_setSpinningFriction_1=function(){return b.asm.lc.apply(null,arguments)},xe=b._emscripten_bind_btGhostObject_getWorldTransform_0=function(){return b.asm.mc.apply(null,arguments)},ye=b._emscripten_bind_btGhostObject_getCollisionFlags_0=function(){return b.asm.nc.apply(null,arguments)},ze=b._emscripten_bind_btGhostObject_setCollisionFlags_1=
            function(){return b.asm.oc.apply(null,arguments)},Ae=b._emscripten_bind_btGhostObject_setWorldTransform_1=function(){return b.asm.pc.apply(null,arguments)},Be=b._emscripten_bind_btGhostObject_setCollisionShape_1=function(){return b.asm.qc.apply(null,arguments)},Ce=b._emscripten_bind_btGhostObject_setCcdMotionThreshold_1=function(){return b.asm.rc.apply(null,arguments)},De=b._emscripten_bind_btGhostObject_setCcdSweptSphereRadius_1=function(){return b.asm.sc.apply(null,arguments)},Ee=b._emscripten_bind_btGhostObject_getUserIndex_0=
            function(){return b.asm.tc.apply(null,arguments)},Fe=b._emscripten_bind_btGhostObject_setUserIndex_1=function(){return b.asm.uc.apply(null,arguments)},Ge=b._emscripten_bind_btGhostObject_setUserIndex2_1=function(){return b.asm.vc.apply(null,arguments)},He=b._emscripten_bind_btGhostObject_setIgnoreCollisionCheck_2=function(){return b.asm.wc.apply(null,arguments)},Ie=b._emscripten_bind_btGhostObject___destroy___0=function(){return b.asm.xc.apply(null,arguments)},Je=b._emscripten_bind_btOverlapFilterCallback___destroy___0=
            function(){return b.asm.yc.apply(null,arguments)},Ke=b._emscripten_bind_btQuadWord_x_0=function(){return b.asm.zc.apply(null,arguments)},Le=b._emscripten_bind_btQuadWord_y_0=function(){return b.asm.Ac.apply(null,arguments)},Me=b._emscripten_bind_btQuadWord_z_0=function(){return b.asm.Bc.apply(null,arguments)},Ne=b._emscripten_bind_btQuadWord_w_0=function(){return b.asm.Cc.apply(null,arguments)},Oe=b._emscripten_bind_btQuadWord_setX_1=function(){return b.asm.Dc.apply(null,arguments)},Pe=b._emscripten_bind_btQuadWord_setY_1=
            function(){return b.asm.Ec.apply(null,arguments)},Qe=b._emscripten_bind_btQuadWord_setZ_1=function(){return b.asm.Fc.apply(null,arguments)},Re=b._emscripten_bind_btQuadWord_setW_1=function(){return b.asm.Gc.apply(null,arguments)},Se=b._emscripten_bind_btQuadWord___destroy___0=function(){return b.asm.Hc.apply(null,arguments)},Te=b._emscripten_bind_btMatrix3x3_getRotation_1=function(){return b.asm.Ic.apply(null,arguments)},Ue=b._emscripten_bind_btMatrix3x3___destroy___0=function(){return b.asm.Jc.apply(null,
            arguments)},Ve=b._emscripten_bind_btScalarArray_size_0=function(){return b.asm.Kc.apply(null,arguments)},We=b._emscripten_bind_btScalarArray_at_1=function(){return b.asm.Lc.apply(null,arguments)},Xe=b._emscripten_bind_btScalarArray_clear_0=function(){return b.asm.Mc.apply(null,arguments)},Ye=b._emscripten_bind_btScalarArray___destroy___0=function(){return b.asm.Nc.apply(null,arguments)},Ze=b._emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_2=function(){return b.asm.Oc.apply(null,arguments)},
            $e=b._emscripten_bind_btBvhTriangleMeshShape_btBvhTriangleMeshShape_3=function(){return b.asm.Pc.apply(null,arguments)},af=b._emscripten_bind_btBvhTriangleMeshShape_setLocalScaling_1=function(){return b.asm.Qc.apply(null,arguments)},bf=b._emscripten_bind_btBvhTriangleMeshShape_getLocalScaling_0=function(){return b.asm.Rc.apply(null,arguments)},cf=b._emscripten_bind_btBvhTriangleMeshShape_calculateLocalInertia_2=function(){return b.asm.Sc.apply(null,arguments)},df=b._emscripten_bind_btBvhTriangleMeshShape_isCompound_0=
            function(){return b.asm.Tc.apply(null,arguments)},ef=b._emscripten_bind_btBvhTriangleMeshShape_getUserIndex_0=function(){return b.asm.Uc.apply(null,arguments)},ff=b._emscripten_bind_btBvhTriangleMeshShape_setUserIndex_1=function(){return b.asm.Vc.apply(null,arguments)},gf=b._emscripten_bind_btBvhTriangleMeshShape_getAabb_3=function(){return b.asm.Wc.apply(null,arguments)},hf=b._emscripten_bind_btBvhTriangleMeshShape_getLocalBoundingSphere_0=function(){return b.asm.Xc.apply(null,arguments)},jf=b._emscripten_bind_btBvhTriangleMeshShape___destroy___0=
            function(){return b.asm.Yc.apply(null,arguments)},kf=b._emscripten_bind_btDbvtBroadphase_btDbvtBroadphase_0=function(){return b.asm.Zc.apply(null,arguments)},lf=b._emscripten_bind_btDbvtBroadphase_getOverlappingPairCache_0=function(){return b.asm._c.apply(null,arguments)},mf=b._emscripten_bind_btDbvtBroadphase___destroy___0=function(){return b.asm.$c.apply(null,arguments)},nf=b._emscripten_bind_btIntArray_size_0=function(){return b.asm.ad.apply(null,arguments)},of=b._emscripten_bind_btIntArray_at_1=
            function(){return b.asm.bd.apply(null,arguments)},pf=b._emscripten_bind_btIntArray_clear_0=function(){return b.asm.cd.apply(null,arguments)},qf=b._emscripten_bind_btIntArray___destroy___0=function(){return b.asm.dd.apply(null,arguments)},rf=b._emscripten_bind_btConstCollisionObjectArray_size_0=function(){return b.asm.ed.apply(null,arguments)},sf=b._emscripten_bind_btConstCollisionObjectArray_at_1=function(){return b.asm.fd.apply(null,arguments)},tf=b._emscripten_bind_btConstCollisionObjectArray_clear_0=
            function(){return b.asm.gd.apply(null,arguments)},uf=b._emscripten_bind_btConstCollisionObjectArray___destroy___0=function(){return b.asm.hd.apply(null,arguments)},vf=b._emscripten_bind_btBroadphaseProxy_get_m_collisionFilterGroup_0=function(){return b.asm.id.apply(null,arguments)},wf=b._emscripten_bind_btBroadphaseProxy_set_m_collisionFilterGroup_1=function(){return b.asm.jd.apply(null,arguments)},xf=b._emscripten_bind_btBroadphaseProxy_get_m_collisionFilterMask_0=function(){return b.asm.kd.apply(null,
            arguments)},yf=b._emscripten_bind_btBroadphaseProxy_set_m_collisionFilterMask_1=function(){return b.asm.ld.apply(null,arguments)},zf=b._emscripten_bind_btBroadphaseProxy___destroy___0=function(){return b.asm.md.apply(null,arguments)},Af=b._emscripten_bind_btSliderConstraint_btSliderConstraint_3=function(){return b.asm.nd.apply(null,arguments)},Bf=b._emscripten_bind_btSliderConstraint_btSliderConstraint_5=function(){return b.asm.od.apply(null,arguments)},Cf=b._emscripten_bind_btSliderConstraint_setLowerLinLimit_1=
            function(){return b.asm.pd.apply(null,arguments)},Df=b._emscripten_bind_btSliderConstraint_setUpperLinLimit_1=function(){return b.asm.qd.apply(null,arguments)},Ef=b._emscripten_bind_btSliderConstraint_setLowerAngLimit_1=function(){return b.asm.rd.apply(null,arguments)},Ff=b._emscripten_bind_btSliderConstraint_setUpperAngLimit_1=function(){return b.asm.sd.apply(null,arguments)},Gf=b._emscripten_bind_btSliderConstraint_enableFeedback_1=function(){return b.asm.td.apply(null,arguments)},Hf=b._emscripten_bind_btSliderConstraint_getBreakingImpulseThreshold_0=
            function(){return b.asm.ud.apply(null,arguments)},If=b._emscripten_bind_btSliderConstraint_setBreakingImpulseThreshold_1=function(){return b.asm.vd.apply(null,arguments)},Jf=b._emscripten_bind_btSliderConstraint_getParam_2=function(){return b.asm.wd.apply(null,arguments)},Kf=b._emscripten_bind_btSliderConstraint_setParam_3=function(){return b.asm.xd.apply(null,arguments)},Lf=b._emscripten_bind_btSliderConstraint___destroy___0=function(){return b.asm.yd.apply(null,arguments)},Mf=b._emscripten_bind_btIndexedMesh_get_m_numTriangles_0=
            function(){return b.asm.zd.apply(null,arguments)},Nf=b._emscripten_bind_btIndexedMesh_set_m_numTriangles_1=function(){return b.asm.Ad.apply(null,arguments)},Of=b._emscripten_bind_btIndexedMesh___destroy___0=function(){return b.asm.Bd.apply(null,arguments)},Pf=b._emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_3=function(){return b.asm.Cd.apply(null,arguments)},Qf=b._emscripten_bind_btRigidBodyConstructionInfo_btRigidBodyConstructionInfo_4=function(){return b.asm.Dd.apply(null,
            arguments)},Rf=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_linearDamping_0=function(){return b.asm.Ed.apply(null,arguments)},Sf=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_linearDamping_1=function(){return b.asm.Fd.apply(null,arguments)},Tf=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_angularDamping_0=function(){return b.asm.Gd.apply(null,arguments)},Uf=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_angularDamping_1=function(){return b.asm.Hd.apply(null,arguments)},
            Vf=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_friction_0=function(){return b.asm.Id.apply(null,arguments)},Wf=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_friction_1=function(){return b.asm.Jd.apply(null,arguments)},Xf=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_rollingFriction_0=function(){return b.asm.Kd.apply(null,arguments)},Yf=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_rollingFriction_1=function(){return b.asm.Ld.apply(null,arguments)},Zf=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_restitution_0=
            function(){return b.asm.Md.apply(null,arguments)},$f=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_restitution_1=function(){return b.asm.Nd.apply(null,arguments)},ag=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_linearSleepingThreshold_0=function(){return b.asm.Od.apply(null,arguments)},bg=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_linearSleepingThreshold_1=function(){return b.asm.Pd.apply(null,arguments)},cg=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_angularSleepingThreshold_0=
            function(){return b.asm.Qd.apply(null,arguments)},dg=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_angularSleepingThreshold_1=function(){return b.asm.Rd.apply(null,arguments)},eg=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDamping_0=function(){return b.asm.Sd.apply(null,arguments)},fg=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDamping_1=function(){return b.asm.Td.apply(null,arguments)},gg=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalDampingFactor_0=
            function(){return b.asm.Ud.apply(null,arguments)},hg=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalDampingFactor_1=function(){return b.asm.Vd.apply(null,arguments)},ig=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalLinearDampingThresholdSqr_0=function(){return b.asm.Wd.apply(null,arguments)},jg=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalLinearDampingThresholdSqr_1=function(){return b.asm.Xd.apply(null,arguments)},kg=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingThresholdSqr_0=
            function(){return b.asm.Yd.apply(null,arguments)},lg=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingThresholdSqr_1=function(){return b.asm.Zd.apply(null,arguments)},mg=b._emscripten_bind_btRigidBodyConstructionInfo_get_m_additionalAngularDampingFactor_0=function(){return b.asm._d.apply(null,arguments)},ng=b._emscripten_bind_btRigidBodyConstructionInfo_set_m_additionalAngularDampingFactor_1=function(){return b.asm.$d.apply(null,arguments)},og=b._emscripten_bind_btRigidBodyConstructionInfo___destroy___0=
            function(){return b.asm.ae.apply(null,arguments)},pg=b._emscripten_bind_btManifoldPoint_getAppliedImpulse_0=function(){return b.asm.be.apply(null,arguments)},qg=b._emscripten_bind_btManifoldPoint_getDistance_0=function(){return b.asm.ce.apply(null,arguments)},rg=b._emscripten_bind_btManifoldPoint_getShape0_0=function(){return b.asm.de.apply(null,arguments)},sg=b._emscripten_bind_btManifoldPoint_getShape1_0=function(){return b.asm.ee.apply(null,arguments)},tg=b._emscripten_bind_btManifoldPoint_get_m_localPointA_0=
            function(){return b.asm.fe.apply(null,arguments)},ug=b._emscripten_bind_btManifoldPoint_set_m_localPointA_1=function(){return b.asm.ge.apply(null,arguments)},vg=b._emscripten_bind_btManifoldPoint_get_m_localPointB_0=function(){return b.asm.he.apply(null,arguments)},wg=b._emscripten_bind_btManifoldPoint_set_m_localPointB_1=function(){return b.asm.ie.apply(null,arguments)},xg=b._emscripten_bind_btManifoldPoint_get_m_positionWorldOnA_0=function(){return b.asm.je.apply(null,arguments)},yg=b._emscripten_bind_btManifoldPoint_set_m_positionWorldOnA_1=
            function(){return b.asm.ke.apply(null,arguments)},zg=b._emscripten_bind_btManifoldPoint_get_m_positionWorldOnB_0=function(){return b.asm.le.apply(null,arguments)},Ag=b._emscripten_bind_btManifoldPoint_set_m_positionWorldOnB_1=function(){return b.asm.me.apply(null,arguments)},Bg=b._emscripten_bind_btManifoldPoint_get_m_normalWorldOnB_0=function(){return b.asm.ne.apply(null,arguments)},Cg=b._emscripten_bind_btManifoldPoint_set_m_normalWorldOnB_1=function(){return b.asm.oe.apply(null,arguments)},Dg=
            b._emscripten_bind_btManifoldPoint_get_m_distance1_0=function(){return b.asm.pe.apply(null,arguments)},Eg=b._emscripten_bind_btManifoldPoint_set_m_distance1_1=function(){return b.asm.qe.apply(null,arguments)},Fg=b._emscripten_bind_btManifoldPoint_get_m_index0_0=function(){return b.asm.re.apply(null,arguments)},Gg=b._emscripten_bind_btManifoldPoint_set_m_index0_1=function(){return b.asm.se.apply(null,arguments)},Hg=b._emscripten_bind_btManifoldPoint_get_m_index1_0=function(){return b.asm.te.apply(null,
            arguments)},Ig=b._emscripten_bind_btManifoldPoint_set_m_index1_1=function(){return b.asm.ue.apply(null,arguments)},Jg=b._emscripten_bind_btManifoldPoint_get_m_userPersistentData_0=function(){return b.asm.ve.apply(null,arguments)},Kg=b._emscripten_bind_btManifoldPoint_set_m_userPersistentData_1=function(){return b.asm.we.apply(null,arguments)},Lg=b._emscripten_bind_btManifoldPoint_get_m_userPersistentData0_0=function(){return b.asm.xe.apply(null,arguments)},Mg=b._emscripten_bind_btManifoldPoint_set_m_userPersistentData0_1=
            function(){return b.asm.ye.apply(null,arguments)},Ng=b._emscripten_bind_btManifoldPoint_get_m_userPersistentData1_0=function(){return b.asm.ze.apply(null,arguments)},Og=b._emscripten_bind_btManifoldPoint_set_m_userPersistentData1_1=function(){return b.asm.Ae.apply(null,arguments)},Pg=b._emscripten_bind_btManifoldPoint___destroy___0=function(){return b.asm.Be.apply(null,arguments)},Qg=b._emscripten_bind_btSequentialImpulseConstraintSolver_btSequentialImpulseConstraintSolver_0=function(){return b.asm.Ce.apply(null,
            arguments)},Rg=b._emscripten_bind_btSequentialImpulseConstraintSolver___destroy___0=function(){return b.asm.De.apply(null,arguments)},Sg=b._emscripten_bind_btDiscreteDynamicsWorld_btDiscreteDynamicsWorld_4=function(){return b.asm.Ee.apply(null,arguments)},Tg=b._emscripten_bind_btDiscreteDynamicsWorld_setGravity_1=function(){return b.asm.Fe.apply(null,arguments)},Ug=b._emscripten_bind_btDiscreteDynamicsWorld_getGravity_0=function(){return b.asm.Ge.apply(null,arguments)},Vg=b._emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_1=
            function(){return b.asm.He.apply(null,arguments)},Wg=b._emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_3=function(){return b.asm.Ie.apply(null,arguments)},Xg=b._emscripten_bind_btDiscreteDynamicsWorld_removeRigidBody_1=function(){return b.asm.Je.apply(null,arguments)},Yg=b._emscripten_bind_btDiscreteDynamicsWorld_addConstraint_1=function(){return b.asm.Ke.apply(null,arguments)},Zg=b._emscripten_bind_btDiscreteDynamicsWorld_addConstraint_2=function(){return b.asm.Le.apply(null,arguments)},$g=
            b._emscripten_bind_btDiscreteDynamicsWorld_removeConstraint_1=function(){return b.asm.Me.apply(null,arguments)},ah=b._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_1=function(){return b.asm.Ne.apply(null,arguments)},bh=b._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_2=function(){return b.asm.Oe.apply(null,arguments)},ch=b._emscripten_bind_btDiscreteDynamicsWorld_stepSimulation_3=function(){return b.asm.Pe.apply(null,arguments)},dh=b._emscripten_bind_btDiscreteDynamicsWorld_getDispatcher_0=
            function(){return b.asm.Qe.apply(null,arguments)},eh=b._emscripten_bind_btDiscreteDynamicsWorld_rayTest_3=function(){return b.asm.Re.apply(null,arguments)},fh=b._emscripten_bind_btDiscreteDynamicsWorld_rayTestSingle_6=function(){return b.asm.Se.apply(null,arguments)},gh=b._emscripten_bind_btDiscreteDynamicsWorld_getPairCache_0=function(){return b.asm.Te.apply(null,arguments)},hh=b._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_1=function(){return b.asm.Ue.apply(null,arguments)},ih=b._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_2=
            function(){return b.asm.Ve.apply(null,arguments)},jh=b._emscripten_bind_btDiscreteDynamicsWorld_addCollisionObject_3=function(){return b.asm.We.apply(null,arguments)},kh=b._emscripten_bind_btDiscreteDynamicsWorld_removeCollisionObject_1=function(){return b.asm.Xe.apply(null,arguments)},lh=b._emscripten_bind_btDiscreteDynamicsWorld_setContactBreakingThreshold_1=function(){return b.asm.Ye.apply(null,arguments)},mh=b._emscripten_bind_btDiscreteDynamicsWorld_addAction_1=function(){return b.asm.Ze.apply(null,
            arguments)},nh=b._emscripten_bind_btDiscreteDynamicsWorld_removeAction_1=function(){return b.asm._e.apply(null,arguments)},oh=b._emscripten_bind_btDiscreteDynamicsWorld_getSolverInfo_0=function(){return b.asm.$e.apply(null,arguments)},ph=b._emscripten_bind_btDiscreteDynamicsWorld_getFixedBody_0=function(){return b.asm.af.apply(null,arguments)},qh=b._emscripten_bind_btDiscreteDynamicsWorld___destroy___0=function(){return b.asm.bf.apply(null,arguments)},rh=b._emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_2=
            function(){return b.asm.cf.apply(null,arguments)},sh=b._emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_4=function(){return b.asm.df.apply(null,arguments)},th=b._emscripten_bind_btPoint2PointConstraint_setPivotA_1=function(){return b.asm.ef.apply(null,arguments)},uh=b._emscripten_bind_btPoint2PointConstraint_setPivotB_1=function(){return b.asm.ff.apply(null,arguments)},vh=b._emscripten_bind_btPoint2PointConstraint_getPivotInA_0=function(){return b.asm.gf.apply(null,arguments)},wh=
            b._emscripten_bind_btPoint2PointConstraint_getPivotInB_0=function(){return b.asm.hf.apply(null,arguments)},xh=b._emscripten_bind_btPoint2PointConstraint_enableFeedback_1=function(){return b.asm.jf.apply(null,arguments)},yh=b._emscripten_bind_btPoint2PointConstraint_getBreakingImpulseThreshold_0=function(){return b.asm.kf.apply(null,arguments)},zh=b._emscripten_bind_btPoint2PointConstraint_setBreakingImpulseThreshold_1=function(){return b.asm.lf.apply(null,arguments)},Ah=b._emscripten_bind_btPoint2PointConstraint_getParam_2=
            function(){return b.asm.mf.apply(null,arguments)},Bh=b._emscripten_bind_btPoint2PointConstraint_setParam_3=function(){return b.asm.nf.apply(null,arguments)},Ch=b._emscripten_bind_btPoint2PointConstraint_get_m_setting_0=function(){return b.asm.of.apply(null,arguments)},Dh=b._emscripten_bind_btPoint2PointConstraint_set_m_setting_1=function(){return b.asm.pf.apply(null,arguments)},Eh=b._emscripten_bind_btPoint2PointConstraint___destroy___0=function(){return b.asm.qf.apply(null,arguments)},Fh=b._emscripten_bind_ccOverlapFilterCallback_ccOverlapFilterCallback_0=
            function(){return b.asm.rf.apply(null,arguments)},Gh=b._emscripten_bind_ccOverlapFilterCallback___destroy___0=function(){return b.asm.sf.apply(null,arguments)},Hh=b._emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_1=function(){return b.asm.tf.apply(null,arguments)},Ih=b._emscripten_bind_btConvexTriangleMeshShape_btConvexTriangleMeshShape_2=function(){return b.asm.uf.apply(null,arguments)},Jh=b._emscripten_bind_btConvexTriangleMeshShape_setLocalScaling_1=function(){return b.asm.vf.apply(null,
            arguments)},Kh=b._emscripten_bind_btConvexTriangleMeshShape_getLocalScaling_0=function(){return b.asm.wf.apply(null,arguments)},Lh=b._emscripten_bind_btConvexTriangleMeshShape_calculateLocalInertia_2=function(){return b.asm.xf.apply(null,arguments)},Mh=b._emscripten_bind_btConvexTriangleMeshShape_setMargin_1=function(){return b.asm.yf.apply(null,arguments)},Nh=b._emscripten_bind_btConvexTriangleMeshShape_getMargin_0=function(){return b.asm.zf.apply(null,arguments)},Oh=b._emscripten_bind_btConvexTriangleMeshShape_isCompound_0=
            function(){return b.asm.Af.apply(null,arguments)},Ph=b._emscripten_bind_btConvexTriangleMeshShape_getUserIndex_0=function(){return b.asm.Bf.apply(null,arguments)},Qh=b._emscripten_bind_btConvexTriangleMeshShape_setUserIndex_1=function(){return b.asm.Cf.apply(null,arguments)},Rh=b._emscripten_bind_btConvexTriangleMeshShape_getAabb_3=function(){return b.asm.Df.apply(null,arguments)},Sh=b._emscripten_bind_btConvexTriangleMeshShape_getLocalBoundingSphere_0=function(){return b.asm.Ef.apply(null,arguments)},
            Th=b._emscripten_bind_btConvexTriangleMeshShape___destroy___0=function(){return b.asm.Ff.apply(null,arguments)},Uh=b._emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_2=function(){return b.asm.Gf.apply(null,arguments)},Vh=b._emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_4=function(){return b.asm.Hf.apply(null,arguments)},Wh=b._emscripten_bind_btConeTwistConstraint_setLimit_2=function(){return b.asm.If.apply(null,arguments)},Xh=b._emscripten_bind_btConeTwistConstraint_setAngularOnly_1=
            function(){return b.asm.Jf.apply(null,arguments)},Yh=b._emscripten_bind_btConeTwistConstraint_setDamping_1=function(){return b.asm.Kf.apply(null,arguments)},Zh=b._emscripten_bind_btConeTwistConstraint_enableMotor_1=function(){return b.asm.Lf.apply(null,arguments)},$h=b._emscripten_bind_btConeTwistConstraint_setMaxMotorImpulse_1=function(){return b.asm.Mf.apply(null,arguments)},ai=b._emscripten_bind_btConeTwistConstraint_setMaxMotorImpulseNormalized_1=function(){return b.asm.Nf.apply(null,arguments)},
            bi=b._emscripten_bind_btConeTwistConstraint_setMotorTarget_1=function(){return b.asm.Of.apply(null,arguments)},ci=b._emscripten_bind_btConeTwistConstraint_setMotorTargetInConstraintSpace_1=function(){return b.asm.Pf.apply(null,arguments)},di=b._emscripten_bind_btConeTwistConstraint_enableFeedback_1=function(){return b.asm.Qf.apply(null,arguments)},ei=b._emscripten_bind_btConeTwistConstraint_getBreakingImpulseThreshold_0=function(){return b.asm.Rf.apply(null,arguments)},fi=b._emscripten_bind_btConeTwistConstraint_setBreakingImpulseThreshold_1=
            function(){return b.asm.Sf.apply(null,arguments)},gi=b._emscripten_bind_btConeTwistConstraint_getParam_2=function(){return b.asm.Tf.apply(null,arguments)},hi=b._emscripten_bind_btConeTwistConstraint_setParam_3=function(){return b.asm.Uf.apply(null,arguments)},ii=b._emscripten_bind_btConeTwistConstraint___destroy___0=function(){return b.asm.Vf.apply(null,arguments)},ji=b._emscripten_bind_btConeShape_btConeShape_2=function(){return b.asm.Wf.apply(null,arguments)},ki=b._emscripten_bind_btConeShape_setRadius_1=
            function(){return b.asm.Xf.apply(null,arguments)},li=b._emscripten_bind_btConeShape_setHeight_1=function(){return b.asm.Yf.apply(null,arguments)},mi=b._emscripten_bind_btConeShape_setConeUpIndex_1=function(){return b.asm.Zf.apply(null,arguments)},ni=b._emscripten_bind_btConeShape_setLocalScaling_1=function(){return b.asm._f.apply(null,arguments)},oi=b._emscripten_bind_btConeShape_getLocalScaling_0=function(){return b.asm.$f.apply(null,arguments)},pi=b._emscripten_bind_btConeShape_calculateLocalInertia_2=
            function(){return b.asm.ag.apply(null,arguments)},qi=b._emscripten_bind_btConeShape_isCompound_0=function(){return b.asm.bg.apply(null,arguments)},ri=b._emscripten_bind_btConeShape_getUserIndex_0=function(){return b.asm.cg.apply(null,arguments)},si=b._emscripten_bind_btConeShape_setUserIndex_1=function(){return b.asm.dg.apply(null,arguments)},ti=b._emscripten_bind_btConeShape_getAabb_3=function(){return b.asm.eg.apply(null,arguments)},ui=b._emscripten_bind_btConeShape_getLocalBoundingSphere_0=function(){return b.asm.fg.apply(null,
            arguments)},vi=b._emscripten_bind_btConeShape_getImplicitShapeDimensions_0=function(){return b.asm.gg.apply(null,arguments)},wi=b._emscripten_bind_btConeShape___destroy___0=function(){return b.asm.hg.apply(null,arguments)},xi=b._emscripten_bind_btHeightfieldTerrainShape_btHeightfieldTerrainShape_9=function(){return b.asm.ig.apply(null,arguments)},yi=b._emscripten_bind_btHeightfieldTerrainShape_setMargin_1=function(){return b.asm.jg.apply(null,arguments)},zi=b._emscripten_bind_btHeightfieldTerrainShape_getMargin_0=
            function(){return b.asm.kg.apply(null,arguments)},Ai=b._emscripten_bind_btHeightfieldTerrainShape_setLocalScaling_1=function(){return b.asm.lg.apply(null,arguments)},Bi=b._emscripten_bind_btHeightfieldTerrainShape_getLocalScaling_0=function(){return b.asm.mg.apply(null,arguments)},Ci=b._emscripten_bind_btHeightfieldTerrainShape_calculateLocalInertia_2=function(){return b.asm.ng.apply(null,arguments)},Di=b._emscripten_bind_btHeightfieldTerrainShape_isCompound_0=function(){return b.asm.og.apply(null,
            arguments)},Ei=b._emscripten_bind_btHeightfieldTerrainShape_getUserIndex_0=function(){return b.asm.pg.apply(null,arguments)},Fi=b._emscripten_bind_btHeightfieldTerrainShape_setUserIndex_1=function(){return b.asm.qg.apply(null,arguments)},Gi=b._emscripten_bind_btHeightfieldTerrainShape_getAabb_3=function(){return b.asm.rg.apply(null,arguments)},Hi=b._emscripten_bind_btHeightfieldTerrainShape_getLocalBoundingSphere_0=function(){return b.asm.sg.apply(null,arguments)},Ii=b._emscripten_bind_btHeightfieldTerrainShape___destroy___0=
            function(){return b.asm.tg.apply(null,arguments)},Ji=b._emscripten_bind_VoidPtr___destroy___0=function(){return b.asm.ug.apply(null,arguments)},Ki=b._emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_0=function(){return b.asm.vg.apply(null,arguments)},Li=b._emscripten_bind_btDefaultCollisionConfiguration_btDefaultCollisionConfiguration_1=function(){return b.asm.wg.apply(null,arguments)},Mi=b._emscripten_bind_btDefaultCollisionConfiguration___destroy___0=function(){return b.asm.xg.apply(null,
            arguments)},Ni=b._emscripten_bind_btPairCachingGhostObject_btPairCachingGhostObject_0=function(){return b.asm.yg.apply(null,arguments)},Oi=b._emscripten_bind_btPairCachingGhostObject_setAnisotropicFriction_2=function(){return b.asm.zg.apply(null,arguments)},Pi=b._emscripten_bind_btPairCachingGhostObject_getCollisionShape_0=function(){return b.asm.Ag.apply(null,arguments)},Qi=b._emscripten_bind_btPairCachingGhostObject_getActivationState_0=function(){return b.asm.Bg.apply(null,arguments)},Ri=b._emscripten_bind_btPairCachingGhostObject_setActivationState_1=
            function(){return b.asm.Cg.apply(null,arguments)},Si=b._emscripten_bind_btPairCachingGhostObject_forceActivationState_1=function(){return b.asm.Dg.apply(null,arguments)},Ti=b._emscripten_bind_btPairCachingGhostObject_activate_0=function(){return b.asm.Eg.apply(null,arguments)},Ui=b._emscripten_bind_btPairCachingGhostObject_activate_1=function(){return b.asm.Fg.apply(null,arguments)},Vi=b._emscripten_bind_btPairCachingGhostObject_isActive_0=function(){return b.asm.Gg.apply(null,arguments)},Wi=b._emscripten_bind_btPairCachingGhostObject_isKinematicObject_0=
            function(){return b.asm.Hg.apply(null,arguments)},Xi=b._emscripten_bind_btPairCachingGhostObject_isStaticObject_0=function(){return b.asm.Ig.apply(null,arguments)},Yi=b._emscripten_bind_btPairCachingGhostObject_isStaticOrKinematicObject_0=function(){return b.asm.Jg.apply(null,arguments)},Zi=b._emscripten_bind_btPairCachingGhostObject_setRestitution_1=function(){return b.asm.Kg.apply(null,arguments)},$i=b._emscripten_bind_btPairCachingGhostObject_setFriction_1=function(){return b.asm.Lg.apply(null,
            arguments)},aj=b._emscripten_bind_btPairCachingGhostObject_setRollingFriction_1=function(){return b.asm.Mg.apply(null,arguments)},bj=b._emscripten_bind_btPairCachingGhostObject_setSpinningFriction_1=function(){return b.asm.Ng.apply(null,arguments)},cj=b._emscripten_bind_btPairCachingGhostObject_getWorldTransform_0=function(){return b.asm.Og.apply(null,arguments)},dj=b._emscripten_bind_btPairCachingGhostObject_getCollisionFlags_0=function(){return b.asm.Pg.apply(null,arguments)},ej=b._emscripten_bind_btPairCachingGhostObject_setCollisionFlags_1=
            function(){return b.asm.Qg.apply(null,arguments)},fj=b._emscripten_bind_btPairCachingGhostObject_setWorldTransform_1=function(){return b.asm.Rg.apply(null,arguments)},gj=b._emscripten_bind_btPairCachingGhostObject_setCollisionShape_1=function(){return b.asm.Sg.apply(null,arguments)},hj=b._emscripten_bind_btPairCachingGhostObject_setCcdMotionThreshold_1=function(){return b.asm.Tg.apply(null,arguments)},ij=b._emscripten_bind_btPairCachingGhostObject_setCcdSweptSphereRadius_1=function(){return b.asm.Ug.apply(null,
            arguments)},jj=b._emscripten_bind_btPairCachingGhostObject_getUserIndex_0=function(){return b.asm.Vg.apply(null,arguments)},kj=b._emscripten_bind_btPairCachingGhostObject_setUserIndex_1=function(){return b.asm.Wg.apply(null,arguments)},lj=b._emscripten_bind_btPairCachingGhostObject_setUserIndex2_1=function(){return b.asm.Xg.apply(null,arguments)},mj=b._emscripten_bind_btPairCachingGhostObject_setIgnoreCollisionCheck_2=function(){return b.asm.Yg.apply(null,arguments)},nj=b._emscripten_bind_btPairCachingGhostObject_getNumOverlappingObjects_0=
            function(){return b.asm.Zg.apply(null,arguments)},oj=b._emscripten_bind_btPairCachingGhostObject_getOverlappingObject_1=function(){return b.asm._g.apply(null,arguments)},pj=b._emscripten_bind_btPairCachingGhostObject___destroy___0=function(){return b.asm.$g.apply(null,arguments)},qj=b._emscripten_bind_btOverlappingPairCallback___destroy___0=function(){return b.asm.ah.apply(null,arguments)},rj=b._emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_3=function(){return b.asm.bh.apply(null,
            arguments)},sj=b._emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_5=function(){return b.asm.ch.apply(null,arguments)},tj=b._emscripten_bind_btGeneric6DofSpringConstraint_enableSpring_2=function(){return b.asm.dh.apply(null,arguments)},uj=b._emscripten_bind_btGeneric6DofSpringConstraint_setStiffness_2=function(){return b.asm.eh.apply(null,arguments)},vj=b._emscripten_bind_btGeneric6DofSpringConstraint_setDamping_2=function(){return b.asm.fh.apply(null,arguments)},wj=b._emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_0=
            function(){return b.asm.gh.apply(null,arguments)},xj=b._emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_1=function(){return b.asm.hh.apply(null,arguments)},yj=b._emscripten_bind_btGeneric6DofSpringConstraint_setEquilibriumPoint_2=function(){return b.asm.ih.apply(null,arguments)},zj=b._emscripten_bind_btGeneric6DofSpringConstraint_setLinearLowerLimit_1=function(){return b.asm.jh.apply(null,arguments)},Aj=b._emscripten_bind_btGeneric6DofSpringConstraint_setLinearUpperLimit_1=function(){return b.asm.kh.apply(null,
            arguments)},Bj=b._emscripten_bind_btGeneric6DofSpringConstraint_setAngularLowerLimit_1=function(){return b.asm.lh.apply(null,arguments)},Cj=b._emscripten_bind_btGeneric6DofSpringConstraint_setAngularUpperLimit_1=function(){return b.asm.mh.apply(null,arguments)},Dj=b._emscripten_bind_btGeneric6DofSpringConstraint_getFrameOffsetA_0=function(){return b.asm.nh.apply(null,arguments)},Ej=b._emscripten_bind_btGeneric6DofSpringConstraint_enableFeedback_1=function(){return b.asm.oh.apply(null,arguments)},
            Fj=b._emscripten_bind_btGeneric6DofSpringConstraint_getBreakingImpulseThreshold_0=function(){return b.asm.ph.apply(null,arguments)},Gj=b._emscripten_bind_btGeneric6DofSpringConstraint_setBreakingImpulseThreshold_1=function(){return b.asm.qh.apply(null,arguments)},Hj=b._emscripten_bind_btGeneric6DofSpringConstraint_getParam_2=function(){return b.asm.rh.apply(null,arguments)},Ij=b._emscripten_bind_btGeneric6DofSpringConstraint_setParam_3=function(){return b.asm.sh.apply(null,arguments)},Jj=b._emscripten_bind_btGeneric6DofSpringConstraint___destroy___0=
            function(){return b.asm.th.apply(null,arguments)},Kj=b._emscripten_bind_btTriangleMesh_btTriangleMesh_0=function(){return b.asm.uh.apply(null,arguments)},Lj=b._emscripten_bind_btTriangleMesh_btTriangleMesh_1=function(){return b.asm.vh.apply(null,arguments)},Mj=b._emscripten_bind_btTriangleMesh_btTriangleMesh_2=function(){return b.asm.wh.apply(null,arguments)},Nj=b._emscripten_bind_btTriangleMesh_addTriangle_3=function(){return b.asm.xh.apply(null,arguments)},Oj=b._emscripten_bind_btTriangleMesh_addTriangle_4=
            function(){return b.asm.yh.apply(null,arguments)},Pj=b._emscripten_bind_btTriangleMesh_addTriangleIndices_3=function(){return b.asm.zh.apply(null,arguments)},Qj=b._emscripten_bind_btTriangleMesh_getIndexedMeshArray_0=function(){return b.asm.Ah.apply(null,arguments)},Rj=b._emscripten_bind_btTriangleMesh_setScaling_1=function(){return b.asm.Bh.apply(null,arguments)},Sj=b._emscripten_bind_btTriangleMesh___destroy___0=function(){return b.asm.Ch.apply(null,arguments)},Tj=b._emscripten_bind_btCollisionConfiguration___destroy___0=
            function(){return b.asm.Dh.apply(null,arguments)},Uj=b._emscripten_bind_btPersistentManifold_btPersistentManifold_0=function(){return b.asm.Eh.apply(null,arguments)},Vj=b._emscripten_bind_btPersistentManifold_getBody0_0=function(){return b.asm.Fh.apply(null,arguments)},Wj=b._emscripten_bind_btPersistentManifold_getBody1_0=function(){return b.asm.Gh.apply(null,arguments)},Xj=b._emscripten_bind_btPersistentManifold_getNumContacts_0=function(){return b.asm.Hh.apply(null,arguments)},Yj=b._emscripten_bind_btPersistentManifold_getContactPoint_1=
            function(){return b.asm.Ih.apply(null,arguments)},Zj=b._emscripten_bind_btPersistentManifold___destroy___0=function(){return b.asm.Jh.apply(null,arguments)},ak=b._emscripten_bind_btBoxShape_btBoxShape_1=function(){return b.asm.Kh.apply(null,arguments)},bk=b._emscripten_bind_btBoxShape_setMargin_1=function(){return b.asm.Lh.apply(null,arguments)},ck=b._emscripten_bind_btBoxShape_getMargin_0=function(){return b.asm.Mh.apply(null,arguments)},dk=b._emscripten_bind_btBoxShape_setUnscaledHalfExtents_1=
            function(){return b.asm.Nh.apply(null,arguments)},ek=b._emscripten_bind_btBoxShape_setLocalScaling_1=function(){return b.asm.Oh.apply(null,arguments)},fk=b._emscripten_bind_btBoxShape_getLocalScaling_0=function(){return b.asm.Ph.apply(null,arguments)},gk=b._emscripten_bind_btBoxShape_calculateLocalInertia_2=function(){return b.asm.Qh.apply(null,arguments)},hk=b._emscripten_bind_btBoxShape_isCompound_0=function(){return b.asm.Rh.apply(null,arguments)},ik=b._emscripten_bind_btBoxShape_getUserIndex_0=
            function(){return b.asm.Sh.apply(null,arguments)},jk=b._emscripten_bind_btBoxShape_setUserIndex_1=function(){return b.asm.Th.apply(null,arguments)},kk=b._emscripten_bind_btBoxShape_getAabb_3=function(){return b.asm.Uh.apply(null,arguments)},lk=b._emscripten_bind_btBoxShape_getLocalBoundingSphere_0=function(){return b.asm.Vh.apply(null,arguments)},mk=b._emscripten_bind_btBoxShape_getImplicitShapeDimensions_0=function(){return b.asm.Wh.apply(null,arguments)},nk=b._emscripten_bind_btBoxShape___destroy___0=
            function(){return b.asm.Xh.apply(null,arguments)},ok=b._emscripten_bind_btCapsuleShape_btCapsuleShape_2=function(){return b.asm.Yh.apply(null,arguments)},pk=b._emscripten_bind_btCapsuleShape_setMargin_1=function(){return b.asm.Zh.apply(null,arguments)},qk=b._emscripten_bind_btCapsuleShape_getMargin_0=function(){return b.asm._h.apply(null,arguments)},rk=b._emscripten_bind_btCapsuleShape_updateProp_3=function(){return b.asm.$h.apply(null,arguments)},sk=b._emscripten_bind_btCapsuleShape_setLocalScaling_1=
            function(){return b.asm.ai.apply(null,arguments)},tk=b._emscripten_bind_btCapsuleShape_getLocalScaling_0=function(){return b.asm.bi.apply(null,arguments)},uk=b._emscripten_bind_btCapsuleShape_calculateLocalInertia_2=function(){return b.asm.ci.apply(null,arguments)},vk=b._emscripten_bind_btCapsuleShape_isCompound_0=function(){return b.asm.di.apply(null,arguments)},wk=b._emscripten_bind_btCapsuleShape_getUserIndex_0=function(){return b.asm.ei.apply(null,arguments)},xk=b._emscripten_bind_btCapsuleShape_setUserIndex_1=
            function(){return b.asm.fi.apply(null,arguments)},yk=b._emscripten_bind_btCapsuleShape_getAabb_3=function(){return b.asm.gi.apply(null,arguments)},zk=b._emscripten_bind_btCapsuleShape_getLocalBoundingSphere_0=function(){return b.asm.hi.apply(null,arguments)},Ak=b._emscripten_bind_btCapsuleShape_getImplicitShapeDimensions_0=function(){return b.asm.ii.apply(null,arguments)},Bk=b._emscripten_bind_btCapsuleShape___destroy___0=function(){return b.asm.ji.apply(null,arguments)},Ck=b._emscripten_bind_btCompoundShape_btCompoundShape_0=
            function(){return b.asm.ki.apply(null,arguments)},Dk=b._emscripten_bind_btCompoundShape_btCompoundShape_1=function(){return b.asm.li.apply(null,arguments)},Ek=b._emscripten_bind_btCompoundShape_addChildShape_2=function(){return b.asm.mi.apply(null,arguments)},Fk=b._emscripten_bind_btCompoundShape_removeChildShape_1=function(){return b.asm.ni.apply(null,arguments)},Gk=b._emscripten_bind_btCompoundShape_removeChildShapeByIndex_1=function(){return b.asm.oi.apply(null,arguments)},Hk=b._emscripten_bind_btCompoundShape_getNumChildShapes_0=
            function(){return b.asm.pi.apply(null,arguments)},Ik=b._emscripten_bind_btCompoundShape_getChildShape_1=function(){return b.asm.qi.apply(null,arguments)},Jk=b._emscripten_bind_btCompoundShape_updateChildTransform_2=function(){return b.asm.ri.apply(null,arguments)},Kk=b._emscripten_bind_btCompoundShape_updateChildTransform_3=function(){return b.asm.si.apply(null,arguments)},Lk=b._emscripten_bind_btCompoundShape_setMargin_1=function(){return b.asm.ti.apply(null,arguments)},Mk=b._emscripten_bind_btCompoundShape_getMargin_0=
            function(){return b.asm.ui.apply(null,arguments)},Nk=b._emscripten_bind_btCompoundShape_setMaterial_3=function(){return b.asm.vi.apply(null,arguments)},Ok=b._emscripten_bind_btCompoundShape_setMaterial_4=function(){return b.asm.wi.apply(null,arguments)},Pk=b._emscripten_bind_btCompoundShape_setMaterial_5=function(){return b.asm.xi.apply(null,arguments)},Qk=b._emscripten_bind_btCompoundShape_setMaterial_6=function(){return b.asm.yi.apply(null,arguments)},Rk=b._emscripten_bind_btCompoundShape_setLocalScaling_1=
            function(){return b.asm.zi.apply(null,arguments)},Sk=b._emscripten_bind_btCompoundShape_getLocalScaling_0=function(){return b.asm.Ai.apply(null,arguments)},Tk=b._emscripten_bind_btCompoundShape_calculateLocalInertia_2=function(){return b.asm.Bi.apply(null,arguments)},Uk=b._emscripten_bind_btCompoundShape_isCompound_0=function(){return b.asm.Ci.apply(null,arguments)},Vk=b._emscripten_bind_btCompoundShape_getUserIndex_0=function(){return b.asm.Di.apply(null,arguments)},Wk=b._emscripten_bind_btCompoundShape_setUserIndex_1=
            function(){return b.asm.Ei.apply(null,arguments)},Xk=b._emscripten_bind_btCompoundShape_getAabb_3=function(){return b.asm.Fi.apply(null,arguments)},Yk=b._emscripten_bind_btCompoundShape_getLocalBoundingSphere_0=function(){return b.asm.Gi.apply(null,arguments)},Zk=b._emscripten_bind_btCompoundShape___destroy___0=function(){return b.asm.Hi.apply(null,arguments)},$k=b._emscripten_bind_btDefaultMotionState_btDefaultMotionState_0=function(){return b.asm.Ii.apply(null,arguments)},al=b._emscripten_bind_btDefaultMotionState_btDefaultMotionState_1=
            function(){return b.asm.Ji.apply(null,arguments)},bl=b._emscripten_bind_btDefaultMotionState_btDefaultMotionState_2=function(){return b.asm.Ki.apply(null,arguments)},cl=b._emscripten_bind_btDefaultMotionState_getWorldTransform_1=function(){return b.asm.Li.apply(null,arguments)},dl=b._emscripten_bind_btDefaultMotionState_setWorldTransform_1=function(){return b.asm.Mi.apply(null,arguments)},el=b._emscripten_bind_btDefaultMotionState___destroy___0=function(){return b.asm.Ni.apply(null,arguments)},fl=
            b._emscripten_bind_AllHitsRayResultCallback_AllHitsRayResultCallback_2=function(){return b.asm.Oi.apply(null,arguments)},gl=b._emscripten_bind_AllHitsRayResultCallback_hasHit_0=function(){return b.asm.Pi.apply(null,arguments)},hl=b._emscripten_bind_AllHitsRayResultCallback_setUseCC_1=function(){return b.asm.Qi.apply(null,arguments)},il=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionObjects_0=function(){return b.asm.Ri.apply(null,arguments)},jl=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionObjects_1=
            function(){return b.asm.Si.apply(null,arguments)},kl=b._emscripten_bind_AllHitsRayResultCallback_get_m_rayFromWorld_0=function(){return b.asm.Ti.apply(null,arguments)},ll=b._emscripten_bind_AllHitsRayResultCallback_set_m_rayFromWorld_1=function(){return b.asm.Ui.apply(null,arguments)},ml=b._emscripten_bind_AllHitsRayResultCallback_get_m_rayToWorld_0=function(){return b.asm.Vi.apply(null,arguments)},nl=b._emscripten_bind_AllHitsRayResultCallback_set_m_rayToWorld_1=function(){return b.asm.Wi.apply(null,
            arguments)},ol=b._emscripten_bind_AllHitsRayResultCallback_get_m_hitNormalWorld_0=function(){return b.asm.Xi.apply(null,arguments)},pl=b._emscripten_bind_AllHitsRayResultCallback_set_m_hitNormalWorld_1=function(){return b.asm.Yi.apply(null,arguments)},ql=b._emscripten_bind_AllHitsRayResultCallback_get_m_hitPointWorld_0=function(){return b.asm.Zi.apply(null,arguments)},rl=b._emscripten_bind_AllHitsRayResultCallback_set_m_hitPointWorld_1=function(){return b.asm._i.apply(null,arguments)},sl=b._emscripten_bind_AllHitsRayResultCallback_get_m_hitFractions_0=
            function(){return b.asm.$i.apply(null,arguments)},tl=b._emscripten_bind_AllHitsRayResultCallback_set_m_hitFractions_1=function(){return b.asm.aj.apply(null,arguments)},ul=b._emscripten_bind_AllHitsRayResultCallback_get_m_shapeParts_0=function(){return b.asm.bj.apply(null,arguments)},vl=b._emscripten_bind_AllHitsRayResultCallback_set_m_shapeParts_1=function(){return b.asm.cj.apply(null,arguments)},wl=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionFilterGroup_0=function(){return b.asm.dj.apply(null,
            arguments)},xl=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionFilterGroup_1=function(){return b.asm.ej.apply(null,arguments)},yl=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionFilterMask_0=function(){return b.asm.fj.apply(null,arguments)},zl=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionFilterMask_1=function(){return b.asm.gj.apply(null,arguments)},Al=b._emscripten_bind_AllHitsRayResultCallback_get_m_shapePart_0=function(){return b.asm.hj.apply(null,arguments)},
            Bl=b._emscripten_bind_AllHitsRayResultCallback_set_m_shapePart_1=function(){return b.asm.ij.apply(null,arguments)},Cl=b._emscripten_bind_AllHitsRayResultCallback_get_m_closestHitFraction_0=function(){return b.asm.jj.apply(null,arguments)},Dl=b._emscripten_bind_AllHitsRayResultCallback_set_m_closestHitFraction_1=function(){return b.asm.kj.apply(null,arguments)},El=b._emscripten_bind_AllHitsRayResultCallback_get_m_collisionObject_0=function(){return b.asm.lj.apply(null,arguments)},Fl=b._emscripten_bind_AllHitsRayResultCallback_set_m_collisionObject_1=
            function(){return b.asm.mj.apply(null,arguments)},Gl=b._emscripten_bind_AllHitsRayResultCallback___destroy___0=function(){return b.asm.nj.apply(null,arguments)},Hl=b._emscripten_bind_ClosestRayResultCallback_ClosestRayResultCallback_2=function(){return b.asm.oj.apply(null,arguments)},Il=b._emscripten_bind_ClosestRayResultCallback_hasHit_0=function(){return b.asm.pj.apply(null,arguments)},Jl=b._emscripten_bind_ClosestRayResultCallback_setUseCC_1=function(){return b.asm.qj.apply(null,arguments)},Kl=
            b._emscripten_bind_ClosestRayResultCallback_get_m_rayFromWorld_0=function(){return b.asm.rj.apply(null,arguments)},Ll=b._emscripten_bind_ClosestRayResultCallback_set_m_rayFromWorld_1=function(){return b.asm.sj.apply(null,arguments)},Ml=b._emscripten_bind_ClosestRayResultCallback_get_m_rayToWorld_0=function(){return b.asm.tj.apply(null,arguments)},Nl=b._emscripten_bind_ClosestRayResultCallback_set_m_rayToWorld_1=function(){return b.asm.uj.apply(null,arguments)},Ol=b._emscripten_bind_ClosestRayResultCallback_get_m_hitNormalWorld_0=
            function(){return b.asm.vj.apply(null,arguments)},Pl=b._emscripten_bind_ClosestRayResultCallback_set_m_hitNormalWorld_1=function(){return b.asm.wj.apply(null,arguments)},Ql=b._emscripten_bind_ClosestRayResultCallback_get_m_hitPointWorld_0=function(){return b.asm.xj.apply(null,arguments)},Rl=b._emscripten_bind_ClosestRayResultCallback_set_m_hitPointWorld_1=function(){return b.asm.yj.apply(null,arguments)},Sl=b._emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterGroup_0=function(){return b.asm.zj.apply(null,
            arguments)},Tl=b._emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterGroup_1=function(){return b.asm.Aj.apply(null,arguments)},Ul=b._emscripten_bind_ClosestRayResultCallback_get_m_collisionFilterMask_0=function(){return b.asm.Bj.apply(null,arguments)},Vl=b._emscripten_bind_ClosestRayResultCallback_set_m_collisionFilterMask_1=function(){return b.asm.Cj.apply(null,arguments)},Wl=b._emscripten_bind_ClosestRayResultCallback_get_m_shapePart_0=function(){return b.asm.Dj.apply(null,arguments)},
            Xl=b._emscripten_bind_ClosestRayResultCallback_set_m_shapePart_1=function(){return b.asm.Ej.apply(null,arguments)},Yl=b._emscripten_bind_ClosestRayResultCallback_get_m_closestHitFraction_0=function(){return b.asm.Fj.apply(null,arguments)},Zl=b._emscripten_bind_ClosestRayResultCallback_set_m_closestHitFraction_1=function(){return b.asm.Gj.apply(null,arguments)},$l=b._emscripten_bind_ClosestRayResultCallback_get_m_collisionObject_0=function(){return b.asm.Hj.apply(null,arguments)},am=b._emscripten_bind_ClosestRayResultCallback_set_m_collisionObject_1=
            function(){return b.asm.Ij.apply(null,arguments)},bm=b._emscripten_bind_ClosestRayResultCallback___destroy___0=function(){return b.asm.Jj.apply(null,arguments)},cm=b._emscripten_bind_ccKinematicCharacterController_ccKinematicCharacterController_3=function(){return b.asm.Kj.apply(null,arguments)},dm=b._emscripten_bind_ccKinematicCharacterController_ccKinematicCharacterController_4=function(){return b.asm.Lj.apply(null,arguments)},em=b._emscripten_bind_ccKinematicCharacterController_setUpAxis_1=function(){return b.asm.Mj.apply(null,
            arguments)},fm=b._emscripten_bind_ccKinematicCharacterController_setWalkDirection_1=function(){return b.asm.Nj.apply(null,arguments)},gm=b._emscripten_bind_ccKinematicCharacterController_setVelocityForTimeInterval_2=function(){return b.asm.Oj.apply(null,arguments)},hm=b._emscripten_bind_ccKinematicCharacterController_warp_1=function(){return b.asm.Pj.apply(null,arguments)},im=b._emscripten_bind_ccKinematicCharacterController_preStep_1=function(){return b.asm.Qj.apply(null,arguments)},jm=b._emscripten_bind_ccKinematicCharacterController_playerStep_2=
            function(){return b.asm.Rj.apply(null,arguments)},km=b._emscripten_bind_ccKinematicCharacterController_setFallSpeed_1=function(){return b.asm.Sj.apply(null,arguments)},lm=b._emscripten_bind_ccKinematicCharacterController_setJumpSpeed_1=function(){return b.asm.Tj.apply(null,arguments)},mm=b._emscripten_bind_ccKinematicCharacterController_setMaxJumpHeight_1=function(){return b.asm.Uj.apply(null,arguments)},nm=b._emscripten_bind_ccKinematicCharacterController_canJump_0=function(){return b.asm.Vj.apply(null,
            arguments)},om=b._emscripten_bind_ccKinematicCharacterController_jump_0=function(){return b.asm.Wj.apply(null,arguments)},pm=b._emscripten_bind_ccKinematicCharacterController_setGravity_1=function(){return b.asm.Xj.apply(null,arguments)},qm=b._emscripten_bind_ccKinematicCharacterController_getGravity_0=function(){return b.asm.Yj.apply(null,arguments)},rm=b._emscripten_bind_ccKinematicCharacterController_setMaxSlope_1=function(){return b.asm.Zj.apply(null,arguments)},sm=b._emscripten_bind_ccKinematicCharacterController_getMaxSlope_0=
            function(){return b.asm._j.apply(null,arguments)},tm=b._emscripten_bind_ccKinematicCharacterController_getGhostObject_0=function(){return b.asm.$j.apply(null,arguments)},um=b._emscripten_bind_ccKinematicCharacterController_setUseGhostSweepTest_1=function(){return b.asm.ak.apply(null,arguments)},wm=b._emscripten_bind_ccKinematicCharacterController_onGround_0=function(){return b.asm.bk.apply(null,arguments)},xm=b._emscripten_bind_ccKinematicCharacterController_setUpInterpolate_1=function(){return b.asm.ck.apply(null,
            arguments)},ym=b._emscripten_bind_ccKinematicCharacterController_updateAction_2=function(){return b.asm.dk.apply(null,arguments)},zm=b._emscripten_bind_ccKinematicCharacterController___destroy___0=function(){return b.asm.ek.apply(null,arguments)},Am=b._emscripten_bind_btHingeConstraint_btHingeConstraint_2=function(){return b.asm.fk.apply(null,arguments)},Bm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_3=function(){return b.asm.gk.apply(null,arguments)},Cm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_4=
            function(){return b.asm.hk.apply(null,arguments)},Dm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_5=function(){return b.asm.ik.apply(null,arguments)},Em=b._emscripten_bind_btHingeConstraint_btHingeConstraint_6=function(){return b.asm.jk.apply(null,arguments)},Fm=b._emscripten_bind_btHingeConstraint_btHingeConstraint_7=function(){return b.asm.kk.apply(null,arguments)},Gm=b._emscripten_bind_btHingeConstraint_setLimit_4=function(){return b.asm.lk.apply(null,arguments)},Hm=b._emscripten_bind_btHingeConstraint_setLimit_5=
            function(){return b.asm.mk.apply(null,arguments)},Im=b._emscripten_bind_btHingeConstraint_enableAngularMotor_3=function(){return b.asm.nk.apply(null,arguments)},Jm=b._emscripten_bind_btHingeConstraint_setAngularOnly_1=function(){return b.asm.ok.apply(null,arguments)},Km=b._emscripten_bind_btHingeConstraint_enableMotor_1=function(){return b.asm.pk.apply(null,arguments)},Lm=b._emscripten_bind_btHingeConstraint_setMaxMotorImpulse_1=function(){return b.asm.qk.apply(null,arguments)},Mm=b._emscripten_bind_btHingeConstraint_setMotorTarget_2=
            function(){return b.asm.rk.apply(null,arguments)},Nm=b._emscripten_bind_btHingeConstraint_setFrames_2=function(){return b.asm.sk.apply(null,arguments)},Om=b._emscripten_bind_btHingeConstraint_setAxis_1=function(){return b.asm.tk.apply(null,arguments)},Pm=b._emscripten_bind_btHingeConstraint_setUseReferenceFrameA_1=function(){return b.asm.uk.apply(null,arguments)},Qm=b._emscripten_bind_btHingeConstraint_enableFeedback_1=function(){return b.asm.vk.apply(null,arguments)},Rm=b._emscripten_bind_btHingeConstraint_getBreakingImpulseThreshold_0=
            function(){return b.asm.wk.apply(null,arguments)},Sm=b._emscripten_bind_btHingeConstraint_setBreakingImpulseThreshold_1=function(){return b.asm.xk.apply(null,arguments)},Tm=b._emscripten_bind_btHingeConstraint_getParam_2=function(){return b.asm.yk.apply(null,arguments)},Um=b._emscripten_bind_btHingeConstraint_setParam_3=function(){return b.asm.zk.apply(null,arguments)},Vm=b._emscripten_bind_btHingeConstraint___destroy___0=function(){return b.asm.Ak.apply(null,arguments)},Wm=b._emscripten_bind_btQuaternion_btQuaternion_4=
            function(){return b.asm.Bk.apply(null,arguments)},Xm=b._emscripten_bind_btQuaternion_setValue_4=function(){return b.asm.Ck.apply(null,arguments)},Ym=b._emscripten_bind_btQuaternion_x_0=function(){return b.asm.Dk.apply(null,arguments)},Zm=b._emscripten_bind_btQuaternion_y_0=function(){return b.asm.Ek.apply(null,arguments)},$m=b._emscripten_bind_btQuaternion_z_0=function(){return b.asm.Fk.apply(null,arguments)},an=b._emscripten_bind_btQuaternion_w_0=function(){return b.asm.Gk.apply(null,arguments)},
            bn=b._emscripten_bind_btQuaternion_setX_1=function(){return b.asm.Hk.apply(null,arguments)},cn=b._emscripten_bind_btQuaternion_setY_1=function(){return b.asm.Ik.apply(null,arguments)},dn=b._emscripten_bind_btQuaternion_setZ_1=function(){return b.asm.Jk.apply(null,arguments)},en=b._emscripten_bind_btQuaternion_setW_1=function(){return b.asm.Kk.apply(null,arguments)},fn=b._emscripten_bind_btQuaternion___destroy___0=function(){return b.asm.Lk.apply(null,arguments)},gn=b._emscripten_bind_btBU_Simplex1to4_btBU_Simplex1to4_0=
            function(){return b.asm.Mk.apply(null,arguments)},hn=b._emscripten_bind_btBU_Simplex1to4_addVertex_1=function(){return b.asm.Nk.apply(null,arguments)},jn=b._emscripten_bind_btBU_Simplex1to4_setLocalScaling_1=function(){return b.asm.Ok.apply(null,arguments)},kn=b._emscripten_bind_btBU_Simplex1to4_getLocalScaling_0=function(){return b.asm.Pk.apply(null,arguments)},ln=b._emscripten_bind_btBU_Simplex1to4_calculateLocalInertia_2=function(){return b.asm.Qk.apply(null,arguments)},mn=b._emscripten_bind_btBU_Simplex1to4_isCompound_0=
            function(){return b.asm.Rk.apply(null,arguments)},nn=b._emscripten_bind_btBU_Simplex1to4_getUserIndex_0=function(){return b.asm.Sk.apply(null,arguments)},on=b._emscripten_bind_btBU_Simplex1to4_setUserIndex_1=function(){return b.asm.Tk.apply(null,arguments)},pn=b._emscripten_bind_btBU_Simplex1to4_getAabb_3=function(){return b.asm.Uk.apply(null,arguments)},qn=b._emscripten_bind_btBU_Simplex1to4_getLocalBoundingSphere_0=function(){return b.asm.Vk.apply(null,arguments)},rn=b._emscripten_bind_btBU_Simplex1to4___destroy___0=
            function(){return b.asm.Wk.apply(null,arguments)},sn=b._emscripten_bind_btContactSolverInfo_get_m_splitImpulse_0=function(){return b.asm.Xk.apply(null,arguments)},tn=b._emscripten_bind_btContactSolverInfo_set_m_splitImpulse_1=function(){return b.asm.Yk.apply(null,arguments)},un=b._emscripten_bind_btContactSolverInfo_get_m_splitImpulsePenetrationThreshold_0=function(){return b.asm.Zk.apply(null,arguments)},vn=b._emscripten_bind_btContactSolverInfo_set_m_splitImpulsePenetrationThreshold_1=function(){return b.asm._k.apply(null,
            arguments)},wn=b._emscripten_bind_btContactSolverInfo_get_m_numIterations_0=function(){return b.asm.$k.apply(null,arguments)},xn=b._emscripten_bind_btContactSolverInfo_set_m_numIterations_1=function(){return b.asm.al.apply(null,arguments)},yn=b._emscripten_bind_btContactSolverInfo___destroy___0=function(){return b.asm.bl.apply(null,arguments)},zn=b._emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_3=function(){return b.asm.cl.apply(null,arguments)},An=b._emscripten_bind_btKinematicCharacterController_btKinematicCharacterController_4=
            function(){return b.asm.dl.apply(null,arguments)},Bn=b._emscripten_bind_btKinematicCharacterController_setUp_1=function(){return b.asm.el.apply(null,arguments)},Cn=b._emscripten_bind_btKinematicCharacterController_setWalkDirection_1=function(){return b.asm.fl.apply(null,arguments)},Dn=b._emscripten_bind_btKinematicCharacterController_setVelocityForTimeInterval_2=function(){return b.asm.gl.apply(null,arguments)},En=b._emscripten_bind_btKinematicCharacterController_reset_1=function(){return b.asm.hl.apply(null,
            arguments)},Fn=b._emscripten_bind_btKinematicCharacterController_warp_1=function(){return b.asm.il.apply(null,arguments)},Gn=b._emscripten_bind_btKinematicCharacterController_preStep_1=function(){return b.asm.jl.apply(null,arguments)},Hn=b._emscripten_bind_btKinematicCharacterController_playerStep_2=function(){return b.asm.kl.apply(null,arguments)},In=b._emscripten_bind_btKinematicCharacterController_setFallSpeed_1=function(){return b.asm.ll.apply(null,arguments)},Jn=b._emscripten_bind_btKinematicCharacterController_setJumpSpeed_1=
            function(){return b.asm.ml.apply(null,arguments)},Kn=b._emscripten_bind_btKinematicCharacterController_setMaxJumpHeight_1=function(){return b.asm.nl.apply(null,arguments)},Ln=b._emscripten_bind_btKinematicCharacterController_canJump_0=function(){return b.asm.ol.apply(null,arguments)},Mn=b._emscripten_bind_btKinematicCharacterController_jump_0=function(){return b.asm.pl.apply(null,arguments)},Nn=b._emscripten_bind_btKinematicCharacterController_jump_1=function(){return b.asm.ql.apply(null,arguments)},
            On=b._emscripten_bind_btKinematicCharacterController_setGravity_1=function(){return b.asm.rl.apply(null,arguments)},Pn=b._emscripten_bind_btKinematicCharacterController_getGravity_0=function(){return b.asm.sl.apply(null,arguments)},Qn=b._emscripten_bind_btKinematicCharacterController_setMaxSlope_1=function(){return b.asm.tl.apply(null,arguments)},Rn=b._emscripten_bind_btKinematicCharacterController_getMaxSlope_0=function(){return b.asm.ul.apply(null,arguments)},Sn=b._emscripten_bind_btKinematicCharacterController_getGhostObject_0=
            function(){return b.asm.vl.apply(null,arguments)},Tn=b._emscripten_bind_btKinematicCharacterController_setUseGhostSweepTest_1=function(){return b.asm.wl.apply(null,arguments)},Un=b._emscripten_bind_btKinematicCharacterController_onGround_0=function(){return b.asm.xl.apply(null,arguments)},Vn=b._emscripten_bind_btKinematicCharacterController_setUpInterpolate_1=function(){return b.asm.yl.apply(null,arguments)},Wn=b._emscripten_bind_btKinematicCharacterController_updateAction_2=function(){return b.asm.zl.apply(null,
            arguments)},Xn=b._emscripten_bind_btKinematicCharacterController___destroy___0=function(){return b.asm.Al.apply(null,arguments)},Yn=b._emscripten_bind_btStaticPlaneShape_btStaticPlaneShape_2=function(){return b.asm.Bl.apply(null,arguments)},Zn=b._emscripten_bind_btStaticPlaneShape_getPlaneNormal_0=function(){return b.asm.Cl.apply(null,arguments)},$n=b._emscripten_bind_btStaticPlaneShape_setPlaneConstant_1=function(){return b.asm.Dl.apply(null,arguments)},ao=b._emscripten_bind_btStaticPlaneShape_setLocalScaling_1=
            function(){return b.asm.El.apply(null,arguments)},bo=b._emscripten_bind_btStaticPlaneShape_getLocalScaling_0=function(){return b.asm.Fl.apply(null,arguments)},co=b._emscripten_bind_btStaticPlaneShape_calculateLocalInertia_2=function(){return b.asm.Gl.apply(null,arguments)},eo=b._emscripten_bind_btStaticPlaneShape_isCompound_0=function(){return b.asm.Hl.apply(null,arguments)},fo=b._emscripten_bind_btStaticPlaneShape_getUserIndex_0=function(){return b.asm.Il.apply(null,arguments)},go=b._emscripten_bind_btStaticPlaneShape_setUserIndex_1=
            function(){return b.asm.Jl.apply(null,arguments)},ho=b._emscripten_bind_btStaticPlaneShape_getAabb_3=function(){return b.asm.Kl.apply(null,arguments)},io=b._emscripten_bind_btStaticPlaneShape_getLocalBoundingSphere_0=function(){return b.asm.Ll.apply(null,arguments)},jo=b._emscripten_bind_btStaticPlaneShape___destroy___0=function(){return b.asm.Ml.apply(null,arguments)},ko=b._emscripten_bind_btOverlappingPairCache_setInternalGhostPairCallback_1=function(){return b.asm.Nl.apply(null,arguments)},lo=
            b._emscripten_bind_btOverlappingPairCache_setOverlapFilterCallback_1=function(){return b.asm.Ol.apply(null,arguments)},mo=b._emscripten_bind_btOverlappingPairCache_getNumOverlappingPairs_0=function(){return b.asm.Pl.apply(null,arguments)},no=b._emscripten_bind_btOverlappingPairCache___destroy___0=function(){return b.asm.Ql.apply(null,arguments)},oo=b._emscripten_bind_btVector3_btVector3_0=function(){return b.asm.Rl.apply(null,arguments)},po=b._emscripten_bind_btVector3_btVector3_3=function(){return b.asm.Sl.apply(null,
            arguments)},qo=b._emscripten_bind_btVector3_x_0=function(){return b.asm.Tl.apply(null,arguments)},ro=b._emscripten_bind_btVector3_y_0=function(){return b.asm.Ul.apply(null,arguments)},so=b._emscripten_bind_btVector3_z_0=function(){return b.asm.Vl.apply(null,arguments)},to=b._emscripten_bind_btVector3_setX_1=function(){return b.asm.Wl.apply(null,arguments)},uo=b._emscripten_bind_btVector3_setY_1=function(){return b.asm.Xl.apply(null,arguments)},vo=b._emscripten_bind_btVector3_setZ_1=function(){return b.asm.Yl.apply(null,
            arguments)},wo=b._emscripten_bind_btVector3_setValue_3=function(){return b.asm.Zl.apply(null,arguments)},xo=b._emscripten_bind_btVector3___destroy___0=function(){return b.asm._l.apply(null,arguments)},yo=b._emscripten_bind_btSphereShape_btSphereShape_1=function(){return b.asm.$l.apply(null,arguments)},zo=b._emscripten_bind_btSphereShape_setMargin_1=function(){return b.asm.am.apply(null,arguments)},Ao=b._emscripten_bind_btSphereShape_getMargin_0=function(){return b.asm.bm.apply(null,arguments)},Bo=
            b._emscripten_bind_btSphereShape_setUnscaledRadius_1=function(){return b.asm.cm.apply(null,arguments)},Co=b._emscripten_bind_btSphereShape_setLocalScaling_1=function(){return b.asm.dm.apply(null,arguments)},Do=b._emscripten_bind_btSphereShape_getLocalScaling_0=function(){return b.asm.em.apply(null,arguments)},Eo=b._emscripten_bind_btSphereShape_calculateLocalInertia_2=function(){return b.asm.fm.apply(null,arguments)},Fo=b._emscripten_bind_btSphereShape_isCompound_0=function(){return b.asm.gm.apply(null,
            arguments)},Go=b._emscripten_bind_btSphereShape_getUserIndex_0=function(){return b.asm.hm.apply(null,arguments)},Ho=b._emscripten_bind_btSphereShape_setUserIndex_1=function(){return b.asm.im.apply(null,arguments)},Io=b._emscripten_bind_btSphereShape_getAabb_3=function(){return b.asm.jm.apply(null,arguments)},Jo=b._emscripten_bind_btSphereShape_getLocalBoundingSphere_0=function(){return b.asm.km.apply(null,arguments)},Ko=b._emscripten_bind_btSphereShape_getImplicitShapeDimensions_0=function(){return b.asm.lm.apply(null,
            arguments)},Lo=b._emscripten_bind_btSphereShape___destroy___0=function(){return b.asm.mm.apply(null,arguments)},Mo=b._emscripten_bind_btDefaultCollisionConstructionInfo_btDefaultCollisionConstructionInfo_0=function(){return b.asm.nm.apply(null,arguments)},No=b._emscripten_bind_btDefaultCollisionConstructionInfo___destroy___0=function(){return b.asm.om.apply(null,arguments)},Oo=b._emscripten_bind_btEmptyShape_btEmptyShape_0=function(){return b.asm.pm.apply(null,arguments)},Po=b._emscripten_bind_btEmptyShape_setLocalScaling_1=
            function(){return b.asm.qm.apply(null,arguments)},Qo=b._emscripten_bind_btEmptyShape_getLocalScaling_0=function(){return b.asm.rm.apply(null,arguments)},Ro=b._emscripten_bind_btEmptyShape_calculateLocalInertia_2=function(){return b.asm.sm.apply(null,arguments)},So=b._emscripten_bind_btEmptyShape_isCompound_0=function(){return b.asm.tm.apply(null,arguments)},To=b._emscripten_bind_btEmptyShape_getUserIndex_0=function(){return b.asm.um.apply(null,arguments)},Uo=b._emscripten_bind_btEmptyShape_setUserIndex_1=
            function(){return b.asm.vm.apply(null,arguments)},Vo=b._emscripten_bind_btEmptyShape_getAabb_3=function(){return b.asm.wm.apply(null,arguments)},Wo=b._emscripten_bind_btEmptyShape_getLocalBoundingSphere_0=function(){return b.asm.xm.apply(null,arguments)},Xo=b._emscripten_bind_btEmptyShape___destroy___0=function(){return b.asm.ym.apply(null,arguments)},Yo=b._emscripten_bind_btConstraintSetting_btConstraintSetting_0=function(){return b.asm.zm.apply(null,arguments)},Zo=b._emscripten_bind_btConstraintSetting_get_m_tau_0=
            function(){return b.asm.Am.apply(null,arguments)},$o=b._emscripten_bind_btConstraintSetting_set_m_tau_1=function(){return b.asm.Bm.apply(null,arguments)},ap=b._emscripten_bind_btConstraintSetting_get_m_damping_0=function(){return b.asm.Cm.apply(null,arguments)},bp=b._emscripten_bind_btConstraintSetting_set_m_damping_1=function(){return b.asm.Dm.apply(null,arguments)},cp=b._emscripten_bind_btConstraintSetting_get_m_impulseClamp_0=function(){return b.asm.Em.apply(null,arguments)},dp=b._emscripten_bind_btConstraintSetting_set_m_impulseClamp_1=
            function(){return b.asm.Fm.apply(null,arguments)},ep=b._emscripten_bind_btConstraintSetting___destroy___0=function(){return b.asm.Gm.apply(null,arguments)},fp=b._emscripten_bind_LocalShapeInfo_get_m_shapePart_0=function(){return b.asm.Hm.apply(null,arguments)},gp=b._emscripten_bind_LocalShapeInfo_set_m_shapePart_1=function(){return b.asm.Im.apply(null,arguments)},hp=b._emscripten_bind_LocalShapeInfo_get_m_triangleIndex_0=function(){return b.asm.Jm.apply(null,arguments)},ip=b._emscripten_bind_LocalShapeInfo_set_m_triangleIndex_1=
            function(){return b.asm.Km.apply(null,arguments)},jp=b._emscripten_bind_LocalShapeInfo___destroy___0=function(){return b.asm.Lm.apply(null,arguments)},kp=b._emscripten_bind_btVector3Array_size_0=function(){return b.asm.Mm.apply(null,arguments)},lp=b._emscripten_bind_btVector3Array_at_1=function(){return b.asm.Nm.apply(null,arguments)},mp=b._emscripten_bind_btVector3Array_clear_0=function(){return b.asm.Om.apply(null,arguments)},np=b._emscripten_bind_btVector3Array___destroy___0=function(){return b.asm.Pm.apply(null,
            arguments)},op=b._emscripten_bind_btConstraintSolver___destroy___0=function(){return b.asm.Qm.apply(null,arguments)},pp=b._emscripten_bind_btFixedConstraint_btFixedConstraint_4=function(){return b.asm.Rm.apply(null,arguments)},qp=b._emscripten_bind_btFixedConstraint_enableFeedback_1=function(){return b.asm.Sm.apply(null,arguments)},rp=b._emscripten_bind_btFixedConstraint_getBreakingImpulseThreshold_0=function(){return b.asm.Tm.apply(null,arguments)},sp=b._emscripten_bind_btFixedConstraint_setBreakingImpulseThreshold_1=
            function(){return b.asm.Um.apply(null,arguments)},tp=b._emscripten_bind_btFixedConstraint_getParam_2=function(){return b.asm.Vm.apply(null,arguments)},up=b._emscripten_bind_btFixedConstraint_setParam_3=function(){return b.asm.Wm.apply(null,arguments)},vp=b._emscripten_bind_btFixedConstraint___destroy___0=function(){return b.asm.Xm.apply(null,arguments)},wp=b._emscripten_bind_btCollisionDispatcher_btCollisionDispatcher_1=function(){return b.asm.Ym.apply(null,arguments)},xp=b._emscripten_bind_btCollisionDispatcher_setDispatcherFlags_1=
            function(){return b.asm.Zm.apply(null,arguments)},yp=b._emscripten_bind_btCollisionDispatcher_getNumManifolds_0=function(){return b.asm._m.apply(null,arguments)},zp=b._emscripten_bind_btCollisionDispatcher_getManifoldByIndexInternal_1=function(){return b.asm.$m.apply(null,arguments)},Ap=b._emscripten_bind_btCollisionDispatcher___destroy___0=function(){return b.asm.an.apply(null,arguments)},Bp=b._emscripten_bind_btRigidBody_btRigidBody_1=function(){return b.asm.bn.apply(null,arguments)},Cp=b._emscripten_bind_btRigidBody_getCenterOfMassTransform_0=
            function(){return b.asm.cn.apply(null,arguments)},Dp=b._emscripten_bind_btRigidBody_setCenterOfMassTransform_1=function(){return b.asm.dn.apply(null,arguments)},Ep=b._emscripten_bind_btRigidBody_setSleepingThresholds_2=function(){return b.asm.en.apply(null,arguments)},Fp=b._emscripten_bind_btRigidBody_getLinearSleepingThreshold_0=function(){return b.asm.fn.apply(null,arguments)},Gp=b._emscripten_bind_btRigidBody_getLinearDamping_0=function(){return b.asm.gn.apply(null,arguments)},Hp=b._emscripten_bind_btRigidBody_getAngularDamping_0=
            function(){return b.asm.hn.apply(null,arguments)},Ip=b._emscripten_bind_btRigidBody_setDamping_2=function(){return b.asm.jn.apply(null,arguments)},Jp=b._emscripten_bind_btRigidBody_setMassProps_2=function(){return b.asm.kn.apply(null,arguments)},Kp=b._emscripten_bind_btRigidBody_getLinearFactor_0=function(){return b.asm.ln.apply(null,arguments)},Lp=b._emscripten_bind_btRigidBody_setLinearFactor_1=function(){return b.asm.mn.apply(null,arguments)},Mp=b._emscripten_bind_btRigidBody_applyTorque_1=function(){return b.asm.nn.apply(null,
            arguments)},Np=b._emscripten_bind_btRigidBody_applyForce_2=function(){return b.asm.on.apply(null,arguments)},Op=b._emscripten_bind_btRigidBody_applyCentralForce_1=function(){return b.asm.pn.apply(null,arguments)},Pp=b._emscripten_bind_btRigidBody_applyTorqueImpulse_1=function(){return b.asm.qn.apply(null,arguments)},Qp=b._emscripten_bind_btRigidBody_applyImpulse_2=function(){return b.asm.rn.apply(null,arguments)},Rp=b._emscripten_bind_btRigidBody_applyCentralImpulse_1=function(){return b.asm.sn.apply(null,
            arguments)},Sp=b._emscripten_bind_btRigidBody_updateInertiaTensor_0=function(){return b.asm.tn.apply(null,arguments)},Tp=b._emscripten_bind_btRigidBody_getLinearVelocity_0=function(){return b.asm.un.apply(null,arguments)},Up=b._emscripten_bind_btRigidBody_getAngularVelocity_0=function(){return b.asm.vn.apply(null,arguments)},Vp=b._emscripten_bind_btRigidBody_setLinearVelocity_1=function(){return b.asm.wn.apply(null,arguments)},Wp=b._emscripten_bind_btRigidBody_setAngularVelocity_1=function(){return b.asm.xn.apply(null,
            arguments)},Xp=b._emscripten_bind_btRigidBody_getMotionState_0=function(){return b.asm.yn.apply(null,arguments)},Yp=b._emscripten_bind_btRigidBody_setMotionState_1=function(){return b.asm.zn.apply(null,arguments)},Zp=b._emscripten_bind_btRigidBody_getAngularFactor_0=function(){return b.asm.An.apply(null,arguments)},$p=b._emscripten_bind_btRigidBody_setAngularFactor_1=function(){return b.asm.Bn.apply(null,arguments)},aq=b._emscripten_bind_btRigidBody_upcast_1=function(){return b.asm.Cn.apply(null,
            arguments)},bq=b._emscripten_bind_btRigidBody_getAabb_2=function(){return b.asm.Dn.apply(null,arguments)},cq=b._emscripten_bind_btRigidBody_applyGravity_0=function(){return b.asm.En.apply(null,arguments)},dq=b._emscripten_bind_btRigidBody_getGravity_0=function(){return b.asm.Fn.apply(null,arguments)},eq=b._emscripten_bind_btRigidBody_setGravity_1=function(){return b.asm.Gn.apply(null,arguments)},fq=b._emscripten_bind_btRigidBody_getFlags_0=function(){return b.asm.Hn.apply(null,arguments)},gq=b._emscripten_bind_btRigidBody_setFlags_1=
            function(){return b.asm.In.apply(null,arguments)},hq=b._emscripten_bind_btRigidBody_wantsSleeping_0=function(){return b.asm.Jn.apply(null,arguments)},iq=b._emscripten_bind_btRigidBody_clearForces_0=function(){return b.asm.Kn.apply(null,arguments)},jq=b._emscripten_bind_btRigidBody_getTotalForce_0=function(){return b.asm.Ln.apply(null,arguments)},kq=b._emscripten_bind_btRigidBody_getTotalTorque_0=function(){return b.asm.Mn.apply(null,arguments)},lq=b._emscripten_bind_btRigidBody_clearState_0=function(){return b.asm.Nn.apply(null,
            arguments)},mq=b._emscripten_bind_btRigidBody_setAnisotropicFriction_2=function(){return b.asm.On.apply(null,arguments)},nq=b._emscripten_bind_btRigidBody_getCollisionShape_0=function(){return b.asm.Pn.apply(null,arguments)},oq=b._emscripten_bind_btRigidBody_getActivationState_0=function(){return b.asm.Qn.apply(null,arguments)},pq=b._emscripten_bind_btRigidBody_setActivationState_1=function(){return b.asm.Rn.apply(null,arguments)},qq=b._emscripten_bind_btRigidBody_forceActivationState_1=function(){return b.asm.Sn.apply(null,
            arguments)},rq=b._emscripten_bind_btRigidBody_activate_0=function(){return b.asm.Tn.apply(null,arguments)},sq=b._emscripten_bind_btRigidBody_activate_1=function(){return b.asm.Un.apply(null,arguments)},tq=b._emscripten_bind_btRigidBody_isActive_0=function(){return b.asm.Vn.apply(null,arguments)},uq=b._emscripten_bind_btRigidBody_isKinematicObject_0=function(){return b.asm.Wn.apply(null,arguments)},vq=b._emscripten_bind_btRigidBody_isStaticObject_0=function(){return b.asm.Xn.apply(null,arguments)},
            wq=b._emscripten_bind_btRigidBody_isStaticOrKinematicObject_0=function(){return b.asm.Yn.apply(null,arguments)},xq=b._emscripten_bind_btRigidBody_setRestitution_1=function(){return b.asm.Zn.apply(null,arguments)},yq=b._emscripten_bind_btRigidBody_setFriction_1=function(){return b.asm._n.apply(null,arguments)},zq=b._emscripten_bind_btRigidBody_setRollingFriction_1=function(){return b.asm.$n.apply(null,arguments)},Aq=b._emscripten_bind_btRigidBody_setSpinningFriction_1=function(){return b.asm.ao.apply(null,
            arguments)},Bq=b._emscripten_bind_btRigidBody_getWorldTransform_0=function(){return b.asm.bo.apply(null,arguments)},Cq=b._emscripten_bind_btRigidBody_getCollisionFlags_0=function(){return b.asm.co.apply(null,arguments)},Dq=b._emscripten_bind_btRigidBody_setCollisionFlags_1=function(){return b.asm.eo.apply(null,arguments)},Eq=b._emscripten_bind_btRigidBody_setWorldTransform_1=function(){return b.asm.fo.apply(null,arguments)},Fq=b._emscripten_bind_btRigidBody_setCollisionShape_1=function(){return b.asm.go.apply(null,
            arguments)},Gq=b._emscripten_bind_btRigidBody_setCcdMotionThreshold_1=function(){return b.asm.ho.apply(null,arguments)},Hq=b._emscripten_bind_btRigidBody_setCcdSweptSphereRadius_1=function(){return b.asm.io.apply(null,arguments)},Iq=b._emscripten_bind_btRigidBody_getUserIndex_0=function(){return b.asm.jo.apply(null,arguments)},Jq=b._emscripten_bind_btRigidBody_setUserIndex_1=function(){return b.asm.ko.apply(null,arguments)},Kq=b._emscripten_bind_btRigidBody_setUserIndex2_1=function(){return b.asm.lo.apply(null,
            arguments)},Lq=b._emscripten_bind_btRigidBody_setIgnoreCollisionCheck_2=function(){return b.asm.mo.apply(null,arguments)},Mq=b._emscripten_bind_btRigidBody___destroy___0=function(){return b.asm.no.apply(null,arguments)},Nq=b._emscripten_bind_btIndexedMeshArray_size_0=function(){return b.asm.oo.apply(null,arguments)},Oq=b._emscripten_bind_btIndexedMeshArray_at_1=function(){return b.asm.po.apply(null,arguments)},Pq=b._emscripten_bind_btIndexedMeshArray___destroy___0=function(){return b.asm.qo.apply(null,
            arguments)},Qq=b._emscripten_bind_btTransform_btTransform_0=function(){return b.asm.ro.apply(null,arguments)},Rq=b._emscripten_bind_btTransform_btTransform_2=function(){return b.asm.so.apply(null,arguments)},Sq=b._emscripten_bind_btTransform_setIdentity_0=function(){return b.asm.to.apply(null,arguments)},Tq=b._emscripten_bind_btTransform_setOrigin_1=function(){return b.asm.uo.apply(null,arguments)},Uq=b._emscripten_bind_btTransform_setRotation_1=function(){return b.asm.vo.apply(null,arguments)},Vq=
            b._emscripten_bind_btTransform_getOrigin_0=function(){return b.asm.wo.apply(null,arguments)},Wq=b._emscripten_bind_btTransform_getRotation_0=function(){return b.asm.xo.apply(null,arguments)},Xq=b._emscripten_bind_btTransform_getBasis_0=function(){return b.asm.yo.apply(null,arguments)},Yq=b._emscripten_bind_btTransform_inverse_0=function(){return b.asm.zo.apply(null,arguments)},Zq=b._emscripten_bind_btTransform_op_mul_1=function(){return b.asm.Ao.apply(null,arguments)},$q=b._emscripten_bind_btTransform___destroy___0=
            function(){return b.asm.Bo.apply(null,arguments)},ar=b._emscripten_bind_btCylinderShape_btCylinderShape_1=function(){return b.asm.Co.apply(null,arguments)},br=b._emscripten_bind_btCylinderShape_setMargin_1=function(){return b.asm.Do.apply(null,arguments)},cr=b._emscripten_bind_btCylinderShape_getMargin_0=function(){return b.asm.Eo.apply(null,arguments)},dr=b._emscripten_bind_btCylinderShape_updateProp_3=function(){return b.asm.Fo.apply(null,arguments)},er=b._emscripten_bind_btCylinderShape_setLocalScaling_1=
            function(){return b.asm.Go.apply(null,arguments)},fr=b._emscripten_bind_btCylinderShape_getLocalScaling_0=function(){return b.asm.Ho.apply(null,arguments)},gr=b._emscripten_bind_btCylinderShape_calculateLocalInertia_2=function(){return b.asm.Io.apply(null,arguments)},hr=b._emscripten_bind_btCylinderShape_isCompound_0=function(){return b.asm.Jo.apply(null,arguments)},ir=b._emscripten_bind_btCylinderShape_getUserIndex_0=function(){return b.asm.Ko.apply(null,arguments)},jr=b._emscripten_bind_btCylinderShape_setUserIndex_1=
            function(){return b.asm.Lo.apply(null,arguments)},kr=b._emscripten_bind_btCylinderShape_getAabb_3=function(){return b.asm.Mo.apply(null,arguments)},lr=b._emscripten_bind_btCylinderShape_getLocalBoundingSphere_0=function(){return b.asm.No.apply(null,arguments)},mr=b._emscripten_bind_btCylinderShape_getImplicitShapeDimensions_0=function(){return b.asm.Oo.apply(null,arguments)},nr=b._emscripten_bind_btCylinderShape___destroy___0=function(){return b.asm.Po.apply(null,arguments)},or=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_ERP=
            function(){return b.asm.Qo.apply(null,arguments)},pr=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_ERP=function(){return b.asm.Ro.apply(null,arguments)},qr=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_CFM=function(){return b.asm.So.apply(null,arguments)},rr=b._emscripten_enum_btConstraintParams_BT_CONSTRAINT_STOP_CFM=function(){return b.asm.To.apply(null,arguments)},sr=b._emscripten_enum_PHY_ScalarType_PHY_FLOAT=function(){return b.asm.Uo.apply(null,arguments)},tr=b._emscripten_enum_PHY_ScalarType_PHY_DOUBLE=
            function(){return b.asm.Vo.apply(null,arguments)},ur=b._emscripten_enum_PHY_ScalarType_PHY_INTEGER=function(){return b.asm.Wo.apply(null,arguments)},vr=b._emscripten_enum_PHY_ScalarType_PHY_SHORT=function(){return b.asm.Xo.apply(null,arguments)},wr=b._emscripten_enum_PHY_ScalarType_PHY_FIXEDPOINT88=function(){return b.asm.Yo.apply(null,arguments)},xr=b._emscripten_enum_PHY_ScalarType_PHY_UCHAR=function(){return b.asm.Zo.apply(null,arguments)};b._malloc=function(){return b.asm._o.apply(null,arguments)};
            b._free=function(){return b.asm.$o.apply(null,arguments)};var ta=b.__growWasmMemory=function(){return b.asm.ap.apply(null,arguments)};b.dynCall_vi=function(){return b.asm.bp.apply(null,arguments)};b.dynCall_v=function(){return b.asm.cp.apply(null,arguments)};b.asm=gb;
            b.addFunction=function(a,c){var d=ya.length;try{ya.grow(1);}catch(e){if(!e instanceof RangeError)throw e;throw "Unable to grow wasm table. Use a higher value for RESERVED_FUNCTION_POINTERS or set ALLOW_TABLE_GROWTH.";}try{ya.set(d,a);}catch(e){if(!e instanceof TypeError)throw e;assert("undefined"!==typeof c,"Missing signature argument to addFunction");ya.set(d,a);}return d};var yr;b.then=function(a){if(yr)a(b);else {var c=b.onRuntimeInitialized;b.onRuntimeInitialized=function(){c&&c();a(b);};}return b};
            Ta=function zr(){yr||Ar();yr||(Ta=zr);};
            function Ar(){function a(){if(!yr&&(yr=!0,!Ca)){Oa=!0;Ha(La);Ha(Ma);if(b.onRuntimeInitialized)b.onRuntimeInitialized();if(b.postRun)for("function"==typeof b.postRun&&(b.postRun=[b.postRun]);b.postRun.length;){var a=b.postRun.shift();Na.unshift(a);}Ha(Na);}}if(!(0<Ra)){if(b.preRun)for("function"==typeof b.preRun&&(b.preRun=[b.preRun]);b.preRun.length;)Pa();Ha(Ka);0<Ra||(b.setStatus?(b.setStatus("Running..."),setTimeout(function(){setTimeout(function(){b.setStatus("");},1);a();},1)):a());}}b.run=Ar;
            if(b.preInit)for("function"==typeof b.preInit&&(b.preInit=[b.preInit]);0<b.preInit.length;)b.preInit.pop()();Ar();function f(){}f.prototype=Object.create(f.prototype);f.prototype.constructor=f;f.prototype.fp=f;f.gp={};b.WrapperObject=f;function g(a){return (a||f).gp}b.getCache=g;function h(a,c){var d=g(c),e=d[a];if(e)return e;e=Object.create((c||f).prototype);e.ep=a;return d[a]=e}b.wrapPointer=h;b.castObject=function(a,c){return h(a.ep,c)};b.NULL=h(0);
            b.destroy=function(a){if(!a.__destroy__)throw "Error: Cannot destroy object. (Did you create it yourself?)";a.__destroy__();delete g(a.fp)[a.ep];};b.compare=function(a,c){return a.ep===c.ep};b.getPointer=function(a){return a.ep};b.getClass=function(a){return a.fp};function k(){throw "cannot construct a btCollisionShape, no constructor in IDL";}k.prototype=Object.create(f.prototype);k.prototype.constructor=k;k.prototype.fp=k;k.gp={};b.btCollisionShape=k;
            k.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);hb(c,a);};k.prototype.getLocalScaling=function(){return h(ib(this.ep),m)};k.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);jb(d,a,c);};k.prototype.setMargin=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);kb(c,a);};k.prototype.getMargin=function(){return lb(this.ep)};k.prototype.isCompound=function(){return !!mb(this.ep)};
            k.prototype.getUserIndex=function(){return nb(this.ep)};k.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ob(c,a);};k.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);pb(e,a,c,d);};k.prototype.getLocalBoundingSphere=function(){return qb(this.ep)};k.prototype.__destroy__=function(){rb(this.ep);};function n(){this.ep=vb();g(n)[this.ep]=this;}n.prototype=Object.create(f.prototype);
            n.prototype.constructor=n;n.prototype.fp=n;n.gp={};b.btCollisionObject=n;n.prototype.setAnisotropicFriction=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);wb(d,a,c);};n.prototype.getCollisionShape=function(){return h(xb(this.ep),k)};n.prototype.getActivationState=function(){return yb(this.ep)};n.prototype.setActivationState=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);zb(c,a);};
            n.prototype.forceActivationState=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ab(c,a);};n.prototype.activate=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);void 0===a?Bb(c):Cb(c,a);};n.prototype.isActive=function(){return !!Db(this.ep)};n.prototype.isKinematicObject=function(){return !!Eb(this.ep)};n.prototype.isStaticObject=function(){return !!Fb(this.ep)};n.prototype.isStaticOrKinematicObject=function(){return !!Gb(this.ep)};
            n.prototype.setRestitution=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Hb(c,a);};n.prototype.setFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ib(c,a);};n.prototype.setRollingFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Jb(c,a);};n.prototype.setSpinningFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ob(c,a);};n.prototype.getWorldTransform=function(){return h(Pb(this.ep),p)};n.prototype.getCollisionFlags=function(){return Qb(this.ep)};
            n.prototype.setCollisionFlags=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Rb(c,a);};n.prototype.setWorldTransform=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Sb(c,a);};n.prototype.setCollisionShape=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Tb(c,a);};n.prototype.setCcdMotionThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ub(c,a);};n.prototype.setCcdSweptSphereRadius=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Vb(c,a);};
            n.prototype.getUserIndex=function(){return Wb(this.ep)};n.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Xb(c,a);};n.prototype.setUserIndex2=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Yb(c,a);};n.prototype.setIgnoreCollisionCheck=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Zb(d,a,c);};n.prototype.__destroy__=function(){$b(this.ep);};
            function r(){throw "cannot construct a btConvexShape, no constructor in IDL";}r.prototype=Object.create(k.prototype);r.prototype.constructor=r;r.prototype.fp=r;r.gp={};b.btConvexShape=r;r.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);bc(c,a);};r.prototype.getLocalScaling=function(){return h(cc(this.ep),m)};r.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);dc(d,a,c);};
            r.prototype.setMargin=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ec(c,a);};r.prototype.getMargin=function(){return fc(this.ep)};r.prototype.isCompound=function(){return !!hc(this.ep)};r.prototype.getUserIndex=function(){return ic(this.ep)};r.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);jc(c,a);};
            r.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);kc(e,a,c,d);};r.prototype.getLocalBoundingSphere=function(){return lc(this.ep)};r.prototype.__destroy__=function(){mc(this.ep);};function t(){throw "cannot construct a btConcaveShape, no constructor in IDL";}t.prototype=Object.create(k.prototype);t.prototype.constructor=t;t.prototype.fp=t;t.gp={};b.btConcaveShape=t;
            t.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);nc(c,a);};t.prototype.getLocalScaling=function(){return h(oc(this.ep),m)};t.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);pc(d,a,c);};t.prototype.isCompound=function(){return !!qc(this.ep)};t.prototype.getUserIndex=function(){return rc(this.ep)};t.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);sc(c,a);};
            t.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);tc(e,a,c,d);};t.prototype.getLocalBoundingSphere=function(){return uc(this.ep)};t.prototype.__destroy__=function(){vc(this.ep);};function Br(){throw "cannot construct a btCollisionWorld, no constructor in IDL";}Br.prototype=Object.create(f.prototype);Br.prototype.constructor=Br;Br.prototype.fp=Br;Br.gp={};b.btCollisionWorld=Br;
            Br.prototype.getDispatcher=function(){return h(wc(this.ep),Cr)};Br.prototype.rayTest=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);xc(e,a,c,d);};
            Br.prototype.rayTestSingle=function(a,c,d,e,l,q){var C=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);l&&"object"===typeof l&&(l=l.ep);q&&"object"===typeof q&&(q=q.ep);yc(C,a,c,d,e,l,q);};Br.prototype.getPairCache=function(){return h(zc(this.ep),Dr)};
            Br.prototype.addCollisionObject=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);void 0===c?Ac(e,a):void 0===d?Bc(e,a,c):Cc(e,a,c,d);};Br.prototype.removeCollisionObject=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Dc(c,a);};Br.prototype.setContactBreakingThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ec(c,a);};Br.prototype.__destroy__=function(){Fc(this.ep);};
            function u(){throw "cannot construct a btTypedConstraint, no constructor in IDL";}u.prototype=Object.create(f.prototype);u.prototype.constructor=u;u.prototype.fp=u;u.gp={};b.btTypedConstraint=u;u.prototype.enableFeedback=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Gc(c,a);};u.prototype.getBreakingImpulseThreshold=function(){return Hc(this.ep)};u.prototype.setBreakingImpulseThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ic(c,a);};
            u.prototype.getParam=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);return Jc(d,a,c)};u.prototype.setParam=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Kc(e,a,c,d);};u.prototype.__destroy__=function(){Lc(this.ep);};
            function v(a,c,d,e,l){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);l&&"object"===typeof l&&(l=l.ep);this.ep=void 0===e?Mc(a,c,d):void 0===l?_emscripten_bind_btGeneric6DofConstraint_btGeneric6DofConstraint_4(a,c,d,e):Nc(a,c,d,e,l);g(v)[this.ep]=this;}v.prototype=Object.create(u.prototype);v.prototype.constructor=v;v.prototype.fp=v;v.gp={};b.btGeneric6DofConstraint=v;
            v.prototype.setLinearLowerLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Oc(c,a);};v.prototype.setLinearUpperLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Pc(c,a);};v.prototype.setAngularLowerLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Qc(c,a);};v.prototype.setAngularUpperLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Rc(c,a);};v.prototype.getFrameOffsetA=function(){return h(Sc(this.ep),p)};
            v.prototype.enableFeedback=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Tc(c,a);};v.prototype.getBreakingImpulseThreshold=function(){return Uc(this.ep)};v.prototype.setBreakingImpulseThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Vc(c,a);};v.prototype.getParam=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);return Wc(d,a,c)};
            v.prototype.setParam=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Xc(e,a,c,d);};v.prototype.__destroy__=function(){Yc(this.ep);};function Er(){throw "cannot construct a btStridingMeshInterface, no constructor in IDL";}Er.prototype=Object.create(f.prototype);Er.prototype.constructor=Er;Er.prototype.fp=Er;Er.gp={};b.btStridingMeshInterface=Er;
            Er.prototype.setScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Zc(c,a);};Er.prototype.__destroy__=function(){$c(this.ep);};function Fr(){throw "cannot construct a btBroadphaseInterface, no constructor in IDL";}Fr.prototype=Object.create(f.prototype);Fr.prototype.constructor=Fr;Fr.prototype.fp=Fr;Fr.gp={};b.btBroadphaseInterface=Fr;Fr.prototype.getOverlappingPairCache=function(){return h(ad(this.ep),Dr)};Fr.prototype.__destroy__=function(){bd(this.ep);};
            function Gr(){throw "cannot construct a btMotionState, no constructor in IDL";}Gr.prototype=Object.create(f.prototype);Gr.prototype.constructor=Gr;Gr.prototype.fp=Gr;Gr.gp={};b.btMotionState=Gr;Gr.prototype.getWorldTransform=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);cd(c,a);};Gr.prototype.setWorldTransform=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);dd(c,a);};Gr.prototype.__destroy__=function(){ed(this.ep);};
            function w(){throw "cannot construct a btConvexInternalShape, no constructor in IDL";}w.prototype=Object.create(r.prototype);w.prototype.constructor=w;w.prototype.fp=w;w.gp={};b.btConvexInternalShape=w;w.prototype.getImplicitShapeDimensions=function(){return h(fd(this.ep),m)};w.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);gd(c,a);};w.prototype.getLocalScaling=function(){return h(hd(this.ep),m)};
            w.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);id(d,a,c);};w.prototype.setMargin=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);jd(c,a);};w.prototype.getMargin=function(){return kd(this.ep)};w.prototype.isCompound=function(){return !!ld(this.ep)};w.prototype.getUserIndex=function(){return md(this.ep)};w.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);nd(c,a);};
            w.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);od(e,a,c,d);};w.prototype.getLocalBoundingSphere=function(){return pd(this.ep)};w.prototype.__destroy__=function(){qd(this.ep);};function x(){throw "cannot construct a btDynamicsWorld, no constructor in IDL";}x.prototype=Object.create(Br.prototype);x.prototype.constructor=x;x.prototype.fp=x;x.gp={};b.btDynamicsWorld=x;
            x.prototype.addAction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);rd(c,a);};x.prototype.removeAction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);sd(c,a);};x.prototype.getSolverInfo=function(){return h(td(this.ep),y)};x.prototype.getFixedBody=function(){return h(ud(this.ep),z)};x.prototype.getDispatcher=function(){return h(vd(this.ep),Cr)};
            x.prototype.rayTest=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);wd(e,a,c,d);};x.prototype.rayTestSingle=function(a,c,d,e,l,q){var C=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);l&&"object"===typeof l&&(l=l.ep);q&&"object"===typeof q&&(q=q.ep);xd(C,a,c,d,e,l,q);};x.prototype.getPairCache=function(){return h(yd(this.ep),Dr)};
            x.prototype.addCollisionObject=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);void 0===c?zd(e,a):void 0===d?Ad(e,a,c):Bd(e,a,c,d);};x.prototype.removeCollisionObject=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Cd(c,a);};x.prototype.setContactBreakingThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Dd(c,a);};x.prototype.__destroy__=function(){Ed(this.ep);};
            function Cr(){throw "cannot construct a btDispatcher, no constructor in IDL";}Cr.prototype=Object.create(f.prototype);Cr.prototype.constructor=Cr;Cr.prototype.fp=Cr;Cr.gp={};b.btDispatcher=Cr;Cr.prototype.getNumManifolds=function(){return Fd(this.ep)};Cr.prototype.getManifoldByIndexInternal=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return h(Gd(c,a),Hr)};Cr.prototype.__destroy__=function(){Hd(this.ep);};
            function A(){throw "cannot construct a RayResultCallback, no constructor in IDL";}A.prototype=Object.create(f.prototype);A.prototype.constructor=A;A.prototype.fp=A;A.gp={};b.RayResultCallback=A;A.prototype.hasHit=function(){return !!Id(this.ep)};A.prototype.setUseCC=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Jd(c,a);};A.prototype.get_m_collisionFilterGroup=A.prototype.hp=function(){return Kd(this.ep)};
            A.prototype.set_m_collisionFilterGroup=A.prototype.kp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ld(c,a);};Object.defineProperty(A.prototype,"m_collisionFilterGroup",{get:A.prototype.hp,set:A.prototype.kp});A.prototype.get_m_collisionFilterMask=A.prototype.ip=function(){return Md(this.ep)};A.prototype.set_m_collisionFilterMask=A.prototype.lp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Nd(c,a);};
            Object.defineProperty(A.prototype,"m_collisionFilterMask",{get:A.prototype.ip,set:A.prototype.lp});A.prototype.get_m_shapePart=A.prototype.jp=function(){return Od(this.ep)};A.prototype.set_m_shapePart=A.prototype.mp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Pd(c,a);};Object.defineProperty(A.prototype,"m_shapePart",{get:A.prototype.jp,set:A.prototype.mp});A.prototype.get_m_closestHitFraction=A.prototype.np=function(){return Qd(this.ep)};
            A.prototype.set_m_closestHitFraction=A.prototype.pp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Rd(c,a);};Object.defineProperty(A.prototype,"m_closestHitFraction",{get:A.prototype.np,set:A.prototype.pp});A.prototype.get_m_collisionObject=A.prototype.op=function(){return h(Sd(this.ep),n)};A.prototype.set_m_collisionObject=A.prototype.qp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Td(c,a);};Object.defineProperty(A.prototype,"m_collisionObject",{get:A.prototype.op,set:A.prototype.qp});
            A.prototype.__destroy__=function(){Ud(this.ep);};function Ir(){throw "cannot construct a btActionInterface, no constructor in IDL";}Ir.prototype=Object.create(f.prototype);Ir.prototype.constructor=Ir;Ir.prototype.fp=Ir;Ir.gp={};b.btActionInterface=Ir;Ir.prototype.updateAction=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Vd(d,a,c);};Ir.prototype.__destroy__=function(){Wd(this.ep);};
            function Jr(){throw "cannot construct a btTriangleMeshShape, no constructor in IDL";}Jr.prototype=Object.create(t.prototype);Jr.prototype.constructor=Jr;Jr.prototype.fp=Jr;Jr.gp={};b.btTriangleMeshShape=Jr;Jr.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Xd(c,a);};Jr.prototype.getLocalScaling=function(){return h(Yd(this.ep),m)};
            Jr.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Zd(d,a,c);};Jr.prototype.isCompound=function(){return !!$d(this.ep)};Jr.prototype.getUserIndex=function(){return ae(this.ep)};Jr.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);be(c,a);};
            Jr.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);ce(e,a,c,d);};Jr.prototype.getLocalBoundingSphere=function(){return de(this.ep)};Jr.prototype.__destroy__=function(){ee(this.ep);};function B(){this.ep=fe();g(B)[this.ep]=this;}B.prototype=Object.create(n.prototype);B.prototype.constructor=B;B.prototype.fp=B;B.gp={};b.btGhostObject=B;B.prototype.getNumOverlappingObjects=function(){return ge(this.ep)};
            B.prototype.getOverlappingObject=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return h(he(c,a),n)};B.prototype.setAnisotropicFriction=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);ie(d,a,c);};B.prototype.getCollisionShape=function(){return h(je(this.ep),k)};B.prototype.getActivationState=function(){return ke(this.ep)};B.prototype.setActivationState=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);le(c,a);};
            B.prototype.forceActivationState=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);me(c,a);};B.prototype.activate=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);void 0===a?ne(c):oe(c,a);};B.prototype.isActive=function(){return !!pe(this.ep)};B.prototype.isKinematicObject=function(){return !!qe(this.ep)};B.prototype.isStaticObject=function(){return !!re(this.ep)};B.prototype.isStaticOrKinematicObject=function(){return !!se(this.ep)};
            B.prototype.setRestitution=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);te(c,a);};B.prototype.setFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ue(c,a);};B.prototype.setRollingFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ve(c,a);};B.prototype.setSpinningFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);we(c,a);};B.prototype.getWorldTransform=function(){return h(xe(this.ep),p)};B.prototype.getCollisionFlags=function(){return ye(this.ep)};
            B.prototype.setCollisionFlags=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ze(c,a);};B.prototype.setWorldTransform=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ae(c,a);};B.prototype.setCollisionShape=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Be(c,a);};B.prototype.setCcdMotionThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ce(c,a);};B.prototype.setCcdSweptSphereRadius=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);De(c,a);};
            B.prototype.getUserIndex=function(){return Ee(this.ep)};B.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Fe(c,a);};B.prototype.setUserIndex2=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ge(c,a);};B.prototype.setIgnoreCollisionCheck=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);He(d,a,c);};B.prototype.__destroy__=function(){Ie(this.ep);};
            function Kr(){throw "cannot construct a btOverlapFilterCallback, no constructor in IDL";}Kr.prototype=Object.create(f.prototype);Kr.prototype.constructor=Kr;Kr.prototype.fp=Kr;Kr.gp={};b.btOverlapFilterCallback=Kr;Kr.prototype.__destroy__=function(){Je(this.ep);};function D(){throw "cannot construct a btQuadWord, no constructor in IDL";}D.prototype=Object.create(f.prototype);D.prototype.constructor=D;D.prototype.fp=D;D.gp={};b.btQuadWord=D;D.prototype.x=D.prototype.x=function(){return Ke(this.ep)};
            D.prototype.y=D.prototype.y=function(){return Le(this.ep)};D.prototype.z=D.prototype.z=function(){return Me(this.ep)};D.prototype.w=function(){return Ne(this.ep)};D.prototype.setX=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Oe(c,a);};D.prototype.setY=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Pe(c,a);};D.prototype.setZ=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Qe(c,a);};D.prototype.setW=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Re(c,a);};
            D.prototype.__destroy__=function(){Se(this.ep);};function Lr(){throw "cannot construct a btMatrix3x3, no constructor in IDL";}Lr.prototype=Object.create(f.prototype);Lr.prototype.constructor=Lr;Lr.prototype.fp=Lr;Lr.gp={};b.btMatrix3x3=Lr;Lr.prototype.getRotation=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Te(c,a);};Lr.prototype.__destroy__=function(){Ue(this.ep);};function Mr(){throw "cannot construct a btScalarArray, no constructor in IDL";}Mr.prototype=Object.create(f.prototype);
            Mr.prototype.constructor=Mr;Mr.prototype.fp=Mr;Mr.gp={};b.btScalarArray=Mr;Mr.prototype.size=Mr.prototype.size=function(){return Ve(this.ep)};Mr.prototype.at=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return We(c,a)};Mr.prototype.clear=Mr.prototype.clear=function(){Xe(this.ep);};Mr.prototype.__destroy__=function(){Ye(this.ep);};
            function Nr(a,c,d){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);this.ep=void 0===d?Ze(a,c):$e(a,c,d);g(Nr)[this.ep]=this;}Nr.prototype=Object.create(Jr.prototype);Nr.prototype.constructor=Nr;Nr.prototype.fp=Nr;Nr.gp={};b.btBvhTriangleMeshShape=Nr;Nr.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);af(c,a);};Nr.prototype.getLocalScaling=function(){return h(bf(this.ep),m)};
            Nr.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);cf(d,a,c);};Nr.prototype.isCompound=function(){return !!df(this.ep)};Nr.prototype.getUserIndex=function(){return ef(this.ep)};Nr.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ff(c,a);};
            Nr.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);gf(e,a,c,d);};Nr.prototype.getLocalBoundingSphere=function(){return hf(this.ep)};Nr.prototype.__destroy__=function(){jf(this.ep);};function Or(){this.ep=kf();g(Or)[this.ep]=this;}Or.prototype=Object.create(Fr.prototype);Or.prototype.constructor=Or;Or.prototype.fp=Or;Or.gp={};b.btDbvtBroadphase=Or;
            Or.prototype.getOverlappingPairCache=function(){return h(lf(this.ep),Dr)};Or.prototype.__destroy__=function(){mf(this.ep);};function Pr(){throw "cannot construct a btIntArray, no constructor in IDL";}Pr.prototype=Object.create(f.prototype);Pr.prototype.constructor=Pr;Pr.prototype.fp=Pr;Pr.gp={};b.btIntArray=Pr;Pr.prototype.size=Pr.prototype.size=function(){return nf(this.ep)};Pr.prototype.at=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return of(c,a)};
            Pr.prototype.clear=Pr.prototype.clear=function(){pf(this.ep);};Pr.prototype.__destroy__=function(){qf(this.ep);};function Qr(){throw "cannot construct a btConstCollisionObjectArray, no constructor in IDL";}Qr.prototype=Object.create(f.prototype);Qr.prototype.constructor=Qr;Qr.prototype.fp=Qr;Qr.gp={};b.btConstCollisionObjectArray=Qr;Qr.prototype.size=Qr.prototype.size=function(){return rf(this.ep)};Qr.prototype.at=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return h(sf(c,a),n)};
            Qr.prototype.clear=Qr.prototype.clear=function(){tf(this.ep);};Qr.prototype.__destroy__=function(){uf(this.ep);};function E(){throw "cannot construct a btBroadphaseProxy, no constructor in IDL";}E.prototype=Object.create(f.prototype);E.prototype.constructor=E;E.prototype.fp=E;E.gp={};b.btBroadphaseProxy=E;E.prototype.get_m_collisionFilterGroup=E.prototype.hp=function(){return vf(this.ep)};
            E.prototype.set_m_collisionFilterGroup=E.prototype.kp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);wf(c,a);};Object.defineProperty(E.prototype,"m_collisionFilterGroup",{get:E.prototype.hp,set:E.prototype.kp});E.prototype.get_m_collisionFilterMask=E.prototype.ip=function(){return xf(this.ep)};E.prototype.set_m_collisionFilterMask=E.prototype.lp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);yf(c,a);};
            Object.defineProperty(E.prototype,"m_collisionFilterMask",{get:E.prototype.ip,set:E.prototype.lp});E.prototype.__destroy__=function(){zf(this.ep);};function Rr(a,c,d,e,l){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);l&&"object"===typeof l&&(l=l.ep);this.ep=void 0===e?Af(a,c,d):void 0===l?_emscripten_bind_btSliderConstraint_btSliderConstraint_4(a,c,d,e):Bf(a,c,d,e,l);g(Rr)[this.ep]=this;}Rr.prototype=Object.create(u.prototype);
            Rr.prototype.constructor=Rr;Rr.prototype.fp=Rr;Rr.gp={};b.btSliderConstraint=Rr;Rr.prototype.setLowerLinLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Cf(c,a);};Rr.prototype.setUpperLinLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Df(c,a);};Rr.prototype.setLowerAngLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ef(c,a);};Rr.prototype.setUpperAngLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ff(c,a);};
            Rr.prototype.enableFeedback=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Gf(c,a);};Rr.prototype.getBreakingImpulseThreshold=function(){return Hf(this.ep)};Rr.prototype.setBreakingImpulseThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);If(c,a);};Rr.prototype.getParam=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);return Jf(d,a,c)};
            Rr.prototype.setParam=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Kf(e,a,c,d);};Rr.prototype.__destroy__=function(){Lf(this.ep);};function Sr(){throw "cannot construct a btIndexedMesh, no constructor in IDL";}Sr.prototype=Object.create(f.prototype);Sr.prototype.constructor=Sr;Sr.prototype.fp=Sr;Sr.gp={};b.btIndexedMesh=Sr;Sr.prototype.get_m_numTriangles=Sr.prototype.Wp=function(){return Mf(this.ep)};
            Sr.prototype.set_m_numTriangles=Sr.prototype.Fq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Nf(c,a);};Object.defineProperty(Sr.prototype,"m_numTriangles",{get:Sr.prototype.Wp,set:Sr.prototype.Fq});Sr.prototype.__destroy__=function(){Of(this.ep);};function F(a,c,d,e){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);this.ep=void 0===e?Pf(a,c,d):Qf(a,c,d,e);g(F)[this.ep]=this;}F.prototype=Object.create(f.prototype);
            F.prototype.constructor=F;F.prototype.fp=F;F.gp={};b.btRigidBodyConstructionInfo=F;F.prototype.get_m_linearDamping=F.prototype.Qp=function(){return Rf(this.ep)};F.prototype.set_m_linearDamping=F.prototype.zq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Sf(c,a);};Object.defineProperty(F.prototype,"m_linearDamping",{get:F.prototype.Qp,set:F.prototype.zq});F.prototype.get_m_angularDamping=F.prototype.Gp=function(){return Tf(this.ep)};
            F.prototype.set_m_angularDamping=F.prototype.pq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Uf(c,a);};Object.defineProperty(F.prototype,"m_angularDamping",{get:F.prototype.Gp,set:F.prototype.pq});F.prototype.get_m_friction=F.prototype.Lp=function(){return Vf(this.ep)};F.prototype.set_m_friction=F.prototype.uq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Wf(c,a);};Object.defineProperty(F.prototype,"m_friction",{get:F.prototype.Lp,set:F.prototype.uq});
            F.prototype.get_m_rollingFriction=F.prototype.$p=function(){return Xf(this.ep)};F.prototype.set_m_rollingFriction=F.prototype.Jq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Yf(c,a);};Object.defineProperty(F.prototype,"m_rollingFriction",{get:F.prototype.$p,set:F.prototype.Jq});F.prototype.get_m_restitution=F.prototype.Zp=function(){return Zf(this.ep)};F.prototype.set_m_restitution=F.prototype.Iq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);$f(c,a);};
            Object.defineProperty(F.prototype,"m_restitution",{get:F.prototype.Zp,set:F.prototype.Iq});F.prototype.get_m_linearSleepingThreshold=F.prototype.Rp=function(){return ag(this.ep)};F.prototype.set_m_linearSleepingThreshold=F.prototype.Aq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);bg(c,a);};Object.defineProperty(F.prototype,"m_linearSleepingThreshold",{get:F.prototype.Rp,set:F.prototype.Aq});F.prototype.get_m_angularSleepingThreshold=F.prototype.Hp=function(){return cg(this.ep)};
            F.prototype.set_m_angularSleepingThreshold=F.prototype.qq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);dg(c,a);};Object.defineProperty(F.prototype,"m_angularSleepingThreshold",{get:F.prototype.Hp,set:F.prototype.qq});F.prototype.get_m_additionalDamping=F.prototype.Dp=function(){return !!eg(this.ep)};F.prototype.set_m_additionalDamping=F.prototype.mq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);fg(c,a);};
            Object.defineProperty(F.prototype,"m_additionalDamping",{get:F.prototype.Dp,set:F.prototype.mq});F.prototype.get_m_additionalDampingFactor=F.prototype.Ep=function(){return gg(this.ep)};F.prototype.set_m_additionalDampingFactor=F.prototype.nq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);hg(c,a);};Object.defineProperty(F.prototype,"m_additionalDampingFactor",{get:F.prototype.Ep,set:F.prototype.nq});F.prototype.get_m_additionalLinearDampingThresholdSqr=F.prototype.Fp=function(){return ig(this.ep)};
            F.prototype.set_m_additionalLinearDampingThresholdSqr=F.prototype.oq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);jg(c,a);};Object.defineProperty(F.prototype,"m_additionalLinearDampingThresholdSqr",{get:F.prototype.Fp,set:F.prototype.oq});F.prototype.get_m_additionalAngularDampingThresholdSqr=F.prototype.Cp=function(){return kg(this.ep)};F.prototype.set_m_additionalAngularDampingThresholdSqr=F.prototype.lq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);lg(c,a);};
            Object.defineProperty(F.prototype,"m_additionalAngularDampingThresholdSqr",{get:F.prototype.Cp,set:F.prototype.lq});F.prototype.get_m_additionalAngularDampingFactor=F.prototype.Bp=function(){return mg(this.ep)};F.prototype.set_m_additionalAngularDampingFactor=F.prototype.kq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ng(c,a);};Object.defineProperty(F.prototype,"m_additionalAngularDampingFactor",{get:F.prototype.Bp,set:F.prototype.kq});F.prototype.__destroy__=function(){og(this.ep);};
            function G(){throw "cannot construct a btManifoldPoint, no constructor in IDL";}G.prototype=Object.create(f.prototype);G.prototype.constructor=G;G.prototype.fp=G;G.gp={};b.btManifoldPoint=G;G.prototype.getAppliedImpulse=function(){return pg(this.ep)};G.prototype.getDistance=function(){return qg(this.ep)};G.prototype.getShape0=function(){return h(rg(this.ep),k)};G.prototype.getShape1=function(){return h(sg(this.ep),k)};G.prototype.get_m_localPointA=G.prototype.Sp=function(){return h(tg(this.ep),m)};
            G.prototype.set_m_localPointA=G.prototype.Bq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ug(c,a);};Object.defineProperty(G.prototype,"m_localPointA",{get:G.prototype.Sp,set:G.prototype.Bq});G.prototype.get_m_localPointB=G.prototype.Tp=function(){return h(vg(this.ep),m)};G.prototype.set_m_localPointB=G.prototype.Cq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);wg(c,a);};Object.defineProperty(G.prototype,"m_localPointB",{get:G.prototype.Tp,set:G.prototype.Cq});
            G.prototype.get_m_positionWorldOnA=G.prototype.Xp=function(){return h(xg(this.ep),m)};G.prototype.set_m_positionWorldOnA=G.prototype.Gq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);yg(c,a);};Object.defineProperty(G.prototype,"m_positionWorldOnA",{get:G.prototype.Xp,set:G.prototype.Gq});G.prototype.get_m_positionWorldOnB=G.prototype.Yp=function(){return h(zg(this.ep),m)};G.prototype.set_m_positionWorldOnB=G.prototype.Hq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ag(c,a);};
            Object.defineProperty(G.prototype,"m_positionWorldOnB",{get:G.prototype.Yp,set:G.prototype.Hq});G.prototype.get_m_normalWorldOnB=G.prototype.Up=function(){return h(Bg(this.ep),m)};G.prototype.set_m_normalWorldOnB=G.prototype.Dq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Cg(c,a);};Object.defineProperty(G.prototype,"m_normalWorldOnB",{get:G.prototype.Up,set:G.prototype.Dq});G.prototype.get_m_distance1=G.prototype.Kp=function(){return Dg(this.ep)};
            G.prototype.set_m_distance1=G.prototype.tq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Eg(c,a);};Object.defineProperty(G.prototype,"m_distance1",{get:G.prototype.Kp,set:G.prototype.tq});G.prototype.get_m_index0=G.prototype.Op=function(){return Fg(this.ep)};G.prototype.set_m_index0=G.prototype.xq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Gg(c,a);};Object.defineProperty(G.prototype,"m_index0",{get:G.prototype.Op,set:G.prototype.xq});
            G.prototype.get_m_index1=G.prototype.Pp=function(){return Hg(this.ep)};G.prototype.set_m_index1=G.prototype.yq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ig(c,a);};Object.defineProperty(G.prototype,"m_index1",{get:G.prototype.Pp,set:G.prototype.yq});G.prototype.get_m_userPersistentData=G.prototype.hq=function(){return Jg(this.ep)};G.prototype.set_m_userPersistentData=G.prototype.Qq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Kg(c,a);};
            Object.defineProperty(G.prototype,"m_userPersistentData",{get:G.prototype.hq,set:G.prototype.Qq});G.prototype.get_m_userPersistentData0=G.prototype.iq=function(){return Lg(this.ep)};G.prototype.set_m_userPersistentData0=G.prototype.Rq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Mg(c,a);};Object.defineProperty(G.prototype,"m_userPersistentData0",{get:G.prototype.iq,set:G.prototype.Rq});G.prototype.get_m_userPersistentData1=G.prototype.jq=function(){return Ng(this.ep)};
            G.prototype.set_m_userPersistentData1=G.prototype.Sq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Og(c,a);};Object.defineProperty(G.prototype,"m_userPersistentData1",{get:G.prototype.jq,set:G.prototype.Sq});G.prototype.__destroy__=function(){Pg(this.ep);};function Tr(){this.ep=Qg();g(Tr)[this.ep]=this;}Tr.prototype=Object.create(f.prototype);Tr.prototype.constructor=Tr;Tr.prototype.fp=Tr;Tr.gp={};b.btSequentialImpulseConstraintSolver=Tr;Tr.prototype.__destroy__=function(){Rg(this.ep);};
            function H(a,c,d,e){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);this.ep=Sg(a,c,d,e);g(H)[this.ep]=this;}H.prototype=Object.create(x.prototype);H.prototype.constructor=H;H.prototype.fp=H;H.gp={};b.btDiscreteDynamicsWorld=H;H.prototype.setGravity=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Tg(c,a);};H.prototype.getGravity=function(){return h(Ug(this.ep),m)};
            H.prototype.addRigidBody=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);void 0===c?Vg(e,a):void 0===d?_emscripten_bind_btDiscreteDynamicsWorld_addRigidBody_2(e,a,c):Wg(e,a,c,d);};H.prototype.removeRigidBody=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Xg(c,a);};
            H.prototype.addConstraint=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);void 0===c?Yg(d,a):Zg(d,a,c);};H.prototype.removeConstraint=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);$g(c,a);};H.prototype.stepSimulation=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);return void 0===c?ah(e,a):void 0===d?bh(e,a,c):ch(e,a,c,d)};
            H.prototype.getDispatcher=function(){return h(dh(this.ep),Cr)};H.prototype.rayTest=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);eh(e,a,c,d);};H.prototype.rayTestSingle=function(a,c,d,e,l,q){var C=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);l&&"object"===typeof l&&(l=l.ep);q&&"object"===typeof q&&(q=q.ep);fh(C,a,c,d,e,l,q);};
            H.prototype.getPairCache=function(){return h(gh(this.ep),Dr)};H.prototype.addCollisionObject=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);void 0===c?hh(e,a):void 0===d?ih(e,a,c):jh(e,a,c,d);};H.prototype.removeCollisionObject=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);kh(c,a);};H.prototype.setContactBreakingThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);lh(c,a);};
            H.prototype.addAction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);mh(c,a);};H.prototype.removeAction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);nh(c,a);};H.prototype.getSolverInfo=function(){return h(oh(this.ep),y)};H.prototype.getFixedBody=function(){return h(ph(this.ep),z)};H.prototype.__destroy__=function(){qh(this.ep);};
            function I(a,c,d,e){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);this.ep=void 0===d?rh(a,c):void 0===e?_emscripten_bind_btPoint2PointConstraint_btPoint2PointConstraint_3(a,c,d):sh(a,c,d,e);g(I)[this.ep]=this;}I.prototype=Object.create(u.prototype);I.prototype.constructor=I;I.prototype.fp=I;I.gp={};b.btPoint2PointConstraint=I;I.prototype.setPivotA=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);th(c,a);};
            I.prototype.setPivotB=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);uh(c,a);};I.prototype.getPivotInA=function(){return h(vh(this.ep),m)};I.prototype.getPivotInB=function(){return h(wh(this.ep),m)};I.prototype.enableFeedback=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);xh(c,a);};I.prototype.getBreakingImpulseThreshold=function(){return yh(this.ep)};I.prototype.setBreakingImpulseThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);zh(c,a);};
            I.prototype.getParam=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);return Ah(d,a,c)};I.prototype.setParam=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Bh(e,a,c,d);};I.prototype.get_m_setting=I.prototype.aq=function(){return h(Ch(this.ep),J)};I.prototype.set_m_setting=I.prototype.Kq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Dh(c,a);};
            Object.defineProperty(I.prototype,"m_setting",{get:I.prototype.aq,set:I.prototype.Kq});I.prototype.__destroy__=function(){Eh(this.ep);};function Ur(){this.ep=Fh();g(Ur)[this.ep]=this;}Ur.prototype=Object.create(Kr.prototype);Ur.prototype.constructor=Ur;Ur.prototype.fp=Ur;Ur.gp={};b.ccOverlapFilterCallback=Ur;Ur.prototype.__destroy__=function(){Gh(this.ep);};function Vr(a,c){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);this.ep=void 0===c?Hh(a):Ih(a,c);g(Vr)[this.ep]=this;}
            Vr.prototype=Object.create(r.prototype);Vr.prototype.constructor=Vr;Vr.prototype.fp=Vr;Vr.gp={};b.btConvexTriangleMeshShape=Vr;Vr.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Jh(c,a);};Vr.prototype.getLocalScaling=function(){return h(Kh(this.ep),m)};Vr.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Lh(d,a,c);};
            Vr.prototype.setMargin=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Mh(c,a);};Vr.prototype.getMargin=function(){return Nh(this.ep)};Vr.prototype.isCompound=function(){return !!Oh(this.ep)};Vr.prototype.getUserIndex=function(){return Ph(this.ep)};Vr.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Qh(c,a);};
            Vr.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Rh(e,a,c,d);};Vr.prototype.getLocalBoundingSphere=function(){return Sh(this.ep)};Vr.prototype.__destroy__=function(){Th(this.ep);};
            function K(a,c,d,e){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);this.ep=void 0===d?Uh(a,c):void 0===e?_emscripten_bind_btConeTwistConstraint_btConeTwistConstraint_3(a,c,d):Vh(a,c,d,e);g(K)[this.ep]=this;}K.prototype=Object.create(u.prototype);K.prototype.constructor=K;K.prototype.fp=K;K.gp={};b.btConeTwistConstraint=K;
            K.prototype.setLimit=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Wh(d,a,c);};K.prototype.setAngularOnly=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Xh(c,a);};K.prototype.setDamping=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Yh(c,a);};K.prototype.enableMotor=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Zh(c,a);};K.prototype.setMaxMotorImpulse=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);$h(c,a);};
            K.prototype.setMaxMotorImpulseNormalized=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ai(c,a);};K.prototype.setMotorTarget=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);bi(c,a);};K.prototype.setMotorTargetInConstraintSpace=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ci(c,a);};K.prototype.enableFeedback=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);di(c,a);};K.prototype.getBreakingImpulseThreshold=function(){return ei(this.ep)};
            K.prototype.setBreakingImpulseThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);fi(c,a);};K.prototype.getParam=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);return gi(d,a,c)};K.prototype.setParam=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);hi(e,a,c,d);};K.prototype.__destroy__=function(){ii(this.ep);};
            function L(a,c){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);this.ep=ji(a,c);g(L)[this.ep]=this;}L.prototype=Object.create(w.prototype);L.prototype.constructor=L;L.prototype.fp=L;L.gp={};b.btConeShape=L;L.prototype.setRadius=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ki(c,a);};L.prototype.setHeight=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);li(c,a);};L.prototype.setConeUpIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);mi(c,a);};
            L.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ni(c,a);};L.prototype.getLocalScaling=function(){return h(oi(this.ep),m)};L.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);pi(d,a,c);};L.prototype.isCompound=function(){return !!qi(this.ep)};L.prototype.getUserIndex=function(){return ri(this.ep)};L.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);si(c,a);};
            L.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);ti(e,a,c,d);};L.prototype.getLocalBoundingSphere=function(){return ui(this.ep)};L.prototype.getImplicitShapeDimensions=function(){return h(vi(this.ep),m)};L.prototype.__destroy__=function(){wi(this.ep);};
            function Wr(a,c,d,e,l,q,C,Ba,Ia){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);l&&"object"===typeof l&&(l=l.ep);q&&"object"===typeof q&&(q=q.ep);C&&"object"===typeof C&&(C=C.ep);Ba&&"object"===typeof Ba&&(Ba=Ba.ep);Ia&&"object"===typeof Ia&&(Ia=Ia.ep);this.ep=xi(a,c,d,e,l,q,C,Ba,Ia);g(Wr)[this.ep]=this;}Wr.prototype=Object.create(t.prototype);Wr.prototype.constructor=Wr;Wr.prototype.fp=Wr;Wr.gp={};
            b.btHeightfieldTerrainShape=Wr;Wr.prototype.setMargin=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);yi(c,a);};Wr.prototype.getMargin=function(){return zi(this.ep)};Wr.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ai(c,a);};Wr.prototype.getLocalScaling=function(){return h(Bi(this.ep),m)};Wr.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Ci(d,a,c);};
            Wr.prototype.isCompound=function(){return !!Di(this.ep)};Wr.prototype.getUserIndex=function(){return Ei(this.ep)};Wr.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Fi(c,a);};Wr.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Gi(e,a,c,d);};Wr.prototype.getLocalBoundingSphere=function(){return Hi(this.ep)};Wr.prototype.__destroy__=function(){Ii(this.ep);};
            function Xr(){throw "cannot construct a VoidPtr, no constructor in IDL";}Xr.prototype=Object.create(f.prototype);Xr.prototype.constructor=Xr;Xr.prototype.fp=Xr;Xr.gp={};b.VoidPtr=Xr;Xr.prototype.__destroy__=function(){Ji(this.ep);};function Yr(a){a&&"object"===typeof a&&(a=a.ep);this.ep=void 0===a?Ki():Li(a);g(Yr)[this.ep]=this;}Yr.prototype=Object.create(f.prototype);Yr.prototype.constructor=Yr;Yr.prototype.fp=Yr;Yr.gp={};b.btDefaultCollisionConfiguration=Yr;Yr.prototype.__destroy__=function(){Mi(this.ep);};
            function M(){this.ep=Ni();g(M)[this.ep]=this;}M.prototype=Object.create(B.prototype);M.prototype.constructor=M;M.prototype.fp=M;M.gp={};b.btPairCachingGhostObject=M;M.prototype.setAnisotropicFriction=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Oi(d,a,c);};M.prototype.getCollisionShape=function(){return h(Pi(this.ep),k)};M.prototype.getActivationState=function(){return Qi(this.ep)};
            M.prototype.setActivationState=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ri(c,a);};M.prototype.forceActivationState=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Si(c,a);};M.prototype.activate=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);void 0===a?Ti(c):Ui(c,a);};M.prototype.isActive=function(){return !!Vi(this.ep)};M.prototype.isKinematicObject=function(){return !!Wi(this.ep)};M.prototype.isStaticObject=function(){return !!Xi(this.ep)};
            M.prototype.isStaticOrKinematicObject=function(){return !!Yi(this.ep)};M.prototype.setRestitution=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Zi(c,a);};M.prototype.setFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);$i(c,a);};M.prototype.setRollingFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);aj(c,a);};M.prototype.setSpinningFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);bj(c,a);};
            M.prototype.getWorldTransform=function(){return h(cj(this.ep),p)};M.prototype.getCollisionFlags=function(){return dj(this.ep)};M.prototype.setCollisionFlags=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ej(c,a);};M.prototype.setWorldTransform=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);fj(c,a);};M.prototype.setCollisionShape=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);gj(c,a);};
            M.prototype.setCcdMotionThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);hj(c,a);};M.prototype.setCcdSweptSphereRadius=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ij(c,a);};M.prototype.getUserIndex=function(){return jj(this.ep)};M.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);kj(c,a);};M.prototype.setUserIndex2=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);lj(c,a);};
            M.prototype.setIgnoreCollisionCheck=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);mj(d,a,c);};M.prototype.getNumOverlappingObjects=function(){return nj(this.ep)};M.prototype.getOverlappingObject=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return h(oj(c,a),n)};M.prototype.__destroy__=function(){pj(this.ep);};function Zr(){throw "cannot construct a btOverlappingPairCallback, no constructor in IDL";}Zr.prototype=Object.create(f.prototype);
            Zr.prototype.constructor=Zr;Zr.prototype.fp=Zr;Zr.gp={};b.btOverlappingPairCallback=Zr;Zr.prototype.__destroy__=function(){qj(this.ep);};function N(a,c,d,e,l){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);l&&"object"===typeof l&&(l=l.ep);this.ep=void 0===e?rj(a,c,d):void 0===l?_emscripten_bind_btGeneric6DofSpringConstraint_btGeneric6DofSpringConstraint_4(a,c,d,e):sj(a,c,d,e,l);g(N)[this.ep]=this;}N.prototype=Object.create(v.prototype);
            N.prototype.constructor=N;N.prototype.fp=N;N.gp={};b.btGeneric6DofSpringConstraint=N;N.prototype.enableSpring=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);tj(d,a,c);};N.prototype.setStiffness=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);uj(d,a,c);};N.prototype.setDamping=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);vj(d,a,c);};
            N.prototype.setEquilibriumPoint=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);void 0===a?wj(d):void 0===c?xj(d,a):yj(d,a,c);};N.prototype.setLinearLowerLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);zj(c,a);};N.prototype.setLinearUpperLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Aj(c,a);};N.prototype.setAngularLowerLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Bj(c,a);};
            N.prototype.setAngularUpperLimit=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Cj(c,a);};N.prototype.getFrameOffsetA=function(){return h(Dj(this.ep),p)};N.prototype.enableFeedback=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ej(c,a);};N.prototype.getBreakingImpulseThreshold=function(){return Fj(this.ep)};N.prototype.setBreakingImpulseThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Gj(c,a);};
            N.prototype.getParam=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);return Hj(d,a,c)};N.prototype.setParam=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Ij(e,a,c,d);};N.prototype.__destroy__=function(){Jj(this.ep);};function $r(a,c){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);this.ep=void 0===a?Kj():void 0===c?Lj(a):Mj(a,c);g($r)[this.ep]=this;}
            $r.prototype=Object.create(Er.prototype);$r.prototype.constructor=$r;$r.prototype.fp=$r;$r.gp={};b.btTriangleMesh=$r;$r.prototype.addTriangle=function(a,c,d,e){var l=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);void 0===e?Nj(l,a,c,d):Oj(l,a,c,d,e);};
            $r.prototype.addTriangleIndices=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Pj(e,a,c,d);};$r.prototype.getIndexedMeshArray=function(){return h(Qj(this.ep),as)};$r.prototype.setScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Rj(c,a);};$r.prototype.__destroy__=function(){Sj(this.ep);};function bs(){throw "cannot construct a btCollisionConfiguration, no constructor in IDL";}bs.prototype=Object.create(f.prototype);
            bs.prototype.constructor=bs;bs.prototype.fp=bs;bs.gp={};b.btCollisionConfiguration=bs;bs.prototype.__destroy__=function(){Tj(this.ep);};function Hr(){this.ep=Uj();g(Hr)[this.ep]=this;}Hr.prototype=Object.create(f.prototype);Hr.prototype.constructor=Hr;Hr.prototype.fp=Hr;Hr.gp={};b.btPersistentManifold=Hr;Hr.prototype.getBody0=function(){return h(Vj(this.ep),n)};Hr.prototype.getBody1=function(){return h(Wj(this.ep),n)};Hr.prototype.getNumContacts=function(){return Xj(this.ep)};
            Hr.prototype.getContactPoint=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return h(Yj(c,a),G)};Hr.prototype.__destroy__=function(){Zj(this.ep);};function O(a){a&&"object"===typeof a&&(a=a.ep);this.ep=ak(a);g(O)[this.ep]=this;}O.prototype=Object.create(w.prototype);O.prototype.constructor=O;O.prototype.fp=O;O.gp={};b.btBoxShape=O;O.prototype.setMargin=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);bk(c,a);};O.prototype.getMargin=function(){return ck(this.ep)};
            O.prototype.setUnscaledHalfExtents=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);dk(c,a);};O.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ek(c,a);};O.prototype.getLocalScaling=function(){return h(fk(this.ep),m)};O.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);gk(d,a,c);};O.prototype.isCompound=function(){return !!hk(this.ep)};O.prototype.getUserIndex=function(){return ik(this.ep)};
            O.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);jk(c,a);};O.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);kk(e,a,c,d);};O.prototype.getLocalBoundingSphere=function(){return lk(this.ep)};O.prototype.getImplicitShapeDimensions=function(){return h(mk(this.ep),m)};O.prototype.__destroy__=function(){nk(this.ep);};
            function P(a,c){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);this.ep=ok(a,c);g(P)[this.ep]=this;}P.prototype=Object.create(w.prototype);P.prototype.constructor=P;P.prototype.fp=P;P.gp={};b.btCapsuleShape=P;P.prototype.setMargin=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);pk(c,a);};P.prototype.getMargin=function(){return qk(this.ep)};
            P.prototype.updateProp=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);rk(e,a,c,d);};P.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);sk(c,a);};P.prototype.getLocalScaling=function(){return h(tk(this.ep),m)};P.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);uk(d,a,c);};P.prototype.isCompound=function(){return !!vk(this.ep)};
            P.prototype.getUserIndex=function(){return wk(this.ep)};P.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);xk(c,a);};P.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);yk(e,a,c,d);};P.prototype.getLocalBoundingSphere=function(){return zk(this.ep)};P.prototype.getImplicitShapeDimensions=function(){return h(Ak(this.ep),m)};P.prototype.__destroy__=function(){Bk(this.ep);};
            function Q(a){a&&"object"===typeof a&&(a=a.ep);this.ep=void 0===a?Ck():Dk(a);g(Q)[this.ep]=this;}Q.prototype=Object.create(k.prototype);Q.prototype.constructor=Q;Q.prototype.fp=Q;Q.gp={};b.btCompoundShape=Q;Q.prototype.addChildShape=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Ek(d,a,c);};Q.prototype.removeChildShape=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Fk(c,a);};
            Q.prototype.removeChildShapeByIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Gk(c,a);};Q.prototype.getNumChildShapes=function(){return Hk(this.ep)};Q.prototype.getChildShape=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return h(Ik(c,a),k)};Q.prototype.updateChildTransform=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);void 0===d?Jk(e,a,c):Kk(e,a,c,d);};
            Q.prototype.setMargin=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Lk(c,a);};Q.prototype.getMargin=function(){return Mk(this.ep)};Q.prototype.setMaterial=function(a,c,d,e,l,q){var C=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);l&&"object"===typeof l&&(l=l.ep);q&&"object"===typeof q&&(q=q.ep);void 0===e?Nk(C,a,c,d):void 0===l?Ok(C,a,c,d,e):void 0===q?Pk(C,a,c,d,e,l):Qk(C,a,c,d,e,l,q);};
            Q.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Rk(c,a);};Q.prototype.getLocalScaling=function(){return h(Sk(this.ep),m)};Q.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Tk(d,a,c);};Q.prototype.isCompound=function(){return !!Uk(this.ep)};Q.prototype.getUserIndex=function(){return Vk(this.ep)};Q.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Wk(c,a);};
            Q.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Xk(e,a,c,d);};Q.prototype.getLocalBoundingSphere=function(){return Yk(this.ep)};Q.prototype.__destroy__=function(){Zk(this.ep);};function cs(a,c){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);this.ep=void 0===a?$k():void 0===c?al(a):bl(a,c);g(cs)[this.ep]=this;}cs.prototype=Object.create(Gr.prototype);cs.prototype.constructor=cs;
            cs.prototype.fp=cs;cs.gp={};b.btDefaultMotionState=cs;cs.prototype.getWorldTransform=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);cl(c,a);};cs.prototype.setWorldTransform=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);dl(c,a);};cs.prototype.__destroy__=function(){el(this.ep);};function R(a,c){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);this.ep=fl(a,c);g(R)[this.ep]=this;}R.prototype=Object.create(A.prototype);R.prototype.constructor=R;R.prototype.fp=R;
            R.gp={};b.AllHitsRayResultCallback=R;R.prototype.hasHit=function(){return !!gl(this.ep)};R.prototype.setUseCC=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);hl(c,a);};R.prototype.get_m_collisionObjects=R.prototype.Ip=function(){return h(il(this.ep),Qr)};R.prototype.set_m_collisionObjects=R.prototype.rq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);jl(c,a);};Object.defineProperty(R.prototype,"m_collisionObjects",{get:R.prototype.Ip,set:R.prototype.rq});
            R.prototype.get_m_rayFromWorld=R.prototype.up=function(){return h(kl(this.ep),m)};R.prototype.set_m_rayFromWorld=R.prototype.yp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ll(c,a);};Object.defineProperty(R.prototype,"m_rayFromWorld",{get:R.prototype.up,set:R.prototype.yp});R.prototype.get_m_rayToWorld=R.prototype.vp=function(){return h(ml(this.ep),m)};R.prototype.set_m_rayToWorld=R.prototype.zp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);nl(c,a);};
            Object.defineProperty(R.prototype,"m_rayToWorld",{get:R.prototype.vp,set:R.prototype.zp});R.prototype.get_m_hitNormalWorld=R.prototype.sp=function(){return h(ol(this.ep),ds)};R.prototype.set_m_hitNormalWorld=R.prototype.wp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);pl(c,a);};Object.defineProperty(R.prototype,"m_hitNormalWorld",{get:R.prototype.sp,set:R.prototype.wp});R.prototype.get_m_hitPointWorld=R.prototype.tp=function(){return h(ql(this.ep),ds)};
            R.prototype.set_m_hitPointWorld=R.prototype.xp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);rl(c,a);};Object.defineProperty(R.prototype,"m_hitPointWorld",{get:R.prototype.tp,set:R.prototype.xp});R.prototype.get_m_hitFractions=R.prototype.Mp=function(){return h(sl(this.ep),Mr)};R.prototype.set_m_hitFractions=R.prototype.vq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);tl(c,a);};Object.defineProperty(R.prototype,"m_hitFractions",{get:R.prototype.Mp,set:R.prototype.vq});
            R.prototype.get_m_shapeParts=R.prototype.bq=function(){return h(ul(this.ep),Pr)};R.prototype.set_m_shapeParts=R.prototype.Lq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);vl(c,a);};Object.defineProperty(R.prototype,"m_shapeParts",{get:R.prototype.bq,set:R.prototype.Lq});R.prototype.get_m_collisionFilterGroup=R.prototype.hp=function(){return wl(this.ep)};R.prototype.set_m_collisionFilterGroup=R.prototype.kp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);xl(c,a);};
            Object.defineProperty(R.prototype,"m_collisionFilterGroup",{get:R.prototype.hp,set:R.prototype.kp});R.prototype.get_m_collisionFilterMask=R.prototype.ip=function(){return yl(this.ep)};R.prototype.set_m_collisionFilterMask=R.prototype.lp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);zl(c,a);};Object.defineProperty(R.prototype,"m_collisionFilterMask",{get:R.prototype.ip,set:R.prototype.lp});R.prototype.get_m_shapePart=R.prototype.jp=function(){return Al(this.ep)};
            R.prototype.set_m_shapePart=R.prototype.mp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Bl(c,a);};Object.defineProperty(R.prototype,"m_shapePart",{get:R.prototype.jp,set:R.prototype.mp});R.prototype.get_m_closestHitFraction=R.prototype.np=function(){return Cl(this.ep)};R.prototype.set_m_closestHitFraction=R.prototype.pp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Dl(c,a);};Object.defineProperty(R.prototype,"m_closestHitFraction",{get:R.prototype.np,set:R.prototype.pp});
            R.prototype.get_m_collisionObject=R.prototype.op=function(){return h(El(this.ep),n)};R.prototype.set_m_collisionObject=R.prototype.qp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Fl(c,a);};Object.defineProperty(R.prototype,"m_collisionObject",{get:R.prototype.op,set:R.prototype.qp});R.prototype.__destroy__=function(){Gl(this.ep);};function S(a,c){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);this.ep=Hl(a,c);g(S)[this.ep]=this;}S.prototype=Object.create(A.prototype);
            S.prototype.constructor=S;S.prototype.fp=S;S.gp={};b.ClosestRayResultCallback=S;S.prototype.hasHit=function(){return !!Il(this.ep)};S.prototype.setUseCC=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Jl(c,a);};S.prototype.get_m_rayFromWorld=S.prototype.up=function(){return h(Kl(this.ep),m)};S.prototype.set_m_rayFromWorld=S.prototype.yp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ll(c,a);};Object.defineProperty(S.prototype,"m_rayFromWorld",{get:S.prototype.up,set:S.prototype.yp});
            S.prototype.get_m_rayToWorld=S.prototype.vp=function(){return h(Ml(this.ep),m)};S.prototype.set_m_rayToWorld=S.prototype.zp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Nl(c,a);};Object.defineProperty(S.prototype,"m_rayToWorld",{get:S.prototype.vp,set:S.prototype.zp});S.prototype.get_m_hitNormalWorld=S.prototype.sp=function(){return h(Ol(this.ep),m)};S.prototype.set_m_hitNormalWorld=S.prototype.wp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Pl(c,a);};
            Object.defineProperty(S.prototype,"m_hitNormalWorld",{get:S.prototype.sp,set:S.prototype.wp});S.prototype.get_m_hitPointWorld=S.prototype.tp=function(){return h(Ql(this.ep),m)};S.prototype.set_m_hitPointWorld=S.prototype.xp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Rl(c,a);};Object.defineProperty(S.prototype,"m_hitPointWorld",{get:S.prototype.tp,set:S.prototype.xp});S.prototype.get_m_collisionFilterGroup=S.prototype.hp=function(){return Sl(this.ep)};
            S.prototype.set_m_collisionFilterGroup=S.prototype.kp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Tl(c,a);};Object.defineProperty(S.prototype,"m_collisionFilterGroup",{get:S.prototype.hp,set:S.prototype.kp});S.prototype.get_m_collisionFilterMask=S.prototype.ip=function(){return Ul(this.ep)};S.prototype.set_m_collisionFilterMask=S.prototype.lp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Vl(c,a);};
            Object.defineProperty(S.prototype,"m_collisionFilterMask",{get:S.prototype.ip,set:S.prototype.lp});S.prototype.get_m_shapePart=S.prototype.jp=function(){return Wl(this.ep)};S.prototype.set_m_shapePart=S.prototype.mp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Xl(c,a);};Object.defineProperty(S.prototype,"m_shapePart",{get:S.prototype.jp,set:S.prototype.mp});S.prototype.get_m_closestHitFraction=S.prototype.np=function(){return Yl(this.ep)};
            S.prototype.set_m_closestHitFraction=S.prototype.pp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Zl(c,a);};Object.defineProperty(S.prototype,"m_closestHitFraction",{get:S.prototype.np,set:S.prototype.pp});S.prototype.get_m_collisionObject=S.prototype.op=function(){return h($l(this.ep),n)};S.prototype.set_m_collisionObject=S.prototype.qp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);am(c,a);};Object.defineProperty(S.prototype,"m_collisionObject",{get:S.prototype.op,set:S.prototype.qp});
            S.prototype.__destroy__=function(){bm(this.ep);};function T(a,c,d,e){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);this.ep=void 0===e?cm(a,c,d):dm(a,c,d,e);g(T)[this.ep]=this;}T.prototype=Object.create(Ir.prototype);T.prototype.constructor=T;T.prototype.fp=T;T.gp={};b.ccKinematicCharacterController=T;T.prototype.setUpAxis=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);em(c,a);};
            T.prototype.setWalkDirection=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);fm(c,a);};T.prototype.setVelocityForTimeInterval=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);gm(d,a,c);};T.prototype.warp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);hm(c,a);};T.prototype.preStep=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);im(c,a);};
            T.prototype.playerStep=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);jm(d,a,c);};T.prototype.setFallSpeed=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);km(c,a);};T.prototype.setJumpSpeed=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);lm(c,a);};T.prototype.setMaxJumpHeight=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);mm(c,a);};T.prototype.canJump=function(){return !!nm(this.ep)};T.prototype.jump=function(){om(this.ep);};
            T.prototype.setGravity=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);pm(c,a);};T.prototype.getGravity=function(){return qm(this.ep)};T.prototype.setMaxSlope=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);rm(c,a);};T.prototype.getMaxSlope=function(){return sm(this.ep)};T.prototype.getGhostObject=function(){return h(tm(this.ep),M)};T.prototype.setUseGhostSweepTest=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);um(c,a);};T.prototype.onGround=function(){return !!wm(this.ep)};
            T.prototype.setUpInterpolate=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);xm(c,a);};T.prototype.updateAction=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);ym(d,a,c);};T.prototype.__destroy__=function(){zm(this.ep);};
            function U(a,c,d,e,l,q,C){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);l&&"object"===typeof l&&(l=l.ep);q&&"object"===typeof q&&(q=q.ep);C&&"object"===typeof C&&(C=C.ep);this.ep=void 0===d?Am(a,c):void 0===e?Bm(a,c,d):void 0===l?Cm(a,c,d,e):void 0===q?Dm(a,c,d,e,l):void 0===C?Em(a,c,d,e,l,q):Fm(a,c,d,e,l,q,C);g(U)[this.ep]=this;}U.prototype=Object.create(u.prototype);U.prototype.constructor=U;U.prototype.fp=U;
            U.gp={};b.btHingeConstraint=U;U.prototype.setLimit=function(a,c,d,e,l){var q=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);l&&"object"===typeof l&&(l=l.ep);void 0===l?Gm(q,a,c,d,e):Hm(q,a,c,d,e,l);};U.prototype.enableAngularMotor=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Im(e,a,c,d);};
            U.prototype.setAngularOnly=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Jm(c,a);};U.prototype.enableMotor=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Km(c,a);};U.prototype.setMaxMotorImpulse=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Lm(c,a);};U.prototype.setMotorTarget=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Mm(d,a,c);};
            U.prototype.setFrames=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Nm(d,a,c);};U.prototype.setAxis=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Om(c,a);};U.prototype.setUseReferenceFrameA=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Pm(c,a);};U.prototype.enableFeedback=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Qm(c,a);};U.prototype.getBreakingImpulseThreshold=function(){return Rm(this.ep)};
            U.prototype.setBreakingImpulseThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Sm(c,a);};U.prototype.getParam=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);return Tm(d,a,c)};U.prototype.setParam=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Um(e,a,c,d);};U.prototype.__destroy__=function(){Vm(this.ep);};
            function V(a,c,d,e){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);this.ep=Wm(a,c,d,e);g(V)[this.ep]=this;}V.prototype=Object.create(D.prototype);V.prototype.constructor=V;V.prototype.fp=V;V.gp={};b.btQuaternion=V;V.prototype.setValue=function(a,c,d,e){var l=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);Xm(l,a,c,d,e);};
            V.prototype.x=V.prototype.x=function(){return Ym(this.ep)};V.prototype.y=V.prototype.y=function(){return Zm(this.ep)};V.prototype.z=V.prototype.z=function(){return $m(this.ep)};V.prototype.w=function(){return an(this.ep)};V.prototype.setX=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);bn(c,a);};V.prototype.setY=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);cn(c,a);};V.prototype.setZ=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);dn(c,a);};
            V.prototype.setW=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);en(c,a);};V.prototype.__destroy__=function(){fn(this.ep);};function es(){this.ep=gn();g(es)[this.ep]=this;}es.prototype=Object.create(r.prototype);es.prototype.constructor=es;es.prototype.fp=es;es.gp={};b.btBU_Simplex1to4=es;es.prototype.addVertex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);hn(c,a);};es.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);jn(c,a);};
            es.prototype.getLocalScaling=function(){return h(kn(this.ep),m)};es.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);ln(d,a,c);};es.prototype.isCompound=function(){return !!mn(this.ep)};es.prototype.getUserIndex=function(){return nn(this.ep)};es.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);on(c,a);};
            es.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);pn(e,a,c,d);};es.prototype.getLocalBoundingSphere=function(){return qn(this.ep)};es.prototype.__destroy__=function(){rn(this.ep);};function y(){throw "cannot construct a btContactSolverInfo, no constructor in IDL";}y.prototype=Object.create(f.prototype);y.prototype.constructor=y;y.prototype.fp=y;y.gp={};b.btContactSolverInfo=y;
            y.prototype.get_m_splitImpulse=y.prototype.cq=function(){return !!sn(this.ep)};y.prototype.set_m_splitImpulse=y.prototype.Mq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);tn(c,a);};Object.defineProperty(y.prototype,"m_splitImpulse",{get:y.prototype.cq,set:y.prototype.Mq});y.prototype.get_m_splitImpulsePenetrationThreshold=y.prototype.eq=function(){return un(this.ep)};
            y.prototype.set_m_splitImpulsePenetrationThreshold=y.prototype.Nq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);vn(c,a);};Object.defineProperty(y.prototype,"m_splitImpulsePenetrationThreshold",{get:y.prototype.eq,set:y.prototype.Nq});y.prototype.get_m_numIterations=y.prototype.Vp=function(){return wn(this.ep)};y.prototype.set_m_numIterations=y.prototype.Eq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);xn(c,a);};
            Object.defineProperty(y.prototype,"m_numIterations",{get:y.prototype.Vp,set:y.prototype.Eq});y.prototype.__destroy__=function(){yn(this.ep);};function W(a,c,d,e){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);this.ep=void 0===e?zn(a,c,d):An(a,c,d,e);g(W)[this.ep]=this;}W.prototype=Object.create(Ir.prototype);W.prototype.constructor=W;W.prototype.fp=W;W.gp={};b.btKinematicCharacterController=W;
            W.prototype.setUp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Bn(c,a);};W.prototype.setWalkDirection=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Cn(c,a);};W.prototype.setVelocityForTimeInterval=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Dn(d,a,c);};W.prototype.reset=W.prototype.reset=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);En(c,a);};
            W.prototype.warp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Fn(c,a);};W.prototype.preStep=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Gn(c,a);};W.prototype.playerStep=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Hn(d,a,c);};W.prototype.setFallSpeed=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);In(c,a);};W.prototype.setJumpSpeed=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Jn(c,a);};
            W.prototype.setMaxJumpHeight=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Kn(c,a);};W.prototype.canJump=function(){return !!Ln(this.ep)};W.prototype.jump=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);void 0===a?Mn(c):Nn(c,a);};W.prototype.setGravity=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);On(c,a);};W.prototype.getGravity=function(){return h(Pn(this.ep),m)};W.prototype.setMaxSlope=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Qn(c,a);};
            W.prototype.getMaxSlope=function(){return Rn(this.ep)};W.prototype.getGhostObject=function(){return h(Sn(this.ep),M)};W.prototype.setUseGhostSweepTest=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Tn(c,a);};W.prototype.onGround=function(){return !!Un(this.ep)};W.prototype.setUpInterpolate=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Vn(c,a);};W.prototype.updateAction=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Wn(d,a,c);};
            W.prototype.__destroy__=function(){Xn(this.ep);};function gs(a,c){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);this.ep=Yn(a,c);g(gs)[this.ep]=this;}gs.prototype=Object.create(t.prototype);gs.prototype.constructor=gs;gs.prototype.fp=gs;gs.gp={};b.btStaticPlaneShape=gs;gs.prototype.getPlaneNormal=function(){return h(Zn(this.ep),m)};gs.prototype.setPlaneConstant=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);$n(c,a);};
            gs.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ao(c,a);};gs.prototype.getLocalScaling=function(){return h(bo(this.ep),m)};gs.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);co(d,a,c);};gs.prototype.isCompound=function(){return !!eo(this.ep)};gs.prototype.getUserIndex=function(){return fo(this.ep)};
            gs.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);go(c,a);};gs.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);ho(e,a,c,d);};gs.prototype.getLocalBoundingSphere=function(){return io(this.ep)};gs.prototype.__destroy__=function(){jo(this.ep);};function Dr(){throw "cannot construct a btOverlappingPairCache, no constructor in IDL";}Dr.prototype=Object.create(f.prototype);
            Dr.prototype.constructor=Dr;Dr.prototype.fp=Dr;Dr.gp={};b.btOverlappingPairCache=Dr;Dr.prototype.setInternalGhostPairCallback=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ko(c,a);};Dr.prototype.setOverlapFilterCallback=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);lo(c,a);};Dr.prototype.getNumOverlappingPairs=function(){return mo(this.ep)};Dr.prototype.__destroy__=function(){no(this.ep);};
            function m(a,c,d){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);this.ep=void 0===a?oo():void 0===c?_emscripten_bind_btVector3_btVector3_1(a):void 0===d?_emscripten_bind_btVector3_btVector3_2(a,c):po(a,c,d);g(m)[this.ep]=this;}m.prototype=Object.create(f.prototype);m.prototype.constructor=m;m.prototype.fp=m;m.gp={};b.btVector3=m;m.prototype.x=m.prototype.x=function(){return qo(this.ep)};m.prototype.y=m.prototype.y=function(){return ro(this.ep)};
            m.prototype.z=m.prototype.z=function(){return so(this.ep)};m.prototype.setX=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);to(c,a);};m.prototype.setY=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);uo(c,a);};m.prototype.setZ=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);vo(c,a);};m.prototype.setValue=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);wo(e,a,c,d);};
            m.prototype.__destroy__=function(){xo(this.ep);};function X(a){a&&"object"===typeof a&&(a=a.ep);this.ep=yo(a);g(X)[this.ep]=this;}X.prototype=Object.create(w.prototype);X.prototype.constructor=X;X.prototype.fp=X;X.gp={};b.btSphereShape=X;X.prototype.setMargin=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);zo(c,a);};X.prototype.getMargin=function(){return Ao(this.ep)};X.prototype.setUnscaledRadius=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Bo(c,a);};
            X.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Co(c,a);};X.prototype.getLocalScaling=function(){return h(Do(this.ep),m)};X.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Eo(d,a,c);};X.prototype.isCompound=function(){return !!Fo(this.ep)};X.prototype.getUserIndex=function(){return Go(this.ep)};X.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Ho(c,a);};
            X.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Io(e,a,c,d);};X.prototype.getLocalBoundingSphere=function(){return Jo(this.ep)};X.prototype.getImplicitShapeDimensions=function(){return h(Ko(this.ep),m)};X.prototype.__destroy__=function(){Lo(this.ep);};function hs(){this.ep=Mo();g(hs)[this.ep]=this;}hs.prototype=Object.create(f.prototype);hs.prototype.constructor=hs;hs.prototype.fp=hs;hs.gp={};
            b.btDefaultCollisionConstructionInfo=hs;hs.prototype.__destroy__=function(){No(this.ep);};function is(){this.ep=Oo();g(is)[this.ep]=this;}is.prototype=Object.create(t.prototype);is.prototype.constructor=is;is.prototype.fp=is;is.gp={};b.btEmptyShape=is;is.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Po(c,a);};is.prototype.getLocalScaling=function(){return h(Qo(this.ep),m)};
            is.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Ro(d,a,c);};is.prototype.isCompound=function(){return !!So(this.ep)};is.prototype.getUserIndex=function(){return To(this.ep)};is.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Uo(c,a);};
            is.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);Vo(e,a,c,d);};is.prototype.getLocalBoundingSphere=function(){return Wo(this.ep)};is.prototype.__destroy__=function(){Xo(this.ep);};function J(){this.ep=Yo();g(J)[this.ep]=this;}J.prototype=Object.create(f.prototype);J.prototype.constructor=J;J.prototype.fp=J;J.gp={};b.btConstraintSetting=J;J.prototype.get_m_tau=J.prototype.fq=function(){return Zo(this.ep)};
            J.prototype.set_m_tau=J.prototype.Oq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);$o(c,a);};Object.defineProperty(J.prototype,"m_tau",{get:J.prototype.fq,set:J.prototype.Oq});J.prototype.get_m_damping=J.prototype.Jp=function(){return ap(this.ep)};J.prototype.set_m_damping=J.prototype.sq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);bp(c,a);};Object.defineProperty(J.prototype,"m_damping",{get:J.prototype.Jp,set:J.prototype.sq});
            J.prototype.get_m_impulseClamp=J.prototype.Np=function(){return cp(this.ep)};J.prototype.set_m_impulseClamp=J.prototype.wq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);dp(c,a);};Object.defineProperty(J.prototype,"m_impulseClamp",{get:J.prototype.Np,set:J.prototype.wq});J.prototype.__destroy__=function(){ep(this.ep);};function Y(){throw "cannot construct a LocalShapeInfo, no constructor in IDL";}Y.prototype=Object.create(f.prototype);Y.prototype.constructor=Y;Y.prototype.fp=Y;Y.gp={};
            b.LocalShapeInfo=Y;Y.prototype.get_m_shapePart=Y.prototype.jp=function(){return fp(this.ep)};Y.prototype.set_m_shapePart=Y.prototype.mp=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);gp(c,a);};Object.defineProperty(Y.prototype,"m_shapePart",{get:Y.prototype.jp,set:Y.prototype.mp});Y.prototype.get_m_triangleIndex=Y.prototype.gq=function(){return hp(this.ep)};Y.prototype.set_m_triangleIndex=Y.prototype.Pq=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);ip(c,a);};
            Object.defineProperty(Y.prototype,"m_triangleIndex",{get:Y.prototype.gq,set:Y.prototype.Pq});Y.prototype.__destroy__=function(){jp(this.ep);};function ds(){throw "cannot construct a btVector3Array, no constructor in IDL";}ds.prototype=Object.create(f.prototype);ds.prototype.constructor=ds;ds.prototype.fp=ds;ds.gp={};b.btVector3Array=ds;ds.prototype.size=ds.prototype.size=function(){return kp(this.ep)};ds.prototype.at=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return h(lp(c,a),m)};
            ds.prototype.clear=ds.prototype.clear=function(){mp(this.ep);};ds.prototype.__destroy__=function(){np(this.ep);};function js(){throw "cannot construct a btConstraintSolver, no constructor in IDL";}js.prototype=Object.create(f.prototype);js.prototype.constructor=js;js.prototype.fp=js;js.gp={};b.btConstraintSolver=js;js.prototype.__destroy__=function(){op(this.ep);};
            function ks(a,c,d,e){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);e&&"object"===typeof e&&(e=e.ep);this.ep=pp(a,c,d,e);g(ks)[this.ep]=this;}ks.prototype=Object.create(u.prototype);ks.prototype.constructor=ks;ks.prototype.fp=ks;ks.gp={};b.btFixedConstraint=ks;ks.prototype.enableFeedback=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);qp(c,a);};ks.prototype.getBreakingImpulseThreshold=function(){return rp(this.ep)};
            ks.prototype.setBreakingImpulseThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);sp(c,a);};ks.prototype.getParam=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);return tp(d,a,c)};ks.prototype.setParam=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);up(e,a,c,d);};ks.prototype.__destroy__=function(){vp(this.ep);};
            function ls(a){a&&"object"===typeof a&&(a=a.ep);this.ep=wp(a);g(ls)[this.ep]=this;}ls.prototype=Object.create(Cr.prototype);ls.prototype.constructor=ls;ls.prototype.fp=ls;ls.gp={};b.btCollisionDispatcher=ls;ls.prototype.setDispatcherFlags=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);xp(c,a);};ls.prototype.getNumManifolds=function(){return yp(this.ep)};ls.prototype.getManifoldByIndexInternal=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return h(zp(c,a),Hr)};
            ls.prototype.__destroy__=function(){Ap(this.ep);};function z(a){a&&"object"===typeof a&&(a=a.ep);this.ep=Bp(a);g(z)[this.ep]=this;}z.prototype=Object.create(n.prototype);z.prototype.constructor=z;z.prototype.fp=z;z.gp={};b.btRigidBody=z;z.prototype.getCenterOfMassTransform=function(){return h(Cp(this.ep),p)};z.prototype.setCenterOfMassTransform=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Dp(c,a);};
            z.prototype.setSleepingThresholds=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Ep(d,a,c);};z.prototype.getLinearSleepingThreshold=function(){return Fp(this.ep)};z.prototype.getLinearDamping=function(){return Gp(this.ep)};z.prototype.getAngularDamping=function(){return Hp(this.ep)};z.prototype.setDamping=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Ip(d,a,c);};
            z.prototype.setMassProps=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Jp(d,a,c);};z.prototype.getLinearFactor=function(){return h(Kp(this.ep),m)};z.prototype.setLinearFactor=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Lp(c,a);};z.prototype.applyTorque=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Mp(c,a);};
            z.prototype.applyForce=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Np(d,a,c);};z.prototype.applyCentralForce=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Op(c,a);};z.prototype.applyTorqueImpulse=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Pp(c,a);};z.prototype.applyImpulse=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Qp(d,a,c);};
            z.prototype.applyCentralImpulse=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Rp(c,a);};z.prototype.updateInertiaTensor=function(){Sp(this.ep);};z.prototype.getLinearVelocity=function(){return h(Tp(this.ep),m)};z.prototype.getAngularVelocity=function(){return h(Up(this.ep),m)};z.prototype.setLinearVelocity=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Vp(c,a);};z.prototype.setAngularVelocity=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Wp(c,a);};
            z.prototype.getMotionState=function(){return h(Xp(this.ep),Gr)};z.prototype.setMotionState=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Yp(c,a);};z.prototype.getAngularFactor=function(){return h(Zp(this.ep),m)};z.prototype.setAngularFactor=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);$p(c,a);};z.prototype.upcast=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return h(aq(c,a),z)};
            z.prototype.getAabb=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);bq(d,a,c);};z.prototype.applyGravity=function(){cq(this.ep);};z.prototype.getGravity=function(){return h(dq(this.ep),m)};z.prototype.setGravity=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);eq(c,a);};z.prototype.getFlags=function(){return fq(this.ep)};z.prototype.setFlags=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);gq(c,a);};z.prototype.wantsSleeping=function(){return !!hq(this.ep)};
            z.prototype.clearForces=function(){iq(this.ep);};z.prototype.getTotalForce=function(){return h(jq(this.ep),m)};z.prototype.getTotalTorque=function(){return h(kq(this.ep),m)};z.prototype.clearState=function(){lq(this.ep);};z.prototype.setAnisotropicFriction=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);mq(d,a,c);};z.prototype.getCollisionShape=function(){return h(nq(this.ep),k)};z.prototype.getActivationState=function(){return oq(this.ep)};
            z.prototype.setActivationState=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);pq(c,a);};z.prototype.forceActivationState=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);qq(c,a);};z.prototype.activate=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);void 0===a?rq(c):sq(c,a);};z.prototype.isActive=function(){return !!tq(this.ep)};z.prototype.isKinematicObject=function(){return !!uq(this.ep)};z.prototype.isStaticObject=function(){return !!vq(this.ep)};
            z.prototype.isStaticOrKinematicObject=function(){return !!wq(this.ep)};z.prototype.setRestitution=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);xq(c,a);};z.prototype.setFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);yq(c,a);};z.prototype.setRollingFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);zq(c,a);};z.prototype.setSpinningFriction=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Aq(c,a);};
            z.prototype.getWorldTransform=function(){return h(Bq(this.ep),p)};z.prototype.getCollisionFlags=function(){return Cq(this.ep)};z.prototype.setCollisionFlags=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Dq(c,a);};z.prototype.setWorldTransform=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Eq(c,a);};z.prototype.setCollisionShape=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Fq(c,a);};
            z.prototype.setCcdMotionThreshold=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Gq(c,a);};z.prototype.setCcdSweptSphereRadius=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Hq(c,a);};z.prototype.getUserIndex=function(){return Iq(this.ep)};z.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Jq(c,a);};z.prototype.setUserIndex2=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Kq(c,a);};
            z.prototype.setIgnoreCollisionCheck=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);Lq(d,a,c);};z.prototype.__destroy__=function(){Mq(this.ep);};function as(){throw "cannot construct a btIndexedMeshArray, no constructor in IDL";}as.prototype=Object.create(f.prototype);as.prototype.constructor=as;as.prototype.fp=as;as.gp={};b.btIndexedMeshArray=as;as.prototype.size=as.prototype.size=function(){return Nq(this.ep)};
            as.prototype.at=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return h(Oq(c,a),Sr)};as.prototype.__destroy__=function(){Pq(this.ep);};function p(a,c){a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);this.ep=void 0===a?Qq():void 0===c?_emscripten_bind_btTransform_btTransform_1(a):Rq(a,c);g(p)[this.ep]=this;}p.prototype=Object.create(f.prototype);p.prototype.constructor=p;p.prototype.fp=p;p.gp={};b.btTransform=p;p.prototype.setIdentity=function(){Sq(this.ep);};
            p.prototype.setOrigin=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Tq(c,a);};p.prototype.setRotation=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);Uq(c,a);};p.prototype.getOrigin=function(){return h(Vq(this.ep),m)};p.prototype.getRotation=function(){return h(Wq(this.ep),V)};p.prototype.getBasis=function(){return h(Xq(this.ep),Lr)};p.prototype.inverse=p.prototype.inverse=function(){return h(Yq(this.ep),p)};
            p.prototype.op_mul=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);return h(Zq(c,a),p)};p.prototype.__destroy__=function(){$q(this.ep);};function Z(a){a&&"object"===typeof a&&(a=a.ep);this.ep=ar(a);g(Z)[this.ep]=this;}Z.prototype=Object.create(w.prototype);Z.prototype.constructor=Z;Z.prototype.fp=Z;Z.gp={};b.btCylinderShape=Z;Z.prototype.setMargin=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);br(c,a);};Z.prototype.getMargin=function(){return cr(this.ep)};
            Z.prototype.updateProp=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);dr(e,a,c,d);};Z.prototype.setLocalScaling=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);er(c,a);};Z.prototype.getLocalScaling=function(){return h(fr(this.ep),m)};Z.prototype.calculateLocalInertia=function(a,c){var d=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);gr(d,a,c);};Z.prototype.isCompound=function(){return !!hr(this.ep)};
            Z.prototype.getUserIndex=function(){return ir(this.ep)};Z.prototype.setUserIndex=function(a){var c=this.ep;a&&"object"===typeof a&&(a=a.ep);jr(c,a);};Z.prototype.getAabb=function(a,c,d){var e=this.ep;a&&"object"===typeof a&&(a=a.ep);c&&"object"===typeof c&&(c=c.ep);d&&"object"===typeof d&&(d=d.ep);kr(e,a,c,d);};Z.prototype.getLocalBoundingSphere=function(){return lr(this.ep)};Z.prototype.getImplicitShapeDimensions=function(){return h(mr(this.ep),m)};Z.prototype.__destroy__=function(){nr(this.ep);};
            (function(){function a(){b.BT_CONSTRAINT_ERP=or();b.BT_CONSTRAINT_STOP_ERP=pr();b.BT_CONSTRAINT_CFM=qr();b.BT_CONSTRAINT_STOP_CFM=rr();b.PHY_FLOAT=sr();b.PHY_DOUBLE=tr();b.PHY_INTEGER=ur();b.PHY_SHORT=vr();b.PHY_FIXEDPOINT88=wr();b.PHY_UCHAR=xr();}Oa?a():Ma.unshift(a);})();this.Ammo=b;


              return Ammo
            }
            );
            })();
            module.exports = Ammo;
            });

            const isWasm = false;
            const wasmBinaryURL = '';

            const Ammo = exports('dS', {});
            function waitForAmmoInstantiation(wasmBinary) {
              const ammoClosureThis = {};

              if (typeof wasmBinary !== 'undefined') {
                {
                  Ammo.wasmBinary = wasmBinary;
                }
              }

              return new Promise((resolve, reject) => {
                ammo.call(ammoClosureThis, Ammo).then(() => {
                  resolve();
                });
              });
            }

            (function (_waitForAmmoInstantiation) {
              const isWasm$1 = _waitForAmmoInstantiation.isWasm = isWasm;
              const wasmBinaryURL$1 = _waitForAmmoInstantiation.wasmBinaryURL = wasmBinaryURL;
            })(waitForAmmoInstantiation || (waitForAmmoInstantiation = exports('f_', {})));

        }
    };
});
